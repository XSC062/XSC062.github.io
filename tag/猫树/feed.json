{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"猫树\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20250822/",
            "url": "https://xsc062.netlify.app/20250822/",
            "title": "猫树 学习笔记",
            "date_published": "2025-08-22T01:13:46.000Z",
            "content_html": "<p>分治树</p>\n<span id=\"more\"></span>\n<hr />\n<h2 id=\"概念\">概念</h2>\n<ul>\n<li>线段树不能维护背包的原因是 pushup 复杂度太高（单次 <span class=\"math inline\">\\(O(V^2)\\)</span>）。如果确定了要询问的体积（单点 / 区间），能否降低单次合并的复杂度？</li>\n<li>想到 <a href=\"/20250520/#贪玩蓝月\">贪玩蓝月</a> 这个题，如果存在一个 <span class=\"math inline\">\\(mid\\)</span> 在询问区间内，从 <span class=\"math inline\">\\(mid\\)</span> 往两侧预处理对应的单侧前后缀答案，最后询问的时候复杂度就比较低</li>\n<li><p>考虑分治，这样就可以使得对于任意一个询问，总存在一段分治区间将其包含，且分治区间的 <span class=\"math inline\">\\(mid\\)</span> 在询问内。</p>\n<p>这样就可以单 log 预处理之后，比较快地查询。</p>\n<p>基于这样的预处理形式，所以只能支持静态问题。</p>\n空间复杂度为 <span class=\"math inline\">\\(O(n\\log n)\\)</span>，有一些降空间的实现技巧，这里不赘述</li>\n<li><p>实现起来会发现很像链上的点分，也会联想到 <a href=\"/20250819/#星白-by-ttpandas笛卡尔树-dsu-on-tree\">星白</a>，只是这个题更像是 dsu on tree。</p></li>\n</ul>\n<hr />\n<p>对于树上问题，在 uoj 上翻到一个 <span class=\"math inline\">\\(O(n\\log n)\\)</span> 预处理，<span class=\"math inline\">\\(O(1)\\)</span> 单次查询的做法 <a href=\"https://return20071007.blog.uoj.ac/blog/7500\">link</a></p>\n<p>实际上并不用猫树，只需要点分树预处理，欧拉序求 LCA 即可。</p>\n<hr />\n<h2 id=\"a---好吃的题目\">A - 好吃的题目</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P6240\" class=\"uri\">https://www.luogu.com.cn/problem/P6240</a></p>\n<p>背包合并的 单点询问 和 前缀询问 都是 <span class=\"math inline\">\\(O(V)\\)</span> 的，任意区间 是 <span class=\"math inline\">\\(O(V\\log V)\\)</span> 的，也支持取模，像贪玩蓝月那样的</p>\n<p>然后就比较板了</p>\n<p>发现空间不太对，需要把询问离线下来，其实就是经典分治</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n, q;\n    std::cin &gt;&gt; n &gt;&gt; q;\n    std::vector&lt;int&gt; v(n + 1), w(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; v[i];\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; w[i];\n    n = 1 &lt;&lt; (std::__lg(n) + 1);\n    v.resize(n), w.resize(n);\n    struct node &#123; int i, l, m; &#125;;\n    std::vector&lt;int&gt; res(q + 1);\n    std::vector&lt;std::vector&lt;std::vector&lt;node&gt; &gt; &gt; t(17, std::vector&lt;std::vector&lt;node&gt; &gt; (n + 1));\n    for (int i = 1, l, r, m; i &lt;= q; ++i) &#123;\n        std::cin &gt;&gt; l &gt;&gt; r &gt;&gt; m;\n        if (l == r)\n            res[i] = (m &gt;= v[l] ? w[l] : 0);\n        else &#123;\n            int d = std::__lg(l ^ r);\n            t[d][r].push_back(&#123; i, l, m &#125;);\n        &#125;\n    &#125;\n    std::vector&lt;std::array&lt;int, 201&gt; &gt; f(n + 1);\n    std::function&lt;void(int, int)&gt; calc = [&amp;](int l, int r) &#123;\n        int d = std::__lg(r - l + 1) - 1;\n        if (l == r)\n            return;\n        int mid = (l + r) &gt;&gt; 1;\n        calc(l, mid), calc(mid + 1, r);\n        for (int i = 0; i &lt;= 200; ++i)\n            f[mid][i] = (i &gt;= v[mid] ? w[mid] : 0);\n        for (int i = mid - 1; i &gt;= l; --i)\n            for (int j = 0; j &lt;= 200; ++j) &#123;\n                f[i][j] = f[i + 1][j];\n                if (v[i] &lt;= j)\n                    f[i][j] = std::max(f[i][j], f[i + 1][j - v[i]] + w[i]);\n            &#125;\n        for (int i = 0; i &lt;= 200; ++i) &#123;\n            f[mid + 1][i] = (i &gt;= v[mid + 1] ? w[mid + 1] : 0);\n            for (auto [id, l, m] : t[d][mid + 1])\n                if (i &lt;= m)\n                    res[id] = std::max(res[id], f[mid + 1][i] + f[l][m - i]);\n        &#125;\n        for (int i = mid + 2; i &lt;= r; ++i)\n            for (int j = 0; j &lt;= 200; ++j) &#123;\n                f[i][j] = f[i - 1][j];\n                if (v[i] &lt;= j)\n                    f[i][j] = std::max(f[i][j], f[i - 1][j - v[i]] + w[i]);\n                for (auto [id, l, m] : t[d][i])\n                    if (j &lt;= m)\n                        res[id] = std::max(res[id], f[i][j] + f[l][m - j]);\n            &#125;\n        return;\n    &#125;;\n    calc(0, n - 1);\n    for (int i = 1; i &lt;= q; ++i)\n        std::cout &lt;&lt; res[i] &lt;&lt; &#39;\\n&#39;;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"b---子序列\">B - 子序列</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P8885\" class=\"uri\">https://www.luogu.com.cn/problem/P8885</a></p>\n<p>规范称呼：<strong>好子序列</strong>、<strong>好子串</strong>、<strong>好整串</strong>。</p>\n<p>考虑不含 <code>?</code> 的<strong>好子串</strong>判定，朴素 DP，令 <span class=\"math inline\">\\(f_{i,0/1}\\)</span> 表示 DP 到 <span class=\"math inline\">\\(i\\)</span>，子序列末尾为 <span class=\"math inline\">\\(0/1\\)</span> 时的子序列数量奇偶性。有：</p>\n<p><span class=\"math display\">\\[\nf_{i,0}=\\begin{cases}\nf_{i-1,0}+f_{i-1,1}+1&amp;a_i=0\\\\\nf_{i-1,0}&amp;a_i=1\n\\end{cases},\\\\f_{i,1}=\\begin{cases}\nf_{i-1,1}&amp;a_i=0\\\\\nf_{i-1,0}+f_{i-1,1}+1&amp;a_i=1\n\\end{cases}\n\\]</span></p>\n<p>观察发现 <span class=\"math inline\">\\(f_{0},f_{1}\\)</span> 中只有至多一个为 <span class=\"math inline\">\\(1\\)</span>。令 <span class=\"math inline\">\\(f_2\\)</span> 为一当且仅当 <span class=\"math inline\">\\(f_0,f_1\\)</span> 均不为 <span class=\"math inline\">\\(1\\)</span>。考虑 <span class=\"math inline\">\\(1\\)</span> 所在位置，建立 DFA：</p>\n<p><img src=\"image.png\" /></p>\n<p>如需加入 <code>?</code>，转化为 NFA。注意到只关心每个点上指针数量的奇偶性，故压缩为 <span class=\"math inline\">\\({c_0,c_1,c_2}\\)</span> 记录。考虑对<strong>好子串</strong>计数。每次在 <span class=\"math inline\">\\(2\\)</span> 处加入一个新的 <span class=\"math inline\">\\(1\\)</span> 表示空串，再令所有指针移动一步，并对当前点结尾的子串数量计数，也即 <span class=\"math inline\">\\(f_{a_i}\\)</span>。即完成对好子串的计数。</p>\n<p>考虑进一步 DP of DP，将计数变量 <span class=\"math inline\">\\(tot\\)</span> 的奇偶性放入状态。初始为 <span class=\"math inline\">\\(0,0,0,0\\)</span>，转移 <span class=\"math inline\">\\(dp_{f0,f1,f2,tot}\\to dp_{f2\\oplus1,f1,f0,tot\\oplus f0}\\)</span>，最后在 <span class=\"math inline\">\\(*,*,*,1\\)</span> 查答案。状态数共为 <span class=\"math inline\">\\(2^4=16\\)</span>，使用 DDP 维护动态询问即可。由于矩阵略大，需要用猫树替换线段树。然后就可以得到一个会 TLE 80 的做法（注意 <code>?</code> 的转移矩阵系数可能为 2）。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nstruct mat &#123;\n    long long a[16][16];\n    long long* operator[] (const int q) &#123;\n        return a[q];\n    &#125;\n    mat() &#123;\n        return;\n    &#125;\n    mat operator* (mat &amp;q) const &#123;\n        mat res;\n        for (int i = 0; i &lt; 16; ++i)\n            for (int k = 0; k &lt; 16; ++k) &#123;\n                auto s = 0ll;\n                for (int j = 0; j &lt; 16; ++j)\n                    s += a[i][j] * q[j][k];\n                res[i][k] = s % mod;\n            &#125;\n        return res;\n    &#125;\n    mat&amp; operator*= (mat &amp;q) &#123;\n        return *this = *this * q;\n    &#125;\n&#125; m0, m1, ma;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    for (int f0 = 0; f0 &lt;= 1; ++f0)\n        for (int f1 = 0; f1 &lt;= 1; ++f1)\n            for (int f2 = 0; f2 &lt;= 1; ++f2)\n                for (int tot = 0; tot &lt;= 1; ++tot) &#123;\n                    m0[(f0 &lt;&lt; 3) + (f1 &lt;&lt; 2) + (f2 &lt;&lt; 1) + tot][((f2 ^ 1) &lt;&lt; 3) + (f1 &lt;&lt; 2) + (f0 &lt;&lt; 1) + (tot ^ f0)] = 1ll;\n                    ma[(f0 &lt;&lt; 3) + (f1 &lt;&lt; 2) + (f2 &lt;&lt; 1) + tot][((f2 ^ 1) &lt;&lt; 3) + (f1 &lt;&lt; 2) + (f0 &lt;&lt; 1) + (tot ^ f0)] = 1LL;\n                    m1[(f0 &lt;&lt; 3) + (f1 &lt;&lt; 2) + (f2 &lt;&lt; 1) + tot][(f0 &lt;&lt; 3) + ((f2 ^ 1) &lt;&lt; 2) + (f1 &lt;&lt; 1) + (tot ^ f1)] = 1ll;\n                    ++ma[(f0 &lt;&lt; 3) + (f1 &lt;&lt; 2) + (f2 &lt;&lt; 1) + tot][(f0 &lt;&lt; 3) + ((f2 ^ 1) &lt;&lt; 2) + (f1 &lt;&lt; 1) + (tot ^ f1)];\n                &#125;\n    int n, n1;\n    std::cin &gt;&gt; n;\n    n1 = 1 &lt;&lt; (std::__lg(n + 1) + 1);\n    std::vector&lt;char&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i];\n    std::vector&lt;mat&gt; f(std::vector&lt;mat&gt; (n + 1));\n    auto askmat = [&amp;](char t) -&gt; mat&amp; &#123;\n        if (t == &#39;0&#39;)\n            return m0;\n        if (t == &#39;1&#39;)\n            return m1;\n        return ma;\n    &#125;;\n    int m;\n    std::cin &gt;&gt; m;\n    std::vector&lt;long long&gt; res(m + 1);\n    std::vector&lt;std::vector&lt;std::vector&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; u(std::__lg(n1), std::vector&lt;std::vector&lt; std::pair&lt;int, int&gt; &gt; &gt; (n + 1));\n    for (int i = 1, l, r; i &lt;= m; ++i) &#123;\n        std::cin &gt;&gt; l &gt;&gt; r;\n        mat k;\n        if (l == r) &#123;\n            k = askmat(a[l]);\n            auto sum(0ll);\n            for (int s = 0; s &lt; 8; ++s)\n                sum += k[0][(s &lt;&lt; 1) + 1];\n            res[i] = sum % mod;\n        &#125;\n        else &#123;\n            int d = std::__lg(l ^ r);\n            u[d][r].emplace_back(l, i);\n        &#125;\n    &#125;\n    std::function&lt;void(int, int)&gt; calc = [&amp;](int l, int r) &#123;\n        if (l == r)\n            return;\n        int d = std::__lg(r - l + 1) - 1, mid = (l + r) &gt;&gt; 1;\n        calc(l, mid), calc(mid + 1, r);\n        if (mid &lt;= n &amp;&amp; mid) &#123;\n            f[mid] = askmat(a[mid]);\n            for (int i = mid - 1; i &gt;= l &amp;&amp; i; --i)\n                f[i] = askmat(a[i]) * f[i + 1];\n        &#125;\n        if (mid + 1 &lt;= n) &#123;\n            f[mid + 1] = askmat(a[mid + 1]);\n            for (auto [l, id] : u[d][mid + 1]) &#123;\n                auto sum(0ll);\n                auto k(f[l] * f[mid + 1]);\n                for (int s = 0; s &lt; 8; ++s)\n                    sum += k[0][(s &lt;&lt; 1) + 1];\n                res[id] = sum % mod;\n            &#125;\n            for (int i = mid + 2; i &lt;= r &amp;&amp; i &lt;= n; ++i) &#123;\n                f[i] = f[i - 1] * askmat(a[i]);\n                for (auto [l, id] : u[d][i]) &#123;\n                    auto sum(0ll);\n                    auto k(f[l] * f[i]);\n                    for (int s = 0; s &lt; 8; ++s)\n                        sum += k[0][(s &lt;&lt; 1) + 1];\n                    res[id] = sum % mod;\n                &#125;\n            &#125;\n        &#125;\n        return;\n    &#125;;\n    calc(0, n1 - 1);\n    for (int i = 1; i &lt;= m; ++i)\n        std::cout &lt;&lt; res[i] &lt;&lt; &#39;\\n&#39;;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<p>观察 <code>?</code> 的转移矩阵，发现其实很稀疏，有效边只有 28 条</p>\n<p><img src=\"image-1.png\" /></p>\n<p>那么完全可以抛弃矩阵这个概念，返璞归真用线性 DP 解决；枚举中间相接的位就可以合并。</p>\n<p>实际上另一种更数学的理解方式是在左侧乘一个 <span class=\"math inline\">\\([1,0,0,\\cdots,0]\\)</span> 就可以把左边的矩阵转化成向量；通过枚举中间相接的位，相当于在 <span class=\"math inline\">\\(mid\\)</span> 处乘一个 <span class=\"math inline\">\\([0,0,\\cdots,0,1,0,\\cdots,0]\\)</span> 的向量，右边的矩阵就也转化成了向量。接着，由于矩阵很稀疏，只有 28 个位置有值，故可以手动转移。</p>\n<p>这样就可以少一个 <span class=\"math inline\">\\(O(s)\\)</span>，可以通过。</p>\n<details>\n<p>贺了 <span class=\"citation\" data-cites=\"spdarkle\">@spdarkle</span> 的代码，但跑得没他快</p>\n<p><span class=\"citation\" data-cites=\"Rosmist\">@Rosmist</span> 又在表演卡常技能了，勇夺最优解</p>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    std::vector&lt;int&gt; m0(16), m1(16);\n    for (int f0 = 0; f0 &lt;= 1; ++f0)\n        for (int f1 = 0; f1 &lt;= 1; ++f1)\n            for (int f2 = 0; f2 &lt;= 1; ++f2)\n                for (int tot = 0; tot &lt;= 1; ++tot) &#123;\n                    m0[(f0 &lt;&lt; 3) + (f1 &lt;&lt; 2) + (f2 &lt;&lt; 1) + tot] = ((f2 ^ 1) &lt;&lt; 3) + (f1 &lt;&lt; 2) + (f0 &lt;&lt; 1) + (tot ^ f0);\n                    m1[(f0 &lt;&lt; 3) + (f1 &lt;&lt; 2) + (f2 &lt;&lt; 1) + tot] = (f0 &lt;&lt; 3) + ((f2 ^ 1) &lt;&lt; 2) + (f1 &lt;&lt; 1) + (tot ^ f1);\n                &#125;\n    int n, n1;\n    std::cin &gt;&gt; n;\n    n1 = 1 &lt;&lt; (std::__lg(n + 1) + 1);\n    std::vector&lt;char&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i];\n    std::vector&lt;int&gt; dp(n + 1);\n    std::vector&lt;std::array&lt;int, 16&gt; &gt; f(n + 1);\n    int m;\n    std::cin &gt;&gt; m;\n    std::vector&lt;long long&gt; res(m + 1);\n    std::vector&lt;std::vector&lt;std::vector&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; u(std::__lg(n1), std::vector&lt;std::vector&lt; std::pair&lt;int, int&gt; &gt; &gt; (n + 1));\n    for (int i = 1, l, r; i &lt;= m; ++i) &#123;\n        std::cin &gt;&gt; l &gt;&gt; r;\n        if (l != r) &#123;\n            int d = std::__lg(l ^ r);\n            u[d][r].emplace_back(l, i);\n        &#125;\n    &#125;\n    std::function&lt;void(int, int)&gt; calc = [&amp;](int l, int r) &#123;\n        if (l == r)\n            return;\n        int d = std::__lg(r - l + 1) - 1, mid = (l + r) &gt;&gt; 1;\n        calc(l, mid), calc(mid + 1, r);\n        for (int t = 0; t &lt; 16; ++t) &#123;\n            std::array&lt;int, 16&gt; la;\n            if (mid &lt;= n &amp;&amp; mid) &#123;\n                std::fill(la.begin(), la.end(), 0);\n                la[t] = 1ll;\n                for (int i = mid; i &gt;= l &amp;&amp; i; --i) &#123;\n                    std::fill(f[i].begin(), f[i].end(), 0);\n                    if (a[i] != &#39;1&#39;)\n                        for (int j = 0; j &lt; 16; ++j)\n                            f[i][j] = la[m0[j]];\n                    if (a[i] != &#39;0&#39;)\n                        for (int j = 0; j &lt; 16; ++j) &#123;\n                            f[i][j] += la[m1[j]];\n                            if (f[i][j] &gt;= mod)\n                                f[i][j] -= mod;\n                        &#125;\n                    dp[i] = f[i][0];\n                    la = f[i];\n                &#125;\n            &#125;\n            if (mid + 1 &lt;= n) &#123;\n                std::fill(la.begin(), la.end(), 0);\n                la[t] = 1ll;\n                for (int i = mid + 1; i &lt;= r &amp;&amp; i &lt;= n; ++i) &#123;\n                    std::fill(f[i].begin(), f[i].end(), 0);\n                    if (a[i] != &#39;1&#39;)\n                        for (int j = 0; j &lt; 16; ++j)\n                            f[i][m0[j]] = la[j];\n                    if (a[i] != &#39;0&#39;)\n                        for (int j = 0; j &lt; 16; ++j) &#123;\n                            f[i][m1[j]] += la[j];\n                            if (f[i][m1[j]] &gt;= mod)\n                                f[i][m1[j]] -= mod;\n                        &#125;\n                    dp[i] = 0ll;\n                    for (int s = 0; s &lt; 8; ++s) &#123;\n                        dp[i] += f[i][(s &lt;&lt; 1) + 1];\n                        if (dp[i] &gt;= mod)\n                            dp[i] -= mod;\n                    &#125;\n                    for (auto [l, id] : u[d][i])\n                        (res[id] += (long long)dp[l] * dp[i]) %= mod;\n                    la = f[i];\n                &#125;\n            &#125;\n        &#125;\n        return;\n    &#125;;\n    calc(0, n1 - 1);\n    for (int i = 1; i &lt;= m; ++i)\n        std::cout &lt;&lt; res[i] &lt;&lt; &#39;\\n&#39;;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n",
            "tags": [
                "猫树"
            ]
        }
    ]
}