{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"构造\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20250518/",
            "url": "https://xsc062.netlify.app/20250518/",
            "title": "构造类问题的很少解题方法",
            "date_published": "2025-05-18T06:43:30.000Z",
            "content_html": "<p>病毒可能具有膜结构，但不存在生物膜系统。核糖体是唯一所有细胞均含有的细胞器，但病毒中无核糖体。</p>\n<span id=\"more\"></span>\n<p>病毒的主要组成是 <span class=\"math inline\">\\(10\\%\\sim 20\\%\\)</span> 的核酸，<span class=\"math inline\">\\(60\\%\\sim 70\\%\\)</span> 的蛋白质外壳，<span class=\"math inline\">\\(&lt;10\\%\\)</span> 的结合水，可能具有逆转录酶、RNA 聚合酶。病毒的含水量（<span class=\"math inline\">\\(&lt;10\\%\\)</span>）远远小于细胞（<span class=\"math inline\">\\(70\\%\\)</span>）。</p>\n<hr />\n<h2 id=\"type-i调整法---1\">Type I：调整法 - 1</h2>\n<p>虽然话是这么说，感觉这就是平常正常的做题路径，『想做法』——『发现有锅』——『打补丁』。</p>\n<p>只是可能这是在提醒你在构造题中发现有锅不要急着换做法（？）</p>\n<hr />\n<h3 id=\"例题c---stations\">例题：C - Stations</h3>\n<p><a href=\"https://qoj.ac/problem/1139\" class=\"uri\">https://qoj.ac/problem/1139</a></p>\n<p>一个简单的想法是，当可用的编号范围很大时，可以记下每个点 <span class=\"math inline\">\\(u\\)</span> 的 <span class=\"math inline\">\\(DFN_u\\)</span> 和出栈序（记为 <span class=\"math inline\">\\(RFN_u\\)</span>），这样就能解决查询；但标号是 <span class=\"math inline\">\\(N^2\\)</span> 级别的。</p>\n<p>现在思考，我们为什么需要记录 <span class=\"math inline\">\\(RFN_u\\)</span> 呢？因为在询问时，需要判断 <span class=\"math inline\">\\(t\\)</span> 的位置：如果在 <span class=\"math inline\">\\(x\\)</span> 某一儿子的子树内，答案为该儿子；否则，答案为 <span class=\"math inline\">\\(fa\\)</span>。当 <span class=\"math inline\">\\(DFN_t\\)</span> 比 <span class=\"math inline\">\\(u\\)</span> 最靠后的儿子 <span class=\"math inline\">\\(v\\)</span> 的 <span class=\"math inline\">\\(DFN\\)</span> 还要大时，无法判断 <span class=\"math inline\">\\(t\\)</span> 在 <span class=\"math inline\">\\(v\\)</span> 内还是在 <span class=\"math inline\">\\(u\\)</span> 外。</p>\n<p>此处有一个解决方案（原谅我实在无法猜出是怎么想到的），将树按奇数层、偶数层分层，计数层记录 <span class=\"math inline\">\\(DFN\\)</span>，偶数层记录 <span class=\"math inline\">\\(RFN\\)</span>（具体地，奇数层在入栈时编号，偶数层在出栈时编号）；接下来进行判断（注意我们并不知道 <span class=\"math inline\">\\(u\\)</span> 所在层数的奇偶性）：</p>\n<ul>\n<li>若不存在 <span class=\"math inline\">\\(id_i&gt;id_u\\)</span>，说明 <span class=\"math inline\">\\(id_u\\)</span> 为 <span class=\"math inline\">\\(RFN_u\\)</span>；此时 可以判断 <span class=\"math inline\">\\(t\\)</span> 是否位于 <span class=\"math inline\">\\(u\\)</span> 内。</li>\n<li>否则，<span class=\"math inline\">\\(id_u\\)</span> 为 <span class=\"math inline\">\\(DFN_u\\)</span>。由于知道 <span class=\"math inline\">\\(RFN_v\\)</span>，可以判断 <span class=\"math inline\">\\(t\\)</span> 是否位于 <span class=\"math inline\">\\(v\\)</span> 内。</li>\n</ul>\n<p>容易证明其他一般情况也可以判断 <span class=\"math inline\">\\(t\\)</span> 的位置。复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>#include &quot;stations.h&quot;\n#include &lt;bits/stdc++.h&gt;\nstd::vector&lt;int&gt; label(int n, int k, std::vector&lt;int&gt; u, std::vector&lt;int&gt; v) &#123;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n);\n    for (int i = 0; i &lt; n - 1; ++i)\n        g[u[i]].push_back(v[i]), g[v[i]].push_back(u[i]);\n    std::vector&lt;int&gt; id(n, -1);\n    int now = 0;\n    std::function&lt;void(int, int, int)&gt; DFS = [&amp;](int x, int fa, int tag) &#123;\n        if (tag)\n            id[x] = now++;\n        for (auto i : g[x])\n            if (i != fa)\n                DFS(i, x, tag ^ 1);\n        if (!tag)\n            id[x] = now++;\n        return;\n    &#125;;\n    DFS(0, -1, 1);\n    return id;\n&#125;\nint find_next_station(int s, int t, std::vector&lt;int&gt; c) &#123;\n    if (c.back() &lt; s) &#123;\n        int fa = c.front();\n        if (t &gt; s)\n            return fa;\n        for (int i = (int)c.size() - 1; ~i; --i)\n            if (t &gt;= c[i])\n                return c[i];\n        return fa;\n    &#125;\n    else &#123;\n        int fa = c.back();\n        if (t &lt; s)\n            return fa;\n        for (int i = 0; i &lt; (int)c.size() - 1; ++i)\n            if (t &lt;= c[i])\n                return c[i];\n        return fa;\n    &#125;\n    // assert(0);\n    return 114514;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"type-ii调整法---2\">Type II：调整法 - 2</h2>\n<p>题目要求构造『恰好为 <span class=\"math inline\">\\(k\\)</span>』，可以先不看这个限制，对于局面求出上界和下界，然后再看是不是上下界中全部（或大多数）都能取到，此时有两个路径：</p>\n<ul>\n<li>直接在某个上界 / 下界局面中通过若干步极小改动调整到恰好为 <span class=\"math inline\">\\(k\\)</span>；</li>\n<li>通过这一点优化 DP 状态（这样就可以大量压缩『可到达局面』这一信息）。见 <a href=\"/20250510/#b---miriany-and-matchstick\">此</a>。</li>\n</ul>\n<hr />\n<h3 id=\"例题d---construct-the-binary-tree\">例题：D - Construct the Binary Tree</h3>\n<p><a href=\"https://codeforces.com/problemset/problem/1311/E\" class=\"uri\">https://codeforces.com/problemset/problem/1311/E</a></p>\n<p>首先从找上下界的角度出发，发现链为上界，完全二叉树为下界。</p>\n<p>那么只需先 check <span class=\"math inline\">\\(d\\)</span> 是否在该范围内；固定树最左侧的一条链，每次拿走右下角的一个叶子（这样就能<strong>维持完全二叉树性质</strong>），如果可以插入到链底就 do so；否则由于这是个左边挂着单链的完全二叉树，可以证明你想取的任意深度都可以取到，暴力跳即可，且跳完后就构造完了。</p>\n<p>复杂度 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\n<p><span class=\"math inline\">\\(O(nd)\\)</span> 是每次取点时扫一遍完全二叉树找一个能让当前点深度 <span class=\"math inline\">\\(+1\\)</span> 的父节点。<span class=\"math inline\">\\(O(d)\\)</span> 的做法是慢慢把树变窄变高，一次还是只 <span class=\"math inline\">\\(+1\\)</span>，二者的弊端都在于没利用『上界为链』即链和完全二叉树的优美性质。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int T;\n    for (std::cin &gt;&gt; T; T--; ) &#123;\n        int n, d;\n        std::cin &gt;&gt; n &gt;&gt; d;\n        std::vector&lt;int&gt; tag(n + 1), dep(n + 1), cnt(n + 1), fa(n + 1);\n        int L = 0, R = n * (n - 1) / 2;\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            L += std::__lg(i), dep[i] = std::__lg(i);\n            if (i * 2 &lt;= n)\n                ++cnt[i], fa[i * 2] = i;\n            if (i * 2 + 1 &lt;= n)\n                ++cnt[i], fa[i * 2 + 1] = i;\n        &#125;\n        if (L &lt;= d &amp;&amp; d &lt;= R) &#123;\n            std::cout &lt;&lt; &quot;YES\\n&quot;;\n            int t = 1;\n            for (int i = 1; i &lt;= n; i *= 2)\n                tag[i] = 1, t = i;\n            for (int i = n; i &amp;&amp; L != d; --i)\n                if (!tag[i]) &#123;\n                    // printf(&quot;i = %d\\n&quot;, i);\n                    if (L + (dep[t] + 1) - dep[i] &lt;= d) &#123;\n                        // printf(&quot;L += %d - %d\\n&quot;, dep[t] + 1, dep[i]);\n                        L += (dep[t] + 1) - dep[i];\n                        --cnt[fa[i]], cnt[i] = 0, ++cnt[t];\n                        dep[i] = dep[t] + 1, fa[i] = t;\n                        t = i, tag[i] = 1;\n                    &#125;\n                    else &#123;\n                        for (int j = 1; j &lt;= n; ++j)\n                            if (cnt[j] != 2 &amp;&amp; L + (dep[j] + 1) - dep[i] == d) &#123;\n                                fa[i] = j, L = d;\n                                break;\n                            &#125;\n                    &#125;\n                &#125;\n            for (int i = 2; i &lt;= n; ++i)\n                std::cout &lt;&lt; fa[i] &lt;&lt; &#39; &#39;;\n            std::cout &lt;&lt; &#39;\\n&#39;;\n        &#125;\n        else &#123;\n            // printf(&quot;[%d, %d]\\n&quot;, L, R);\n            std::cout &lt;&lt; &quot;NO\\n&quot;;\n        &#125;\n    &#125;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"type-iii增量法-规约法\">Type III：增量法 / 规约法</h2>\n<p>增量法：类似数归，发现可以方便地从 <span class=\"math inline\">\\(n-k\\)</span> 扩展到 <span class=\"math inline\">\\(n\\)</span>，考虑 <span class=\"math inline\">\\(n-k\\)</span> 给 <span class=\"math inline\">\\(k\\)</span> 带来的限制 / 性质，就可以类递推地做了。</p>\n<p>规约法：发现抠掉一个好处理的 <span class=\"math inline\">\\(k\\)</span> 之后可以转化为规模为 <span class=\"math inline\">\\(n-k\\)</span> 的子问题，考虑 <span class=\"math inline\">\\(k\\)</span> 给 <span class=\"math inline\">\\(n - k\\)</span> 带来的限制，也可以类递推地做。</p>\n<p>其实真差不多哈，并不能说是一正一反之类的，因为思维路径真没太差。</p>\n<hr />\n<h3 id=\"例题经典题\">例题：经典题</h3>\n<blockquote>\n<p>给定大小为 <span class=\"math inline\">\\(n\\)</span> 的竞赛图，<span class=\"math inline\">\\(O(n^2)\\)</span> 内求出一条哈密顿路径。</p>\n<ul>\n<li>竞赛图：给完全图的每条边定向。</li>\n<li>哈密顿路径：经过每个点恰好一次，对边无要求。</li>\n</ul>\n</blockquote>\n<p>假设已经知道规模为 <span class=\"math inline\">\\(n-1\\)</span> 的子问题的解法，塞一个新点进去，考察 <span class=\"math inline\">\\(P(n-1)\\)</span> 中的 <span class=\"math inline\">\\(\\forall\\, u\\to v\\)</span>：</p>\n<ul>\n<li>若只存在 <span class=\"math inline\">\\(n\\to u,n\\to v\\)</span>：对于路径起点 <span class=\"math inline\">\\(s\\)</span> 也有 <span class=\"math inline\">\\(n\\to s\\)</span>，把 <span class=\"math inline\">\\(n\\)</span> 添加到开头即可。</li>\n<li>若只存在 <span class=\"math inline\">\\(u\\to n,v\\to n\\)</span>：对于路径终点 <span class=\"math inline\">\\(t\\)</span> 也有 <span class=\"math inline\">\\(t\\to n\\)</span>，把 <span class=\"math inline\">\\(n\\)</span> 添加到末尾即可。</li>\n<li>若只存在 <span class=\"math inline\">\\(n\\to u,v\\to n\\)</span>：对于路径起点 <span class=\"math inline\">\\(s\\)</span> 也有 <span class=\"math inline\">\\(n\\to s\\)</span>，对于路径终点 <span class=\"math inline\">\\(t\\)</span> 也有 <span class=\"math inline\">\\(t\\to n\\)</span>，爱加哪儿就加哪儿。</li>\n<li>否则：存在 <span class=\"math inline\">\\(u\\to n,n\\to v\\)</span>，皆大欢喜，将 <span class=\"math inline\">\\(u\\to v\\)</span> 改为 <span class=\"math inline\">\\(u\\to n\\to v\\)</span> 即可。</li>\n</ul>\n<p>由此就可以解决问题。</p>\n<hr />\n<h3 id=\"例题e---travelling-salesperson\">例题：E - Travelling Salesperson</h3>\n<p><a href=\"https://www.luogu.com.cn/problem/P6644\" class=\"uri\">https://www.luogu.com.cn/problem/P6644</a></p>\n<p>注意本题为无向边！</p>\n<p>相似地，对于 <span class=\"math inline\">\\(P(n-1)\\)</span>，假如存在 <span class=\"math inline\">\\(u\\to v\\)</span>，欲加入 <span class=\"math inline\">\\(u\\to n\\to v\\)</span> 讨论以下几种情况：</p>\n<ul>\n<li>若 <span class=\"math inline\">\\(P(n - 1)\\)</span> 中只含有一种颜色的边：直接加入首 / 尾即可。</li>\n<li>若存在 <span class=\"math inline\">\\(\\color{red}{\\to} u\\color{red}{\\to}v\\color{red}{\\to}\\)</span>、<span class=\"math inline\">\\(u\\color{red}{\\to} n\\)</span> 和 <span class=\"math inline\">\\(n\\color{red}{\\to} v\\)</span>（蓝色同理）：直接加入，皆大欢喜。</li>\n<li><p>其余情况，就是 <span class=\"math inline\">\\(\\color{red}{\\to} u\\color{blue}{\\to} v\\color{blue}{\\to}\\)</span> 的情况了。容易发现除了 <span class=\"math inline\">\\(u\\color{blue}{\\to} n\\land n\\color{red}{\\to} v\\)</span> 之外的情况都可以直接将边加入。故接下来讨论该特例。</p>\n<p>此时在 <span class=\"math inline\">\\((u,v)\\)</span> 处无法加入；尝试考虑相邻的点。由于在 <span class=\"math inline\">\\(u\\color{blue}{\\to} v\\)</span> 处切换颜色，易知 <span class=\"math inline\">\\(u\\ne s\\)</span>，即 <span class=\"math inline\">\\(u\\)</span> 存在前驱（记为 <span class=\"math inline\">\\(p\\)</span>）。</p>\n<ul>\n<li>若存在 <span class=\"math inline\">\\(p\\color{blue}{\\to} i\\)</span>：连接 <span class=\"math inline\">\\(p,i,u\\)</span>，最终局面为 <span class=\"math inline\">\\(\\color{red}{\\to} p\\color{blue}{\\to} i\\color{blue}{\\to} u\\color{blue}{\\to} v\\color{blue}{\\to}\\)</span>，即将变换处提前两位。</li>\n<li>否则：存在 <span class=\"math inline\">\\(p\\color{red}{\\to} i\\)</span>，仍然连接 <span class=\"math inline\">\\(p,i,u\\)</span>，最终局面为 <span class=\"math inline\">\\(\\color{red}{\\to} p\\color{red}{\\to} i\\color{blue}{\\to} u\\color{blue}{\\to} v\\color{blue}{\\to}\\)</span>，即将变换处提前一位。</li>\n</ul></li>\n</ul>\n<p>由此可解决问题。可以发现并不存在所谓无解的情况 <img src=\"/em/ll.gif\" /> —— 倒不如说可以对所有点套用最后一种情况（和第一种）——就能够 <span class=\"math inline\">\\(O(n^2)\\)</span> 解决原问题了。</p>\n<details>\n<p>loj 上过了但洛谷过不了 <img src=\"/em/kt.gif\" /></p>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    if (n == 1) &#123;\n        std::cout &lt;&lt; &quot;1\\n1&quot; &lt;&lt; &#39;\\n&#39;;\n        return 0;\n    &#125;\n    std::vector&lt;std::vector&lt;char&gt; &gt; g(n + 1, std::vector&lt;char&gt; (n + 1));\n    for (int i = 2; i &lt;= n; ++i)\n        for (int j = 1; j &lt; i; ++j)\n            std::cin &gt;&gt; g[i][j], g[j][i] = g[i][j];\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        std::vector&lt;int&gt; tag(n + 1);\n        std::list&lt;int&gt; p(&#123; i, i == 1 ? 2 : 1 &#125;);\n        tag[p.front()] = tag[p.back()] = 1;\n        bool flag = 1;\n        char R = g[p.front()][p.back()], B = ((R == &#39;R&#39;) ? &#39;B&#39; : &#39;R&#39;);\n        auto pos = --p.end();\n        for (int j = 1; j &lt;= n; ++j)\n            if (!tag[j]) &#123;\n                if (flag &amp;&amp; g[j][p.back()] == R)\n                    // printf(&quot;%d: 30  &quot;, j),\n                    p.push_back(j), ++pos;\n                else if (g[j][p.back()] == B)\n                    // printf(&quot;%d: 33  &quot;, j),\n                    p.push_back(j), flag = 0;\n                else &#123;\n                    auto u = pos, v = std::next(pos);\n                    if (g[*u][j] == R &amp;&amp; g[j][*v] == R) &#123;\n                        // printf(&quot;%d: 38  &quot;, j),\n                        p.insert(v, j), ++++pos;\n                        if (v == --p.end())\n                            flag = 1;\n                    &#125;\n                    else if (g[*u][j] == R &amp;&amp; g[j][*v] == B)\n                        // printf(&quot;%d: 41  &quot;, j),\n                        p.insert(v, j), ++pos;\n                    else if (g[*u][j] == B &amp;&amp; g[j][*v] == B)\n                        // printf(&quot;%d: 44  &quot;, j),\n                        p.insert(v, j);\n                    else &#123;\n                        auto pr(std::prev(u));\n                        if (g[*pr][j] == B)\n                            // printf(&quot;%d: 49  &quot;, j),\n                            p.insert(u, j), ----pos;\n                        else\n                            // printf(&quot;%d: 52  &quot;, j),\n                            p.insert(u, j), --pos;\n                    &#125;\n                &#125;\n                // for (auto j : p)\n                //     std::cout &lt;&lt; j &lt;&lt; &#39; &#39;;\n                // printf(&quot; flag = %d\\n&quot;, flag);\n            &#125;\n        std::cout &lt;&lt; n &lt;&lt; &#39;\\n&#39;;\n        for (auto j : p)\n            std::cout &lt;&lt; j &lt;&lt; &#39; &#39;;\n        std::cout &lt;&lt; &#39;\\n&#39;;\n    &#125;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h3 id=\"f---sergeys-problem\">F - Sergey’s problem</h3>\n<p><a href=\"https://codeforces.com/problemset/problem/1019/C\" class=\"uri\">https://codeforces.com/problemset/problem/1019/C</a></p>\n",
            "tags": [
                "构造",
                "调整法"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20231005/",
            "url": "https://xsc062.netlify.app/20231005/",
            "title": "构造",
            "date_published": "2023-10-05T08:42:43.000Z",
            "content_html": "<p><a href=\"https://vjudge.net/contest/585791\">构造杂题</a>。</p>\n<span id=\"more\"></span>\n<hr />\n<h3 id=\"a---errich-tac-toe-hard-version\">A - Errich-Tac-Toe (Hard Version)</h3>\n<p><a href=\"https://vjudge.net/contest/585791#problem/A\" class=\"uri\">https://vjudge.net/contest/585791#problem/A</a></p>\n<p>如果我们将地图按国际象棋式斜向黑白染色分组，规定黑组要么黑色要么无色，白组要么白色要么无色，那么这样是一定不会三连击的。</p>\n<p><img src=\"https://pic.imgdb.cn/item/651e6652c458853aef280846.jpg\" /></p>\n<p>容易发现无色格子永远不会被更改，而在方式 A 中被更改的格子在方式 B 中一定不会被更改；相应地，在方式 A 中不被更改的格子在方式 B 中一定会被更改，故两种染色方式更改的格子数总和就是一开始非无色的格子数。所以根据抽屉原理，一定能找到一种染色方式，代价 <span class=\"math inline\">\\(\\le \\dfrac k2\\)</span>。</p>\n<p>但是我们要找到的，是代价 <span class=\"math inline\">\\(\\le \\dfrac k3\\)</span> 的方案呀？我们观察到我们上面的分组方式，直接让相邻两个不一样了，连二连击都做不到；所以我们要使我们的染色方式更廉价。</p>\n<p>我们仍然斜向染色，但是分为三组：</p>\n<p><img src=\"https://pic.imgdb.cn/item/651e691fc458853aef28c528.jpg\" /></p>\n<p>这样，因为刚才叙述过的原因，一定能找到一种染色方法，代价 <span class=\"math inline\">\\(\\le \\dfrac k3\\)</span>。</p>\n<p>枚举三种方式，取代价最小的一种即可。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 305;\nchar a[maxn][maxn];\nint col[maxn][maxn];\nint T, n, res, id, typ;\nint min(int x, int y) &#123; return x &lt; y ? x : y; &#125;\nint func(int x, int y) &#123;\n    int res = 0;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= n; ++j) &#123;\n            if (col[i][j] == y)\n                res += (a[i][j] == &#39;X&#39;);\n            else if (col[i][j] != x)\n                res += (a[i][j] == &#39;O&#39;);\n        &#125;\n    &#125;\n    return res;\n&#125;\nint main() &#123;\n    scanf(&quot;%d&quot;, &amp;T);\n    while (T--) &#123;\n        scanf(&quot;%d&quot;, &amp;n);\n        int cnt = 0;\n        for (int i = 1; i &lt;= n; ++i)\n            scanf(&quot;%s&quot;, a[i] + 1);\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            for (int j = 1; j &lt;= n; ++j)\n                cnt += (a[i][j] != &#39;.&#39;);\n            for (int j = 1; j &lt;= i; ++j)\n                col[j][i - j + 1] = (i - 1) % 3 + 1;\n        &#125;\n        for (int i = 2; i &lt;= n; ++i) &#123;\n            for (int j = 1; j &lt;= n - i + 1; ++j)\n                col[j + i - 1][n - j + 1] = (n + i - 2) % 3 + 1;\n        &#125;\n        res = func(1, 2), id = 1, typ = 2;\n        if (func(1, 3) &lt; res)\n            res = func(1, 3), id = 1, typ = 3;\n        if (func(2, 1) &lt; res)\n            res = func(2, 1), id = 2, typ = 1;\n        if (func(2, 3) &lt; res)\n            res = func(2, 3), id = 2, typ = 3;\n        if (func(3, 1) &lt; res)\n            res = func(3, 1), id = 3, typ = 1;\n        if (func(3, 2) &lt; res)\n            res = func(3, 2), id = 3, typ = 2;\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            for (int j = 1; j &lt;= n; ++j) &#123;\n                if (col[i][j] == typ) &#123;\n                    if (a[i][j] == &#39;X&#39;)\n                        a[i][j] = &#39;O&#39;;\n                &#125;\n                else if (col[i][j] != id) &#123;\n                    if (a[i][j] == &#39;O&#39;)\n                        a[i][j] = &#39;X&#39;;\n                &#125;\n            &#125;\n        &#125;\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            for (int j = 1; j &lt;= n; ++j)\n                putchar(a[i][j]);\n            putchar(&#39;\\n&#39;);\n        &#125;\n    &#125;\n    return 0;\n&#125;\n&#125; // namespace XSC062</code></pre>\n</details>\n<p>抽屉原理是构造中经常用到的手段，后面我们也会遇到运用了抽屉原理的更多题目。</p>\n<hr />\n<h3 id=\"b---mine-sweeper-ii\">B - Mine Sweeper II</h3>\n<p><a href=\"https://vjudge.net/contest/585791#problem/B\" class=\"uri\">https://vjudge.net/contest/585791#problem/B</a></p>\n<p>观察到答案必须 <span class=\"math inline\">\\(\\le \\dfrac {n\\times m}2\\)</span>，根据在上一道题目得到的经验，考虑找到两种地位相等、并完全相反的方案。</p>\n<p>我们知道，把 B 变成 A 一定可以满足条件；从「完全相反」出发，考虑把所有雷变成空地、所有空地变成雷。</p>\n<p>将空地上的数字视为由空地向周围八格的雷连边，可以连到的边的数量。将地图完全翻转后，边除了起点和终点翻转之外，<strong>没有任何变化</strong>。所以，数字之和不变。</p>\n<p>由此我们就得到了分两组的方案，由抽屉原理，必有一组方案的代价 <span class=\"math inline\">\\(\\le \\dfrac {n\\times m}2\\)</span>，取较小者即可。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 1e3 + 5;\nint n, m, res1, res2;\nchar a[maxn][maxn], b[maxn][maxn];\nint main() &#123;\n    scanf(&quot;%d %d&quot;, &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; ++i)\n        scanf(&quot;%s&quot;, a[i] + 1);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        scanf(&quot;%s&quot;, b[i] + 1);\n        for (int j = 1; j &lt;= m; ++j) &#123;\n            res1 += (a[i][j] != b[i][j]);\n            res2 += (a[i][j] == b[i][j]);\n        &#125;\n    &#125;\n    if (res1 &lt; res2) &#123;\n        for (int i = 1; i &lt;= n; ++i)\n            puts(a[i] + 1);\n    &#125;\n    else &#123;\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            for (int j = 1; j &lt;= m; ++j) &#123;\n                if (a[i][j] == &#39;.&#39;)\n                    putchar(&#39;X&#39;);\n                else putchar(&#39;.&#39;);\n            &#125;\n            putchar(&#39;\\n&#39;);\n        &#125;\n    &#125;\n    return 0;\n&#125;\n&#125; // namespace XSC062</code></pre>\n</details>\n<hr />\n<h3 id=\"c---ehabs-last-corollary\">C - Ehab’s Last Corollary</h3>\n<p><a href=\"https://vjudge.net/contest/585791#problem/C\" class=\"uri\">https://vjudge.net/contest/585791#problem/C</a></p>\n<p>我们尝试证明出题人的猜想……</p>\n<ul>\n<li><p>如果整个图上没有环，就整个一棵树</p>\n树呢，是一个二分图对不对，然后抽屉原理，我们看两部节点中比较大的那一坨，它的大小一定是 <span class=\"math inline\">\\(\\ge \\dfrac n2\\)</span> 又 <span class=\"math inline\">\\(\\ge \\dfrac k2\\)</span> 的，直接输出就好了。</li>\n<li>否则，对于一个环，如果它的点数小于等于 <span class=\"math inline\">\\(k\\)</span>，那我们直接将它作为第二个问题的答案输出。</li>\n<li><p>否则，我们在图的最小环上隔一个点选一个点，一定能选出 <span class=\"math inline\">\\(\\left\\lfloor\\dfrac k2\\right\\rfloor\\)</span> 个相互独立的点。你说为什么它们之间没有直接连边呢？因为我们是在一个比 <span class=\"math inline\">\\(k\\)</span> 大的最小环上选的，要是它们之间有直接连边，那就会又构成一个更小的环了。</p>\n<p>所以我们只需要找到一个最小的环然后按上述操作得到答案…… 然而找最小环这一点本身不太现实……</p>\n<p>这个时候我们怎么办呢？</p>\n<p>我们用一点神奇科技。考虑图的 DFS 树。</p>\n<ul>\n<li>如果有返祖边 <span class=\"math inline\">\\((v, u)\\)</span>，且深度 <span class=\"math inline\">\\(d_v-d_u&lt; k\\)</span>，那么 <span class=\"math inline\">\\(u\\to v\\)</span> 在树上的简单路径和返祖边 <span class=\"math inline\">\\((v, u)\\)</span> 共同构成一个长度不超过 <span class=\"math inline\">\\(k\\)</span> 的环，直接输出。</li>\n<li><p>否则，因为 <span class=\"math inline\">\\(d_v-d_u\\ge k\\)</span>，有 <span class=\"math inline\">\\(d_v\\ge k\\)</span>，且对于任意 <span class=\"math inline\">\\(d_y-d_x&lt;k\\)</span>，返祖边 <span class=\"math inline\">\\((y,x)\\)</span> 不存在。</p>\n<p>我们仍然考虑上面提到的隔一个取一个的方法。从任意 <span class=\"math inline\">\\(d_v\\ge k\\)</span> 开始取点，分别取 <span class=\"math inline\">\\(v\\)</span> 的 <span class=\"math inline\">\\(0\\)</span> 代父辈（即自身），<span class=\"math inline\">\\(2\\)</span> 代父辈（即爷爷），<span class=\"math inline\">\\(4\\)</span> 代父辈……</p>\n<p>为什么这么取就不会出 bug 呢？因为我们上面提到的「对于任意 <span class=\"math inline\">\\(d_y-d_x&lt;k\\)</span>，返祖边 <span class=\"math inline\">\\((y,x)\\)</span> 不存在」，所以不会有杂边干扰。</p></li>\n</ul></li>\n</ul>\n<p>时间复杂度 <span class=\"math inline\">\\(O(n + m)\\)</span>。只能说真是妙啊。jly 赛高！</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 1e5 + 5;\nbool vis[maxn];\nint n, m, k, x, y;\nint f[maxn], dep[maxn];\nstd::vector&lt;int&gt; g[maxn];\nint col[maxn], cnt[5];\nvoid color(int x, int fa, int now) &#123;\n    col[x] = now, ++cnt[now];\n    for (auto i : g[x]) &#123;\n        if (i == fa) continue;\n        color(i, x, 3 - now);\n    &#125;\n    return;\n&#125;\nvoid DFS(int x, int fa) &#123;\n    vis[x] = 1;\n    for (auto i : g[x]) &#123;\n        if (i == fa) continue;\n        if (vis[i]) &#123;\n            if (dep[i] &lt; dep[x] &amp;&amp;\n                dep[x] - dep[i] &lt; k) &#123;\n                print(2, &#39;\\n&#39;);\n                int p = x, cnt = 1;\n                while (p != i) ++cnt, p = f[p];\n                print(cnt, &#39;\\n&#39;), p = x;\n                while (p != i) print(p, &#39; &#39;), p = f[p];\n                print(i, &#39;\\n&#39;), exit(0);\n            &#125;\n            continue;\n        &#125;\n        f[i] = x;\n        dep[i] = dep[x] + 1;\n        DFS(i, x);\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y) &#123;\n    g[x].push_back(y);\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m), read(k);\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        read(x), read(y);\n        add(x, y), add(y, x);\n    &#125;\n    if (m == n - 1) &#123;\n        print(1, &#39;\\n&#39;);\n        color(1, -1, 1);\n        k = (k + 1) / 2;\n        x = cnt[1] &gt; cnt[2] ? 1 : 2;\n        for (int i = 1; i &lt;= n &amp;&amp; k; ++i) &#123;\n            if (col[i] == x)\n                print(i, &#39; &#39;), --k;\n        &#125;\n        putchar(&#39;\\n&#39;);\n        return 0;\n    &#125;\n    dep[1] = 1, DFS(1, -1);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (dep[i] &gt;= k) &#123;\n            print(1, &#39;\\n&#39;);\n            x = i, k = (k + 1) / 2;\n            while (k--)\n                print(x, &#39; &#39;), x = f[f[x]];\n            putchar(&#39;\\n&#39;);\n            break;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n&#125; // namespace XSC062</code></pre>\n</details>\n<hr />\n<h3 id=\"d---景点划分\">D - 景点划分</h3>\n<p><a href=\"https://vjudge.net/contest/585791#problem/D\" class=\"uri\">https://vjudge.net/contest/585791#problem/D</a></p>\n<details>\n<p><summary>🤡 前言</summary></p>\n<p>你打开了题目。你想，不就是从图里抠两个连通块出来吗，这也能进 IOI？</p>\n<p>你开始打代码。你突然发现不对劲。你抠掉了一个大小为 <span class=\"math inline\">\\(a\\)</span> 的连通块，然后发现剩下的部分裂成了很多个块，其中根本找不到一个大小 <span class=\"math inline\">\\(\\ge b\\)</span> 的块。</p>\n<p>你发现，事情没有这么简单。</p>\n<p>这是你吗？不，这不是你，这是我，小丑 lym 🤡</p>\n</details>\n<p>不妨设 <span class=\"math inline\">\\(a\\le b\\le c\\)</span>，则由抽屉原理，<span class=\"math inline\">\\(a\\le \\dfrac n3\\)</span>。</p>\n<p>我们从最特殊的情况开始思考。假如图是树，那么答案怎么求呢？</p>\n<p>对于任意一条边，在其左右两边的连通块中，根据抽屉原理，较大者的大小必定 <span class=\"math inline\">\\(\\ge \\dfrac{n}{2}\\)</span>，根据重心的定义，重心必然属于较大连通块。</p>\n<p>后面鸽了。总之先放个代码在这里。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 1e5 + 5;\nint org[5];\nbool book[maxn];\nint solFlag, sumFa, faP;\nint siz[maxn], col[maxn];\nint n, m, a, b, c, x, y, P;\nbool vis[maxn], legSon[maxn];\nstd::vector&lt;int&gt; w[maxn], g[maxn];\nvoid DFS(int x, int fa) &#123;\n    bool flag = 1;\n    vis[x] = 1, siz[x] = 1;\n    for (auto i : w[x]) &#123;\n        if (vis[i]) continue;\n        DFS(i, x);\n        if (siz[i] &gt; n / 2) flag = 0;\n        siz[x] += siz[i];\n        g[x].push_back(i);\n    &#125;\n    if (n - siz[x] &gt; n / 2) flag = 0;\n    if (flag &amp;&amp; !P) &#123;\n        P = x, faP = fa;\n        if (n - siz[x] &gt;= a)\n            solFlag = fa;\n        else &#123;\n            for (auto i : g[x]) &#123;\n                if (siz[i] &gt;= a) &#123;\n                    solFlag = i;\n                    break;\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n    return;\n&#125;\nvoid fillA(int x) &#123;\n    if (a == 0) return;\n    col[x] = 1, --a;\n    for (auto i : g[x]) fillA(i);\n    return;\n&#125;\nvoid fillB(int x) &#123;\n    if (b == 0) return;\n    col[x] = 2, --b;\n    for (auto i : g[x]) &#123;\n        if (x == P &amp;&amp; i == solFlag)\n            continue;\n        fillB(i);\n    &#125;\n    return;\n&#125;\nvoid fillC(void) &#123;\n    for (int i = 1; i &lt;= n; ++i)\n        if (!col[i]) col[i] = 3;\n    return;\n&#125;\nvoid DFS1(int x) &#123;\n    if (!a || x == P) return;\n    col[x] = 1, --a;\n    for (auto i : g[x]) DFS1(i);\n    return;\n&#125;\nvoid DFS2(int x) &#123;\n    if (b == 0) return;\n    if (!col[x]) col[x] = 2, --b;\n    for (auto i : g[x]) DFS2(i);\n    return;\n&#125;\nvoid func(void) &#123;\n    int pos[5] = &#123;&#125;;\n    if (a &gt;= b &amp;&amp; b &gt;= c) // cba\n        org[1] = 3, org[2] = 2, org[3] = 1;\n    else if (a &gt;= b &amp;&amp; a &gt;= c) // bca\n        org[1] = 2, org[2] = 3, org[3] = 1;\n    else if (a &gt;= b) // bac\n        org[1] = 2, org[2] = 1, org[3] = 3;\n    else if (c &gt;= b) // abc\n        org[1] = 1, org[2] = 2, org[3] = 3;\n    else if (c &gt;= a) // acb\n        org[1] = 1, org[2] = 3, org[3] = 2;\n    else // cab\n        org[1] = 3, org[2] = 1, org[3] = 2;\n    pos[1] = a, pos[2] = b, pos[3] = c;\n    std::sort(pos + 1, pos + 4);\n    a = pos[1], b = pos[2], c = pos[3];\n    return;\n&#125;\nvoid ADD(int x) &#123; // 判断儿子是否合法 \n    if (x == P)\n        return;\n    book[x] = 1;\n    for (auto i : w[x]) &#123;\n        if (i == P &amp;&amp; x != faP) legSon[x] = 1;\n        if (!book[i]) ADD(i);\n    &#125;\n    return;\n&#125;\nvoid DFS3(int x) &#123; // Sub2 染头上 \n    if (!a || x == P) return;\n    col[x] = 1, --a;\n    for (auto i : g[x]) DFS3(i);\n    return;\n&#125;\nvoid DFS4(int x) &#123; // Sub2 染儿子\n    if (a == 0) return;\n    col[x] = 1, --a;\n    for (auto i : g[x]) DFS4(i);\n    return;\n&#125;\nvoid DFS5(int x) &#123; // Sub2 染 B 色\n    if (b == 0) return;\n    col[x] = 2, --b;\n    for (auto i : g[x]) &#123;\n        // 如果子树加入了 A\n        // 那么起码子树的根是会被染的。 \n        if (col[i]) continue;\n        DFS5(i);\n    &#125;\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m);\n    read(a), read(b), read(c), func();\n    while (m--) &#123;\n        read(x), read(y), ++x, ++y;\n        w[x].push_back(y), w[y].push_back(x);\n    &#125;\n    DFS(1, -1);\n    if (solFlag) &#123;\n        if (solFlag == faP) DFS1(1), DFS2(P);\n        else fillA(solFlag), fillB(1);\n        fillC();\n    &#125;\n    else &#123;\n        ADD(1), sumFa = n - siz[P];\n        auto now = g[P].begin(), ex = now;\n        while (sumFa &lt; a) &#123;\n            while (now != g[P].end() &amp;&amp; !legSon[*now]) ++now;\n            if (now == g[P].end()) goto noSol;\n            sumFa += siz[*(ex = now++)];\n        &#125;\n        auto pos = g[P].begin();\n        DFS3(1);\n        for (;; ++pos) &#123;\n            if (!legSon[*pos]) continue;\n            DFS4(*pos);\n            if (pos == ex) break;\n        &#125;\n        DFS5(P), fillC();\n    &#125;\n    noSol: ;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n    #ifdef ONLINE_JUDGE\n        print(org[col[i]], &#39; &#39;);\n    #else\n        print(col[i], &#39; &#39;);\n    #endif\n    &#125;\n    putchar(&#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\nint main() &#123;\n    XSC062::main();\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h3 id=\"f---strange-housing\">F - Strange Housing</h3>\n<p><a href=\"https://vjudge.net/contest/585791#problem/F\" class=\"uri\">https://vjudge.net/contest/585791#problem/F</a></p>\n<p>是难得一见的小清新题目（经历过前两题的洗礼之后）。</p>\n<p>我们从原图中抽一个生成树出来，比如 DFS 树。</p>\n<p>然后我们又知道树是连通二分图，所以我们按照二分图来染色就可以了。</p>\n<p>但这么做有个 bug，就是树里有返祖边，这就可能会导致二分图的一个部分里出现在原图中相连的点。</p>\n<p>所以我们可以换一种思考方式，把二分图的染色方法带到原图里。</p>\n<p>一个点当且仅当周围有染色点或自身为染色点时是可达的。</p>\n<p>对于一个点，我们先检查其周围一圈有没有染色点；如果有就不能染色。在 DFS 遍历的时候直接染色即可。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 3e5 + 5;\nint col[maxn];\nbool vis[maxn];\nint T, n, m, x, y, cnt;\nstd::vector&lt;int&gt; g[maxn];\nvoid DFS(int x) &#123;\n    vis[x] = 1;\n    for (auto i : g[x]) &#123;\n        if (col[i] == 1) &#123;\n            col[x] = 0;\n            break;\n        &#125;\n    &#125;\n    if (col[x] == -1)\n        ++cnt, col[x] = 1;\n    for (auto i : g[x]) &#123;\n        if (vis[i]) continue;\n        if (col[x] == 1) col[i] = 0;\n        DFS(i);\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y) &#123;\n    g[x].push_back(y);\n    return;\n&#125;\nint main() &#123;\n    read(T);\n    while (T--) &#123;\n        read(n), read(m);\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            g[i].clear();\n            g[i].shrink_to_fit();\n            vis[i] = 0, col[i] = -1;\n        &#125;\n        while (m--) &#123;\n            read(x), read(y);\n            add(x, y), add(y, x);\n        &#125;\n        cnt = 0, DFS(1);\n        for (int i = 2; i &lt;= n; ++i) &#123;\n            if (!vis[i]) &#123;\n                puts(&quot;NO&quot;);\n                goto noSol;\n            &#125;\n        &#125;\n        puts(&quot;YES&quot;), print(cnt, &#39;\\n&#39;);\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            if (col[i] == 1)\n                print(i, &#39; &#39;);\n        &#125;\n        putchar(&#39;\\n&#39;);\n        noSol: ;\n    &#125;\n    return 0;\n&#125;\n&#125; // namespace XSC062</code></pre>\n</details>\n",
            "tags": [
                "构造"
            ]
        }
    ]
}