<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title> • Posts by &#34;计数&#34; tag</title>
        <link>https://xsc062.netlify.app</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Wed, 30 Apr 2025 10:31:11 +0800</pubDate>
        <lastBuildDate>Wed, 30 Apr 2025 10:31:11 +0800</lastBuildDate>
        <category>并查集</category>
        <category>斜率优化</category>
        <category>悬线法</category>
        <category>哈希</category>
        <category>字典树</category>
        <category>DP</category>
        <category>单调队列</category>
        <category>分治</category>
        <category>二分图</category>
        <category>CRT / exCRT</category>
        <category>排列组合</category>
        <category>网络流</category>
        <category>费用流</category>
        <category>二分</category>
        <category>上下界网络流</category>
        <category>容斥原理</category>
        <category>线段树</category>
        <category>树状数组</category>
        <category>区间 DP</category>
        <category>构造</category>
        <category>Tarjan</category>
        <category>数据结构</category>
        <category>下饭</category>
        <category>LCA</category>
        <category>倍增</category>
        <category>鸽巢原理</category>
        <category>概率期望</category>
        <category>调和级数</category>
        <category>差分</category>
        <category>思维</category>
        <category>树形 DP</category>
        <category>最小生成树</category>
        <category>SAM</category>
        <category>状压</category>
        <category>分块</category>
        <category>可持久化</category>
        <category>笛卡尔树</category>
        <category>高维前缀和</category>
        <category>闲话</category>
        <category>欧拉回路</category>
        <category>树链剖分</category>
        <category>长链剖分</category>
        <category>KMP</category>
        <category>border</category>
        <category>字符串</category>
        <category>AC 自动机</category>
        <category>SA</category>
        <category>数学</category>
        <category>树上差分</category>
        <category>FWT</category>
        <category>堆</category>
        <category>树的重心</category>
        <category>二项式定理</category>
        <category>二项式反演</category>
        <category>贪心</category>
        <category>均摊</category>
        <category>计数</category>
        <category>优化建图</category>
        <category>反悔贪心</category>
        <category>调整法</category>
        <category>背包</category>
        <category>博弈论</category>
        <category>DP 优化</category>
        <category>虚树</category>
        <category>点分治</category>
        <category>WQS 二分</category>
        <category>闵可夫斯基和</category>
        <category>slope trick</category>
        <category>四边形不等式</category>
        <category>暴力</category>
        <category>状压 DP</category>
        <category>组合数学</category>
        <category>支配对</category>
        <category>DDP</category>
        <category>平衡树</category>
        <category>容斥</category>
        <category>猫树</category>
        <category>Kruskal 重构树</category>
        <category>李超线段树</category>
        <item>
            <guid isPermalink="true">https://xsc062.netlify.app/20250430/</guid>
            <title>连通图计数</title>
            <link>https://xsc062.netlify.app/20250430/</link>
            <category>计数</category>
            <pubDate>Wed, 30 Apr 2025 10:31:11 +0800</pubDate>
            <description><![CDATA[ &lt;figure&gt;
&lt;img src=&#34;/20250430/neko.png&#34; alt=&#34;猫&#34; style=&#34;width: 75px&#34;&gt;
&lt;figcaption&gt;
猫
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;太可怕了！2025 年才过去 4 个月，正经文章的总数已经和 2024 年中正经文章的总数一样多了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;有标号无向图计数&#34;&gt;有标号无向图计数&lt;/h2&gt;
&lt;p&gt;问题模型大概如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个点，你可以在它们间任意连边，但存在限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中一个较好处理（如要求图必须是二分图）；&lt;/li&gt;
&lt;li&gt;另一个较难处理（如去重问题等）；&lt;/li&gt;
&lt;li&gt;最后，可能要求图连通。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先需要知道怎么处理这样的计数问题。以下皆建立在无重边、自环的基础上。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;先只考虑容易的限制，且不要求连通：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注：如果发现 &lt;strong&gt;不连通&lt;/strong&gt; 的时候没办法很方便地计算精确方案数（也就是说会算重），那么可以把 &lt;strong&gt;去重&lt;/strong&gt; 作为较难的限制，这一步算重就不重要了&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;该怎么求怎么求。例如，若该限制是二分图且可以算重，枚举左部点数及边，那么方案数就是 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=0}^n C_n^i\cdot C_{i\cdot (n-i)}^m\)&lt;/span&gt;。&lt;/p&gt;
这个时候需要注意到算重部分的意义是什么。比如此处，计算中一个连通块将左右部翻转后被视作不同的子图，但在全局看来对应的总图是同一个二分图。因此，对于拥有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个连通块的图，其被计算了 &lt;span class=&#34;math inline&#34;&gt;\(2^k\)&lt;/span&gt; 次。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再加上必须连通的限制，仍只考虑容易的限制：&lt;/p&gt;
&lt;p&gt;如果不存在其他限制，那么就是 &lt;a href=&#34;https://oeis.org/A001187&#34;&gt;A001187&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;连通的方案就是任意的方案减去不连通的方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任意的求法就是第一点；&lt;/li&gt;
&lt;li&gt;不连通的方案，枚举 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在子集，让其补集里面任意连边（第 1 点的子问题）且不和 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在子集相连。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接着，对连通的情况应用较难处理的限制：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;因为连通会带来一些比较好的性质简化运算，所以选择在这一步加上较难的限制&lt;/em&gt;。&lt;/p&gt;
例如，对于上文中二分图去重的例子，连通图中显然只有一个连通块，将连通图的方案 &lt;span class=&#34;math inline&#34;&gt;\(\div 2\)&lt;/span&gt; 就可以得到答案。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后，如果题目要求任意图的方案，用第三步中的答案再次算出任意图的答案。&lt;/p&gt;
&lt;p&gt;相当于是把第 2 点中的过程反过来，枚举 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在子集，在其补集中任意连边（该问的子问题）且可以和 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在的子集连边。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样就可以解决问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a---many-good-tuple-problems&#34;&gt;A - Many Good Tuple Problems&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc327/tasks/abc327_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc327/tasks/abc327_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果把一组 &lt;span class=&#34;math inline&#34;&gt;\((S_i,T_i)\)&lt;/span&gt; 看作一条边的话，原限制就可以转化为：在 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个点中连 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 条可重边，形成二分图的方案数。边有序。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;你可以发现我偷懒把这道题拿去上面举例了&lt;/del&gt;，由于边是可重的，而我们的模型要求无重边，但发现这个限制是独立于模型外的，也就是可以在最后枚举有多少条不同边，再用一点组合手段计算实际贡献。&lt;/p&gt;
&lt;p&gt;首先令 &lt;span class=&#34;math inline&#34;&gt;\(f_{0,n,m}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点、&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条边、&lt;strong&gt;不去重&lt;/strong&gt;、&lt;strong&gt;连通性任意&lt;/strong&gt; 的方案数，那么 &lt;span class=&#34;math inline&#34;&gt;\(f_{0,n,m}=\sum_{i=0}^n C_n^i\cdot C_{i\cdot (n-i)}^m\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{1,n,m}\)&lt;/span&gt; 表示 &lt;strong&gt;不去重&lt;/strong&gt;、要求 &lt;strong&gt;连通&lt;/strong&gt; 的方案，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{1,n,m}=f_{0,n,m}-\sum\limits_{i,j} C_{n - 1}^{i-1}\cdot f_{1,i,j}\cdot f_{0,n-i,m-j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{2,n,m}\)&lt;/span&gt; 表示 &lt;strong&gt;去重&lt;/strong&gt;，要求 &lt;strong&gt;连通&lt;/strong&gt; 的方案，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{2,n,m}=\dfrac {f_{1,n,m}}{2}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{3,n,m}\)&lt;/span&gt; 表示 &lt;strong&gt;去重&lt;/strong&gt;，&lt;strong&gt;连通性任意&lt;/strong&gt; 的方案数，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{3,n,m}=\sum\limits_{i,j} C_{n-1}^{i-1} \cdot f_{2,i,j} \cdot f_{3,n-i,m-j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;最后的方案数为 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j} f_{3,n,j}\cdot F(m,j)\)&lt;/span&gt;。其中 &lt;span class=&#34;math inline&#34;&gt;\(F(m,j)\)&lt;/span&gt; 表示把 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个有标号的球放在 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个有标号的盒子里，不空放的方案数，可以容斥。最后注意边反向算两种，所以乘上 &lt;span class=&#34;math inline&#34;&gt;\(2^m\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^6)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
const int inv2 = (mod + 1) &amp;gt;&amp;gt; 1;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, M, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; M, m = std::min(n * (n - 1) / 2, M);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; C(n * n + 1, std::vector&amp;lt;long long&amp;gt; (n * n + 1));
    for (int i = 0; i &amp;lt;= n * n; ++i) &amp;#123;
        C[i][0] = 1ll;
        for (int j = 1; j &amp;lt;= i; ++j)
            C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % mod;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; &amp;gt; f(4, std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; (n + 1, std::vector&amp;lt;long long&amp;gt; (m + 1)));
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 0; j &amp;lt;= m &amp;amp;&amp;amp; j &amp;lt;= i * (i - 1) / 2; ++j)
            for (int k = 0; k &amp;lt;= i; ++k)
                (f[0][i][j] += C[i][k] * C[k * (i - k)][j]) %= mod;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 0; j &amp;lt;= m; ++j) &amp;#123;
            auto t(0ll);
            for (int k = 1; k &amp;lt;= i; ++k)
                for (int l = 0; l &amp;lt;= j; ++l)
                    (t += C[i - 1][k - 1] * f[1][k][l] % mod * f[0][i - k][j - l]) %= mod;
            f[1][i][j] = (f[0][i][j] + mod - t) % mod;
            f[2][i][j] = f[1][i][j] * inv2 % mod;
        &amp;#125;
    f[3][0][0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 0; j &amp;lt;= m; ++j)
            for (int k = 1; k &amp;lt;= i; ++k)
                for (int l = 0; l &amp;lt;= j; ++l)
                    (f[3][i][j] += C[i - 1][k - 1] * f[2][k][l] % mod * f[3][i - k][j - l]) %= mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    std::vector&amp;lt;long long&amp;gt; F(m + 1);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        F[i] = qkp(i, M);
        for (int j = 1, p = mod - 1; j &amp;lt; m; ++j, p = mod - p)
            (F[i] += p * C[i][j] % mod * qkp(i - j, M)) %= mod;
    &amp;#125;
    auto res(0ll);
    for (int j = 1; j &amp;lt;= m; ++j)
        (res += f[3][n][j] * F[j]) %= mod;
    std::cout &amp;lt;&amp;lt; res * qkp(2, M) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b---many-mst&#34;&gt;B - Many MST&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc386/tasks/abc386_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc386/tasks/abc386_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意到 MST 和连通块的隐含联系。按照 Kruskal 的生成方式可以发现只需要在合并两个连通块时加上它们之间连边中最小的边权就可以得到 MST。&lt;/p&gt;
&lt;p&gt;因此容易想到在 DP 时对最小边权进行限制；枚举 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，让边权 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt; 成为简单限制；让求解 MST 成为某种意义上的较难限制。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{0,n,k}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点，边权 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt;、&lt;strong&gt;对连通性没有要求&lt;/strong&gt; 的方案数；相应地，&lt;span class=&#34;math inline&#34;&gt;\(f_{1,n,k}\)&lt;/span&gt; 表示 &lt;strong&gt;要求连通&lt;/strong&gt; 的方案数，则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{0,n,k}=\sum\limits_i C_{n-1}^{i-1}\cdot f_{1,i,k-1} \cdot f_{0,n-i,k}\cdot (M-k+1)^{i\times(n-i)}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;注解：式子正确性建立在 &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在 的由权值 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;k\)&lt;/span&gt; 的边构成的最大连通块 大小为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;&lt;/strong&gt; 的基础之上，故两个连通块之间的边权只能 &lt;span class=&#34;math inline&#34;&gt;\(\ge k\)&lt;/span&gt;。这也提醒我们，此处的 &lt;strong&gt;不连通&lt;/strong&gt; 含义实际上是给这些边一个 &lt;span class=&#34;math inline&#34;&gt;\((M-k)\)&lt;/span&gt; 的系数。&lt;/p&gt;
那么这样你会注意到，&lt;span class=&#34;math inline&#34;&gt;\(f_0\)&lt;/span&gt; 的意义就与 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 无关了（那么显然值也与 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 无关），但是仍然保留 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 对思考有帮助，故留之。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{1,n,k}=f_{0, n, k} - \sum\limits_i C_{n - 1}^{i-1} \cdot f_{1,i,k}\cdot f_{0,n-i,k}\times (M-k)^{i\times (n - i)}\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(g_{0, n, k}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点、边权 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt;、&lt;strong&gt;对连通性没有要求&lt;/strong&gt; 的 MST 之和；相应地，&lt;span class=&#34;math inline&#34;&gt;\(g_{1,n,k}\)&lt;/span&gt; 表示对应条件下 &lt;strong&gt;要求连通&lt;/strong&gt; 的 MST 之和。则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(g_{0,n,k}=\sum\limits_{i} C_{n-1}^{i-1}\cdot (f_{1,i,k - 1}\cdot g_{0,n-i,k}+g_{1,i,k - 1} \cdot f_{0,n-i,k}+f_{1,i,k-1}\cdot f_{0,n-i,k}\cdot k)\cdot (M-k+1)^{i\times (n-i)}\)&lt;/span&gt;。&lt;/p&gt;
注解：类比 &lt;span class=&#34;math inline&#34;&gt;\(f_0\)&lt;/span&gt; 的计算方式得到 &lt;span class=&#34;math inline&#34;&gt;\(g_0\)&lt;/span&gt;。在 &lt;span class=&#34;math inline&#34;&gt;\(i\times (n-i)\)&lt;/span&gt; 中任选一条作为 MST 上权值为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的边，故有 &lt;span class=&#34;math inline&#34;&gt;\(f_{1,i,k-1}\cdot f_{0,n-i,k}\cdot k\)&lt;/span&gt;。之所以必须要求有这么一条边是为了和 &lt;span class=&#34;math inline&#34;&gt;\(g_{k-1}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(g_{k+1}\)&lt;/span&gt; 等区分。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(g_{1,n,k}=g_{0,n,k}-\sum\limits_i C_{n-1}^{i-1}\cdot (f_{1,i,k}\cdot g_{0,n-i,k}+g_{1,i,k}\cdot f_{0,n-i,k}+f_{1,i,k}\cdot f_{0,n-i,k}\cdot k)\cdot (M-k)^{i\times (n-i)}\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2\cdot M)\)&lt;/span&gt;。要求预处理幂，不然会 T。以及可能需要把 &lt;span class=&#34;math inline&#34;&gt;\(f_0,f_1,g_0,g_1\)&lt;/span&gt; 放在同一个内层循环求，不然会卡常；&lt;del&gt;在此基础上使用内存连续访问优化似乎并不明显&lt;/del&gt; &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int N, M;
    std::cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; M;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    crr f(2, brr(N + 1, arr(M + 1))), g(2, brr(N + 1, arr(M + 1)));
    brr C(N + 1, arr(N + 1)), p(M + 1, arr(N * N + 1));
    for (int i = 0; i &amp;lt;= M; ++i) &amp;#123;
        p[i][0] = 1ll;
        for (int j = 1; j &amp;lt;= N * N; ++j)
            p[i][j] = p[i][j - 1] * i % mod;
    &amp;#125;
    for (int i = 0; i &amp;lt;= N; ++i) &amp;#123;
        C[i][0] = 1ll;
        for (int j = 1; j &amp;lt;= i; ++j)
            C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % mod;
    &amp;#125;
    f[1][0][0] = f[1][1][0] = 1ll;
    for (int n = 1; n &amp;lt;= N; ++n)
        for (int k = 1; k &amp;lt;= M; ++k) &amp;#123;
            f[0][n][k] = f[1][n][k - 1];
            for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
                (f[0][n][k] += C[n - 1][i - 1] * f[1][i][k - 1] % mod * f[0][n - i][k] % mod * p[M - k + 1][i * (n - i)]) %= mod;
                (f[1][n][k] += mod - C[n - 1][i - 1] * f[1][i][k] % mod * f[0][n - i][k] % mod * p[M - k][i * (n - i)] % mod) %= mod;
            &amp;#125;
            (f[1][n][k] += f[0][n][k]) %= mod;
        &amp;#125;
    for (int n = 1; n &amp;lt;= N; ++n)
        for (int k = 1; k &amp;lt;= M; ++k) &amp;#123;
            g[0][n][k] = g[1][n][k - 1];
            for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
                (g[0][n][k] += (f[1][i][k - 1] * g[0][n - i][k] % mod + g[1][i][k - 1] * f[0][n - i][k] % mod + f[1][i][k - 1] * f[0][n - i][k] % mod * k) % mod * C[n - 1][i - 1] % mod * p[M - k + 1][i * (n - i)]) %= mod;
                (g[1][n][k] += mod - (f[1][i][k] * g[0][n - i][k] % mod + g[1][i][k] * f[0][n - i][k] % mod + f[1][i][k] * f[0][n - i][k] % mod * k) % mod * C[n - 1][i - 1] % mod * p[M - k][i * (n - i)] % mod) %= mod;
            &amp;#125;
            (g[1][n][k] += g[0][n][k]) %= mod;
        &amp;#125;
    // for (int n = 1; n &amp;lt;= N; ++n)
    //     for (int k = 1; k &amp;lt;= M; ++k) &amp;#123;
    //         printf(&amp;quot;f[0][%d][%d] = %lld\n&amp;quot;, n, k, f[0][n][k]);
    //         printf(&amp;quot;f[1][%d][%d] = %lld\n&amp;quot;, n, k, f[1][n][k]);
    //         printf(&amp;quot;g[0][%d][%d] = %lld\n&amp;quot;, n, k, g[0][n][k]);
    //         printf(&amp;quot;g[1][%d][%d] = %lld\n&amp;quot;, n, k, g[1][n][k]);
    //     &amp;#125;
    std::cout &amp;lt;&amp;lt; g[1][N][M] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;有标号-dag-计数&#34;&gt;有标号 DAG 计数&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个点，你可以在它们间任意连边，要求最后图为 DAG，可能要求图弱连通。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果说无向图计数关键在于连通块，那么 DAG 在此基础上关键在于入度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的点集。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f(i)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个点的 DAG 的答案；&lt;span class=&#34;math inline&#34;&gt;\(g_{0, i,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个点的 DAG，其中 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个入度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的方案，不难想到容斥：令 &lt;span class=&#34;math inline&#34;&gt;\(g_{1,i,j}\)&lt;/span&gt; 表示至少 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个的方案，那么：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
g_{1,i,j}=C_i^j\times f(i-j)\times 2^{j\times (i-j)}\\
g_{0,i,j}=\sum_{k=j}^i (-1)^{k-j}\cdot C_k^j\cdot g_{1,i,j}\\
f(i)=\sum_{j=1}^i g_{0,i,j}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;整理有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f(i)
&amp;amp;=\sum_{j=1}^i \sum_{k=j}^i (-1)^{k-j}\cdot C_k^j\cdot g_{1,i,k}\\
&amp;amp;=\sum_{k=1}^i (-1)^k\cdot g_{1,i,k}\cdot \sum_{j=1}^k (-1)^j\cdot C_k^j\\
&amp;amp;=\sum_{k=1}^i (-1)^k\cdot g_{1,i,k}\cdot (0^k-1)\\
&amp;amp;=\sum_{k=1}^i (-1)^{k+1}\cdot C_i^k\times f(i-k)\times 2^{(i-k)}
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;即得递推式。如果要求连通仿照无向图连通的方法，用任意减去不连通即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c---amusement-park&#34;&gt;C - Amusement Park&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1193/A&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1193/A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先考虑计算方案数。枚举 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在子集，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f(S)=\sum\limits_{T\in S} (-1)^{|T|+1}\cdot f(S - T)\)&lt;/span&gt;。相较于一般的 DAG 计数，因为每条边取不取是固定的，所以没有了 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的次幂的系数；同时因为直接枚举子集，所以没有了组合系数。&lt;/p&gt;
&lt;p&gt;注意此处 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 可构成一轮新的入度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的点集当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 之内没有连边，即 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 为独立集。&lt;/p&gt;
&lt;p&gt;算出方案数后如何算答案呢？发现对于一种合法的方案，把里面所有的边反向一定唯一对应另一种合法方案，两种方案取反边数相加为 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;；那么给所有方案除以 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;，再乘上 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 就能得到答案。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(3^n)\)&lt;/span&gt;。需要提前把每个点集是否独立预处理下来。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353, inv2 = (mod + 1) &amp;gt;&amp;gt; 1;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x] |= (1 &amp;lt;&amp;lt; (y - 1));
        g[y] |= (1 &amp;lt;&amp;lt; (x - 1));
    &amp;#125;
    auto check = [&amp;amp;](int s) &amp;#123;
        for (int i = 1; i &amp;lt;= n; ++i)
            if ((s &amp;gt;&amp;gt; (i - 1)) &amp;amp; 1)
                if (s &amp;amp; g[i])
                    return false;
        return true;
    &amp;#125;;
    int siz = 1 &amp;lt;&amp;lt; n;
    std::vector&amp;lt;int&amp;gt; tag(siz);
    for (int i = 0; i &amp;lt; siz; ++i)
        tag[i] = check(i);
    std::vector&amp;lt;long long&amp;gt; f(siz);
    f[0] = 1ll;
    for (int i = 1; i &amp;lt; siz; ++i)
        for (int j = i; j; j = (j - 1) &amp;amp; i)
            if (tag[j])
                (f[i] += ((__builtin_popcount(j) &amp;amp; 1) ? 1 : mod - 1) * f[i ^ j]) %= mod;
    std::cout &amp;lt;&amp;lt; f[siz - 1] * inv2 % mod * m % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d---balance-scale&#34;&gt;D - Balance Scale&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc306/tasks/abc306_h&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc306/tasks/abc306_h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以发现，如果将被 &lt;code&gt;=&lt;/code&gt; 连起来的点缩起来，就可以转化成上一个问题。但枚举被缩的点集显然是不能通过的，这里介绍一种方法。&lt;/p&gt;
&lt;p&gt;不把缩点放在开头。在上一题中的 DP 式子 &lt;span class=&#34;math inline&#34;&gt;\(f(S)=\sum\limits_{T\in S} (-1)^{|T|+1}\cdot f(S - T)\)&lt;/span&gt; 中，考虑和我们最终的答案有什么差异：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;在现在的问题中，有的边是可以不选的！考虑这会给容斥带来怎样的影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先应该知道一件事情：你决定把一部分点缩到一起，当且仅当它们全部由 &lt;code&gt;=&lt;/code&gt; 连接。要让一些边加入 DP，也就是让它们不是 &lt;code&gt;=&lt;/code&gt;，当且仅当它们成为连通块的『割』——把连通块分成多个连通块。这种情况显然已经由另一条路径转移过了。也就是说，就用这个式子可以得到所有答案。 1. 另一个问题，在上一题中，我们可以轻易地判断 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 是否为独立集；但在本问中，不是独立集的点集也可能缩点成为独立集。&lt;/p&gt;
&lt;p&gt;发现有一种唯一方法，就是使 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 中位于同一连通块的点缩到一起；所以应该将 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 的次数替换为 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 所在连通块个数 &lt;span class=&#34;math inline&#34;&gt;\(+1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;注意这里说的连通块是 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的导出子图中的连通块。&lt;/p&gt;
&lt;p&gt;这也启示我们不要把缩点和图的连通性等等关联得太死，需要把点等价的场景都可能用到缩点。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353, inv2 = (mod + 1) &amp;gt;&amp;gt; 1;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; fa(n + 1);
    std::function&amp;lt;int(int)&amp;gt; find = [&amp;amp;](int x) &amp;#123;
        return fa[x] == x ? x : fa[x] = find(fa[x]);
    &amp;#125;;
    auto merge = [&amp;amp;](int x, int y) &amp;#123;
        fa[find(x)] = find(y);
        return;
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int x, y; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    int siz = 1 &amp;lt;&amp;lt; n;
    std::vector&amp;lt;int&amp;gt; cnt(siz);
    for (int i = 0; i &amp;lt; siz; ++i) &amp;#123;
        std::iota(fa.begin(), fa.end(), 0);
        std::vector&amp;lt;int&amp;gt; tag(n + 1);
        for (int j = 1; j &amp;lt;= n; ++j)
            if ((i &amp;gt;&amp;gt; (j - 1)) &amp;amp; 1)
                for (auto k : g[j])
                    if ((i &amp;gt;&amp;gt; (k - 1)) &amp;amp; 1)
                        merge(k, j);
        for (int j = 1; j &amp;lt;= n; ++j)
            if ((i &amp;gt;&amp;gt; (j - 1)) &amp;amp; 1)
                cnt[i] += (fa[j] == j);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; f(siz);
    f[0] = 1ll;
    for (int i = 1; i &amp;lt; siz; ++i)
        for (int j = i; j; j = (j - 1) &amp;amp; i)
            if (cnt[j])
                (f[i] += ((cnt[j] &amp;amp; 1) ? 1 : mod - 1) * f[i ^ j]) %= mod;
    std::cout &amp;lt;&amp;lt; f[siz - 1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e---主旋律&#34;&gt;E - 主旋律&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11714&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11714&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;即，给定一个有向图，问边集有多少个子集是强连通的。&lt;/p&gt;
&lt;p&gt;再次涉及到了连通性问题，但在这里需要结合 SCC 缩点来考虑。容易发现强连通即缩出来是一个点；故需要关注缩出来的点数。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f(S)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的导出子图内合法边子集的数量，&lt;span class=&#34;math inline&#34;&gt;\(g(S)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的导出子图中非法边子集的数量；&lt;span class=&#34;math inline&#34;&gt;\(h(S,k)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的导出子图中边的子集缩出来有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个点的数量， 令 &lt;span class=&#34;math inline&#34;&gt;\(E(S_1, S_2)\)&lt;/span&gt; 表示从 &lt;span class=&#34;math inline&#34;&gt;\(S_1\)&lt;/span&gt; 指向 &lt;span class=&#34;math inline&#34;&gt;\(S_2\)&lt;/span&gt; 的边数，则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(S) = 2^{E(S,S)}-g(S)\\
g(S)=\sum_{T \subseteq S}2^{E(T, S - T)}\cdot 2^{E(T, T)}\cdot \sum_{k=1+[T=\varnothing]} (-1)^{k+1}\cdot h(S - T, k)\\
h(S, k) = \sum_{T\subset S} f(T) \cdot h(S - T, k-1)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注意为什么要用一个 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 来转移 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 呢？我们发现 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 的次数和缩出来的点数是有关的，而光凭 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 无法表示点数信息，所以需要用 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 来搭个桥。&lt;/p&gt;
&lt;p&gt;直接 DP，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\cdot 3^n)\)&lt;/span&gt;。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
