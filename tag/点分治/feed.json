{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"点分治\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20250612/",
            "url": "https://xsc062.netlify.app/20250612/",
            "title": "点分治",
            "date_published": "2025-06-12T09:18:55.000Z",
            "content_html": "<p>一时兴起在博客里搜索『点分治』，发现没有匹配项。</p>\n<span id=\"more\"></span>\n<hr />\n<h2 id=\"定义\">定义</h2>\n<p>适用于解决和点对、路径相关的问题。</p>\n<p>对于任意点 <span class=\"math inline\">\\(x\\)</span>，树上任意简单路径 <span class=\"math inline\">\\((u,v)\\)</span> 被分为几类：</p>\n<ol type=\"1\">\n<li>不经过 <span class=\"math inline\">\\(x\\)</span>。</li>\n<li>经过 <span class=\"math inline\">\\(x\\)</span>：\n<ul>\n<li>一个端点为 <span class=\"math inline\">\\(x\\)</span>。</li>\n<li>两个端点都不为 <span class=\"math inline\">\\(x\\)</span>：可以由上一种情况拼接得到。</li>\n</ul></li>\n</ol>\n<p>如果我们把每个点作为 <span class=\"math inline\">\\(x\\)</span> 的情况都枚举一遍，再统计不重复的 <span class=\"math inline\">\\((u,v)\\)</span>，在一种特定的枚举顺序下可以做到 <span class=\"math inline\">\\(O(n\\log n)\\)</span> 完成所有点对的枚举。</p>\n<p>证明略，每次取子树重心，只遍历没遍历过的点即可。</p>\n<p>关于子树重心，一则阅读材料：<a href=\"https://liu-cheng-ao.blog.uoj.ac/blog/2969\">一种基于错误的寻找重心方法的点分治的复杂度分析</a>。</p>\n<hr />\n<h2 id=\"cf1575e-eye-pleasing-city-park-tour\">CF1575E Eye-Pleasing City Park Tour</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/1575/E\" class=\"uri\">https://codeforces.com/problemset/problem/1575/E</a></p>\n<p>随便用线段树维护一下就行了。复杂度 <span class=\"math inline\">\\(O(n\\log^2 n)\\)</span>。</p>\n<details>\n<p>随便维护一下 <img src=\"/em/ll.gif\" /></p>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 1e9 + 7;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, k;\n    std::cin &gt;&gt; n &gt;&gt; k;\n    std::vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i];\n    std::vector&lt;std::vector&lt;std::pair&lt;int, int&gt; &gt; &gt; g(n + 1);\n    for (int i = 1, x, y, c; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y &gt;&gt; c;\n        g[x].emplace_back(y, c), g[y].emplace_back(x, c);\n    &#125;\n    std::vector&lt;std::vector&lt;std::pair&lt;int, long long&gt; &gt; &gt; bit(2, std::vector&lt;std::pair&lt;int, long long&gt; &gt; (n + 1));\n    auto lowbit = [&amp;](int x) &#123;\n        return x &amp; -x;\n    &#125;;\n    auto add = [&amp;](int id, int x, long long v, int type) &#123;\n        for (++x; x &lt;= n; x += lowbit(x))\n            bit[id][x].first += type, (bit[id][x].second += v * type) %= mod;\n        return;\n    &#125;;\n    auto ask = [&amp;](int id, int x) &#123;\n        std::pair&lt;int, long long&gt; res;\n        for (++x; x; x -= lowbit(x))\n            res.first += bit[id][x].first, (res.second += bit[id][x].second) %= mod;\n        return res;\n    &#125;;\n    std::vector&lt;int&gt; p, siz(n + 1), mx(n + 1), tag(n + 1);\n    std::function&lt;void(int, int)&gt; findp = [&amp;](int x, int fa) &#123;\n        p.push_back(x);\n        siz[x] = 1, mx[x] = 0;\n        for (auto [i, c] : g[x])\n            if (i != fa &amp;&amp; !tag[i]) &#123;\n                findp(i, x);\n                siz[x] += siz[i];\n                mx[x] = std::max(mx[x], siz[i]);\n            &#125;\n        return;\n    &#125;;\n    auto findrt = [&amp;](int x) &#123;\n        std::vector&lt;int&gt;().swap(p), findp(x, -1);\n        int n = (int)p.size();\n        for (auto i : p)\n            if (mx[i] &lt;= n / 2 &amp;&amp; n - siz[i] &lt;= n / 2)\n                return i;\n        return -1;\n    &#125;;\n    auto res(0ll);\n    std::function&lt;void(int, int, int, int, int, long long, int, int)&gt; calc = [&amp;](int x, int fa, int oc, int la, int cnt, long long s, int os, int type) &#123;\n        if (cnt &gt; k)\n            return;\n        if (type == 0) &#123;\n            auto t0(ask(oc, k - cnt)), t1(ask(!oc, k - cnt - 1));\n            // auto lr(res);\n            (res += t0.first * (s - os) + t0.second) %= mod;\n            (res += t1.first * (s - os) + t1.second) %= mod;\n            // printf(&quot;  %d(%d, %lld): ask[0](%d) = (%d, %lld), ask[1](%d) = (%d, %lld), res += %lld\\n&quot;, x, cnt, s - os, k - cnt, t0.first, t0.second, k - cnt - 1, t1.first, t1.second, res - lr);\n        &#125;\n        else if (type != 0) &#123;\n            // printf(&quot;  %d(%d, %lld): add(%d, %lld)\\n&quot;, x, cnt, s - os, oc, s * type);\n            add(oc, cnt, s, type);\n        &#125;\n        for (auto [i, c] : g[x])\n            if (i != fa &amp;&amp; !tag[i])\n                calc(i, x, oc, c, cnt + (la != c), (s + a[i]) % mod, os, type);\n        return;\n    &#125;;\n    std::function&lt;void(int)&gt; DFS = [&amp;](int x) &#123;\n        x = findrt(x);\n        // printf(&quot;DFS %d\\n&quot;, x);\n        for (auto [i, c] : g[x])\n            if (!tag[i]) &#123;\n                calc(i, x, c, c, 0, (a[x] + a[i]) % mod, a[x], 0);\n                calc(i, x, c, c, 0, (a[x] + a[i]) % mod, a[x], 1);\n            &#125;\n        (res += ask(0, k).second + ask(1, k).second) %= mod;\n        (res += a[x]) %= mod;\n        // printf(&quot;res += %lld + %lld\\n&quot;, ask(0, k).second, ask(1, k).second);\n        for (auto [i, c] : g[x])\n            if (!tag[i])\n                calc(i, x, c, c, 0, (a[x] + a[i]) % mod, a[x], -1);\n        // assert(!ask(0, k).second);\n        tag[x] = 1;\n        for (auto [i, c] : g[x])\n            if (!tag[i])\n                DFS(i);\n        return;\n    &#125;;\n    DFS(1);\n    std::cout &lt;&lt; (res + mod) % mod &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"a---三元图-graf\">A - 三元图 Graf</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P10829\" class=\"uri\">https://www.luogu.com.cn/problem/P10829</a></p>\n<p>发现很圆方树；观察题图，肯定想要把中间的方点作为树根。</p>\n<p>发现它就是重心；进一步地，整个圆方树其实是一个点分治的结构。显然除了最后一层，每次找到的重心都应该是方点；并且其应该有三个等大的儿子。check 上述两点即可。</p>\n<p>唉还是挺常规的，限制我做出来这道题的应该是我已经 &gt; 1y 没写过连通性问题了 😅</p>\n<details>\n<p>怎么还有人不会判重边的 😅</p>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1), _g(n + 1);\n    auto nosol = [](void) &#123;\n        std::cout &lt;&lt; &quot;ne&quot; &lt;&lt; &#39;\\n&#39;;\n        exit(0);\n        return;\n    &#125;;\n    std::set&lt;std::pair&lt;int, int&gt; &gt; t;\n    for (int x, y; m--; ) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        if (x == y || t.count(&#123; x, y &#125;))\n            nosol();\n        t.insert(&#123; x, y &#125;), t.insert(&#123; y, x &#125;);\n        _g[x].push_back(y), _g[y].push_back(x);\n    &#125;\n    std::vector&lt;int&gt; st, dfn(n + 1), low(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        static int now = 0;\n        st.push_back(x);\n        dfn[x] = low[x] = ++now;\n        for (auto i : _g[x])\n            if (!dfn[i]) &#123;\n                DFS(i, x);\n                low[x] = std::min(low[x], low[i]);\n                if (low[i] &gt;= dfn[x]) &#123;\n                    ++n, g.emplace_back();\n                    for (int p = st.back(); ; p = st.back()) &#123;\n                        g[n].push_back(p), g[p].push_back(n);\n                        st.pop_back();\n                        if (p == i)\n                            break;\n                    &#125;\n                    g[n].push_back(x), g[x].push_back(n);\n                &#125;\n            &#125;\n            else if (i != fa)\n                low[x] = std::min(low[x], dfn[i]);\n        return;\n    &#125;;\n    int n1 = n;\n    DFS(1, -1);\n    std::vector&lt;int&gt; siz(n + 1), p, mx(n + 1), tag(n + 1);\n    DFS = [&amp;](int x, int fa) &#123;\n        siz[x] = 1, mx[x] = 0;\n        p.push_back(x);\n        for (auto i : g[x])\n            if (i != fa &amp;&amp; !tag[i]) &#123;\n                DFS(i, x);\n                siz[x] += siz[i];\n                mx[x] = std::max(mx[x], siz[i]);\n            &#125;\n        return;\n    &#125;;\n    auto findrt = [&amp;](int x) &#123;\n        p.clear(), DFS(x, -1);\n        int n = (int)p.size();\n        for (auto i : p)\n            if (mx[i] &lt;= n / 2 &amp;&amp; n - siz[i] &lt;= n / 2)\n                return i;\n        return -1;\n    &#125;;\n    std::function&lt;void(int)&gt; DFS1 = [&amp;](int x) &#123;\n        x = findrt(x), DFS(x, -1);\n        int si = -1, cnt = 0;\n        if (siz[x] == 1) &#123;\n            if (x &gt; n1)\n                nosol();\n            return;\n        &#125;\n        if (x &lt;= n1)\n            nosol();\n        for (auto i : g[x])\n            if (!tag[i]) &#123;\n                ++cnt;\n                if (~si &amp;&amp; si != siz[i])\n                    nosol();\n                if (si == -1)\n                    si = siz[i];\n            &#125;\n        if (cnt != 3)\n            nosol();\n        tag[x] = 1;\n        for (auto i : g[x])\n            if (!tag[i])\n                DFS1(i);\n        return;\n    &#125;; \n    DFS1(1);\n    std::cout &lt;&lt; &quot;da&quot; &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"b---distance-on-triangulation\">B - Distance on Triangulation</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P6976\" class=\"uri\">https://www.luogu.com.cn/problem/P6976</a></p>\n<p>众（除了我）所周知 <a href=\"/20231117/#经典建模\">凸多边形的三角剖分可以转化为树上问题</a>，故把树建出来；一个重要的点是要认识到这个树的意义。树上的点其实是没什么物理含义的；经过了某一个树上的点和经过了三角形上的任一点是等价的；也就是说，想要从某个点走到另一个点，肯定要经过对应的树上路径，但这不能反应实际距离什么的，只是能获取路径可能包含的点和必须包含的点（的超集），具体还是要最短路。</p>\n<p>接着转化为点分治。但其实这里的点分治有点像序列分治：先跑一遍根节点（三个）在当前分治范围内的最短路，然后处理经过了这个点的询问，然后递归。容易发现三个点里有一些之前被算过了，且一定包含了这个分治范围，直接跳过就行了。</p>\n<p>注意询问要写成整体二分那种动态下传的形式，只把被某个子树完全包含的询问传下去；不然复杂度是错的。以及这样就可以剪枝：发现询问数组空了就可以停了。直接 TLE to 200ms 了 😅</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; deg(n + 1);\n    std::vector&lt;std::vector&lt;int&gt; &gt; _g(n + 1), g(n + 1);\n    for (int i = 1; i &lt; n; ++i) &#123;\n        _g[i].push_back(i + 1), _g[i + 1].push_back(i);\n        ++deg[i], ++deg[i + 1];\n    &#125;\n    _g[1].push_back(n), _g[n].push_back(1);\n    ++deg[1], ++deg[n];\n    for (int i = 1, x, y; i &lt;= n - 3; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        _g[x].push_back(y), _g[y].push_back(x);\n        ++deg[x], ++deg[y];\n    &#125;\n    int cnt = 0;\n    std::vector&lt;std::vector&lt;int&gt; &gt; t(1);\n    &#123;\n        std::queue&lt;int&gt; q;\n        std::vector&lt;int&gt; inq(n + 1);\n        for (int i = 1; i &lt;= n; ++i)\n            if (deg[i] == 2)\n                q.push(i);\n        std::map&lt;std::pair&lt;int, int&gt;, int&gt; st;\n        for (; !q.empty(); ) &#123;\n            int x = q.front();\n            q.pop(), inq[x] = 1;\n            if (deg[x] == 2) &#123;\n                ++cnt, t.push_back(&#123; x &#125;);\n                for (auto i : _g[x])\n                    if (!inq[i]) &#123;\n                        t[cnt].push_back(i);\n                    &#125;\n                std::sort(t[cnt].begin(), t[cnt].end());\n                for (int a = 0; a &lt; 2; ++a)\n                    for (int b = a + 1; b &lt; 3; ++b) &#123;\n                        std::pair&lt;int, int&gt; now(t[cnt][a], t[cnt][b]);\n                        if (st.count(now)) &#123;\n                            int to = st[now];\n                            // printf(&quot;add %d &lt;-&gt; %d\\n&quot;, to, cnt);\n                            g[cnt].push_back(to), g[to].push_back(cnt);\n                        &#125;\n                        else\n                            st[now] = cnt;\n                    &#125;\n            &#125;\n            for (auto i : _g[x])\n                if (--deg[i] == 2)\n                    q.push(i);\n        &#125;\n    &#125;\n    int q;\n    std::cin &gt;&gt; q;\n    std::vector&lt;int&gt; res(q + 1, 0x3f3f3f3f);\n    std::vector&lt;std::tuple&lt;int, int, int&gt; &gt; u(q);\n    for (int i = 1, x, y; i &lt;= q; ++i)\n        std::cin &gt;&gt; x &gt;&gt; y, u[i - 1] = &#123; x, y, i &#125;;\n    int tik = 0;\n    std::vector&lt;int&gt; siz(cnt + 1), mx(cnt + 1), p, now(n + 1), p1;\n    std::vector&lt;int&gt; dis(n + 1), tag(n + 1), vis(n + 1), faa(n + 1);\n    std::function&lt;void(int, int)&gt; DFS1 = [&amp;](int x, int fa) &#123;\n        siz[x] = 1, mx[x] = 0;\n        p.push_back(x);\n        for (auto i : t[x])\n            now[i] = tik, p1.push_back(i);\n        for (auto i : g[x])\n            if (i != fa &amp;&amp; !tag[i]) &#123;\n                DFS1(i, x);\n                siz[x] += siz[i];\n                mx[x] = std::max(mx[x], siz[i]);\n            &#125;\n        return;\n    &#125;;\n    auto findrt = [&amp;](int x) &#123;\n        p.clear(), p1.clear(), DFS1(x, -1);\n        int n = (int)p.size();\n        for (auto i : p)\n            if (mx[i] &lt;= n / 2 &amp;&amp; n - siz[i] &lt;= n / 2)\n                return i;\n        return -1;\n    &#125;;\n    auto BFS = [&amp;](int x) &#123;\n        std::queue&lt;int&gt; q;\n        for (auto i : p1)\n            dis[i] = 0x3f3f3f3f;\n        q.push(x), dis[x] = 0;\n        for (; !q.empty(); ) &#123;\n            int x = q.front();\n            q.pop();\n            for (auto i : _g[x])\n                if (dis[i] == 0x3f3f3f3f &amp;&amp; now[i] == tik)\n                    dis[i] = dis[x] + 1, q.push(i);\n        &#125;\n        return;\n    &#125;;\n    std::function&lt;void(int, int, int)&gt; calc = [&amp;](int x, int fa, int rt) &#123;\n        for (auto i : t[x])\n            faa[i] = rt;\n        for (auto i : g[x])\n            if (i != fa &amp;&amp; !tag[i])\n                calc(i, x, rt);\n        return;\n    &#125;;\n    std::vector&lt;std::vector&lt;std::tuple&lt;int, int, int&gt; &gt; &gt; tmp(n + 1);\n    std::function&lt;void(int, std::vector&lt;std::tuple&lt;int, int, int&gt; &gt;)&gt; DFS = [&amp;](int x, std::vector&lt;std::tuple&lt;int, int, int&gt; &gt; q) &#123;\n        if (q.empty())\n            return;\n        ++tik, x = findrt(x);\n        for (auto i : g[x])\n            calc(i, x, i);\n        for (auto k : t[x])\n            if (!vis[k]) &#123;\n                vis[k] = 1, BFS(k);\n                for (auto [u, v, id] : q)\n                    res[id] = std::min(res[id], dis[u] + dis[v]);\n            &#125;\n        for (auto [u, v, id] : q)\n            if (faa[u] == faa[v])\n                tmp[faa[u]].emplace_back(u, v, id);\n        std::vector&lt;std::tuple&lt;int, int, int&gt; &gt;().swap(q);\n        tag[x] = 1;\n        for (auto i : g[x])\n            if (!tag[i])\n                DFS(i, std::move(tmp[i]));\n        return;\n    &#125;;\n    DFS(1, std::move(u));\n    for (int i = 1; i &lt;= q; ++i)\n        std::cout &lt;&lt; res[i] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"c---shopping\">C - Shopping</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P6326\" class=\"uri\">https://www.luogu.com.cn/problem/P6326</a></p>\n<p>意识到连通块 DP 也是可以放在点分上做的，令 <span class=\"math inline\">\\(f_{u,i}\\)</span> 表示在（点分时的）子树 <span class=\"math inline\">\\(u\\)</span> 中，<span class=\"math inline\">\\(u\\)</span> 选了至少一个，共用了 <span class=\"math inline\">\\(i\\)</span> 体积的最大价值。剩下就是一个树上的多重 + 01 背包；发现这个 01 背包不满足可以优化的形式，所以考虑树上背包序列化，转换成序列上多重背包问题；不知道真实数据强度，但我认为应该用 <a href=\"/20250707-1/#例单调队列优化多重背包\">单调队列优化多重背包</a>。</p>\n<p>注意树背包序列化的细节其实是有点多的。可能需要一些邪思。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int inf = 0x3f3f3f3f;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int T;\n    for (std::cin &gt;&gt; T; T--; ) &#123;\n        int n, m;\n        std::cin &gt;&gt; n &gt;&gt; m;\n        std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n        std::vector&lt;int&gt; v(n + 1), w(n + 1), c(n + 1);\n        for (int i = 1; i &lt;= n; ++i)\n            std::cin &gt;&gt; w[i];\n        for (int i = 1; i &lt;= n; ++i)\n            std::cin &gt;&gt; v[i];\n        for (int i = 1; i &lt;= n; ++i)\n            std::cin &gt;&gt; c[i];\n        for (int i = 1, x, y; i &lt; n; ++i) &#123;\n            std::cin &gt;&gt; x &gt;&gt; y;\n            g[x].push_back(y), g[y].push_back(x);\n        &#125;\n        std::vector&lt;int&gt; siz(n + 1), mx(n + 1), tag(n + 1), p;\n        std::function&lt;void(int, int)&gt; DFS1 = [&amp;](int x, int fa) &#123;\n            p.push_back(x);\n            siz[x] = 1, mx[x] = 0;\n            for (auto i : g[x])\n                if (i != fa &amp;&amp; !tag[i]) &#123;\n                    DFS1(i, x);\n                    siz[x] += siz[i];\n                    mx[x] = std::max(mx[x], siz[i]);\n                &#125;\n            return;\n        &#125;;\n        int now = 0;\n        std::vector&lt;int&gt; nex(n + 1), tab(n + 1);\n        auto findrt = [&amp;](int x) &#123;\n            p.clear(), DFS1(x, -1);\n            int n = (int)p.size();\n            for (auto i : p)\n                if (mx[i] &lt;= n / 2 &amp;&amp; n - siz[i] &lt;= n / 2)\n                    return i;\n            assert(0);\n            return -1;\n        &#125;;\n        std::function&lt;void(int, int)&gt; DFS2 = [&amp;](int x, int fa) &#123;\n            tab[++now] = x;\n            for (auto i : g[x])\n                if (i != fa &amp;&amp; !tag[i])\n                    DFS2(i, x);\n            nex[x] = now;\n            return;\n        &#125;;\n        int res = -inf;\n        std::function&lt;void(int)&gt; DFS = [&amp;](int x) &#123;\n            x = findrt(x), now = 0, DFS2(x, -1);\n            std::vector&lt;std::vector&lt;int&gt; &gt; f(now + 1, std::vector&lt;int&gt; (m + 1, -inf));\n            for (int i = 1; i &lt;= c[x] &amp;&amp; i * v[x] &lt;= m; ++i)\n                f[1][i * v[x]] = i * w[x];\n            for (int i = 1; i &lt; now; ++i) &#123;\n                int V = v[tab[i + 1]], W = w[tab[i + 1]], C = c[tab[i + 1]];\n                for (int b = 0; b &lt; V; ++b) &#123;\n                    std::vector&lt;int&gt; q;\n                    int h = 0, t = -1;\n                    for (int a = 0; a * V + b &lt;= m; ++a) &#123;\n                        for (; h &lt;= t &amp;&amp; a - q[h] &gt; C; ++h);\n                        if (h &lt;= t &amp;&amp; f[i][q[h] * V + b] != -inf)\n                            f[i + 1][a * V + b] = std::max(f[i + 1][a * V + b], f[i][q[h] * V + b] + (a - q[h]) * W);\n                        for (; h &lt;= t &amp;&amp; f[i][a * V + b] - a * W &gt;= f[i][q[t] * V + b] - q[t] * W; --t);\n                        q.resize(++t + 1), q[t] = a;\n                    &#125;\n                &#125;\n                int to = nex[tab[i + 1]];\n                for (int j = 0; j &lt;= m; ++j)\n                    f[to][j] = std::max(f[to][j], f[i][j]);\n            &#125;\n            res = std::max(res, *std::max_element(f[now].begin(), f[now].end()));\n            std::vector&lt;std::vector&lt;int&gt; &gt;().swap(f);\n            tag[x] = 1;\n            for (auto i : g[x])\n                if (!tag[i])\n                    DFS(i);\n            return;\n        &#125;;\n        DFS(1);\n        std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    &#125;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"d---加油站\">D - 加油站</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P10805\" class=\"uri\">https://www.luogu.com.cn/problem/P10805</a></p>\n<p>点分治后分为 <span class=\"math inline\">\\(u\\to rt\\)</span> 和 <span class=\"math inline\">\\(rt\\to v\\)</span> 两个部分考虑。前者只需要倍增找到第一次加油的点即可；后者需要对于每个点作为加油站的情况，统计起点个数。</p>\n<p>具体地，需要分类讨论：若 <span class=\"math inline\">\\(d(rt,v)&lt;k\\)</span>，说明<strong>上次加油一定不在当前子树内</strong>；在根节点上登记的加油站中统计走得到 <span class=\"math inline\">\\(fa_v\\)</span> 但走不到 <span class=\"math inline\">\\(v\\)</span> 的，就可以找到 <span class=\"math inline\">\\(fa_v\\)</span> 作为加油站对应的起点个数。对 <span class=\"math inline\">\\(d(rt,v)\\ge k\\)</span>，只需要倍增找到上一次加油的点即可找到 <span class=\"math inline\">\\(fa_v\\)</span> 的答案。</p>\n<p>说着很轻巧，实现着很恶心。摆了。</p>\n<hr />\n<h2 id=\"e---首都\">E - 首都</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P7215\" class=\"uri\">https://www.luogu.com.cn/problem/P7215</a></p>\n<p>启示我们点分治处理的问题不一是与『树结构』强相关者；也可以仅利用点分治划分出来的块，例如『若超出当前块，则一定不优』之类的。</p>\n<p>本题的该性质通过分讨是好证的；所以直接每个块内暴力即可。复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, k;\n    std::cin &gt;&gt; n &gt;&gt; k;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1), t(k + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    std::vector&lt;int&gt; col(n + 1), mx(n + 1), siz(n + 1);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        std::cin &gt;&gt; col[i];\n        t[col[i]].push_back(i);\n    &#125;\n    std::vector&lt;int&gt; tag(n + 1), p, tik(n + 1), faa(n + 1), vis(n + 1), book(k + 1);\n    std::function&lt;void(int, int)&gt; DFS1 = [&amp;](int x, int fa) &#123;\n        siz[x] = 1, mx[x] = 0;\n        p.push_back(x), tik[x] = 1;\n        for (auto i : g[x])\n            if (!tag[i] &amp;&amp; i != fa) &#123;\n                DFS1(i, x);\n                siz[x] += siz[i];\n                mx[x] = std::max(mx[x], siz[i]);\n            &#125;\n        return;\n    &#125;;\n    auto findrt = [&amp;](int x) &#123;\n        p.clear(), DFS1(x, -1);\n        int n = (int)p.size();\n        for (auto i : p)\n            if (mx[i] &lt;= n / 2 &amp;&amp; n - siz[i] &lt;= n / 2)\n                return i;\n        assert(0);\n        return -1;\n    &#125;;\n    std::function&lt;void(int)&gt; DFS2 = [&amp;](int x) &#123;\n        for (auto i : g[x])\n            if (!tag[i] &amp;&amp; i != faa[x])\n                faa[i] = x, DFS2(i);\n        return;\n    &#125;;\n    int res = 0x3f3f3f3f;\n    std::function&lt;void(int)&gt; DFS = [&amp;](int x) &#123;\n        x = findrt(x);\n        faa[x] = -1, DFS2(x);\n        std::queue&lt;int&gt; q;\n        q.push(col[x]), book[col[x]] = 1;\n        int cnt = 0;\n        for (; !q.empty(); ) &#123;\n            int f = q.front();\n            q.pop();\n            for (auto i : t[f])\n                if (tik[i]) \n                    for (int p = i; ~p &amp;&amp; !vis[p]; p = faa[p]) &#123;\n                        vis[p] = 1;\n                        if (!book[col[p]]) &#123;\n                            if (++cnt &gt;= res)\n                                goto outo;\n                            q.push(col[p]), book[col[p]] = 1;\n                        &#125;\n                    &#125;\n                else\n                    goto outo;\n        &#125;\n        res = cnt;\n        // printf(&quot;x = %d: cnt = %d\\n&quot;, x, cnt);\n    outo:\n        for (auto i : p)\n            vis[i] = tik[i] = book[col[i]] = 0;\n        tag[x] = 1;\n        for (auto i : g[x])\n            if (!tag[i])\n                DFS(i);\n        return;\n    &#125;;\n    DFS(1);\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;    \n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"f---开店\">F - 开店</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P3241\" class=\"uri\">https://www.luogu.com.cn/problem/P3241</a></p>\n<p>转化问题，原问题即求解权值在 <span class=\"math inline\">\\([L,R]\\)</span> 间的元素到 <span class=\"math inline\">\\(u\\)</span> 的距离和。</p>\n<p>一般求解距离的方法是找到 LCA 后计算，考虑如果不利用树上 LCA，而是利用点分树上 LCA 如何计算。分讨易证得点分树上 LCA 一定在两点路径上。</p>\n<p>储存点分树上每个点到其每个祖先的距离，就可以方便地计算任意两点间距离。接下来处理原问题的弱化：对于每个 <span class=\"math inline\">\\(u\\)</span> 求解其到树上所有点距离和。显然这是一个类似换根的问题，随便做即可。</p>\n<p>现在需要在线地解决原问题。<strong>可以用 vector 存储这一层所有点的权值与深度信息，按权值排序后二分查询</strong>。复杂度 <span class=\"math inline\">\\(O(n\\log^2 n)\\)</span>。实现的时候应该可以注意到原题限制点度数对复杂度的保证。</p>\n<details>\n<p>打起来的时候感觉很史，但实际上调得比大多数题快。</p>\n<p>大概懂得为什么经常看大佬写游记做到史题的实现预期都是『一遍过』了。</p>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst long long inf = 1e18;\nconst int maxn = 1.5e5 + 5;\nstd::vector&lt;std::pair&lt;int, int&gt; &gt; g[maxn];\nint top[maxn], siz[maxn], fa[maxn], son[maxn], dep[maxn], dis[maxn];\nvoid DFS1(int x) &#123;\n    siz[x] = 1;\n    for (auto [i, w] : g[x])\n        if (i != fa[x]) &#123;\n            fa[i] = x;\n            dep[i] = dep[x] + 1, dis[i] = dis[x] + w;\n            DFS1(i);\n            siz[x] += siz[i];\n            if (siz[i] &gt; siz[son[x]])\n                son[x] = i;\n        &#125;\n    return;\n&#125;\nvoid DFS2(int x) &#123;\n    if (son[x])\n        top[son[x]] = top[x], DFS2(son[x]);\n    for (auto [i, w] : g[x])\n        if (i != fa[x] &amp;&amp; i != son[x])\n            top[i] = i, DFS2(i);\n    return;\n&#125;\nint ask(int x, int y) &#123;\n    int sx = x, sy = y;\n    for (; top[x] != top[y]; x = fa[top[x]])\n        if (dep[top[x]] &lt; dep[top[y]])\n            std::swap(x, y);\n    x = dep[x] &lt; dep[y] ? x : y;\n    return dis[sx] + dis[sy] - 2 * dis[x];\n&#125;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, q, A;\n    std::cin &gt;&gt; n &gt;&gt; q &gt;&gt; A;\n    std::vector&lt;int&gt; c(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; c[i];\n    for (int i = 1, x, y, w; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;\n        g[x].emplace_back(y, w), g[y].emplace_back(x, w);\n    &#125;\n    DFS1(1), DFS2(1);\n    std::vector&lt;int&gt; mx(n + 1), siz(n + 1), p, tag(n + 1);\n    std::function&lt;void(int, int)&gt; DFS1 = [&amp;](int x, int fa) &#123;\n        siz[x] = 1, mx[x] = 0;\n        p.push_back(x);\n        for (auto [i, w] : g[x])\n            if (!tag[i] &amp;&amp; i != fa) &#123;\n                DFS1(i, x);\n                siz[x] += siz[i];\n                mx[x] = std::max(mx[x], siz[i]);\n            &#125;\n        return;\n    &#125;;\n    auto findrt = [&amp;](int x) &#123;\n        p.clear(), DFS1(x, -1);\n        int n = (int)p.size();\n        for (auto i : p)\n            if (mx[i] &lt;= n / 2 &amp;&amp; n - siz[i] &lt;= n / 2)\n                return i;\n        assert(0);\n        return -1;\n    &#125;;\n    std::vector&lt;int&gt; dis(n + 1);\n    std::vector&lt;std::array&lt;std::vector&lt;std::pair&lt;int, long long&gt; &gt;, 3&gt; &gt; t(n + 1);\n    std::function&lt;void(int, int, std::vector&lt;std::pair&lt;int, long long&gt; &gt;&amp;)&gt; DFS2 = [&amp;](int x, int fa, std::vector&lt;std::pair&lt;int, long long&gt; &gt; &amp;t) &#123;\n        t.emplace_back(c[x], dis[x]);\n        for (auto [i, w] : g[x])\n            if (!tag[i] &amp;&amp; i != fa) &#123;\n                dis[i] = dis[x] + w;\n                DFS2(i, x, t);\n            &#125;\n        return;\n    &#125;;\n    std::vector&lt;std::pair&lt;int, int&gt; &gt; to(n + 1);\n    std::function&lt;std::pair&lt;int, int&gt; (int)&gt; DFS = [&amp;](int x) &#123;\n        x = findrt(x);\n        int ret = dis[x];\n        for (int j = 0; j &lt; (int)g[x].size(); ++j) &#123;\n            auto [i, w] = g[x][j];\n            if (!tag[i]) &#123;\n                dis[i] = w;\n                DFS2(i, x, t[x][j]);\n                std::sort(t[x][j].begin(), t[x][j].end());\n                // printf(&quot;[%d, %d]: %d(%lld)&quot;, x, j, t[x][j][0].first, t[x][j][0].second);\n                for (int k = 1; k &lt; (int)t[x][j].size(); ++k) &#123;\n                    t[x][j][k].second += t[x][j][k - 1].second;\n                    // printf(&quot; %d(%lld)&quot;, t[x][j][k].first, t[x][j][k].second);\n                &#125;\n                // puts(&quot;&quot;);\n            &#125;\n        &#125;\n        tag[x] = 1;\n        for (int j = 0; j &lt; (int)g[x].size(); ++j) &#123;\n            auto [i, w] = g[x][j];\n            if (!tag[i]) &#123;\n                auto [rt, d] = DFS(i);\n                to[rt] = &#123; x, j &#125;;\n            &#125;\n        &#125;\n        return std::make_pair(x, ret);\n    &#125;;\n    int rt = DFS(1).first;\n    std::vector&lt;std::vector&lt;int&gt; &gt; fd(n + 1);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        int now = i;\n        for (;; now = to[now].first) &#123;\n            fd[i].push_back(ask(now, i));\n            if (now == rt)\n                break;\n        &#125;\n    &#125;\n    for (int u, a, b; q--; ) &#123;\n        static long long la = 0ll;\n        std::cin &gt;&gt; u &gt;&gt; a &gt;&gt; b;\n        int l = std::min((a + la) % A, (b + la) % A), r = std::max((a + la) % A, (b + la) % A);\n        // printf(&quot;ask %d, [%d, %d]\\n&quot;, u, l, r);\n        auto ask = [&amp;](int x, int j) &#123;\n            auto res(0ll);\n            int cnt = 0, p = 0;\n            p = std::lower_bound(t[x][j].begin(), t[x][j].end(), std::make_pair(l, -1ll)) - t[x][j].begin();\n            cnt -= p;\n            if (p != 0)\n                res -= t[x][j][p - 1].second;\n            p = std::upper_bound(t[x][j].begin(), t[x][j].end(), std::make_pair(r, inf)) - t[x][j].begin();\n            cnt += p;\n            if (p != 0)\n                res += t[x][j][p - 1].second;\n            return std::make_pair(res, cnt);\n        &#125;;\n        la = ask(u, 0).first + ask(u, 1).first + ask(u, 2).first;\n        // int U = u;\n        for (auto d = ++fd[u].begin(); u != rt; ++d) &#123;\n            auto [fa, k] = to[u];\n            // fprintf(stderr, &quot;u = %d, fa = %d, d = %d\\n&quot;, U, fa, *d);\n            for (int j = 0; j &lt; 3; ++j)\n                if (j != k) &#123;\n                    auto [len, cnt] = ask(fa, j);\n                    la += len + (long long)cnt * *d;\n                &#125;\n            if (c[fa] &gt;= l &amp;&amp; c[fa] &lt;= r)\n                la += *d;\n            u = fa;\n        &#125;\n        std::cout &lt;&lt; la &lt;&lt; &#39;\\n&#39;;\n    &#125;\n    return 0;\n&#125;</code></pre>\n</details>\n",
            "tags": [
                "点分治"
            ]
        }
    ]
}