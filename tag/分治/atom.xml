<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xsc062.netlify.app</id>
    <title> • Posts by &#34;分治&#34; tag</title>
    <link href="https://xsc062.netlify.app" />
    <updated>2025-05-20T14:22:43.000Z</updated>
    <category term="并查集" />
    <category term="斜率优化" />
    <category term="悬线法" />
    <category term="哈希" />
    <category term="字典树" />
    <category term="DP" />
    <category term="单调队列" />
    <category term="分治" />
    <category term="二分图" />
    <category term="CRT / exCRT" />
    <category term="排列组合" />
    <category term="网络流" />
    <category term="费用流" />
    <category term="二分" />
    <category term="上下界网络流" />
    <category term="容斥原理" />
    <category term="线段树" />
    <category term="树状数组" />
    <category term="区间 DP" />
    <category term="构造" />
    <category term="Tarjan" />
    <category term="数据结构" />
    <category term="下饭" />
    <category term="LCA" />
    <category term="倍增" />
    <category term="鸽巢原理" />
    <category term="概率期望" />
    <category term="调和级数" />
    <category term="差分" />
    <category term="思维" />
    <category term="树形 DP" />
    <category term="最小生成树" />
    <category term="SAM" />
    <category term="状压" />
    <category term="分块" />
    <category term="可持久化" />
    <category term="笛卡尔树" />
    <category term="高维前缀和" />
    <category term="闲话" />
    <category term="欧拉回路" />
    <category term="树链剖分" />
    <category term="长链剖分" />
    <category term="KMP" />
    <category term="border" />
    <category term="字符串" />
    <category term="AC 自动机" />
    <category term="SA" />
    <category term="数学" />
    <category term="树上差分" />
    <category term="FWT" />
    <category term="堆" />
    <category term="树的重心" />
    <category term="二项式定理" />
    <category term="二项式反演" />
    <category term="贪心" />
    <category term="均摊" />
    <category term="计数" />
    <category term="优化建图" />
    <category term="反悔贪心" />
    <category term="调整法" />
    <category term="背包" />
    <category term="博弈论" />
    <category term="DP 优化" />
    <category term="虚树" />
    <category term="点分治" />
    <category term="WQS 二分" />
    <category term="闵可夫斯基和" />
    <category term="slope trick" />
    <category term="四边形不等式" />
    <category term="暴力" />
    <category term="状压 DP" />
    <category term="组合数学" />
    <category term="支配对" />
    <category term="DDP" />
    <category term="平衡树" />
    <category term="容斥" />
    <category term="猫树" />
    <category term="Kruskal 重构树" />
    <category term="李超线段树" />
    <entry>
        <id>https://xsc062.netlify.app/20250520/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250520/"/>
        <content type="html">&lt;p&gt;manual 是 anual 的 m 词形式（胡言乱语）&lt;/p&gt;
&lt;p&gt;Everyone is potential. （每个人都是蛋白质。）&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cf2043e-matrix-transformation&#34;&gt;CF2043E Matrix Transformation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/2043/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/2043/E&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\times m\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(01\)&lt;/span&gt; 矩阵 &lt;span class=&#34;math inline&#34;&gt;\(A,B\)&lt;/span&gt;，可任意将 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 的一行置为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 或一列置为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，问是否能将 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 变成 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现如果 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 的某一行是 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，那么不管 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 这一行是什么东西都可以通过一次操作让这一行满足条件（当然，要求这步操作最后进行）。列也是相似的。&lt;/p&gt;
&lt;p&gt;那么就有一个撤销的思路，从 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 中不断删除全 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 行或全 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 列，不能删了就对比二者剩下的部分是否全等（因为此时任何操作都是非法的）。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, m;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
        using arr = std::vector&amp;lt;int&amp;gt;;
        using brr = std::vector&amp;lt;arr&amp;gt;;
        using crr = std::vector&amp;lt;brr&amp;gt;;
        brr cn(31, arr(n + 1)), cm(31, arr(m + 1));
        crr a(31, brr(n + 1, arr(m + 1))), b(31, brr(n + 1, arr(m + 1)));
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = 1, x; j &amp;lt;= m; ++j) &amp;#123;
                std::cin &amp;gt;&amp;gt; x;
                for (int k = 0; k &amp;lt; 31; ++k)
                    a[k][i][j] = (x &amp;gt;&amp;gt; k) &amp;amp; 1;
            &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = 1, x; j &amp;lt;= m; ++j) &amp;#123;
                std::cin &amp;gt;&amp;gt; x;
                for (int k = 0; k &amp;lt; 31; ++k) &amp;#123;
                    b[k][i][j] = (x &amp;gt;&amp;gt; k) &amp;amp; 1;
                    cn[k][i] += b[k][i][j];
                    cm[k][j] += !b[k][i][j];
                &amp;#125;
            &amp;#125;
        for (int k = 0; k &amp;lt; 31; ++k) &amp;#123;
            std::queue&amp;lt;int&amp;gt; qn, qm;
            std::vector&amp;lt;int&amp;gt; tn(n + 1, 1), tm(m + 1, 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                if (!cn[k][i])
                    tn[i] = 0, qn.push(i);
            for (int j = 1; j &amp;lt;= m; ++j)
                if (!cm[k][j])
                    tm[j] = 0, qm.push(j);
            for (; !qn.empty() || !qm.empty(); ) &amp;#123;
                if (!qn.empty()) &amp;#123;
                    int i = qn.front();
                    // printf(&amp;quot;delete line %d\n&amp;quot;, i);
                    qn.pop();
                    for (int j = 1; j &amp;lt;= m; ++j)
                        if (!b[k][i][j] &amp;amp;&amp;amp; !--cm[k][j])
                            tm[j] = 0, qm.push(j);
                &amp;#125;
                else &amp;#123;
                    int j = qm.front();
                    // printf(&amp;quot;delete column %d\n&amp;quot;, j);
                    qm.pop();
                    for (int i = 1; i &amp;lt;= n; ++i)
                        if (b[k][i][j] &amp;amp;&amp;amp; !--cn[k][i])
                            tn[i] = 0, qn.push(i);
                &amp;#125;
            &amp;#125;
            for (int i = 1; i &amp;lt;= n; ++i)
                if (tn[i])
                    for (int j = 1; j &amp;lt;= m; ++j)
                        if (tm[j] &amp;amp;&amp;amp; a[k][i][j] != b[k][i][j]) &amp;#123;
                            // printf(&amp;quot;k = %d: (%d, %d)\n&amp;quot;, k, i, j);
                            goto nosol;
                        &amp;#125;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; &amp;quot;Yes\n&amp;quot;;
        continue;
    nosol :
        std::cout &amp;lt;&amp;lt; &amp;quot;No\n&amp;quot;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cf2043f-nim&#34;&gt;CF2043F Nim&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/2043/problem/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/2043/problem/F&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 次询问，每次问从 &lt;span class=&#34;math inline&#34;&gt;\(a_l\sim a_r\)&lt;/span&gt; 选非空子序列使得异或和为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，问子序列最小长度、该前提下的方案数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现子序列问题可以等价为背包；背包可以合并（即把整区间拆成若干段后，两两信息可以合并）；&lt;a href=&#34;/20231117/#关于背包&#34;&gt;背包可以放在分治上&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;由此，把询问离线下来放在 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 的分治上，每次只处理在 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 间且跨越 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 的询问就可以得到答案。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\cdot v^2\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;不要用方案数是否为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 来判断是否无解！因为方案数可能是 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt; 的倍数……&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int siz = 63;
const int mod = 998244353;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    struct _ &amp;#123; int l, r, id; &amp;#125;;
    std::vector&amp;lt;_&amp;gt; q(m + 1);
    std::vector&amp;lt;std::pair&amp;lt;int, long long&amp;gt; &amp;gt; res(m + 1, &amp;#123; inf, 0ll &amp;#125;);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; q[i].l &amp;gt;&amp;gt; q[i].r;
        q[i].id = i;
    &amp;#125;
    std::function&amp;lt;void(int, int, std::vector&amp;lt;_&amp;gt; &amp;amp;q)&amp;gt; calc = [&amp;amp;](int l, int r, std::vector&amp;lt;_&amp;gt; &amp;amp;q) &amp;#123;
        if (l == r) &amp;#123;
            for (auto [l, r, id] : q)
                if (a[l] == 0)
                    res[id] = &amp;#123; 0, 1ll &amp;#125;;
            return;
        &amp;#125;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        std::vector&amp;lt;_&amp;gt; ql, qr, qm;
        for (; !q.empty(); q.pop_back()) &amp;#123;
            if (q.back().r &amp;lt;= mid)
                ql.push_back(std::move(q.back()));
            else if (q.back().l &amp;gt; mid)
                qr.push_back(std::move(q.back()));
            else
                qm.push_back(std::move(q.back()));
        &amp;#125;
        calc(l, mid, ql), calc(mid + 1, r, qr);
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(r - l + 1, std::vector&amp;lt;int&amp;gt; (siz + 1, inf));
        std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; g(r - l + 1, std::vector&amp;lt;long long&amp;gt; (siz + 1));
        f[mid - l][a[mid]] = 1ll, g[mid - l][a[mid]] = 1ll;
        for (int i = mid - l - 1; ~i; --i) &amp;#123;
            int k = a[i + l];
            f[i] = f[i + 1], g[i] = g[i + 1];
            if (f[i][k] == 1)
                (++g[i][k]) %= mod;
            else
                f[i][k] = 1, g[i][k] = 1ll;
            for (int j = 0, k = a[i + l]; j &amp;lt;= siz; ++j)
                if (f[i + 1][j ^ k] + 1 &amp;lt; f[i][j])
                    f[i][j] = f[i + 1][j ^ k] + 1, g[i][j] = g[i + 1][j ^ k];
                else if (f[i + 1][j ^ k] + 1 == f[i][j])
                    (g[i][j] += g[i + 1][j ^ k]) %= mod;
        &amp;#125;
        f[mid - l + 1][a[mid + 1]] = 1ll, g[mid - l + 1][a[mid + 1]] = 1ll;
        for (int i = mid - l + 2; i &amp;lt;= r - l; ++i) &amp;#123;
            int k = a[i + l];
            f[i] = f[i - 1], g[i] = g[i - 1];
            if (f[i][k] == 1)
                (++g[i][k]) %= mod;
            else
                f[i][k] = 1, g[i][k] = 1ll;
            for (int j = 0; j &amp;lt;= siz; ++j)
                if (f[i - 1][j ^ k] + 1 &amp;lt; f[i][j])
                    f[i][j] = f[i - 1][j ^ k] + 1, g[i][j] = g[i - 1][j ^ k];
                else if (f[i - 1][j ^ k] + 1 == f[i][j])
                    (g[i][j] += g[i - 1][j ^ k]) %= mod;
        &amp;#125;
        for (auto [ql, qr, id] : qm) &amp;#123;
            // printf(&amp;quot;at [%d, %d], mid = %d: ASK [%d, %d]: \n&amp;quot;, l, r, mid, ql, qr);
            ql -= l, qr -= l;
            if (f[ql][0] &amp;lt; inf)
                res[id].first = f[ql][0], res[id].second = g[ql][0];
            if (f[qr][0] &amp;lt; res[id].first)
                res[id].first = f[qr][0], res[id].second = g[qr][0];
            else if (f[qr][0] == res[id].first)
                (res[id].second += g[qr][0]) %= mod;
            for (int i = 1; i &amp;lt;= siz; ++i) &amp;#123;
                // printf(&amp;quot;  %d[%d]: %d(%lld)  |  %d[%d]: %d(%lld)\n&amp;quot;, ql + l, i, f[ql][i], g[ql][i], qr + l, i, f[qr][i], g[qr][i]);
                if (f[ql][i] + f[qr][i] &amp;lt; res[id].first)
                    res[id].first = f[ql][i] + f[qr][i], res[id].second = g[ql][i] * g[qr][i] % mod;
                else if (f[ql][i] + f[qr][i] == res[id].first)
                    (res[id].second += g[ql][i] * g[qr][i]) %= mod;
            &amp;#125;
            if (res[id].first &amp;lt; inf)
                res[id].first = (qr - ql + 1) - res[id].first;
        &amp;#125;
        return;
    &amp;#125;;
    calc(1, n, q);
    for (int i = 1; i &amp;lt;= m; ++i)
        if (res[i].first &amp;lt; inf)
            std::cout &amp;lt;&amp;lt; res[i].first &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; res[i].second &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        else
            std::cout &amp;lt;&amp;lt; -1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;贪玩蓝月&#34;&gt;贪玩蓝月&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/6515&#34; class=&#34;uri&#34;&gt;https://loj.ac/p/6515&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;差不多的题：&lt;a href=&#34;https://atcoder.jp/contests/jag2018summer-day2/tasks/jag2018summer_day2_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/jag2018summer-day2/tasks/jag2018summer_day2_d&lt;/a&gt;，注意加入是按体积单增的&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;发现断点确定时可以背包 &lt;span class=&#34;math inline&#34;&gt;\(O(p)\)&lt;/span&gt; 维护插入删除；使用 &lt;a href=&#34;/20231117/#双栈模拟双端队列&#34;&gt;双栈模拟双端队列&lt;/a&gt; 就可以均摊 &lt;span class=&#34;math inline&#34;&gt;\(O(pm)\)&lt;/span&gt; 实现插入删除。&lt;/p&gt;
&lt;p&gt;对于询问，当然可以 &lt;span class=&#34;math inline&#34;&gt;\(O(p^2)\)&lt;/span&gt; 枚举最值再枚举方案（即枚举一端的贡献）；但复杂度不太美观。考虑倒过来，先 &lt;span class=&#34;math inline&#34;&gt;\(O(v)\)&lt;/span&gt; 枚举一端贡献，再枚举『能凑出 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 中的值』的另一端的贡献。这样就发现我们是在求区间最大值；每次询问时构建 ST 表预处理另一端的区间最大值即可。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(mq\log q)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int m, mod;
    std::cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; m &amp;gt;&amp;gt; mod;
    std::array&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt;, 2&amp;gt; T;
    std::array&amp;lt;std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt;, 2&amp;gt; F;
    F[0].emplace_back(mod, -inf), F[1].emplace_back(mod, -inf);
    F[0][0][0] = 0ll, F[1][0][0] = 0ll;
    for (; m--; ) &amp;#123;
        std::string op;
        std::cin &amp;gt;&amp;gt; op;
        if (op[0] == &amp;#39;I&amp;#39;) &amp;#123;
            int v, w;
            std::cin &amp;gt;&amp;gt; v &amp;gt;&amp;gt; w, v %= mod;
            auto &amp;amp;t = T[op[1] == &amp;#39;G&amp;#39;];
            auto &amp;amp;f = F[op[1] == &amp;#39;G&amp;#39;];
            t.emplace_back(v, w);
            f.emplace_back(f.back());
            for (int i = (int)f.size() - 1, j = 0; j &amp;lt; mod; ++j)
                if (f[i - 1][(j + mod - v) % mod] + w &amp;gt; f[i][j])
                    f[i][j] = f[i - 1][(j + mod - v) % mod] + w;
        &amp;#125;
        else if (op[0] == &amp;#39;D&amp;#39;) &amp;#123;
            auto &amp;amp;t0 = T[op[1] == &amp;#39;G&amp;#39;], &amp;amp;t1 = T[op[1] == &amp;#39;F&amp;#39;];
            auto &amp;amp;f0 = F[op[1] == &amp;#39;G&amp;#39;], &amp;amp;f1 = F[op[1] == &amp;#39;F&amp;#39;];
            if (t0.empty()) &amp;#123;
                t1.erase(t1.begin());
                int to = t1.size() / 2;
                std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; (t1.begin(), t1.begin() + to).swap(t0);
                std::reverse(t0.begin(), t0.end());
                std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; (t1.begin() + to, t1.end()).swap(t1);
                f0.resize(1), f1.resize(1);
                for (auto [v, w] : t0) &amp;#123;
                    f0.emplace_back(f0.back());
                    for (int i = (int)f0.size() - 1, j = 0; j &amp;lt; mod; ++j)
                        if (f0[i - 1][(j + mod - v) % mod] + w &amp;gt; f0[i][j])
                            f0[i][j] = f0[i - 1][(j + mod - v) % mod] + w;
                &amp;#125;
                for (auto [v, w] : t1) &amp;#123;
                    f1.emplace_back(f1.back());
                    for (int i = (int)f1.size() - 1, j = 0; j &amp;lt; mod; ++j)
                        if (f1[i - 1][(j + mod - v) % mod] + w &amp;gt; f1[i][j])
                            f1[i][j] = f1[i - 1][(j + mod - v) % mod] + w;
                &amp;#125;
            &amp;#125;
            else
                t0.pop_back(), f0.pop_back();
        &amp;#125;
        else &amp;#123;
            int l, r;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
            auto res(-inf);
            std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; st(std::__lg(mod) + 1, std::vector&amp;lt;long long&amp;gt; (mod + 1));
            st[0] = F[1].back();
            for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= mod; ++j)
                for (int i = 0; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt; mod; ++i)
                    st[j][i] = std::max(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
            auto ask = [&amp;amp;](int l, int r) &amp;#123;
                int k = std::__lg(r - l + 1);
                return std::max(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
            &amp;#125;;
            for (int j = 0; j &amp;lt; mod; ++j)
                if (j &amp;lt;= l)
                    res = std::max(res, F[0].back()[j] + ask(l - j, r - j));
                else if (l &amp;lt; j &amp;amp;&amp;amp; j &amp;lt;= r)
                    res = std::max(&amp;#123; res, F[0].back()[j] + ask(0, r - j), F[0].back()[j] + ask(l + mod - j, mod - 1) &amp;#125;);
                else
                    res = std::max(res, F[0].back()[j] + ask(l + mod - j, r + mod - j));
            std::cout &amp;lt;&amp;lt; std::max(-1ll, res) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;apio2025-转杆&#34;&gt;APIO2025 转杆&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P12543&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P12543&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;总有一天我要让全天下的数学题 DP 题字符串题图论题模拟题数据结构题思维题全部消失&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;不要把它转化成序列问题来考虑！这对观察到结论没有好处！&lt;/p&gt;
&lt;p&gt;考虑 &lt;span class=&#34;math inline&#34;&gt;\(n=2\)&lt;/span&gt; 的情况，当且仅当垂直时最优。&lt;span class=&#34;math inline&#34;&gt;\(n=3\)&lt;/span&gt; 时，随便固定其中一条线，发现剩下两条线如果夹角固定，则代价固定；当夹角取 &lt;span class=&#34;math inline&#34;&gt;\(90^{\circ}\)&lt;/span&gt; 时最优。&lt;/p&gt;
&lt;p&gt;于是猜是不是任意一对都要垂直。考虑数归，当前 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt; 对 &lt;del&gt;不知道怎么摆的，反正就是&lt;/del&gt; 最优时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考虑加入第 &lt;span class=&#34;math inline&#34;&gt;\(2n+1\)&lt;/span&gt; 条；参照 &lt;span class=&#34;math inline&#34;&gt;\(n=3\)&lt;/span&gt; 的情形，把前 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt; 条任意两两配对，则第 &lt;span class=&#34;math inline&#34;&gt;\(2n+1\)&lt;/span&gt; 的位置对代价没有任何影响。&lt;/li&gt;
&lt;li&gt;考虑加入第 &lt;span class=&#34;math inline&#34;&gt;\(2n+2\)&lt;/span&gt; 条；相似地，它的位置对前 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt; 条没有任何影响；故需要最大化它和第 &lt;span class=&#34;math inline&#34;&gt;\(2n+1\)&lt;/span&gt; 条的贡献。取垂直即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此得到任意一对都要垂直。具体怎么调整呢？首先下意识排序；配对方式即将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac i+\lfloor \frac n2\rfloor\)&lt;/span&gt; 配对；因为能感受到这样影响的线段最少。严谨的证明好像没看到。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include&amp;lt;bits/stdc++.h&amp;gt;
void energy(int, std::vector&amp;lt;int&amp;gt;);
void rotate(std::vector&amp;lt;int&amp;gt;, int);
void energy(int n, std::vector&amp;lt;int&amp;gt; a) &amp;#123;
    std::vector&amp;lt;int&amp;gt; id(n);
    std::iota(id.begin(), id.end(), 0);
    std::sort(id.begin(), id.end(), [&amp;amp;](int x, int y) &amp;#123; return a[x] &amp;lt; a[y]; &amp;#125;);
    for (int i = 0, j = n / 2; i &amp;lt; n / 2; ++i, ++j)
        rotate(&amp;#123; id[j] &amp;#125;, (a[id[i]] + 75000 - a[id[j]]) % 50000);
    return;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;abc407e-most-valuable-parentheses&#34;&gt;ABC407E Most Valuable Parentheses&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc407/tasks/abc407_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc407/tasks/abc407_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有一个很典（可惜我不知道）的 trick：&lt;a href=&#34;/20231117/#贪心选取括号序列&#34;&gt;贪心构造最优括号序列&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;用优先队列维护，贪心选即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        std::vector&amp;lt;int&amp;gt; a(2 * n + 1);
        for (int i = 1; i &amp;lt;= 2 * n; ++i)
            std::cin &amp;gt;&amp;gt; a[i];
        long long res = a[1];
        std::priority_queue&amp;lt;int&amp;gt; q;
        for (int i = 2; i &amp;lt; 2 * n; i += 2) &amp;#123;
            q.push(a[i]), q.push(a[i + 1]);
            res += q.top(), q.pop();
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="分治" />
        <category term="背包" />
        <updated>2025-05-20T14:22:43.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20241017/</id>
        <title>模拟赛</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20241017/"/>
        <content type="html">&lt;p&gt;好消息：会简单数学题 &lt;img src=&#34;/em/dy.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;更好的消息：忘取模了 &lt;img src=&#34;/em/dy.gif&#34; /&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-distorted&#34;&gt;A. distorted&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5611/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5611/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑最多需要多少个元素。最坏情况是选取四个角的元素，已经可以覆盖整个矩阵。进一步考虑感性反证发现无论如何都选不出来五个，故最多选择四个。&lt;/p&gt;
&lt;p&gt;我们发现，选取中间一个就可以覆盖整个矩阵。扩展一下，选择中间列就可以覆盖上 / 下半个矩阵，选择中间行就可以覆盖左 / 右半个矩阵。剩下的选择过后只能保证照顾到对应的 1/4 矩阵且一定不会完全覆盖其他的 1/4 矩阵。&lt;/p&gt;
&lt;p&gt;我们发现，中心元素地位高于中间行 / 列元素高于左上、左下、右上、右下元素。由此出发讨论选择元素的个数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 个：选择中心元素。&lt;/li&gt;
&lt;li&gt;2 个：在中间行的左右两边各选一个 / 在中间列的上下两边各选一个。&lt;/li&gt;
&lt;li&gt;3 个：选一个中间行 / 列 + 两个其他元素，或两个中间行 / 列 + 一个其他元素。&lt;/li&gt;
&lt;li&gt;4 个：左上、左下、右上、右下各选一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;统计各个方向的最小值，选最小组合即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
#define putchar
const long long inf = 0x3f3f3f3f;
int main() &amp;#123;
    freopen(&amp;quot;distorted.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;distorted.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        long long to = inf, u = inf, d = inf, l = inf, r = inf, q = inf, z = inf, p = inf, m = inf;
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                long long x;
                std::cin &amp;gt;&amp;gt; x;
                if (i * 2 - 1 == n &amp;amp;&amp;amp; j * 2 - 1 == n)
                    to = x;
                else if (i * 2 - 1 == n &amp;amp;&amp;amp; j * 2 - 1 &amp;lt; n)
                    l = std::min(l, x);
                else if (i * 2 - 1 == n)
                    r = std::min(r, x);
                else if (i * 2 - 1 &amp;lt; n &amp;amp;&amp;amp; j * 2 - 1 == n)
                    u = std::min(u, x);
                else if (j * 2 - 1 == n)
                    d = std::min(d, x);
                else if (i * 2 - 1 &amp;lt; n &amp;amp;&amp;amp; j * 2 - 1 &amp;lt; n)
                    q = std::min(q, x);
                else if (i * 2 - 1 &amp;lt; n)
                    p = std::min(p, x);
                else if (j * 2 - 1 &amp;lt; n)
                    z = std::min(z, x);
                else
                    m = std::min(m, x);
            &amp;#125;
        std::cout &amp;lt;&amp;lt; std::min(&amp;#123; to, l + r, u + d, l + u + m, l + d + p, r + u + z, r + d + q, u + z + m, d + q + p, l + p + m, r + q + z, q + p + z + m &amp;#125;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-fate&#34;&gt;B. fate&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5611/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5611/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;诈骗题。对于前半段，考虑取差分数组 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，容易发现如果直接在差分数组上做减法，一定满足后面减得不比前面少。故只要满足差分数组每一项至少为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 即可，答案为 &lt;span class=&#34;math inline&#34;&gt;\(\prod {i\le p} a_i - a_{i-1} + 1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;对于后半段，我们考虑转化成和前半段相似的问题，将后半段翻转，同样取差分数组，则此时在该差分数组上满足后面减得不比前面少，同时需要满足差分数组每一项至多为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，前面的所有项初始为负，操作为减，自然满足；但第 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 项在把前面减去的全部加上后不一定满足。故前面最多减去 &lt;span class=&#34;math inline&#34;&gt;\(d_p\)&lt;/span&gt;，随便在哪里减都无所谓，组合意义一下，就是无标号球放有标号盒子可空放可不放，插板得答案为 &lt;span class=&#34;math inline&#34;&gt;\(\displaystyle {-d_p + n - p\choose n - p}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;前后乘起来即为答案。注意不要在最后一步乘起来的时候忘记取模，否则你会获得 76pts 的高分 &lt;img src=&#34;/em/xk.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
    freopen(&amp;quot;fate.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;fate.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    int n, m;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::cin &amp;gt;&amp;gt; m;
    long long res = 1;
    for (int i = 1; i &amp;lt; m; ++i) &amp;#123;
        auto x = a[i] - a[i - 1];
        (res *= x + 1) %= mod;
    &amp;#125;
    auto qkp = [](long long x, int y) &amp;#123;
        long long res = 1;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        long long res = 1ll;
        for (int i = n; i &amp;gt; n - m; --i)
            (res *= i) %= mod;
        for (int i = m; i; --i)
            (res *= qkp(i, mod - 2)) %= mod;    
        return res;
    &amp;#125;;
    if (m != n)
        (res *= C(a[m + 1] - a[m] + n - m, n - m)) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-abstruse&#34;&gt;C. abstruse&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9731&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9731&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意到有挺高的一档 &lt;span class=&#34;math inline&#34;&gt;\(S=2\)&lt;/span&gt; 的分，考虑其启示意义。&lt;/p&gt;
&lt;p&gt;我们对于一对 &lt;span class=&#34;math inline&#34;&gt;\((a_i, b_i)\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b_i\)&lt;/span&gt; 间连边，则原问题转化为给无向图的每条边选择方向，使对于每个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(|in_x-out_x|\le 1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们知道对于一条欧拉回路，有对于任意 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(in_x=out_x\)&lt;/span&gt;。然后这个时候为了把问题转化成欧拉回路问题我们建一个虚点朝度数为奇的点连条边然后跑欧拉回路即可。&lt;/p&gt;
&lt;p&gt;至于 &lt;span class=&#34;math inline&#34;&gt;\(S=2^k\)&lt;/span&gt;，就是在明示分治。即对于任意 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，要求其在前后 &lt;span class=&#34;math inline&#34;&gt;\(2^{k-1}\)&lt;/span&gt; 次出现次数相差不超过 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。注意到非常幸福的有前后两个部分大小相等，又有一个天才的建图，&lt;mark&gt;即在每个点和自己所属的行连边，然后跑欧拉回路，出边表示选前半部分，入边表示选后半部分，这样就保证了一行中各有 &lt;span class=&#34;math inline&#34;&gt;\(2^{k-1}\)&lt;/span&gt; 个选前后半部分，也保证了每个点在前后半边出现的次数相差不超过 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。对于后面一个性质，分治最终可得到点在每一列出现次数相差不超过 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;打个当前弧优化然后注意计算细节复杂度然后多卡几（十）遍就过了 &lt;img src=&#34;/em/dy.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
namespace fastIO &amp;#123;
const int LEN = (1 &amp;lt;&amp;lt; 20);
#ifdef ONLINE_JUDGE
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
&amp;#125; using namespace fastIO;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    freopen(&amp;quot;abstruse.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;abstruse.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, k;
    read(n), read(m), read(k);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; a(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= m; ++j)
            read(a[i][j]);
    std::vector&amp;lt;int&amp;gt; to(k + n + 1), tag(n * m + n + k + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(k + n + 1); 
    std::function&amp;lt;void(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (l + 1 == r) &amp;#123;
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                g[a[i][l]].emplace_back(a[i][r], i);
                g[a[i][r]].emplace_back(a[i][l], i);
            &amp;#125;
            int cnt = n;
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                if ((int)g[a[i][l]].size() &amp;amp; 1)
                    g[0].emplace_back(a[i][l], ++cnt), g[a[i][l]].emplace_back(0, cnt);
                if ((int)g[a[i][r]].size() &amp;amp; 1)
                    g[0].emplace_back(a[i][r], ++cnt), g[a[i][r]].emplace_back(0, cnt);
            &amp;#125;
            std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
                for (int i = to[x]; i &amp;lt; (int)g[x].size(); i = to[x]) &amp;#123;
                    to[x] = i + 1;
                    auto [v, id] = g[x][i];
                    if (!tag[id]) &amp;#123;
                        tag[id] = 1;
                        if (x &amp;amp;&amp;amp; v)
                            a[id][l] = x, a[id][r] = v;
                        DFS(v);
                    &amp;#125;
                &amp;#125;
                return;
            &amp;#125;;
            DFS(0);
            for (int i = 1; i &amp;lt;= n; ++i)
                DFS(a[i][l]), DFS(a[i][r]);
            to[0] = 0, g[0].clear();
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                to[a[i][l]] = 0, g[a[i][l]].clear();
                to[a[i][r]] = 0, g[a[i][r]].clear();
            &amp;#125;
            std::fill(tag.begin() + 1, tag.begin() + cnt + 1, 0);
            return;
        &amp;#125;
        int mid = (l + r) &amp;gt;&amp;gt; 1, cnt = 0;
        std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(k + n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = l; j &amp;lt;= r; ++j) &amp;#123;
                g[a[i][j]].emplace_back(i + k, ++cnt);
                g[i + k].emplace_back(a[i][j], cnt);
            &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = l; j &amp;lt;= r; ++j)
                if ((int)g[a[i][j]].size() &amp;amp; 1)
                    g[0].emplace_back(a[i][j], ++cnt), g[a[i][j]].emplace_back(0, cnt);
        std::vector&amp;lt;int&amp;gt; L(n + 1, l - 1), R(n + 1, r + 1);
        std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
            for (int i = to[x]; i &amp;lt; (int)g[x].size(); i = to[x]) &amp;#123;
                to[x] = i + 1;
                auto [v, id] = g[x][i];
                if (!tag[id]) &amp;#123;
                    tag[id] = 1;
                    if (x &amp;amp;&amp;amp; v) &amp;#123;
                        if (v &amp;lt;= k)
                            a[x - k][++L[x - k]] = v;
                        else
                            a[v - k][--R[v - k]] = x;
                    &amp;#125;
                    DFS(v);
                &amp;#125;
            &amp;#125;
            return;
        &amp;#125;;
        DFS(0);
        for (int i = 1; i &amp;lt;= n; ++i)
            DFS(i + k);
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = l; j &amp;lt;= r; ++j)
                DFS(a[i][j]);
        to[0] = 0, g[0].clear();
        for (int i = 1; i &amp;lt;= n; ++i)
            to[i + k] = 0, g[i + k].clear();
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = l; j &amp;lt;= r; ++j)
                to[a[i][j]] = 0, g[a[i][j]].clear();
        std::fill(tag.begin() + 1, tag.begin() + cnt + 1, 0);
        calc(l, mid), calc(mid + 1, r);
        return;
    &amp;#125;;
    calc(1, m);
    for (int i = 1; i &amp;lt;= n; ++i, putchar(&amp;#39;\n&amp;#39;))
        for (int j = 1; j &amp;lt;= m; ++j)
            print(a[i][j], &amp;#39; &amp;#39;);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="分治" />
        <category term="欧拉回路" />
        <updated>2024-10-16T12:32:34.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230314/</id>
        <title>分治</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230314/"/>
        <content type="html">&lt;p&gt;听说是 &lt;a href=&#34;http://222.180.160.110:61235/contest/3416&#34;&gt;分治场&lt;/a&gt;，想起了自己根本没学过分治（甚至从来不知道归并排序的原理 orz）就去听 CDQ 然后一头雾水的惨痛经历，不禁 PTSD 了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-老板的又一道题&#34;&gt;A. 老板的又一道题&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是什么，有序表的最小和，切一下（所以和分治有什么关系啊）。&lt;/p&gt;
&lt;p&gt;首先对数组进行排序（我忘了 orz），然后在优先队列中填入 &lt;span class=&#34;math inline&#34;&gt;\(A_{1\sim n} + B_1\)&lt;/span&gt;。假设当前最小值为 &lt;span class=&#34;math inline&#34;&gt;\(A_i + B_j\)&lt;/span&gt;，则输出，弹出并填入 &lt;span class=&#34;math inline&#34;&gt;\(A_i + B_{j + 1}\)&lt;/span&gt;。因为 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 是单调的，所以我们填入的数（起码在输出时）是单调的。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
struct _ &amp;#123;
    int u, i;
    _() &amp;#123;&amp;#125;
    _(int u1, int i1) &amp;#123;
        u = u1, i = i1;
    &amp;#125;
    bool operator&amp;lt; (const _ q) const &amp;#123;
        return u &amp;gt; q.u;
    &amp;#125;
&amp;#125;;
int n, cnt;
int a[maxn], b[maxn];
std::priority_queue&amp;lt;_&amp;gt; q;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(b[i]);
    std::sort(a + 1, a + n + 1);
    std::sort(b + 1, b + n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        q.push(_(a[i] + b[1], 1));
    while (!q.empty()) &amp;#123;
        _ f = q.top();
        q.pop();
        print(f.u, &amp;#39; &amp;#39;);
        if (++cnt == n)
            break;
        _ t = f;
        t.u -= b[f.i];
        t.u += b[++t.i];
        q.push(t);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-魔法石的诱惑&#34;&gt;B. 魔法石的诱惑&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这，这不是二分答案？到底和分治有什么关系啊。&lt;/p&gt;
&lt;p&gt;嘶，&lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(10^8\)&lt;/span&gt;，算一算 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的范围。不难发现 &lt;span class=&#34;math inline&#34;&gt;\(Q=\sum\limits_{i&amp;gt;1} \lfloor \dfrac n{5^i} \rfloor\)&lt;/span&gt;，当 &lt;span class=&#34;math inline&#34;&gt;\(n=5\times 10^8\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(\dfrac n5\)&lt;/span&gt; 就已经是 &lt;span class=&#34;math inline&#34;&gt;\(10^8\)&lt;/span&gt; 了，所以我们二分的左右边界应为 &lt;span class=&#34;math inline&#34;&gt;\([0,5\times 10^8]\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后 &lt;code&gt;check&lt;/code&gt; 的话我们就暴力除 &lt;span class=&#34;math inline&#34;&gt;\(5\)&lt;/span&gt; 计算答案（就像小奥一样），一次 &lt;code&gt;check&lt;/code&gt; 的时间复杂度是 &lt;span class=&#34;math inline&#34;&gt;\(\log_5\)&lt;/span&gt; 的，不会有问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
int q, l, mid, r = 5e18, res;
int check(int x) &amp;#123;
    int res = 0;
    while (x / 5)
        res += (x /= 5);
    return res;
&amp;#125;
int main() &amp;#123;
    read(q);
    while (l &amp;lt;= r) &amp;#123;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        if (check(mid) &amp;gt;= q) &amp;#123;
            res = mid;
            r = mid - 1;
        &amp;#125;
        else l = mid + 1;
    &amp;#125;
    if (check(res) == q)
        print(res);
    else puts(&amp;quot;No solution&amp;quot;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-神族文字&#34;&gt;C. 神族文字&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我不理解？这到底和分治有什么关系？GM 不会是纯看标签拉题吧？标签又是哪个聪明打的？&lt;/p&gt;
&lt;p&gt;总而言之，言而总之，我们打一个 &lt;code&gt;map&lt;/code&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
using str = std::string;
str s1, s2, sl;
std::map&amp;lt;str, str&amp;gt; t;
int main() &amp;#123;
    for (;;) &amp;#123;
        std::getline(std::cin, sl);
        std::stringstream s(sl);
        if (s &amp;gt;&amp;gt; s1) &amp;#123;
            s &amp;gt;&amp;gt; s2;
            t[s2] = s1;
        &amp;#125;
        else break;
    &amp;#125;
    while (std::cin &amp;gt;&amp;gt; s1) &amp;#123;
        if (t.count(s1))
            std::cout &amp;lt;&amp;lt; t[s1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        else puts(&amp;quot;eh&amp;quot;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-逃亡&#34;&gt;D. 逃亡&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先注意到车车是自动驾驶的，就是说一个人下车过后车会自动往另一个人的方向跑。&lt;/p&gt;
&lt;p&gt;明显反复交接的话车会多跑很多路程，所以我们只交接一次。&lt;/p&gt;
&lt;p&gt;所以难点只是用未知数把最终速度表示出来（想起了物理实验题）。&lt;/p&gt;
&lt;p&gt;假设距离为 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，车速为 &lt;span class=&#34;math inline&#34;&gt;\(v_1\)&lt;/span&gt;，人速为 &lt;span class=&#34;math inline&#34;&gt;\(v_2\)&lt;/span&gt;，第一个人一直坐车坐到 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 路程，则最终时间为 &lt;span class=&#34;math inline&#34;&gt;\(\max\left\{ \dfrac x{v_1} + \dfrac {S - x}{v_2}, \dfrac x{v_1}+\dfrac {x - \dfrac x{v_1}\times v_2}{v_1 + v_2} + \dfrac {S-\dfrac x{v_1}\times v_2 - \dfrac {x - \dfrac x{v_1}\times v_2}{v_1 + v_2} \times v_2}{v_1}\right\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;有一个很明显的点，就是 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 越大，第一个人用时就越短，第二个人用时就越多。这个时候我们就可以二分 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，尽量使第一个人和第二个人用时接近（用时是一个关于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的分段函数，我们寻找其拐点），最终相同用时即为答案。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;因为从来不是很喜欢浮点数二分，采用了先整数二分再框范围取精确答案的方法。&lt;/p&gt;
&lt;p&gt;所以怎么又是二分？说好的分治场呢？&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
using db = double;
const db eps = 1e-2;
db res, ans = 1e18;
int s, v1, v2, l, mid, r;
db min(db x, db y) &amp;#123;
    return x &amp;lt; y ? x : y; 
&amp;#125;
db max(db x, db y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
bool check(int x) &amp;#123;
    db t1 = x * 1.0 / v1;
    db r1 = t1 + (s - x) * 1.0 / v2;
    db t2 = (x - t1 * v2) / (v1 + v2);
    db r2 = t1 + t2 + (s - t1 * v2 - t2 * v2) / v1;
    return r1 &amp;lt;= r2;
&amp;#125;
int main() &amp;#123;
    read(s), read(v2), read(v1);
    l = 0, r = s;
    while (l &amp;lt;= r) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        if (check(mid)) &amp;#123;
            res = (db)mid;
            r = mid - 1;
        &amp;#125;
        else l = mid + 1;
    &amp;#125;
    for (db i = res - 2; i &amp;lt;= res + 2; i += eps) &amp;#123;
        db t1 = i * 1.0 / v1;
        db r1 = t1 + (s - i) * 1.0 / v2;
        db t2 = (i - t1 * v2) / (v1 + v2);
        db r2 = t1 + t2 +
                (s - t1 * v2 - t2 * v2) / v1;
        ans = min(ans, max(r1, r2));
    &amp;#125;
    printf(&amp;quot;%.2lf&amp;quot;, ans);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e.-剔除多余括号&#34;&gt;E. 剔除多余括号&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/5&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;为了套取数据理解题意，我用 python 交了一个 &lt;code&gt;print(input())&lt;/code&gt;，结果总司令在上，得到了 33pts 的高分…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;什么叫多余括号呢？括号前后的符号优先级小于等于括号中的符号，并且若括号内存在括号与括号前同级，则括号前不为 &lt;code&gt;-&lt;/code&gt; 或 &lt;code&gt;/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这样就可以了。我们将问题划分为若干个子问题，对每个括号内的内容进行相同方式的处理：对比括号内优先级最高的符号和括号前后符号的优先级，处理括号内的内容时若遇到括号，则递归地进行相似的处理。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;其实这个充其量只能算是模拟…… 跟分治并不是很有关系，和 CSP-J 2022 T3 有点像。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 260;
int n;
char s[maxn];
bool vis[maxn];
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
int Deal(int l, int r) &amp;#123;
    int res = 1;
    for (int i = l; i &amp;lt;= r; ++i) &amp;#123;
        if (s[i] == &amp;#39;+&amp;#39; || s[i] == &amp;#39;-&amp;#39;)
            res = max(res, 1);
        else if (s[i] == &amp;#39;*&amp;#39; || s[i] == &amp;#39;/&amp;#39;)
            res = 2;
        else if (s[i] == &amp;#39;(&amp;#39;) &amp;#123;
            int cnt = 1, j;
            for (j = i + 1; j &amp;lt;= r; ++j) &amp;#123;
                if (s[j] == &amp;#39;(&amp;#39;)
                    ++cnt;
                else if (s[j] == &amp;#39;)&amp;#39;)
                    --cnt;
                if (cnt == 0)
                    break;
            &amp;#125;
            cnt = Deal(i + 1, j - 1);
            int t = 1;
            int p1 = i - 1, p2 = j + 1;
            while (s[p1] == &amp;#39;(&amp;#39; || s[p1] == &amp;#39;)&amp;#39;)
                --p1;
            while (s[p2] == &amp;#39;(&amp;#39; || s[p2] == &amp;#39;)&amp;#39;)
                ++p2;
            if (s[p1] == &amp;#39;+&amp;#39; || s[p1] == &amp;#39;-&amp;#39;)
                t = max(t, 1);
            else t = max(t, 2);
            if (s[p2] == &amp;#39;+&amp;#39; || s[p2] == &amp;#39;-&amp;#39;)
                t = max(t, 1);
            else t = max(t, 2);
            if (t &amp;lt; cnt)
                vis[i] = vis[j] = 1;
            else if (t == cnt) &amp;#123;
                if (s[p1] != &amp;#39;-&amp;#39; &amp;amp;&amp;amp; s[p1] != &amp;#39;/&amp;#39;)
                    vis[i] = vis[j] = 1;
            &amp;#125;
            i = j;
        &amp;#125;
    &amp;#125;
    return res;
&amp;#125;
int main() &amp;#123;
    s[1] = &amp;#39;+&amp;#39;;
    scanf(&amp;quot;%s&amp;quot;, s + 2);
    n = strlen(s + 1) + 1;
    s[n] = &amp;#39;+&amp;#39;;
    Deal(1, n);
    for (int i = 2; i &amp;lt; n; ++i) &amp;#123;
        if (!vis[i])
            putchar(s[i]);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-最接近点对问题&#34;&gt;F. 最接近点对问题&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分治典中典。&lt;/p&gt;
&lt;p&gt;我们将点按照横坐标排序，对点 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 进行分治。&lt;/p&gt;
&lt;p&gt;将求解区间包含的点分为两部分，假设左边部分和右边部分已经分别求解出了最近点对（出口即为求解区间仅包含两点，直接求出距离），考虑合并状态。则情况无非有三种：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;答案为左边部分的答案&lt;/li&gt;
&lt;li&gt;答案为右边部分的答案&lt;/li&gt;
&lt;li&gt;答案为左、右各选取一点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前两者是已知量，则我们求解出第三种情况，选择最小值即可。&lt;/p&gt;
&lt;p&gt;第三种情况有个很妙的处理方式：我们设前两种情况的答案较小者为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，设求解区间最靠中间的点为 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 为左边部分的点&lt;/p&gt;
&lt;p&gt;则由于我们对半二分，&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 一定是左边部分最靠右的点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于其余左边部分的节点：&lt;/p&gt;
若它们与 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 的横向距离已经大于等于 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，则它们与右边部分的点的横向距离会更大。连横向距离都已经大于等于当前最优解了，无需考虑纵向距离，筛除这部分点。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于右边部分的节点：&lt;/p&gt;
&lt;p&gt;若它们与 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 的横向距离已经大于等于 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，则它们与更左边的其他左边部分节点的横向距离会更大，故筛除这部分点。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 为右边部分的点&lt;/p&gt;
&lt;p&gt;同理。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，我们只用考虑求解区间内与 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 的横向距离小于 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的点。&lt;/p&gt;
&lt;p&gt;在筛选出这些点后，我们如何进行进一步的处理呢？答案是，&lt;strong&gt;枚举&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们枚举每一对点，计算它们间的距离。若比答案小，则更新答案。&lt;/p&gt;
&lt;p&gt;那这复杂度也太神奇了。所以我们给出一个同样神奇的优化：按纵坐标递增对筛选出的点排序。当二重循环筛选时，若当前第一层循环 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 与第二层循环 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的纵向距离大于等于了当前最小答案，就可以将第二层循环 &lt;code&gt;break&lt;/code&gt; 了。因为纵坐标单调，继续枚举距离会继续增加，离答案更远。&lt;/p&gt;
&lt;p&gt;那看起来复杂度还是很神奇，理论上来说应该是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2\log n)\)&lt;/span&gt; 的呀？&lt;/p&gt;
&lt;p&gt;考虑第一层循环 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。对于点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，有哪些 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 可以满足它的要求，从而被枚举到呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于点对无序，所以 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 从 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 开始枚举，所以 &lt;span class=&#34;math inline&#34;&gt;\(y_j&amp;gt;y_i\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;由于筛选条件，&lt;span class=&#34;math inline&#34;&gt;\(|x_i-x_m|&amp;lt; d\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(|x_j-x_m|&amp;lt; d\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;由于 &lt;code&gt;break&lt;/code&gt; 条件，&lt;span class=&#34;math inline&#34;&gt;\(y_j-y_i&amp;lt; d\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;合并一下就是，&lt;span class=&#34;math inline&#34;&gt;\(|x_i-x_j|\le 2\times d\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(0\le y_j - y_i \le d\)&lt;/span&gt;。那么我们可以画出一个底为 &lt;span class=&#34;math inline&#34;&gt;\(2\times d\)&lt;/span&gt;，高为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的矩形，且它的中轴线为 &lt;span class=&#34;math inline&#34;&gt;\(x=x_m\)&lt;/span&gt;，中轴线左右两边均为 &lt;span class=&#34;math inline&#34;&gt;\(d\times d\)&lt;/span&gt; 的正方形。&lt;/p&gt;
&lt;p&gt;若任意两个点同在左边部分或同在右边部分，那么这一对点的贡献已经在分治时计算完成了，所以一定不会比 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 小。&lt;/p&gt;
&lt;p&gt;有一个很妙的结论：满足条件的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 在矩形的左半边和右半边最多只有三个。&lt;/p&gt;
&lt;p&gt;为什么？同一部分中，任意两个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的距离至少为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;。那么四个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，距离都为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，那么正好就是整个左半边的正方形。别忘了一点，&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 需满足的三个条件都是严格小于，所以不能碰到整个矩形的边界，所以一个部分中最多只能存在三个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么实际上看似 &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 的枚举，在多个优化下就变成了 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。再加上对筛选出的点纵坐标排序的时间，总体时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2 n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using db = double;
const db inf = 1e18;
const int maxn = 6e4 + 5;
struct _ &amp;#123; db x, y; &amp;#125;;
int n;
_ a[maxn];
db dis(db x1, db y1, db x2, db y2) &amp;#123;
    return sqrt((x1 - x2) * (x1 - x2) +
                (y1 - y2) * (y1 - y2));
&amp;#125;
db min(db x, db y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
db abs(db x) &amp;#123;
    return x &amp;gt;= 0 ? x : -x;
&amp;#125;
db Solu(int l, int r) &amp;#123;
    if (l == r)
        return inf;
    if (l + 1 == r)
        return dis(a[l].x, a[l].y, a[r].x, a[r].y);
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    db d = min(Solu(l, mid), Solu(mid + 1, r));
    std::vector&amp;lt;_&amp;gt; t;
    for (int i = l; i &amp;lt;= r; ++i) &amp;#123;
        if (abs(a[i].x - a[mid].x) &amp;lt; d)
            t.push_back(a[i]);
    &amp;#125;
    std::sort(t.begin(), t.end(),
        [&amp;amp;](_ x, _ y) &amp;#123; return x.y &amp;lt; y.y; &amp;#125;);
    for (int i = 0; i &amp;lt; (int)t.size(); ++i) &amp;#123;
        for (int j = i + 1; j &amp;lt; (int)t.size(); ++j) &amp;#123;
            if (t[j].y - t[i].y &amp;gt;= d)
                break;
            d = min(d, dis(t[i].x, t[i].y,
                                t[j].x, t[j].y));
        &amp;#125;
    &amp;#125;
    return d;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);
    for (int i = 1; i &amp;lt;= n; ++i)
        scanf(&amp;quot;%lf %lf&amp;quot;, &amp;amp;a[i].x, &amp;amp;a[i].y);
    std::sort(a + 1, a + n + 1,
        [&amp;amp;](_ x, _ y) &amp;#123; return x.x &amp;lt; y.x; &amp;#125;);
    printf(&amp;quot;%.2lf\n&amp;quot;, Solu(1, n) / 2);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;考虑一个问题。代码的时间复杂度有两个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;，这是极不好的（will be fixed）。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;g.-残缺棋盘问题&#34;&gt;G. 残缺棋盘问题&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/7&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先考虑一个有趣的问题：&lt;span class=&#34;math inline&#34;&gt;\(4^n-1\)&lt;/span&gt; 一定被 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 整除吗？&lt;/p&gt;
&lt;p&gt;一个简单的方法是使用数学归纳法进行证明，其思想也会在这道题中体现。&lt;/p&gt;
&lt;p&gt;不过还有另一个方法：&lt;span class=&#34;math inline&#34;&gt;\(4^n-1=(3+1)^n-1\)&lt;/span&gt;，使用二项式定理则有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
(3+1)^n-1=\sum_{i=0}^n {n\choose i} \times 3^{n-i}\times 1^i - 1
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;不难发现除 &lt;span class=&#34;math inline&#34;&gt;\(i=n\)&lt;/span&gt; 时，前面每一项都有因子 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt;，而当 &lt;span class=&#34;math inline&#34;&gt;\(i=n\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\({n\choose n}\times 3^0\times 1^n=1\)&lt;/span&gt;，与后面的 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 抵消，故得证。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;考虑将棋盘划分为若干个 &lt;span class=&#34;math inline&#34;&gt;\(2\times 2\)&lt;/span&gt; 的 1 级区域。对于缺口所在的 1 级区域，我们使用一个刚好贴合的三格板将其补齐成为一个完整的 1 级区域。&lt;/p&gt;
&lt;p&gt;我们称包含四个完整的 &lt;span class=&#34;math inline&#34;&gt;\(2\times 2\)&lt;/span&gt; 的 1 级区域的 &lt;span class=&#34;math inline&#34;&gt;\(4\times 4\)&lt;/span&gt; 的区域为 2 级区域，对于包含了我们刚刚补齐的 1 级区域的 2 级区域，我们将最中间的四个格子视为一个 1 级区域并填充，接下来剩余的 3 个完整 1 级区域为各自失去一个能填充的格子，我们选取对应的三格板填充即可。&lt;/p&gt;
&lt;p&gt;对于一个 &lt;span class=&#34;math inline&#34;&gt;\(8\times 8\)&lt;/span&gt; 的 3 级区域，若其包含我们填充完毕的 2 级区域，我们将最中间 &lt;span class=&#34;math inline&#34;&gt;\(2\times 2\)&lt;/span&gt; 的格子视为一个 1 级区域并填充。接下来，剩余的 3 个完整的 2 级区域成为缺失 1 个格子的 2 级区域，按之前的方法填充即可。&lt;/p&gt;
&lt;p&gt;以此类推即可递归地填充完成整个棋盘。但现在又来了一个问题：这道题没有 SPJ。根据样例可知，填充规则是由外到内，中、左上、左下、右上、右下，我们按照此顺序进行分治递归即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 105;
int n, x, y, cnt;
int t[maxn][maxn];
void getColor(int c, int r, int l, int x, int y) &amp;#123;
    if (l == 2) &amp;#123;
        ++cnt;
        for (int i = c; i &amp;lt;= c + 1; ++i) &amp;#123;
            for (int j = r; j &amp;lt;= r + 1; ++j) &amp;#123;
                if (i != x || j != y)
                    t[i][j] = cnt;
            &amp;#125;
        &amp;#125;
        return;
    &amp;#125;
    l /= 2;
    if (x - c &amp;lt; l) &amp;#123;
        if (y - r &amp;lt; l) &amp;#123;
            getColor(c + l - 1, r + l - 1,
                        2, c + l - 1, r + l - 1);
            getColor(c, r, l, x, y);
            getColor(c + l, r, l, c + l, r + l - 1);
            getColor(c, r + l, l, c + l - 1, r + l);
            getColor(c + l, r + l, l, c + l, r + l);
        &amp;#125;
        else &amp;#123;
            getColor(c + l - 1, r + l - 1,
                        2, c + l - 1, r + l);
            getColor(c, r, l, c + l - 1, r + l - 1);
            getColor(c + l, r, l, c + l, r + l - 1);
            getColor(c, r + l, l, x, y);
            getColor(c + l, r + l, l, c + l, r + l);
        &amp;#125;
    &amp;#125;
    else &amp;#123;
        if (y - r &amp;lt; l) &amp;#123;
            getColor(c + l - 1, r + l - 1,
                            2, c + l, r + l - 1);
            getColor(c, r, l, c + l - 1, r + l - 1);
            getColor(c + l, r, l, x, y);
            getColor(c, r + l, l, c + l - 1, r + l);
            getColor(c + l, r + l, l, c + l, r + l);
        &amp;#125;
        else &amp;#123;
            getColor(c + l - 1, r + l - 1,
                            2, c + l, r + l);
            getColor(c, r, l, c + l - 1, r + l - 1);
            getColor(c + l, r, l, c + l, r + l - 1);
            getColor(c, r + l, l, c + l - 1, r + l);
            getColor(c + l, r + l, l, x, y);
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(x), read(y);
    getColor(1, 1, n, x, y);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j)
            print(t[i][j], &amp;#39; &amp;#39;);
        putchar(&amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;h.-tricky-function&#34;&gt;H. Tricky Function&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/8&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GM 提示了这道题就是平面最近点对。豁然开朗。&lt;/p&gt;
&lt;p&gt;不妨将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 视作 &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt;，将 &lt;span class=&#34;math inline&#34;&gt;\(\sum_{k=1}^i a_k\)&lt;/span&gt; 视作 &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt;，则直接求解平面最近点对即可。&lt;/p&gt;
</content>
        <category term="分治" />
        <updated>2023-03-13T18:33:31.000Z</updated>
    </entry>
</feed>
