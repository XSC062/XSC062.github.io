<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title> • Posts by &#34;四边形不等式&#34; tag</title>
        <link>https://xsc062.netlify.app</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Tue, 15 Jul 2025 14:13:24 +0800</pubDate>
        <lastBuildDate>Tue, 15 Jul 2025 14:13:24 +0800</lastBuildDate>
        <category>并查集</category>
        <category>斜率优化</category>
        <category>悬线法</category>
        <category>哈希</category>
        <category>字典树</category>
        <category>DP</category>
        <category>单调队列</category>
        <category>分治</category>
        <category>二分图</category>
        <category>CRT / exCRT</category>
        <category>排列组合</category>
        <category>网络流</category>
        <category>费用流</category>
        <category>二分</category>
        <category>上下界网络流</category>
        <category>容斥原理</category>
        <category>线段树</category>
        <category>树状数组</category>
        <category>区间 DP</category>
        <category>构造</category>
        <category>Tarjan</category>
        <category>数据结构</category>
        <category>下饭</category>
        <category>LCA</category>
        <category>倍增</category>
        <category>鸽巢原理</category>
        <category>概率期望</category>
        <category>调和级数</category>
        <category>差分</category>
        <category>思维</category>
        <category>树形 DP</category>
        <category>最小生成树</category>
        <category>SAM</category>
        <category>状压</category>
        <category>分块</category>
        <category>可持久化</category>
        <category>笛卡尔树</category>
        <category>高维前缀和</category>
        <category>闲话</category>
        <category>欧拉回路</category>
        <category>树链剖分</category>
        <category>长链剖分</category>
        <category>KMP</category>
        <category>border</category>
        <category>字符串</category>
        <category>AC 自动机</category>
        <category>SA</category>
        <category>数学</category>
        <category>树上差分</category>
        <category>FWT</category>
        <category>堆</category>
        <category>树的重心</category>
        <category>二项式定理</category>
        <category>二项式反演</category>
        <category>贪心</category>
        <category>均摊</category>
        <category>计数</category>
        <category>优化建图</category>
        <category>反悔贪心</category>
        <category>调整法</category>
        <category>背包</category>
        <category>博弈论</category>
        <category>DP 优化</category>
        <category>虚树</category>
        <category>点分治</category>
        <category>WQS 二分</category>
        <category>闵可夫斯基和</category>
        <category>slope trick</category>
        <category>四边形不等式</category>
        <category>暴力</category>
        <category>状压 DP</category>
        <category>组合数学</category>
        <category>支配对</category>
        <category>DDP</category>
        <category>平衡树</category>
        <category>容斥</category>
        <category>猫树</category>
        <category>Kruskal 重构树</category>
        <category>李超线段树</category>
        <item>
            <guid isPermalink="true">https://xsc062.netlify.app/20250715/</guid>
            <title>练习 决策单调性</title>
            <link>https://xsc062.netlify.app/20250715/</link>
            <category>斜率优化</category>
            <category>DP</category>
            <category>四边形不等式</category>
            <pubDate>Tue, 15 Jul 2025 14:13:24 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;『心静自然凉』大抵是因为情绪平和时副交感神经兴奋，体温略有降低导致的。吗？&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;其实是因为心脏停跳后血液循环终止、代谢中断，导致产热低于散热（？）&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---征途&#34;&gt;A - 征途&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4072&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4072&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用完全平方公式展开得到 &lt;span class=&#34;math inline&#34;&gt;\(m^2\sigma^2=m\left(\sum {x_i}^2\right)-S^2\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 为求和。&lt;/p&gt;
&lt;p&gt;所以目标是最小化 &lt;span class=&#34;math inline&#34;&gt;\(\sum {x_i}^2\)&lt;/span&gt; 这个东西。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 天走到 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，得到：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j}&amp;amp;=\min\{f_{i-1,k}+(s_j-s_k)^2\}\\
&amp;amp;=\min\{f_{i-1,k}-2\times s_j\times s_k+{s_k}^2\}+{s_j}^2
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后得到的斜率式子是 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_{i - 1, a}-f_{i - 1, b}+{s_a}^2-{s_b}^2}{2(s_a-s_b)}&amp;lt;s_j\)&lt;/span&gt;，由于 &lt;span class=&#34;math inline&#34;&gt;\(s_j\)&lt;/span&gt; 单增，&lt;del&gt;单调队列维护递减斜率即可&lt;/del&gt; &lt;strong&gt;更正：是递增斜率。原因是 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;\)&lt;/span&gt; 是弹出条件，而非保留条件……&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e9;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;long long&amp;gt; s(n + 1);
    auto sum(0ll);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        s[i] = s[i - 1] + a[i];
        sum += a[i];
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf));
    f[0][0] = 0ll;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        auto f1 = [&amp;amp;](int a, int b) &amp;#123;
            return f[i - 1][a] - f[i - 1][b] + s[a] * s[a] - s[b] * s[b];
        &amp;#125;;
        auto f2 = [&amp;amp;](int a, int b) &amp;#123;
            return 2 * (s[a] - s[b]);
        &amp;#125;;
        std::vector&amp;lt;int&amp;gt; q(n + 1);
        int h = 0, t = -1;
        q[++t] = i - 1;
        for (int j = i; j &amp;lt;= n; ++j) &amp;#123;
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(q[h + 1], q[h]) &amp;lt; s[j] * f2(q[h + 1], q[h]); ++h);
            f[i][j] = f[i - 1][q[h]] + (s[j] - s[q[h]]) * (s[j] - s[q[h]]);
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(j, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(j, q[t]); --t);
            q[++t] = j;
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; m * f[m][n] - sum * sum &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---刷野-iii&#34;&gt;B - 刷野 III&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10074&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10074&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现最坏情况就是每次『试探』都不中的情况，再试探中最坏的那一个。为啥呢，相当于我们每次攻击的一定是未知元素中血最多的一个。既然已经试探出了比阈值大的所有元素，那么下一个攻击的就一定是阈值本身，如果这次跳过它，它就会成为下一次试探失败的元素。这显然不如一开始就直接用新阈值试探。&lt;/p&gt;
&lt;p&gt;从大到小排序。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{j, i}\)&lt;/span&gt; 表示只确定了前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 大的数，已经杀了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个人的最坏情况最小代价。那么显然这一次的阈值是 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;。随便选出上一次的阈值 &lt;span class=&#34;math inline&#34;&gt;\(a_k\)&lt;/span&gt;，那么中间这一段待确定的元素数量为 &lt;span class=&#34;math inline&#34;&gt;\(i-k\)&lt;/span&gt;。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{j, i}&amp;amp;=\min\limits_{k&amp;lt;i}\{f_{j-1,k}+(i-k)\times a_i\}\\
&amp;amp;=\min\limits_{k&amp;lt;i}\{f_{j-1,k}-k\times a_i\}+i\times a_i
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;经过验证，虽然这个式子和题解长得不一样，但是是对的 &lt;del&gt;因为我 n^3 暴力 A 了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;推出斜优形式 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_{j-1,A}-f_{j-1,B}}{A-B}&amp;lt;a_i\)&lt;/span&gt;，但我的朋友，&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 是递减的。所以用单调栈维护递增斜率即可。&lt;del&gt;或者你也可以学习 grisses 打一个单调队列上二分&lt;/del&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e12;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P10074_4.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::sort(a.begin() + 1, a.end(), std::greater&amp;lt;long long&amp;gt; ());
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf));
    f[0][0] = 0ll;
    for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
        std::vector&amp;lt;int&amp;gt; q(n + 1);
        int t = -1;
        q[++t] = j - 1;
        auto f1 = [&amp;amp;](int A, int B) &amp;#123;
            return f[j - 1][A] - f[j - 1][B];
        &amp;#125;;
        auto f2 =[&amp;amp;](int A, int B) &amp;#123;
            return A - B;
        &amp;#125;;
        for (int i = j; i &amp;lt;= n; ++i) &amp;#123;
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(q[t], q[t - 1]) &amp;gt; a[i] * f2(q[t], q[t - 1]); --t);
            f[j][i] = f[j - 1][q[t]] + (i - q[t]) * a[i];
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(i, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(i, q[t]); --t);
            q[++t] = i;
        &amp;#125;
    &amp;#125;
    auto res(inf);
    for (int i = m; i &amp;lt;= n; ++i)
        res = std::min(res, f[m][i]);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---traka&#34;&gt;C - TRAKA&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7747&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7747&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;稍微手玩一下就可以发现，假如第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个人在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 次的工作时间为 &lt;span class=&#34;math inline&#34;&gt;\([L_{j,i},R_{j,i}]\)&lt;/span&gt;，第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 次为 &lt;span class=&#34;math inline&#34;&gt;\([L_{j,i-1},R_{j,i-1}]\)&lt;/span&gt;，那么要求 &lt;span class=&#34;math inline&#34;&gt;\(L_{j,i}\ge R_{j,i-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(s_j\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的前缀和。假设第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 次加工于 &lt;span class=&#34;math inline&#34;&gt;\(x_{i-1}\)&lt;/span&gt; 开始，那么我们可以把上式转写为 &lt;span class=&#34;math inline&#34;&gt;\(x_{i}+s_{j-1}\times f_{i}\ge x_{i-1}+s_j\times f_{i-1}\)&lt;/span&gt;。也即 &lt;span class=&#34;math inline&#34;&gt;\(x_i-x_{i-1}\ge s_j\times f_{i-1}-s_{j-1}\times f_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;显然需要找到一个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 使得 RSH 取得最大值；现在就可以考虑斜率优化了。由于所有项都和 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 有关，想到两边同除 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}\)&lt;/span&gt; 消掉一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 有关的系数，最后化出来的斜优形式是 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {s_A-s_B}{s_{A-1}-s_{B-1}}&amp;gt;\dfrac {f_{i-1}}{f_i}\)&lt;/span&gt;。由于 RSH 不单调，把所有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 塞到队列里维护递减斜率，打二分即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; a(n + 1), w(m + 1), s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], s[i] = s[i - 1] + a[i];
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cin &amp;gt;&amp;gt; w[i];
    std::vector&amp;lt;long long&amp;gt; f(m + 1);
    std::vector&amp;lt;int&amp;gt; q(n + 1);
    int h = 0, t = -1;
    q[++t] = 1;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        for (; h &amp;lt; t &amp;amp;&amp;amp; (s[i] - s[q[t]]) * (s[q[t] - 1] - s[q[t - 1] - 1]) &amp;gt; (s[q[t]] - s[q[t - 1]]) * (s[i - 1] - s[q[t] - 1]); --t);
        q[++t] = i;
    &amp;#125;
    for (int i = 2; i &amp;lt;= m; ++i) &amp;#123;
        int to = q[h];
        for (int l = h + 1, r = t, mid; l &amp;lt;= r; ) &amp;#123;
            mid = (l + r) &amp;gt;&amp;gt; 1;
            if ((s[q[mid]] - s[q[mid - 1]]) * w[i - 1] &amp;gt; w[i] * (s[q[mid] - 1] - s[q[mid - 1] - 1]))
                to = q[mid], l = mid + 1;
            else
                r = mid - 1;
        &amp;#125;
        f[i] = f[i - 1] + s[to] * w[i - 1] - s[to - 1] * w[i];
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[m] + w[m] * s[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---柠檬&#34;&gt;D - 柠檬&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5504&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5504&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察零：原问题『从两端取』可以转化为分段问题，故从其中一端考虑即可。&lt;/li&gt;
&lt;li&gt;观察一：若有一段连续的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，完整的比拆开的更优。&lt;/li&gt;
&lt;li&gt;观察二：如果一段 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 中夹杂了一些其他元素，那么在哪里分段是说不准的。&lt;/li&gt;
&lt;li&gt;观察三：如果选取的区间是 &lt;span class=&#34;math inline&#34;&gt;\([1,r]\)&lt;/span&gt;，那么贪心地想，&lt;span class=&#34;math inline&#34;&gt;\(a_r\)&lt;/span&gt; 一定是关键值，不然取 &lt;span class=&#34;math inline&#34;&gt;\(a_r\)&lt;/span&gt; 就浪费了。&lt;/li&gt;
&lt;li&gt;观察四：如果选取的区间是 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，那么由观察四，&lt;span class=&#34;math inline&#34;&gt;\(a_l=a_r\)&lt;/span&gt;，且该值为关键值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这几个观察，令 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\([1,i]\)&lt;/span&gt; 中出现次数，&lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示这一段以 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 结尾的最大价值：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\max\limits_{j&amp;lt;i,a_{j+1}=a_i}\{f_j+a_i\times (c_i-c_{j + 1} + 1)^2\}\\
&amp;amp;=\max\limits_{j&amp;lt;i,a_{j+1}=a_i}\{f_j+a_{j+1}\times {c_{j+1}}^2-2\times c_i\times a_{j+1}\times c_{j+1}-2\times c_{j+1}\times a_{j+1}\}+a_i\times(c_i-1)^2
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（怎么这么大一堆。）最后可以化出 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_A-f_B+a_{A+1}\cdot c_{A+1}\cdot (c_{A+1}-2)-a_{B+1}\cdot c_{B+1}\cdot (c_{B+1}-2)}{2(c_{A+1} - c_{B+1})}&amp;gt;c_i\times a_i\)&lt;/span&gt;。发现对于每一种 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(c_i\times a_i\)&lt;/span&gt; 是单增的。单调栈维护即可。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这其实提醒我们关于代换的问题——显然，当与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的项、与 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 有关的项之间存在代换关系时，应该尽量往 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方向靠。&lt;/em&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;7.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n + 1), c(n + 1), la(10001);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        c[i] = c[la[a[i]]] + 1, la[a[i]] = i;
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; _t(10001, -1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; _q(10001);
    auto f1 = [&amp;amp;](int A, int B) &amp;#123;
        return f[A] - f[B] + a[A + 1] * c[A + 1] * (c[A + 1] - 2) - a[B + 1] * c[B + 1] * (c[B + 1] - 2);
    &amp;#125;;
    auto f2 = [&amp;amp;](int A, int B) &amp;#123;
        return 2 * (c[A + 1] - c[B + 1]);
    &amp;#125;;
    ++_t[a[1]], _q[a[1]].push_back(0);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        &amp;#123;
            auto &amp;amp;t = _t[a[i]];
            auto &amp;amp;q = _q[a[i]];
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(q[t], q[t - 1]) &amp;lt; c[i] * a[i] * f2(q[t], q[t - 1]); --t);
            f[i] = f[q[t]] + a[i] * (c[i] - c[q[t] + 1] + 1) * (c[i] - c[q[t] + 1] + 1);
        &amp;#125;
        if (i &amp;lt; n) &amp;#123;
            auto &amp;amp;t = _t[a[i + 1]];
            auto &amp;amp;q = _q[a[i + 1]];
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(i, q[t]) * f2(q[t], q[t - 1]) &amp;gt; f1(q[t], q[t - 1]) * f2(i, q[t]); --t);
            q.resize(++t + 1), q[t] = i;
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---knapsack-with-diminishing-values&#34;&gt;E - Knapsack with Diminishing Values&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc373/tasks/abc373_f&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc373/tasks/abc373_f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现和 &lt;a href=&#34;/20250707-1/#例单调队列优化多重背包&#34;&gt;单调队列优化多重背包&lt;/a&gt; 有异曲同工之妙。&lt;/p&gt;
&lt;p&gt;不妨令 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 表示体积，&lt;span class=&#34;math inline&#34;&gt;\(w_i\)&lt;/span&gt; 表示价值。对于每一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，把所有体积按模 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 的余数分类，设为 &lt;span class=&#34;math inline&#34;&gt;\(j\cdot v_i+x\)&lt;/span&gt;。对于 &lt;span class=&#34;math inline&#34;&gt;\(k\cdot v_i+x\)&lt;/span&gt;，有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j\cdot v_i+x}&amp;amp;=\max\limits_{k&amp;lt;j}\{f_{i-1,k\cdot v_i+x}+(j-k)\cdot w_i-(j-k)^2\}\\
&amp;amp;=\max\limits_{k&amp;lt;j}\{f_{i-1,k\cdot v_i+x}-k\cdot w_i-k^2+2\times j\times k\}-j^2+j\cdot w_i
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;则得到 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_{i-1,A\cdot v_i+x}-f_{i-1,B\cdot v_i+x}+(B-A)\cdot w_i - A^2+B^2}{2(B-A)}&amp;lt;j\)&lt;/span&gt;。注意分母为负。总之单调队列维护递增斜率即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; v(n + 1), w(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long long&amp;gt; (m + 1));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; v[i] &amp;gt;&amp;gt; w[i];
        for (int x = 0; x &amp;lt; v[i]; ++x) &amp;#123;
            int h = 0, t = -1;
            std::vector&amp;lt;int&amp;gt; q;
            auto f1 = [&amp;amp;](int A, int B) &amp;#123;
                return f[i - 1][A * v[i] + x] - f[i - 1][B * v[i] + x] + (B - A) * w[i] - A * A + B * B;
            &amp;#125;;
            auto f2 = [&amp;amp;](int A, int B) &amp;#123;
                return 2 * (B - A);
            &amp;#125;;
            for (int j = 0, J = x; J &amp;lt;= m; ++j, J += v[i]) &amp;#123;
                for (; h &amp;lt; t &amp;amp;&amp;amp; f1(q[h + 1], q[h]) &amp;gt; j * f2(q[h + 1], q[h]); ++h);
                f[i][J] = f[i - 1][J];
                if (h &amp;lt;= t)
                    f[i][J] = std::max(f[i][J], f[i - 1][q[h] * v[i] + x] + (j - q[h]) * w[i] - (j - q[h]) * (j - q[h]));
                for (; h &amp;lt; t &amp;amp;&amp;amp; f1(j, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(j, q[t]); --t);
                q.resize(++t + 1), q[t] = j;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n][m] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f---managing-telephone-poles&#34;&gt;F - Managing Telephone Poles&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1575/M&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1575/M&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;？观察到性质然后被自己忽略了。非常值得批评。&lt;/p&gt;
&lt;p&gt;不难写出类似斜率优化的式子 &lt;span class=&#34;math inline&#34;&gt;\(S(i,j)=\min\{ {x_k}^2-2\times i\times x_k+{y_k}^2-2\times j \times y_k\}+i^2+j^2\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;会下意识尝试固定 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2m)\)&lt;/span&gt; 完成任务，似乎不太行。顺着这个想法会观察到，固定 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 之后，每一列的 poles 中只有和第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行最近的才会有贡献。&lt;/p&gt;
&lt;p&gt;这个是好做的，且这样的相邻点数量是 &lt;span class=&#34;math inline&#34;&gt;\(O(m)\)&lt;/span&gt; 的；于是将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 视为常数进行变形，若将所有 poles 按 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 从小到大排序就能得到斜率形式 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac { {x_A}^2-{x_B}^2+{y_A}^2-{y_B}^2-2\times i\times(x_A-x_B)}{2(y_A-y_B)}&amp;lt;j\)&lt;/span&gt;。维护递增斜率就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 完成问题。&lt;/p&gt;
&lt;p&gt;那么找相邻点这一步大可以摆烂写二分。所以总共是 &lt;span class=&#34;math inline&#34;&gt;\(O(nm\log m)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;不要像我一样把两边最近的都加进队列，不然你会有分母为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的斜率 &lt;img src=&#34;/em/hsh.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m, ++n, ++m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; tag(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(m + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            char t;
            std::cin &amp;gt;&amp;gt; t;
            if (t == &amp;#39;1&amp;#39;)
                g[j].push_back(i), tag[i][j] = 1;
        &amp;#125;
    struct node &amp;#123; long long x, y; &amp;#125;;
    auto res(0ll);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::vector&amp;lt;node&amp;gt; p;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            int to = std::lower_bound(g[j].begin(), g[j].end(), i) - g[j].begin();
            if (to &amp;lt; (int)g[j].size()) &amp;#123;
                p.push_back(&amp;#123; g[j][to], j &amp;#125;);
                if (g[j][to] != i &amp;amp;&amp;amp; to != 0 &amp;amp;&amp;amp; g[j][to] - i &amp;gt; i - g[j][to - 1])
                    p.back() = &amp;#123; g[j][to - 1], j &amp;#125;;
            &amp;#125;
            else if (to != 0)
                p.push_back(&amp;#123; g[j][to - 1], j &amp;#125;);
        &amp;#125;
        std::vector&amp;lt;int&amp;gt; q(m + 1);
        int h = 0, t = -1;
        auto f1 = [&amp;amp;](node A, node B) &amp;#123;
            return A.x * A.x - B.x * B.x + A.y * A.y - B.y * B.y - 2 * i * (A.x - B.x);
        &amp;#125;;
        auto f2 = [&amp;amp;](node A, node B) &amp;#123;
            return 2 * (A.y - B.y);
        &amp;#125;;
        for (int j = 0; j &amp;lt; (int)p.size(); ++j) &amp;#123;
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(p[j], p[q[t]]) * f2(p[q[t]], p[q[t - 1]]) &amp;lt; f1(p[q[t]], p[q[t - 1]]) * f2(p[j], p[q[t]]); --t);
            q[++t] = j;
        &amp;#125;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;  
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(p[q[h + 1]], p[q[h]]) &amp;lt; j * f2(p[q[h + 1]], p[q[h]]); ++h);
            res += (p[q[h]].x - i) * (p[q[h]].x - i) + (p[q[h]].y - j) * (p[q[h]].y - j);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;g---partition-game&#34;&gt;G - Partition Game&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1527/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1527/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现不太斜优，终于给我浸泡了两天斜优内容的大脑加了勺新的底物。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 段以 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 结尾的最小代价；对 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 套用四边形不等式变式 &lt;span class=&#34;math inline&#34;&gt;\(w(l-1,r+1)+w(l,r)\ge w(l-1,r)+w(l,r+1)\)&lt;/span&gt; 发现成立（其中大多数时候能取等；部分特殊情况取到大于号）。&lt;/p&gt;
&lt;p&gt;那么发现可以用分治优化。发现 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 不那么能快速求；还是套用 &lt;a href=&#34;/20250707-1/#例yet-another-minimization-problem&#34;&gt;Yet Another Minimization Problem&lt;/a&gt; 中的方法，用类似莫队的方式求解。&lt;/p&gt;
&lt;p&gt;发现这个莫队套路也很熟悉了，直接用双端队列维护即可。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(nk\log n)\)&lt;/span&gt;，看着不太安全。但注意到我们在 20 个月前的提交中使用了 &lt;span class=&#34;math inline&#34;&gt;\(O(nk\log n)\)&lt;/span&gt; 的线段树，所以能过的兄弟。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;鉴于 deque 的时空常数都大得吓人，所以我用静态 vector 模拟 deque 了。&lt;/p&gt;
&lt;p&gt;跑得比我之前线段树的一半还快，兄弟。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; pos(n + 1);
    std::vector&amp;lt;int&amp;gt; a(n + 1), _h(n + 1), _t(n + 1, -1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], pos[a[i]].push_back(i);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf));
    f[0][0] = 0ll;
    auto w = [&amp;amp;](int ql, int qr) &amp;#123;
        static int l = 1, r = 0;
        static auto res(0ll);
        for (; l &amp;gt; ql; ) &amp;#123;
            --l;
            auto &amp;amp;h = _h[a[l]], &amp;amp;t = _t[a[l]];
            auto &amp;amp;q = pos[a[l]];
            if (h &amp;lt;= t)
                res -= q[t] - q[h];
            res += q[t] - q[--h];
        &amp;#125;
        for (; r &amp;gt; qr; ) &amp;#123;
            auto &amp;amp;h = _h[a[r]], &amp;amp;t = _t[a[r]];
            auto &amp;amp;q = pos[a[r]];
            res -= q[t--] - q[h];
            if (h &amp;lt;= t)
                res += q[t] - q[h];
            --r;
        &amp;#125;
        for (; r &amp;lt; qr; ) &amp;#123;
            ++r;
            auto &amp;amp;h = _h[a[r]], &amp;amp;t = _t[a[r]];
            auto &amp;amp;q = pos[a[r]];
            if (h &amp;lt;= t)
                res -= q[t] - q[h];
            res += q[++t] - q[h];
        &amp;#125;
        for (; l &amp;lt; ql; ) &amp;#123;
            auto &amp;amp;h = _h[a[l]], &amp;amp;t = _t[a[l]];
            auto &amp;amp;q = pos[a[l]];
            res -= q[t] - q[h++];
            if (h &amp;lt;= t)
                res += q[t] - q[h];
            ++l;
        &amp;#125;
        return res;
    &amp;#125;;
    for (int t = 1; t &amp;lt;= m; ++t) &amp;#123;
        std::function&amp;lt;void(int, int, int, int)&amp;gt; calc = [&amp;amp;](int l, int r, int lp, int rp) &amp;#123;
            if (l &amp;gt; r)
                return;
            if (l == r) &amp;#123;
                for (int i = lp; i &amp;lt;= rp &amp;amp;&amp;amp; i &amp;lt; l; ++i)
                    f[t][l] = std::min(f[t][l], f[t - 1][i] + w(i + 1, l));
                return;
            &amp;#125;
            int mid = (l + r) &amp;gt;&amp;gt; 1, p = -1;
            for (int i = lp; i &amp;lt;= rp &amp;amp;&amp;amp; i &amp;lt; mid; ++i)
                if (f[t - 1][i] + w(i + 1, mid) &amp;lt; f[t][mid])
                    f[t][mid] = f[t - 1][i] + w(i + 1, mid), p = i;
            calc(l, mid - 1, lp, p), calc(mid + 1, r, p, rp);
            return;
        &amp;#125;;
        calc(t, n, t - 1, n - 1);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[m][n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;h---battle-lemmings&#34;&gt;H - Battle Lemmings&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1420/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1420/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易发现 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的数目不变，答案就是 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的对数 - 连续 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的对数。&lt;/p&gt;
&lt;p&gt;然后有一个我们很熟悉的 trick，随便找一个目标序列，那么花费的操作次数就是每个对应的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的位置差。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k}\)&lt;/span&gt; 表示用了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 次操作、&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;、最后一个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的最小连续 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 对数。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j,k}&amp;amp;=\min\limits_{p&amp;lt;k}\left\{f_{i-|k-pos_j|,j-1,p}+\dfrac {(k-p-1)(k-p-2)}2\right\}\\
&amp;amp;=\min\left\{f_{i-|k-pos_j|,j-1,p}-k\cdot p+\dfrac {p(p + 2)}2\right\}+\dfrac {k^2-3k+2}2
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;发现这个式子是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^5)\)&lt;/span&gt; 的，而且看起来很斜优，化为斜率形式 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{2\times f_A-2\times f_B+A(A+2)-B(B+2)}{2(A-B)}&amp;lt;k\)&lt;/span&gt;。维护递增斜率就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n^4)\)&lt;/span&gt; 做了。&lt;/p&gt;
&lt;p&gt;Tip：当时写着写着愣住了，比如这个 &lt;span class=&#34;math inline&#34;&gt;\(i-|k-pos_j|\)&lt;/span&gt; 不是一直在动吗。解决方案？同时维护很多个队列即可。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;注意还要把最后一个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 之后连续 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的代价算上。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e9;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;long long&amp;gt; pos(1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        if (a[i] == 1)
            pos.push_back(i);
    &amp;#125;
    int m = n * (n - 1) / 2;
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; &amp;gt; f(pos.size(), std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; (m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf)));
    f[0][0][0] = 0ll;
    for (int j = 1; j &amp;lt; (int)pos.size(); ++j) &amp;#123;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; _q(m + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
        std::vector&amp;lt;int&amp;gt; _h(m + 1), _t(m + 1, -1);
        for (int k = 0; k &amp;lt;= n; ++k)
            for (int i = m; i &amp;gt;= 0; --i) &amp;#123;
                if (i &amp;gt;= std::abs(k - pos[j])) &amp;#123;
                    auto f1 = [&amp;amp;](long long A, long long B) &amp;#123;
                        return 2 * f[j - 1][i - std::abs(k - pos[j])][A] - 2 * f[j - 1][i - std::abs(k - pos[j])][B] + A * (A + 2) - B * (B + 2);
                    &amp;#125;;
                    auto f2 = [&amp;amp;](long long A, long long B) &amp;#123;
                        return 2 * (A - B);
                    &amp;#125;;
                    auto &amp;amp;h = _h[i - std::abs(k - pos[j])], &amp;amp;t = _t[i - std::abs(k - pos[j])];
                    auto &amp;amp;q = _q[i - std::abs(k - pos[j])];
                    for (; h &amp;lt; t &amp;amp;&amp;amp; f1(q[h + 1], q[h]) &amp;lt; k * f2(q[h + 1], q[h]); ++h) &amp;#123;&amp;#125;
                    if (h &amp;lt;= t)
                        f[j][i][k] = std::min(inf, f[j - 1][i - std::abs(k - pos[j])][q[h]] + (k - q[h] - 1) * (k - q[h] - 2) / 2);
                &amp;#125;
                auto f1 = [&amp;amp;](long long A, long long B) &amp;#123;
                    return 2 * f[j - 1][i][A] - 2 * f[j - 1][i][B] + A * (A + 2) - B * (B + 2);
                &amp;#125;;
                auto f2 = [&amp;amp;](long long A, long long B) &amp;#123;
                    return 2 * (A - B);
                &amp;#125;;
                auto &amp;amp;h = _h[i], &amp;amp;t = _t[i];
                auto &amp;amp;q = _q[i];
                for (; h &amp;lt; t &amp;amp;&amp;amp; f1(k, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(k, q[t]); --t);
                q[++t] = k;
            &amp;#125;
    &amp;#125;
    auto res(-inf);
    int cnt = n - (int)pos.size() + 1;
    cnt = cnt * (cnt - 1) / 2;
    for (int i = 0; i &amp;lt;= m; ++i) &amp;#123;
        for (int k = 0; k &amp;lt;= n; ++k)
            res = std::max(res, cnt - f.back()[i][k] - (n - k) * (n - k - 1) / 2);
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---yakiniku-restaurants&#34;&gt;A - Yakiniku Restaurants&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc067/tasks/arc067_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc067/tasks/arc067_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现固定左右端点后，收益是可以贪心算的；下意识想到只固定左端点，那么右端点应该就可以用单调队列之类的搞一搞。&lt;/p&gt;
&lt;p&gt;先提前把所有东西塞到队列里。左端点一开始在最右边；往左边动一下之后，就可以更新每种菜的队列；发现在所有元素中作决策点的不总是队头；这个地方用 &lt;strong&gt;单调递减的单调栈&lt;/strong&gt; 是极好的。这里的单调栈其实就类似 &lt;a href=&#34;/20250707-1/#优化-dp单调数据结构&#34;&gt;四边形不等式中的单调数据结构&lt;/a&gt; 了。&lt;/p&gt;
&lt;p&gt;维护单调栈中每个决策点的影响区间；显然每个右端点的答案变化量相同；用个类似于差分的东西记录一下就好了。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; s(n + 1), f(n + 1);
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; s[i], s[i] += s[i - 1];
        f[i] = -s[i];
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; a(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= m; ++j)
            std::cin &amp;gt;&amp;gt; a[i][j];
    struct node &amp;#123; int j, l, r; &amp;#125;;
    std::vector&amp;lt;std::stack&amp;lt;node&amp;gt; &amp;gt; _q(m + 1);
    auto res(-inf);
    for (int l = n; l; --l) &amp;#123;
        std::vector&amp;lt;long long&amp;gt; d(n + 1);
        auto add = [&amp;amp;](int l, int r, long long v) &amp;#123;
            d[l] += v;
            if (r != n)
                d[r + 1] -= v;
            return;
        &amp;#125;;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            auto &amp;amp;q = _q[j];
            node now = &amp;#123; j, l, l &amp;#125;;
            add(l, l, a[l][j]);
            for (; !q.empty() &amp;amp;&amp;amp; a[l][j] &amp;gt;= a[q.top().l][q.top().j]; q.pop()) &amp;#123;
                now.r = q.top().r;
                add(q.top().l, q.top().r, a[l][j] - a[q.top().l][q.top().j]);
            &amp;#125;
            q.push(now);
        &amp;#125;
        std::partial_sum(d.begin() + 1, d.end(), d.begin() + 1);
        for (int r = l; r &amp;lt;= n; ++r) &amp;#123;
            f[r] += d[r];
            res = std::max(res, f[r] + s[l]);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---jellyfish-and-miku&#34;&gt;B - Jellyfish and Miku&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1874/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1874/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;唉数列。唉概统。在数学讲义上折磨了我一遍之后还要到这儿来折磨我。&lt;/p&gt;
&lt;p&gt;假设已经知道了 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，考虑求期望步数。设 &lt;span class=&#34;math inline&#34;&gt;\(E_i\)&lt;/span&gt; 为从 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 出发走到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的期望步数。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
E_i=\begin{cases}
E_1+1&amp;amp;i=0\\
0&amp;amp;i=n\\
E_i=(E_{i-1}+1)\cdot \dfrac {a_i}{a_{i+1}+a_i}+(E_{i+1}+1)\cdot \dfrac {a_{i+1}}{a_{i+1}+a_{i}}&amp;amp;\text{otherwise}
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（提示：从『&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 下一步会走哪个方向』考虑。）&lt;/p&gt;
&lt;p&gt;接下来就可以利用你的高中数学知识进行一个 &lt;span class=&#34;math inline&#34;&gt;\(f_0\)&lt;/span&gt; 的求，（一堆过程），得到 &lt;span class=&#34;math inline&#34;&gt;\(E_0=n+2\times \sum\limits_{i=1}^n\dfrac {\sum_{j\le i}a_j}{a_i}\)&lt;/span&gt;，然后想要最小化这个东西。&lt;/p&gt;
&lt;p&gt;不妨令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时已经分配走了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 体积，&lt;span class=&#34;math inline&#34;&gt;\(\sum_{k=1}^i \dfrac {\sum_{l\le k}a_l}{a_k}\)&lt;/span&gt; 的最小值，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\min\limits_{k&amp;lt;j}\left\{f_{i-1,k}+\dfrac {k}{j - k}\right\}\)&lt;/span&gt;。发现它大抵是满足四边形不等式的，按照 &lt;a href=&#34;/20250707-1/#d1d-dp-优化&#34;&gt;2D/1D DP 优化的结论&lt;/a&gt;，代入 &lt;span class=&#34;math inline&#34;&gt;\(p_{i,j-1}&amp;lt;p_{i,j}&amp;lt;p_{i+1,j}\)&lt;/span&gt; 可以 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt; 解决问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; p(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
    std::vector&amp;lt;std::vector&amp;lt;long double&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long double&amp;gt; (m + 1, 1e18));
    f[0][0] = 0ll;
    for (int j = 1; j &amp;lt;= m; ++j)
        for (int i = std::min(j, n); i; --i) &amp;#123;
            int to = ((i == std::min(j, n)) ? j : std::min(p[i + 1][j], j));
            for (int k = p[i][j - 1]; k &amp;lt;= to; ++k)
                if (f[i - 1][k] + k * 1. / (j - k) &amp;lt; f[i][j])
                    f[i][j] = f[i - 1][k] + k * 1. / (j - k), p[i][j] = k;
            // printf(&amp;quot;f[%d][%d] = %Lf, p = %d\n&amp;quot;, i, j, f[i][j], p[i][j]);
        &amp;#125;
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(10) &amp;lt;&amp;lt; n + 2 * f[n][m] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cut-the-sequence&#34;&gt;Cut the Sequence&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10977&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10977&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;通知区间最值-不满足-四边形不等式&#34;&gt;&lt;mark&gt;通知：区间最值 不满足 四边形不等式。&lt;/mark&gt;&lt;/h1&gt;
&lt;p&gt;其实在猜的时候是举了反例的，但是大脑萎缩了推着推着忘记符号了 😅&lt;/p&gt;
&lt;p&gt;看到 &lt;span class=&#34;math inline&#34;&gt;\(f_i=\min\limits_{g(i)\le j&amp;lt;i}\{f_j+\max\{a_{j+1\sim i}\}\}\)&lt;/span&gt; 这个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的范围其实是有点单调队列优化的感觉的，但这个最大值传统的单调队列不是很可做。可以注意到最大值这一项有点 &lt;strong&gt;单调队列&lt;/strong&gt; 后缀最大值的感觉（实际上就是）；一个很自然的想法是利用这个最大值影响的区间，维护 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的线段树来暴力做。&lt;/p&gt;
&lt;p&gt;另一个比较牛的做法是发现同一个下标的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的关系。首先需要注意到 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 单调不降；对于同一个 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，能取到的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 就是最靠前的；维护一个 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的单减队列，那么共用同一个 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的就是相邻两个下标之间的部分，其最优决策在能取到的最前端取得；需要注意到队列里的贡献并不单调，需要用一个 multiset 来存储所有贡献并查找、更新。&lt;/p&gt;
&lt;p&gt;需要注意单调队列里某个元素 &lt;span class=&#34;math inline&#34;&gt;\(f_{q_i}\)&lt;/span&gt; 结合的其实是 &lt;span class=&#34;math inline&#34;&gt;\(a_{q_{i+1}}\)&lt;/span&gt;。还需要注意队头的维护，可能需要一些小巧思。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;1.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;long long&amp;gt; s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], s[i] = s[i - 1] + a[i];
    int h = 0, t = -1;
    std::multiset&amp;lt;long long&amp;gt; st;
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; q(n + 1);
    q[++t] = &amp;#123; 0, 0 &amp;#125;, a[0] = 0x3f3f3f3f;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (; s[i] - s[q[h].second] &amp;gt; m; ) &amp;#123;
            st.erase(st.find(f[q[h].second] + a[q[h + 1].first]));
            if (++q[h].second &amp;gt;= q[h + 1].first)
                a[q[++h].first] = 0x3f3f3f3f;
            else
                st.insert(f[q[h].second] + a[q[h + 1].first]);
        &amp;#125;
        for (; h &amp;lt; t &amp;amp;&amp;amp; a[q[t].first] &amp;lt;= a[i]; --t)
            st.erase(st.find(f[q[t - 1].second] + a[q[t].first]));
        st.insert(f[q[t].second] + a[i]), q[++t] = &amp;#123; i, i &amp;#125;;
        f[i] = *st.begin();
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
 ]]></description>
        </item>
    </channel>
</rss>
