{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"四边形不等式\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20250715/",
            "url": "https://xsc062.netlify.app/20250715/",
            "title": "练习 决策单调性",
            "date_published": "2025-07-15T06:13:24.000Z",
            "content_html": "<p>『心静自然凉』大抵是因为情绪平和时副交感神经兴奋，体温略有降低导致的。吗？</p>\n<span id=\"more\"></span>\n<p>其实是因为心脏停跳后血液循环终止、代谢中断，导致产热低于散热（？）</p>\n<hr />\n<h2 id=\"a---征途\">A - 征途</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P4072\" class=\"uri\">https://www.luogu.com.cn/problem/P4072</a></p>\n<p>用完全平方公式展开得到 <span class=\"math inline\">\\(m^2\\sigma^2=m\\left(\\sum {x_i}^2\\right)-S^2\\)</span>，其中 <span class=\"math inline\">\\(S\\)</span> 为求和。</p>\n<p>所以目标是最小化 <span class=\"math inline\">\\(\\sum {x_i}^2\\)</span> 这个东西。令 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 天走到 <span class=\"math inline\">\\(j\\)</span>，得到：</p>\n<p><span class=\"math display\">\\[\n\\begin{aligned}\nf_{i,j}&amp;=\\min\\{f_{i-1,k}+(s_j-s_k)^2\\}\\\\\n&amp;=\\min\\{f_{i-1,k}-2\\times s_j\\times s_k+{s_k}^2\\}+{s_j}^2\n\\end{aligned}\n\\]</span></p>\n<p>最后得到的斜率式子是 <span class=\"math inline\">\\(\\dfrac {f_{i - 1, a}-f_{i - 1, b}+{s_a}^2-{s_b}^2}{2(s_a-s_b)}&lt;s_j\\)</span>，由于 <span class=\"math inline\">\\(s_j\\)</span> 单增，<del>单调队列维护递减斜率即可</del> <strong>更正：是递增斜率。原因是 <span class=\"math inline\">\\(&lt;\\)</span> 是弹出条件，而非保留条件……</strong></p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst long long inf = 1e9;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m;\n    std::vector&lt;int&gt; a(n + 1);\n    std::vector&lt;long long&gt; s(n + 1);\n    auto sum(0ll);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        std::cin &gt;&gt; a[i];\n        s[i] = s[i - 1] + a[i];\n        sum += a[i];\n    &#125;\n    std::vector&lt;std::vector&lt;long long&gt; &gt; f(m + 1, std::vector&lt;long long&gt; (n + 1, inf));\n    f[0][0] = 0ll;\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        auto f1 = [&amp;](int a, int b) &#123;\n            return f[i - 1][a] - f[i - 1][b] + s[a] * s[a] - s[b] * s[b];\n        &#125;;\n        auto f2 = [&amp;](int a, int b) &#123;\n            return 2 * (s[a] - s[b]);\n        &#125;;\n        std::vector&lt;int&gt; q(n + 1);\n        int h = 0, t = -1;\n        q[++t] = i - 1;\n        for (int j = i; j &lt;= n; ++j) &#123;\n            for (; h &lt; t &amp;&amp; f1(q[h + 1], q[h]) &lt; s[j] * f2(q[h + 1], q[h]); ++h);\n            f[i][j] = f[i - 1][q[h]] + (s[j] - s[q[h]]) * (s[j] - s[q[h]]);\n            for (; h &lt; t &amp;&amp; f1(j, q[t]) * f2(q[t], q[t - 1]) &lt; f1(q[t], q[t - 1]) * f2(j, q[t]); --t);\n            q[++t] = j;\n        &#125;\n    &#125;\n    std::cout &lt;&lt; m * f[m][n] - sum * sum &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"b---刷野-iii\">B - 刷野 III</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P10074\" class=\"uri\">https://www.luogu.com.cn/problem/P10074</a></p>\n<p>发现最坏情况就是每次『试探』都不中的情况，再试探中最坏的那一个。为啥呢，相当于我们每次攻击的一定是未知元素中血最多的一个。既然已经试探出了比阈值大的所有元素，那么下一个攻击的就一定是阈值本身，如果这次跳过它，它就会成为下一次试探失败的元素。这显然不如一开始就直接用新阈值试探。</p>\n<p>从大到小排序。令 <span class=\"math inline\">\\(f_{j, i}\\)</span> 表示只确定了前 <span class=\"math inline\">\\(i\\)</span> 大的数，已经杀了 <span class=\"math inline\">\\(j\\)</span> 个人的最坏情况最小代价。那么显然这一次的阈值是 <span class=\"math inline\">\\(a_i\\)</span>。随便选出上一次的阈值 <span class=\"math inline\">\\(a_k\\)</span>，那么中间这一段待确定的元素数量为 <span class=\"math inline\">\\(i-k\\)</span>。那么有：</p>\n<p><span class=\"math display\">\\[\n\\begin{aligned}\nf_{j, i}&amp;=\\min\\limits_{k&lt;i}\\{f_{j-1,k}+(i-k)\\times a_i\\}\\\\\n&amp;=\\min\\limits_{k&lt;i}\\{f_{j-1,k}-k\\times a_i\\}+i\\times a_i\n\\end{aligned}\n\\]</span></p>\n<p>经过验证，虽然这个式子和题解长得不一样，但是是对的 <del>因为我 n^3 暴力 A 了</del></p>\n<p>推出斜优形式 <span class=\"math inline\">\\(\\dfrac {f_{j-1,A}-f_{j-1,B}}{A-B}&lt;a_i\\)</span>，但我的朋友，<span class=\"math inline\">\\(a_i\\)</span> 是递减的。所以用单调栈维护递增斜率即可。<del>或者你也可以学习 grisses 打一个单调队列上二分</del></p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst long long inf = 1e12;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;P10074_4.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m;\n    std::vector&lt;long long&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i];\n    std::sort(a.begin() + 1, a.end(), std::greater&lt;long long&gt; ());\n    std::vector&lt;std::vector&lt;long long&gt; &gt; f(m + 1, std::vector&lt;long long&gt; (n + 1, inf));\n    f[0][0] = 0ll;\n    for (int j = 1; j &lt;= m; ++j) &#123;\n        std::vector&lt;int&gt; q(n + 1);\n        int t = -1;\n        q[++t] = j - 1;\n        auto f1 = [&amp;](int A, int B) &#123;\n            return f[j - 1][A] - f[j - 1][B];\n        &#125;;\n        auto f2 =[&amp;](int A, int B) &#123;\n            return A - B;\n        &#125;;\n        for (int i = j; i &lt;= n; ++i) &#123;\n            for (; t &gt;= 1 &amp;&amp; f1(q[t], q[t - 1]) &gt; a[i] * f2(q[t], q[t - 1]); --t);\n            f[j][i] = f[j - 1][q[t]] + (i - q[t]) * a[i];\n            for (; t &gt;= 1 &amp;&amp; f1(i, q[t]) * f2(q[t], q[t - 1]) &lt; f1(q[t], q[t - 1]) * f2(i, q[t]); --t);\n            q[++t] = i;\n        &#125;\n    &#125;\n    auto res(inf);\n    for (int i = m; i &lt;= n; ++i)\n        res = std::min(res, f[m][i]);\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"c---traka\">C - TRAKA</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P7747\" class=\"uri\">https://www.luogu.com.cn/problem/P7747</a></p>\n<p>稍微手玩一下就可以发现，假如第 <span class=\"math inline\">\\(j\\)</span> 个人在第 <span class=\"math inline\">\\(i\\)</span> 次的工作时间为 <span class=\"math inline\">\\([L_{j,i},R_{j,i}]\\)</span>，第 <span class=\"math inline\">\\(i-1\\)</span> 次为 <span class=\"math inline\">\\([L_{j,i-1},R_{j,i-1}]\\)</span>，那么要求 <span class=\"math inline\">\\(L_{j,i}\\ge R_{j,i-1}\\)</span>。</p>\n<p>令 <span class=\"math inline\">\\(s_j\\)</span> 为 <span class=\"math inline\">\\(t\\)</span> 的前缀和。假设第 <span class=\"math inline\">\\(i-1\\)</span> 次加工于 <span class=\"math inline\">\\(x_{i-1}\\)</span> 开始，那么我们可以把上式转写为 <span class=\"math inline\">\\(x_{i}+s_{j-1}\\times f_{i}\\ge x_{i-1}+s_j\\times f_{i-1}\\)</span>。也即 <span class=\"math inline\">\\(x_i-x_{i-1}\\ge s_j\\times f_{i-1}-s_{j-1}\\times f_i\\)</span>。</p>\n<p>显然需要找到一个 <span class=\"math inline\">\\(j\\)</span> 使得 RSH 取得最大值；现在就可以考虑斜率优化了。由于所有项都和 <span class=\"math inline\">\\(i\\)</span> 有关，想到两边同除 <span class=\"math inline\">\\(f_{i}\\)</span> 消掉一个 <span class=\"math inline\">\\(i\\)</span> 有关的系数，最后化出来的斜优形式是 <span class=\"math inline\">\\(\\dfrac {s_A-s_B}{s_{A-1}-s_{B-1}}&gt;\\dfrac {f_{i-1}}{f_i}\\)</span>。由于 RSH 不单调，把所有 <span class=\"math inline\">\\(j\\)</span> 塞到队列里维护递减斜率，打二分即可。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m;\n    std::vector&lt;long long&gt; a(n + 1), w(m + 1), s(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i], s[i] = s[i - 1] + a[i];\n    for (int i = 1; i &lt;= m; ++i)\n        std::cin &gt;&gt; w[i];\n    std::vector&lt;long long&gt; f(m + 1);\n    std::vector&lt;int&gt; q(n + 1);\n    int h = 0, t = -1;\n    q[++t] = 1;\n    for (int i = 2; i &lt;= n; ++i) &#123;\n        for (; h &lt; t &amp;&amp; (s[i] - s[q[t]]) * (s[q[t] - 1] - s[q[t - 1] - 1]) &gt; (s[q[t]] - s[q[t - 1]]) * (s[i - 1] - s[q[t] - 1]); --t);\n        q[++t] = i;\n    &#125;\n    for (int i = 2; i &lt;= m; ++i) &#123;\n        int to = q[h];\n        for (int l = h + 1, r = t, mid; l &lt;= r; ) &#123;\n            mid = (l + r) &gt;&gt; 1;\n            if ((s[q[mid]] - s[q[mid - 1]]) * w[i - 1] &gt; w[i] * (s[q[mid] - 1] - s[q[mid - 1] - 1]))\n                to = q[mid], l = mid + 1;\n            else\n                r = mid - 1;\n        &#125;\n        f[i] = f[i - 1] + s[to] * w[i - 1] - s[to - 1] * w[i];\n    &#125;\n    std::cout &lt;&lt; f[m] + w[m] * s[n] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"d---柠檬\">D - 柠檬</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P5504\" class=\"uri\">https://www.luogu.com.cn/problem/P5504</a></p>\n<ul>\n<li>观察零：原问题『从两端取』可以转化为分段问题，故从其中一端考虑即可。</li>\n<li>观察一：若有一段连续的 <span class=\"math inline\">\\(x\\)</span>，完整的比拆开的更优。</li>\n<li>观察二：如果一段 <span class=\"math inline\">\\(x\\)</span> 中夹杂了一些其他元素，那么在哪里分段是说不准的。</li>\n<li>观察三：如果选取的区间是 <span class=\"math inline\">\\([1,r]\\)</span>，那么贪心地想，<span class=\"math inline\">\\(a_r\\)</span> 一定是关键值，不然取 <span class=\"math inline\">\\(a_r\\)</span> 就浪费了。</li>\n<li>观察四：如果选取的区间是 <span class=\"math inline\">\\([l,r]\\)</span>，那么由观察四，<span class=\"math inline\">\\(a_l=a_r\\)</span>，且该值为关键值。</li>\n</ul>\n<p>结合这几个观察，令 <span class=\"math inline\">\\(c_i\\)</span> 表示 <span class=\"math inline\">\\(a_i\\)</span> 在 <span class=\"math inline\">\\([1,i]\\)</span> 中出现次数，<span class=\"math inline\">\\(f_i\\)</span> 表示这一段以 <span class=\"math inline\">\\(i\\)</span> 结尾的最大价值：</p>\n<p><span class=\"math display\">\\[\n\\begin{aligned}\nf_i&amp;=\\max\\limits_{j&lt;i,a_{j+1}=a_i}\\{f_j+a_i\\times (c_i-c_{j + 1} + 1)^2\\}\\\\\n&amp;=\\max\\limits_{j&lt;i,a_{j+1}=a_i}\\{f_j+a_{j+1}\\times {c_{j+1}}^2-2\\times c_i\\times a_{j+1}\\times c_{j+1}-2\\times c_{j+1}\\times a_{j+1}\\}+a_i\\times(c_i-1)^2\n\\end{aligned}\n\\]</span></p>\n<p>（怎么这么大一堆。）最后可以化出 <span class=\"math inline\">\\(\\dfrac {f_A-f_B+a_{A+1}\\cdot c_{A+1}\\cdot (c_{A+1}-2)-a_{B+1}\\cdot c_{B+1}\\cdot (c_{B+1}-2)}{2(c_{A+1} - c_{B+1})}&gt;c_i\\times a_i\\)</span>。发现对于每一种 <span class=\"math inline\">\\(a_i\\)</span>，<span class=\"math inline\">\\(c_i\\times a_i\\)</span> 是单增的。单调栈维护即可。</p>\n<p><em>这其实提醒我们关于代换的问题——显然，当与 <span class=\"math inline\">\\(i\\)</span> 的项、与 <span class=\"math inline\">\\(j\\)</span> 有关的项之间存在代换关系时，应该尽量往 <span class=\"math inline\">\\(j\\)</span> 的方向靠。</em></p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;7.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;long long&gt; a(n + 1), c(n + 1), la(10001);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        std::cin &gt;&gt; a[i];\n        c[i] = c[la[a[i]]] + 1, la[a[i]] = i;\n    &#125;\n    std::vector&lt;long long&gt; f(n + 1);\n    std::vector&lt;int&gt; _t(10001, -1);\n    std::vector&lt;std::vector&lt;int&gt; &gt; _q(10001);\n    auto f1 = [&amp;](int A, int B) &#123;\n        return f[A] - f[B] + a[A + 1] * c[A + 1] * (c[A + 1] - 2) - a[B + 1] * c[B + 1] * (c[B + 1] - 2);\n    &#125;;\n    auto f2 = [&amp;](int A, int B) &#123;\n        return 2 * (c[A + 1] - c[B + 1]);\n    &#125;;\n    ++_t[a[1]], _q[a[1]].push_back(0);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        &#123;\n            auto &amp;t = _t[a[i]];\n            auto &amp;q = _q[a[i]];\n            for (; t &gt;= 1 &amp;&amp; f1(q[t], q[t - 1]) &lt; c[i] * a[i] * f2(q[t], q[t - 1]); --t);\n            f[i] = f[q[t]] + a[i] * (c[i] - c[q[t] + 1] + 1) * (c[i] - c[q[t] + 1] + 1);\n        &#125;\n        if (i &lt; n) &#123;\n            auto &amp;t = _t[a[i + 1]];\n            auto &amp;q = _q[a[i + 1]];\n            for (; t &gt;= 1 &amp;&amp; f1(i, q[t]) * f2(q[t], q[t - 1]) &gt; f1(q[t], q[t - 1]) * f2(i, q[t]); --t);\n            q.resize(++t + 1), q[t] = i;\n        &#125;\n    &#125;\n    std::cout &lt;&lt; f[n] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"e---knapsack-with-diminishing-values\">E - Knapsack with Diminishing Values</h2>\n<p><a href=\"https://atcoder.jp/contests/abc373/tasks/abc373_f\" class=\"uri\">https://atcoder.jp/contests/abc373/tasks/abc373_f</a></p>\n<p>发现和 <a href=\"/20250707-1/#例单调队列优化多重背包\">单调队列优化多重背包</a> 有异曲同工之妙。</p>\n<p>不妨令 <span class=\"math inline\">\\(v_i\\)</span> 表示体积，<span class=\"math inline\">\\(w_i\\)</span> 表示价值。对于每一个 <span class=\"math inline\">\\(i\\)</span>，把所有体积按模 <span class=\"math inline\">\\(v_i\\)</span> 的余数分类，设为 <span class=\"math inline\">\\(j\\cdot v_i+x\\)</span>。对于 <span class=\"math inline\">\\(k\\cdot v_i+x\\)</span>，有：</p>\n<p><span class=\"math display\">\\[\n\\begin{aligned}\nf_{i,j\\cdot v_i+x}&amp;=\\max\\limits_{k&lt;j}\\{f_{i-1,k\\cdot v_i+x}+(j-k)\\cdot w_i-(j-k)^2\\}\\\\\n&amp;=\\max\\limits_{k&lt;j}\\{f_{i-1,k\\cdot v_i+x}-k\\cdot w_i-k^2+2\\times j\\times k\\}-j^2+j\\cdot w_i\n\\end{aligned}\n\\]</span></p>\n<p>则得到 <span class=\"math inline\">\\(\\dfrac {f_{i-1,A\\cdot v_i+x}-f_{i-1,B\\cdot v_i+x}+(B-A)\\cdot w_i - A^2+B^2}{2(B-A)}&lt;j\\)</span>。注意分母为负。总之单调队列维护递增斜率即可。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m;\n    std::vector&lt;long long&gt; v(n + 1), w(n + 1);\n    std::vector&lt;std::vector&lt;long long&gt; &gt; f(n + 1, std::vector&lt;long long&gt; (m + 1));\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        std::cin &gt;&gt; v[i] &gt;&gt; w[i];\n        for (int x = 0; x &lt; v[i]; ++x) &#123;\n            int h = 0, t = -1;\n            std::vector&lt;int&gt; q;\n            auto f1 = [&amp;](int A, int B) &#123;\n                return f[i - 1][A * v[i] + x] - f[i - 1][B * v[i] + x] + (B - A) * w[i] - A * A + B * B;\n            &#125;;\n            auto f2 = [&amp;](int A, int B) &#123;\n                return 2 * (B - A);\n            &#125;;\n            for (int j = 0, J = x; J &lt;= m; ++j, J += v[i]) &#123;\n                for (; h &lt; t &amp;&amp; f1(q[h + 1], q[h]) &gt; j * f2(q[h + 1], q[h]); ++h);\n                f[i][J] = f[i - 1][J];\n                if (h &lt;= t)\n                    f[i][J] = std::max(f[i][J], f[i - 1][q[h] * v[i] + x] + (j - q[h]) * w[i] - (j - q[h]) * (j - q[h]));\n                for (; h &lt; t &amp;&amp; f1(j, q[t]) * f2(q[t], q[t - 1]) &lt; f1(q[t], q[t - 1]) * f2(j, q[t]); --t);\n                q.resize(++t + 1), q[t] = j;\n            &#125;\n        &#125;\n    &#125;\n    std::cout &lt;&lt; f[n][m] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"f---managing-telephone-poles\">F - Managing Telephone Poles</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/1575/M\" class=\"uri\">https://codeforces.com/problemset/problem/1575/M</a></p>\n<p>？观察到性质然后被自己忽略了。非常值得批评。</p>\n<p>不难写出类似斜率优化的式子 <span class=\"math inline\">\\(S(i,j)=\\min\\{ {x_k}^2-2\\times i\\times x_k+{y_k}^2-2\\times j \\times y_k\\}+i^2+j^2\\)</span>。</p>\n<p>会下意识尝试固定 <span class=\"math inline\">\\(i\\)</span>，就可以 <span class=\"math inline\">\\(O(n^2m)\\)</span> 完成任务，似乎不太行。顺着这个想法会观察到，固定 <span class=\"math inline\">\\(i\\)</span> 之后，每一列的 poles 中只有和第 <span class=\"math inline\">\\(i\\)</span> 行最近的才会有贡献。</p>\n<p>这个是好做的，且这样的相邻点数量是 <span class=\"math inline\">\\(O(m)\\)</span> 的；于是将 <span class=\"math inline\">\\(i\\)</span> 视为常数进行变形，若将所有 poles 按 <span class=\"math inline\">\\(y\\)</span> 从小到大排序就能得到斜率形式 <span class=\"math inline\">\\(\\dfrac { {x_A}^2-{x_B}^2+{y_A}^2-{y_B}^2-2\\times i\\times(x_A-x_B)}{2(y_A-y_B)}&lt;j\\)</span>。维护递增斜率就能 <span class=\"math inline\">\\(O(n^2)\\)</span> 完成问题。</p>\n<p>那么找相邻点这一步大可以摆烂写二分。所以总共是 <span class=\"math inline\">\\(O(nm\\log m)\\)</span> 的。</p>\n<p>不要像我一样把两边最近的都加进队列，不然你会有分母为 <span class=\"math inline\">\\(0\\)</span> 的斜率 <img src=\"/em/hsh.gif\" /></p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m, ++n, ++m;\n    std::vector&lt;std::vector&lt;int&gt; &gt; tag(n + 1, std::vector&lt;int&gt; (m + 1));\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(m + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        for (int j = 1; j &lt;= m; ++j) &#123;\n            char t;\n            std::cin &gt;&gt; t;\n            if (t == &#39;1&#39;)\n                g[j].push_back(i), tag[i][j] = 1;\n        &#125;\n    struct node &#123; long long x, y; &#125;;\n    auto res(0ll);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        std::vector&lt;node&gt; p;\n        for (int j = 1; j &lt;= m; ++j) &#123;\n            int to = std::lower_bound(g[j].begin(), g[j].end(), i) - g[j].begin();\n            if (to &lt; (int)g[j].size()) &#123;\n                p.push_back(&#123; g[j][to], j &#125;);\n                if (g[j][to] != i &amp;&amp; to != 0 &amp;&amp; g[j][to] - i &gt; i - g[j][to - 1])\n                    p.back() = &#123; g[j][to - 1], j &#125;;\n            &#125;\n            else if (to != 0)\n                p.push_back(&#123; g[j][to - 1], j &#125;);\n        &#125;\n        std::vector&lt;int&gt; q(m + 1);\n        int h = 0, t = -1;\n        auto f1 = [&amp;](node A, node B) &#123;\n            return A.x * A.x - B.x * B.x + A.y * A.y - B.y * B.y - 2 * i * (A.x - B.x);\n        &#125;;\n        auto f2 = [&amp;](node A, node B) &#123;\n            return 2 * (A.y - B.y);\n        &#125;;\n        for (int j = 0; j &lt; (int)p.size(); ++j) &#123;\n            for (; h &lt; t &amp;&amp; f1(p[j], p[q[t]]) * f2(p[q[t]], p[q[t - 1]]) &lt; f1(p[q[t]], p[q[t - 1]]) * f2(p[j], p[q[t]]); --t);\n            q[++t] = j;\n        &#125;\n        for (int j = 1; j &lt;= m; ++j) &#123;  \n            for (; h &lt; t &amp;&amp; f1(p[q[h + 1]], p[q[h]]) &lt; j * f2(p[q[h + 1]], p[q[h]]); ++h);\n            res += (p[q[h]].x - i) * (p[q[h]].x - i) + (p[q[h]].y - j) * (p[q[h]].y - j);\n        &#125;\n    &#125;\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"g---partition-game\">G - Partition Game</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/1527/E\" class=\"uri\">https://codeforces.com/problemset/problem/1527/E</a></p>\n<p>发现不太斜优，终于给我浸泡了两天斜优内容的大脑加了勺新的底物。</p>\n<p>令 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 段以 <span class=\"math inline\">\\(j\\)</span> 结尾的最小代价；对 <span class=\"math inline\">\\(w\\)</span> 套用四边形不等式变式 <span class=\"math inline\">\\(w(l-1,r+1)+w(l,r)\\ge w(l-1,r)+w(l,r+1)\\)</span> 发现成立（其中大多数时候能取等；部分特殊情况取到大于号）。</p>\n<p>那么发现可以用分治优化。发现 <span class=\"math inline\">\\(w\\)</span> 不那么能快速求；还是套用 <a href=\"/20250707-1/#例yet-another-minimization-problem\">Yet Another Minimization Problem</a> 中的方法，用类似莫队的方式求解。</p>\n<p>发现这个莫队套路也很熟悉了，直接用双端队列维护即可。复杂度 <span class=\"math inline\">\\(O(nk\\log n)\\)</span>，看着不太安全。但注意到我们在 20 个月前的提交中使用了 <span class=\"math inline\">\\(O(nk\\log n)\\)</span> 的线段树，所以能过的兄弟。</p>\n<details>\n<p>鉴于 deque 的时空常数都大得吓人，所以我用静态 vector 模拟 deque 了。</p>\n<p>跑得比我之前线段树的一半还快，兄弟。</p>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int inf = 1e18;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m;\n    std::vector&lt;std::vector&lt;int&gt; &gt; pos(n + 1);\n    std::vector&lt;int&gt; a(n + 1), _h(n + 1), _t(n + 1, -1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i], pos[a[i]].push_back(i);\n    std::vector&lt;std::vector&lt;long long&gt; &gt; f(m + 1, std::vector&lt;long long&gt; (n + 1, inf));\n    f[0][0] = 0ll;\n    auto w = [&amp;](int ql, int qr) &#123;\n        static int l = 1, r = 0;\n        static auto res(0ll);\n        for (; l &gt; ql; ) &#123;\n            --l;\n            auto &amp;h = _h[a[l]], &amp;t = _t[a[l]];\n            auto &amp;q = pos[a[l]];\n            if (h &lt;= t)\n                res -= q[t] - q[h];\n            res += q[t] - q[--h];\n        &#125;\n        for (; r &gt; qr; ) &#123;\n            auto &amp;h = _h[a[r]], &amp;t = _t[a[r]];\n            auto &amp;q = pos[a[r]];\n            res -= q[t--] - q[h];\n            if (h &lt;= t)\n                res += q[t] - q[h];\n            --r;\n        &#125;\n        for (; r &lt; qr; ) &#123;\n            ++r;\n            auto &amp;h = _h[a[r]], &amp;t = _t[a[r]];\n            auto &amp;q = pos[a[r]];\n            if (h &lt;= t)\n                res -= q[t] - q[h];\n            res += q[++t] - q[h];\n        &#125;\n        for (; l &lt; ql; ) &#123;\n            auto &amp;h = _h[a[l]], &amp;t = _t[a[l]];\n            auto &amp;q = pos[a[l]];\n            res -= q[t] - q[h++];\n            if (h &lt;= t)\n                res += q[t] - q[h];\n            ++l;\n        &#125;\n        return res;\n    &#125;;\n    for (int t = 1; t &lt;= m; ++t) &#123;\n        std::function&lt;void(int, int, int, int)&gt; calc = [&amp;](int l, int r, int lp, int rp) &#123;\n            if (l &gt; r)\n                return;\n            if (l == r) &#123;\n                for (int i = lp; i &lt;= rp &amp;&amp; i &lt; l; ++i)\n                    f[t][l] = std::min(f[t][l], f[t - 1][i] + w(i + 1, l));\n                return;\n            &#125;\n            int mid = (l + r) &gt;&gt; 1, p = -1;\n            for (int i = lp; i &lt;= rp &amp;&amp; i &lt; mid; ++i)\n                if (f[t - 1][i] + w(i + 1, mid) &lt; f[t][mid])\n                    f[t][mid] = f[t - 1][i] + w(i + 1, mid), p = i;\n            calc(l, mid - 1, lp, p), calc(mid + 1, r, p, rp);\n            return;\n        &#125;;\n        calc(t, n, t - 1, n - 1);\n    &#125;\n    std::cout &lt;&lt; f[m][n] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"h---battle-lemmings\">H - Battle Lemmings</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/1420/E\" class=\"uri\">https://codeforces.com/problemset/problem/1420/E</a></p>\n<p>容易发现 <span class=\"math inline\">\\(0\\)</span> 的数目不变，答案就是 <span class=\"math inline\">\\(0\\)</span> 的对数 - 连续 <span class=\"math inline\">\\(0\\)</span> 的对数。</p>\n<p>然后有一个我们很熟悉的 trick，随便找一个目标序列，那么花费的操作次数就是每个对应的 <span class=\"math inline\">\\(1\\)</span> 的位置差。令 <span class=\"math inline\">\\(f_{i,j,k}\\)</span> 表示用了 <span class=\"math inline\">\\(i\\)</span> 次操作、<span class=\"math inline\">\\(j\\)</span> 个 <span class=\"math inline\">\\(1\\)</span>、最后一个 <span class=\"math inline\">\\(1\\)</span> 在 <span class=\"math inline\">\\(k\\)</span> 的最小连续 <span class=\"math inline\">\\(0\\)</span> 对数。那么有：</p>\n<p><span class=\"math display\">\\[\n\\begin{aligned}\nf_{i,j,k}&amp;=\\min\\limits_{p&lt;k}\\left\\{f_{i-|k-pos_j|,j-1,p}+\\dfrac {(k-p-1)(k-p-2)}2\\right\\}\\\\\n&amp;=\\min\\left\\{f_{i-|k-pos_j|,j-1,p}-k\\cdot p+\\dfrac {p(p + 2)}2\\right\\}+\\dfrac {k^2-3k+2}2\n\\end{aligned}\n\\]</span></p>\n<p>发现这个式子是 <span class=\"math inline\">\\(O(n^5)\\)</span> 的，而且看起来很斜优，化为斜率形式 <span class=\"math inline\">\\(\\dfrac{2\\times f_A-2\\times f_B+A(A+2)-B(B+2)}{2(A-B)}&lt;k\\)</span>。维护递增斜率就可以 <span class=\"math inline\">\\(O(n^4)\\)</span> 做了。</p>\n<p>Tip：当时写着写着愣住了，比如这个 <span class=\"math inline\">\\(i-|k-pos_j|\\)</span> 不是一直在动吗。解决方案？同时维护很多个队列即可。</p>\n<details>\n<p>注意还要把最后一个 <span class=\"math inline\">\\(1\\)</span> 之后连续 <span class=\"math inline\">\\(0\\)</span> 的代价算上。</p>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst long long inf = 1e9;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1);\n    std::vector&lt;long long&gt; pos(1);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        std::cin &gt;&gt; a[i];\n        if (a[i] == 1)\n            pos.push_back(i);\n    &#125;\n    int m = n * (n - 1) / 2;\n    std::vector&lt;std::vector&lt;std::vector&lt;long long&gt; &gt; &gt; f(pos.size(), std::vector&lt;std::vector&lt;long long&gt; &gt; (m + 1, std::vector&lt;long long&gt; (n + 1, inf)));\n    f[0][0][0] = 0ll;\n    for (int j = 1; j &lt; (int)pos.size(); ++j) &#123;\n        std::vector&lt;std::vector&lt;int&gt; &gt; _q(m + 1, std::vector&lt;int&gt; (n + 1));\n        std::vector&lt;int&gt; _h(m + 1), _t(m + 1, -1);\n        for (int k = 0; k &lt;= n; ++k)\n            for (int i = m; i &gt;= 0; --i) &#123;\n                if (i &gt;= std::abs(k - pos[j])) &#123;\n                    auto f1 = [&amp;](long long A, long long B) &#123;\n                        return 2 * f[j - 1][i - std::abs(k - pos[j])][A] - 2 * f[j - 1][i - std::abs(k - pos[j])][B] + A * (A + 2) - B * (B + 2);\n                    &#125;;\n                    auto f2 = [&amp;](long long A, long long B) &#123;\n                        return 2 * (A - B);\n                    &#125;;\n                    auto &amp;h = _h[i - std::abs(k - pos[j])], &amp;t = _t[i - std::abs(k - pos[j])];\n                    auto &amp;q = _q[i - std::abs(k - pos[j])];\n                    for (; h &lt; t &amp;&amp; f1(q[h + 1], q[h]) &lt; k * f2(q[h + 1], q[h]); ++h) &#123;&#125;\n                    if (h &lt;= t)\n                        f[j][i][k] = std::min(inf, f[j - 1][i - std::abs(k - pos[j])][q[h]] + (k - q[h] - 1) * (k - q[h] - 2) / 2);\n                &#125;\n                auto f1 = [&amp;](long long A, long long B) &#123;\n                    return 2 * f[j - 1][i][A] - 2 * f[j - 1][i][B] + A * (A + 2) - B * (B + 2);\n                &#125;;\n                auto f2 = [&amp;](long long A, long long B) &#123;\n                    return 2 * (A - B);\n                &#125;;\n                auto &amp;h = _h[i], &amp;t = _t[i];\n                auto &amp;q = _q[i];\n                for (; h &lt; t &amp;&amp; f1(k, q[t]) * f2(q[t], q[t - 1]) &lt; f1(q[t], q[t - 1]) * f2(k, q[t]); --t);\n                q[++t] = k;\n            &#125;\n    &#125;\n    auto res(-inf);\n    int cnt = n - (int)pos.size() + 1;\n    cnt = cnt * (cnt - 1) / 2;\n    for (int i = 0; i &lt;= m; ++i) &#123;\n        for (int k = 0; k &lt;= n; ++k)\n            res = std::max(res, cnt - f.back()[i][k] - (n - k) * (n - k - 1) / 2);\n        std::cout &lt;&lt; res &lt;&lt; &#39; &#39;;\n    &#125;\n    std::cout &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"a---yakiniku-restaurants\">A - Yakiniku Restaurants</h2>\n<p><a href=\"https://atcoder.jp/contests/arc067/tasks/arc067_d\" class=\"uri\">https://atcoder.jp/contests/arc067/tasks/arc067_d</a></p>\n<p>发现固定左右端点后，收益是可以贪心算的；下意识想到只固定左端点，那么右端点应该就可以用单调队列之类的搞一搞。</p>\n<p>先提前把所有东西塞到队列里。左端点一开始在最右边；往左边动一下之后，就可以更新每种菜的队列；发现在所有元素中作决策点的不总是队头；这个地方用 <strong>单调递减的单调栈</strong> 是极好的。这里的单调栈其实就类似 <a href=\"/20250707-1/#优化-dp单调数据结构\">四边形不等式中的单调数据结构</a> 了。</p>\n<p>维护单调栈中每个决策点的影响区间；显然每个右端点的答案变化量相同；用个类似于差分的东西记录一下就好了。</p>\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst long long inf = 1e18;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m;\n    std::vector&lt;long long&gt; s(n + 1), f(n + 1);\n    for (int i = 2; i &lt;= n; ++i) &#123;\n        std::cin &gt;&gt; s[i], s[i] += s[i - 1];\n        f[i] = -s[i];\n    &#125;\n    std::vector&lt;std::vector&lt;int&gt; &gt; a(n + 1, std::vector&lt;int&gt; (m + 1));\n    for (int i = 1; i &lt;= n; ++i)\n        for (int j = 1; j &lt;= m; ++j)\n            std::cin &gt;&gt; a[i][j];\n    struct node &#123; int j, l, r; &#125;;\n    std::vector&lt;std::stack&lt;node&gt; &gt; _q(m + 1);\n    auto res(-inf);\n    for (int l = n; l; --l) &#123;\n        std::vector&lt;long long&gt; d(n + 1);\n        auto add = [&amp;](int l, int r, long long v) &#123;\n            d[l] += v;\n            if (r != n)\n                d[r + 1] -= v;\n            return;\n        &#125;;\n        for (int j = 1; j &lt;= m; ++j) &#123;\n            auto &amp;q = _q[j];\n            node now = &#123; j, l, l &#125;;\n            add(l, l, a[l][j]);\n            for (; !q.empty() &amp;&amp; a[l][j] &gt;= a[q.top().l][q.top().j]; q.pop()) &#123;\n                now.r = q.top().r;\n                add(q.top().l, q.top().r, a[l][j] - a[q.top().l][q.top().j]);\n            &#125;\n            q.push(now);\n        &#125;\n        std::partial_sum(d.begin() + 1, d.end(), d.begin() + 1);\n        for (int r = l; r &lt;= n; ++r) &#123;\n            f[r] += d[r];\n            res = std::max(res, f[r] + s[l]);\n        &#125;\n    &#125;\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"b---jellyfish-and-miku\">B - Jellyfish and Miku</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/1874/D\" class=\"uri\">https://codeforces.com/problemset/problem/1874/D</a></p>\n<p>唉数列。唉概统。在数学讲义上折磨了我一遍之后还要到这儿来折磨我。</p>\n<p>假设已经知道了 <span class=\"math inline\">\\(a\\)</span>，考虑求期望步数。设 <span class=\"math inline\">\\(E_i\\)</span> 为从 <span class=\"math inline\">\\(i\\)</span> 出发走到 <span class=\"math inline\">\\(n\\)</span> 的期望步数。那么有：</p>\n<p><span class=\"math display\">\\[\nE_i=\\begin{cases}\nE_1+1&amp;i=0\\\\\n0&amp;i=n\\\\\nE_i=(E_{i-1}+1)\\cdot \\dfrac {a_i}{a_{i+1}+a_i}+(E_{i+1}+1)\\cdot \\dfrac {a_{i+1}}{a_{i+1}+a_{i}}&amp;\\text{otherwise}\n\\end{cases}\n\\]</span></p>\n<p>（提示：从『<span class=\"math inline\">\\(i\\)</span> 下一步会走哪个方向』考虑。）</p>\n<p>接下来就可以利用你的高中数学知识进行一个 <span class=\"math inline\">\\(f_0\\)</span> 的求，（一堆过程），得到 <span class=\"math inline\">\\(E_0=n+2\\times \\sum\\limits_{i=1}^n\\dfrac {\\sum_{j\\le i}a_j}{a_i}\\)</span>，然后想要最小化这个东西。</p>\n<p>不妨令 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示到 <span class=\"math inline\">\\(i\\)</span> 时已经分配走了 <span class=\"math inline\">\\(j\\)</span> 体积，<span class=\"math inline\">\\(\\sum_{k=1}^i \\dfrac {\\sum_{l\\le k}a_l}{a_k}\\)</span> 的最小值，有 <span class=\"math inline\">\\(f_{i,j}=\\min\\limits_{k&lt;j}\\left\\{f_{i-1,k}+\\dfrac {k}{j - k}\\right\\}\\)</span>。发现它大抵是满足四边形不等式的，按照 <a href=\"/20250707-1/#d1d-dp-优化\">2D/1D DP 优化的结论</a>，代入 <span class=\"math inline\">\\(p_{i,j-1}&lt;p_{i,j}&lt;p_{i+1,j}\\)</span> 可以 <span class=\"math inline\">\\(O(nm)\\)</span> 解决问题。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m;\n    std::vector&lt;std::vector&lt;int&gt; &gt; p(n + 1, std::vector&lt;int&gt; (m + 1));\n    std::vector&lt;std::vector&lt;long double&gt; &gt; f(n + 1, std::vector&lt;long double&gt; (m + 1, 1e18));\n    f[0][0] = 0ll;\n    for (int j = 1; j &lt;= m; ++j)\n        for (int i = std::min(j, n); i; --i) &#123;\n            int to = ((i == std::min(j, n)) ? j : std::min(p[i + 1][j], j));\n            for (int k = p[i][j - 1]; k &lt;= to; ++k)\n                if (f[i - 1][k] + k * 1. / (j - k) &lt; f[i][j])\n                    f[i][j] = f[i - 1][k] + k * 1. / (j - k), p[i][j] = k;\n            // printf(&quot;f[%d][%d] = %Lf, p = %d\\n&quot;, i, j, f[i][j], p[i][j]);\n        &#125;\n    std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(10) &lt;&lt; n + 2 * f[n][m] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"cut-the-sequence\">Cut the Sequence</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P10977\" class=\"uri\">https://www.luogu.com.cn/problem/P10977</a></p>\n<h1 id=\"通知区间最值-不满足-四边形不等式\"><mark>通知：区间最值 不满足 四边形不等式。</mark></h1>\n<p>其实在猜的时候是举了反例的，但是大脑萎缩了推着推着忘记符号了 😅</p>\n<p>看到 <span class=\"math inline\">\\(f_i=\\min\\limits_{g(i)\\le j&lt;i}\\{f_j+\\max\\{a_{j+1\\sim i}\\}\\}\\)</span> 这个 <span class=\"math inline\">\\(j\\)</span> 的范围其实是有点单调队列优化的感觉的，但这个最大值传统的单调队列不是很可做。可以注意到最大值这一项有点 <strong>单调队列</strong> 后缀最大值的感觉（实际上就是）；一个很自然的想法是利用这个最大值影响的区间，维护 <span class=\"math inline\">\\(f\\)</span> 的线段树来暴力做。</p>\n<p>另一个比较牛的做法是发现同一个下标的 <span class=\"math inline\">\\(f\\)</span> 和 <span class=\"math inline\">\\(a\\)</span> 的关系。首先需要注意到 <span class=\"math inline\">\\(f\\)</span> 单调不降；对于同一个 <span class=\"math inline\">\\(a\\)</span>，能取到的 <span class=\"math inline\">\\(f\\)</span> 就是最靠前的；维护一个 <span class=\"math inline\">\\(a\\)</span> 的单减队列，那么共用同一个 <span class=\"math inline\">\\(a\\)</span> 的就是相邻两个下标之间的部分，其最优决策在能取到的最前端取得；需要注意到队列里的贡献并不单调，需要用一个 multiset 来存储所有贡献并查找、更新。</p>\n<p>需要注意单调队列里某个元素 <span class=\"math inline\">\\(f_{q_i}\\)</span> 结合的其实是 <span class=\"math inline\">\\(a_{q_{i+1}}\\)</span>。还需要注意队头的维护，可能需要一些小巧思。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;1.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m;\n    std::vector&lt;int&gt; a(n + 1);\n    std::vector&lt;long long&gt; s(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i], s[i] = s[i - 1] + a[i];\n    int h = 0, t = -1;\n    std::multiset&lt;long long&gt; st;\n    std::vector&lt;long long&gt; f(n + 1);\n    std::vector&lt;std::pair&lt;int, int&gt; &gt; q(n + 1);\n    q[++t] = &#123; 0, 0 &#125;, a[0] = 0x3f3f3f3f;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (; s[i] - s[q[h].second] &gt; m; ) &#123;\n            st.erase(st.find(f[q[h].second] + a[q[h + 1].first]));\n            if (++q[h].second &gt;= q[h + 1].first)\n                a[q[++h].first] = 0x3f3f3f3f;\n            else\n                st.insert(f[q[h].second] + a[q[h + 1].first]);\n        &#125;\n        for (; h &lt; t &amp;&amp; a[q[t].first] &lt;= a[i]; --t)\n            st.erase(st.find(f[q[t - 1].second] + a[q[t].first]));\n        st.insert(f[q[t].second] + a[i]), q[++t] = &#123; i, i &#125;;\n        f[i] = *st.begin();\n    &#125;\n    std::cout &lt;&lt; f[n] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n",
            "tags": [
                "斜率优化",
                "DP",
                "四边形不等式"
            ]
        }
    ]
}