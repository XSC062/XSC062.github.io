<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xsc062.netlify.app</id>
    <title> • Posts by &#34;闵可夫斯基和&#34; tag</title>
    <link href="https://xsc062.netlify.app" />
    <updated>2025-07-07T06:10:02.000Z</updated>
    <category term="并查集" />
    <category term="斜率优化" />
    <category term="悬线法" />
    <category term="哈希" />
    <category term="字典树" />
    <category term="DP" />
    <category term="单调队列" />
    <category term="分治" />
    <category term="二分图" />
    <category term="CRT / exCRT" />
    <category term="排列组合" />
    <category term="网络流" />
    <category term="费用流" />
    <category term="二分" />
    <category term="上下界网络流" />
    <category term="容斥原理" />
    <category term="线段树" />
    <category term="树状数组" />
    <category term="区间 DP" />
    <category term="构造" />
    <category term="Tarjan" />
    <category term="数据结构" />
    <category term="下饭" />
    <category term="LCA" />
    <category term="倍增" />
    <category term="鸽巢原理" />
    <category term="概率期望" />
    <category term="调和级数" />
    <category term="差分" />
    <category term="思维" />
    <category term="树形 DP" />
    <category term="最小生成树" />
    <category term="SAM" />
    <category term="状压" />
    <category term="分块" />
    <category term="可持久化" />
    <category term="笛卡尔树" />
    <category term="高维前缀和" />
    <category term="闲话" />
    <category term="欧拉回路" />
    <category term="树链剖分" />
    <category term="长链剖分" />
    <category term="KMP" />
    <category term="border" />
    <category term="字符串" />
    <category term="AC 自动机" />
    <category term="SA" />
    <category term="数学" />
    <category term="树上差分" />
    <category term="FWT" />
    <category term="堆" />
    <category term="树的重心" />
    <category term="二项式定理" />
    <category term="二项式反演" />
    <category term="贪心" />
    <category term="均摊" />
    <category term="计数" />
    <category term="优化建图" />
    <category term="反悔贪心" />
    <category term="调整法" />
    <category term="背包" />
    <category term="博弈论" />
    <category term="DP 优化" />
    <category term="虚树" />
    <category term="点分治" />
    <category term="WQS 二分" />
    <category term="闵可夫斯基和" />
    <category term="slope trick" />
    <category term="四边形不等式" />
    <category term="暴力" />
    <category term="状压 DP" />
    <category term="组合数学" />
    <category term="支配对" />
    <category term="DDP" />
    <category term="平衡树" />
    <category term="容斥" />
    <category term="猫树" />
    <category term="Kruskal 重构树" />
    <category term="李超线段树" />
    <entry>
        <id>https://xsc062.netlify.app/20250707/</id>
        <title>DP 凸优化</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250707/"/>
        <content type="html">&lt;p&gt;袜，这篇文章一下子创建了三个新 tag。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;什么是凸函数&#34;&gt;什么是凸函数&lt;/h2&gt;
&lt;h3 id=&#34;定义&#34;&gt;定义&lt;/h3&gt;
&lt;p&gt;在信息学中研究的凸函数大抵是只在正整数域上有定义的，所以只能直接摒弃导函数的概念了。&lt;/p&gt;
&lt;p&gt;若斜率递增，换言之，差分数组递增，认为函数是凸的（好反直觉）。&lt;/p&gt;
&lt;p&gt;或者看看符号化的定义：若对于任意 &lt;span class=&#34;math inline&#34;&gt;\(\lambda\in[0,1]\)&lt;/span&gt;，函数 &lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; 均满足：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(\lambda x+(1-\lambda) y)\le \lambda f(x)+(1-\lambda) f(y).
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;或等价地：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(x)-f(x - 1)\le f(x + 1) - f(x)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;那么认为 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 是凸函数。&lt;/p&gt;
&lt;p&gt;因为凹凸在性质上没区别，所以 &lt;strong&gt;下文施行暴政，将凹函数和凸函数统称为凸函数&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;判定&#34;&gt;判定&lt;/h3&gt;
&lt;p&gt;对于具体情境下的问题，怎么判断 DP 数组是否关于其某一维为凸函数？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相信相信的力量（最常用）。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于分段问题，证明分出来的每一段满足四边形不等式。&lt;/p&gt;
&lt;em&gt;值得一提的是，数学上不认为满足四边形不等式能够推出函数为凸。但这是信息学.jpg&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其由两个凸函数线性相加得到：&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(\forall\, \lambda,\mu\ge 0\)&lt;/span&gt; 和凸函数 &lt;span class=&#34;math inline&#34;&gt;\(f,g\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(h=\lambda f+\mu g\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 为凸函数。&lt;/p&gt;
此外，此时 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 的差分数组和 &lt;span class=&#34;math inline&#34;&gt;\(f,g\)&lt;/span&gt; 差分数组也满足上述关系。&lt;/li&gt;
&lt;li&gt;其是两个凸函数的 &lt;a href=&#34;#闵可夫斯基和&#34;&gt;闵可夫斯基和&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其由两个凸函数线性 max 得到。&lt;/p&gt;
&lt;p&gt;对于两个凸函数的线性 min，一般不是凸函数，甚至可能是凹的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;性质&#34;&gt;性质&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最值为唯一极值。&lt;/li&gt;
&lt;li&gt;斜率 / 差分数组具有单调性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在解题中主要用到的大概就是上面两条。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;wqs-二分&#34;&gt;WQS 二分&lt;/h2&gt;
&lt;h3 id=&#34;主要任务&#34;&gt;主要任务&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;例：把 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 分为恰好 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 段，每段的代价为 &lt;span class=&#34;math inline&#34;&gt;\(sum^2+c\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 为给定的常数），问最小代价。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^5,a_i\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果对段数没有要求，可以用斜优 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 做。&lt;/p&gt;
&lt;p&gt;加上了 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的限制，DP 变成二维的，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处分第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 段，可以在第一维斜率优化，做到 &lt;span class=&#34;math inline&#34;&gt;\(O(nk)\)&lt;/span&gt;；亦或发现 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 有决策单调性，然后四边形不等式优化到 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们发现 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 关于 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 这一维是凸的（而非上文的 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt;），故将 &lt;span class=&#34;math inline&#34;&gt;\(f(n,j)\)&lt;/span&gt; 关于 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的函数提取出来（记为 &lt;span class=&#34;math inline&#34;&gt;\(f_n(j)\)&lt;/span&gt;）。发现只有最高点是可以一次斜优快速求出来的，故可以认为在当前复杂度限制下，整个函数除了最高点以外都是未知的（注意可以在 DP 时记录极值点的横坐标，即分了几段）。&lt;/p&gt;
&lt;p&gt;我们给每个 &lt;span class=&#34;math inline&#34;&gt;\(f_n(j)\)&lt;/span&gt; 加上 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\cdot j\)&lt;/span&gt;（在本题中即将 &lt;span class=&#34;math inline&#34;&gt;\(c\gets c+k\)&lt;/span&gt;），勉强可以认为 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\cdot j\)&lt;/span&gt; 是凸的，所以新函数 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;_n(j)\)&lt;/span&gt; 也是凸的。若 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;gt;0\)&lt;/span&gt;，可以感受到极值点向左偏移，且随着 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的增大，极值点不会右移；&lt;span class=&#34;math inline&#34;&gt;\(k&amp;lt;0\)&lt;/span&gt; 时同理。&lt;/p&gt;
&lt;p&gt;结合几何观点，在 &lt;span class=&#34;math inline&#34;&gt;\(f_n\)&lt;/span&gt; 上的极值点可以用斜率为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的直线切到；而加上 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\cdot j\)&lt;/span&gt; 的过程，其实就是切线斜率减去 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; 的过程。相当于令切线斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-\alpha\)&lt;/span&gt;，看看能切到哪里。&lt;/p&gt;
&lt;p&gt;故可以二分一个合适的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，使得极值点的横坐标为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。此时 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;_n(k)-\alpha\cdot k\)&lt;/span&gt; 即为待求。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;WQS 二分参与的问题一般以如下形式呈现：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定序列，将其恰好分为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 段 / 恰好选 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个，求最大 / 最小代价。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;题目要求最大 / 最小值一般能够反映函数的凹凸性，可以根据这一点来猜。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;细节处理&#34;&gt;细节处理&lt;/h3&gt;
&lt;p&gt;考虑如下凸函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显然对于『凸出来』的点（即图中除了 &lt;span class=&#34;math inline&#34;&gt;\(E,H\)&lt;/span&gt; 以外的点），能切到的直线斜率为一个范围；而位于直线上的点（途中 &lt;span class=&#34;math inline&#34;&gt;\(E,H\)&lt;/span&gt;），能切到的直线斜率更是定死了。所以这要求你的二分精度需要略高一点。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(E\)&lt;/span&gt;（或 &lt;span class=&#34;math inline&#34;&gt;\(H\)&lt;/span&gt;），不能找到只过它一点的切线。根据 DP 的写法，记录的横坐标可能是最小的 &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt;，也可能是最大的 &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt;，此时你可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同时记录最小和最大的横坐标，看看 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 在不在中间。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题目要求最大代价时，记录最大横坐标，二分到一个极值点 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;#39;\ge k\)&lt;/span&gt; 时，显然 &lt;span class=&#34;math inline&#34;&gt;\(\alpha&amp;#39;\ge \alpha\)&lt;/span&gt;，用 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;_n(k&amp;#39;)-\alpha&amp;#39;\cdot k\)&lt;/span&gt; 更新答案（是赋值而不是取最值）；求最小代价时同理。&lt;/p&gt;
&lt;p&gt;主要是需要记住斜率是 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; 的相反数，&lt;del&gt;实在搞不清对应关系可以都试一试&lt;/del&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例种树&#34;&gt;例：种树&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1484&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1484&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，函数是凸的——感性理解即可。&lt;/p&gt;
&lt;p&gt;接着，要求的是 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt; 时的最值。分为两种情况：&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 是否右于原函数极值点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 右于原函数极值点，则原函数极值点为答案。&lt;/li&gt;
&lt;li&gt;否则，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 为答案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好消息是整数域上一定有解（最后答案为整、倒推即可），所以不用打浮点数二分了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 1e6;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    auto calc = [&amp;amp;](int c) &amp;#123;
        std::vector&amp;lt;std::pair&amp;lt;long long, int&amp;gt; &amp;gt; f(n + 1);
        auto mx = f.front();
        auto upd = [&amp;amp;](auto &amp;amp;x, auto y) &amp;#123;
            if (y.first &amp;gt; x.first || (y.first == x.first &amp;amp;&amp;amp; y.second &amp;lt; x.second))
                x = y;
            return;
        &amp;#125;;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            f[i].first = mx.first + a[i] + c;
            f[i].second = mx.second + 1;
            upd(mx, f[i - 1]);
        &amp;#125;
        upd(mx, f[n]);
        return mx;
    &amp;#125;;
    auto t(calc(0));
    if (t.second &amp;lt;= k) &amp;#123;
        std::cout &amp;lt;&amp;lt; t.first &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    auto res(-inf);
    for (int l = -lim, r = lim, mid; l &amp;lt;= r; ) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        auto t = calc(mid);
        if (t.second &amp;lt;= k)
            res = t.first - (long long)mid * k, l = mid + 1;
        else
            r = mid - 1;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例raper&#34;&gt;例：Raper&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4694&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4694&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给所有光盘附一个奖励 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt;，进行 WQS 二分。&lt;/p&gt;
&lt;p&gt;然后内层就和 &lt;a href=&#34;#例序列-sequence&#34;&gt;sequence&lt;/a&gt; 差得不是特别多，所以考虑反悔贪心。（？）&lt;/p&gt;
&lt;p&gt;把路过的 &lt;span class=&#34;math inline&#34;&gt;\(-a_j\)&lt;/span&gt; 丢到大根堆里，尝试和 &lt;span class=&#34;math inline&#34;&gt;\(b_i\)&lt;/span&gt; 配对。如果 &lt;span class=&#34;math inline&#34;&gt;\(mid-a_i-b_i\ge 0\)&lt;/span&gt; 那么暂时配对，顺便把 &lt;span class=&#34;math inline&#34;&gt;\(b_i-mid\)&lt;/span&gt; 丢进去用于反悔，若 &lt;span class=&#34;math inline&#34;&gt;\(b_{i&amp;#39;}\)&lt;/span&gt; 选中了 &lt;span class=&#34;math inline&#34;&gt;\(b_i-mid\)&lt;/span&gt; 说明反悔，将 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(b_{i&amp;#39;}\)&lt;/span&gt; 配对。&lt;/p&gt;
&lt;p&gt;贪心的时候需要记录已经配的对数，优先队列中需要对 &lt;span class=&#34;math inline&#34;&gt;\(-a_j\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b_i-mid\)&lt;/span&gt; 打标记进行区分，匹配到前者时才增加成功对数。&lt;/p&gt;
&lt;p&gt;发现整数域上仍然必有解（答案为整，倒推），不用打浮点数二分 neiher.&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 2e9 + 5;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; b[i];
    auto calc = [&amp;amp;](long long mid) &amp;#123;
        std::priority_queue&amp;lt;std::pair&amp;lt;long long, int&amp;gt; &amp;gt; q;
        int cnt = 0;
        auto res(0ll);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            q.emplace(-a[i], 1);
            auto [v, ty] = q.top();
            if (mid + v - b[i] &amp;gt;= 0) &amp;#123;
                q.pop(), cnt += ty;
                res += mid + v - b[i], q.emplace(b[i] - mid, 0);
            &amp;#125;
        &amp;#125;
        return std::make_pair(cnt, res);
    &amp;#125;;
    auto res(inf);
    for (long long l = 1ll, r = inf, mid; l &amp;lt;= r; ) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        auto t(calc(mid));
        if (t.first &amp;gt;= k)
            r = mid - 1, res = -(t.second - k * mid);
        else
            l = mid + 1;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;区间分拆问题&#34;&gt;区间分拆问题&lt;/h3&gt;
&lt;p&gt;目标：尝试将 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 分割成恰好 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 段，定义 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 为将 &lt;span class=&#34;math inline&#34;&gt;\([i,j]\)&lt;/span&gt; 作为一段的代价，求代价最值。其中 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 满足四边形不等式。&lt;/p&gt;
&lt;p&gt;不妨设求最小代价。定义 &lt;span class=&#34;math inline&#34;&gt;\(f(i,j)\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处分第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 段，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(i,j)=\min(f(i-1,p-1)+w(p,j)).
\]&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有定理：若 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 满足四边形不等式，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f(i-1,j)\le f(i,j)\le f(i,j+1)\)&lt;/span&gt;，从 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 定义出发很好感性理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么可以从这一点出发，&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 这一维就可以被摊掉，做到 &lt;span class=&#34;math inline&#34;&gt;\(O(n(n+m))\)&lt;/span&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有定理：若 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 满足四边形不等式，那么 &lt;span class=&#34;math inline&#34;&gt;\(f_i(j)\)&lt;/span&gt; 是凸函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那很好了。直接冲刺 WQS 即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;闵可夫斯基和&#34;&gt;闵可夫斯基和&lt;/h2&gt;
&lt;p&gt;给定两个凸函数（当然是指 OI 中那种长得很直的函数），将它们的『边』拆下来过后，以某种方式拼在一起，使得最后得到一个新的凸函数。&lt;/p&gt;
&lt;p&gt;按每条『边』的斜率归并一下就可以得到，显然答案存在且唯一，这个过程被称为闵可夫斯基和。可以发现这是一种最值 - 加卷积。&lt;/p&gt;
&lt;p&gt;假设我们要求的 DP 数组是两个已知的子数组以类似的方法卷起来的，最后要求完整的 DP 数组（而非 WQS 中的单点值），就可以考虑闵可夫斯基和。&lt;/p&gt;
&lt;p&gt;发现这个结构是很适合归并的，使用归并要求状态中含有版本维、因变量维。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例its-mooin-time-p&#34;&gt;例：It&#39;s Mooin&#39; Time P&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11459&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11459&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义 &lt;span class=&#34;math inline&#34;&gt;\(w_i\)&lt;/span&gt; 为将 &lt;span class=&#34;math inline&#34;&gt;\([i,i+L)\)&lt;/span&gt; 改为 &lt;code&gt;MOO&lt;/code&gt; 的代价，问题转化为选取 &lt;span class=&#34;math inline&#34;&gt;\(1\sim \frac nL\)&lt;/span&gt; 个不重区间的最小代价和。&lt;/p&gt;
&lt;p&gt;尝试归并，每次将 &lt;span class=&#34;math inline&#34;&gt;\([l,mid]\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((mid, r]\)&lt;/span&gt; 卷起来。但是会有一点问题：如果恰好有区间卡在中间呢？&lt;/p&gt;
&lt;p&gt;可以令 &lt;span class=&#34;math inline&#34;&gt;\(f_{l,r,0/1/2,0/1/2}(i)\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 内选了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个 &lt;code&gt;MOO&lt;/code&gt;，且两侧最远的被选点距离端点为 &lt;span class=&#34;math inline&#34;&gt;\(0/1/\ge 2\)&lt;/span&gt; 的 DP 值。然后可以进行相应的讨论、平移、闵可夫斯基和，最后将所有情况线性取 max 得到这一层的答案，容易发现得到的答案也是凸的。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int L;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; L &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;char&amp;gt; t(n + 1);
    std::vector&amp;lt;long long&amp;gt; w(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 1; i &amp;lt;= n - L + 1; ++i) &amp;#123;
        w[i] = a[i] * (t[i] != &amp;#39;M&amp;#39;);
        for (int j = i + 1; j &amp;lt; i + L; ++j)
            w[i] += a[j] * (t[j] != &amp;#39;O&amp;#39;);
        // printf(&amp;quot;[%d, %d]: %lld\n&amp;quot;, i, i + L - 1, w[i]);
    &amp;#125;
    if (L == 1) &amp;#123;
        std::sort(w.begin() + 1, w.end());
        auto s(0ll);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            s += w[i];
            std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
        return 0;
    &amp;#125;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    struct node &amp;#123;
        crr f;
        node(int len): f(L, brr(L, arr(len, inf))) &amp;#123;
            for (int i = 0; i &amp;lt; L; ++i)
                for (int j = 0; j &amp;lt; L; ++j)
                    f[i][j][0] = 0ll;
            return;
        &amp;#125;
        brr&amp;amp; operator[] (int q) &amp;#123; return f[q]; &amp;#125;
    &amp;#125;;
    auto upd = [&amp;amp;](arr &amp;amp;x, arr y) &amp;#123;
        if (x.size() &amp;lt; y.size())
            x.resize(y.size(), inf);
        for (int i = 0; i &amp;lt; (int)y.size(); ++i)
            x[i] = std::min(x[i], y[i]);
        return;
    &amp;#125;;
    auto merge = [&amp;amp;](arr l, arr r) &amp;#123;
        arr out((int)(l.size() + r.size()) - 1), dl(l.size()), dr(r.size());
        for (int i = 1; i &amp;lt; (int)l.size(); ++i)
            dl[i] = l[i] - l[i - 1];
        for (int i = 1; i &amp;lt; (int)r.size(); ++i)
            dr[i] = r[i] - r[i - 1];
        std::merge(dl.begin() + 1, dl.end(), dr.begin() + 1, dr.end(), out.begin() + 1);
        out[0] = l[0] + r[0];
        std::partial_sum(out.begin(), out.end(), out.begin());
        return out;
    &amp;#125;;
    std::function&amp;lt;node(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (r - l + 1 &amp;lt; 2 * L) &amp;#123;
            node res(1);
            for (int ll = 0; ll &amp;lt; L; ++ll)
                for (int rr = 0; rr &amp;lt; L; ++rr)
                    if (l + ll &amp;lt;= r - rr - L + 1) &amp;#123;
                        res[ll][rr].resize(2, inf);
                        for (int i = l + ll; i &amp;lt;= r - rr - L + 1; ++i)
                            res[ll][rr][1] = std::min(res[ll][rr][1], w[i]);
                        // printf(&amp;quot;[%d, %d]: (%d, %d) = %lld\n&amp;quot;, l, r, ll, rr, res[ll][rr][1]);
                    &amp;#125;
            // for (int i = 0; i &amp;lt; L; ++i)
            //     if (l + i + L - 1 &amp;lt;= r) &amp;#123;
            //         printf(&amp;quot;[%d, %d]: (%d, %d) = %lld\n&amp;quot;, l, r, i, r - (l + i + L - 1), w[l + i]);
            //         res[i][r - (l + i + L - 1)].emplace_back(w[l + i]);
            //     &amp;#125;
            return res;
        &amp;#125;   
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        node tl(calc(l, mid)), tr(calc(mid + 1, r)), res((r - l + 1) / L + 1);
        for (int ll = 0; ll &amp;lt; L; ++ll)
            for (int rr = 0; rr &amp;lt; L; ++rr)
                res[ll][rr] = merge(tl[ll][0], tr[0][rr]);
        for (int ll = 0; ll &amp;lt; L; ++ll)
            for (int rr = 0; rr &amp;lt; L; ++rr)
                for (int i = 1; i &amp;lt; L &amp;amp;&amp;amp; i &amp;lt; mid; ++i)
                    upd(res[ll][rr], merge(merge(tl[ll][i], tr[L - i][rr]), &amp;#123; 0, w[mid - i + 1] &amp;#125;));
        for (int ll = 0; ll &amp;lt; L; ++ll)
            for (int rr = L - 1; rr; --rr)
                upd(res[ll][rr - 1], res[ll][rr]);
        for (int rr = 0; rr &amp;lt; L; ++rr)
            for (int ll = L - 1; ll; --ll)
                upd(res[ll - 1][rr], res[ll][rr]);
        // for (int i = 0; i &amp;lt; L; ++i)
        //     for (int j = 0; j &amp;lt; L; ++j) &amp;#123;
        //         printf(&amp;quot;  (%d, %d): &amp;quot;, i, j);
        //         for (auto p : res[i][j])
        //             printf(&amp;quot;%lld &amp;quot;, p);
        //         puts(&amp;quot;&amp;quot;);
        //     &amp;#125;
        return res;
    &amp;#125;;
    auto res(calc(1, n));
    for (int i = 1; i &amp;lt;= n / L; ++i)
        std::cout &amp;lt;&amp;lt; res[0][0][i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例假人&#34;&gt;例：假人&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/problem/47728&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/problem/47728&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 组选完占了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 体积的最大价值。那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\max\{f_{i-1,k}+a_{i,j-k}\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;袜，这个东西好凸的样子！啊？居然不是凸的？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;事实上，有结论：若干个体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim 4\)&lt;/span&gt; 的物品做背包，可以凑出值域内任意 &lt;span class=&#34;math inline&#34;&gt;\(24\)&lt;/span&gt; 的倍数。所以先把体积全部 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，然后就可以得到体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim 4\)&lt;/span&gt; 的物品。然后会发现他们按照模 &lt;span class=&#34;math inline&#34;&gt;\(12\)&lt;/span&gt; 的余数分别是凸的。&lt;/p&gt;
&lt;p&gt;能感受到恶意了。然后就可以枚举体积，再闵可夫斯基和了。同样需要在状态中引入作为版本号的 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 维，显然因变量是体积、版本号是组数。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;fake2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; siz(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; siz[i], m += siz[i];
        a[i].resize(siz[i] + 1);
        for (int j = 1; j &amp;lt;= siz[i]; ++j)
            std::cin &amp;gt;&amp;gt; a[i][j];
    &amp;#125;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    struct node &amp;#123;
        std::vector&amp;lt;arr&amp;gt; f;
        node(): f(12) &amp;#123;&amp;#125;
        arr &amp;amp;operator[] (int q) &amp;#123;
            return f[q];
        &amp;#125;
    &amp;#125;;
    auto merge = [&amp;amp;](arr &amp;amp;p, arr &amp;amp;q) &amp;#123;
        arr res((int)(p.size() + q.size()) - 1), dp(p.size()), dq(q.size());
        std::adjacent_difference(p.begin(), p.end(), dp.begin());
        std::adjacent_difference(q.begin(), q.end(), dq.begin());
        std::merge(dp.begin() + 1, dp.end(), dq.begin() + 1, dq.end(), res.begin() + 1, std::greater&amp;lt;long long&amp;gt; ());
        res[0] = p[0] + q[0];
        std::partial_sum(res.begin(), res.end(), res.begin());
        return res;
    &amp;#125;;
    auto upd = [&amp;amp;](arr y, arr &amp;amp;x, int tag) &amp;#123;
        if (tag)
            y.insert(y.begin(), -inf);
        if (y.size() &amp;gt; x.size())
            x.resize(y.size(), -inf);
        for (int i = 0; i &amp;lt; (int)y.size(); ++i)
            x[i] = std::max(x[i], y[i]);
        return;
    &amp;#125;;
    std::function&amp;lt;node(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (l == r) &amp;#123;
            node res;
            for (int i = 1; i &amp;lt;= siz[l]; ++i)
                res[i - 1].push_back(a[l][i]);
            return res;
        &amp;#125;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        node tl(calc(l, mid)), tr(calc(mid + 1, r)), res;
        for (int p = 0; p &amp;lt; 12; ++p)
            for (int q = 0; q &amp;lt; 12; ++q)
                if (!tl[p].empty() &amp;amp;&amp;amp; !tr[q].empty())
                    upd(merge(tl[p], tr[q]), res[(p + q) % 12], p + q &amp;gt;= 12);
        return res;
    &amp;#125;;
    auto res(calc(1, n));
    for (int i = 0; i &amp;lt;= m - n; ++i)
        std::cout &amp;lt;&amp;lt; res[i % 12][i / 12] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;slope-trick&#34;&gt;slope trick&lt;/h2&gt;
&lt;p&gt;对于一个 OI 中的凸函数，它是由一些斜率单调的线段拼接成的图形。&lt;/p&gt;
&lt;p&gt;在这个前提下，发现可以用整个函数的左 / 右端点值（截距）和 &lt;span class=&#34;math inline&#34;&gt;\((n-1)\)&lt;/span&gt; 个斜率 / 差分信息描述函数。而这有时比直接维护 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点值有着更优美的性质，唤其为 slope trick。&lt;/p&gt;
&lt;p&gt;例如，关于斜率序列，如果定义域不大，可以直接维护；如果它的变化次数不多，可以利用它的单调性质，用单调数据结构维护；如果它的值域很小，可以直接维护拐点。&lt;/p&gt;
&lt;p&gt;注意前两种方法一般关注横坐标对应的函数值，所以自变量一般是和操作次数一类有关的；而这里关注函数最值而弱化了具体横坐标，操作次数一般会作为待最优化的因变量，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我想要将数列通过若干次单点修改使序列单调，但不关心序列最终形态，问最小操作次数。&lt;/li&gt;
&lt;li&gt;我想要让树上所有叶子到根的路径边权和相等，但不关心这个值是多少，问最小操作次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面依次解决上述问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例序列-sequence&#34;&gt;例：序列 sequence&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4597&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4597&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暴力地，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 最终被修改为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，容易写出 DP 式子 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\min\limits_{k\le j}\{f_{i-1,k}\}+|a_i-j|\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后就会发现它的定义域实在是太大了！那如果关注斜率的变化情况呢？&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1}(k)\)&lt;/span&gt; 的极值点为 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt;，分类讨论拆绝对值和 min：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j\le a_i\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=\min\limits_{k\le j}\{f_{i-1}(k)\}+a_i - j\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j &amp;lt; k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=f_{i-1}(j)+a_i-j\)&lt;/span&gt;，斜率相对于 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1}(j)\)&lt;/span&gt; 整体减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;del&gt;我就说导数没白学吧&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j \ge k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=f_{i-1}(k_m)+a_i-j\)&lt;/span&gt;，斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j &amp;gt; a_i\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=\min\limits_{k\le j}\{f_{i-1}(k)\}+j-a_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j &amp;lt; k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=f_{i-1}(j)+j-a_i\)&lt;/span&gt;，斜率相对于 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1}(j)\)&lt;/span&gt; 整体加 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j\ge k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j) = f_{i-1}(k_m)+j-a_i\)&lt;/span&gt;，斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果现在我们掏一个支持区间加斜率、区间推平斜率且维护区间函数最值点的数据结构，那就太逆天了。一个经典的解决方案是用堆维护线段斜率的差分（也就是差分的差分）。&lt;/p&gt;
&lt;p&gt;发现整体修改次数是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的，且如果只看比 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 更左的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;（更靠右的已经与极值无关所以不用维护），那么就只需要维护区间减法。&lt;/p&gt;
&lt;p&gt;如果将一次区间前缀减法看作一次前缀右端点入队，显然左侧某点 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的实际被减次数为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 入队的次数 + 所有右于 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 点的元素的入队次数。用大根堆维护这些元素，就可以快速维护整个斜率序列。例如 &lt;code&gt;3 2 2 1&lt;/code&gt;，代表 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 处斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 处斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-3\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 处斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-4\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(a_i\ge k_m\)&lt;/span&gt; 时（容易发现它会成为新的 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt;），直接把 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 加入大根堆，就可以把 &lt;span class=&#34;math inline&#34;&gt;\(\le a_i\)&lt;/span&gt; 的所有位置斜率减去 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
什么你问在 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 之间的推平怎么办？由于唯一右于它们的拐点 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 入了一次队，所以中间的元素斜率自然是 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 啊。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(a_i&amp;lt;k_m\)&lt;/span&gt; 时，我们需要：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 以左的位置斜率减去 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，直接将 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 入队即可。&lt;/li&gt;
&lt;li&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 之间的位置斜率加上 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，把 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 弹出（太好了就在队首）再把 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 加入即可。由于 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 显然是一个拐点，所以删除 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 并非虚空索敌，但注意 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 可能会变化成其后继。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实就会发现还有一些有趣的小性质，比如 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 与队首等价（用于实现）；&lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 右侧斜率全部为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，也是唯一可以取到的正斜率。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;袜写起来好简单。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    long long res = 0ll;
    std::priority_queue&amp;lt;int&amp;gt; q;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        if (i == 1 || a[i] &amp;gt;= q.top())
            q.push(a[i]);
        else &amp;#123;
            res += q.top() - a[i];
            q.pop(), q.push(a[i]), q.push(a[i]);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例烟花表演&#34;&gt;例：烟花表演&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3642&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3642&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,d}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 子树中所有叶子距根均为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的最小代价。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{u,d}=\sum\limits_{(v, w)\in u}\min\limits_{0\le w&amp;#39;\le d}\{f_{v,d-w&amp;#39;}+|w-w&amp;#39;|\}.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以归纳证明 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,d}\)&lt;/span&gt; 为凸；和上一题相似地，考虑用 &lt;span class=&#34;math inline&#34;&gt;\(f_v\)&lt;/span&gt; 的堆得到 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 的堆。&lt;/p&gt;
&lt;p&gt;首先最外层是一个线性加，这其实就是把差分数组 / 斜率加起来，放到我们这个堆里面就是合并两个堆。虽然你可能和我一样不认识可并堆，但是你可以和我一样不会 pd_ds。&lt;/p&gt;
&lt;p&gt;再看内层，发现和上一题长得像但其实不一样，呜呜呜。发现 &lt;span class=&#34;math inline&#34;&gt;\(|w-w&amp;#39;|\)&lt;/span&gt; 是一个左右斜率分别为 &lt;span class=&#34;math inline&#34;&gt;\(-1,1\)&lt;/span&gt; 的分段函数，而左边类比可得斜率最大为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;由闵可夫斯基和，内层函数斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;-1\)&lt;/span&gt; 的部分来自 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt;；&lt;span class=&#34;math inline&#34;&gt;\(=-1\)&lt;/span&gt; 的部分来自 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(|w-w&amp;#39;|\)&lt;/span&gt; 的左半边（感谢 &lt;span class=&#34;math inline&#34;&gt;\(w&amp;#39;\)&lt;/span&gt; 是有下确界的）；&lt;span class=&#34;math inline&#34;&gt;\(=0\)&lt;/span&gt; 的部分来自 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt;；&lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;0\)&lt;/span&gt; 的部分我们不关心。&lt;/p&gt;
&lt;p&gt;最终函数图像的变化：水平部分的左端点右移了 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;。找到 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d}\)&lt;/span&gt; 中的水平线段和斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的线段，令其在堆中的值 &lt;span class=&#34;math inline&#34;&gt;\(+w\)&lt;/span&gt; 就能达到平移的目的。&lt;/p&gt;
&lt;p&gt;但需要注意，此时仍然需要 &lt;strong&gt;保留内层函数中斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的部分，但斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;1\)&lt;/span&gt; 的部分被删除&lt;/strong&gt;。原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绝对值函数与内层函数定义域相同，作闵可夫斯基和后，斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的右侧线段会将 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt; 中原有的 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;1\)&lt;/span&gt; 的部分『挤』出定义域，故可以将其直接删除。&lt;/li&gt;
&lt;li&gt;斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的部分，虽然对内层函数中极值点无贡献，但在外层函数中极值点可能向右偏移，此时会对其产生影响，需要维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容易发现由于 &lt;span class=&#34;math inline&#34;&gt;\(w&amp;#39;\)&lt;/span&gt; 的取值上限是 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，但 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 没有上界，所以每个内层函数的右侧都一定是一条斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的射线；也就是说，每个外层函数一定有（儿子个数）个拐点（堆中元素），弹出这么多个就可以删除外层函数中斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;1\)&lt;/span&gt; 的线段，顺便找到斜率为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的线段。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
#include &amp;lt;ext/pb_ds/priority_queue.hpp&amp;gt;
const int inf= 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m, n += m;
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(n + 1);
    auto res(0ll);
    for (int i = 2, fa, w; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; fa &amp;gt;&amp;gt; w, res += w;
        g[fa].emplace_back(i, w);
    &amp;#125;
    std::vector&amp;lt;__gnu_pbds::priority_queue&amp;lt;long long&amp;gt; &amp;gt; q(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        if (g[x].empty())
            q[x].push(0), q[x].push(0);
        else
            for (auto [i, w] : g[x]) &amp;#123;
                DFS(i);
                for (int j = 1; j &amp;lt; (int)g[i].size(); ++j)
                    q[i].pop();
                long long t1 = q[i].top(), t0;
                q[i].pop(), t0 = q[i].top(), q[i].pop();
                q[i].push(t1 + w), q[i].push(t0 + w);
                q[x].join(q[i]);
            &amp;#125;
        // fprintf(stderr, &amp;quot;size(%d) = %d\n&amp;quot;, x, (int)q[x].size());
        return;
    &amp;#125;;
    DFS(1);
    for (int i = 1; i &amp;lt;= (int)g[1].size(); ++i)
        q[1].pop();
    for (; !q[1].empty(); q[1].pop())
        res -= q[1].top();
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例buy-low-sell-high&#34;&gt;例：Buy Low Sell High&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/865/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/865/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 天结束后持有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 支股票的最大收益。则 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\max\{f_{i-1,j},f_{i-1,j-1}-a_i,f_{i-1,j+1}+a_i\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;（由于这里和 max 有关所以需要精细描述凹凸了）发现就是把三个（可能）经过平移的（可能）凹的函数做线性 max。虽然实际上的结论『函数在整点上是凹的』不算太显然，但是可以猜是凹的。&lt;/p&gt;
&lt;p&gt;线性 max 在 slope trick 中是不太能体现的，但我们发现这里是同一个凹函数向左上、右下平移同一个向量，希望得到新的凹函数不管是从差分角度还是图象，都能得到新函数由左上部分斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;-a_i\)&lt;/span&gt; 的线段、两段斜率 &lt;span class=&#34;math inline&#34;&gt;\(=-a_i\)&lt;/span&gt; 的线段、右下部分斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;-a_i\)&lt;/span&gt; 的线段组成。此外，由于向左上平移的函数有一处离开了定义域，还需将其剔除。&lt;/p&gt;
&lt;p&gt;值得注意的是，当 &lt;span class=&#34;math inline&#34;&gt;\(-a_i\)&lt;/span&gt; 比最小斜率还要小时会有变化，可以画图看一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现定义域是相对小的（&lt;span class=&#34;math inline&#34;&gt;\(0\le j\le n\)&lt;/span&gt;），故用优先队列维护整个斜率序列就可以快速插入两个 &lt;span class=&#34;math inline&#34;&gt;\(k=-a_i\)&lt;/span&gt; 的线段。容易发现顶点在 &lt;span class=&#34;math inline&#34;&gt;\(j=0\)&lt;/span&gt; 处取得（从图象和定义都易知），最右侧是只买不卖的最劣方案，可以倒推。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    auto res = 0ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], res -= a[i];
    std::priority_queue&amp;lt;int&amp;gt; q;
    q.push(-a[1]);
    for (int i = 2; i &amp;lt;= n; ++i)
        if (a[i] &amp;lt; -q.top())
            q.push(-a[i]);
        else
            q.pop(), q.push(-a[i]), q.push(-a[i]);
    for (; !q.empty(); res -= q.top(), q.pop());
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="反悔贪心" />
        <category term="DP 优化" />
        <category term="WQS 二分" />
        <category term="闵可夫斯基和" />
        <category term="slope trick" />
        <updated>2025-07-07T06:10:02.000Z</updated>
    </entry>
</feed>
