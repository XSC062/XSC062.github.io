<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title> • Posts by &#34;堆&#34; tag</title>
        <link>https://xsc062.netlify.app</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Fri, 04 Apr 2025 15:31:09 +0800</pubDate>
        <lastBuildDate>Fri, 04 Apr 2025 15:31:09 +0800</lastBuildDate>
        <category>并查集</category>
        <category>斜率优化</category>
        <category>悬线法</category>
        <category>哈希</category>
        <category>字典树</category>
        <category>DP</category>
        <category>单调队列</category>
        <category>分治</category>
        <category>二分图</category>
        <category>CRT / exCRT</category>
        <category>排列组合</category>
        <category>网络流</category>
        <category>费用流</category>
        <category>二分</category>
        <category>上下界网络流</category>
        <category>容斥原理</category>
        <category>线段树</category>
        <category>树状数组</category>
        <category>区间 DP</category>
        <category>构造</category>
        <category>Tarjan</category>
        <category>数据结构</category>
        <category>下饭</category>
        <category>LCA</category>
        <category>倍增</category>
        <category>鸽巢原理</category>
        <category>概率期望</category>
        <category>调和级数</category>
        <category>差分</category>
        <category>思维</category>
        <category>树形 DP</category>
        <category>最小生成树</category>
        <category>SAM</category>
        <category>状压</category>
        <category>分块</category>
        <category>可持久化</category>
        <category>笛卡尔树</category>
        <category>高维前缀和</category>
        <category>闲话</category>
        <category>欧拉回路</category>
        <category>树链剖分</category>
        <category>长链剖分</category>
        <category>KMP</category>
        <category>border</category>
        <category>字符串</category>
        <category>AC 自动机</category>
        <category>SA</category>
        <category>数学</category>
        <category>树上差分</category>
        <category>FWT</category>
        <category>堆</category>
        <category>树的重心</category>
        <category>二项式定理</category>
        <category>二项式反演</category>
        <category>贪心</category>
        <category>均摊</category>
        <category>计数</category>
        <category>优化建图</category>
        <category>反悔贪心</category>
        <category>调整法</category>
        <category>背包</category>
        <category>博弈论</category>
        <category>DP 优化</category>
        <category>虚树</category>
        <category>点分治</category>
        <category>WQS 二分</category>
        <category>闵可夫斯基和</category>
        <category>slope trick</category>
        <category>四边形不等式</category>
        <category>暴力</category>
        <category>状压 DP</category>
        <category>组合数学</category>
        <category>支配对</category>
        <category>DDP</category>
        <category>平衡树</category>
        <category>容斥</category>
        <category>猫树</category>
        <category>Kruskal 重构树</category>
        <category>李超线段树</category>
        <item>
            <guid isPermalink="true">https://xsc062.netlify.app/20250404/</guid>
            <title>杂题选谈</title>
            <link>https://xsc062.netlify.app/20250404/</link>
            <category>堆</category>
            <category>树的重心</category>
            <pubDate>Fri, 04 Apr 2025 15:31:09 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;NOI Linux 2.0，拼尽全力无法战胜。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;比方说我试图对我一片狼藉的屏幕进行一个图的截，但是我并不知道 where the so-called &lt;code&gt;$PICTURE&lt;/code&gt; is &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这场有两个题都用到了 &lt;mark&gt;优先队列&lt;/mark&gt; + &lt;mark&gt;最优答案扩展&lt;/mark&gt; 的思路，可以记录一下。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-序列加法机&#34;&gt;A. 序列加法机&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6174/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6174/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;转化题意可以发现，三个不下降的限制拼起来其实就是没有限制。若令 &lt;span class=&#34;math inline&#34;&gt;\(c_i=|a_i-b_i|\)&lt;/span&gt;，则题意转化如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(c_{1\sim n}\)&lt;/span&gt;，定义一次操作为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择一个 &lt;span class=&#34;math inline&#34;&gt;\(x&amp;gt;0\)&lt;/span&gt;，再选择 &lt;span class=&#34;math inline&#34;&gt;\(c_i\ge x\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(c_i\gets c_i-x\)&lt;/span&gt;，并花费 &lt;span class=&#34;math inline&#34;&gt;\(x^2\)&lt;/span&gt; 的代价。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现可进行不超过 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 次操作，问将 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 全部置为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的最小代价。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有一个比较显然的事情，如果给 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 分配 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次操作机会，那么每次减去 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {c_i}k\)&lt;/span&gt; 是最优的。具体地，令 &lt;span class=&#34;math inline&#34;&gt;\(p=\left\lfloor\dfrac {c_i}k\right\rfloor\)&lt;/span&gt;，那么给 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个中的 &lt;span class=&#34;math inline&#34;&gt;\(c_i\bmod k\)&lt;/span&gt; 分配 &lt;span class=&#34;math inline&#34;&gt;\(p+1\)&lt;/span&gt;，给剩余的 &lt;span class=&#34;math inline&#34;&gt;\(k-c_i\bmod k\)&lt;/span&gt; 分配 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 即可。这个随便用反证什么的证一下即可。&lt;/p&gt;
&lt;p&gt;但是我们怎么知道应该给每个 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 分配多少次操作次数呢？这里有个 trick：初始先给每个 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 分配一次次数，&lt;mark&gt;对于每个 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt;，记录给其多分配一次后能减少的代价，全部丢进优先队列里，将最优的拿出来之后，记录再给其多分配一次后能减少的代价，再丢进去&lt;/mark&gt;。能这样做的根本原因在于：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;每个元素的每一次扩展代价相同。&lt;/li&gt;
&lt;li&gt;对于同一个元素，丢到优先队列里的值是递减的（即无后效性，可以贪心）。&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;p&gt;有人对着对的代码调了半个小时，是谁呢 &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;seq.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;seq.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;ex_seq2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; c(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; c[i];
    struct _ &amp;#123;
        int k;
        long long org, d;
        bool operator&amp;lt; (const _ &amp;amp;q) const &amp;#123;
            return d &amp;lt; q.d; 
        &amp;#125;
    &amp;#125;;
    std::priority_queue&amp;lt;_&amp;gt; q;
    long long res = 0ll;
    auto calc = [&amp;amp;](long long x, int k) &amp;#123;
        auto p = x / k;
        return (x % k) * (p + 1) * (p + 1) + (k - x % k) * p * p;
    &amp;#125;;
    for (int i = 1, x; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x;
        c[i] = std::abs(c[i] - x);
        if (c[i]) &amp;#123;
            (res += calc(c[i], 1) % mod) %= mod;
            q.push(&amp;#123; 2, c[i], calc(c[i], 1) - calc(c[i], 2) &amp;#125;);
        &amp;#125;
    &amp;#125;
    // printf(&amp;quot;res = %lld\n&amp;quot;, res);
    if ((int)q.size() &amp;gt; m)
        std::cout &amp;lt;&amp;lt; -1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    else &amp;#123;
        m -= (int)q.size();
        for (; m--; ) &amp;#123;
            auto [k, org, d] = q.top();
            q.pop();
            // printf(&amp;quot;org = %lld, k = %d, d = %lld\n&amp;quot;, org, k, d);
            (res += mod - d % mod) %= mod;
            q.push(&amp;#123; k + 1, org, calc(org, k) - calc(org, k + 1) &amp;#125;);
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-摸鱼军训&#34;&gt;B. 摸鱼军训&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6174/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6174/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义一次冒泡排序为：&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;for (int i = 1; i &amp;lt; n; ++i)
    if (a[i] &amp;gt; a[i + 1])
        std::swap(a[i], a[i + 1]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现给定一个排列和 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 次询问，问第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 轮冒泡排序后元素 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现一个元素移动的原因有两种：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;前面有个比它大的元素「冒泡」到它后面去了，本轮该元素向前移动恰好一步。&lt;/li&gt;
&lt;li&gt;前面没有比它更大的元素，轮到它来向后面「冒泡」了。找到具体的位置是不容易的，但我们发现每次 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 向右移动一步，都一定会有一个比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 更小的元素被它交换到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 左边。找到有多少个在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 右边且比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 小的元素到了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 左边就可以得到这一种情况下 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;容易发现，只要前面存在比它大的元素，那么第一条始终成立。树状数组统计 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 为元素 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 前比它大的元素个数，对于询问 &lt;span class=&#34;math inline&#34;&gt;\((k,i)\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(k\le f_i\)&lt;/span&gt;，那么答案即为 &lt;span class=&#34;math inline&#34;&gt;\(pos_i-k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;第 &lt;span class=&#34;math inline&#34;&gt;\(f_i+1\)&lt;/span&gt; 轮，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 向后「冒泡」，碰到一个比它更大的元素 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 即停止，此时 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 接替 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 向后「冒泡」，直到碰到一个 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;&amp;gt;j\)&lt;/span&gt; 为止，以此类推。&lt;/p&gt;
&lt;p&gt;如何将 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 轮后 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 停下的位置对应到原数组上呢？我们发现每一轮 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 跨越的元素一定是比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 小的可空极长段，手玩可以发现段的数量不会因为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 之后任何元素的移动而改变，故找到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 后第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 大的元素，中间比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 小的元素个数就是 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的右移步数。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;bubble.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;bubble.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    int n, m;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), bit(n + 1), p(n + 1), f(n + 1), bit1(n + 1);
    auto lowbit = [&amp;amp;](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](std::vector&amp;lt;int&amp;gt; &amp;amp;bit, int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] += v;
        return;
    &amp;#125;;
    auto qry = [&amp;amp;](std::vector&amp;lt;int&amp;gt; &amp;amp;bit, int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    auto ask = [&amp;amp;](std::vector&amp;lt;int&amp;gt; &amp;amp;bit, int l, int r) &amp;#123;
        if (l &amp;gt; n || r &amp;lt; 1)
            return 0;
        return qry(bit, r) - qry(bit, l - 1);
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i], p[a[i]] = i;
        f[a[i]] = ask(bit, a[i] + 1, n), add(bit, a[i], 1);
    &amp;#125;
    struct _ &amp;#123; int k, id; &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;_&amp;gt; &amp;gt; t(n + 1);
    std::cin &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; res(m + 1);
    for (int i = 1, x, k; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; k &amp;gt;&amp;gt; x;
        t[x].push_back(&amp;#123; k, i &amp;#125;);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        add(bit, p[i], -1);
        for (auto [k, id] : t[i])
            if (k &amp;lt;= f[i])
                res[id] = p[i] - k;
            else &amp;#123;
                int now = n;
                for (int l = p[i] + 1, r = n, mid; l &amp;lt;= r; ) &amp;#123;
                    mid = (l + r) &amp;gt;&amp;gt; 1;
                    if (ask(bit, p[i] + 1, mid) &amp;gt;= k - f[i])
                        r = mid - 1, now = mid;
                    else
                        l = mid + 1;
                &amp;#125;
                // printf(&amp;quot;%d: now = %d\n&amp;quot;, i, now);
                res[id] = p[i] - f[i] + ask(bit1, p[i] + 1, now);
            &amp;#125;
        add(bit1, p[i], 1);
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c0.-超级钢琴&#34;&gt;C0. 超级钢琴&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2048&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2048&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先做前缀和，容易想到枚举右端点，那么左端点就是一段连续的区间。显然在这里最优选择是选择左端点中 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 最小的一个。&lt;/p&gt;
&lt;p&gt;怎么求前 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 大呢？这里有一个很固定的 trick：把每个右端点及其对应的左端点区间丢到优先队列里，按照最优解（用 ST 表找一下即可）从优到劣排序。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;每次取出最优解 &lt;span class=&#34;math inline&#34;&gt;\([l_1, l_2], r\)&lt;/span&gt;，假设最优决策为 &lt;span class=&#34;math inline&#34;&gt;\(x\in [l_1, l_2]\)&lt;/span&gt;，那么把 &lt;span class=&#34;math inline&#34;&gt;\([l_1, x), r\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((x, l_2], r\)&lt;/span&gt; 分别丢到优先队列里去&lt;/mark&gt;。这个做法成立的根本原因也是：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;任何一个元素都可以贡献一次答案。&lt;/li&gt;
&lt;li&gt;对于同一个 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，随着拆分次数的增加，最优解逐渐变劣（无后效性，可贪心）。&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp language-cpp&#34; data-line=&#34;17&#34;&gt;&lt;code class=&#34;cpp langauage-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&#34;.in&#34;, &#34;r&#34;, stdin);
    std::freopen(&#34;.out&#34;, &#34;w&#34;, stdout);
#endif
    int n, k, l, r;
    std::cin &gt;&gt; n &gt;&gt; k &gt;&gt; l &gt;&gt; r;
    std::vector&amp;lt;long long&gt; a(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&gt; &gt; st(21, std::vector&amp;lt;long long&gt; (n + 1));
    for (int i = 1; i &lt;= n; ++i)
        std::cin &gt;&gt; a[i], st[0][i] = i;
    std::partial_sum(a.begin() + 1, a.end(), a.begin() + 1);
    for (int j = 1; (1 &lt;&lt; j) &lt;= n + 1; ++j) // 一个优秀的笑话是，你的 ST 表需要从 0 开始。而长度自然也应该为 n + 1。
        for (int i = 0; i + (1 &lt;&lt; j) - 1 &lt;= n; ++i)
            st[j][i] = (a[st[j - 1][i]] &lt;= a[st[j - 1][i + (1 &lt;&lt; (j - 1))]] ? st[j - 1][i] : st[j - 1][i + (1 &lt;&lt; (j - 1))]);
    auto ask = [&amp;](int l, int r) &amp;#123;
        int k = std::__lg(r - l + 1);
        return a[st[k][l]] &lt;= a[st[k][r - (1 &lt;&lt; k) + 1]] ? st[k][l] : st[k][r - (1 &lt;&lt; k) + 1];
    &amp;#125;;
    struct _ &amp;#123;
        int l1, l2, r, x;
        long long v;
        bool operator&lt; (const _ &amp;q) const &amp;#123;
            return v &lt; q.v;
        &amp;#125;
    &amp;#125;;
    std::priority_queue&lt;_&gt; q;
    for (int i = l; i &lt;= n; ++i) &amp;#123;
        _ t;
        t.l1 = std::max(i - r, 0), t.l2 = i - l, t.r = i, t.x = ask(t.l1, t.l2), t.v = a[i] - a[t.x];
        q.push(t);
    &amp;#125;
    long long res = 0ll;
    for (int to; k--; ) &amp;#123;
        auto [l1, l2, r, x, v] = q.top();
        q.pop();
        res += v;
        if (x != l1) &amp;#123;
            to = ask(l1, x - 1);
            q.push(&amp;#123; l1, x - 1, r, to, a[r] - a[to] &amp;#125;);
        &amp;#125;
        if (x != l2) &amp;#123;
            to = ask(x + 1, l2);
            q.push(&amp;#123; x + 1, l2, r, to, a[r] - a[to] &amp;#125;);
        &amp;#125;
    &amp;#125;
    std::cout &lt;&lt; res &lt;&lt; &#39;\n&#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c1.-皮卡丘&#34;&gt;C1. 皮卡丘&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6174/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6174/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个询问，每次问 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 中前 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 大 &lt;span class=&#34;math inline&#34;&gt;\(a_l-a_r\)&lt;/span&gt; 的和。&lt;span class=&#34;math inline&#34;&gt;\(\sum k\le 3\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们发现不能直接按照上一题的方法来做——每次询问都把 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 个元素丢进优先队列是不现实的。但我们似乎忽略了什么——这次的初始最优解是否可以直接在 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 上全局求解？&lt;/p&gt;
&lt;p&gt;区间修改操作就是在明示线段树。显然我们可以差分过后线段树上求解最大子段和——不差分也可以照样维护答案，方法差不多。假设现在求得的最优解为 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但此时我们没有一个端点是固定的！应该怎样拆分呢？这里又要用到另一个经典的 trick——抽象一个矩阵 &lt;span class=&#34;math inline&#34;&gt;\(b_{i,j}=a_i-a_j\)&lt;/span&gt;，那么对于一次询问，可用的 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 构成一个三角形：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意一个点，我们之所以可以通过最大子段和求得最优解是因为矩阵的行号范围和列号范围是一致的（记为情况 1）。除此之外，除了行号和列号完全相离（即 &lt;span class=&#34;math inline&#34;&gt;\(l_2&amp;lt;r_1\)&lt;/span&gt;，记为情况 2） 时可以直接用 &lt;span class=&#34;math inline&#34;&gt;\(l_{\max}-r_{\min}\)&lt;/span&gt; 求解，其他情况都无法简单得到答案。&lt;/p&gt;
&lt;p&gt;也就是说，我们的拆分方式要尽可能地贴近上面两种可求解的情况。幸运地是，直觉地划分可以比较轻松地在初始状态下得到一种可能的方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;容易注意到初始状态属于情况 1，可以按照图所示，按照行号与 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的大小关系分类，得到：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;x\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(\ge x\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(\in (x,y)\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;y\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;几个 part。&lt;/p&gt;
&lt;p&gt;如果我们要对情况 2 进行划分呢？这也是轻松的，假设当前图形满足行： &lt;span class=&#34;math inline&#34;&gt;\([l_1, l_2]\)&lt;/span&gt;，列：&lt;span class=&#34;math inline&#34;&gt;\([r_1, r_2]\)&lt;/span&gt;（显然这是个完整的矩形），且最优解 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt;。容易发现任意行、列一定相离，故根据 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt; 划分即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;也即以下几个 part：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;x\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;y\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;y\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(\sum k\log)\)&lt;/span&gt;。注意到线段树的 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 和优先队列的 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 并不会叠起来。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;意外的很难写 &lt;img src=&#34;/em/qd.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;主要是线段树写起来有点答辩了 &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
struct __ &amp;#123;
    int l, r;
    int i0, i1, s0, s1;
    long long u, d, u0, u1;
    __ operator+ (const __ &amp;amp;q) const &amp;#123;
        __ res;
        res.l = l, res.r = q.r, res.d = 0ll;
        res.u = std::max(&amp;#123; u, q.u, u1 - q.u0 &amp;#125;);
        if (res.u == u)
            res.s0 = s0, res.s1 = s1;
        else if (res.u == q.u)
            res.s0 = q.s0, res.s1 = q.s1;
        else
            res.s1 = i1, res.s0 = q.i0;
        if (u0 &amp;lt; q.u0)
            res.u0 = u0, res.i0 = i0;
        else
            res.u0 = q.u0, res.i0 = q.i0;
        if (u1 &amp;gt; q.u1)
            res.u1 = u1, res.i1 = i1;
        else
            res.u1 = q.u1, res.i1 = q.i1;
        return res;
    &amp;#125;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
long long a[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d += t[p].d, t[rt].d += t[p].d;
        t[lt].u0 += t[p].d, t[lt].u1 += t[p].d;
        t[rt].u0 += t[p].d, t[rt].u1 += t[p].d;
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void pushup(int p) &amp;#123;
    t[p] = t[lt] + t[rt];
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].i0 = t[p].i1 = t[p].s0 = t[p].s1 = l;
        t[p].u0 = t[p].u1 = a[l];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void add(int p, int l, int r, long long v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].u0 += v, t[p].u1 += v, t[p].d += v;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        add(lt, l, r, v);
    if (r &amp;gt; mid)
        add(rt, l, r, v);
    pushup(p);
    return;
&amp;#125;
auto ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p];
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    return ask(lt, l, r) + ask(rt, l, r);
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;pi.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;pi.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;ex_pi2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    bld(1, 1, n);
    for (int op; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            int l, r, x;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r &amp;gt;&amp;gt; x;
            add(1, l, r, x);
        &amp;#125;
        else &amp;#123;
            int l, r, k;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r &amp;gt;&amp;gt; k;
            struct _ &amp;#123;
                int ty, l1, l2, r1, r2, x, y;
                long long v;
                bool operator&amp;lt; (const _ &amp;amp;q) const &amp;#123;
                    return v &amp;lt; q.v;
                &amp;#125;
            &amp;#125;;
            long long res = 0ll;
            std::priority_queue&amp;lt;_&amp;gt; q;
            auto calc = [&amp;amp;](int ty, int l1, int l2, int r1, int r2) &amp;#123;
                if (l1 &amp;lt;= l2 &amp;amp;&amp;amp; r1 &amp;lt;= r2) &amp;#123;
                    if (ty == 1) &amp;#123;
                        auto ts(ask(1, l1, l2));
                        q.push(&amp;#123; 1, l1, l2, r1, r2, ts.s1, ts.s0, ts.u &amp;#125;);
                    &amp;#125;
                    else &amp;#123;
                        auto ls(ask(1, l1, l2)), rs(ask(1, r1, r2));
                        q.push(&amp;#123; 2, l1, l2, r1, r2, ls.i1, rs.i0, ls.u1 - rs.u0 &amp;#125;);
                    &amp;#125;
                &amp;#125;
                return;
            &amp;#125;;
            calc(1, l, r, l, r);
            for (; k--; ) &amp;#123;
                auto [ty, l1, l2, r1, r2, x, y, v] = q.top();
                res += v;
                q.pop();
                if (ty == 1) &amp;#123;
                    calc(1, l1, x - 1, r1, x - 1);
                    calc(2, l1, x - 1, x, r2);
                    if (x != y)
                        calc(1, x, x, x, x);
                    calc(2, x, x, x + 1, y - 1);
                    calc(2, x, x, y + 1, r2);
                    calc(1, x + 1, l2, x + 1, r2);
                &amp;#125;
                else &amp;#123;
                    calc(2, l1, x - 1, r1, r2);
                    calc(2, x, x, r1, y - 1);
                    calc(2, x, x, y + 1, r2);
                    calc(2, x + 1, l2, r1, r2);
                &amp;#125;
            &amp;#125;
            std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-银行的崛起&#34;&gt;D. 银行的崛起&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6174/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6174/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原题：&lt;a href=&#34;https://www.codechef.com/problems/CTREE?tab=statement&#34;&gt;CodeChef CTREE - Chef and Chefcoin&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;假设只需要一个关键点，那么容易想到换根 DP 的做法。但仅凭这个比较 naive 的思路是无法靠近正解的。找题解的时候看到一个惊为天人的式子：&lt;mark&gt;&lt;span class=&#34;math inline&#34;&gt;\(res=\sum\limits_{(u, v): w} f(v)=w\cdot \min(s_v,n-s_v)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(s_v\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的 size&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;乍一看是在讨论关键点要选在 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 外部还是内部，但是 &lt;span class=&#34;math inline&#34;&gt;\(\min\)&lt;/span&gt; 的含义很奇怪——假如有多个点都觉得应该往自己内部走呢？考虑如下普适场景：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;4.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;假如 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 都觉得应该往自己内部走，就会有 &lt;span class=&#34;math inline&#34;&gt;\(\begin{cases}a&amp;gt;b+c\\c&amp;gt;a+b\end{cases}\Rightarrow 0&amp;gt;2\times b\)&lt;/span&gt;，由此就反证了。&lt;/p&gt;
&lt;p&gt;那么显然 &lt;span class=&#34;math inline&#34;&gt;\(f(v)=w\cdot s_v\iff s_v\le \dfrac n2\)&lt;/span&gt;，转化成带权重心问题，可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 一次 DFS 解决。那扩展到两个呢？手玩发现存在一条边作为两个选择倾向的点的分界，不会被任何一方经过（显然），枚举这条分割线切断就可以得到两个子树；在子树上分别作一次一个关键点的做法，加起来就是这条边的答案。&lt;/p&gt;
&lt;p&gt;显然这是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 的，需要优化。能够感受到枚举边的过程不太能被优化，考虑优化求解上面式子的过程。容易想到换根，记 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt; 为当前版本时刻变化的 size，&lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 为初始值，那么有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 侧，对于 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的所有祖先 &lt;span class=&#34;math inline&#34;&gt;\(\{fa\}\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;_{fa}=s_{fa}-s_v\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(n&amp;#39;=n-s_v\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 侧，所有点 &lt;span class=&#34;math inline&#34;&gt;\(\{son\}\)&lt;/span&gt; 有 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;_{son}=s_{son}\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(n&amp;#39;=s_v\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们需要维护所有 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {n&amp;#39;}2\)&lt;/span&gt; 的大小关系——发现这是一个类似二维偏序的问题，即求：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;DFN 在 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 子树范围内，且 &lt;span class=&#34;math inline&#34;&gt;\(s\le \dfrac {s_v}2\)&lt;/span&gt; 的权值。&lt;/li&gt;
&lt;li&gt;DFN 在 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 之前 / 之后，且 &lt;span class=&#34;math inline&#34;&gt;\(s\le \dfrac {n-s_v}2\)&lt;/span&gt; 的权值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记录询问的 DFN 区间，离线（？）下来按照 &lt;span class=&#34;math inline&#34;&gt;\(n&amp;#39;\)&lt;/span&gt; 排序，随便用个 DFN 上的 DS 统计一下即可。但 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 侧的 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;_{fa}\)&lt;/span&gt; 会发生变化，没办法离线处理，考虑&lt;mark&gt;费用提前计算消除误差——找到比 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {n-s_v}2\)&lt;/span&gt; 大，但减去 &lt;span class=&#34;math inline&#34;&gt;\(s_v\)&lt;/span&gt; 后比之小的 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 提前处理&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;发现由于 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 随着 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 往上是单调递增的，满足这个条件的 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 是连续的。&lt;/mark&gt;用树上倍增框出上下端点 &lt;span class=&#34;math inline&#34;&gt;\((fa_p\to fa_q]\)&lt;/span&gt; 进行费用提前计算。那么就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log)\)&lt;/span&gt; 的解决问题了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;具体地，如何提前计算？&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;记 &lt;span class=&#34;math inline&#34;&gt;\(diw_x\)&lt;/span&gt; 为从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的路径上所有点 &lt;span class=&#34;math inline&#34;&gt;\(s\cdot w\)&lt;/span&gt; 之和。&lt;/p&gt;
&lt;p&gt;那么有：&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;项&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;真实值&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;计算值&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(\sum\Delta\)&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\notin\{fa\}\land x\notin\{son\}\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot \min(s_x,n&amp;#39;-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot \min(s_x,n&amp;#39;-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\in[1\to fa_p]\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot (s_x - s_v)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot s_x\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(-dis_p\times s_v\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\in (fa_p\to fa_q]\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot (n-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot s_x\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\times(dis_q-dis_p)-2\times (diw_q - diw_p)\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\in(fa_q,v)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot (n-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot (n-s_x-s_v)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(s_v\cdot (dis_u-dis_q)\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\in \{son\}\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot \min(s_x,n&amp;#39;-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot \min(s_x,n&amp;#39;-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;即需将答案 &lt;strong&gt;减去&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\(n\times(dis_q-dis_p)-2\times (diw_q - diw_p)+s_v\cdot (dis_u-dis_q-dis_p)\)&lt;/span&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#ifdef ONLINE_JUDGE
    std::freopen(&amp;quot;banking.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;banking.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        std::vector&amp;lt;long long&amp;gt; a(n + 1);
        long long sw = 0ll;
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; a[i], sw += a[i];
        std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, long long&amp;gt; &amp;gt; &amp;gt; g(n + 1);
        for (int i = 1, x, y, w; i &amp;lt; n; ++i) &amp;#123;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; w;
            g[x].emplace_back(y, w), g[y].emplace_back(x, w);
        &amp;#125;
        struct _ &amp;#123; int l, r, id; long long v; &amp;#125;;
        int now = 0;
        std::vector&amp;lt;_&amp;gt; q;
        std::vector&amp;lt;int&amp;gt; dfn(n + 1), rfn(n + 1);
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;int&amp;gt; (21));
        std::vector&amp;lt;long long&amp;gt; dis(n + 1), diw(n + 1), w(n + 1), res(n + 1), s(n + 1);
        std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123; // 前置工作
            dfn[x] = ++now, s[x] = a[x];
            for (auto [i, tw] : g[x])
                if (i != fa) &amp;#123;
                    w[i] = tw;
                    f[i][0] = x;
                    for (int j = 1; j &amp;lt;= 20; ++j)
                        f[i][j] = f[f[i][j - 1]][j - 1];
                    DFS(i, x);
                    s[x] += s[i];
                &amp;#125;
            rfn[x] = now;
            return;
        &amp;#125;;
        DFS(1, -1);
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            for (auto [i, tw] : g[x])
                if (i != fa) &amp;#123;
                    dis[i] = dis[x] + tw;
                    diw[i] = diw[x] + tw * s[i];
                    q.push_back(&amp;#123; dfn[i], rfn[i], i, s[i] &amp;#125;);
                    q.push_back(&amp;#123; 1, dfn[i] - 1, i, sw - s[i] &amp;#125;);
                    q.push_back(&amp;#123; rfn[i] + 1, n, i, sw - s[i] &amp;#125;);
                    int p, q;
                    long long t = (sw - s[i]) / 2;
                    &amp;#123;   // 找上端点（开的）
                        p = i;
                        for (int j = 20; ~j; --j)
                            if (f[p][j] &amp;amp;&amp;amp; s[f[p][j]] - s[i] &amp;lt;= t)
                                p = f[p][j];
                        p = f[p][0];
                    &amp;#125;
                    &amp;#123;   // 找下端点（闭的）
                        q = i;
                        for (int j = 20; ~j; --j)
                            if (f[q][j] &amp;amp;&amp;amp; s[f[q][j]] &amp;lt;= t)
                                q = f[q][j];
                        q = f[q][0];
                    &amp;#125;
                    res[i] -= sw * (dis[q] - dis[p]) - 2 * (diw[q] - diw[p]) + (dis[x] - dis[p] - dis[q]) * s[i];
                    DFS(i, x);
                &amp;#125;
            return;
        &amp;#125;;
        DFS(1, -1);
        std::vector&amp;lt;int&amp;gt; id(n + 1);
        std::iota(id.begin() + 1, id.end(), 1);
        std::sort(id.begin() + 1, id.end(), [&amp;amp;](int x, int y) &amp;#123; return s[x] &amp;lt; s[y]; &amp;#125;);
        std::sort(q.begin(), q.end(), [&amp;amp;](_ x, _ y) &amp;#123; return x.v &amp;lt; y.v; &amp;#125;);
        std::vector&amp;lt;std::pair&amp;lt;long long, long long&amp;gt; &amp;gt; bit(n + 1);
        auto lowbit = [&amp;amp;](int x) &amp;#123; return x &amp;amp; -x; &amp;#125;;
        auto add = [&amp;amp;](int x, std::pair&amp;lt;long long, long long&amp;gt; v) &amp;#123;
            for (; x &amp;lt;= n; x += lowbit(x))
                bit[x].first += v.first, bit[x].second += v.second;
            return;
        &amp;#125;;
        auto ask = [&amp;amp;](int x) &amp;#123;
            std::pair&amp;lt;long long, long long&amp;gt; res;
            for (; x; x -= lowbit(x))
                res.first += bit[x].first, res.second += bit[x].second;
            return res;
        &amp;#125;;
        auto j = ++id.begin();
        for (auto &amp;amp;[l, r, x, v] : q) &amp;#123;
            for (; j != id.end() &amp;amp;&amp;amp; s[*j] &amp;lt;= v / 2; ++j)
                add(dfn[*j], &amp;#123; w[*j], s[*j] * w[*j] &amp;#125;);
            auto ls(ask(l - 1)), rs(ask(r));
            rs.first -= ls.first, rs.second -= ls.second;
            res[x] += rs.second;
        &amp;#125;
        bit.assign(n + 1, &amp;#123; 0ll, 0ll &amp;#125;);
        std::reverse(q.begin(), q.end());
        std::reverse(id.begin(), id.end());
        j = ++id.begin();
        for (auto &amp;amp;[l, r, x, v] : q) &amp;#123;
            for (; j != id.end() &amp;amp;&amp;amp; s[*j] &amp;gt; v / 2; ++j)
                add(dfn[*j], &amp;#123; w[*j], s[*j] * w[*j] &amp;#125;);
            auto ls(ask(l - 1)), rs(ask(r));
            rs.first -= ls.first, rs.second -= ls.second;
            res[x] += rs.first * v - rs.second;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; *std::min_element(res.begin() + 2, res.end()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
 ]]></description>
        </item>
    </channel>
</rss>
