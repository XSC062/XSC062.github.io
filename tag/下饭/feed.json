{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"下饭\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20241027/",
            "url": "https://xsc062.netlify.app/20241027/",
            "title": "CSP-S",
            "date_published": "2024-10-27T00:48:02.000Z",
            "content_html": "<p>弟娃年方十一。方出考场之时，余问弟娃曰：「T1 用时几何？」。弟娃对曰：「及过大样例，已半炷香矣。」余大恸，为余 T1 大样例既过，已两柱香有余。古谚有云：「若有一人年少于吾亦强于吾，吾为之单调队列也。」吾弟娃年少于吾，殊难易之；今吾弟娃已四倍而强于吾，吾盍为单调队列哉！</p>\n<span id=\"more\"></span>\n<hr />\n<p>忆往昔昔（初二），1=。忆往昔昔昔（初一），1=。忆往昔（初三），135pts 喜提 2=。</p>\n<p>看今朝，300pts 应该有 1=。哇恭喜恭喜，2= 到 1=，一年来你有很大进步呢！</p>\n<hr />\n<h2 id=\"a.-duel\">A. duel</h2>\n<p>非常遗憾地，被橙题<mark>硬控 1h+</mark>。问就是上场之后先花了 59min 下载 <em>大脑.tar.gz</em>，然后 1s 知道做法，59s 实现。</p>\n<p>其实我们是注意到了众数的那个奇妙结论的，但是因为太奇怪并且担心是因为大样例太水所以没敢写，不服来战。</p>\n<hr />\n<h2 id=\"b.-detect\">B. detect</h2>\n<p>我们在求解出区间后被精度问题<mark>硬控 1h+</mark>。在按照右端点排序后超厉害地使用 <strong>线段树优化 DP</strong> 解决了初一简单线性贪心问题。哈哈哈。</p>\n<p>笑话：被精度问题控的 1h 里有 40min 扑在因为调精度而打出来的 <em>死循环</em> 上 <img src=\"/em/kx.gif\" /></p>\n<hr />\n<h2 id=\"c.-color\">C. color</h2>\n<p>在 5min 解决费用提前计算式子后删除了 node_modules &gt; 大脑，稍加思考得出了「大抵是不存在不带 <span class=\"math inline\">\\(\\log\\)</span> 的全局修改、单点修改、单点查询的数据结构的」的结论，超厉害地使用 <strong>线段树优化 DP</strong>，并且被全局修改懒标记没传给树根<mark>硬控 1h+</mark>。</p>\n<p>不过因为知道 1e6 的数据给线段树确实挺奇怪的，所以大力卡常，赛时代码跑民间数据跑得挺快。也就是线性所有点加起来 500ms，我一个点就要跑 500ms 的水平 <img src=\"/em/kx.gif\" /> 虽然肯定 T 是不可能 T 的。</p>\n<hr />\n<h2 id=\"d.-arena\">D. arena</h2>\n<p>坏消息：前三题均被硬控 1h+，T4 连暴力都打不完了，甚而至于，输入都打不完喜提零蛋。</p>\n<p>好消息：看开点，至少 T4 不会被<mark>硬控 1h+</mark> <img src=\"/em/kx.gif\" /></p>\n<p>这道题有个好写的做法，先胡一胡，等会儿开一篇具体写一写。</p>\n<p>还原到每场比赛胜出者能力值（线性），还需要注意到一个单调性：若在加入一个人后某场比赛的胜者就不可能成为全局胜者（相当于知道其祖先中某个元素的具体胜者，且该胜者不是自己），那么加入更多的人也不行。故记录这个人（假设对于比赛 <span class=\"math inline\">\\(x\\)</span> 为 <span class=\"math inline\">\\(id_x\\)</span>），那么知道了所有叶子的 <span class=\"math inline\">\\(id\\)</span> 就可以随便乱搞了。至于求 <span class=\"math inline\">\\(id\\)</span> 的过程，直接把 <span class=\"math inline\">\\(1\\sim n\\)</span> 的人加入二叉树，如果某个点被确定了胜者，就往败者子树打一个标记，完了过后遍历整个树下传标记即可。</p>\n<hr />\n<p>小知识：在 2024 CSP-S2 中，99% 的人打了 0 个 <strong>线段树优化 DP</strong>，而你打了 2 个 <strong>线段树优化 DP</strong> <img src=\"/em/kx.gif\" /></p>\n<hr />\n<p>可怜捏。100 + 100 + 100 + 0 = 300。由于 T4 输入没写完是没机会浮动了。拜拜 WC。</p>\n<p>草草草，wc 都拜拜了我今年是不是直接原地 afo 了啊。不要啊不要啊。</p>\n",
            "tags": [
                "下饭"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20231117/",
            "url": "https://xsc062.netlify.app/20231117/",
            "title": "TRICKS",
            "date_published": "2023-11-17T06:31:23.000Z",
            "content_html": "<p>想着写点什么东西，就是说，不会被归入知识点（upd：并非不会），却又感觉很常用（upd：并非常用）的东西。</p>\n<p>哦我懂了，通常来说我们管这个叫 trick。</p>\n<span id=\"more\"></span>\n<hr />\n<h2 id=\"ds\">DS</h2>\n<details>\n<p><summary><strong>容易记错的操作复杂度：</strong></summary></p>\n<ul>\n<li><strong>线段树合并、线段树建树</strong>：<span class=\"math inline\">\\(O(n)\\)</span>。</li>\n<li>FHQ Treap 建树：视作笛卡尔树，<span class=\"math inline\">\\(O(n)\\)</span>。</li>\n<li>动态开店线段树单次访问至多增加 <span class=\"math inline\">\\(4\\log\\)</span> 个点，e.g. <span class=\"math inline\">\\([2,n-1]\\)</span>。</li>\n</ul>\n</details>\n<details>\n<p><summary><strong>随机序列的笛卡尔树：</strong></summary></p>\n<p>是 Treap。</p>\n</details>\n<details>\n<p><summary><strong>有『合并』功能的 DS：</strong></summary></p>\n<p>并查集，线段树，<strong>字典树</strong>，笛卡尔树，BST。</p>\n</details>\n<details>\n<p><summary><strong>复杂度依赖『均摊』的 DS：</strong></summary></p>\n<p>并查集，线段树 / 字典树合并。</p>\n<p><strong>不强制在线</strong> <strong>复杂度不依赖均摊</strong> 的可持久化数据结构 <span class=\"math inline\">\\(\\to\\)</span> DAG 上直接模拟。</p>\n</details>\n<details>\n<p><summary><strong>部分可持久化：</strong></summary></p>\n<p>只要求『在最新版本上修改』和『查询所有版本』的可持久化数组可以在 <code>vector</code> 上二分，又唤部分可持久化。</p>\n</details>\n<details>\n<p><summary><strong>字典树维护二进制操作：</strong></summary></p>\n<p>字典树的节点 id 可视作对信息的引用，也即，如果在初次插入时记录了某个元素对应的 id，相当于获取了元素的引用。</p>\n<ul>\n<li>单点修改：拿出来，修改，塞进去，单次修改 <span class=\"math inline\">\\(O(\\log V)\\)</span>。</li>\n<li>全局 <code>xor</code>：打懒标记，单次修改 <span class=\"math inline\">\\(O(1)\\)</span>。</li>\n<li>全局 +1 / -1：字典树上信息必须从低位到高位存储。现场处理，（发现只会递归一条链），单次修改 <span class=\"math inline\">\\(O(\\log V)\\)</span>。</li>\n</ul>\n</details>\n<details>\n<p><summary><strong>线段树可维护的经典信息：</strong></summary></p>\n<ul>\n<li><p>操作：插入 / 删除区间，询问：值域内未被覆盖的点的信息：</p>\n<p>线段树维护节点内被覆盖次数最小值和最小值信息；当最小值为 <span class=\"math inline\">\\(0\\)</span> 时，将信息纳入统计。</p>\n扩：维护值域内恰好被区间覆盖 <span class=\"math inline\">\\(k\\)</span> 次的点的信息：线段树维护节点内前 <span class=\"math inline\">\\(k+1\\)</span> 小值的信息，则 <span class=\"math inline\">\\(k\\)</span> 一定出现在前 <span class=\"math inline\">\\(k+1\\)</span> 小值中。</li>\n<li><p>线段树维护函数：如果对于任意区间，都能定义一个定义域为该区间的函数，可以线段树维护该函数。维护的总点数是 <span class=\"math inline\">\\(n\\log n\\)</span> 的。</p></li>\n</ul>\n</details>\n<hr />\n<h2 id=\"数学\">数学</h2>\n<!-- <details><summary> -->\n<details>\n<p><summary><strong>常见数据对应的数列：</strong></summary></p>\n<ul>\n<li><span class=\"math inline\">\\(\\{1,1,2,3,5,8,\\cdots\\}\\)</span> 是斐波那契；矩阵可以优化；生成函数可以找通项；<span class=\"math inline\">\\(f_i=\\sum\\limits_{i=0}^nC_n-i^i\\)</span>。</li>\n<li><span class=\"math inline\">\\(\\{1, 1, 2, 5, 14\\cdots\\}\\)</span> 是 Catalan，走网格不能穿过对角线 / 构造二叉树方案数 / 一群人买电影票。<a href=\"/20250419/#不经过-yxc-的方案数\">有组合求法 <span class=\"math inline\">\\({2n\\choose n} - {2n \\choose n - 1}\\)</span></a>；生成函数还是可以找通项；</li>\n<li><span class=\"math inline\">\\(\\{3, 7, 6, 15, 25, 10, 31, 90, 65, 15, 63, 301, 350, 140, 21, 127, 966,\\cdots\\}\\)</span>，中间插着一堆 <span class=\"math inline\">\\(1\\)</span>，是展开了的第二类斯特林数三角形，把 <span class=\"math inline\">\\(n\\)</span> 个不同球，不空放，放到 <span class=\"math inline\">\\(k\\)</span> 个相同盒子的方案数，有递推式 <span class=\"math inline\">\\(S(n,k)=S(n-1,k-1)+k\\cdot S(n-1,k)\\)</span> 和二项式反演出来的通项 <span class=\"math inline\">\\(S(n,m)=\\sum\\limits_{i=0}^m\\dfrac {(-1)^{m-i}\\cdot i^n}{i!\\cdot (m-i)!}\\)</span>。多项式可以 <span class=\"math inline\">\\(n\\log\\)</span> 算同一行 / 列，方法不太一样。</li>\n</ul>\n</details>\n<details>\n<p><summary><strong><span class=\"math inline\">\\(n\\)</span> 被取模后的组合数：</strong></summary></p>\n<p>将原式展开，<span class=\"math inline\">\\(\\binom nm=\\frac 1{m!} \\prod\\limits_{i=0}^{m-1} (n-i)\\)</span>，容易发现 <span class=\"math inline\">\\(n\\)</span> 取模是没有影响的，如果模数很小则可以预处理模数范围内的阶乘，如果 <span class=\"math inline\">\\(m\\)</span> 很小则可以每次 <span class=\"math inline\">\\(O(m)\\)</span> 现算。</p>\n<p>同理可以发现 <span class=\"math inline\">\\(m\\)</span> 是不能直接取模的，如果需要给 <span class=\"math inline\">\\(m\\)</span> 取模就只能用 Lucas。</p>\n</details>\n<details>\n<p><summary><strong><span class=\"math inline\">\\(O(V\\log V)\\)</span> 求数的因数：</strong></summary></p>\n<p>假设 <span class=\"math inline\">\\(n=V=5\\times 10^6\\)</span>，那么对于每个数暴力分解就是 <span class=\"math inline\">\\(O(n\\sqrt V)\\)</span> 的，无法通过。</p>\n<p>埃筛预处理，存储每个数的所有因数就可以 <span class=\"math inline\">\\(O(V\\log V)\\)</span> 求了。</p>\n</details>\n<details>\n<p><summary><strong>求线段穿过直线系的次数：</strong></summary></p>\n<p>求线段 <span class=\"math inline\">\\((x_1,y_1,x_2,y_2)\\)</span> 穿过直线系 <span class=\"math inline\">\\(x+y=k\\cdots m(k\\in \\mathbb{N}^*)\\)</span> 的次数算出线段中 <span class=\"math inline\">\\(x+y\\)</span> 的取值范围也即 <span class=\"math inline\">\\([x_1+y_1,x_2+y_2]\\)</span>（斜率为负就不同了，但可以证明都是单调的），求出 <span class=\"math inline\">\\(k\\cdot m\\)</span> 在里面的出现次数就可以了。<del>有的人高中数学欠的债要到竞赛来还</del></p>\n<p>goto <a href=\"https://codeforces.com/contest/2098/problem/E\">CF2098E</a>。</p>\n</details>\n<hr />\n<h2 id=\"图论\">图论</h2>\n<details>\n<p><summary><span class=\"math inline\">\\(m-n\\)</span> 很小带来的隐含条件</summary></p>\n<p>DFS 树的反祖边很少，可以基于这一点想一些比较暴力的做法。</p>\n<p>goto <a href=\"http://localhost:4000/20250816/#g---count-simple-paths-2\">solu to <em>Count Simple Paths 2</em></a>。</p>\n</details>\n<h3 id=\"经典建模\">经典建模</h3>\n<details>\n<p><summary><strong>左部点度数为 <span class=\"math inline\">\\(2\\)</span> 的二分图匹配：</strong></summary></p>\n<p>一系列元素，每个元素有不超过两种可选值，要求最终每个元素值不同，求方案数。</p>\n<p>对所有可选值建图。如果只有一个可选值，看作两种可选值相同，连自环；否则把两个可选值连边。此时一个元素对应一条边，即对于每条边选一个端点，满足每个端点被选最多一次。</p>\n<p>对于所有连通块：</p>\n<ul>\n<li>若 <span class=\"math inline\">\\(n&gt;m+1\\)</span>： 没有这种可能性（不连通）。</li>\n<li>若 <span class=\"math inline\">\\(n=m+1\\)</span>，即该连通块为树，任选一个点不选都能唯一构成一组解，方案数为 <span class=\"math inline\">\\(n\\)</span>。</li>\n<li><p>若 <span class=\"math inline\">\\(n=m\\)</span>，即形成基环树：</p>\n<p>由于环上点只能且必须被环上边选，树上边的选法唯一。主要讨论环边选法。</p>\n<ul>\n<li>若环为自环，答案为 <span class=\"math inline\">\\(1\\)</span>；</li>\n<li>否则枚举环上所有边是统一选顺 / 逆时针方向的端点，答案为 <span class=\"math inline\">\\(2\\)</span>。</li>\n</ul></li>\n<li><p>若 <span class=\"math inline\">\\(n&lt;m\\)</span>：</p>\n<p>点不够用，答案为 <span class=\"math inline\">\\(0\\)</span>。</p></li>\n</ul>\n<p>最后把所有连通块的答案相乘就可以得到总答案。</p>\n<p>goto <a href=\"https://vjudge.net/problem/OpenJ_POJ-C19A\">Ball</a>, <a href=\"https://codeforces.com/contest/2097/problem/B\">Baggage Claim</a>, <a href=\"https://atcoder.jp/contests/tkppc6-2/tasks/tkppc6_2_g\">Must be Distinct!</a>。</p>\n</details>\n<details>\n<p><summary><strong>凸多边形三角剖分转化为树上问题</strong>：</summary></p>\n<p>结论：若把三角形视作 <span class=\"math inline\">\\(n-2\\)</span> 个点，在有公共边的三角形之间连边可以得到树。</p>\n<p>证明：有 <span class=\"math inline\">\\(n-3\\)</span> 条边，显然每条边都被两个三角形共用；至于为什么是 <span class=\"math inline\">\\(n-2\\)</span> 个三角形请移步计几。</p>\n<p>生成方法：易发现肯定存在 <span class=\"math inline\">\\(\\ge 2\\)</span> 个顶点不被任何对角线经过（其属于一个叶子三角形），其度数为 <span class=\"math inline\">\\(2\\)</span>；用类似拓扑排序的方式，不断切下叶子三角形并寻找新的叶子三角形，就可以找到所有点。注意到对角线就是树边，记录每条对角线两侧的三角形，连边即可。</p>\n<p>goto <a href=\"/20250612/#b---distance-on-triangulation\">solu to <em>Distance on Triangulation</em></a>。</p>\n</details>\n<h3 id=\"优化建图\">优化建图</h3>\n<details>\n<p><summary><strong>前缀和优化建图：</strong></summary></p>\n<p>要求每条边都指向某个前缀区间；与线段树优化建图相比的优势是虚点、边数均为 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\n<p>Goto <a href=\"/20250505/\">solu to <em>喝醉的兔子</em></a>。</p>\n</details>\n<h3 id=\"图上-dp\">图上 DP</h3>\n<details>\n<p><summary><strong>有环图的 DP 顺序：</strong></summary></p>\n<p>有环图上的 DP，通常来说可以根据状态转移方程的形式找到环上的「根源」，即不由任何环上节点转移得到。</p>\n<p>无视根源在环上的前驱边就可以用类拓扑的方式转移。</p>\n<p>Goto <a href=\"/20231113/#b.-商人\">solu to 商人</a>。</p>\n</details>\n<h3 id=\"树的直径图的直径\">树的直径，图的直径</h3>\n<details>\n<p><summary><strong>半径与中点的定义：</strong></summary></p>\n<ul>\n<li><strong>半径</strong>：图 / 树的半径（<strong>数值上为 <span class=\"math inline\">\\(\\min\\limits_x\\{\\max\\limits_y dis(x, y)\\}\\)</span></strong>）的一端一定在直径上，且在直径中间。如果不带权的话就是直径长度的一半 <del>不然为啥叫半径</del>。</li>\n<li><strong>中点</strong>：半径在直径上的端点，有一个（直径为奇）或两个（直径为偶），均满足到所有点的距离不超过半径。</li>\n</ul>\n</details>\n<details>\n<p><summary><strong>直径的性质：</strong></summary></p>\n<ul>\n<li><p><strong>图的直径的性质</strong>：</p>\n<ol type=\"1\">\n<li>不能用两次 BFS 求，原因：图不满足『距离任意点最远的点都是直径的一个端点』这条贪心性质。</li>\n<li><p>设图的直径为 <span class=\"math inline\">\\(d\\)</span>，对于任意点 <span class=\"math inline\">\\(x\\)</span>，其和其他点最短路的最大值 <span class=\"math inline\">\\(s\\)</span> 满足：</p>\n<p><span class=\"math display\">\\[\n\\left\\lceil \\dfrac d2\\right\\rceil \\le s\\le d\n\\]</span></p>\n<p>等价形式：<span class=\"math inline\">\\(d\\in[s, 2s]\\)</span>。</p>\n证明：上界显然；对于下界，取图中心 <span class=\"math inline\">\\(m\\)</span>，对任意 <span class=\"math inline\">\\(x\\)</span> 找到距其最远的点 <span class=\"math inline\">\\(y\\)</span>。由松弛，显然有 <span class=\"math inline\">\\(d(x,y)\\le d(x,m)+d(y,m)\\)</span>。又 <span class=\"math inline\">\\(d(x,m),d(y,m)\\le r\\)</span>，故 <span class=\"math inline\">\\(d(x,y)\\le 2r\\)</span>，也即 <span class=\"math inline\">\\(d\\ge d(x,y)\\)</span>。</li>\n</ol></li>\n<li><p><strong>树的直径的性质</strong>：</p>\n<ol type=\"1\">\n<li>树的所有直径交于树的所有中点（参考半径，如果长度为偶数就是两个点）；</li>\n<li>向树中加一个叶子，最多改变直径的一个端点。</li>\n<li>距离任意点最远的点都是直径的一个端点。</li>\n</ol></li>\n</ul>\n</details>\n<details>\n<p><summary><strong>半径的性质 / 离树上某点最远的点：</strong></summary></p>\n<p>将中心边（若有两条任选一条）提出来，让两侧的点作为根；</p>\n<p><img src=\"image.png\" /></p>\n<p>对于一个点 <span class=\"math inline\">\\(u\\)</span>，离它最远的点一定在另一棵树中最深的位置。</p>\n</details>\n<details>\n<p><summary><strong>动态维护树的直径：</strong></summary></p>\n<p>如果知道一个连通块内的直径是 <span class=\"math inline\">\\(x\\to y\\)</span>，另一个是 <span class=\"math inline\">\\(a\\to b\\)</span>，那么两个合并起来的直径一定是 <span class=\"math inline\">\\(\\{x,y,a,b\\}\\)</span> 里的 <span class=\"math inline\">\\(C_4^2\\)</span>。</p>\n<p>线段树维护一段连续<strong>欧拉序</strong>内（不用 DFS 序是为了保证联通）的直径和两个端点，就能解决动态加点一类问题。</p>\n</details>\n<h3 id=\"树上问题\">树上问题</h3>\n<details>\n<p><summary><strong>树上路径问题的解决思路：</strong></summary></p>\n<ol type=\"1\">\n<li><p>静态问题：</p>\n<ul>\n<li><p>不要求方向且能预处理：树上差分。</p></li>\n<li><p>要求方向且能预处理：倍增、树剖（多一个 log 但跑不满；综合来看慢一些）。</p></li>\n<li><p>离线、要求方向且不能预处理：</p>\n<p>把询问挂在 <span class=\"math inline\">\\(u\\)</span> 和 LCA 上，第一遍 DFS 把 <span class=\"math inline\">\\(u\\to\\)</span> LCA 的答案计算出来（需要可合并信息），第二遍 DFS 利用回溯把 LCA <span class=\"math inline\">\\(\\to v\\)</span> 的答案计算出来。</p>\ngoto <a href=\"/20250809/#a---记忆\">solu to <em>记忆</em></a>。</li>\n</ul></li>\n<li><p>动态问题：树剖。</p></li>\n</ol>\n</details>\n<hr />\n<h2 id=\"dp\">DP</h2>\n<details>\n<p><summary><strong>轮廓线 DP / 逐格状压 DP：</strong></summary></p>\n<p>对于棋盘上的状压 DP，如果某格内容的限制只来自相邻的格子（这是大部分棋盘问题能够满足的），可以考虑轮廓线 DP。</p>\n<p>具体来说，按照通常的从上到下、从左到右 DP 的思路，对于某一格，发现影响到它的只有左侧和上方的状态；这时我们通常会保存上一行所有状态，但发现左上侧格子及以前的状态是无用的，反而左边的状态是有用的。故记录每一列最靠下的已确定状态，就可以完成 DP。</p>\n<p>goto <a href=\"/20250805/#d---count-grid-3-coloring\">solu to <em>Count Grid 3-coloring</em></a>，<a href=\"/20250805/#f---123-set\">solu to <em>123 Set</em></a>。</p>\n<p>对于 <span class=\"math inline\">\\(2\\times 1\\)</span> 骨牌放置问题，可以设『上半片』为 <code>1</code>，其余为 <code>0</code>，对于横向骨牌逐二格确定。这样就能发现，轮廓线 DP 并不一定只有在左侧有限制的时候才能用，因为<strong>记录左侧状态也是在完成状态的转移</strong>。</p>\n</details>\n<details>\n<p><summary><strong>『贡献』的思想：</strong></summary></p>\n<p>用乘法分配率将式子拆开，即『分类』，这时可能会发现『分步』这一步比原来更好做。</p>\n<p>更具象地，对于『分步』中的某一步，将『类别』的全集划分为若干个子集，发现除此之外的部分可能可以更方便地计算。如果能找到这样一种简单的均裂或异裂的方式，使得每一『类』的『单步』价值能够确定，就能考虑用『贡献』计算。</p>\n<p>特别地，对于一个子集，如果其他步骤对它的价值没有影响，其贡献往往会表现为幂次形式。</p>\n<p>Goto <a href=\"/20250803/#b---one-to-one\">solu to <em>One to One</em></a>，<a href=\"/20250407/#e---kdoi-11彩灯晚会\">solu to <em>彩灯晚会</em></a></p>\n</details>\n<details>\n<p><summary><strong>想要筛选出特定一『类』的状态 / 不同『分类』对应不同『分步』时的处理方法：</strong></summary></p>\n<p>如果类别比较少，将类别放到维度里（例：如果存在二进制运算则可以拆位，则类别为 0/1 两类），分别处理。</p>\n<p>看起来很显然，但确实是很多状态设计的难点。</p>\n</details>\n<details>\n<p><summary><strong>多重集的组合数</strong></summary></p>\n<p>主要要求能够认识到正在应用该模型。</p>\n<p>当 <span class=\"math inline\">\\(n,m\\)</span> 很小而 <span class=\"math inline\">\\(c_i\\)</span> 很大时：</p>\n<ul>\n<li><p>朴素地，设 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示在 <span class=\"math inline\">\\(i\\)</span> 处填了 <span class=\"math inline\">\\(\\le j\\)</span> 的数（可以意识到需要前缀和），如果只关注当前位是不能做的，考虑枚举填了多少个 <span class=\"math inline\">\\(j\\)</span>，可以得到 <span class=\"math inline\">\\(f_{i,j}=\\sum_k f_{i-k,j-1}\\)</span>。注意 <span class=\"math inline\">\\(k\\)</span> 可以取到 <span class=\"math inline\">\\(0\\)</span>，从数值上来看恰好是对的。</p>\n如果认为一个多重集中的元素是有差异的，还可以乘上 <span class=\"math inline\">\\(\\binom {c_j}k\\)</span>。</li>\n<li>如果保证 <span class=\"math inline\">\\(n\\le c_i\\)</span>，且题目没有其他限制时，发现原问题等价于 <span class=\"math inline\">\\(x_1+x_2+\\cdots +x_m=n\\)</span> 的非负整数解数目，插板法解决。</li>\n<li><p>在上一种方式的基础上，如果没有了 <span class=\"math inline\">\\(n\\le c_i\\)</span> 的限制，易发现容斥也是可行的。</p></li>\n</ul>\n</details>\n<details>\n<p><summary><strong>与字典序有关的状态设计：</strong></summary></p>\n<p>要求字典序大于 / 小于给定值的方案数，考虑使用 <span class=\"math inline\">\\(f_i\\)</span> 表示 <span class=\"math inline\">\\(1\\sim i\\)</span> 全部和给定值相同，<span class=\"math inline\">\\(i+1\\)</span> 大于 / 小于给定值，后面无限制的情况总数。</p>\n<p>Goto <a href=\"http://222.180.160.110:61235/contest/5423/problem/2\">冒泡排序</a>。</p>\n</details>\n<ul>\n<li>计数 DP 和容斥的选择。</li>\n<li><p>（容斥）碰到了「起点状态到终点状态，中间不能经过一些非法状态的方案数」，可以用 <span class=\"math inline\">\\(f_i\\)</span> 表示从起点，不经过 <span class=\"math inline\">\\(1\\sim i-1\\)</span> 的非法状态，到达非法状态 <span class=\"math inline\">\\(i\\)</span> 的方案数，最后将终点状态也视为一个非法状态并 DP 即可。</p>\nGoto <a href=\"/20231113/#a---gerald-and-giant-chess\">solu to <em>Gerald and Giant Chess</em></a>，<a href=\"https://www.cnblogs.com/XSC062/p/17330225.html\">solu to <em>两双手</em></a>。</li>\n<li><p>求方案数，如果用通常的「考虑满足条件的情况并转移」，就必须能够简单地对条件进行判定。</p>\n<p>如果这一点做不到，可以考虑从最简单或最极限情况出发充要且不重地 <strong>构造</strong> 出一般情况，并计算相应的方案数。</p>\ngoto <a href=\"/20230716/\">solu to <em>染色</em></a>。</li>\n<li><p>如果有转移会有后效性不妨考虑是否有前效性然后逆序 DP。</p>\n<p>例如求字典序最小的答案：只知道最后一个字符不能推断出谁的字典序最小。但如果知道最开头一个字符，并保证从后往前填表的每一步都走的最小就能够确定。</p>\ngoto <a href=\"/20230716-1/\">solu to <em>匹配数</em></a></li>\n<li><p id=\"1\">\n状态拆分技巧。比如状态 ABC 不一定要从状态 A、状态 B、状态 C 分别 <span class=\"math inline\">\\(O(m)\\)</span> 的转移，而可以从 A 和 BC 以 <span class=\"math inline\">\\(O(1)\\)</span> 完成转移。\n</p>\n<p>Goto <a href=\"/20231003/#f.-单词\">solu to <em>单词</em></a>。</p></li>\n</ul>\n<h3 id=\"关于背包\">关于背包</h3>\n<details>\n<p><summary><strong>子序列问题转化为背包问题：</strong></summary></p>\n<p>子序列问题（不仅是 + &amp; min，也可以是 xor、加 &amp; 模等）可以转化为背包问题；对一个区间做背包，可以把区间划分成若干段，每段做背包，再依次 <span class=\"math inline\">\\(O(v^2)\\)</span> 地合并。</p>\n<p>『划分』的一个典型场景是找『分割线』，然后向左向右分别做背包——这么做的优点是，对于任意穿这条分割线的区间，你都能 <span class=\"math inline\">\\(O(v^2)\\)</span> 得到所有的背包信息。甚至，如果你只需要求某个特定体积下的答案，只需要 <span class=\"math inline\">\\(O(v)\\)</span> 枚举。</p>\n<p>upd：可以猫树</p>\n<p>goto <a href=\"https://loj.ac/p/6515\">贪玩蓝月</a>。</p>\n</details>\n<details>\n<p><summary><strong>离线背包结合分治：</strong></summary></p>\n<p>背包可以看作一种 +/min 卷积：在体积维上做加法、在代价维上做 min。当然其他操作如体积维上的 xor、加模；代价维上的方案数都差不多。</p>\n<p>因此，多次区间询问（离线）的背包可以结合分治——原因是从每个 <span class=\"math inline\">\\(l\\)</span> 开始做一次背包是不现实的，而我们发现分割线是可以共用的——分割线代表的背包信息也是可以共用的。</p>\n<p>所以需要找到一种『找分割线』和『一条分割线求解的范围』的方法，使得规定复杂度内能够最大化利用『公共信息』。分治的（类线段树的）结构就是一种极好的方式，在一层分治内解决所有在 <span class=\"math inline\">\\([l,r]\\)</span> 范围内，且跨越 <span class=\"math inline\">\\(mid\\)</span> 的询问，这样就能从 <span class=\"math inline\">\\(mid\\)</span> 出发，向左到 <span class=\"math inline\">\\(l\\)</span>，向右到 <span class=\"math inline\">\\(r\\)</span> 求解背包。</p>\n<p>goto <a href=\"/20250520/#cf2043f-nim\">solu to CF2043F</a>。</p>\n</details>\n<details>\n<p><summary><strong>树上背包序列化：</strong></summary></p>\n<p>注意到对于任何类型的背包，树结构复杂度不优于序列结构。仅有物品体积为 <span class=\"math inline\">\\(1\\)</span> 的 01 背包可以用技巧优化到相同复杂度。</p>\n<p>利用 DFS 序进行填表，若不选某个点，相当于不选其引导的一整个子树 DFS 序区间。其余和序列背包一致。</p>\n<p>Goto <a href=\"/20250612/#c---shopping\">solu to <em>Shopping</em></a>。</p>\n</details>\n<details>\n<p><summary><strong>随机序列的背包：</strong></summary></p>\n<p>有结论：一个长度为 <span class=\"math inline\">\\(n\\)</span> 的 <span class=\"math inline\">\\(1/-1\\)</span> 随机序列的前缀和离 <span class=\"math inline\">\\(0\\)</span> 的距离期望不超过 <span class=\"math inline\">\\(\\sqrt n\\)</span>。</p>\n<p>拓展一下，在保证值域内分布均匀的整数域内背包，在 <code>random_shuffle</code> 后实际最大状态不太会超过 <span class=\"math inline\">\\(\\sqrt V\\)</span>。</p>\n<p>因为结论很松，所以运气比较好的时候甚至不会超过 <span class=\"math inline\">\\(\\log V\\)</span>。</p>\n</details>\n<hr />\n<h2 id=\"哈希\">哈希</h2>\n<details>\n<p><summary><strong>哈希中全等条件的应用 / 哈希与前缀信息的关联：</strong></summary></p>\n<p>有的区间问题的判定条件可以转化为部分前缀信息的全等。</p>\n<p>例：要求区间内每个数出现次数为 <span class=\"math inline\">\\(3\\)</span> 的倍数，转化为：令 <span class=\"math inline\">\\(cnt_{i,j}\\)</span> 表示前 <span class=\"math inline\">\\(i\\)</span> 个数中 <span class=\"math inline\">\\(j\\)</span> 出现次数 <span class=\"math inline\">\\(\\bmod3\\)</span> 的值，则要求左右端点该值全等。</p>\n<p>Goto <a href=\"https://www.luogu.com.cn/article/5reynyzi\">Three Occurrences</a>。</p>\n</details>\n<details>\n<p><summary><strong>xor hash：</strong></summary></p>\n<p>使用于异或判断次数奇偶性 / 元素存在性的哈希。</p>\n<p>区间里每个值出现次数都是偶数的必要条件是区间异或起来为 <span class=\"math inline\">\\(0\\)</span>。该结论不充分：<span class=\"math inline\">\\(1\\oplus 2\\oplus 3=0\\)</span>。</p>\n<p>把每个数都哈希成一个随机大数（比如 ull），冲突的概率就会变成 <span class=\"math inline\">\\(2^{-64}\\)</span>。</p>\n<p>Goto <a href=\"https://www.luogu.com.cn/article/ugg047a7\">NOI2024 D1T1</a>，<a href=\"/20221010/\">solu to <em>博弈</em></a>。</p>\n</details>\n<hr />\n<h2 id=\"二分\">二分</h2>\n<hr />\n<h2 id=\"关于最值\">关于最值</h2>\n<h3 id=\"关于冒泡排序\">关于冒泡排序</h3>\n<p><em>『冒泡排序有一种被出烂但是每次碰到我都不会的美感。』——wosile</em></p>\n<p><em>这个人我不认识，但是我觉得这句话说得太好了！</em></p>\n<ul>\n<li><p>一轮冒泡排序做的事情：将序列按前缀最大值为段首划分为若干段，并把其移到段末。</p>\ngoto <a href=\"/20250510/#c---1-loop-bubble-sort\">1 Loop Bubble Sort</a>。</li>\n<li><p>前缀最大值在一轮冒泡排序后仍是前缀最大值。</p></li>\n</ul>\n<details>\n<p><summary>求某下标在序列所有的 LIS 中出现次数：</summary></p>\n<p>分别统计以其结尾和开头的 LIS 长度与次数，如果加起来是序列 LIS 的长度，那么次数相乘就是答案。</p>\n</details>\n<h2 id=\"杂项\">杂项</h2>\n<details>\n<p><summary><strong>常用低复杂度库函数 / 比手写复杂度更低的库函数：</strong></summary></p>\n<ul>\n<li><code>__builtin_clz</code> / <code>__builtin_ctz</code>：统计二进制开头 / 末尾 <span class=\"math inline\">\\(0\\)</span> 的个数，通常是硬件指令，硬件不支持则会采用掩码 <span class=\"math inline\">\\(O(1)\\)</span> 得到结果。</li>\n<li><code>__builtin_popcount</code>：同上。</li>\n<li><p><code>sqrt</code>：争议很大，但事实是对于所有数据最多迭代 <span class=\"math inline\">\\(6\\)</span> 次，实际表现接近单次浮点乘法操作，故为 <span class=\"math inline\">\\(O(1)\\)</span>。</p>\n<p>此处值得说明的是，<code>&lt;cmath&gt;</code> 中的对数函数同样为常数复杂度，但被观测到实际表现时常数较大，跑 1e6 次就已经很危险了。</p>\n如果需要对 <span class=\"math inline\">\\(2\\)</span> 取对数，使用 <code>std::__lg</code> 代替（其实现为 <code>31 - __builtin_clz(x)</code>）。</li>\n<li><p><code>std::nth_element</code>：可以 <span class=\"math inline\">\\(O(n)\\)</span> 找到第 <span class=\"math inline\">\\(k\\)</span> 大元素（放在第 <span class=\"math inline\">\\(k\\)</span> 位），并将原数组部分重排，使得前 <span class=\"math inline\">\\(k-1\\)</span> 为均比第 <span class=\"math inline\">\\(k\\)</span> 位小，后 <span class=\"math inline\">\\(n-k\\)</span> 位均比第 <span class=\"math inline\">\\(k\\)</span> 位大。</p>\n<p>所以实际功能其实是 <span class=\"math inline\">\\(O(n)\\)</span> 找到前 <span class=\"math inline\">\\(k\\)</span> 大元素。因为平常提到 rank 都喜欢用 <span class=\"math inline\">\\(k\\)</span> 来叙述，所以函数名经常被误记为 <code>kth</code>。</p></li>\n</ul>\n</details>\n<details>\n<p><summary><strong>随机序列跳悬线 / 悬线结合分块：</strong></summary></p>\n<p>随机序列的笛卡尔树深度为 <span class=\"math inline\">\\(\\log\\)</span>；令块长为 <span class=\"math inline\">\\(B=\\sqrt {\\log n}\\)</span>，维护每个点跳 <span class=\"math inline\">\\(B\\)</span> 步的答案；那么就能 <span class=\"math inline\">\\(O(\\sqrt {\\log n})\\)</span> 跳悬线。</p>\n</details>\n<details>\n<p><summary><strong>多组元素两两配对，要求同一组间不成对：</strong></summary></p>\n<p>设元素总数为 <span class=\"math inline\">\\(2n\\)</span>，则有解当且仅当最大的一组元素数不超过 <span class=\"math inline\">\\(n\\)</span>。</p>\n<p>若需要输出一种方案，可以看作有两个长为 <span class=\"math inline\">\\(n\\)</span>、上下并行放置的盒子，现欲用若干元素充满盒子，使得上下对应位置元素不同组。一种简单的构造方式是，把上下两个盒子拼在一起，按任意顺序把所有组连续放入，然后从拼接处断开，上下对应即为一对，容易发现上下元素一定不同组。</p>\n</details>\n<details>\n<p><summary><strong>撤销思想：</strong></summary></p>\n<p>当题目给出『按一定的操作序列，将整块逐步分解为小段，问至晚哪一步后满足条件（需要单调性）』，可以考虑从最后的局面开始考虑，逐步『合并』，并 check 最早合并到哪一步时满足条件。</p>\n<p>Goto <a href=\"/20220808/\">solu to <em>CF567D</em></a></p>\n</details>\n<details>\n<p><summary><strong>双栈模拟双端队列：</strong></summary></p>\n<blockquote>\n<p>用两个栈模拟队列或双端队列。支持两头删除、插入。</p>\n</blockquote>\n<p>一个维护前面的插入、删除；一个维护后面的插入、删除。插入是简单的；删除在大部分情况下是简单的；如果某个栈删空了，将另一个栈的一半挪过来暴力重构即可。均摊复杂度线性。</p>\n<p>复杂度证明：设两栈长度分别为 <span class=\"math inline\">\\(L_1,L_2\\)</span>，定义势能 <span class=\"math inline\">\\(E=|L_1-L_2|\\)</span>。每次插入 / 简单删除带来 <span class=\"math inline\">\\(\\pm 1\\)</span> 的势能变化；一次重构消耗 <span class=\"math inline\">\\(E\\)</span> 的势能，将势能重置为 <span class=\"math inline\">\\(E\\le 1\\)</span>。显然就有均摊线性复杂度了。</p>\n<p>适用场景：类队列 / 双端队列场景，但若固定一个端点就可以向左向右分别简单维护的；如背包等。</p>\n<p>goto <a href=\"/20250520/#贪玩蓝月\">solu to <em>贪玩蓝月</em></a>。</p>\n</details>\n<details>\n<p><summary><strong>线段树维护括号序列：</strong></summary></p>\n<p>每个节点维护左边</p>\n</details>\n<details>\n<p><summary><strong>贪心选取括号序列：</strong></summary></p>\n<blockquote>\n<p>给定 <span class=\"math inline\">\\(a_1\\sim a_{2N}\\)</span>，选取一个合法的长度为 <span class=\"math inline\">\\(2N\\)</span> 的括号序列，记权值为所有 <span class=\"math inline\">\\((\\)</span> 所在位置的 <span class=\"math inline\">\\(a\\)</span> 值之和，最大化权值。</p>\n</blockquote>\n<p><span class=\"math inline\">\\(a_1\\)</span> 显然为 <code>(</code>，<span class=\"math inline\">\\(a_{2N}\\)</span> 显然为 <code>)</code>；</p>\n<p>对于 <span class=\"math inline\">\\(a_2\\sim a_{2N-1}\\)</span>，从前往后扫，每次把两个连续元素放在一起考虑，进行如下操作：</p>\n<ul>\n<li>把这两个连续元素放到『可用来作 <code>(</code>』的队列里。</li>\n<li>贪心地从队列里挑选 <span class=\"math inline\">\\(a\\)</span> 最大的元素，令其为 <code>(</code>。</li>\n</ul>\n<blockquote>\n<p><strong>正确性证明</strong></p>\n<p>即证：可构造出来的序列 <span class=\"math inline\">\\(\\iff\\)</span> 合法的序列；构造出来的序列最优。</p>\n<ul>\n<li><p>必要性：</p>\n<p>我们知道，括号序列合法 <span class=\"math inline\">\\(\\iff\\)</span> 对于任意 <span class=\"math inline\">\\(i\\)</span>，<span class=\"math inline\">\\(1\\sim i\\)</span> 中的 <code>)</code> 的数量不超过 <code>(</code>。</p>\n对于任意 <span class=\"math inline\">\\(i=2k+1\\)</span>，前 <span class=\"math inline\">\\(i\\)</span> 个元素中存在至少 <span class=\"math inline\">\\(k+1\\)</span> 个 <code>(</code>。<strong>且如果任意一步少选，序列不合法</strong>。</li>\n<li><p>充分性：</p>\n<p>也即在我们可以任意选择从队列中挑选哪个元素的情况下，证明任意目标序列都可以被这么构造。</p>\n每次选择目标序列最靠前的未被选的 <code>(</code> 并将其选中。如果有一步不存在这样的位置怎么办？由『必要性』中粗体字得不合法。</li>\n<li><p>最优性：</p>\n<p>首先需要知道每个元素是否被选择是相对独立的。如果两个数都可被选，那么它们的选中状态是互不影响的（除非这是最后一个位置了，但显然这不是我们关注的重点）。</p>\n<p>假设一个 <span class=\"math inline\">\\(a_i\\)</span> 位于最优解序列，但我们没有选择它：说明选中了一个比 <span class=\"math inline\">\\(a_i\\)</span> 更大的元素，可以构造出更优的序列。由此反证。</p></li>\n</ul>\n</blockquote>\n<p>goto <a href=\"/20250520/#abc407e-most-valuable-parentheses\">solu to <em>abc407E</em></a>。</p>\n</details>\n<ul>\n<li><span class=\"math inline\">\\(k\\)</span> 个「二者至少选其一」形式的限制，要求选的尽可能少，使用 <span class=\"math inline\">\\(2^k\\)</span> 枚举后取并集代替 <span class=\"math inline\">\\(3^k\\)</span> 枚举。</li>\n</ul>\n",
            "tags": [
                "下饭"
            ]
        }
    ]
}