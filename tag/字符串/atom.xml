<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xsc062.netlify.app</id>
    <title> • Posts by &#34;字符串&#34; tag</title>
    <link href="https://xsc062.netlify.app" />
    <updated>2025-08-09T04:33:17.000Z</updated>
    <category term="并查集" />
    <category term="斜率优化" />
    <category term="悬线法" />
    <category term="哈希" />
    <category term="字典树" />
    <category term="DP" />
    <category term="单调队列" />
    <category term="分治" />
    <category term="二分图" />
    <category term="CRT / exCRT" />
    <category term="排列组合" />
    <category term="网络流" />
    <category term="费用流" />
    <category term="二分" />
    <category term="上下界网络流" />
    <category term="容斥原理" />
    <category term="线段树" />
    <category term="树状数组" />
    <category term="区间 DP" />
    <category term="构造" />
    <category term="Tarjan" />
    <category term="数据结构" />
    <category term="下饭" />
    <category term="LCA" />
    <category term="倍增" />
    <category term="鸽巢原理" />
    <category term="概率期望" />
    <category term="调和级数" />
    <category term="差分" />
    <category term="思维" />
    <category term="树形 DP" />
    <category term="最小生成树" />
    <category term="SAM" />
    <category term="状压" />
    <category term="分块" />
    <category term="可持久化" />
    <category term="笛卡尔树" />
    <category term="高维前缀和" />
    <category term="闲话" />
    <category term="欧拉回路" />
    <category term="树链剖分" />
    <category term="长链剖分" />
    <category term="KMP" />
    <category term="border" />
    <category term="字符串" />
    <category term="AC 自动机" />
    <category term="SA" />
    <category term="数学" />
    <category term="树上差分" />
    <category term="FWT" />
    <category term="堆" />
    <category term="树的重心" />
    <category term="二项式定理" />
    <category term="二项式反演" />
    <category term="贪心" />
    <category term="均摊" />
    <category term="计数" />
    <category term="优化建图" />
    <category term="反悔贪心" />
    <category term="调整法" />
    <category term="背包" />
    <category term="博弈论" />
    <category term="DP 优化" />
    <category term="虚树" />
    <category term="点分治" />
    <category term="WQS 二分" />
    <category term="闵可夫斯基和" />
    <category term="slope trick" />
    <category term="四边形不等式" />
    <category term="暴力" />
    <category term="状压 DP" />
    <category term="组合数学" />
    <category term="支配对" />
    <category term="DDP" />
    <category term="平衡树" />
    <category term="容斥" />
    <category term="猫树" />
    <category term="Kruskal 重构树" />
    <category term="李超线段树" />
    <entry>
        <id>https://xsc062.netlify.app/20250809/</id>
        <title>近期杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250809/"/>
        <content type="html">&lt;p&gt;这段时间比赛的一些题 和 nKessi、duanyu 讲的题目。太偏计数、数学的基本上没办法做了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-出关&#34;&gt;A. 出关&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6462/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6462/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，对于一个空串，任意利用下列三种操作，使其变为 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，求最小代价：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;在末尾添加字符 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;，代价为 &lt;span class=&#34;math inline&#34;&gt;\(t_{0,c}\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;复制整个字符串并粘贴在末尾，代价为 &lt;span class=&#34;math inline&#34;&gt;\(t_1\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;删除末尾字符，代价为 &lt;span class=&#34;math inline&#34;&gt;\(t_2\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(|s|\le 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以预处理出对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 结尾，最多可以复制到哪个地方，发现要求 &lt;span class=&#34;math inline&#34;&gt;\(z_i=lcp(s_{1\dots n},s_{i+1\dots n})\)&lt;/span&gt;。那么一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的最远转移点 &lt;span class=&#34;math inline&#34;&gt;\(r_i=i+z_{i+1}\)&lt;/span&gt;，用单调队列就能维护，会 exkmp 就能线性；&lt;/p&gt;
&lt;p&gt;否则可以二分 + 哈希多个 log，后面也有理由偷懒用优先队列了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int p = 31;
const int mod = 998244353;
int main() &amp;#123;
    std::freopen(&amp;quot;laozi.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;laozi.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    int n = (int)s.length(), t1, t2;
    std::vector&amp;lt;long long&amp;gt; h(n + 1), base(n + 1);
    std::vector&amp;lt;int&amp;gt; a(n + 1), t0(27), z(n + 1), r(n + 1);
    base[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        a[i] = s[i - 1] - &amp;#39;a&amp;#39; + 1;
        h[i] = (h[i - 1] * p + a[i]) % mod;
        base[i] = base[i - 1] * p % mod;
    &amp;#125;
    auto gethash = [&amp;amp;](int l, int r) &amp;#123;
        return (h[r] - h[l - 1] * base[r - l + 1] % mod + mod) % mod;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int l = 1, r = std::min(i - 1, n - i + 1), mid; l &amp;lt;= r; ) &amp;#123;
            mid = (l + r) &amp;gt;&amp;gt; 1;
            if (gethash(1, mid) == gethash(i, i + mid - 1))
                z[i] = mid, l = mid + 1;
            else
                r = mid - 1;
        &amp;#125;
    for (int i = 1; i &amp;lt; n; ++i)
        r[i] = i + std::min(i, z[i + 1]);
    for (int i = 1; i &amp;lt;= 26; ++i)
        std::cin &amp;gt;&amp;gt; t0[i];
    std::cin &amp;gt;&amp;gt; t1 &amp;gt;&amp;gt; t2;
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::priority_queue&amp;lt;std::pair&amp;lt;long long, int&amp;gt; &amp;gt; q;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        f[i] = f[i - 1] + t0[a[i]];
        for (; !q.empty() &amp;amp;&amp;amp; r[q.top().second] &amp;lt; i; q.pop());
        if (!q.empty())
            f[i] = std::min(f[i], t1 - q.top().first - (long long)t2 * i);
        if (i != n)
            q.emplace(-(f[i] + 2ll * t2 * i), i);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-非攻&#34;&gt;D. 非攻&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6462/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6462/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，对于一个 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 的排列，使用最小的交换次数使得其单增。在该前提下，定义代价为每次交换的两个数之积。对于所有 &lt;span class=&#34;math inline&#34;&gt;\(n!\)&lt;/span&gt; 个排列，计算最小代价之和。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^7\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;转化成，把 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 分成无标号的若干组，每组的代价是 最小值 &lt;span class=&#34;math inline&#34;&gt;\(\times\)&lt;/span&gt; 其他元素的和，还有一个项链问题的系数，发现组间的符号是求和，考虑计算贡献。&lt;/p&gt;
&lt;p&gt;枚举 &lt;span class=&#34;math inline&#34;&gt;\(i,j\)&lt;/span&gt; 并钦定两个同属一个环，且 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 为最小值，枚举环大小 &lt;span class=&#34;math inline&#34;&gt;\(s+2\)&lt;/span&gt;，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
res&amp;amp;=\sum_{i=1}^{n-1}\sum_{j=i+1}^n i\cdot j \cdot \sum_{s=0}^{n-i-1}\binom{n-i-1}s \cdot (s+1)!\cdot (n-s-2)!\\
&amp;amp;=\sum_{i=1}^{n-1}i\cdot \dfrac {(i+n+1)(n-i)}2 \cdot \sum_{s=0}^{n-i-1}\binom{n-i-1}s\cdot (s+1)!\cdot (n-s-2)!\\
&amp;amp;=\frac 12\times\sum_{i=1}^{n-1}i\cdot (i+n+1)\cdot (n-i)!\cdot\sum_{s=0}^{n-i-1}\dfrac {(s + 1)\cdot (n-s-2)!}{(n-i-1-s)!}\\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(T=n-i-1\)&lt;/span&gt;，发现我们需要快速计算 &lt;span class=&#34;math inline&#34;&gt;\(f_T=\sum\limits_{i=0}^T \dfrac{(i+1)\cdot (n-i-2)!}{(T-i)!}\)&lt;/span&gt;。记 &lt;span class=&#34;math inline&#34;&gt;\(m=n-2\)&lt;/span&gt;，变形得 &lt;span class=&#34;math inline&#34;&gt;\(f_T=(m-T)!\cdot \sum\limits_{i=0}^{T} (i+1) \binom{m-i}{m-T}\)&lt;/span&gt;，发现似乎可以简化，令 &lt;span class=&#34;math inline&#34;&gt;\(k=m-T,t=T+1\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(f_T=\sum\limits_{i=1}^T i\cdot \binom {k+t-i}k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后是经典的组合意义保平安环节，即从 &lt;span class=&#34;math inline&#34;&gt;\(k+t\)&lt;/span&gt; 个有标号小球中选择一条分界线，分界线左边选一个球、右边选 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个球的方案数。发现分界线的存在很诡异，故用分界线后方的第一个球代替，在 &lt;span class=&#34;math inline&#34;&gt;\(t+1\)&lt;/span&gt; 处新建一个虚球，规定在前 &lt;span class=&#34;math inline&#34;&gt;\(t+1\)&lt;/span&gt; 个球中选两个球，并令后一个为分界线，且令前 &lt;span class=&#34;math inline&#34;&gt;\(t+1\)&lt;/span&gt; 个中的其他球为实球，就能建立双射。在分界线后再选 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个球，容易发现直接在范围内选 &lt;span class=&#34;math inline&#34;&gt;\(k+2\)&lt;/span&gt; 个球就能满足条件，故 &lt;span class=&#34;math inline&#34;&gt;\(f_T=(n-T-2)!\cdot \binom{t+k+1}{k+2}\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;mozi.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;mozi.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1), f(n + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    int m = n - 2;
    for (int T = 0; T &amp;lt;= n - 2; ++T) &amp;#123;
        int k = m - T, t = T + 1;
        f[T] = C(t + k + 1, k + 2) * fac[m - T] % mod;
    &amp;#125;
    auto res = 0ll;
    for (int i = 1; i &amp;lt;= n - 1; ++i)
        (res += (long long)i * (i + n + 1) % mod * fac[n - i] % mod * f[n - i - 1] % mod) %= mod;
    std::cout &amp;lt;&amp;lt; res * inv[2] % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---destruction-of-walls&#34;&gt;C - Destruction of Walls&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc203/tasks/arc203_c&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc203/tasks/arc203_c&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---insert-xor&#34;&gt;D - Insert XOR&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc203/tasks/arc203_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc203/tasks/arc203_d&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---记忆&#34;&gt;A - 记忆&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/problem/274793&#34; class=&#34;uri&#34;&gt;https://ac.nowcoder.com/acm/problem/274793&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要意识到问题是静态的，并且不能用线段树之类维护；故考虑离线下来，想办法在 LCA 处统计答案。&lt;/p&gt;
&lt;p&gt;这个时候发现需要合并子树状态、整体异或、整体 +1，很容易想到 Trie。把 &lt;span class=&#34;math inline&#34;&gt;\(u\to\)&lt;/span&gt; LCA 的答案保存在 LCA 处，然后再用 DFS + 回溯统计 LCA &lt;span class=&#34;math inline&#34;&gt;\(\to v\)&lt;/span&gt; 的答案。想了半天没想到把上下拆开来做也是神了 😅&lt;/p&gt;
&lt;p&gt;可能比较考验对字典树的理解？做个比喻，字典树的 id 就相当于对这个点上信息的『引用』。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;字典树合并的时候可以考虑回收废弃点，不然可能有点卡。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int X = 50;
const int maxn = 2e7 + 5;
long long d[maxn];
int tot, T[maxn][2], f[maxn], fa[maxn];
#define lc(p) T[p][0]
#define rc(p) T[p][1]
int find(int x) &amp;#123; return x == f[x] ? x : f[x] = find(f[x]); &amp;#125;
int newnode(void) &amp;#123;
    int p = ++tot;
    assert(p &amp;lt; maxn);
    d[p] = lc(p) = rc(p) = 0, f[p] = p;
    return p;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (d[p]) &amp;#123;
        if (d[p] &amp;amp; 1)
            std::swap(lc(p), rc(p));
        d[p] &amp;gt;&amp;gt;= 1;
        if (lc(p))
            d[lc(p)] ^= d[p];
        if (rc(p))
            d[rc(p)] ^= d[p];
        d[p] = 0;
    &amp;#125;
    return;
&amp;#125;
int ins(int p, long long x) &amp;#123;
    for (int i = 0; i &amp;lt; X; ++i) &amp;#123;
        pushdown(p);
        if (!T[p][(x &amp;gt;&amp;gt; i) &amp;amp; 1]) &amp;#123;
            T[p][(x &amp;gt;&amp;gt; i) &amp;amp; 1] = newnode();
            fa[T[p][(x &amp;gt;&amp;gt; i) &amp;amp; 1]] = p;
        &amp;#125;
        p = T[p][(x &amp;gt;&amp;gt; i) &amp;amp; 1];
    &amp;#125;
    return p;
&amp;#125;
void merge(int &amp;amp;p, int q) &amp;#123;
    if (!q)
        return;
    if (!p) &amp;#123;
        p = q;
        return;
    &amp;#125;
    pushdown(p), pushdown(q);
    fa[lc(q)] = p, fa[rc(q)] = p;
    merge(lc(p), lc(q)), merge(rc(p), rc(q));
    assert(f[p] == p), assert(f[q] == q), f[q] = p;
    return;
&amp;#125;
long long ask(int p) &amp;#123;
    std::vector&amp;lt;int&amp;gt; st;
    for (int i = 0, j = p; i &amp;lt; X; ++i)
        st.push_back(fa[j]), j = fa[j];
    for (int i = 0; i &amp;lt; X; ++i)
        pushdown(st.back()), st.pop_back();
    long long x = 0;
    for (int i = 0; i &amp;lt; X; ++i) &amp;#123;
        x = x * 2 + (p == rc(fa[p]));
        p = fa[p];
    &amp;#125;
    return x;
&amp;#125;
void add(int p) &amp;#123;
    for (int i = 0; p &amp;amp;&amp;amp; i &amp;lt; X; ++i) &amp;#123;
        pushdown(p);
        std::swap(lc(p), rc(p));
        p = lc(p);
    &amp;#125;
    return;
&amp;#125;
void del(int p) &amp;#123;
    for (int i = 0; p &amp;amp;&amp;amp; i &amp;lt; X; ++i) &amp;#123;
        pushdown(p);
        std::swap(lc(p), rc(p));
        p = rc(p);
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), top(n + 1), fa(n + 1), dep(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != fa[x]) &amp;#123;
                dep[i] = dep[x] + 1;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    DFS = [&amp;amp;](int x) &amp;#123;
        if (son[x])
            top[son[x]] = top[x], DFS(son[x]);
        for (auto i : g[x])
            if (i != son[x] &amp;amp;&amp;amp; i != fa[x])
                top[i] = i, DFS(i);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    auto askLCA = [&amp;amp;](int x, int y) &amp;#123;
        for (; top[x] != top[y]; x = fa[top[x]])
            if (dep[top[x]] &amp;lt; dep[top[y]])
                std::swap(x, y);
        return dep[x] &amp;lt; dep[y] ? x : y;
    &amp;#125;;
    struct node &amp;#123; long long x; int u, v; &amp;#125;;
    std::vector&amp;lt;node&amp;gt; q(m + 1);
    std::vector&amp;lt;int&amp;gt; id(m + 1);
    std::vector&amp;lt;long long&amp;gt; res(m + 1), ans(m + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; up(n + 1), dn(n + 1), ed(n + 1);
    for (int i = 1, x, u, v; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;
        q[i] = &amp;#123; x, u, v &amp;#125;;
        up[u].push_back(i), dn[askLCA(u, v)].push_back(i), ed[v].push_back(i);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; rt(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        rt[x] = newnode();
        for (auto i : g[x])
            if (i != fa[x]) &amp;#123;
                DFS(i);
                merge(rt[x], rt[i]);
            &amp;#125;
        add(rt[x]);
        for (auto i : up[x])
            id[i] = ins(rt[x], q[i].x);
        d[rt[x]] ^= a[x];
        for (auto i : dn[x])
            res[i] = ask(find(id[i]));
        return;
    &amp;#125;;
    DFS(1);
    tot = 0, rt[0] = newnode();
    std::fill(id.begin() + 1, id.end(), 0);
    DFS = [&amp;amp;](int x) &amp;#123;
        d[rt[0]] ^= a[x];
        for (auto i : dn[x])
            id[i] = ins(rt[0], res[i]);
        for (auto i : ed[x])
            ans[i] = ask(id[i]);
        add(rt[0]);
        for (auto i : g[x])
            if (i != fa[x])
                DFS(i);
        del(rt[0]);
        d[rt[0]] ^= a[x];
        return;
    &amp;#125;;
    DFS(1);
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; ans[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---ビーバーの会合-2-meetings-2&#34;&gt;B - ビーバーの会合 2 (Meetings 2)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/AT_joisc2021_j&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/AT_joisc2021_j&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义所求点为『局部重心』；类似树的重心，容易发现当关键点数量为奇时，只存在一个局部重心；否则，局部重心组成一条链。&lt;/p&gt;
&lt;p&gt;即对于每一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，需要找到一条最长链，使得其两端存在大小为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的子树（容易发现取后缀 max 即可得到真实答案）。使用点分治，精细实现容易做到 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; mx(n + 1), siz(n + 1), p, tag(n + 1), res(n + 1, 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int fa) &amp;#123;
        p.push_back(x);
        siz[x] = 1, mx[x] = 0;
        for (auto i : g[x])
            if (!tag[i] &amp;amp;&amp;amp; i != fa) &amp;#123;
                DFS1(i, x);
                siz[x] += siz[i];
                mx[x] = std::max(mx[x], siz[i]);
            &amp;#125;
        return;
    &amp;#125;;
    auto findrt = [&amp;amp;](int x) &amp;#123;
        p.clear(), DFS1(x, -1);
        int n = (int)p.size();
        for (auto i : p)
            if (mx[i] &amp;lt;= n / 2 &amp;amp;&amp;amp; n - siz[i] &amp;lt;= n / 2)
                return i;
        assert(0);
        return -1;
    &amp;#125;;
    struct node &amp;#123;
        int u1, u2, id1, id2;
        node(): u1(0), u2(0), id1(0), id2(0) &amp;#123;&amp;#125;
        void upd(int u, int id) &amp;#123;
            if (id1 == id)
                u1 = std::max(u1, u);
            else if (u &amp;gt;= u1)
                u2 = u1, id2 = id1, u1 = u, id1 = id;
            else if (u &amp;gt;= u2)
                u2 = u, id2 = id;
            return;
        &amp;#125;
    &amp;#125;;
    std::vector&amp;lt;node&amp;gt; s(n + 1);
    std::function&amp;lt;void(int, int, int, int)&amp;gt; DFS2 = [&amp;amp;](int x, int fa, int dep, int anc) &amp;#123;
        s[siz[x]].upd(dep, anc);
        for (auto i : g[x])
            if (!tag[i] &amp;amp;&amp;amp; i != fa)
                DFS2(i, x, dep + 1, anc);
        return;
    &amp;#125;;
    std::function&amp;lt;void(int, int, int, int)&amp;gt; DFS3 = [&amp;amp;](int x, int fa, int dep, int anc) &amp;#123;
        int v = ((s[siz[x]].id1 == anc) ? s[siz[x]].u2 : s[siz[x]].u1);
        res[2 * siz[x]] = std::max(res[2 * siz[x]], dep + 1 + v);
        for (auto i : g[x])
            if (!tag[i] &amp;amp;&amp;amp; i != fa)
                DFS3(i, x, dep + 1, anc);
        return;
    &amp;#125;;
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        x = findrt(x), p.clear(), DFS1(x, -1);
        // printf(&amp;quot;rt = %d\n&amp;quot;, x);
        for (auto i : g[x])
            if (!tag[i])
                DFS2(i, x, 1, i);
        for (int i = siz[x] - 1; i; --i) &amp;#123;
            s[i].upd(s[i + 1].u1, s[i + 1].id1);
            s[i].upd(s[i + 1].u2, s[i + 1].id2);
        &amp;#125;
        for (auto i : g[x])
            if (!tag[i])
                DFS3(i, x, 1, i);
        tag[x] = 1;
        for (int i = 1; i &amp;lt; siz[x]; ++i)
            s[i] = node();
        for (auto i : g[x])
            if (!tag[i])
                DFS(i);
        return;
    &amp;#125;;
    DFS(1);
    for (int i = (n &amp;gt;&amp;gt; 1) * 2; i; --i)
        if (i + 2 &amp;lt;= n)
            res[i] = std::max(res[i], res[i + 2]);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---the-closest-pair&#34;&gt;C - The Closest Pair&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/problem/262593&#34; class=&#34;uri&#34;&gt;https://ac.nowcoder.com/acm/problem/262593&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常规方法&lt;/strong&gt;：考虑&lt;strong&gt;支配对&lt;/strong&gt;，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，找到所有合法的 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt;。容易想到枚举 &lt;span class=&#34;math inline&#34;&gt;\(a_i\div a_j\)&lt;/span&gt; 来做；假设存在 &lt;span class=&#34;math inline&#34;&gt;\(a_k\div a_i=a_j\div a_i\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;gt;j\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;不妨设 &lt;span class=&#34;math inline&#34;&gt;\(a_j=K\cdot a_i+p,a_k=K\cdot a_i+q\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\((a_i,a_j),(a_i,a_k)\)&lt;/span&gt; 均合法当且仅当下列条件全部成立：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_j\bmod a_i&amp;gt;a_k\bmod a_i\)&lt;/span&gt;； 则 &lt;span class=&#34;math inline&#34;&gt;\(a_j&amp;gt;a_k\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_j\bmod a_k&amp;gt;a_k\bmod a_i\)&lt;/span&gt;；又 &lt;span class=&#34;math inline&#34;&gt;\(p-q\ge a_j\bmod a_k\)&lt;/span&gt;（&lt;strong&gt;太牛了这一步&lt;/strong&gt;），即 &lt;span class=&#34;math inline&#34;&gt;\(p-q&amp;gt;q\iff p&amp;gt;2q\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证得只关心同一个 &lt;span class=&#34;math inline&#34;&gt;\(a_j\div a_i\)&lt;/span&gt; 时的支配对数量为 &lt;span class=&#34;math inline&#34;&gt;\(\log n\)&lt;/span&gt; 级别；总对数 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n\ln n)\)&lt;/span&gt;。离线下来扫描线就行了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;对着 单点修改 区间最值 想了 1h 的单 log 做法 😰 果然小脑掉线太可怕了，第二天早上重置大脑 1s 发现自己是斯波 😓&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
const int maxn = 4e6 + 5;
struct &amp;#123; int l, r, u[2]; &amp;#125; t[maxn];
#define lt (t[p].l)
#define rt (t[p].r)
int tot[2];
void add(int &amp;amp;p, int l, int r, int x, int v, int i) &amp;#123;
    if (!p)
        p = ++tot[i], t[p].u[0] = -1, t[p].u[1] = 0x3f3f3f3f;
    if (i == 0)
        t[p].u[0] = std::max(t[p].u[0], v);
    else
        t[p].u[1] = std::min(t[p].u[1], v);
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, l, mid, x, v, i);
    else
        add(rt, mid + 1, r, x, v, i);
    return;
&amp;#125;
int ask(int p, int l, int r, int ql, int qr, int i) &amp;#123;
    if (!p || (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr))
        return t[p].u[i];
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (qr &amp;lt;= mid)
        return ask(lt, l, mid, ql, qr, i);
    if (ql &amp;gt; mid)
        return ask(rt, mid + 1, r, ql, qr, i);
    if (i == 0)
        return std::max(ask(lt, l, mid, ql, qr, 0), ask(rt, mid + 1, r, ql, qr, 0));
    return std::min(ask(lt, l, mid, ql, qr, 1), ask(rt, mid + 1, r, ql, qr, 1));
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifndef ONLINE_JUDGE
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    const int m = 1e6;
    int rt[2] = &amp;#123; 0 &amp;#125;, n;
    t[0].u[0] = -1, t[0].u[1] = 0x3f3f3f3f;
    read(n);
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (i != 1) &amp;#123;
            for (int K = a[i]; K &amp;lt;= m; K += a[i]) &amp;#123;
                for (int mx = std::min(a[i] - 1, m - K); ; ) &amp;#123;
                    int k = ask(rt[0], 1, m, K, K + mx, 0);
                    if (k == -1)
                        break;
                    t[i].emplace_back(k, a[k] - K);
                    if (k == 1 || !(a[k] - K))
                        break;
                    mx = (a[k] - K - 1) / 2;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        add(rt[0], 1, m, a[i], i, 0);
    &amp;#125;
    for (int i = n; i; --i) &amp;#123;
        if (i != n)
            for (int K = a[i]; K &amp;lt;= m; K += a[i])
                for (int mx = std::min(a[i] - 1, m - K); ; ) &amp;#123;
                    int k = ask(rt[1], 1, m, K, K + mx, 1);
                    if (k == 0x3f3f3f3f)
                        break;
                    t[k].emplace_back(i, a[k] - K);
                    if (k == n || !(a[k] - K))
                        break;
                    mx = (a[k] - K - 1) / 2;
                &amp;#125;
        add(rt[1], 1, m, a[i], i, 1);
    &amp;#125;
    int q;
    read(q);
    std::vector&amp;lt;int&amp;gt; res(q + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; u(n + 1);
    for (int i = 1, l, r; i &amp;lt;= q; ++i) &amp;#123;
        read(l), read(r);
        if (l &amp;gt; r)
            std::swap(l, r);
        u[r].emplace_back(l, i);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; bit(n + 1, 0x3f3f3f3f);
    auto lowbit = [&amp;amp;](int x) &amp;#123; return x &amp;amp; -x; &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] = std::min(bit[x], v);
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        auto res = 0x3f3f3f3f;
        for (; x; x -= lowbit(x))
            res = std::min(res, bit[x]);
        return res;
    &amp;#125;;
    for (int r = 1; r &amp;lt;= n; ++r) &amp;#123;
        for (auto [l, v] : t[r])
            add(n - l + 1, v);
        for (auto [l, i] : u[r])
            res[i] = ask(n - l + 1);
    &amp;#125;
    for (int i = 1; i &amp;lt;= q; ++i)
        print(res[i], &amp;#39;\n&amp;#39;);
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;求支配对的过程也要带 log（线段树），再加上扫描线的 3log，总共是常数比较大的 3log（卡了一个上午的常也是有了）。所以接下来讲解另一种奇技淫巧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;暴力分治&lt;/strong&gt;：注意到对于比较长（&lt;span class=&#34;math inline&#34;&gt;\(len&amp;gt; B\)&lt;/span&gt;）的区间，答案比较小；故考虑分治。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于长询问（&lt;span class=&#34;math inline&#34;&gt;\(len&amp;gt;B\)&lt;/span&gt;），从小到大枚举答案并 check；预处理某个范围（&lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt;）内的 &lt;span class=&#34;math inline&#34;&gt;\(res\)&lt;/span&gt; 出现的所有位置，平衡的时候还要算上调和级数和 bit。&lt;/li&gt;
&lt;li&gt;对于短询问（&lt;span class=&#34;math inline&#34;&gt;\(len\le B\)&lt;/span&gt;），发现每次区间内暴力是 &lt;span class=&#34;math inline&#34;&gt;\(O(B^2q)\)&lt;/span&gt; 的；把询问离线下来，精细实现，利用询问的公共部分使得&lt;strong&gt;每一对数只被枚举一次&lt;/strong&gt;就能达到 &lt;span class=&#34;math inline&#34;&gt;\(O(B^2 + Bq)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最优解取 &lt;span class=&#34;math inline&#34;&gt;\(B=333,V=483\)&lt;/span&gt;，不自己实现一遍了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---仙人掌&#34;&gt;D - 仙人掌&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3687&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3687&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;把边双从图中删除、问题转化为树上&lt;strong&gt;边&lt;/strong&gt;不交的链覆盖，使得&lt;strong&gt;所有链长 &lt;span class=&#34;math inline&#34;&gt;\(\ge 2\)&lt;/span&gt;&lt;/strong&gt; 的方案数。发现由于&lt;strong&gt;边可以不被覆盖&lt;/strong&gt;，常规 DP 会使得在父节点处合并时需要额外的数量维，参考树上背包，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;思考时会注意到两个限制可以抵消——如果认为长为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的链就是不被覆盖的边，覆盖所有树边，显然可以建立和合法解的双射。此时合并是非常方便的，注意到每个儿子的系数一定都参与『分步』，只需要求出『分类』的系数。这个可以预处理（和 &lt;a href=&#34;/20250407/#a.-二分图染色&#34;&gt;二分图染色&lt;/a&gt; 这个题有点像），令 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示一个点度数为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时的答案，参考错排的思路，则 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 可以不参与配对，也可以乱选一个点配对，如果选中了已配对的点就令其和 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 交换，可以建立和合法解的双射。则 &lt;span class=&#34;math inline&#34;&gt;\(f_i=f_{i-1}+(n-1)f_{i-2}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;首先需要 check 原图是否为仙人掌，顺带回忆一下连通性的知识——在 DFS 树上差分，检查是否有边被覆盖两次即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, m;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
        for (int x, y; m--; ) &amp;#123;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
            g1[x].push_back(y), g1[y].push_back(x);
        &amp;#125;
        bool flag = 1;
        int now = 0, cnt = 0;
        std::vector&amp;lt;int&amp;gt; st, dfn(n + 1), low(n + 1), col(n + 1), diff(n + 1);
        std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
            st.push_back(x);
            dfn[x] = low[x] = ++now;
            for (auto i : g1[x])
                if (!dfn[i]) &amp;#123;
                    // printf(&amp;quot;x = %d, %d -&amp;gt; %d\n&amp;quot;, x, x, i);
                    DFS(i, x);
                    diff[x] += diff[i];
                    // printf(&amp;quot;x = %d, diff[%d] += diff[%d]\n&amp;quot;, x, x, i);
                    low[x] = std::min(low[x], low[i]);
                &amp;#125;
                else if (i != fa &amp;amp;&amp;amp; dfn[i] &amp;lt; dfn[x]) &amp;#123;
                    low[x] = std::min(low[x], dfn[i]);
                    ++diff[x], --diff[i];
                    // printf(&amp;quot;x = %d, ++diff[%d], --diff[%d]\n&amp;quot;, x, x, i);
                &amp;#125;
            if (diff[x] &amp;gt;= 2)
                flag = 0;
            // printf(&amp;quot;x = %d, diff[%d] = %d\n&amp;quot;, x, x, diff[x]);
            if (low[x] == dfn[x]) &amp;#123;
                ++cnt;
                for (int p = -1; p != x; ) &amp;#123;
                    p = st.back(), st.pop_back();
                    col[p] = cnt;
                &amp;#125;
            &amp;#125;
            return;
        &amp;#125;;
        DFS(1, -1);
        if (!flag) &amp;#123;
            std::cout &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            continue;
        &amp;#125;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            for (auto j : g1[i])
                if (col[i] != col[j])
                    g[i].push_back(j);
        std::vector&amp;lt;long long&amp;gt; f(n + 1), dp(n + 1);
        dp[0] = 1ll, dp[1] = 1ll;
        for (int i = 2; i &amp;lt;= n; ++i)
            dp[i] = (dp[i - 1] + (i - 1) * dp[i - 2]) % mod;
        std::vector&amp;lt;int&amp;gt; tag(n + 1);
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            f[x] = 1ll, tag[x] = 1;
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    DFS(i, x);
                    (f[x] *= f[i]) %= mod;
                &amp;#125;
            (f[x] *= dp[(int)g[x].size()]) %= mod;
            return;
        &amp;#125;;
        auto res(1ll);
        for (int i = 1; i &amp;lt;= n; ++i)
            if (!tag[i])
                DFS(i, -1), (res *= f[i]) %= mod;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;E. Many Minimizations 是数学题，跳了。&lt;/p&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;无名题&#34;&gt;无名题&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;背景：给定 &lt;span class=&#34;math inline&#34;&gt;\(n,k\)&lt;/span&gt;，对于 &lt;span class=&#34;math inline&#34;&gt;\(\forall\, 1\le i\le n\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(a_i=i\bmod k\)&lt;/span&gt;，问一共有多少个本质不同的子序列？对于 &lt;span class=&#34;math inline&#34;&gt;\(k=1,2,\cdots,n\)&lt;/span&gt; 分别求出答案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;maimai&#34;&gt;maimai&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/66112/F&#34; class=&#34;uri&#34;&gt;https://ac.nowcoder.com/acm/contest/66112/F&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="字典树" />
        <category term="字符串" />
        <category term="组合数学" />
        <category term="支配对" />
        <updated>2025-08-09T04:33:17.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250202/</id>
        <title>学习笔记：后缀数组</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250202/"/>
        <content type="html">&lt;p&gt;非常后知后觉地意识到 SA(Suffix Array) 和 SAM(Suffix Automaton) 的 A 不是同一个 A &lt;img src=&#34;/em/fad.gif&#34; /&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;显而易见一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的字符串中有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个长度分别为 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 的后缀，如果我们对其按字典序排序，分别存储下排名 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的后缀 &lt;span class=&#34;math inline&#34;&gt;\(sa_i\)&lt;/span&gt; 和每个后缀 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的排名 &lt;span class=&#34;math inline&#34;&gt;\(rk_i\)&lt;/span&gt;。虽然看着挺没头没尾的，但是很有用。&lt;/p&gt;
&lt;h2 id=&#34;求解&#34;&gt;求解&lt;/h2&gt;
&lt;h3 id=&#34;哈希-排序&#34;&gt;哈希 + 排序&lt;/h3&gt;
&lt;p&gt;直接把所有后缀拿来排序的话，字符串比较是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的。如果我们用哈希 + 二分优化比较过程，就可以把整个排序优化到 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2 n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;倍增&#34;&gt;倍增&lt;/h3&gt;
&lt;p&gt;先对所有后缀按 &lt;strong&gt;第一个字符&lt;/strong&gt; 排序，记排序后排名序列为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么怎么按 &lt;strong&gt;前两个字符&lt;/strong&gt; 排序呢？对于第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 组字符，我们用 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_{i+1})\)&lt;/span&gt; 双关键字排序即可。记此时排名序列为 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;，那么如果需要按照前四个字符排序，用 &lt;span class=&#34;math inline&#34;&gt;\((b_i,b_{i+2})\)&lt;/span&gt; 进行双关键字排序即可。总共需要进行 &lt;span class=&#34;math inline&#34;&gt;\(\log n\)&lt;/span&gt; 次排序。复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;此时我们注意到排名数组的值域为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，那么我们用桶排就能少一个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;哈希很好实现，这里就按下不表，主要讲解倍增法的实现。&lt;/p&gt;
&lt;p&gt;描述起来很简单，实现起来很要命。OI wiki 上的实现算是相对好理解的：&lt;/p&gt;
&lt;p&gt;首先了解双关键字桶排的方法，首先用单关键字桶排完成对 &lt;strong&gt;第二关键字&lt;/strong&gt; 的排序；对于第一关键字，令桶 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 记录前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个元素的数量；遍历排序后的第二关键字数组，将元素放到桶中记录数值对应的下标中，并将桶中数值 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;。实际上桶 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 充当计算下标范围的作用，&lt;span class=&#34;math inline&#34;&gt;\((c_{i-1},c_i]\)&lt;/span&gt; 即为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 分布的范围。&lt;/p&gt;
&lt;p&gt;显然，当且仅当排名种类为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，即没有并列排名时，排序完成。设本轮区间长度为 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;，对于一轮操作：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;计算每个区间按后半段 &lt;span class=&#34;math inline&#34;&gt;\(\frac w2\)&lt;/span&gt; 长度字符排序的结果：&lt;span class=&#34;math inline&#34;&gt;\((n-w,n]\)&lt;/span&gt; 开头的区间后半段均为空，直接放在序列首端；接着按照上一轮 &lt;span class=&#34;math inline&#34;&gt;\(sa\)&lt;/span&gt; 结果，把能够作为后半段的元素依次放入。&lt;/li&gt;
&lt;li&gt;依照上一轮的 &lt;span class=&#34;math inline&#34;&gt;\(rk\)&lt;/span&gt; 作为前半段排名，进行双关键字桶排。&lt;/li&gt;
&lt;li&gt;依照 &lt;span class=&#34;math inline&#34;&gt;\(sa\)&lt;/span&gt; 和第二关键字（处理并列），求出 &lt;span class=&#34;math inline&#34;&gt;\(rk\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;std::vector&amp;lt;int&amp;gt; la(n + 2);
std::copy(s.begin(), s.end(), rk.begin());
int m = 128;
&amp;#123;
    std::vector&amp;lt;int&amp;gt; c(m + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        ++c[rk[i]];
    std::partial_sum(c.begin(), c.end(), c.begin());
    for (int i = n; i; --i)
        sa[c[rk[i]]--] = i;
&amp;#125; 
for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
    std::vector&amp;lt;int&amp;gt; id(1);
    for (int i = n - w + 1; i &amp;lt;= n; ++i)
        id.push_back(i);
    for (int i = 1; i &amp;lt;= n; ++i)
        if (sa[i] &amp;gt; w)
            id.push_back(sa[i] - w);
    std::vector&amp;lt;int&amp;gt; c(m + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        ++c[rk[i]];
    std::partial_sum(c.begin(), c.end(), c.begin());
    for (int i = n; i; --i)
        sa[c[rk[id[i]]]--] = id[i];
    p = 0;
    std::copy(rk.begin(), rk.end(), la.begin());
    for (int i = 1; i &amp;lt;= n; ++i)
        if (la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
            rk[sa[i]] = p;
        else
            rk[sa[i]] = ++p;
    if (p == n)
        break;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;纯-sa-的应用&#34;&gt;纯 SA 的应用&lt;/h2&gt;
&lt;h3 id=&#34;最小表示法&#34;&gt;最小表示法&lt;/h3&gt;
&lt;p&gt;模板：&lt;a href=&#34;https://www.luogu.com.cn/problem/P1368&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1368&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;对于循环位移相关要求，首先考虑将字符串重复一遍。&lt;/p&gt;
&lt;p&gt;在 &lt;span class=&#34;math inline&#34;&gt;\(ss\)&lt;/span&gt; 中找到排名第一个 &lt;span class=&#34;math inline&#34;&gt;\(sa_i\le n\)&lt;/span&gt; 即为答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; s(2 * n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; s[i], s[n + i] = s[i];
    std::vector&amp;lt;int&amp;gt; sa(2 * n + 1), rk(s);
    &amp;#123;
        int m = 29;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= 2 * n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = 2 * n; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(1);
            for (int i = 2 * n - w + 1; i &amp;lt;= 2 * n; ++i)
                id.push_back(i);
            for (int i = 1; i &amp;lt;= 2 * n; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= 2 * n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = 2 * n; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            auto la(rk);
            p = 0;
            for (int i = 1; i &amp;lt;= 2 * n; ++i)
                if (i != 1 &amp;amp;&amp;amp; la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == 2 * n)
                break;
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= 2 * n; ++i)
        if (sa[i] &amp;lt;= n) &amp;#123;
            for (int j = sa[i]; j &amp;lt; n + sa[i]; ++j)
                std::cout &amp;lt;&amp;lt; s[j] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
            std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            break;
        &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;字符串匹配&#34;&gt;字符串匹配&lt;/h3&gt;
&lt;p&gt;二分，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(|S|\log |T|)\)&lt;/span&gt;。求出现次数则二分左右边界。&lt;/p&gt;
&lt;p&gt;太麻烦了且没有实际应用价值，代码略。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;height-数组&#34;&gt;height 数组&lt;/h2&gt;
&lt;p&gt;定义 &lt;span class=&#34;math inline&#34;&gt;\(h_i=\text {lcp}(sa_i, sa_i-1)\)&lt;/span&gt;，特别地，&lt;span class=&#34;math inline&#34;&gt;\(h_1=0\)&lt;/span&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有引理：&lt;span class=&#34;math inline&#34;&gt;\(h_{rk_i}\ge h_{rk_{i-1}}-1\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设已经求出 &lt;span class=&#34;math inline&#34;&gt;\(h_{rk_{i-1}}\)&lt;/span&gt;，那么可以从 &lt;span class=&#34;math inline&#34;&gt;\(h_{rk_{i-1}}-1\)&lt;/span&gt; 出发暴力看下一个字符是否相等得到答案。那么我们会发现从前往后 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 值每次最多 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，所以复杂度摊下来是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;记住记住一定是 &lt;span class=&#34;math inline&#34;&gt;\(rk_{i-1}\)&lt;/span&gt; 而不是下意识的 &lt;span class=&#34;math inline&#34;&gt;\(rk_i-1\)&lt;/span&gt;！！！&lt;/mark&gt;所以为了保证求解顺序循环枚举的一定是下标而非排名。但是注意定义却是和 &lt;span class=&#34;math inline&#34;&gt;\(rk_i-1\)&lt;/span&gt; 的 lcp！！！所以求 height 的写法是相对固定的，不能觉得好像是对的就随便乱改。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;height-数组的应用&#34;&gt;height 数组的应用&lt;/h2&gt;
&lt;p&gt;相当于背板子，因为应用太多且形式大多固定。&lt;/p&gt;
&lt;h3 id=&#34;求任意两个后缀的-lcp&#34;&gt;求任意两个后缀的 lcp&lt;/h3&gt;
&lt;p&gt;易得 &lt;span class=&#34;math inline&#34;&gt;\(\text{lcp}(sa_i, sa_j)=\min\{h_{i+1}, \cdots, h_j\}\)&lt;/span&gt;。&lt;strong&gt;故应将一些复杂 lcp 问题的解决方式和 RMQ 联系起来&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;子串大小关系&#34;&gt;子串大小关系&lt;/h3&gt;
&lt;p&gt;即比较 &lt;span class=&#34;math inline&#34;&gt;\(S_{l_1, r_1}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(S_{l_2, r_2}\)&lt;/span&gt; 的大小关系。比较导致 lcp 不能继续延伸的元素大小即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;本质不同子串数量&#34;&gt;本质不同子串数量&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;子串等价于「后缀的前缀」&lt;/strong&gt;。按顺序枚举每个后缀，减去和已枚举的所有后缀的 lcp 即可。鉴于 &lt;span class=&#34;math inline&#34;&gt;\(\min\{h_{j+1},\cdots,h_i\}\)&lt;/span&gt; 单调不减，直接减去 &lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;最后答案即为 &lt;span class=&#34;math inline&#34;&gt;\(\frac {n(n-1)}2 - \sum\limits_{i=2}^nh_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;至少出现-k-次子串的最大长度&#34;&gt;至少出现 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次子串的最大长度&lt;/h3&gt;
&lt;p&gt;模板：&lt;a href=&#34;https://www.luogu.com.cn/problem/P2852&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2852&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;出现 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次 &lt;span class=&#34;math inline&#34;&gt;\(\iff\)&lt;/span&gt; 在后缀数组中连续出现 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次 &lt;span class=&#34;math inline&#34;&gt;\(\iff\)&lt;/span&gt; 是任意连续 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 的最小值，需要最大化该最小值，考虑滑动窗口。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P2852_7.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k, --k;
    std::vector&amp;lt;int&amp;gt; s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; s[i];
    std::vector&amp;lt;int&amp;gt; sa(n + 1), rk(s), h(n + 1);
    &amp;#123;
        int m = 1000001;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(1);
            for (int i = n - w + 1; i &amp;lt;= n; ++i)
                id.push_back(i);
            for (int i = 1; i &amp;lt;= n; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            auto la(rk);
            p = 0;
            for (int i = 1; i &amp;lt;= n; ++i)
                if (i != 1 &amp;amp;&amp;amp; la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n; ++i)
            if (rk[i]) &amp;#123;
                for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
                h[rk[i]] = to;
            &amp;#125;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; q(n + 1);
    int res = 0;
    for (int i = 1, l = 1, r = 0; i &amp;lt;= n; ++i) &amp;#123;
        // printf(&amp;quot;%d\n&amp;quot;, h[i]);
        for (; l &amp;lt;= r &amp;amp;&amp;amp; i - q[l] &amp;gt;= k; ++l);
        for (; l &amp;lt;= r &amp;amp;&amp;amp; h[i] &amp;lt;= h[q[r]]; --r);
        q[++r] = i;
        if (i &amp;gt;= k)
            res = std::max(res, h[q[l]]);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;最长不重叠多次出现子串&#34;&gt;最长不重叠多次出现子串&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;bb：定式太多太杂以至于让人怀疑某些定式是否存在应用场景&lt;/del&gt; &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现满足单调性，二分子串长度 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt;，那么显然 &lt;span class=&#34;math inline&#34;&gt;\(\text {lcp}\ge len\)&lt;/span&gt;；将 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 划分为连续 &lt;span class=&#34;math inline&#34;&gt;\(\ge len\)&lt;/span&gt; 的段，在每段内找到下标极差与 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 比较即可。&lt;/p&gt;
&lt;p&gt;也可以用于判定是否存在不重叠多次出现子串。&lt;/p&gt;
&lt;p&gt;甚至可以考虑限制至少出现次数为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，那大概多个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;，看看一段里有没有 &lt;span class=&#34;math inline&#34;&gt;\(\ge k\)&lt;/span&gt; 个相互相差 &lt;span class=&#34;math inline&#34;&gt;\(\ge len\)&lt;/span&gt; 的。排序贪心求解。&lt;/p&gt;
&lt;p&gt;那么上面的至少出现 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次子串也可以用这个方法来解，但是多个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 没必要。&lt;/p&gt;
&lt;p&gt;也可以限制多次出现但长度至少为 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt;，那甚至少了二分的 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;，直接跑一遍 check 即可。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;？？？到底为什么会有这么多奇怪的定式，是因为真的有题这么出吗？？？&lt;/del&gt; &lt;img src=&#34;/em/oh.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;最长公共子串问题&#34;&gt;最长公共子串问题&lt;/h3&gt;
&lt;p&gt;求 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的最长公共子串（注意不是 LCS）。设 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 长为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 长为 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;，那么将 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 拼接，答案就是 &lt;span class=&#34;math inline&#34;&gt;\(\max \{\text{lcp}(i,j)\},i\le n&amp;lt;j\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但这里不直接枚举 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，还是照例先从 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 下手再卡条件，若 &lt;span class=&#34;math inline&#34;&gt;\(sa_{i-1}\le n&amp;lt;sa_{i}\)&lt;/span&gt;（或者反过来），就可以用 &lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt; 更新答案。容易证明这样总可以找到最大值。&lt;/p&gt;
&lt;h4 id=&#34;eg1.-找相同字符&#34;&gt;eg1. 找相同字符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3181&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3181&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要求方案数，那么答案为 &lt;span class=&#34;math inline&#34;&gt;\(\text{lcp}(i,j),i\le n&amp;lt;j\)&lt;/span&gt;。（我已经帮你们试过了容斥比直接做更麻烦），考虑用单调栈维护左 / 右侧区间 lcp 求解右 / 左侧答案。关于单调栈的描述可见 &lt;a href=&#34;#结合单调栈&#34;&gt;本页后部内容&lt;/a&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, n1;
    std::string s, t;
    std::cin &amp;gt;&amp;gt; s &amp;gt;&amp;gt; t;
    n = (int)s.length(), n1 = n + (int)t.length() + 1;
    s = &amp;quot;#&amp;quot; + s + &amp;quot;$&amp;quot; + t;
    std::vector&amp;lt;int&amp;gt; sa(n1 + 1), rk(n1 + 1), h(n1 + 1);
    &amp;#123;
        std::copy(s.begin() + 1, s.end(), rk.begin() + 1);
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(w + 1);
            std::iota(id.begin() + 1, id.end(), n1 - w + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            auto la(rk);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (i != 1 &amp;amp;&amp;amp; la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n1)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n1; ++i) &amp;#123;
            for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
            h[rk[i]] = to;
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;std::pair&amp;lt;int, long long&amp;gt; &amp;gt; q1, q2;
    std::vector&amp;lt;int&amp;gt; tot1(n1 + 1), tot2(n1 + 1);
    for (int i = 1; i &amp;lt;= n1; ++i) &amp;#123;
        tot1[i] = tot1[i - 1] + (sa[i] &amp;lt;= n);
        tot2[i] = tot2[i - 1] + (sa[i] &amp;gt; n + 1);
    &amp;#125;
    long long res = 0ll;
    q1.emplace_back(1, 0ll), q2.emplace_back(1, 0ll);
    for (int i = 1; i &amp;lt;= n1; ++i) &amp;#123;
        for (; !q1.empty() &amp;amp;&amp;amp; h[i] &amp;lt; h[q1.back().first]; q1.pop_back());
        q1.emplace_back(i, (tot1[i - 1] - tot1[q1.back().first - 1]) * h[i] + q1.back().second);
        if (sa[i] &amp;gt; n + 1)
            res += q1.back().second;
        for (; !q2.empty() &amp;amp;&amp;amp; h[i] &amp;lt; h[q2.back().first]; q2.pop_back());
        q2.emplace_back(i, (tot2[i - 1] - tot2[q2.back().first - 1]) * h[i] + q2.back().second);
        if (sa[i] &amp;lt;= n)
            res += q2.back().second;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&#34;eg2.-公共串&#34;&gt;eg2. 公共串&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5546&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5546&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要求多串最长公共子串，仍然考虑将多个串拼在一起。仿照前面二分的方式处理，问题转化为找到最长的 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt;，使得存在一段最小值 &lt;span class=&#34;math inline&#34;&gt;\(\ge len\)&lt;/span&gt; 的区间，其覆盖了 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 段串。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, l = 0, r = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::string s;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; lim(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t;
        lim[i] = &amp;#123; (int)s.length() + 1, s.length() + t.length() &amp;#125;;
        s += &amp;quot;#&amp;quot; + t;
        r = std::max(r, (int)t.length());
        // printf(&amp;quot;[%d, %d]\n&amp;quot;, lim[i].first, lim[i].second);
    &amp;#125;
    int n1 = lim.back().second;
    std::vector&amp;lt;int&amp;gt; sa(n1 + 1), rk(n1 + 1), h(n1 + 1);
    &amp;#123;
        std::copy(s.begin() + 1, s.end(), rk.begin() + 1);
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(w + 1);
            std::iota(id.begin() + 1, id.end(), n1 - w + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            auto la(rk);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (i != 1 &amp;amp;&amp;amp; la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n1)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n1; ++i) &amp;#123;
            for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
            h[rk[i]] = to;
        &amp;#125;
    &amp;#125;
    // for (int i = 1; i &amp;lt;= n1; ++i)
    //     printf(&amp;quot;h[%d] = %d\n&amp;quot;, sa[i], h[i]);
    int res = 0;
    auto check = [&amp;amp;](int len) &amp;#123;
        // printf(&amp;quot;check %d: \n&amp;quot;, len);
        std::vector&amp;lt;int&amp;gt; cnt(n + 1);
        for (int i = 1; i &amp;lt;= n1; ++i) &amp;#123;
            if (h[i] &amp;lt; len) &amp;#123;
                if (*std::min_element(cnt.begin() + 1, cnt.end()))
                    return 1;
                cnt.assign(n + 1, 0);
            &amp;#125;
            else
                for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                    if (lim[j].first &amp;lt;= sa[i - 1] &amp;amp;&amp;amp; sa[i - 1] &amp;lt;= lim[j].second)
                        cnt[j] = 1;
                    if (lim[j].first &amp;lt;= sa[i] &amp;amp;&amp;amp; sa[i] &amp;lt;= lim[j].second)
                        cnt[j] = 1;
                &amp;#125;
        &amp;#125;
        // printf(&amp;quot;\n%d\n&amp;quot;, *std::min_element(cnt.begin() + 1, cnt.end()));
        return *std::min_element(cnt.begin() + 1, cnt.end());
    &amp;#125;;
    for (int mid; l &amp;lt;= r; ) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        if (check(mid))
            l = mid + 1, res = mid;
        else
            r = mid - 1;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;但是看了题解发现居然还有线性做法（当然不看建 SA 的 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;），对于覆盖全部 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 段串找区间最小值，发现需要最小化区间，考虑双指针。&lt;/p&gt;
&lt;p&gt;区间最小值用单调队列求解，细想可能会觉得不太对劲，但是容易证明答案不大于队首且不小于最大队首，所以最大队首就是答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, l = 0, r = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::string s;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; lim(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t;
        lim[i] = &amp;#123; (int)s.length() + 1, s.length() + t.length() &amp;#125;;
        s += (char)(&amp;#39;A&amp;#39; + i - 1) + t;
        r = std::max(r, (int)t.length());
    &amp;#125;
    int n1 = lim.back().second;
    std::vector&amp;lt;int&amp;gt; sa(n1 + 1), rk(n1 + 1), h(n1 + 1);
    &amp;#123;
        std::copy(s.begin() + 1, s.end(), rk.begin() + 1);
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(w + 1);
            std::iota(id.begin() + 1, id.end(), n1 - w + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            auto la(rk);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (i != 1 &amp;amp;&amp;amp; la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n1)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n1; ++i) &amp;#123;
            for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
            h[rk[i]] = to;
        &amp;#125;
    &amp;#125;
    int res = 0;
    std::vector&amp;lt;int&amp;gt; q(n1 + 1), cnt(n + 1);
    // for (int i = 1; i &amp;lt;= n1; ++i)
    //     printf(&amp;quot;%d: %d\n&amp;quot;, sa[i], h[i]);
    for (int l = 1, r = 0, ql = 1, qr = 0; l &amp;lt;= n1; ++l) &amp;#123;
        for (; r &amp;lt; n1 &amp;amp;&amp;amp; !*std::min_element(cnt.begin() + 1, cnt.end()); ) &amp;#123;
            ++r;
            for (int i = 1; i &amp;lt;= n; ++i)
                if (lim[i].first &amp;lt;= sa[r] &amp;amp;&amp;amp; sa[r] &amp;lt;= lim[i].second) &amp;#123;
                    ++cnt[i];
                    break;
                &amp;#125;
            for (; ql &amp;lt;= qr &amp;amp;&amp;amp; h[r] &amp;lt;= h[q[qr]]; --qr);
            q[++qr] = r;
        &amp;#125;
        if (*std::min_element(cnt.begin() + 1, cnt.end())) &amp;#123;
            // printf(&amp;quot;[%d, %d]: %d\n&amp;quot;, l, r, h[q[ql]]);
            res = std::max(res, h[q[ql]]);
        &amp;#125;
        for (; ql &amp;lt;= qr &amp;amp;&amp;amp; q[ql] &amp;lt;= l; ++ql);
        if (l != 1) &amp;#123;
            for (int i = 1; i &amp;lt;= n; ++i)
                if (lim[i].first &amp;lt;= sa[l - 1] &amp;amp;&amp;amp; sa[l - 1] &amp;lt;= lim[i].second) &amp;#123;
                    --cnt[i];
                    break;
                &amp;#125;
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;texttt-aa-式子串处理&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(\texttt {AA}\)&lt;/span&gt; 式子串处理&lt;/h3&gt;
&lt;p&gt;即对于连续相同子串问题的处理，有一个定的思路，由例题分析。&lt;/p&gt;
&lt;h4 id=&#34;eg1.-优秀的拆分&#34;&gt;eg1. 优秀的拆分&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1117&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1117&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还是从中间分开，按前后分别处理。这里有个 trick，我们枚举 &lt;span class=&#34;math inline&#34;&gt;\(\texttt B\)&lt;/span&gt; 的长度 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中每隔 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 打一个标记。那么显然，任意一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(2\times len\)&lt;/span&gt; 的子串都会经过恰好两个标记（充分的），这样就可以筛选出所有可能的串。&lt;/p&gt;
&lt;p&gt;我们枚举所有连续两个标记（总复杂度为调和级数），求它们对应后缀的 lcp 和对应前缀的 lcs（翻转求 SA 即可），如果二者加起来 &lt;span class=&#34;math inline&#34;&gt;\(\ge len\)&lt;/span&gt; 就说明存在这样的 &lt;span class=&#34;math inline&#34;&gt;\(\texttt {AA}\)&lt;/span&gt;。在 &lt;span class=&#34;math inline&#34;&gt;\(\text {lcs}+\text {lcp}\)&lt;/span&gt; 中任取 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 长度即为一对 &lt;span class=&#34;math inline&#34;&gt;\(\texttt {AA}\)&lt;/span&gt;。用差分给可能的起点和终点区间加即可。&lt;/p&gt;
&lt;p&gt;小细节：lcp 和 lcs 均需要对 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 取 &lt;span class=&#34;math inline&#34;&gt;\(\min\)&lt;/span&gt;，否则取到的串可能不会经过当前选中的两个标记。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
class SA &amp;#123;
public:
    std::vector&amp;lt;int&amp;gt; sa, rk, h;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;  &amp;gt; st;
    SA(int n, std::string s): sa(n + 1), rk(n + 2), h(n + 1), st(20, std::vector&amp;lt;int&amp;gt; (n + 1)) &amp;#123;
        std::vector&amp;lt;int&amp;gt; la(n + 2);
        std::copy(s.begin(), s.end(), rk.begin());
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(1);
            for (int i = n - w + 1; i &amp;lt;= n; ++i)
                id.push_back(i);
            for (int i = 1; i &amp;lt;= n; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            std::copy(rk.begin(), rk.end(), la.begin());
            for (int i = 1; i &amp;lt;= n; ++i)
                if (la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n; ++i)
            if (rk[i]) &amp;#123;
                for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
                h[rk[i]] = to;
            &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i)
            st[0][i] = h[i];
        for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
            for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
                st[j][i] = std::min(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
        rk.emplace_back();
        return;
    &amp;#125;
private:
    int ask(int l, int r) &amp;#123;
        // fprintf(stderr, &amp;quot;l = %d, r = %d\n&amp;quot;, l, r);
        int k = std::__lg(r - l + 1);
        return std::min(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
    &amp;#125;
public:
    int lcp(int l, int r) &amp;#123;
        return ask(std::min(rk[l], rk[r]) + 1, std::max(rk[l], rk[r]));
    &amp;#125;
&amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        std::string s;
        std::cin &amp;gt;&amp;gt; s;
        int n = (int)s.length();
        s = &amp;quot;#&amp;quot; + s;
        SA p(n, s);
        std::reverse(s.begin() + 1, s.end());
        SA q(n, s);
        std::vector&amp;lt;int&amp;gt; f(n + 2), g(n + 2);
        for (int len = 1; len &amp;lt;= n / 2; ++len)
            for (int i = len; i + len &amp;lt;= n; i += len) &amp;#123;
                int l = i, r = i + len, lcp = std::min(len, p.lcp(l, r)), lcs = std::min(len - 1, q.lcp(n - l + 2, n - r + 2));
                if (lcp + lcs &amp;gt;= len) &amp;#123;
                    int t = lcp + lcs - len + 1;
                    // fprintf(stderr, &amp;quot;(%d, %d), %d, %d\n&amp;quot;, l, r, lcp, lcs);
                    ++g[l - lcs], --g[l - lcs + t], ++f[r + lcp - t], --f[r + lcp];
                &amp;#125;
            &amp;#125;
        std::partial_sum(f.begin(), f.end(), f.begin());
        std::partial_sum(g.begin(), g.end(), g.begin());
        long long res = 0ll;
        for (int i = 1; i &amp;lt; n; ++i)
            res += (long long)f[i] * g[i + 1];
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;eg2.-tandem&#34;&gt;eg2. tandem&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codechef.com/problems/TANDEM&#34; class=&#34;uri&#34;&gt;https://www.codechef.com/problems/TANDEM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意到多了一个限制，前一个好处理，找到经过 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 个标记的串即可。对于后一个限制，画图可以发现对于 interesting ones，每次只会出现最多一个；当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(\text {lcp}&amp;gt;len\)&lt;/span&gt; 时不存在。&lt;/p&gt;
&lt;p&gt;对于 uninteresting ones，用每次能提供的总数减去 interesting ones 的数量即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
class SA &amp;#123;
public:
    std::vector&amp;lt;int&amp;gt; sa, rk, h;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;  &amp;gt; st;
    SA(int n, std::string s): sa(n + 1), rk(n + 2), h(n + 1), st(20, std::vector&amp;lt;int&amp;gt; (n + 1)) &amp;#123;
        std::vector&amp;lt;int&amp;gt; la(n + 2);
        std::copy(s.begin(), s.end(), rk.begin());
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(1);
            for (int i = n - w + 1; i &amp;lt;= n; ++i)
                id.push_back(i);
            for (int i = 1; i &amp;lt;= n; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            std::copy(rk.begin(), rk.end(), la.begin());
            for (int i = 1; i &amp;lt;= n; ++i)
                if (la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n; ++i)
            if (rk[i]) &amp;#123;
                for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
                h[rk[i]] = to;
            &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i)
            st[0][i] = h[i];
        for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
            for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
                st[j][i] = std::min(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
        rk.emplace_back();
        return;
    &amp;#125;
private:
    int ask(int l, int r) &amp;#123;
        // fprintf(stderr, &amp;quot;l = %d, r = %d\n&amp;quot;, l, r);
        int k = std::__lg(r - l + 1);
        return std::min(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
    &amp;#125;
public:
    int lcp(int l, int r) &amp;#123;
        return ask(std::min(rk[l], rk[r]) + 1, std::max(rk[l], rk[r]));
    &amp;#125;
&amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    int n = (int)s.length();
    s = &amp;quot;#&amp;quot; + s;
    SA p(n, s);
    std::reverse(s.begin() + 1, s.end());
    SA q(n, s);
    std::reverse(s.begin() + 1, s.end());
    long long res1 = 0ll, res2 = 0ll;
    for (int len = 1; len &amp;lt;= n; ++len)
        for (int i = len, j = 2 * len, k = 3 * len; k &amp;lt;= n; i += len, j += len, k += len) &amp;#123;
            int lcp = std::min(p.lcp(i, j), p.lcp(j, k)), lcs = std::min(&amp;#123; len - 1, q.lcp(n - i + 2, n - j + 2), q.lcp(n - j + 2, n - k + 2) &amp;#125;);
            if (std::min(len, lcp) + lcs &amp;gt;= len) &amp;#123;
                // printf(&amp;quot;(%d, %d, %d), %d, %d, %d\n&amp;quot;, i, j, k, lcs, lcp, len);
                int t = (lcp &amp;lt;= len);
                res1 += t, res2 += std::min(len, lcp) + lcs - len + 1 - t;
            &amp;#125;
            // else
            //     printf(&amp;quot;# (%d, %d, %d), %d, %d, %d\n&amp;quot;, i, j, k, lcs, lcp, len);
        &amp;#125;
    std::cout &amp;lt;&amp;lt; res1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; res2 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;eg3.-repeats&#34;&gt;eg3. repeats&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.spoj.com/problems/REPEATS/&#34; class=&#34;uri&#34;&gt;https://www.spoj.com/problems/REPEATS/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;重复次数最多，只需经过标记点最多。显然经过标记点的数量就是该字符串长除以 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 向下取整就可以得到重复次数减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的值。&lt;/p&gt;
&lt;p&gt;选择两个连续标记点，对于 lcp 和 lcs（显然此时不需要对 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 取 &lt;span class=&#34;math inline&#34;&gt;\(\min\)&lt;/span&gt;），计算 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {\text{lcp}+\text{lcs}}{len}+1\)&lt;/span&gt; 取最大即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
class SA &amp;#123;
public:
    std::vector&amp;lt;int&amp;gt; sa, rk, h;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;  &amp;gt; st;
    SA(int n, std::string s): sa(n + 1), rk(n + 2), h(n + 1), st(20, std::vector&amp;lt;int&amp;gt; (n + 1)) &amp;#123;
        std::vector&amp;lt;int&amp;gt; la(n + 2);
        std::copy(s.begin(), s.end(), rk.begin());
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(1);
            for (int i = n - w + 1; i &amp;lt;= n; ++i)
                id.push_back(i);
            for (int i = 1; i &amp;lt;= n; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            std::copy(rk.begin(), rk.end(), la.begin());
            for (int i = 1; i &amp;lt;= n; ++i)
                if (la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n; ++i)
            if (rk[i]) &amp;#123;
                for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
                h[rk[i]] = to;
            &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i)
            st[0][i] = h[i];
        for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
            for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
                st[j][i] = std::min(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
        rk.emplace_back();
        return;
    &amp;#125;
private:
    int ask(int l, int r) &amp;#123;
        // fprintf(stderr, &amp;quot;l = %d, r = %d\n&amp;quot;, l, r);
        int k = std::__lg(r - l + 1);
        return std::min(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
    &amp;#125;
public:
    int lcp(int l, int r) &amp;#123;
        return ask(std::min(rk[l], rk[r]) + 1, std::max(rk[l], rk[r]));
    &amp;#125;
&amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        std::string s = &amp;quot;#&amp;quot;;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            char t;
            std::cin &amp;gt;&amp;gt; t;
            s.push_back(t);
        &amp;#125;
        SA p(n, s);
        std::reverse(s.begin() + 1, s.end());
        SA q(n, s);
        int res = 0;
        for (int len = 1; len &amp;lt;= n; ++len)
            for (int i = len, j = 2 * len; j &amp;lt;= n; i += len, j += len) &amp;#123;
                int lcp = p.lcp(i, j), lcs = q.lcp(n - i + 2, n - j + 2);
                if (lcp + lcs &amp;gt;= len)
                    res = std::max(res, (lcp + lcs) / len + 1);
            &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;结合并查集&#34;&gt;结合并查集&lt;/h3&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;结合单调栈&#34;&gt;结合单调栈&lt;/h3&gt;
</content>
        <category term="字符串" />
        <category term="SA" />
        <updated>2025-02-02T00:27:44.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250121/</id>
        <title>技巧：字符串拆分</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250121/"/>
        <content type="html">&lt;p&gt;神刘家在走前体育课上问我听没听过 &lt;em&gt;Die For You - The Weekend&lt;/em&gt;。我让他哼一段，刘家便展示了自己的天籁之音，我理所当然地连旋律都没辨认出来。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;有的时候，对于一个完整的匹配串，我们需要「枚举断点」，分为前半段和后半段分别和模式串匹配解决问题。当然这样的技巧不止局限于字符串，我们在之前的学习中在诸如动态规划等题目中遇到了相似的情景。&lt;/p&gt;
&lt;p&gt;在字符串题目中，一个典型的标志是「模式串的拼接」，将两截模式串拼接到一起，形成的新模式串并不利好我们的处理，我们需要尽量利用已知的模式串。当然我们不会将新模式串重新拆成两半，而是考虑转换，枚举匹配串的断点，将前半段的后缀和后半段的前缀分别匹配。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;一个模板cf1202e-you-are-given-some-strings&#34;&gt;一个模板：CF1202E You Are Given Some Strings…&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1202/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1202/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然对于每种不同拼接需要求解分别的出现次数，但是注意到最后只需要输出 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的总和，所以就可以不再顾及不同拼接方式间的区别。&lt;/p&gt;
&lt;p&gt;枚举匹配串的断点。一个自然的想法是将前后缀与 AC 自动机匹配，但如果逐个放进去显然复杂度起飞。这里就又有一个实现小技巧，我们在原串的 AC 自动机上把原串过一遍，每个位置所在的状态就是这个位置对应后缀可能处在的后缀。&lt;/p&gt;
&lt;p&gt;记录每个状态可能处在的模式串末尾个数，这一点直接在 fail 树上从上到下转移即可。反串同理。&lt;/p&gt;
&lt;p&gt;二者相乘即为答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
struct &amp;#123;
    int T[maxn][26], tot, cnt[maxn], fail[maxn], deg[maxn];
    void ins(std::string &amp;amp;t) &amp;#123;
        int p = 0;
        for (auto i : t) &amp;#123;
            if (!T[p][i - &amp;#39;a&amp;#39;])
                T[p][i - &amp;#39;a&amp;#39;] = ++tot;
            p = T[p][i - &amp;#39;a&amp;#39;];
        &amp;#125;
        ++cnt[p];
        return;
    &amp;#125;
    void bld(void) &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i], cnt[v] += cnt[fail[v]];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
        return;
    &amp;#125;
&amp;#125; p, q;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    int n;
    std::cin &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t;
        p.ins(t);
        std::reverse(t.begin(), t.end());
        q.ins(t);
    &amp;#125;
    p.bld(), q.bld();
    int len = s.length();
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; f(len + 1);
    &amp;#123;
        int u = 0;
        for (int i = 1; i &amp;lt;= len; ++i) &amp;#123;
            u = p.T[u][s[i - 1] - &amp;#39;a&amp;#39;];
            f[i][0] = p.cnt[u];
        &amp;#125;
    &amp;#125;
    &amp;#123;
        int u = 0;
        for (int i = len; i; --i) &amp;#123;
            u = q.T[u][s[i - 1] - &amp;#39;a&amp;#39;];
            f[i][1] = q.cnt[u];
        &amp;#125;
    &amp;#125;
    long long res = 0ll;
    for (int i = 1; i &amp;lt; len; ++i)
        res += (long long)f[i][0] * f[i + 1][1];
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;变式优秀的拆分&#34;&gt;变式：优秀的拆分&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1117&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1117&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="字符串" />
        <updated>2025-01-21T03:47:06.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250120/</id>
        <title>学习笔记：AC 自动机</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250120/"/>
        <content type="html">&lt;p&gt;耳机声音疑似有点小了，用心旷神怡的话来说大致会是「比果蝇↑嗡嗡声还小」。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;？卧槽耳机上居然可以调音量 &lt;img src=&#34;/em/oh.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;前置知识&#34;&gt;前置知识&lt;/h2&gt;
&lt;p&gt;首先可能需要知道专有名词「自动机」的含义。&lt;/p&gt;
&lt;p&gt;大致可以简单理解为，一个 DAG，其中点表示状态，边表示转移。给进去一个字符串之类，就可以在 DAG 上游走，根据最后所处结点，可以得到字符串相关特征。&lt;/p&gt;
&lt;p&gt;这个定义让我们想到了 Trie。事实上，Trie 就是一种相当基础的自动机。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;接下来，让我们复习 KMP 相关概念。&lt;/p&gt;
&lt;p&gt;假想一个场景：你需要求得 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中的出现次数。&lt;/p&gt;
&lt;p&gt;拥有一定题目经验的你，会使用 KMP 求出 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的 &lt;code&gt;next&lt;/code&gt; 数组，令 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 上进行匹配，失配或完全匹配时回到 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 在该处的 &lt;code&gt;next&lt;/code&gt;，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 上的指针始终向右，&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 上的指针如果向右，每次只能移动一位；如果向左，最左移到开头，均摊下来复杂度即为 &lt;span class=&#34;math inline&#34;&gt;\(O(|S| + |T|)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;假如场景变得更复杂：给定 &lt;span class=&#34;math inline&#34;&gt;\(\{T_m\}\)&lt;/span&gt;，你需要求出每个 &lt;span class=&#34;math inline&#34;&gt;\(T_j\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中的出现次数。&lt;/p&gt;
&lt;p&gt;那么如果我们对每个 &lt;span class=&#34;math inline&#34;&gt;\(T_j\)&lt;/span&gt; 进行一次 KMP，复杂度将会上升到 &lt;span class=&#34;math inline&#34;&gt;\(O(m|S|)\)&lt;/span&gt;，难以承受。有没有优化的方法呢？&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ac-自动机的建立&#34;&gt;AC 自动机的建立&lt;/h2&gt;
&lt;p&gt;结合上面的知识，我们下意识想到，能不能将 &lt;span class=&#34;math inline&#34;&gt;\(\{T_m\}\)&lt;/span&gt; 建成一个树状结构，令 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 在其上进行 KMP 呢？&lt;/p&gt;
&lt;p&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(\{T_m\}\)&lt;/span&gt; 全部加入 Trie，由于 &lt;code&gt;next&lt;/code&gt; 只会由更深的点指向更浅的点，似乎从直觉上是有规则的。但随之而来的是一个问题：点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;next&lt;/code&gt; 不一定在 &lt;span class=&#34;math inline&#34;&gt;\(\text{root}\to u\)&lt;/span&gt; 的链上（由于 Trie 的性质，可知指向的点是唯一的）。鉴于这一点不同，我们结合其「失配指针」的定义，将 &lt;code&gt;next&lt;/code&gt; 在 Trie 上的同分异构体唤为 &lt;code&gt;fail&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;考察 Trie 上该 &lt;code&gt;fail&lt;/code&gt; 边的性质。现欲求解 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 指向的 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;，结合 KMP 中 &lt;code&gt;next&lt;/code&gt; 的性质，假设 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的父节点的 &lt;code&gt;fail&lt;/code&gt; 边指向 &lt;span class=&#34;math inline&#34;&gt;\(v&amp;#39;\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的值为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(v&amp;#39;\)&lt;/span&gt; 上有边权相同的边，那么 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 就是该边指向的点。&lt;/li&gt;
&lt;li&gt;否则，前往 &lt;span class=&#34;math inline&#34;&gt;\(v&amp;#39;\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt;，重复以上判定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么就完成了失配的处理。相应地，完全匹配时的跳转应如何处理？直接将 &lt;code&gt;fail&lt;/code&gt; 的儿子全部接到 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下面即可。如果 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 和 &lt;code&gt;fail&lt;/code&gt; 具有同一个边权的边时，保留 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的这条边 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt;，因为 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 必定指向 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 的对应儿子。&lt;/p&gt;
&lt;p&gt;两点结合，我们发现从实现上，可以直接令 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 指向 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 的对应儿子（那么时间复杂度显而易见是 &lt;span class=&#34;math inline&#34;&gt;\(O(26\sum |T|)\)&lt;/span&gt; 的）。&lt;/p&gt;
&lt;p&gt;匹配时，对于每个点和其返回到根的 &lt;code&gt;fail&lt;/code&gt; 链，全部标记。则一个模式串匹配的次数即为被打标记的次数。&lt;/p&gt;
&lt;p&gt;那么可以发现 AC 自动机的本质就是添加了 &lt;code&gt;fail&lt;/code&gt; 边的 Trie。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;那么根据上述要求，我们需要按照深度顺序求得 &lt;code&gt;fail&lt;/code&gt;，考虑 BFS。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;哦哦好神奇复活之后记得啥是 KMP 但忘了啥是 C++ 了。甚至花了一点时间学习怎么创建一个函数？？？&lt;/p&gt;
&lt;p&gt;大家写 AC 自动机 Trie 根节点下标一定要设成 0 啊 &lt;img src=&#34;/em/ll.gif&#34; /&gt; 设成 1 被各种细节坑惨了 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
int T[maxn][26], tot, cnt[maxn], fail[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i], tail[i] = ins(t[i]);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    &amp;#123;
        int p = 0;
        for (auto i : s) &amp;#123;
            p = T[p][i - &amp;#39;a&amp;#39;];
            for (int fa = p; fa; fa = fail[fa])
                ++cnt[fa];
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; cnt[tail[i]] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;肉眼可见该查询方式是极其低效的，故考虑优化跳 &lt;code&gt;fail&lt;/code&gt; 打标记的过程。&lt;/p&gt;
&lt;p&gt;既然自动机结构不变，不如将跳 &lt;code&gt;fail&lt;/code&gt; 的步骤放在最后统一进行。容易在发现 &lt;code&gt;fail&lt;/code&gt; 树上进行拓扑排序转移即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
int T[maxn][26], tot, cnt[maxn], fail[maxn], deg[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i], tail[i] = ins(t[i]);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i], ++deg[T[fail[u]][i]];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    &amp;#123;
        int p = 0;
        for (auto i : s)
            p = T[p][i - &amp;#39;a&amp;#39;], ++cnt[p];
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 1; i &amp;lt;= tot; ++i)
            if (!deg[i])
                q.push(i);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            cnt[fail[u]] += cnt[u];
            if (!--deg[fail[u]])
                q.push(fail[u]);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; cnt[tail[i]] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ac-自动机的应用与识别&#34;&gt;AC 自动机的应用与识别&lt;/h2&gt;
&lt;p&gt;我们知道其最典型的特征是 &lt;strong&gt;多模式串&lt;/strong&gt;、&lt;strong&gt;静态 / 离线&lt;/strong&gt;。当碰到类似特点时，大概率就是 AC 自动机。&lt;/p&gt;
&lt;p&gt;其中，可以设置的难点有：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;字符串难点，和其他字符串题可设置的难点相同。&lt;/li&gt;
&lt;li&gt;fail 树维护，可能结合数据结构、拓扑排序、树形 DP 等考察。&lt;/li&gt;
&lt;li&gt;DP 的设计。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;字符串难点设计&#34;&gt;字符串难点设计&lt;/h2&gt;
&lt;h3 id=&#34;eg.-indie-album&#34;&gt;eg. Indie Album&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1207/G&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1207/G&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目的「可持久化」试图误导我们用操作串建立自动机，但这样就会有一个比较严重的问题，我们没办法求 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的出现次数。&lt;/p&gt;
&lt;p&gt;为了保证答案可求我们仍然在 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 上建立 ACAM。容易发现操作串以 Trie 形式给出，我们可以在遍历 Trie 时同时完成游走，通过回溯完成询问。&lt;/p&gt;
&lt;p&gt;假设当前 DFS 中，遍历到 Trie 树中的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 点和自动机中的 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 状态，那么对于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 点所对应的一个询问串 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，相当于询问经过的所有状态有多少个在 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 引导的 fail 树子树中。我们求出 fail 树的 dfn，用树状数组简单统计即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 4e5 + 5;
std::vector&amp;lt;int&amp;gt; g[maxn], q[maxn];
int fail[maxn], T[maxn][26], tot, bit[maxn], to[maxn][26], cnt[maxn];
int ins(std::string s) &amp;#123;
    int p = 0;
    for (auto i : s) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int lowbit(int x) &amp;#123;
    return x &amp;amp; -x;
&amp;#125;
void add(int x, int v) &amp;#123;
    for (; x &amp;lt;= tot + 1; x += lowbit(x))
        bit[x] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0;
    for (; x; x -= lowbit(x))
        res += bit[x];
    return res;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, now = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; id(n + 1);
    for (int i = 1, op; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            std::cin &amp;gt;&amp;gt; t;
            if (!to[0][t - &amp;#39;a&amp;#39;])
                to[0][t - &amp;#39;a&amp;#39;] = ++now;
            ++cnt[to[0][t - &amp;#39;a&amp;#39;]], id[i] = to[0][t - &amp;#39;a&amp;#39;];
        &amp;#125;
        else &amp;#123;
            int j; 
            std::cin &amp;gt;&amp;gt; j &amp;gt;&amp;gt; t;
            if (!to[id[j]][t - &amp;#39;a&amp;#39;])
                to[id[j]][t - &amp;#39;a&amp;#39;] = ++now;
            ++cnt[to[id[j]][t - &amp;#39;a&amp;#39;]], id[i] = to[id[j]][t - &amp;#39;a&amp;#39;];
        &amp;#125;
    &amp;#125;
    int m;
    std::cin &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; tail(m + 1), res(m + 1);
    for (int i = 1, x; i &amp;lt;= m; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; t, tail[i] = ins(t);
        q[id[x]].push_back(i);
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]), g[0].push_back(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v), g[fail[v]].push_back(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; dfn(tot + 1), rfn(tot + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now;
        // printf(&amp;quot;%d &amp;quot;, x);
        for (auto i : g[x])
            DFS(i);
        rfn[x] = now;
        return;
    &amp;#125;;
    DFS(0);
    std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int u) &amp;#123;
        add(dfn[u], 1);
        for (auto i : q[x])
            res[i] += ask(rfn[tail[i]]) - ask(dfn[tail[i]] - 1);
        for (int i = 0; i &amp;lt; 26; ++i)
            if (to[x][i])
                DFS1(to[x][i], T[u][i]);
        add(dfn[u], -1);
        return;
    &amp;#125;;
    DFS1(0, 0);
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;fail-树的维护&#34;&gt;fail 树的维护&lt;/h2&gt;
&lt;h3 id=&#34;eg.-divljak&#34;&gt;eg. Divljak&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5840&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5840&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;法一把动态问题离线&#34;&gt;法一：把动态问题离线&lt;/h4&gt;
&lt;p&gt;问题相当于将模式串 &lt;span class=&#34;math inline&#34;&gt;\(T:\{P\}\)&lt;/span&gt; 动态化，但我们仍可以无脑离线下来解决问题。&lt;/p&gt;
&lt;p&gt;考虑原本的答案计算过程，即在经过的所有状态及其 fail 链上打标记。现在我们需要离线并区分标记的来源（并且标记类型为布尔值），下意识想到使用线段树维护。&lt;/p&gt;
&lt;p&gt;我们对每个状态建立动态开点线段树，最后拓扑排序时使用线段树合并处理信息。容易证明时间复杂度相较原来多了一个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;理论可行，开始实践&lt;/del&gt; 出题人似乎不是很喜欢线段树选手所以决定剥夺你的 Memory Limit。想要用这种做法通过本题可见 &lt;a href=&#34;https://www.luogu.com.cn/article/jaxk3sno&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/article/jaxk3sno&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;法二转而处理静态问题&#34;&gt;法二：转而处理静态问题&lt;/h4&gt;
&lt;p&gt;注意到题目中的静态的 &lt;span class=&#34;math inline&#34;&gt;\(S_x\)&lt;/span&gt; 比起 &lt;span class=&#34;math inline&#34;&gt;\(T:\{P\}\)&lt;/span&gt; 更适合用来做模式串，我们在 &lt;span class=&#34;math inline&#34;&gt;\(S_x\)&lt;/span&gt; 上构建 AC 自动机，考虑在线解决问题。&lt;/p&gt;
&lt;p&gt;在每次 &lt;code&gt;1&lt;/code&gt; 操作时，更新模式串信息。对于途径的所有状态 &lt;span class=&#34;math inline&#34;&gt;\(\{u\}\)&lt;/span&gt;，考虑更新其所在 fail 链上的信息。&lt;/p&gt;
&lt;p&gt;注意到我们需要修改整条 fail 链上的信息，询问则是询问单点。这个时候可以考虑使用树上差分。&lt;/p&gt;
&lt;p&gt;但是 here comes a problem，我们对于这一整个串只能在整个树上每个点上更新一次。怎么消去相同的影响呢？&lt;/p&gt;
&lt;p&gt;这里实现上我们将经过的点按 fail 树上 dfn 排序，并且对于序列中相邻的两点在其 LCA 上减去一次标记。为什么这是正确的呢？参考虚树，我们只需要让序列中相邻的两个点尽量近就可以保证重复的被删除完毕。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e6 + 5;
int tot, bit[maxn], T[maxn][26], fail[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int lowbit(int x) &amp;#123;
    return x &amp;amp; -x;
&amp;#125;
void add(int x, int v) &amp;#123;
    // printf(&amp;quot;add (%d, %d)\n&amp;quot;, x, v);
    for (; x &amp;lt;= tot + 1; x += lowbit(x))
        bit[x] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0, to = x;
    for (; x; x -= lowbit(x))
        res += bit[x];
    // printf(&amp;quot;ask(%d) = %d\n&amp;quot;, to, res);
    return res;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, q;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t, tail[i] = ins(t);
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(tot + 2);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
        for (int i = 1; i &amp;lt;= tot; ++i)
            g[fail[i] + 1].push_back(i + 1);
    &amp;#125;
    std::vector&amp;lt;std::array&amp;lt;int, 22&amp;gt; &amp;gt; f(tot + 2);
    std::vector&amp;lt;int&amp;gt; dep(tot + 2), dfn(tot + 2), siz(tot + 2);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        siz[x] = 1, dfn[x] = ++now;
        // printf(&amp;quot;%d\n&amp;quot;, x);
        for (auto i : g[x]) &amp;#123;
            dep[i] = dep[x] + 1;
            f[i][0] = x;
            for (int j = 1; j &amp;lt;= 21; ++j)
                f[i][j] = f[f[i][j - 1]][j - 1];
            DFS(i), siz[x] += siz[i];
        &amp;#125;
        return;
    &amp;#125;;
    dep[1] = 1, DFS(1);
    auto askLCA = [&amp;amp;](int x, int y) &amp;#123;
        if (x == y)
            return x;
        if (dep[x] &amp;lt; dep[y])
            std::swap(x, y);
        for (int i = 21; ~i; --i)
            if (dep[f[x][i]] &amp;gt;= dep[y])
                x = f[x][i];
        if (x == y)
            return x;
        for (int i = 21; ~i; --i)
            if (f[x][i] != f[y][i])
                x = f[x][i], y = f[y][i];
        return f[x][0];
    &amp;#125;;
    std::cin &amp;gt;&amp;gt; q;
    for (; q--; ) &amp;#123;
        int op;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            std::string s;
            std::cin &amp;gt;&amp;gt; s;
            int p = 0, len = (int)s.length();
            std::vector&amp;lt;int&amp;gt; id(len + 1);
            for (int i = 1; i &amp;lt;= len; ++i)
                p = T[p][s[i - 1] - &amp;#39;a&amp;#39;], id[i] = p + 1;
            std::sort(id.begin() + 1, id.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
            // for (int i = 1; i &amp;lt;= len; ++i)
            //     printf(&amp;quot;%d &amp;quot;, id[i]);
            // puts(&amp;quot;&amp;quot;);
            for (int i = 1; i &amp;lt;= len; ++i) &amp;#123;
                // printf(&amp;quot;%d %d %d\n&amp;quot;, i, id[i], dfn[id[i]]);
                // assert(0);
                add(dfn[id[i]], 1);
                if (i != 1)
                    add(dfn[askLCA(id[i], id[i - 1])], -1);
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            int x;
            std::cin &amp;gt;&amp;gt; x;
            x = tail[x] + 1;
            std::cout &amp;lt;&amp;lt; ask(dfn[x] + siz[x] - 1) - ask(dfn[x] - 1) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ac-自动机上的-dp&#34;&gt;AC 自动机上的 DP&lt;/h2&gt;
&lt;p&gt;鉴于 AC 自动机的优秀结构与性质，并不经常作为字符串匹配工具出现，其一个应用是作为 DP 的载体。&lt;/p&gt;
&lt;h3 id=&#34;eg1.-l-语言&#34;&gt;eg1. L 语言&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2292&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2292&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们想到要在自动机上匹配，但此时 &lt;code&gt;fail&lt;/code&gt; 作为「断句」的唯一手段（断句的位置在链上当前点深度 - &lt;code&gt;fail&lt;/code&gt; 深度处），不再仅当失配时才能经过。我们考虑朴素的 DP：在经过的每个状态考虑断句，那么这要求断句处是一个单词的结尾，那么此时 &lt;code&gt;fail&lt;/code&gt; 最长匹配长度即可被更新。最后遍历所有单词的末结点，取最大答案。这里的 &lt;code&gt;fail&lt;/code&gt; 其实是 &lt;code&gt;fail&lt;/code&gt; 链上任意一点。&lt;/p&gt;
&lt;p&gt;考虑复杂度。容易发现对于每一个点我们跳了其整条 fail 链，那么复杂度就是最劣 &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 的。考虑优化这个过程至 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;题目里有一个很重要的条件还没有用到：单个单词长度 &lt;span class=&#34;math inline&#34;&gt;\(\le 20\)&lt;/span&gt;，这让我们想到状态压缩。对于每一个状态，记录其断出来单词的可能长度。&lt;/p&gt;
&lt;p&gt;我们在 DAG 上游走的时候记录目前可以断的所有位置，如果其和当前可断出来的长度之交不为空，就可以将此处加入「可以断的所有位置」并更新答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
int T[maxn][26], tot, fail[maxn], len[maxn], dep[maxn], tag[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot, dep[tot] = dep[p] + 1;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    ++tag[p];
    return p;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i], tail[i] = ins(t[i]);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            len[u] = len[fail[u]];
            if (tag[u])
                len[u] |= (1 &amp;lt;&amp;lt; dep[u]);
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    for (; m--; ) &amp;#123;
        std::string s;
        std::cin &amp;gt;&amp;gt; s;
        int p = 0, q = 1, res = 0;
        for (int i = 0; i &amp;lt; (int)s.length(); ++i) &amp;#123;
            p = T[p][s[i] - &amp;#39;a&amp;#39;], q &amp;lt;&amp;lt;= 1;
            if (len[p] &amp;amp; q)
                q |= 1, res = i + 1;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;eg2.-popcount-words&#34;&gt;eg2. Popcount Words&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/gym/103409/problem/H&#34; class=&#34;uri&#34;&gt;https://codeforces.com/gym/103409/problem/H&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;咋上强度了啊。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;先把整个序列写出来，即 &lt;span class=&#34;math inline&#34;&gt;\(w=\texttt{01101001100101}\cdots\)&lt;/span&gt;，尝试进一步探究形式化的规律，可以得到：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_{[0, 2^n), 0}=w_{[0, 2^{n-1}),0}+w_{[0, 2^n), 1}\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(w_{[l, r], 0/1}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 内，原串 / 取反的值。&lt;/li&gt;
&lt;li&gt;对于不以 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 开头的整段，可以从上述规则转化为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 开头的整段。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接着不难想到一种类似线段树的方式，将待求的 &lt;span class=&#34;math inline&#34;&gt;\(w_{[l, r], 0}\)&lt;/span&gt; 分到 &lt;span class=&#34;math inline&#34;&gt;\(O(\log V)\)&lt;/span&gt; 个整段上，那么 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 就可以被 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log V)\)&lt;/span&gt; 个整段（也是 &lt;span class=&#34;math inline&#34;&gt;\(\log V\)&lt;/span&gt; 个本质不同整段）描述。&lt;/p&gt;
&lt;p&gt;我们对 &lt;span class=&#34;math inline&#34;&gt;\({p_m}\)&lt;/span&gt; 建立 AC 自动机，需要知道这 &lt;span class=&#34;math inline&#34;&gt;\(\log V\)&lt;/span&gt; 个整段在每个点上的出现次数。对于自动机上任意状态 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，设 &lt;span class=&#34;math inline&#34;&gt;\(to_{u, n, 0/1}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 经过 &lt;span class=&#34;math inline&#34;&gt;\(w_{[0, 2^n), 0/1}\)&lt;/span&gt; 后到达的点，则可倍增（嘶，这里是不是应该反过来叫分治啊）简单解决。&lt;/p&gt;
&lt;p&gt;那么接下来我们就可以用 &lt;span class=&#34;math inline&#34;&gt;\(to\)&lt;/span&gt; 来进行快速游走了。顺便打个 &lt;span class=&#34;math inline&#34;&gt;\(cnt\)&lt;/span&gt; 记录一下每个 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 作为不同整段的开头被经过的次数。然后做一个 DP，类似于线段树上 &lt;code&gt;pushdown&lt;/code&gt; 的操作把所有整段下放到单点上的单个字符。&lt;/p&gt;
&lt;p&gt;有一说一用 DP 来处理这个东西还挺难想的。可能也是基于前面的倍增吧。最后拓扑排序就行了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;大家数组一定要用 C-style array 啊，&lt;code&gt;std::vector&amp;lt;&amp;gt;&lt;/code&gt; 计算的是申请空间包 MLE 的 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;大家大数组一定要内存连续访问优化啊，TLE &lt;span class=&#34;math inline&#34;&gt;\(\to\)&lt;/span&gt; 100ms 泪目了 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 5e5 + 5;
long long sum[maxn], f[2][30][maxn];
int cnt[2][30][maxn], to[2][30][maxn];
int T[maxn][2], tot, fail[maxn], deg[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;0&amp;#39;])
            T[p][i - &amp;#39;0&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;0&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
void ask(std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;amp;s, int ql, int qr, int l = 0, int r = (1 &amp;lt;&amp;lt; 30) - 1, int len = 30, int v = 0) &amp;#123;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr) &amp;#123;
        s.emplace_back(len, v);
        return;
    &amp;#125;
    int mid = l + (r - l) / 2;
    if (ql &amp;lt;= mid)
        ask(s, ql, qr, l, mid, len - 1, v);
    if (qr &amp;gt; mid)
        ask(s, ql, qr, mid + 1, r, len - 1, v ^ 1);
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; s;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        int l, r;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        ask(s, l, r);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tail(m + 1);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t;
        tail[i] = ins(t);
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 2; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 2; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i], ++deg[T[fail[u]][i]];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    for (int i = 0; i &amp;lt;= tot; ++i)
        to[0][0][i] = T[i][0], to[1][0][i] = T[i][1];
    for (int j = 1; j &amp;lt; 30; ++j)
        for (int i = 0; i &amp;lt;= tot; ++i) &amp;#123;
            to[0][j][i] = to[1][j - 1][to[0][j - 1][i]];
            to[1][j][i] = to[0][j - 1][to[1][j - 1][i]];
        &amp;#125;
    &amp;#123;
        int p = 0;
        for (auto [n, i] : s) &amp;#123;
            // printf(&amp;quot;# %d %d\n&amp;quot;, n, i);
            ++cnt[i][n][p], p = to[i][n][p];
        &amp;#125;
    &amp;#125;
    for (int j = 29; ~j; --j)
        for (int i = 0; i &amp;lt;= tot; ++i) &amp;#123;
            if (j != 29) &amp;#123;
                f[0][j][i] += f[0][j + 1][i];
                f[1][j][i] += f[1][j + 1][i];
                f[0][j][to[1][j][i]] += f[1][j + 1][i];
                f[1][j][to[0][j][i]] += f[0][j + 1][i];
            &amp;#125;
            f[1][j][i] += cnt[1][j][i];
            f[0][j][i] += cnt[0][j][i];
        &amp;#125;
    for (int i = 0; i &amp;lt;= tot; ++i) &amp;#123;
        sum[T[i][0]] += f[0][0][i], sum[T[i][1]] += f[1][0][i];
        // printf(&amp;quot;%d %d\n&amp;quot;, f[i][0][0], f[i][0][1]);
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt;= tot; ++i)
            if (!deg[i])
                q.push(i);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            sum[fail[u]] += sum[u];
            if (!--deg[fail[u]])
                q.push(fail[u]);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; sum[tail[i]] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;eg3.-legen&#34;&gt;eg3. Legen…&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/696/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/696/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先在 fail 树上把每个状态的实际价值计算出来。我们发现匹配串是未知的，也就是我们需要主动决定游走路径。注意到 &lt;span class=&#34;math inline&#34;&gt;\(l=10^{14}\)&lt;/span&gt;，考虑矩阵。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{u, i}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 状态时已经走了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 步，可以得到的最大价值。那么显然有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{v,i+1}=f_{u,i}+s_v.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 是自动机上 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的任意出边。图的大小为 &lt;span class=&#34;math inline&#34;&gt;\(200\)&lt;/span&gt;，可以放到 &lt;span class=&#34;math inline&#34;&gt;\(+\max\)&lt;/span&gt; 矩阵里加速转移。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
const long long inf = 1e18;
int fail[maxn], T[maxn][26], tot;
int ins(std::string s) &amp;#123;
    int p = 0;
    for (auto i : s) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
struct matrix &amp;#123;
    int n, m;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; a;
    matrix(int n1, int m1, long long v = -inf, bool op = 0): n(n1), m(m1), a(n + 1, std::vector&amp;lt;long long&amp;gt; (m + 1, v)) &amp;#123;
        if (op)
            for (int i = 0; i &amp;lt;= n; ++i)
                a[i][i] = 0;
        return;
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; &amp;amp;operator[] (int i) &amp;#123;
        return a[i];
    &amp;#125;
    matrix operator* (matrix &amp;amp;q) const &amp;#123;
        matrix res(n, q.m);
        for (int k = 0; k &amp;lt;= m; ++k)
            for (int i = 0; i &amp;lt;= n; ++i)
                for (int j = 0; j &amp;lt;= q.m; ++j)
                    res[i][j] = std::max(res[i][j], a[i][k] + q[k][j]);
        return res;
    &amp;#125;
    matrix&amp;amp; operator*= (matrix q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
    matrix operator^ (long long q) &amp;#123;
        matrix res(n, n, -inf, 1), x(*this);
        for (; q; q &amp;gt;&amp;gt;= 1, x *= x)
            if (q &amp;amp; 1)
                res *= x;
        return res;
    &amp;#125;
&amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    long long m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; t[i];
        tail[i] = ins(t[i]);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; s(tot + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        s[tail[i]] += a[i];
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]); 
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i], s[v] += s[fail[v]];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    matrix f(0, tot), op(tot, tot);
    f[0][0] = 0;
    for (int i = 0; i &amp;lt;= tot; ++i)
        for (int j = 0; j &amp;lt; 26; ++j)
            op[i][T[i][j]] = s[T[i][j]];
    f *= (op * m);
    std::cout &amp;lt;&amp;lt; *std::max_element(f[0].begin(), f[0].end()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;eg4.-you-are-given-some-strings&#34;&gt;eg4. You Are Given Some Strings…&lt;/h3&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250121/#%E4%B8%80%E4%B8%AA%E6%A8%A1%E6%9D%BFcf1202e-you-are-given-some-strings...&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;
</content>
        <category term="DP" />
        <category term="字符串" />
        <category term="AC 自动机" />
        <updated>2025-01-20T03:21:15.000Z</updated>
    </entry>
</feed>
