{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"数据结构\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20231112/",
            "url": "https://xsc062.netlify.app/20231112/",
            "title": "杂题",
            "date_published": "2023-11-12T08:42:43.000Z",
            "content_html": "<p><a href=\"http://222.180.160.110:61235/contest/4424\">NOIP S</a> &amp; <a href=\"http://222.180.160.110:61235/contest/4423\">周考 16</a> &amp; 杂题。</p>\n<span id=\"more\"></span>\n<hr />\n<h3 id=\"a.-数字游戏\">A. 数字游戏</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4424/problem/1\" class=\"uri\">http://222.180.160.110:61235/contest/4424/problem/1</a></p>\n<details>\n<p><summary>闲话</summary></p>\n<p>一开始忘了怎么做的然后从 Cindy 的做法开始回忆，一边回忆一边写下文，结果发现写着写着变成 wjf 的做法了 /cf</p>\n<p>upd：变成菌的做法了 /cf /cf /cf</p>\n<p>upd：变成 zmq 的做法了，我已经懒得 /cf 了。</p>\n</details>\n<p>题意转化一下，大致就是一个每次往右拓展一位的询问区间，每次查询该询问区间内最大值并拿走之。</p>\n<p>我们先感性地想，对于一个 <strong>很大的值</strong>，它一进入询问范围就会被当场拿走。</p>\n<p>那如果没有被拿走是因为什么呢？因为在前面积存下来的元素中还有比它大的。</p>\n<p>那为什么前面的比它大的元素没有被当场拿走呢？因为在更前面积存下来的有比这个元素大的…… 那么最开始的积存是怎么来的呢？是最初询问区间为 <span class=\"math inline\">\\([1,p_i]\\)</span> 而非 <span class=\"math inline\">\\([1,1]\\)</span> 导致的。</p>\n<p>被积存下的数被拿出来用掉的时刻，就是往后碰到了一个比它小的值，然后顶替掉这个值被用掉。被顶替的就进入积存区。</p>\n<p>所以这个时候我们直接 <strong>模拟</strong> 积存数被用掉的过程。</p>\n<p>对于全序列中的最大值，当场用掉。次大值呢，若它比最大值先进入询问区间，皆大欢喜，当场用掉；又因为最大值不可能被积存，就算它在最大值之后，也可以当场用掉。</p>\n<p>第三大的，就可能进积存区。假设它要出来，首先要满足出来的时间（在进入积存区之后，有点废话），然后如果它一出来就碰到了比它更大的，很不幸，出不来了。但是因为除了最大和次大之外没有元素比它大了，它就可以在剩下的位置里面随便挑——当然是挑最靠前的。后面的和第三大道理就差不多了。</p>\n<p>所以这个时候我们就可以得到一个大致的做法了，我们把元素从大到小排序，顺便记录一下它进入询问范围的时间 <span class=\"math inline\">\\(t\\)</span>。然后我们优先让这个值在 <span class=\"math inline\">\\(t\\)</span> 时刻直接被拿走。那假如 <span class=\"math inline\">\\(t\\)</span> 这个位置已经被更大的元素占领了，就找这之后第一个空位。</p>\n<p>那么这个「第一个空位」怎么找呢？我们用一个初值为 <span class=\"math inline\">\\(1\\)</span> 的 <span class=\"math inline\">\\(pos\\)</span>，对于当场拿走的情况，肯定是不会有冲突的，所以冲突都发生在积存区。积存区又都是从 <span class=\"math inline\">\\(1\\)</span> 开始的，所以我们只需要对于不是当场拿走的情况，把 <span class=\"math inline\">\\(pos\\)</span> 移到距离 <strong>当前值</strong> 最近的空位然后放进去就可以了。因为 <span class=\"math inline\">\\(pos\\)</span> 全程只会右移，摊出来是 <span class=\"math inline\">\\(O(n)\\)</span> 的。</p>\n<p>因为我们只要在最开始排个序，总时间复杂度 <span class=\"math inline\">\\(O(n\\log n + nq)\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 1e5 + 5;\nstruct _ &#123;\n    int x, i;\n    bool operator&lt; (const _ &amp;q) const &#123;\n        return x &gt; q.x;\n    &#125;\n&#125;;\n_ a[maxn];\nint flag[maxn];\nint n, m, p, res, pos;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    freopen(&quot;game.in&quot;, &quot;r&quot;, stdin);\n    freopen(&quot;game.out&quot;, &quot;w&quot;, stdout);\n#endif\n    read(n), read(m);\n    for (int i = 1; i &lt;= n; ++i)\n        read(a[i].x), a[i].i = i;\n    std::sort(a + 1, a + n + 1);\n    while (m--) &#123;\n        read(p), res = 0, pos = 1;\n        for (int i = 1; i &lt;= n; ++i)\n            flag[i] = 0;\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            int id =\n            (a[i].i &lt; p ? 1 : a[i].i - p + 1);\n            if (flag[id]) &#123;\n                while (flag[pos]) ++pos;\n                flag[pos] = i;\n            &#125;\n            else flag[id] = i;\n        &#125;\n        for (int i = 1, j = 1; i &lt;= n; ++i, j = -j) \n            res += j * a[flag[i]].x;\n        print(res, &#39;\\n&#39;);\n    &#125;\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"b.-过河卒ii\">B. 过河卒II</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4424/problem/2\" class=\"uri\">http://222.180.160.110:61235/contest/4424/problem/2</a></p>\n<p>以及 <a href=\"https://www.luogu.com.cn/problem/P6234\">这</a> 是原题。</p>\n<p>读错题了整整 3.5h /youl</p>\n<p>我们接下来把「特殊格子」记为 <code>-</code>，「特殊格子」四个方向相邻的点记作 <code>O</code>，除此之外的点因为没有可能被选到，我们不做讨论。</p>\n<pre class=\"plain\"><code>  -\n- O -\n  -</code></pre>\n<p>对于一个关键点，我们发现找 T 字本身不太方便，所以我们可以把这个转化成在十字里面抠掉一个最小值。</p>\n<p>接下来，我们假设有另一个关键点的十字和这一个的十字有重合并不相邻，那么大抵是形如这个样子的：</p>\n<pre class=\"plain\"><code>  -   -\n- O - O -\n  -   -</code></pre>\n<p>这个时候，我们发现一共有 7 个 <code>-</code>，一共需要 6 个 <code>-</code>，所以我们试着随便抠掉一个。</p>\n<pre class=\"plain\"><code>  X   | -\n- O - | O -\n  -   | -</code></pre>\n<p>我们发现这个时候一定是能找到一个 <strong>确定的</strong> 方案去划分 T 字的。</p>\n<p>所以对于两个 <code>O</code> 的情况，我们抠掉七个 <code>-</code> 当中的最小值即可。</p>\n<p>接下来假设有三个 <code>O</code>，那么会有 10 个 <code>-</code>，但我们需要 9 个，于是抠掉最小值，依然存在一种 <strong>确定的</strong> 方案去划分 T 字。</p>\n<p>不难发现，<span class=\"math inline\">\\(n\\)</span> 彼此影响还不相邻的 <code>O</code> 会带来 <span class=\"math inline\">\\(3\\times n-1\\)</span> 个 <code>-</code>（小学数学计算即可），我们将最小者删除即可得到最大答案。</p>\n<p>推广一下结论，其实是我们对于 <span class=\"math inline\">\\(x\\)</span> 个相互影响的 <code>O</code>（注意这里 <strong>没有强调</strong> 不相邻），删掉一些使得 <code>-</code> 的数量为 <span class=\"math inline\">\\(3x\\)</span>。</p>\n<p>那么我们又知道对于最理想的情况，也就是上面讲到的相互影响又不相邻，<code>-</code> 的个数是 <span class=\"math inline\">\\(3\\times x+1\\)</span>，我们又只能进行抠掉 <code>-</code> 这一个操作。</p>\n<p>所以对于一个 <code>O/-</code> 连通块，要求其 <code>-</code> 的个数要么是 <span class=\"math inline\">\\(3x\\)</span>（不然 <code>-</code> 就不够用了，以及 <code>-</code> 的缺失是相邻的 <code>O</code> 和边界导致的；边界外的 <code>-</code> 肯定是不能算的），要么为 <span class=\"math inline\">\\(3x+1\\)</span>（只用删一个也保证了正确性）。</p>\n<p>所以我们跑一个类 Flood-fill，一边搜一边找最小的 <code>-</code>，还要统计 <code>-</code> 和 <code>O</code> 的总个数，还要计算 <span class=\"math inline\">\\(sum\\)</span>。然后就完了。</p>\n<p>虽然说这个 Flood-fill 没什么技术含量，但是我们要注意只能从 <code>-</code> 出发只能通往 <code>O</code> 而非另一个 <code>-</code>，因为相邻的两个 <code>-</code> 其实是不会互相交叉的相互影响的。</p>\n<p>Flood-fill 带来的总时间复杂度为 <span class=\"math inline\">\\(O(nm)\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxk = 1e6 + 5;\nconst int inf = 0x3f3f3f3f;\nconst int fx[] = &#123; 0, 0, 1, -1 &#125;;\nconst int fy[] = &#123; 1, -1, 0, 0 &#125;;\nint n, m, k, x, y, res;\nint mn, sum, cnt1, cnt2;\nstd::vector&lt;std::vector&lt;int&gt; &gt; a, b, c;\nint min(int x, int y) &#123; return x &lt; y ? x : y; &#125;\nint max(int x, int y) &#123; return x &gt; y ? x : y; &#125;\nvoid DFS(int x, int y) &#123;\n    sum += a[x][y];\n    if (b[x][y] == 1) ++cnt1;\n    else ++cnt2, mn = min(mn, a[x][y]);\n    c[x][y] = 1;\n    for (int i = 0; i &lt; 4; ++i) &#123;\n        int nx = x + fx[i],\n            ny = y + fy[i];\n        if (!nx || !ny || nx &gt; n || ny &gt; m)\n            continue;\n        if (c[nx][ny]) continue;\n        if ((b[x][y] == 1 &amp;&amp; b[nx][ny] == 1)\n         || (b[x][y] == 1 &amp;&amp; b[nx][ny] == 2)\n          || (b[x][y] == 2 &amp;&amp; b[nx][ny] == 1))\n            DFS(nx, ny);\n    &#125;\n    return;\n&#125;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    freopen(&quot;pawn.in&quot;, &quot;r&quot;, stdin);\n    freopen(&quot;pawn.out&quot;, &quot;w&quot;, stdout);\n#endif\n    read(n), read(m);\n    a.push_back(std::vector&lt;int&gt;(m + 1));\n    b.push_back(std::vector&lt;int&gt;(m + 1));\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        a.push_back(std::vector&lt;int&gt;(m + 1));\n        b.push_back(std::vector&lt;int&gt;(m + 1));\n        for (int j = 1; j &lt;= m; ++j)\n            read(a[i][j]);\n    &#125;\n    c = b, read(k);\n    for (int i = 1; i &lt;= k; ++i) &#123;\n        read(x), read(y), ++x, ++y;\n        b[x][y] = 1;\n        if (x + 1 &lt;= n &amp;&amp; !b[x + 1][y]) b[x + 1][y] = 2;\n        if (y + 1 &lt;= m &amp;&amp; !b[x][y + 1]) b[x][y + 1] = 2;\n        if (x - 1 &gt;= 1 &amp;&amp; !b[x - 1][y]) b[x - 1][y] = 2;\n        if (y - 1 &gt;= 1 &amp;&amp; !b[x][y - 1]) b[x][y - 1] = 2;\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= m; ++j) &#123;\n            if (b[i][j] &amp;&amp; !c[i][j]) &#123;\n                mn = inf;\n                cnt1 = cnt2 = sum = 0;\n                DFS(i, j);\n                if (cnt2 == cnt1 * 3) res += sum;\n                else if (cnt2 == cnt1 * 3 + 1) res += sum - mn;\n                else &#123; puts(&quot;No&quot;); return 0; &#125;\n            &#125;\n        &#125;\n    &#125;\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062</code></pre>\n</details>\n<hr />\n<h3 id=\"c.-树图\">C. 树图</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4424/problem/3\" class=\"uri\">http://222.180.160.110:61235/contest/4424/problem/3</a></p>\n<blockquote>\n<p>DJ：你们去打一下动态树 DP 的板子就可以了。</p>\n</blockquote>\n<p>此时无声胜有声。</p>\n<p>这里仅仅介绍一下 40pts 的做法。我们理所当然地想到 DP 一个点染成某种颜色所需的最小代价。</p>\n<p>这里说的染成某种颜色其实不太准确，应该是「代表着」哪种颜色。像 0 可以代表 1 也可以代表 2，1 就只能代表 1，2 也只能代表 2。</p>\n<p>令 <span class=\"math inline\">\\(f_{u,1}\\)</span> 表示以 <span class=\"math inline\">\\(u\\)</span> 为根的子树中不保留颜色 2 的最小代价（代表 1），<span class=\"math inline\">\\(f_{u, 2}\\)</span> 表示以 <span class=\"math inline\">\\(u\\)</span> 为根的子树中不保留颜色 1 的最小代价（代表 2）。</p>\n<p>那么对于颜色已经确定为 <span class=\"math inline\">\\(1\\)</span> 的点 <span class=\"math inline\">\\(u_1\\)</span>，<span class=\"math inline\">\\(f_{u_1,2}=\\inf\\)</span>；对于颜色已经确定为 <span class=\"math inline\">\\(2\\)</span> 的点 <span class=\"math inline\">\\(u_2\\)</span>，<span class=\"math inline\">\\(f_{u_2,1}=\\inf\\)</span>；颜色为 0 的 <span class=\"math inline\">\\(u_0\\)</span> 就不用管。</p>\n<p>然后如果 <span class=\"math inline\">\\(u_1\\)</span> 有一个 2 颜色的儿子 <span class=\"math inline\">\\(v_2\\)</span>，就要切断这条边；反之，如果这个儿子的颜色为 1，就不用切断。</p>\n<p>所以有：</p>\n<p><span class=\"math display\">\\[\nf_{u,c}=\\sum_{v\\in son_u} \\min(f_{v,c},f_{v,3-c}+1)\n\\]</span></p>\n<p>那么就完了。每次询问的时候跑一个完整的树 DP，或者我们也可以发现只用更新 <span class=\"math inline\">\\(u\\)</span> 到目标点这一条链上的 DP 值，然后就可以根据这个做一个并不会实际改进复杂度的优化。</p>\n<p>总体时间复杂度 <span class=\"math inline\">\\(O(nq)\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 1e5 + 5;\nconst int inf = 0x3f3f3f3f;\nint col[maxn];\nint f[maxn][3];\nint n, x, y, q;\nstd::vector&lt;int&gt; g[maxn];\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nvoid DFS(int x, int fa, int to) &#123;\n    f[x][1] = f[x][2] = 0;\n    if (col[x] == 1) f[x][2] = inf;\n    else if (col[x] == 2) f[x][1] = inf;\n    for (auto i : g[x]) &#123;\n        if (i == fa) continue;\n        if (x != to) DFS(i, x, to);\n        f[x][1] += min(f[i][1], f[i][2] + 1);\n        f[x][2] += min(f[i][2], f[i][1] + 1);\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y) &#123;\n    g[x].push_back(y);\n    return;\n&#125;\nint main() &#123;\n#ifdef ONLINE_JUDGE \n    freopen(&quot;diagrams.in&quot;, &quot;r&quot;, stdin);\n    freopen(&quot;diagrams.out&quot;, &quot;w&quot;, stdout);\n#endif\n    read(n);\n    for (int i = 1; i &lt; n; ++i) &#123;\n        read(x), read(y);\n        add(x, y), add(y, x);\n    &#125;\n    read(q);\n    while (q--) &#123;\n        read(x), read(y);\n        col[y] = (x &lt;= 2) ? x : 0;\n        DFS(1, -1, y);\n        print(min(f[1][1], f[1][2]), &#39;\\n&#39;);\n    &#125;\n    return 0;\n&#125;\n&#125; // namespace XSC062</code></pre>\n</details>\n<hr />\n<h3 id=\"e.-字符串-string\">E. 字符串 string</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4423/problem/5\" class=\"uri\">http://222.180.160.110:61235/contest/4423/problem/5</a></p>\n<p>原题：<a href=\"https://codeforces.com/problemset/problem/756/D\">CF756D - Bacterial Melee</a>。</p>\n<details>\n<p><summary>怪话</summary></p>\n<p>兔子：我谴责你。</p>\n<p>我：？</p>\n<p>兔子：为什么你的 last 要缩写成 <code>la</code>。我没看你题解直接看的代码看了半天没看懂。</p>\n<p>我：不缩写成 <code>la</code> 难道要写成 <code>lst</code> 吗？</p>\n<p>兔子：不然呢？</p>\n<p>好吧，大家都是异教徒。</p>\n</details>\n<p>可以很简单的想到，最终字符串一定由原串中的部分字符，按照其在原串中的顺序，经过若干次重复得到。那么我们把一段连续的相同字符视为一个字符，得到的这个串就是原串的一个子序列。</p>\n<p>所以我们只需要求出原串的不同子序列个数，再经过一定的排列组合就可以求出方案数。</p>\n<p>比如，我们知道一个长度为 <span class=\"math inline\">\\(n\\)</span> 的串中有 <span class=\"math inline\">\\(k\\)</span> 个长度为 <span class=\"math inline\">\\(m\\)</span> 的子序列，那么由插板法可得这 <span class=\"math inline\">\\(k\\)</span> 个子序列会贡献 <span class=\"math inline\">\\(C_{n-1}^{m-1}\\times k\\)</span> 的方案数。</p>\n<p>那么不同子序列个数怎么求呢？显而易见需要 DP，规定 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示一个长度为 <span class=\"math inline\">\\(i\\)</span> 的子序列最后一位为 <span class=\"math inline\">\\(s_j\\)</span> 的方案数，就可以直接 <span class=\"math inline\">\\(f_{i,j}=\\sum f_{i-1,k}\\)</span>。</p>\n<p>但这样做有一个问题，就是会重复计算。假如原串中在 <span class=\"math inline\">\\(i\\)</span> 位置有一个 <code>'o'</code>，<span class=\"math inline\">\\(i+1\\)</span> 位置又有一个 <code>'o'</code>，两个都可以从前面某个位置（假设为 <span class=\"math inline\">\\(j\\)</span>；假设 <span class=\"math inline\">\\(j\\)</span> 上其中一个被计入方案数的合法子序列为 <code>\"hyac\"</code>），那么转移到 <span class=\"math inline\">\\(i\\)</span> 时，计算了 <code>\"hyaco\"</code>，到了 <span class=\"math inline\">\\(i+1\\)</span>，依然可以从 <span class=\"math inline\">\\(j\\)</span> 处得到 <code>\"hyaco\"</code>，就会重复计算。</p>\n<p>那么怎么避免这一点呢？对于一个位置 <span class=\"math inline\">\\(i\\)</span>，假设其上一个相同字母的位置为 <span class=\"math inline\">\\(last_i\\)</span>，我们规定其仅可从 <span class=\"math inline\">\\((last_i,i)\\)</span> 进行转移即可（注意两边都是开区间）。</p>\n<p>初始化是对于每一个没有前驱的 <span class=\"math inline\">\\(i\\)</span>，<span class=\"math inline\">\\(f_{1,i}=1\\)</span>。</p>\n<p>实现上，因为 <span class=\"math inline\">\\(n\\)</span> 的大小是 <span class=\"math inline\">\\(5\\times 10^3\\)</span>，转移区间又是连续的，我们用一个前缀和进行优化即可。</p>\n<p>时间复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>，应该比官方题解讲的方法具象一些。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int mod = 1e9 + 7;\nconst int maxn = 5e3 + 5;\nint n, res;\nchar s[maxn];\nint fac[maxn];\nint la[maxn], p[maxn];\nint f[maxn][maxn], u[maxn][maxn];\nint max(int x, int y) &#123; return x &gt; y ? x : y; &#125;\nint qkp(int x, int y) &#123;\n    int res = 1;\n    while (y) &#123;\n        if (y &amp; 1) (res *= x) %= mod;\n        (x *= x) %= mod, y &gt;&gt;= 1;\n    &#125;\n    return res;\n&#125;\nint inv(int x) &#123; return qkp(x, mod - 2); &#125;\nint A(int n, int m) &#123;\n    return fac[n] * inv(fac[n - m]) % mod;\n&#125;\nint C(int n, int m) &#123;\n    return A(n, m) * inv(fac[m]) % mod;\n&#125;\nint main() &#123;\n    scanf(&quot;%lld %s&quot;, &amp;n, s + 1);\n    fac[0] = 1;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        la[i] = p[s[i] - &#39;a&#39; + 1];\n        if (!la[i]) f[1][i] = 1, ++res;\n        u[1][i] = u[1][i - 1] + f[1][i];\n        p[s[i] - &#39;a&#39; + 1] = i;\n        fac[i] = (fac[i - 1] * i) % mod;\n    &#125;\n    for (int i = 2; i &lt;= n; ++i) &#123;\n        int sum = 0;\n        for (int j = i; j &lt;= n; ++j) &#123;\n            int k = max(i - 1, la[j] + 1);\n            if (k &lt;= j - 1)\n                f[i][j] = (u[i - 1][j - 1] - u[i - 1][k - 1]) % mod;\n            u[i][j] = (u[i][j - 1] + f[i][j]) % mod;\n            (sum += f[i][j]) %= mod;\n        &#125;\n        res += C(n - 1, i - 1) * sum % mod;\n        res %= mod;\n    &#125;\n    res = (res + mod) % mod;\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"abc328f---good-set-query\">ABC328F - Good Set Query</h3>\n<p><a href=\"https://atcoder.jp/contests/abc328/tasks/abc328_f\" class=\"uri\">https://atcoder.jp/contests/abc328/tasks/abc328_f</a></p>\n<p>一个加权并查集。</p>\n<p>我们用并查集维护关系，在合并两个集合的时候给被合并者的原本根打一个懒标记，意为该并查集需要整体更新的 delta。</p>\n<p>在每次 <code>find</code> 时，路径上的点均从 <strong>直系父亲</strong> 处继承懒标记。然后因为有了路径压缩，所以每个点在查询时均能得到不重复的懒标记（因为自己的祖先已经被直系父亲继承过了）。</p>\n<p>同样也是因为弱势一方才被打标记，保证了根节点上不会有标记，路径压缩后就将父亲更新为根，保证不会因为多次 <code>find</code> 导致标记重复计算。</p>\n<p>每次尝试合并的时候，因为首先需要进行 <code>find</code>，保证 <span class=\"math inline\">\\(x\\)</span> 和 <span class=\"math inline\">\\(y\\)</span> 均是最新状态。若 <span class=\"math inline\">\\(x\\)</span> 和 <span class=\"math inline\">\\(y\\)</span> 已经在同一个集合了，直接判断两个差值是否为 <span class=\"math inline\">\\(d\\)</span>；否则，合并两个集合并给弱势方打上标记。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 2e5 + 5;\nint n, q, x, y, d;\nint f[maxn], u[maxn];\nint find(int x) &#123;\n    if (f[x] == x) return x;\n    int fa = find(f[x]);\n    u[x] += u[f[x]];\n    return f[x] = fa;\n&#125;\nbool merge(int x, int y, int d) &#123;\n    int fx = find(x), fy = find(y);\n    if (fx == fy) return u[x] - u[y] == d;\n    f[fx] = fy, u[fx] = d - (u[x] - u[y]);\n    return 1;\n&#125;\nint main() &#123;\n    read(n), read(q);\n    for (int i = 1; i &lt;= n; ++i)\n        f[i] = i;\n    for (int i = 1; i &lt;= q; ++i) &#123;\n        read(x), read(y), read(d);\n        if (merge(x, y, d)) print(i, &#39; &#39;);\n    &#125;\n    putchar(&#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"cf1701f---points\">CF1701F - Points</h3>\n<p><a href=\"http://codeforces.com/problemset/problem/1701/F\" class=\"uri\">http://codeforces.com/problemset/problem/1701/F</a></p>\n<p>我们先考虑对于一个单点 <span class=\"math inline\">\\(p\\)</span>，假设 <span class=\"math inline\">\\([p-d, p)\\)</span> 中共有 <span class=\"math inline\">\\(k\\)</span> 个点，那么答案就是 <span class=\"math inline\">\\(C_k^2=\\dfrac {k(k-1)}2\\)</span>。</p>\n<p>假如范围内新加入了一个点，<span class=\"math inline\">\\(k\\gets k+1\\)</span>，那么答案就是 <span class=\"math inline\">\\(C_{k+1}^2=\\dfrac {k(k+1)}{2}\\)</span>，较原来增加了 <span class=\"math inline\">\\(k\\)</span>。相应地，若范围内减少了一个点，<span class=\"math inline\">\\(k\\gets k-1\\)</span>，答案较原来就会减少 <span class=\"math inline\">\\(k-1\\)</span>。</p>\n<p>当我们加入一个点 <span class=\"math inline\">\\(p\\)</span>，区间 <span class=\"math inline\">\\((p,p+d]\\)</span> 都会收到影响。假设该区间内原本的每个点之 <span class=\"math inline\">\\(k\\)</span> 的和是 <span class=\"math inline\">\\(s_k\\)</span>，那么总体的答案就会减少 <span class=\"math inline\">\\(s_k\\)</span>。</p>\n<p>那么 <span class=\"math inline\">\\(s_k\\)</span> 怎么去维护呢？插入点 <span class=\"math inline\">\\(p\\)</span> 时，答案先加上当前 <span class=\"math inline\">\\(s_k\\)</span> 和新点的 <span class=\"math inline\">\\(k\\)</span>，再将 <span class=\"math inline\">\\((p, p+d]\\)</span> 内的 <span class=\"math inline\">\\(s_k\\)</span> 全部 +1；删除点 <span class=\"math inline\">\\(p\\)</span> 时，答案减去 <span class=\"math inline\">\\(s_k-c\\)</span> 和待删点的答案（其中 <span class=\"math inline\">\\(c\\)</span> 是 <span class=\"math inline\">\\((p,p+d]\\)</span> 中的点数），再将 <span class=\"math inline\">\\((p, p+d]\\)</span> 内的 <span class=\"math inline\">\\(s_k\\)</span> 全部 -1。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int lim = 2e5;\nconst int maxn = 2e5 + 5;\n#define lt (p &lt;&lt; 1)\n#define rt (lt | 1)\nstruct _ &#123; int u, p, d, l, r; &#125;;\n_ t[maxn &lt;&lt; 2];\nint q, d, x, res;\nint min(int x, int y) &#123; return x &lt; y ? x : y; &#125;\nint max(int x, int y) &#123; return x &gt; y ? x : y; &#125;\nvoid pushdown(int p) &#123;\n    if (t[p].d) &#123;\n        t[lt].u += t[lt].p * t[p].d;\n        t[rt].u += t[rt].p * t[p].d;\n        t[lt].d += t[p].d;\n        t[rt].d += t[p].d;\n        t[p].d = 0;\n    &#125;\n    return;\n&#125;\nvoid bld(int p, int l, int r) &#123;\n    t[p].l = l, t[p].r = r;\n    if (l == r) return;\n    int mid = (l + r) &gt;&gt; 1;\n    bld(lt, l, mid), bld(rt, mid + 1, r);\n    return;\n&#125;\nint ask(int p, int l, int r) &#123;\n    if (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r)\n        return t[p].p;\n    int res = 0, mid = (t[p].l + t[p].r) &gt;&gt; 1;\n    if (l &lt;= mid) res = ask(lt, l, r);\n    if (r &gt; mid) res += ask(rt, l, r);\n    return res;\n&#125;\nint qry(int p, int l, int r) &#123;\n    if (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r)\n        return t[p].u;\n    int res = 0, mid = (t[p].l + t[p].r) &gt;&gt; 1;\n    pushdown(p);\n    if (l &lt;= mid) res = qry(lt, l, r);\n    if (r &gt; mid) res += qry(rt, l, r);\n    return res;\n&#125;\nvoid upd(int p, int l, int r, int x) &#123;\n    if (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) &#123;\n        t[p].d += x;\n        t[p].u += t[p].p * x;\n        return;\n    &#125;\n    int mid = (t[p].l + t[p].r) &gt;&gt; 1;\n    pushdown(p);\n    if (l &lt;= mid) upd(lt, l, r, x);\n    if (r &gt; mid) upd(rt, l, r, x);\n    t[p].u = t[lt].u + t[rt].u;\n    return;\n&#125;\nvoid clr(int p, int x) &#123;\n    --t[p].p;\n    if (t[p].l == t[p].r) &#123;\n        res -= t[p].u * (t[p].u - 1) / 2;\n        t[p].u = t[p].d = t[p].p = 0;\n        return;\n    &#125;\n    int mid = (t[p].l + t[p].r) &gt;&gt; 1;\n    pushdown(p);\n    if (x &lt;= mid) clr(lt, x);\n    else clr(rt, x);\n    t[p].u = t[lt].u + t[rt].u;\n    return;\n&#125;\nvoid add(int p, int x, int v) &#123;\n    ++t[p].p;\n    if (t[p].l == t[p].r) &#123;\n        res += v * (v - 1) / 2;\n        t[p].u = v, t[p].p = 1;\n        return;\n    &#125;\n    int mid = (t[p].l + t[p].r) &gt;&gt; 1;\n    pushdown(p);\n    if (x &lt;= mid) add(lt, x, v);\n    else add(rt, x, v);\n    t[p].u = t[lt].u + t[rt].u;\n    return;\n&#125;\nvoid upd(int l, int r, int x) &#123;\n    upd(1, min(l, lim), min(r, lim), x);\n    return;\n&#125;\nint qry(int l, int r) &#123;\n    return qry(1, min(l, lim), min(r, lim));\n&#125;\nint ask(int l, int r) &#123;\n    return ask(1, max(1, min(l, lim)), max(1, min(r, lim)));\n&#125;\nint main() &#123;\n    read(q), read(d);\n    bld(1, 1, lim);\n    while (q--) &#123;\n        read(x);\n        if (ask(x, x)) &#123;\n            int u = qry(x + 1, x + d) - ask(x + 1, x + d);\n            res -= u, upd(x + 1, x + d, -1), clr(1, x);\n        &#125;\n        else &#123;\n            int u = qry(x + 1, x + d);\n            res += u, upd(x + 1, x + d, 1);\n            add(1, x, ask(x - d, x - 1));\n        &#125;\n        print(res, &#39;\\n&#39;);\n    &#125;\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n",
            "tags": [
                "数据结构"
            ]
        }
    ]
}