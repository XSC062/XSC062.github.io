<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xsc062.netlify.app</id>
    <title> • Posts by &#34;线段树&#34; tag</title>
    <link href="https://xsc062.netlify.app" />
    <updated>2025-08-19T01:44:25.000Z</updated>
    <category term="并查集" />
    <category term="斜率优化" />
    <category term="悬线法" />
    <category term="哈希" />
    <category term="字典树" />
    <category term="DP" />
    <category term="单调队列" />
    <category term="分治" />
    <category term="二分图" />
    <category term="CRT / exCRT" />
    <category term="排列组合" />
    <category term="网络流" />
    <category term="费用流" />
    <category term="二分" />
    <category term="上下界网络流" />
    <category term="容斥原理" />
    <category term="线段树" />
    <category term="树状数组" />
    <category term="区间 DP" />
    <category term="构造" />
    <category term="Tarjan" />
    <category term="数据结构" />
    <category term="下饭" />
    <category term="LCA" />
    <category term="倍增" />
    <category term="鸽巢原理" />
    <category term="概率期望" />
    <category term="调和级数" />
    <category term="差分" />
    <category term="思维" />
    <category term="树形 DP" />
    <category term="最小生成树" />
    <category term="SAM" />
    <category term="状压" />
    <category term="分块" />
    <category term="可持久化" />
    <category term="笛卡尔树" />
    <category term="高维前缀和" />
    <category term="闲话" />
    <category term="欧拉回路" />
    <category term="树链剖分" />
    <category term="长链剖分" />
    <category term="KMP" />
    <category term="border" />
    <category term="字符串" />
    <category term="AC 自动机" />
    <category term="SA" />
    <category term="数学" />
    <category term="树上差分" />
    <category term="FWT" />
    <category term="堆" />
    <category term="树的重心" />
    <category term="二项式定理" />
    <category term="二项式反演" />
    <category term="贪心" />
    <category term="均摊" />
    <category term="计数" />
    <category term="优化建图" />
    <category term="反悔贪心" />
    <category term="调整法" />
    <category term="背包" />
    <category term="博弈论" />
    <category term="DP 优化" />
    <category term="虚树" />
    <category term="点分治" />
    <category term="WQS 二分" />
    <category term="闵可夫斯基和" />
    <category term="slope trick" />
    <category term="四边形不等式" />
    <category term="暴力" />
    <category term="状压 DP" />
    <category term="组合数学" />
    <category term="支配对" />
    <category term="DDP" />
    <category term="平衡树" />
    <category term="容斥" />
    <category term="猫树" />
    <category term="Kruskal 重构树" />
    <category term="李超线段树" />
    <entry>
        <id>https://xsc062.netlify.app/20250819/</id>
        <title>log 数据结构的一些题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250819/"/>
        <content type="html">&lt;p&gt;线段树、树状数组、倍增、分治（朴素分治 / CDQ / 整体二分）、平衡树、字典树、笛卡尔树&lt;/p&gt;
&lt;p&gt;多乎哉？不多也。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;题目来源：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;llsw’s pdf&lt;/li&gt;
&lt;li&gt;洛谷文章广场题解区搜索对应算法&lt;/li&gt;
&lt;li&gt;自己以前的一些零散题解&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找了一些有数据结构方面思维难点的题，实现难度通常不会很大，也有少许粑粑夹杂其中&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;#&lt;/code&gt; 是缺题解，&lt;code&gt;*&lt;/code&gt; 是缺代码&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;线段树&#34;&gt;线段树&lt;/h2&gt;
&lt;h3 id=&#34;维护特殊信息&#34;&gt;维护特殊信息&lt;/h3&gt;
&lt;h4 id=&#34;金鱼草区间覆盖信息&#34;&gt;金鱼草（区间覆盖信息）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6051/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6051/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个区间 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，给出 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 个询问，每次询问 &lt;span class=&#34;math inline&#34;&gt;\([L,R]\)&lt;/span&gt; 是否能被表示为若干 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 的并集。注意不能覆盖到 &lt;span class=&#34;math inline&#34;&gt;\([L,R]\)&lt;/span&gt; 之外的点。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le 5\times 10^5,|V|\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;题目所求等价于 check 满足 &lt;span class=&#34;math inline&#34;&gt;\(l\ge L\land r\le R\)&lt;/span&gt; 的所有区间是否能够覆盖 &lt;span class=&#34;math inline&#34;&gt;\([L,R]\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;这个很简单，需要区间修改的做法就不提了。可以想一下有没有只需要单点修改的做法&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发现权值线段树可以维护「一段连续左端点对应区间的并」是否是连续的：&lt;/p&gt;
维护位于区间内的左端点最后一个覆盖到的点 &lt;span class=&#34;math inline&#34;&gt;\(rv\)&lt;/span&gt;（可以在区间外；发现从区间左端点到 &lt;span class=&#34;math inline&#34;&gt;\(rv\)&lt;/span&gt; 会被连续覆盖），&lt;strong&gt;区间内&lt;/strong&gt;最后一个没有被覆盖到的点 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，和表示区间是否能被完整覆盖的标记 &lt;span class=&#34;math inline&#34;&gt;\(flag\)&lt;/span&gt;。pushup 是容易的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;容易发现如果我们在树上询问 &lt;span class=&#34;math inline&#34;&gt;\([L,R]\)&lt;/span&gt; 中所有左端点的 &lt;span class=&#34;math inline&#34;&gt;\(flag\)&lt;/span&gt;，无法保证参与覆盖的 &lt;span class=&#34;math inline&#34;&gt;\(r\le R\)&lt;/span&gt;。故离线下来扫描线即可。&lt;/p&gt;
&lt;p&gt;实际上由于未知原因跑得很可能不如区间修改的方法快 TAT&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 5e5 + 5;
struct _ &amp;#123;
    bool flag;
    int l, r, rv, p;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void pushup(int p) &amp;#123;
    t[p].rv = std::max(t[lt].rv, t[rt].rv);
    if (!t[lt].flag) &amp;#123;
        t[p].flag = 0;
        if (!t[rt].flag &amp;amp;&amp;amp; t[lt].rv &amp;lt; t[rt].p)
            t[p].p = t[rt].p;
        else
            t[p].p = t[lt].p;
    &amp;#125;
    else if (!t[rt].flag &amp;amp;&amp;amp; t[lt].rv &amp;lt; t[rt].p)
        t[p].flag = 0, t[p].p = t[rt].p;
    else
        t[p].flag = 1, t[p].p = 0;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = t[p].p = r;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    if(t[p].l == t[p].r) &amp;#123;
        t[p].flag = 1, t[p].p = 0;
        t[p].rv = std::max(t[p].rv, v);
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x, v);
    else
        add(rt, x, v);
    pushup(p);
    return;
&amp;#125;
_ ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p];
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    auto ls(ask(lt, l, r)), rs(ask(rt, l, r));
    if (!ls.flag) &amp;#123;
        if (!rs.flag &amp;amp;&amp;amp; ls.rv &amp;lt; rs.p)
            ls.p = rs.p;
    &amp;#125;
    else if (!rs.flag &amp;amp;&amp;amp; ls.rv &amp;lt; rs.p)
        ls.flag = 0, ls.p = rs.p;
    ls.rv = std::max(ls.rv, rs.rv);
    return ls;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;snapdragon.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;snapdragon.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, q;
    std::cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q;
    bld(1, 1, m);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; t(m + 1);
    for (int i = 1, l, r; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        t[r].push_back(l);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; res(q + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; tq(m + 1);
    for (int i = 1, l, r; i &amp;lt;= q; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        tq[r].emplace_back(l, i);
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        for (auto l : t[i])
            add(1, l, i);
        for (auto [l, id] : tq[i])
            res[id] = ask(1, l, i).flag;
    &amp;#125;
    for (int i = 1; i &amp;lt;= q; ++i)
        std::cout &amp;lt;&amp;lt; (res[i] ? &amp;quot;YES&amp;quot; : &amp;quot;NO&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&#34;题日-zapatak哈希&#34;&gt;# 题日 Zapatak（哈希）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11262&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11262&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;简单数据结构带一点递推性质&#34;&gt;简单数据结构（带一点递推性质）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://pjudge.ac/problem/21636&#34; class=&#34;uri&#34;&gt;https://pjudge.ac/problem/21636&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定初始为空的多重集 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt;，这两个多重集中的元素都有 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt; 两种属性。需要需要维护 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 的加点和删点操作，询问 &lt;span class=&#34;math inline&#34;&gt;\(\forall \,i\in p,j\in q\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\max(i_x + j_x, i_y + j_y)\)&lt;/span&gt; 的最小值。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(m\le 10^6,V\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考虑&lt;strong&gt;对不等式恒等变形，转化为偏序问题&lt;/strong&gt;。若 &lt;span class=&#34;math inline&#34;&gt;\(a_{i,0}+b_{j,0}\ge a_{i,1}+b_{j,1}\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(a_{i,0}-a_{i,1}\ge b_{j,1}-b_{j,0}\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 按照 &lt;span class=&#34;math inline&#34;&gt;\(a_{i,0}-a_{i,1}\)&lt;/span&gt; 排序、把 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 按照 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,1}-b_{j,0}\)&lt;/span&gt; 排序。&lt;/p&gt;
&lt;p&gt;要求某个时刻的答案，需要对于每一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 找到最小的 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,0}\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,1}-b_{j,0}\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\([-\infty, a_{i,0}-a_{i,1}]\)&lt;/span&gt; 中，同时找到最小的 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,1}\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,1}-b_{j,0}\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\([a_{i, 0}-a_{i,1},+\infty]\)&lt;/span&gt; 中。&lt;/p&gt;
&lt;p&gt;这个带有一点递推的性质，在线段树 pushup 的时候，用左边的 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,0}\)&lt;/span&gt; 结合右边的答案得到父亲的答案。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;听说我之前赛时切了这题？怎么没印象。llsw 讲题的时候说要离线，但是没想到离线做法 orz&lt;/em&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 2e9 + 1;
struct _ &amp;#123; long long aa, ab, ba, bb, u; int l, r, id; &amp;#125;;
std::vector&amp;lt;_&amp;gt; t(1);
std::vector&amp;lt;std::multiset&amp;lt;long long&amp;gt; &amp;gt; aa(1), ab(1), ba(1), bb(1);
int tot, cnt;
#define lt t[p].l
#define rt t[p].r
void pushup(int p) &amp;#123;
    t[p].aa = t[p].ab = t[p].ba = t[p].bb = t[p].u = inf;
    if (lt) &amp;#123;
        t[p].u = t[lt].u;
        t[p].aa = t[lt].aa, t[p].ab = t[lt].ab, t[p].ba = t[lt].ba, t[p].bb = t[lt].bb;
    &amp;#125;
    if (rt) &amp;#123;
        t[p].u = std::min(t[p].u, t[rt].u);
        t[p].aa = std::min(t[p].aa, t[rt].aa);
        t[p].ab = std::min(t[p].ab, t[rt].ab);
        t[p].ba = std::min(t[p].ba, t[rt].ba);
        t[p].bb = std::min(t[p].bb, t[rt].bb);
    &amp;#125;
    if (lt &amp;amp;&amp;amp; rt)
        t[p].u = std::min(&amp;#123; t[p].u, t[lt].ba + t[rt].aa, t[lt].ab + t[rt].bb &amp;#125;);
    return;
&amp;#125;
int adda(int p, long long l, long long r, int x, int a, int b) &amp;#123;
    if (!p)
        p = ++tot, t.emplace_back(), t[p].aa = t[p].ab = t[p].ba = t[p].bb = t[p].u = inf;
    if (l == r) &amp;#123;
        if (!t[p].id)
            t[p].id = ++cnt, aa.emplace_back(), ab.emplace_back(), ba.emplace_back(), bb.emplace_back();
        int id = t[p].id;
        aa[id].insert(a), ab[id].insert(b);
        t[p].aa = *aa[id].begin(), t[p].ab = *ab[id].begin();
        if (!aa[id].empty() &amp;amp;&amp;amp; !ba[id].empty())
            t[p].u = std::min(*aa[id].begin() + *ba[id].begin(), *ab[id].begin() + *bb[id].begin());
        else
            t[p].u = inf;
        return p;
    &amp;#125;
    long long mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid) &amp;#123;
        auto s(adda(lt, l, mid, x, a, b));
        lt = s;
    &amp;#125;
    else &amp;#123;
        auto s(adda(rt, mid + 1, r, x, a, b));
        rt = s;
    &amp;#125;
    pushup(p);
    return p;
&amp;#125;
int addb(int p, long long l, long long r, int x, int a, int b) &amp;#123;
    if (!p)
        p = ++tot, t.emplace_back(), t[p].aa = t[p].ab = t[p].ba = t[p].bb = t[p].u = inf;
    if (l == r) &amp;#123;
        if (!t[p].id)
            t[p].id = ++cnt, aa.emplace_back(), ab.emplace_back(), ba.emplace_back(), bb.emplace_back();
        int id = t[p].id;
        ba[id].insert(a), bb[id].insert(b);
        t[p].ba = *ba[id].begin(), t[p].bb = *bb[id].begin();
        if (!aa[id].empty() &amp;amp;&amp;amp; !ba[id].empty())
            t[p].u = std::min(*aa[id].begin() + *ba[id].begin(), *ab[id].begin() + *bb[id].begin());
        else
            t[p].u = inf;
        return p;
    &amp;#125;
    long long mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid) &amp;#123;
        auto s(addb(lt, l, mid, x, a, b));
        lt = s;
    &amp;#125;
    else &amp;#123;
        auto s(addb(rt, mid + 1, r, x, a, b));
        rt = s;
    &amp;#125;
    pushup(p);
    return p;
&amp;#125;
void dela(int p, long long l, long long r, int x, int a, int b) &amp;#123;
    if (l == r) &amp;#123;
        int id = t[p].id;
        aa[id].erase(aa[id].find(a)), ab[id].erase(ab[id].find(b));
        t[p].aa = (aa[id].empty() ? inf : *aa[id].begin());
        t[p].ab = (ab[id].empty() ? inf : *ab[id].begin());
        if (!aa[id].empty() &amp;amp;&amp;amp; !ba[id].empty())
            t[p].u = std::min(*aa[id].begin() + *ba[id].begin(), *ab[id].begin() + *bb[id].begin());
        else
            t[p].u = inf;
        return;
    &amp;#125;
    long long mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        dela(lt, l, mid, x, a, b);
    else
        dela(rt, mid + 1, r, x, a, b);
    pushup(p);
    return;
&amp;#125;
void delb(int p, long long l, long long r, int x, int a, int b) &amp;#123;
    if (l == r) &amp;#123;
        int id = t[p].id;
        ba[id].erase(ba[id].find(a)), bb[id].erase(bb[id].find(b));
        t[p].ba = (ba[id].empty() ? inf : *ba[id].begin());
        t[p].bb = (bb[id].empty() ? inf : *bb[id].begin());
        if (!aa[id].empty() &amp;amp;&amp;amp; !ba[id].empty())
            t[p].u = std::min(*aa[id].begin() + *ba[id].begin(), *ab[id].begin() + *bb[id].begin());
        else
            t[p].u = inf;
        return;
    &amp;#125;
    long long mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        delb(lt, l, mid, x, a, b);
    else
        delb(rt, mid + 1, r, x, a, b);
    pushup(p);
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;set.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;set.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int q, rt = 0;
    std::cin &amp;gt;&amp;gt; q;
    for (int i = 1; i &amp;lt;= q; ++i) &amp;#123;
        int op, d, a, b;
        std::cin &amp;gt;&amp;gt; op &amp;gt;&amp;gt; d &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        if (op == 0 &amp;amp;&amp;amp; d == 0)
            dela(rt, -inf, inf, a - b, a, b);
        else if (op == 0)
            delb(rt, -inf, inf, b - a, a, b);
        else if (d == 0)
            rt = adda(rt, -inf, inf, a - b, a, b);
        else
            rt = addb(rt, -inf, inf, b - a, a, b);
        std::cout &amp;lt;&amp;lt; (t[1].u == inf ? -1 : t[1].u) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;命运利用线段树的分治结构递推&#34;&gt;# 命运（利用线段树的分治结构递推）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6773&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6773&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;对数据结构的爱维护函数&#34;&gt;* 对数据结构的爱（维护函数）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5609&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5609&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的数组 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 和模数 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 初始可能比 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 大很多，还有可能为负），给定 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 次询问，每次问区间 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，进行这样的操作：&lt;/p&gt;
&lt;p&gt;初始 &lt;span class=&#34;math inline&#34;&gt;\(sum=0\)&lt;/span&gt;，从 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，依次令 &lt;span class=&#34;math inline&#34;&gt;\(sum\gets sum+a_i\)&lt;/span&gt;，当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(sum\ge p\)&lt;/span&gt; 时令 &lt;span class=&#34;math inline&#34;&gt;\(sum\gets sum-p\)&lt;/span&gt;（注意这不是取模，减完之后还是可能 &lt;span class=&#34;math inline&#34;&gt;\(\ge p\)&lt;/span&gt;）。&lt;/p&gt;
&lt;p&gt;问最终 &lt;span class=&#34;math inline&#34;&gt;\(sum\)&lt;/span&gt; 的值。&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6,m\le 2\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;考虑线段树维护函数。定义 &lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; 表示区间上想要减去 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 次 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 需要的最小初始值（这样才能让定义域和区间长有关），查询时直接二分即可；考虑初始化时如何合并。&lt;/p&gt;
&lt;p&gt;首先思考较为暴力的做法，对于左侧点 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 和右侧点 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(f(a+1)-1+s_l-a\cdot p\ge f(b)\)&lt;/span&gt;，也即可以减去 &lt;span class=&#34;math inline&#34;&gt;\(a+b\)&lt;/span&gt; 次，就可以用 &lt;span class=&#34;math inline&#34;&gt;\(\max(f(a),f(b)-s_l+a\cdot p)\)&lt;/span&gt; 来更新 &lt;span class=&#34;math inline&#34;&gt;\(f(a+b)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;发现 &lt;span class=&#34;math inline&#34;&gt;\((a,b)\)&lt;/span&gt; 的贡献一定小于 &lt;span class=&#34;math inline&#34;&gt;\((a+1,b-1)\)&lt;/span&gt; 的贡献；具体地，发现 &lt;span class=&#34;math inline&#34;&gt;\(f(x+1)-f(x)\ge p\)&lt;/span&gt; 后就很显然了。采用双指针，优先移动 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;，就能把最短区间扫一遍。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;关于线段树维护函数&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;维护一个函数，形如 &lt;span class=&#34;math inline&#34;&gt;\(f_{[l,r]}(x)\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 区间上，&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的一个映射&lt;/p&gt;
&lt;p&gt;如果相邻区间的函数可以用某种方式合并，就可以用线段树来维护&lt;/p&gt;
&lt;p&gt;把树建在值域上，就可以在节点内把这段区间每个点对应的函数值存下来。一般来说是静态的，因为这是一个类前缀和的形式，没办法修改&lt;/p&gt;
&lt;p&gt;每个点的点值数组会在当前层被扫一遍，上一层被扫一遍，如果合并能够做到线性，总复杂度就是单 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;实际情形下函数本身可能很隐秘、很抽象，怎么优化到线性合并也不太好想&lt;/p&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;compounds模意义下问题&#34;&gt;* COmPoUNdS（模意义下问题）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P12389&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P12389&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定常数模数，维护模意义下的区间加、区间哈希。&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;线段树哈希是可以维护区间加的&lt;/strong&gt;，但是没办法维护区间取模&lt;/p&gt;
&lt;p&gt;类似 &lt;a href=&#34;/20250816/#e---subarray-sum-divisibility&#34;&gt;ABC419E&lt;/a&gt; 里面用到的，模意义下序列全等可以转化成差分全等，区间修改就可以简化成单点修改了&lt;/p&gt;
&lt;p&gt;额外判一下开头的元素（维护原数组或者是差分数组之和）是否相等就可以了&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;改进代码模意义下问题&#34;&gt;* 改进代码（模意义下问题）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4635&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4635&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定序列 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 和常数 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，维护:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改：模 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 意义下区间加；&lt;/li&gt;
&lt;li&gt;询问：区间中 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=l}^{r-1}[a_i&amp;gt;a_{i+1}]\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^5,p\le 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;询问也和模意义差分有关系，假如 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 为当前差分数组前缀和模 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的值（也就是原数），发现&lt;strong&gt;前一个数 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;\)&lt;/span&gt; 后一个数当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 加爆了&lt;/strong&gt;。维护原数组用来确定 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的初值。再维护区间内差分数组之和（不取模），&lt;strong&gt;在这个和里有多少个 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 就会爆多少次&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;黑白树很新的东西&#34;&gt;黑白树（很新的东西）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/problem/46907&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/problem/46907&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;以楼房重建为代表的-log2-一类前缀信息维护&#34;&gt;以楼房重建为代表的 &lt;span class=&#34;math inline&#34;&gt;\(\log^2\)&lt;/span&gt; 一类前缀信息维护&lt;/h3&gt;
&lt;p&gt;特点：pushup 时需要先获得一边的信息，在另一边进行线段树上二分，单次操作是 &lt;span class=&#34;math inline&#34;&gt;\(O(\log^2)\)&lt;/span&gt; 的&lt;/p&gt;
&lt;p&gt;本质是一类具有&lt;strong&gt;单调性&lt;/strong&gt;的前 / 后缀信息，&lt;strong&gt;区间对全局的贡献&lt;/strong&gt;和&lt;strong&gt;区间外的信息&lt;/strong&gt;有关，故不能直接维护对全局的贡献，只能维护区间内的答案。但由于两个子区间答案可以合并出大区间答案（通过线段树上二分得到需要的信息），所以只需要逐层向上合并就可以得到全局答案&lt;/p&gt;
&lt;p&gt;一个名字是『线段树维护前缀信息』，感觉不很精确。log 方线段树又是什么鬼名字？更多还是叫的楼房重建线段树吧&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;楼房重建&#34;&gt;楼房重建&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4198&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4198&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，维护 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单点修改；&lt;/li&gt;
&lt;li&gt;查询 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{a_i}i\)&lt;/span&gt; 的前缀最大值序列长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fractures 说当年（初一）是他力荐 gm 给我们拉这个题的。dashena！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线段树维护单调栈，或者说前缀最值，维护方式过于经典，使得『楼房重建』成为该 trick 称呼之一&lt;/li&gt;
&lt;li&gt;&lt;p&gt;考虑 pushup。保留左边整段区间，对于左区间序列末的元素 &lt;code&gt;l.rv&lt;/code&gt;，我们在右区间内找到第一个大于之的元素 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，从它开始的序列就是答案。&lt;/p&gt;
反证法易得 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 一定在右区间答案序列内：若 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 不在答案序列内，则右区间内存在一个 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt; 且位于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 之前的元素，那么 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 就不是第一个 &lt;code&gt;&amp;gt; l.rv&lt;/code&gt; 的元素，矛盾。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;故在右区间中二分能够接上去的区间长度，加起来即可。&lt;/p&gt;
&lt;p&gt;题目只要求总区间答案，故不需要查询。动态开点可能需要小心处理一下。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
struct &amp;#123;
    int l, r, u;
    double lv, rv, mv;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int tot;
#define lt t[p].l
#define rt t[p].r
int askt(int p, int l, int r, double v) &amp;#123;
    if (l == r)
        return t[p].u;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (lt &amp;amp;&amp;amp; t[p].mv &amp;gt; v)
        return t[p].u - t[lt].u + askt(lt, l, mid, v);
    return askt(rt, mid + 1, r, v);
&amp;#125;
void pushup(int p, int l, int r) &amp;#123;
    t[p].mv = t[lt].rv;
    if (lt &amp;amp;&amp;amp; rt) &amp;#123;
        t[p].lv = t[lt].lv;
        t[p].rv = std::max(t[lt].rv, t[rt].rv);
        if (t[lt].rv &amp;lt; t[rt].lv)
            t[p].u = t[lt].u + t[rt].u;
        else if (t[lt].rv &amp;gt;= t[rt].rv)
            t[p].u = t[lt].u;
        else &amp;#123;
            int mid = (l + r) &amp;gt;&amp;gt; 1;
            t[p].u = t[lt].u + askt(rt, mid + 1, r, t[lt].rv);
        &amp;#125;
    &amp;#125;
    else &amp;#123;
        t[p].u = t[lt + rt].u;
        t[p].lv = t[lt + rt].lv, t[p].rv = t[lt + rt].rv;
    &amp;#125;
    return;
&amp;#125;
void upd(int &amp;amp;p, int l, int r, int x, double v) &amp;#123;
    if (!p)
        p = ++tot;
    if (l == r) &amp;#123;
        t[p].lv = t[p].rv = v, t[p].u = 1;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, l, mid, x, v);
    else
        upd(rt, mid + 1, r, x, v);
    pushup(p, l, r);
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P4198_2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, rt = 0;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;double&amp;gt; a(n + 1);
    for (int x; m--; ) &amp;#123;
        double y;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        a[x] = y / x;
        upd(rt, 1, n, x, y / x);
        std::cout &amp;lt;&amp;lt; t[1].u &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;二叉搜索树&#34;&gt;二叉搜索树&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://pjudge.ac/problem/21889&#34; class=&#34;uri&#34;&gt;https://pjudge.ac/problem/21889&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个大小为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的树，树上每个元素是一个 BST，你需要维护 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次操作：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;对于树上的一条路径 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;，在经过的所有节点上的 BST 插入 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，保证任意时刻 BST 中无相同值&lt;/li&gt;
&lt;li&gt;在点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 查找 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，如果 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 存在则返回其到 BST 根的元素和，否则返回查找时最远走到的那个点，到 BST 根的元素和。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le 2\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考虑链上问题。差分，把更新 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 看作在差分数组 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 处插入，在 &lt;span class=&#34;math inline&#34;&gt;\(r+1\)&lt;/span&gt; 处删除，离线下来再从左到右扫一遍操作就能更新。&lt;/li&gt;
&lt;li&gt;考虑查询。&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 树上存在过的所有元素是已知的，考虑如何基于此获取 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 树上 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 时刻，&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的所有祖先。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于比 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 大的元素，考虑祖先 &lt;span class=&#34;math inline&#34;&gt;\(p_a\)&lt;/span&gt; 和非祖先 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的区别：&lt;/p&gt;
&lt;p&gt;根据 BST 的性质易得，对于最低的右侧祖先 &lt;span class=&#34;math inline&#34;&gt;\({p_a}_0\)&lt;/span&gt;，其是 &lt;span class=&#34;math inline&#34;&gt;\(\ge x\)&lt;/span&gt; 的最小的元素（加入时刻 &lt;span class=&#34;math inline&#34;&gt;\(t_a&amp;lt;t_0\)&lt;/span&gt;）；&lt;/p&gt;
同理可以找到 &lt;span class=&#34;math inline&#34;&gt;\({p_a}_0\)&lt;/span&gt; 右侧最低的祖先（其左侧的祖先显然也在 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 左侧），该祖先满足 &lt;span class=&#34;math inline&#34;&gt;\(t&amp;lt;t_a\)&lt;/span&gt;。从左右两边分别得到 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的所有祖先。容易证明该过程对于不在树上的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 也是正确的。&lt;/li&gt;
&lt;li&gt;具体地，需要能够求出 &lt;span class=&#34;math inline&#34;&gt;\(\ge x\)&lt;/span&gt; 的元素中，以 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 为起点的前缀最小值序列的区间和。线段树维护单调栈容易解决不带 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 限制的答案；再次利用性质就能满足限制。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于树的情况，把差分放到树上，线段树合并即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 2e5;
const int maxn = 2e7 + 5;
const int inf = 0x3f3f3f3f;
struct &amp;#123;
    int l, r, rv;
    long long u;
&amp;#125; t[maxn];
std::vector&amp;lt;int&amp;gt; tr;
#define lt t[p].l
#define rt t[p].r
int newnode(void) &amp;#123;
    static int tot = 0;
    if (tr.empty())
        return ++tot;
    auto p(tr.back());
    t[p].l = t[p].r = 0;
    tr.pop_back();
    return p;
&amp;#125;
long long askv(int p, int l, int r, int v) &amp;#123;
    if (l == r)
        return t[p].rv &amp;lt; v ? t[p].u : 0;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (v &amp;gt; t[lt].rv)
        return t[p].u - t[lt].u + askv(lt, l, mid, v);
    return askv(rt, mid + 1, r, v);
&amp;#125;
void pushup(int p, int l, int r) &amp;#123;
    t[p].rv = std::min(t[lt].rv, t[rt].rv);
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    t[p].u = t[lt].u + askv(rt, mid + 1, r, t[lt].rv);
    return;
&amp;#125;
void upd(int &amp;amp;p, int l, int r, int x, int v, int u) &amp;#123;
    if (!p)
        p = newnode();
    if (l == r) &amp;#123;
        t[p].rv = v, t[p].u = u;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, l, mid, x, v, u);
    else
        upd(rt, mid + 1, r, x, v, u);
    pushup(p, l, r);
    return;
&amp;#125;
void merge(int &amp;amp;p, int q, int l, int r) &amp;#123;
    if (!p || !q) &amp;#123;
        p += q;
        return;
    &amp;#125;
    if (l == r) &amp;#123;
        t[p].rv = std::min(t[p].rv, t[q].rv);
        t[p].u = std::max(t[p].u, t[q].u);
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    merge(t[p].l, t[q].l, l, mid), merge(t[p].r, t[q].r, mid + 1, r);
    pushup(p, l, r), tr.push_back(q);
    return;
&amp;#125;
int qv = inf;
long long ask(int p, int l, int r, int ql, int qr) &amp;#123;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr) &amp;#123;
        auto s(askv(p, l, r, qv));
        qv = std::min(qv, t[p].rv);
        return s;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    long long res = 0ll;
    if (ql &amp;lt;= mid)
        res = ask(lt, l, mid, ql, qr);
    if (qr &amp;gt; mid)
        res += ask(rt, mid + 1, r, ql, qr);
    return res;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;ex_problem4.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; top(n + 1), fa(n + 1), siz(n + 1), son(n + 1), dep(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int faa) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != faa) &amp;#123;
                fa[i] = x, dep[i] = dep[x] + 1;
                DFS(i, x), siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    DFS = [&amp;amp;](int x, int topp) &amp;#123;
        top[x] = topp;
        if (son[x])
            DFS(son[x], topp);
        for (auto i : g[x])
            if (i != fa[x] &amp;amp;&amp;amp; i != son[x])
                DFS(i, i);
        return;
    &amp;#125;;
    DFS(1, 1);
    auto getLCA = [&amp;amp;](int x, int y) &amp;#123;
        for (; top[x] != top[y]; x = fa[top[x]])
            if (dep[top[y]] &amp;gt; dep[top[x]])
                std::swap(x, y);
        return (dep[x] &amp;lt; dep[y] ? x : y);
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; d(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; u(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::tuple&amp;lt;int, int, int&amp;gt; &amp;gt; &amp;gt; q(n + 1);
    int cnt = 0;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        int op;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 0) &amp;#123;
            int x, v;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v;
            q[x].emplace_back(++cnt, i, v);
        &amp;#125; else &amp;#123;
            int x, y, v;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; v;
            int faa = getLCA(x, y);
            u[x].emplace_back(i, v), u[y].emplace_back(i, v);
            if (fa[faa])
                d[fa[faa]].emplace_back(v);
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; res(cnt + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; rt(2, std::vector&amp;lt;int&amp;gt; (n + 1));
    t[0].rv = inf;
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                merge(rt[0][x], rt[0][i], 1, lim);
                merge(rt[1][x], rt[1][i], 1, lim);
            &amp;#125;
        for (auto [t, v] : u[x]) &amp;#123;
            upd(rt[0][x], 1, lim, v, t, v);
            upd(rt[1][x], 1, lim, lim - v + 1, t, v);
        &amp;#125;
        for (auto v : d[x]) &amp;#123;
            upd(rt[0][x], 1, lim, v, inf, 0);
            upd(rt[1][x], 1, lim, lim - v + 1, inf, 0);
        &amp;#125;
        for (auto [id, t, v] : q[x]) &amp;#123;
            qv = t, res[id] = ask(rt[0][x], 1, lim, v, lim);
            qv = t, res[id] += ask(rt[1][x], 1, lim, lim - v + 1, lim);
            qv = t, res[id] -= ask(rt[0][x], 1, lim, v, v);
        &amp;#125;
    &amp;#125;;
    DFS(1, -1);
    for (int i = 1; i &amp;lt;= cnt; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;nastya-and-cbs&#34;&gt;Nastya and CBS&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1340F&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1340F&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的括号序列，由 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 种括号对（&lt;span class=&#34;math inline&#34;&gt;\(-i,i\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 种左、右括号）组成，你需要维护单点修改元素、区间查询是否为合法括号序列。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(1\le k\le n\le 10^5,q\le 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考虑不带修且允许 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 询问的情景，经典题，扫一遍，用栈维护即可；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(k=1\)&lt;/span&gt; 时是线段树经典题，可以类比这个经典题，从刻画合法的条件入手。&lt;/p&gt;
如果存在相邻且可以匹配的可以直接消掉，一直重复这样的操作，此时要么包含不能匹配的子串，如 &lt;code&gt;&amp;#123;[)&amp;#125;&lt;/code&gt;，要么是 &lt;code&gt;)]&amp;#125; (&amp;#123;[&amp;#123;&amp;#123;&lt;/code&gt; 的形式。&lt;/li&gt;
&lt;li&gt;考虑怎么 pushup，发现中间生成的一段 &lt;code&gt;([()])&lt;/code&gt; 必须完全匹配，消掉它们之后，大区间又变成 &lt;code&gt;)]&amp;#125; (&amp;#123;[&amp;#123;&amp;#123;&lt;/code&gt; 的形式。&lt;/li&gt;
&lt;li&gt;每次 pushup 要合并的区间很长，考虑怎么快速地做『消除相邻匹配括号』这一步。容易想到记录一段括号（例：&lt;code&gt;([&amp;#123;&lt;/code&gt;）及其对应反括号（例：&lt;code&gt;&amp;#125;])&lt;/code&gt;）的哈希值，check 是否相等，然后就可以不管它们了，并不是真的要删去。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线段树不能维护每个前后缀的哈希值，但需要的只是在&lt;strong&gt;删除连续匹配括号后&lt;/strong&gt;长度为 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 的哈希值，可以线段树上二分。&lt;/p&gt;
这个过程有点困难，需要在询问的同时匹配、消除；但发现所谓消除就是对位相减，注意一下什么时候移位，还是好写的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;询问看似不太可做，因为中途的答案不是线段树的节点；如果把询问看成一次修改，就可以用类似可持久化的方式实现。&lt;/p&gt;
&lt;p&gt;由于并不是真的要可持久化，询问新建的点可以重复利用。如果不重复利用，每次询问最多新建 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 个点，空间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(q\log n)\)&lt;/span&gt;，在 CF 上有点卡，也是能过的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;p&gt;Hint：有卡 998244353 的 Hack，故可以用 1e9 + 7 当模数；WA on 7 是正确性有巨大问题，WA on 8 可能是 long long 没开完 / 数组开小了 / 哈希方向有问题 / 线段树上二分写挂了（通常是消括号消错了）。前人踩坑后人嘲笑。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
const int base = 1e5 + 3;
const int maxn = 7e5 + 5;
struct Node &amp;#123;
    bool flag;
    long long hr0, hl1;
    int l, r, lc, rc, ll, rl;
    Node&amp;amp; operator= (const Node &amp;amp;q) &amp;#123;
        flag = q.flag, hr0 = q.hr0, hl1 = q.hl1;
        l = q.l, r = q.r, ll = q.ll, rl = q.rl;
        return *this;
    &amp;#125;
    Node operator+ (const Node &amp;amp;q) const;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int tot;
int a[maxn];
long long bpow[maxn], inv[maxn];
long long askhl1(const Node &amp;amp;p, int k) &amp;#123;
    if (k == 0)
        return 0ll;
    if (k &amp;gt; p.ll)
        return -1ll;
    if (p.ll == k)
        return p.hl1;
    int ll = t[p.lc].ll, rl = t[p.lc].rl;
    if (ll &amp;gt;= k)
        return askhl1(t[p.lc], k);
    k -= ll, k += rl;
    auto hl1 = askhl1(t[p.rc], k);
    hl1 = ((hl1 + mod - t[p.lc].hr0) * inv[rl] % mod * bpow[ll] % mod + t[p.lc].hl1) % mod;
    return hl1;
&amp;#125;
long long askhr0(const Node &amp;amp;p, int k) &amp;#123;
    if (k == 0)
        return 0ll;
    if (k &amp;gt; p.rl)
        return -1ll;
    if (p.rl == k)
        return p.hr0;
    int rl = t[p.rc].rl, ll = t[p.rc].ll;
    if (rl &amp;gt;= k)
        return askhr0(t[p.rc], k);
    k -= rl, k += ll;
    auto hr0 = askhr0(t[p.lc], k);
    hr0 = ((hr0 + mod - t[p.rc].hl1) * inv[ll] % mod * bpow[rl] % mod + t[p.rc].hr0) % mod;
    return hr0;
&amp;#125;
Node Node::operator+ (const Node &amp;amp;q) const  &amp;#123;
    Node res;
    res.l = l, res.r = q.r;
    if (flag || q.flag)
        res.flag = 1;
    else &amp;#123;
        if (rl == q.ll) &amp;#123;
            if (hr0 == q.hl1) &amp;#123;
                res.flag = 0;
                res.ll = ll, res.rl = q.rl;
                res.hl1 = hl1, res.hr0 = q.hr0;
            &amp;#125;
            else
                res.flag = 1;
        &amp;#125;
        else if (rl &amp;lt; q.ll) &amp;#123;
            auto qhl1 = askhl1(q, rl);
            if (hr0 == qhl1) &amp;#123;
                res.flag = 0;
                res.ll = ll + q.ll - rl, res.rl = q.rl;
                res.hl1 = ((q.hl1 + mod - qhl1) % mod * inv[rl] % mod * bpow[ll] % mod + hl1) % mod;
                res.hr0 = q.hr0;
            &amp;#125;
            else
                res.flag = 1;
        &amp;#125;
        else &amp;#123;
            auto phr0 = askhr0(*this, q.ll);
            if (phr0 == q.hl1) &amp;#123;
                res.flag = 0;
                res.ll = ll, res.rl = rl - q.ll + q.rl;
                res.hl1 = hl1;
                res.hr0 = ((hr0 + mod - phr0) % mod * inv[q.ll] % mod * bpow[q.rl] % mod + q.hr0) % mod;
            &amp;#125;
            else
                res.flag = 1;
        &amp;#125;
    &amp;#125;
    return res;
&amp;#125;
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    p = ++tot;
    if (l == r) &amp;#123;
        t[p].l = t[p].r = l;
        if (a[l] &amp;lt; 0)
            t[p].ll = 1, t[p].hl1 = -a[l];
        else
            t[p].rl = 1, t[p].hr0 = a[l];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(t[p].lc, l, mid), bld(t[p].rc, mid + 1, r);
    t[p] = t[t[p].lc] + t[t[p].rc];
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        if (v &amp;lt; 0) &amp;#123;
            t[p].rl = 0, t[p].hr0 = 0ll;
            t[p].ll = 1, t[p].hl1 = -v;
        &amp;#125;
        else &amp;#123;
            t[p].ll = 0, t[p].hl1 = 0ll;
            t[p].rl = 1, t[p].hr0 = v;
        &amp;#125;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(t[p].lc, x, v);
    else
        add(t[p].rc, x, v);
    t[p] = t[t[p].lc] + t[t[p].rc];
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return p;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(t[p].lc, l, r);
    if (l &amp;gt; mid)
        return ask(t[p].rc, l, r);
    int q = ++tot;
    t[q].lc = ask(t[p].lc, l, r);
    t[q].rc = ask(t[p].rc, l, r);
    t[q] = t[t[q].lc] + t[t[q].rc];
    return q;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, k, rt = 0;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    bpow[0] = inv[0] = 1ll;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[1] = qkp(base, mod - 2);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        bpow[i] = bpow[i - 1] * base % mod;
        if (i &amp;gt;= 2)
            inv[i] = inv[i - 1] * inv[1] % mod;
    &amp;#125;
    bld(rt, 1, n);
    int q;
    std::cin &amp;gt;&amp;gt; q;
    for (int op; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            int x, v;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v;
            add(1, x, v);
        &amp;#125;
        else &amp;#123;
            int l, r;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
            if ((r - l + 1) &amp;amp; 1)
                std::cout &amp;lt;&amp;lt; &amp;quot;No&amp;quot; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            else &amp;#123;
                auto s(ask(1, l, r));
                std::cout &amp;lt;&amp;lt; ((!t[s].flag &amp;amp;&amp;amp; !t[s].ll &amp;amp;&amp;amp; !t[s].rl) ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            &amp;#125;
        &amp;#125;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;hungry-cow-p&#34;&gt;# Hungry Cow P&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9130&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9130&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;牛半仙的妹子序列&#34;&gt;# 牛半仙的妹子序列&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/problem/29550&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/problem/29550&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;organizing-a-race&#34;&gt;# Organizing a Race&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF671E&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF671E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个题不太应该放在这里的，因为存在只用一只 log 的纯线段树上二分做法，用楼房重建显得有点唐了&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;转盘&#34;&gt;# 转盘&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4425&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4425&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;前进四楼房重建-ver&#34;&gt;# 前进四（楼房重建 ver）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://uoj.ac/problem/515&#34; class=&#34;uri&#34;&gt;https://uoj.ac/problem/515&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另见 &lt;a href=&#34;#-前进四segment-tree-beats-ver&#34;&gt;segment tree beats ver&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;可持久化线段树&#34;&gt;可持久化线段树&lt;/h3&gt;
&lt;h4 id=&#34;card-game&#34;&gt;# Card Game&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://qoj.ac/problem/8240&#34; class=&#34;uri&#34;&gt;https://qoj.ac/problem/8240&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;历史信息&#34;&gt;历史信息&lt;/h3&gt;
&lt;h4 id=&#34;比赛&#34;&gt;# 比赛&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P8868&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P8868&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;v&#34;&gt;# V&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://uoj.ac/problem/164&#34; class=&#34;uri&#34;&gt;https://uoj.ac/problem/164&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;cartesian-tree&#34;&gt;# Cartesian Tree&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1290E&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1290E&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;rprmq1&#34;&gt;# rprmq1&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6109&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6109&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;rpfrdtzls&#34;&gt;# rpfrdtzls&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9057&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9057&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;test_90&#34;&gt;# TEST_90&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9990&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9990&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;线段树合并&#34;&gt;线段树合并&lt;/h3&gt;
&lt;p&gt;树上的线段树合并都很熟悉了，利用了线段树合并是线性的，以及 dsu on tree&lt;/p&gt;
&lt;p&gt;不如说绝大多数线段树合并都有树上背景，因为自带合并顺序和复杂度保证&lt;/p&gt;
&lt;p&gt;Tip：树上合并的背景下，线段树合并的表现会比主席树优秀很多，因为前者跑不满&lt;/p&gt;
&lt;p&gt;不在树上的问题，题目可能会通过各种方式保证复杂度，比如保证每个点只会被合并一次之类&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;迁移计划-migration-plan&#34;&gt;# 迁移计划 / Migration Plan&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11993&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11993&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;永无乡&#34;&gt;# 永无乡&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3224&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3224&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;语言&#34;&gt;# 语言&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5327&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5327&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;梦幻布丁&#34;&gt;# 梦幻布丁&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3201&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3201&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;还有两个比较屎的 P7563 和 P7963&lt;/p&gt;
&lt;h3 id=&#34;扫描线&#34;&gt;扫描线&lt;/h3&gt;
&lt;p&gt;离线，按照下标排序，扫一遍处理询问，就可以利用『所有更靠前的下标都以被计算过』来处理问题&lt;/p&gt;
&lt;p&gt;不只局限于区间询问，单点的可能反而更难一点，需要发现和下标大小有关的性质&lt;/p&gt;
&lt;h4 id=&#34;等差子序列&#34;&gt;等差子序列&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2757&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2757&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的排列，问是否能找到 &lt;span class=&#34;math inline&#34;&gt;\(len\ge 3\)&lt;/span&gt; 的子序列，使得其是等差的。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 5\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据单调性，可以简化为 &lt;span class=&#34;math inline&#34;&gt;\(len=3\)&lt;/span&gt; 时的答案&lt;/p&gt;
&lt;p&gt;也就是对于中项 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，能不能找到 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;lt;j&amp;lt;k\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(a_j-a_i=a_k-a_j\)&lt;/span&gt;。从下标出发，差值是不好维护的；注意到是排列，可以从值出发，转化成是否存在一个 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(a_j-d\)&lt;/span&gt; 在之前出现，&lt;span class=&#34;math inline&#34;&gt;\(a_j+d\)&lt;/span&gt; 在之后出现。&lt;/p&gt;
&lt;p&gt;利用下标『之前』和『之后』的限制，做扫描线，查看是否存在 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 使 &lt;span class=&#34;math inline&#34;&gt;\(a_j-d\)&lt;/span&gt; 出现过但是 &lt;span class=&#34;math inline&#34;&gt;\(a_j+d\)&lt;/span&gt; 没有出现过；还是因为是排列，数量只会为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，如果非法说明 &lt;span class=&#34;math inline&#34;&gt;\(a_j-d\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_j+d\)&lt;/span&gt; 都是 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 或者都是 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，发现是关于 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 的回文，故权值线段树维护哈希，如果 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 两侧全部回文，说明 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 不是合法中项。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
namespace fastIO &amp;#123;
const int LEN = (1 &amp;lt;&amp;lt; 20);
#ifdef ONLINE_JUDGE
inline int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf)
            return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
inline bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF)
            return 0;
        if (ch == &amp;#39;-&amp;#39;)
            f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f)
        x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0) &amp;#123;
        putchar(&amp;#39;-&amp;#39;);
        x = -x;
    &amp;#125;
    if (x &amp;gt;= 10)
        print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x);
    putchar(ch);
    return;
&amp;#125;
&amp;#125; // namespace fastIO
namespace XSC062 &amp;#123;
using namespace fastIO;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
using sc = unsigned long long;
const int p = 13331; // 0103 ¿É°®µÎÄó 
const int lim = 5e5;
const int maxn = 5e5 + 5;
struct _ &amp;#123;
    int l, r;
    sc lh, rh;
&amp;#125;;
int T, n;
int a[maxn];
sc base[maxn];
_ t[maxn &amp;lt;&amp;lt; 2];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
void pushup(int p) &amp;#123;
    int ll = t[lt].r - t[lt].l + 1;
    int rl = t[rt].r - t[rt].l + 1;
    t[p].lh = t[lt].lh * base[rl] + t[rt].lh;
    t[p].rh = t[rt].rh * base[ll] + t[lt].rh;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].lh = t[p].rh = 0;
    t[p].l = l, t[p].r = r;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid);
    bld(rt, mid + 1, r);
    return;
&amp;#125;
void upd(int p, int x, int v) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        t[p].lh = t[p].rh = v;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, x, v);
    else upd(rt, x, v);
    pushup(p);
    return;
&amp;#125;
sc qryl(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].lh;
    sc ans = 0;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        ans = qryl(lt, l, r);
    if (r &amp;gt; mid) &amp;#123;
        ans *= base[min(r, t[p].r) - mid];
        ans += qryl(rt, l, r);
    &amp;#125;
    return ans;
&amp;#125;
sc qryr(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].rh;
    sc ans = 0;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;gt; mid)
        ans = qryr(rt, l, r);
    if (l &amp;lt;= mid) &amp;#123;
        ans *= base[mid - max(l, t[p].l) + 1];
        ans += qryr(lt, l, r);
    &amp;#125;
    return ans;
&amp;#125;
int main() &amp;#123;
    read(T);
    base[0] = 1;
    for (int i = 1; i &amp;lt;= lim; ++i)
        base[i] = base[i - 1] * p;
    while (T--) &amp;#123;
        read(n);
        bld(1, 1, n);
        for (int i = 1; i &amp;lt;= n; ++i)
            read(a[i]);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int len = min(n - a[i], a[i] - 1);
            if (i &amp;gt; 1) &amp;#123;
                upd(1, a[i - 1], 1);
            &amp;#125;
            if (len == 0)
                continue;
            int l = a[i] - len;
            int r = a[i] + len;
            if (qryl(1, l, a[i] - 1) !=
                qryr(1, a[i] + 1, r)) &amp;#123;
                puts(&amp;quot;Y&amp;quot;);
                goto isSol;
            &amp;#125;
        &amp;#125;
        puts(&amp;quot;N&amp;quot;);
        isSol: ;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
int main() &amp;#123;
    XSC062::main();
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&#34;小奇的糖果&#34;&gt;小奇的糖果&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://hydro.ac/p/bzoj-P4548&#34; class=&#34;uri&#34;&gt;https://hydro.ac/p/bzoj-P4548&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个有颜色（&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 种）的点在平面上，在平面上取一条水平的线段，可以选择线段上方的所有点，也可以选择下方的所有点。找出一条线段和选取的方向，使得在选取的点不包含所有颜色的前提下，最大化选到点的数量。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(N,M\le 10^6,|x|,|y|\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先离散化 + 按 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 排序降一维，贪心地枚举某种颜色 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 不选。考虑线段在平面最底部时的答案，取出所有颜色为 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 的点的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 坐标，只能选择相邻的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 之间的所有点。枚举每一对相邻的点计算答案。把线段上移，如果碰到了一个颜色为 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 的点，就说明这个点不再参与限制，删去即可，该点原前驱和后继围出来的区间就能够更新答案。用链表 / 单调栈就能很快地维护。&lt;/p&gt;
&lt;p&gt;先枚举颜色再跑扫描线是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2\log n)\)&lt;/span&gt; 的，考虑优化。注意到数据结构里存在当前颜色没有影响，因为一定不在询问区间内。整体做扫描线，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e5 + 5;
struct _ &amp;#123;
    int x, y, c;
    bool operator&amp;lt; (const _ &amp;amp;q) const &amp;#123;
        return y &amp;lt; q.y;
    &amp;#125;
&amp;#125;;
_ a[maxn];
int s[maxn], t[maxn];
int ls[maxn], rs[maxn];
int cp[maxn], cn[maxn];
int pre[maxn], nex[maxn];
std::vector&amp;lt;int&amp;gt; g[maxn];
int div[maxn], Bit[maxn];
int T, n, k, tot, cnt, now, res;
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int lowbit(int x) &amp;#123; return x &amp;amp; -x; &amp;#125;
void add(int x, int v) &amp;#123;
    for (; x &amp;lt;= n; x += lowbit(x)) Bit[x] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0;
    for (; x; x -= lowbit(x)) res += Bit[x];
    return res;
&amp;#125;
int ask(int l, int r) &amp;#123;
    if (l &amp;gt; r) return 0;
    return ask(r) - ask(l - 1);
&amp;#125;
int main() &amp;#123;
//  freopen(&amp;quot;1.in&amp;quot;, &amp;quot;r&amp;quot;, stdin); 
    read(T);
    while (T--) &amp;#123;
        read(n), read(k), now = res = 0;
        for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
            s[i] = ++now, t[i] = ++now;
            div[s[i]] = 0, div[t[i]] = n + 1;
            nex[s[i]] = t[i], pre[t[i]] = s[i];
            pre[s[i]] = nex[t[i]] = 0;
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            read(a[i].x), read(a[i].y), read(a[i].c);
            ls[i] = a[i].x, rs[i] = a[i].y;
        &amp;#125;
        std::sort(a + 1, a + n + 1, [&amp;amp;](_ x, _ y) &amp;#123; return x.x &amp;lt; y.x; &amp;#125;);
        std::sort(ls + 1, ls + n + 1);
        std::sort(rs + 1, rs + n + 1);
        tot = std::unique(ls + 1, ls + n + 1) - ls - 1;
        cnt = std::unique(rs + 1, rs + n + 1) - rs - 1;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            a[i].x = std::lower_bound(ls + 1, ls + tot + 1, a[i].x) - ls;
            a[i].y = std::lower_bound(rs + 1, rs + cnt + 1, a[i].y) - rs;
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            div[++now] = a[i].x;
            add(a[i].x, 1), g[a[i].y].push_back(now);
            pre[now] = pre[t[a[i].c]], nex[pre[t[a[i].c]]] = now;
            pre[t[a[i].c]] = now, nex[now] = t[a[i].c];
        &amp;#125;
        memcpy(cp, pre, sizeof (cp));
        memcpy(cn, nex, sizeof (cn));
        for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
            for (int j = s[i]; j != t[i]; j = nex[j])
                res = max(res, ask(div[j] + 1, div[nex[j]] - 1));
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (auto j : g[i]) add(div[j], -1);
            for (auto j : g[i]) &amp;#123;
                res = max(res, ask(div[pre[j]] + 1, div[nex[j]] - 1));
                nex[pre[j]] = nex[j], pre[nex[j]] = pre[j];
            &amp;#125;
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) add(a[i].x, 1);
        for (int i = n; i; --i) &amp;#123;
            for (auto j : g[i]) add(div[j], -1);
            for (auto j : g[i]) &amp;#123;
                res = max(res, ask(div[cp[j]] + 1, div[cn[j]] - 1));
                cn[cp[j]] = cn[j], cp[cn[j]] = cp[j];
            &amp;#125;
        &amp;#125;
        print(res, &amp;#39;\n&amp;#39;);
        for (int i = 1; i &amp;lt;= n; ++i)
            g[i].clear(), g[i].shrink_to_fit();
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;rmscne&#34;&gt;rmscne&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7907&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7907&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的序列，&lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次询问 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 中的最短子区间 &lt;span class=&#34;math inline&#34;&gt;\([l&amp;#39;,r&amp;#39;]\)&lt;/span&gt;，使得其包含 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 中出现的全部值。输出长度即可。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q,V\le 2\times 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;区间里面找子区间也是扫描线经典问题。&lt;/p&gt;
&lt;p&gt;区间种类数会有几种思路：集合哈希、前驱后继、莫队之类。PS：这个题用 ODT 可以拿到最优解&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(i=1\sim n\)&lt;/span&gt;，依次考虑 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 作为右端点的情况。线段树维护每个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 作为左端点时的 &lt;span class=&#34;math inline&#34;&gt;\(i-r_j\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\([j, r_j]\)&lt;/span&gt; 是与 &lt;span class=&#34;math inline&#34;&gt;\([j,i]\)&lt;/span&gt; 种类相同的最小区间。&lt;/p&gt;
&lt;p&gt;询问的时候，只需要找到最大的 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\([j, r]\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 种类相同，求 &lt;span class=&#34;math inline&#34;&gt;\([l, j&amp;#39;]\)&lt;/span&gt; 的区间和即可。找 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt; 可以记录前驱后继，初始每个 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 对应的 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt; 就是自己。若加入了一个与 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 相同的新元素，那么 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 就不再有贡献，此时 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt; 就会继承 &lt;span class=&#34;math inline&#34;&gt;\(l+1\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt;，这个过程用并查集即可简单维护。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 2e6;
const int maxn = 2e6 + 5;
const int maxm = 5e7 + 5;
const int inf = 0x3f3f3f3f;
struct &amp;#123; int l, r, u, d; &amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int tot;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void pushdown(int p) &amp;#123;
    if (~t[p].d) &amp;#123;
        t[lt].d = t[rt].d = t[p].d;
        t[lt].u = t[p].d - t[lt].r + 1;
        t[rt].u = t[p].d - t[rt].r + 1;
        t[p].d = -1;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r, t[p].d = -1;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void upd(int p, int l, int r, int v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d = v, t[p].u = v - t[p].r + 1;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        upd(lt, l, r, v);
    if (r &amp;gt; mid)
        upd(rt, l, r, v);
    t[p].u = std::min(t[lt].u, t[rt].u);
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1, res = inf;
    if (l &amp;lt;= mid)
        res = ask(lt, l, r);
    if (r &amp;gt; mid)
        res = std::min(res, ask(rt, l, r));
    return res;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, q;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), la(lim + 1), pre(n + 1), f(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        pre[i] = la[a[i]], la[a[i]] = i, f[i] = i;
    &amp;#125;
    std::cin &amp;gt;&amp;gt; q;
    std::vector&amp;lt;int&amp;gt; res(q + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; t(n + 1);
    for (int i = 1, l, r; i &amp;lt;= q; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        t[r].emplace_back(l, i);
    &amp;#125;
    bld(1, 1, n);
    std::function&amp;lt;int(int)&amp;gt; find = [&amp;amp;](int x) &amp;#123;
        return x == f[x] ? x : f[x] = find(f[x]);
    &amp;#125;;
    auto merge = [&amp;amp;](int x, int y) &amp;#123;
        x = find(x), y = find(y);
        f[std::min(x, y)] = std::max(x, y);
        return;
    &amp;#125;;
    for (int r = 1; r &amp;lt;= n; ++r) &amp;#123;
        if (pre[r])
            merge(pre[r], pre[r] + 1);
        upd(1, pre[r] + 1, r, r);
        for (auto [l, i] : t[r])
            res[i] = ask(1, l, find(l));
    &amp;#125;
    for (int i = 1; i &amp;lt;= q; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;颜色&#34;&gt;# 颜色&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4065&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4065&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个元素，每个元素有一个颜色。选择若干颜色（不能全选或全不选），问有多少种选取方案使得拥有这些颜色的点是一段连续的区间。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 3\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;势能线段树&#34;&gt;势能线段树&lt;/h3&gt;
&lt;h4 id=&#34;市场&#34;&gt;# 市场&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/6029&#34; class=&#34;uri&#34;&gt;https://loj.ac/p/6029&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;segment-tree-beats&#34;&gt;# Segment Tree Beats!&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;维护区间取 min，区间求和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pdf P57&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;segment-tree-beats-plus&#34;&gt;# Segment Tree Beats! Plus&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;维护区间加，区间取 min，区间求和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pdf P60&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;最假女选手&#34;&gt;# 最假女选手&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/6565&#34; class=&#34;uri&#34;&gt;https://loj.ac/p/6565&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;mzl-loves-segment-tree&#34;&gt;# Mzl loves segment tree&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/problem/10203&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/problem/10203&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pdf P66&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;ctsn-loves-segment-tree&#34;&gt;# CTSN loves segment tree&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/U180387&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/U180387&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;前进四segment-tree-beats-ver&#34;&gt;# 前进四（segment tree beats ver）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://uoj.ac/problem/515&#34; class=&#34;uri&#34;&gt;https://uoj.ac/problem/515&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另见 &lt;a href=&#34;#-前进四楼房重建-ver&#34;&gt;楼房重建 ver&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;基础数据结构练习题&#34;&gt;# 基础数据结构练习题&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://uoj.ac/problem/228&#34; class=&#34;uri&#34;&gt;https://uoj.ac/problem/228&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;线段树-3&#34;&gt;# 线段树 3&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6242&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6242&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;赛格蒙特彼茨&#34;&gt;# 赛格蒙特彼茨&lt;/h4&gt;
&lt;p&gt;pdf P70&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;堕天作战-test_98&#34;&gt;# 堕天作战 TEST_98&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9069&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9069&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;线段树分治&#34;&gt;线段树分治&lt;/h3&gt;
&lt;h4 id=&#34;八纵八横&#34;&gt;# 八纵八横&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3733&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3733&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;笛卡尔树&#34;&gt;笛卡尔树&lt;/h2&gt;
&lt;p&gt;一些思考方式和 trick 吧&lt;/p&gt;
&lt;h3 id=&#34;由乃救爷爷&#34;&gt;* 由乃救爷爷&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3793&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3793&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;尽可能快地维护随机序列区间最值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随机序列笛卡尔树期望深度是 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;。就可以做了。&lt;/p&gt;
&lt;p&gt;来自 &lt;a href=&#34;https://www.luogu.com/article/hj9ci08q&#34;&gt;UnyieldingTrilobite 的文章&lt;/a&gt;：同样可以用悬线！&lt;a href=&#34;/20231117/#随机序列悬线结合分块&#34;&gt;悬线 + 分块&lt;/a&gt; 就可以做了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;情景剧最值的性质维护方式的取舍&#34;&gt;* 情景剧（最值的性质，维护方式的取舍）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4273/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4273/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的序列 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，找到一个区间，使得 区间长度 &lt;span class=&#34;math inline&#34;&gt;\(\times\)&lt;/span&gt; 区间最大值 &lt;span class=&#34;math inline&#34;&gt;\(\times\)&lt;/span&gt; 区间最小值 最大。输出最大值。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6,V\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;容易想到建笛卡尔树。这里的 最大值 和 最小值 地位相等吗？为什么？&lt;/li&gt;
&lt;li&gt;如果我们是钦定最大值，再去最大化『最小值 &lt;span class=&#34;math inline&#34;&gt;\(\times\)&lt;/span&gt; 区间长』，好像没办法做，因为这个最大贡献没什么性质&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但如果钦定最小值，能取到的最长区间就是在小根笛卡尔树上的管辖区间，显然区间越长取到的最大值也越大，直接取这里的最大值即可&lt;/p&gt;
所以最大值和最小值地位不等是因为，区间长和最大值大小是正相关的，所以只需要最大化区间长，最大值也就最大化了&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所以在小根笛卡尔树上维护区间最大值即可&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;小蓝的好友&#34;&gt;# 小蓝的好友&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2611&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2611&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;星白-by-ttpandas笛卡尔树-dsu-on-tree&#34;&gt;星白 by TTpandaS（笛卡尔树 + dsu on tree）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6517/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6517/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的排列 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，回答 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 个询问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，是否存在 &lt;span class=&#34;math inline&#34;&gt;\(l\le x&amp;lt;y\le r\)&lt;/span&gt;，使得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_x&amp;lt;a_y\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(a_x\)&lt;/span&gt; 不为 &lt;span class=&#34;math inline&#34;&gt;\([x,y]\)&lt;/span&gt; 中最小值；&lt;/li&gt;
&lt;li&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\([x, y]\)&lt;/span&gt; 中最小值，则 &lt;span class=&#34;math inline&#34;&gt;\(a_i\mid (a_x\cdot a_y)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 3\times 10^5,q\le10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;容易想到对于 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 反过来找 &lt;span class=&#34;math inline&#34;&gt;\([x,y]\)&lt;/span&gt;。如果建立小根笛卡尔树，在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的左边找 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;、右边找 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个自然的想法是对于左侧的每个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，维护最近的合法 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;；或是对于右侧的每个 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;，维护最近的合法 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/p&gt;
做一个 DSU on Tree，哪边区间短就维护哪边，是单 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要解决点内预处理，以 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为例，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 和当前点 &lt;span class=&#34;math inline&#34;&gt;\((p,l,r)\)&lt;/span&gt;，需要查询 &lt;span class=&#34;math inline&#34;&gt;\((p, r]\)&lt;/span&gt; 中最小的 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(a_y\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {a_p}{\gcd(a_x,a_p)}\)&lt;/span&gt; 的倍数。离线下来扫描线，&lt;del&gt;开 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 棵线段树&lt;/del&gt;，跑 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 次树状数组，用 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 更新所有 &lt;span class=&#34;math inline&#34;&gt;\(a_y\)&lt;/span&gt; 因数在 &lt;span class=&#34;math inline&#34;&gt;\(a_y\)&lt;/span&gt; 处的 min / max，可以在两个 log 内获得支配对类似物。&lt;/p&gt;
不是很理解为什么题目要再加一个偏序限制，除了增加代码量和用时外似乎并没有什么作用？&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询时直接 rmq（这里唐了写了 st 表，实际上只需要前后缀）即可。整体复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2 n)\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int LEN = (1 &amp;lt;&amp;lt; 20);
#ifdef ONLINE_JUDGE
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    read(n);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; mul(n + 1);
    std::vector&amp;lt;int&amp;gt; a(n + 1), l(n + 1), r(n + 1), pos(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]), pos[a[i]] = i;
        for (l[i] = i; l[i] != 1 &amp;amp;&amp;amp; a[i] &amp;lt; a[l[i] - 1]; l[i] = l[l[i] - 1]);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = i; j &amp;lt;= n; j += i)
            mul[i].push_back(pos[j]);
        std::sort(mul[i].begin(), mul[i].end());
    &amp;#125;
    for (int i = n; i; --i)
        for (r[i] = i; r[i] != n &amp;amp;&amp;amp; a[i] &amp;lt; a[r[i] + 1]; r[i] = r[r[i] + 1]);
    struct query &amp;#123; int id, l, r; &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;query&amp;gt; &amp;gt; ql(n + 1), qr(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        if (i - l[i] &amp;lt; r[i] - i)
            for (int j = l[i]; j &amp;lt; i; ++j)
                qr[a[i] / std::__gcd(a[i], a[j])].push_back(&amp;#123; j, i + 1, r[i] &amp;#125;);
        else
            for (int j = i + 1; j &amp;lt;= r[i]; ++j)
                ql[a[i] / std::__gcd(a[i], a[j])].push_back(&amp;#123; j, l[i], i - 1 &amp;#125;);
    std::vector&amp;lt;int&amp;gt; u(n + 1), rt(n + 1), bit(n + 1);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] = v;
        return;
    &amp;#125;;
    std::function&amp;lt;int(int)&amp;gt; ask = [&amp;amp;](int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res = std::max(res, bit[x]);
        return res;
    &amp;#125;;
    for (int fac = 1; fac &amp;lt;= n; ++fac) &amp;#123;
        std::sort(ql[fac].begin(), ql[fac].end(), [&amp;amp;](query x, query y) &amp;#123; return x.r &amp;lt; y.r; &amp;#125;);
        auto i = mul[fac].begin();
        for (auto [id, l, r] : ql[fac]) &amp;#123;
            for (; i != mul[fac].end() &amp;amp;&amp;amp; *i &amp;lt;= r; ++i)
                add(a[*i], *i);
            auto mx(ask(a[id]));
            if (mx &amp;gt;= l)
                u[id] = std::max(u[id], mx);
        &amp;#125;
        for (auto i : mul[fac])
            add(a[i], 0);
    &amp;#125;
    bit.assign(n + 1, 0x3f3f3f3f);
    ask = [&amp;amp;](int x) &amp;#123;
        int res = 0x3f3f3f3f;
        for (; x; x -= lowbit(x))
            res = std::min(res, bit[x]);
        return res;
    &amp;#125;;
    for (int fac = 1; fac &amp;lt;= n; ++fac) &amp;#123;
        std::sort(qr[fac].begin(), qr[fac].end(), [&amp;amp;](query x, query y) &amp;#123; return x.l &amp;gt; y.l; &amp;#125;);
        std::reverse(mul[fac].begin(), mul[fac].end());
        auto i = mul[fac].begin();
        for (auto [id, l, r] : qr[fac]) &amp;#123;
            for (; i != mul[fac].end() &amp;amp;&amp;amp; *i &amp;gt;= l; ++i)
                add(n - a[*i] + 1, *i);
            auto mn(ask(n - a[id] + 1));
            if (mn &amp;lt;= r)
                u[mn] = std::max(u[mn], id);
        &amp;#125;
        for (auto i : mul[fac])
            add(n - a[i] + 1, 0x3f3f3f3f);
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; st(20, std::vector&amp;lt;int&amp;gt; (n + 1));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        // if (u[i] != 0)
        //     printf(&amp;quot;%d %d\n&amp;quot;, u[i], i);
        st[0][i] = u[i];
    &amp;#125;
    for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
        for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
            st[j][i] = std::max(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
    auto askmx = [&amp;amp;](int l, int r) &amp;#123;
        int k = std::__lg(r - l + 1);
        return std::max(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
    &amp;#125;;
    int q;
    read(q);
    for (int l, r; q--; ) &amp;#123;
        read(l), read(r);
        std::cout &amp;lt;&amp;lt; (askmx(l, r) &amp;gt;= l ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;periodni&#34;&gt;# PERIODNI&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6453&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6453&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cdq-分治&#34;&gt;CDQ 分治&lt;/h2&gt;
&lt;h3 id=&#34;coloring-nodes偏序很隐秘&#34;&gt;# Coloring Nodes（偏序很隐秘）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P12423&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P12423&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;字典树&#34;&gt;字典树&lt;/h2&gt;
&lt;p&gt;字典树作为 log 数据结构的时候，等价权值线段树，而且支持合并、分裂（权值线段树 also OK，强调一下而已）&lt;/p&gt;
&lt;p&gt;有些情景 Trie 写起来会比权值线段树舒服一些，比如值域操作、二进制操作之类&lt;/p&gt;
&lt;h3 id=&#34;异或粽子&#34;&gt;# 异或粽子&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5283&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5283&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;friends&#34;&gt;# Friends&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF241B&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF241B&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="线段树" />
        <updated>2025-08-19T01:44:25.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250816/</id>
        <title>近期杂题 II</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250816/"/>
        <content type="html">&lt;p&gt;和 Aug 9th 的杂题不太能合并，所以分开了&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-gas-fire-extinguishers&#34;&gt;B. GAS-Fire Extinguishers&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3479&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3479&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显然可以贪心，不妨从下到上，记录当前遍历过的、空余出来的灭火器（其实算的是可以供给的房间数）和还未分配灭火器的房间，按距离为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim k\)&lt;/span&gt; 分组。&lt;/p&gt;
&lt;p&gt;不难发现如果在某个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 处存在距离为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的空闲灭火器，可以贪心地分配给 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;；如果存在距离为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的未分配房间，也可以在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 处放置灭火器并分配给这些房间。类似地，进行两两配对一定是不劣的。&lt;/p&gt;
&lt;p&gt;发现同子树内距离为 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 的点对留到 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 再匹配是不行的，因为这时距离会变成 &lt;span class=&#34;math inline&#34;&gt;\(k+1\)&lt;/span&gt;，不能匹配上；可以感受到这样是更劣的。&lt;/p&gt;
&lt;p&gt;然后就可以做了，根节点特殊乱贪心一下就行了。记得开 long long。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
#define int long long
signed main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, s, k, res = 0;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; s &amp;gt;&amp;gt; k;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1), p(n + 1, std::vector&amp;lt;int&amp;gt; (k + 1)), q(n + 1, std::vector&amp;lt;int&amp;gt; (k + 1));
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        for (auto i : g[x])
            if (i != fa)  &amp;#123;
                DFS(i, x);
                for (int j = 0; j &amp;lt; k; ++j)
                    p[x][j + 1] += p[i][j], q[x][j + 1] += q[i][j];
            &amp;#125;
        ++q[x][0];
        if (x != 1) &amp;#123;
            int v = (q[x][k] + s - 1) / s;
            p[x][0] = v * s, res += v;
            for (int i = 0; i &amp;lt;= k; ++i) &amp;#123;
                int v = std::min(p[x][i], q[x][k - i]);
                p[x][i] -= v, q[x][k - i] -= v;
            &amp;#125;
            for (int i = 0; i &amp;lt; k; ++i) &amp;#123;
                int v = std::min(p[x][i], q[x][k - 1 - i]);
                p[x][i] -= v, q[x][k - 1 - i] -= v;
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            // std::cerr &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            int sum = 0ll, r = 0;
            for (int i = k; ~i; --i) &amp;#123;
                sum += p[x][k - i];
                // std::cerr &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
                int v = std::min(sum, q[x][i]);
                sum -= v, q[x][i] -= v;
                r += q[x][i];
            &amp;#125;
            res += (r + s - 1) / s;
        &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c.-扫地机器人&#34;&gt;C. 扫地机器人&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6502/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6502/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题意：给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 堆货物，每堆货物有重量 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 和一个参数 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;。有一个初始负载为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;、负载上限为 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 的机器人，从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 遍历这些货物，对每一处货物执行以下操作，直到清空这堆货物：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前负载未满：可以选择进行装载直到达到负载上限，或货物清空。花费 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 的代价。&lt;/li&gt;
&lt;li&gt;不管当前负载满没满：可以选择清空当前负载，花费 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 的代价。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一处可以任意操作，要求遍历完之后机器人负载为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，问最小代价。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^5,c\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;题面是重构过的，原来的题面太有歧义了。绝大多数人没做出来就是因为没看懂题吧！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;考虑暴力，可以想到令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示处理完 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 过后负载为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的最小代价（显然 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,c}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,0}\)&lt;/span&gt; 是等效的，故舍弃前者）。记 &lt;span class=&#34;math inline&#34;&gt;\(k=\left\lceil\dfrac {v_i}c\right\rceil,w=(v_i\bmod c - 1)\bmod c+1\)&lt;/span&gt;，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,(j+v_i)\bmod c}\gets f_{i-1,j}+k\cdot a_i+(k-1)\cdot b +
\begin{cases}
b&amp;amp;j+w=c\\
a_i+b&amp;amp;j+w&amp;gt; c\\
0&amp;amp;\text{otherwise}
\end{cases}\\
f_{i,0}\gets f_{i,j}+b
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;发现 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 之间是存在对应关系的，所以考虑直接继承（真实的 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 应该位于 &lt;span class=&#34;math inline&#34;&gt;\(-s_i\)&lt;/span&gt; 的位置），再做全局加、区间加，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,0}\)&lt;/span&gt; 的转移是全局 min，线段树维护即可；每次只会新增一个状态，动态开点即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 5e6 + 5;
const __int128 inf = 1e18;
struct &amp;#123;
    int l, r;
    __int128 u, d;
&amp;#125; t[maxn];
#define lt t[p].l
#define rt t[p].r
int tot;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d += t[p].d, t[lt].u += t[p].d;
        t[rt].d += t[p].d, t[rt].u += t[p].d;
        t[p].d = 0ll;
    &amp;#125;
    return;
&amp;#125;
void upd(int &amp;amp;p, int l, int r, int x, __int128 v) &amp;#123;
    if (!p)
        p = ++tot, t[p].u = v;
    else
        t[p].u = std::min(t[p].u, v);
    if (l == r)
        return;
    pushdown(p);
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, l, mid, x, v);
    else
        upd(rt, mid + 1, r, x, v);
    return;
&amp;#125;
void add(int p, int l, int r, int ql, int qr, __int128 v) &amp;#123;
    if (!p)
        return;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr) &amp;#123;
        t[p].d += v, t[p].u += v;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (ql &amp;lt;= mid)
        add(lt, l, mid, ql, qr, v);
    if (qr &amp;gt; mid)
        add(rt, mid + 1, r, ql, qr, v);
    t[p].u = std::min(t[lt].u, t[rt].u);
    return;
&amp;#125;
__int128 ask(int p, int l, int r, int x) &amp;#123;
    if (l == r)
        return t[p].u;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (x &amp;lt;= mid)
        return ask(lt, l, mid, x);
    return ask(rt, mid + 1, r, x);
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;robot.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;robot.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;ex_robot4.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    t[0].u = inf;
    int n, b, c, p0 = 0, rt = 0;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; c &amp;gt;&amp;gt; b;
    std::vector&amp;lt;int&amp;gt; a(n + 1), v(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; v[i];
    upd(rt, 0, c - 1, 0, 0ll);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        __int128 k = (v[i] + c - 1) / c, w = (v[i] % c == 0 ? c : v[i] % c);
        t[rt].d += k * a[i] + (k - 1) * b;
        t[rt].u += k * a[i] + (k - 1) * b;
        if (w &amp;lt;= c)
            add(rt, 0, c - 1, (c - w + p0) % c, (c - w + p0) % c, b);
        if (w != 1) &amp;#123;
            int l = (c - w + p0 + 1) % c, r = (p0 + c - 1) % c;
            if (l &amp;lt;= r)
                add(rt, 0, c - 1, l, r, a[i] + b);
            else &amp;#123;
                add(rt, 0, c - 1, 0, r, a[i] + b);
                add(rt, 0, c - 1, l, c - 1, a[i] + b);
            &amp;#125;
        &amp;#125;
        p0 = (p0 + c - v[i] % c) % c;
        upd(rt, 0, c - 1, p0, t[rt].u + b);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; (long long)ask(rt, 0, c - 1, p0) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-套娃&#34;&gt;D. 套娃&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6502/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6502/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题意：给定初始为全 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的数组 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n + 1}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 次单点 +1 操作，每次操作后，求解：&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的前缀和数组为 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，找到一个最小的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，使得对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，均有 &lt;span class=&#34;math inline&#34;&gt;\(k\cdot i\ge s_i\)&lt;/span&gt; 成立。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6\)&lt;/span&gt;，时限 0.5s。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;趣事一则&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;考场上最后 10min 拿到题，憋了一个能拿到 96pts 的假做法：注意到前缀和是单增的，需要维护最大的 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {s_i}i\)&lt;/span&gt;，由于后缀 +1 带来的影响很小，所以可以猜测在大多数情况下最大的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 只会在原来的和修改的点之间变化。只用 10 行的核心代码就能拿到很多分。但是居然有这么多，可能出题人都没有想到真有人敢交这种做法吧。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
    std::freopen(&amp;quot;doll.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;doll.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    auto stime = std::chrono::steady_clock::now();
    int n, res = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; bit(n + 2);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x) &amp;#123;
        for (; x &amp;lt;= n + 1; x += lowbit(x))
            ++bit[x];
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    int p = 1;
    for (int i = 1, x; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x, add(++x);
        long long s = ask(x), t = ask(p);
        if (s * p == t * x ? x &amp;gt; p : s * p &amp;gt; t * x)
            p = x;
        else
            s = t;
        if (s &amp;gt; p * res)
            ++res;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    std::cerr &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt;(std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;很容易写出暴力，观察样例就能发现每次修改后答案最多增加 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。记当前答案为 &lt;span class=&#34;math inline&#34;&gt;\(res\)&lt;/span&gt;，线段树维护 &lt;span class=&#34;math inline&#34;&gt;\(s_i-res\cdot i\)&lt;/span&gt; 的最小值，若其为负则 res++，然后重构线段树（等差数列和 min 不兼容）。&lt;/p&gt;
&lt;p&gt;怎么又有不等式 😱&lt;/p&gt;
&lt;p&gt;目的是在本来合法的范围里找到新的不合法值。考虑合法范围：&lt;span class=&#34;math inline&#34;&gt;\(s_i-res\cdot i\ge 0\)&lt;/span&gt;，解一下得到 &lt;span class=&#34;math inline&#34;&gt;\(i\le \dfrac {s_i}{res}\)&lt;/span&gt;，放缩得到 &lt;span class=&#34;math inline&#34;&gt;\(i\le\dfrac {n}{res}\)&lt;/span&gt;，每次 &lt;span class=&#34;math inline&#34;&gt;\(res\)&lt;/span&gt; 变化时只重构 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {n}{res}\)&lt;/span&gt; 以前的位置，重构的总长是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\ln n)\)&lt;/span&gt; 的。（线段树建树是线性的）&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e6 + 5;
const int inf = 0x3f3f3f3f;
struct &amp;#123;
    int l, r, u, d;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void bld(int p, int l, int r) &amp;#123;
    t[p].u = t[p].l = l, t[p].r = r;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d += t[p].d, t[rt].d += t[p].d;
        t[lt].u -= t[p].d, t[rt].u -= t[p].d;
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (x &amp;lt;= t[p].l) &amp;#123;
        ++t[p].d, --t[p].u;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x);
    add(rt, x);
    t[p].u = std::min(t[lt].u, t[rt].u);
    // printf(&amp;quot;[%d, %d]: %d, [%d, %d]: %d\n&amp;quot;, t[p].l, mid, t[lt].u, mid + 1, t[p].r, t[rt].u);
    return;
&amp;#125;
void rem(int p, int r) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        t[p].u += t[p].l;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        rem(lt, r), t[rt].u = inf;
    else
        rem(lt, r), rem(rt, r);
    t[p].u = std::min(t[lt].u, t[rt].u);
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;doll.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;doll.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    bld(1, 1, n + 1);
    for (int i = 1, x, res = 1, now = n; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x;
        if (x &amp;lt;= now)
            add(1, ++x);
        if (t[1].u &amp;lt; 0) &amp;#123;
            std::cout &amp;lt;&amp;lt; ++res &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
            rem(1, now = n / res);
        &amp;#125;
        else
            std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
        // puts(&amp;quot;&amp;quot;);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---subarray-sum-divisibility&#34;&gt;E - Subarray Sum Divisibility&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc419/tasks/abc419_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc419/tasks/abc419_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模意义下的数列全等，可以对应原数组全等、差分全等、前缀和全等（都是模意义下的，还有其他的一些线性和非线性的变换也可以）&lt;/p&gt;
&lt;p&gt;本着修改的点尽量少的想法，如果题目给定单点修改就可以在原数组上做文章，给定区间修改可以考虑差分数组，前缀和对于一些区间查询有优势&lt;/p&gt;
&lt;p&gt;其他两种用得也很多，像这题只需要用原数组全等就可以做了&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, m, l;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; l;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; u(l + 1, std::vector&amp;lt;int&amp;gt; (m));
    for (int i = 1; i &amp;lt;= l; ++i)
        for (int j = 0; j &amp;lt; m; ++j)
            for (int k = i; k &amp;lt;= n; k += l)
                u[i][j] += (j + m - a[k]) % m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(l + 1, std::vector&amp;lt;int&amp;gt; (m, inf));
    f[0][0] = 0;
    for (int i = 1; i &amp;lt;= l; ++i)
        for (int j = 0; j &amp;lt; m; ++j)
            for (int k = 0; k &amp;lt; m; ++k)
                f[i][(j + k) % m] = std::min(f[i][(j + k) % m], f[i - 1][j] + u[i][k]);
    std::cout &amp;lt;&amp;lt; f[l][0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f---all-included&#34;&gt;F - All Included&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc419/tasks/abc419_f&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc419/tasks/abc419_f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原题意转化为在 AC 自动机上走 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 步，要求经过 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个叶子的方案数。不太可做，转化成容斥（令字符串终点不可达）。在外层枚举步数暴力游走。&lt;/p&gt;
&lt;p&gt;要求恰好走 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 步，也可以用矩阵；但原图很稀疏，所以矩阵并没有优势。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int tot = 1, T[805][26], fail[805];
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, l;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; l;
    std::vector&amp;lt;std::string&amp;gt; a;
    &amp;#123;
        std::vector&amp;lt;std::string&amp;gt; s(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; s[i];
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            bool flag = 1;
            for (int j = 1; j &amp;lt;= n; ++j)
                if (j != i)
                    if (s[j].find(s[i]) != std::string::npos) &amp;#123;
                        flag = 0;
                        break;
                    &amp;#125;
            if (flag)
                a.push_back(s[i]);
        &amp;#125;
        n = (int)a.size();
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; pos(n);
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        int &amp;amp;p = pos[i];
        for (auto j : a[i]) &amp;#123;
            if (!T[p][j - &amp;#39;a&amp;#39;])
                T[p][j - &amp;#39;a&amp;#39;] = tot++;
            p = T[p][j - &amp;#39;a&amp;#39;];
        &amp;#125;
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    auto res = 0ll;
    int siz = 1 &amp;lt;&amp;lt; n;
    for (int i = 0; i &amp;lt; siz; ++i) &amp;#123;
        std::vector&amp;lt;int&amp;gt; tag(tot);
        for (int j = 0; j &amp;lt; n; ++j)
            if ((i &amp;gt;&amp;gt; j) &amp;amp; 1)
                tag[pos[j]] = 1;
        std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(l + 1, std::vector&amp;lt;long long&amp;gt; (tot));
        f[0][0] = 1ll;
        for (int j = 0; j &amp;lt; l; ++j)
            for (int k = 0; k &amp;lt; tot; ++k)
                for (int a = 0; a &amp;lt; 26; ++a) &amp;#123;
                    if (!tag[T[k][a]])
                        (f[j + 1][T[k][a]] += f[j][k]) %= mod;
                &amp;#125;
        int k = (__builtin_popcount(i) &amp;amp; 1 ? mod - 1 : 1);
        auto s = 0ll;
        for (int j = 0; j &amp;lt; tot; ++j)
            if (!tag[j])
                (s += f[l][j]) %= mod;
        (res += k * s) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;g---count-simple-paths-2&#34;&gt;G - Count Simple Paths 2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc419/tasks/abc419_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc419/tasks/abc419_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很新的性质。考虑『以 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为起点的简单路径数』和反祖边数量的关系：选定一条反祖边必须被经过时（显然只有一种可能的经过方向），树的形态发生变化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;也就是说，一种反祖边的选取方案对应一种树，遍历其从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 开始的简单路径复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。设反祖边数量为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，那么合法的方案数不超过 &lt;span class=&#34;math inline&#34;&gt;\(2^k\)&lt;/span&gt;，暴力 DFS 的整个图复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(2^k\cdot n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;发现很多跟反祖边无关的遍历是不必要的（只有一种走法，可以设成边权），考虑对所有连接反祖边的点建立虚树，并把原树上的反祖边也移到虚树上，就能 &lt;span class=&#34;math inline&#34;&gt;\(O(2^k\cdot k)\)&lt;/span&gt; 解决问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1), g1(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g2(n + 1);
    for (int x, y; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tag(n + 1), vis(n + 1);
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; be;
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        static int now = 0;
        tag[x] = 1, vis[x] = ++now;
        for (auto i : g[x])
            if (!tag[i]) &amp;#123;
                // fprintf(stderr, &amp;quot;%d -&amp;gt; %d\n&amp;quot;, x, i);
                g1[x].push_back(i), DFS(i, x);
            &amp;#125;
            else if (i != fa &amp;amp;&amp;amp; vis[i] &amp;lt; vis[x])
                be.emplace_back(i, x);
        return;
    &amp;#125;;
    DFS(1, -1);
    &amp;#123; // 求虚树
        std::vector&amp;lt;int&amp;gt; dep(n + 1), fa(n + 1), top(n + 1), siz(n + 1), son(n + 1), dfn(n + 1), rfn(n + 1);
        std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
            siz[x] = 1;
            for (auto i : g1[x]) &amp;#123;
                dep[i] = dep[x] + 1;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
            return;
        &amp;#125;;
        DFS(1);
        DFS = [&amp;amp;](int x) &amp;#123;
            static int now = 0;
            dfn[x] = ++now;
            if (son[x])
                top[son[x]] = top[x], DFS(son[x]);
            for (auto i : g1[x])
                if (i != son[x])
                    top[i] = i, DFS(i);
            rfn[x] = now;
            // printf(&amp;quot;%d: [%d, %d]\n&amp;quot;, x, dfn[x], rfn[x]);
            return;
        &amp;#125;;
        top[1] = 1, DFS(1);
        auto getLCA = [&amp;amp;](int x, int y) &amp;#123;
            for (; top[x] != top[y]; x = fa[top[x]])
                if (dep[top[x]] &amp;lt; dep[top[y]])
                    std::swap(x, y);
            return dep[x] &amp;lt; dep[y] ? x : y;
        &amp;#125;;
        tag.assign(n + 1, 0);
        tag[1] = tag[n] = 1;
        for (auto [u, v] : be)
            tag[u] = 1, tag[v] = 1;
        std::vector&amp;lt;int&amp;gt; p;
        for (int i = 1; i &amp;lt;= n; ++i)
            if (tag[i])
                p.push_back(i);
        std::sort(p.begin(), p.end(), [&amp;amp;](int i, int j) &amp;#123; return dfn[i] &amp;lt; dfn[j]; &amp;#125;);
        for (int i = 1; i &amp;lt; (int)p.size(); ++i) &amp;#123;
            int fa = getLCA(p[i], p[i - 1]);
            if (!tag[fa])
                tag[fa] = 1;
        &amp;#125;
        p.clear();
        for (int i = 1; i &amp;lt;= n; ++i)
            if (tag[i])
                p.push_back(i);
        std::sort(p.begin(), p.end(), [&amp;amp;](int i, int j) &amp;#123; return dfn[i] &amp;lt; dfn[j]; &amp;#125;);
        std::vector&amp;lt;int&amp;gt; st;
        for (auto i : p) &amp;#123;
            if (st.empty())
                st.push_back(i);
            else &amp;#123;
                for (; rfn[st.back()] &amp;lt; dfn[i]; st.pop_back());
                g2[st.back()].emplace_back(i, dep[i] - dep[st.back()]);
                g2[i].emplace_back(st.back(), dep[i] - dep[st.back()]);
                // printf(&amp;quot;add (%d, %d): %d\n&amp;quot;, st.back(), i, dep[i] - dep[st.back()]);
                st.push_back(i);
            &amp;#125;
        &amp;#125;
        for (auto [u, v] : be) &amp;#123;
            g2[u].emplace_back(v, 1), g2[v].emplace_back(u, 1);
            // printf(&amp;quot;# add(%d, %d): 1\n&amp;quot;, u, v);
        &amp;#125;
    &amp;#125;
    tag.assign(n + 1, 0);
    std::vector&amp;lt;int&amp;gt; res(n + 1);
    DFS = [&amp;amp;](int x, int s) &amp;#123;
        if (x == n)
            ++res[s];
        tag[x] = 1;
        for (auto [i, w] : g2[x])
            if (!tag[i])
                DFS(i, s + w);
        tag[x] = 0;
        return;
    &amp;#125;;
    DFS(1, 0);
    for (int i = 1; i &amp;lt; n; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <category term="AC 自动机" />
        <category term="贪心" />
        <category term="DP 优化" />
        <category term="虚树" />
        <updated>2025-08-16T08:14:12.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250814/</id>
        <title>DDP 与 GBT 练习</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250814/"/>
        <content type="html">&lt;p&gt;线段树是对的（存疑）&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---数据传输&#34;&gt;A - 数据传输&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P8820&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P8820&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我在上一篇文章中提到了 &lt;a href=&#34;/20250812/#树上路径查询&#34;&gt;DDP &amp;amp; 路径查询问题&lt;/a&gt;，在这个题中就有体现。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1/2}\)&lt;/span&gt; 表示数据保存在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 往下数 &lt;span class=&#34;math inline&#34;&gt;\(0/1/2\)&lt;/span&gt; 个点处的最小代价，手玩容易发现 &lt;span class=&#34;math inline&#34;&gt;\(k=3\)&lt;/span&gt; 时&lt;strong&gt;最优路径可能会往某个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 处的最小代价儿子处绕一圈来避免这个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 的代价&lt;/strong&gt;。但该值是定值，问题还是纯路径问题，就可以 DDP 了。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;image.png&#34; alt=&#34;共两种可能性（任意一个箭头长度不为 3 时绕一圈一定不比直接走更优）&#34; /&gt;&lt;figcaption&gt;共两种可能性（任意一个箭头长度不为 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 时绕一圈一定不比直接走更优）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
struct mat &amp;#123;
    long long a[3][3];
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat() &amp;#123;
        memset(a, 0x3f, sizeof (a));
        return;
    &amp;#125;
    mat(int flag) &amp;#123;
        memset(a, 0x3f, sizeof (a));
        a[0][0] = a[1][1] = a[2][2] = 0ll;
        return;
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        for (int i = 0; i &amp;lt; 3; ++i)
            for (int k = 0; k &amp;lt; 3; ++k)
                for (int j = 0; j &amp;lt; 3; ++j)
                    res[i][k] = std::min(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;int&amp;gt; mx(n + 1, 0x3f3f3f3f);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        mx[x] = std::min(mx[x], a[y]);
        mx[y] = std::min(mx[y], a[x]);
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; dep(n + 1);
    std::vector&amp;lt;std::array&amp;lt;int, 18&amp;gt; &amp;gt; f(n + 1);
    std::vector&amp;lt;std::array&amp;lt;mat, 18&amp;gt; &amp;gt; u(n + 1), d(n + 1);
    u[0][0] = d[0][0] = mat(1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        for (auto i : g1[x])
            if (i != f[x][0]) &amp;#123;
                f[i][0] = x;
                &amp;#123;
                    mat s;
                    s[0][0] = a[x];
                    if (k &amp;gt;= 2) &amp;#123;
                        s[0][1] = 0;
                        s[1][0] = a[x];
                    &amp;#125;
                    if (k &amp;gt;= 3) &amp;#123;
                        s[1][2] = 0;
                        s[2][0] = a[x];
                        s[1][1] = mx[x];
                        s[2][2] = mx[i];
                    &amp;#125;
                    u[i][0] = s; 
                    s[0][0] = a[i];
                    if (k &amp;gt;= 2)
                        s[1][0] = a[i];
                    if (k &amp;gt;= 3) &amp;#123;
                        s[2][0] = a[i];
                        s[1][1] = mx[i];
                        s[2][2] = mx[x];
                    &amp;#125;
                    d[i][0] = s; 
                &amp;#125;
                for (int j = 1; j &amp;lt; 18; ++j) &amp;#123;
                    f[i][j] = f[f[i][j - 1]][j - 1];
                    u[i][j] = u[i][j - 1] * u[f[i][j - 1]][j - 1];
                    d[i][j] = d[f[i][j - 1]][j - 1] * d[i][j - 1];
                &amp;#125;
                dep[i] = dep[x] + 1;
                DFS(i);
            &amp;#125;
        return;
    &amp;#125;;
    dep[1] = 1, DFS(1);
    for (int x, y; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        long long res = a[x];
        mat r1(1), r2(1);
        if (dep[x] &amp;gt; dep[y]) &amp;#123;
            for (int i = 17; ~i; --i)
                if (dep[f[x][i]] &amp;gt;= dep[y]) &amp;#123;
                    r1 = r1 * u[x][i];
                    x = f[x][i];
                &amp;#125;
        &amp;#125;
        else if (dep[y] &amp;gt; dep[x]) &amp;#123;
            for (int i = 17; ~i; --i)
                if (dep[f[y][i]] &amp;gt;= dep[x]) &amp;#123;
                    r2 = d[y][i] * r2;
                    y = f[y][i];
                &amp;#125;
        &amp;#125;
        if (x != y) &amp;#123;
            for (int i = 17; ~i; --i)
                if (f[x][i] != f[y][i]) &amp;#123;
                    r1 = r1 * u[x][i];
                    r2 = d[y][i] * r2;
                    x = f[x][i], y = f[y][i];
                &amp;#125;
            r1 = r1 * u[x][0], r2 = d[y][0] * r2;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res + (r1 * r2)[0][0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---the-silk-road-with-robots&#34;&gt;B - The Silk Road … with Robots!&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://qoj.ac/problem/10410&#34; class=&#34;uri&#34;&gt;https://qoj.ac/problem/10410&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题意：初始有一个长为 &lt;span class=&#34;math inline&#34;&gt;\(10^8\)&lt;/span&gt; 的空数轴，给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 次操作，每次操作在数轴上的一个空位放一个 A 类点或 B 类点。每个 A 类点有其&lt;strong&gt;价值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;任意在数轴上移动这些 B 类点，&lt;strong&gt;总价值&lt;/strong&gt;为所有被经过的 A 类点的&lt;strong&gt;价值&lt;/strong&gt; - B 类点移动总路程。每次操作后输出最大&lt;strong&gt;总价值&lt;/strong&gt;，重复经过的 A 类点只计一次。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个题确实可以带来很多启发，我一开始直接设 &lt;span class=&#34;math inline&#34;&gt;\(f_j\)&lt;/span&gt; 为状态，这样对于暴力是可做的，但是会出现一些需要被区间修改的系数，比如&lt;strong&gt;前缀和&lt;/strong&gt;。最好设计状态，让转移的时候只需要用到常数、差分值等修改次数很少的系数。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,0/1/2/3}\)&lt;/span&gt; 分别表示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;那么可以写出转移式：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,0}=\max(mx+a_i+x_i,f_{i-1,0}+a_i)\\
f_{i,1}=\max(mx+a_i+2x_i,f_{i-1,1}+a_i)\\
f_{i,2}=f_{i-1,2}-(x_i-x_{i-1}) + a_i\\
f_{i,3}=f_{i-1,3}-2(x_i-x_{i-1})+a_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;span class=&#34;math inline&#34;&gt;\(mx\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,2/3}\)&lt;/span&gt; 的前缀最大值。在 B 类点处可以让 &lt;span class=&#34;math inline&#34;&gt;\(f_{2/3}\)&lt;/span&gt; 继承对应的 &lt;span class=&#34;math inline&#34;&gt;\(f_{0/1}\)&lt;/span&gt;，新开一维记录 &lt;span class=&#34;math inline&#34;&gt;\(mx\)&lt;/span&gt; 就可以维护矩乘了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 1e8;
const int maxn = 5e6 + 5;
const long long inf = 1e12;
struct mat &amp;#123;
    long long a[5][5];
    mat() &amp;#123;&amp;#125;
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        for (int i = 0; i &amp;lt; 5; ++i)
            for (int k = 0; k &amp;lt; 5; ++k) &amp;#123;
                auto u(-inf);
                for (int j = 0; j &amp;lt; 5; ++j)
                    u = std::max(u, a[i][j] + q[j][k]);
                res[i][k] = u;
            &amp;#125;
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int l, r; mat u; &amp;#125; t[maxn];
#define lt t[p].l
#define rt t[p].r
void add(int &amp;amp;p, int l, int r, int x, mat &amp;amp;v) &amp;#123;
    static int tot = 0;
    if (!p)
        p = ++tot;
    if (l == r) &amp;#123;
        t[p].u = v;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, l, mid, x, v);
    else
        add(rt, mid + 1, r, x, v);
    t[p].u = t[lt].u * t[rt].u;
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    &amp;#123;
        mat &amp;amp;u = t[0].u;
        for (int i = 0; i &amp;lt; 5; ++i)
            for (int j = 0; j &amp;lt; 5; ++j)
                u[i][j] = -inf;
        u[0][0] = u[1][1] = u[2][2] = u[3][3] = u[4][4] = 0ll;
    &amp;#125;
    int m, rt = 0;
    std::cin &amp;gt;&amp;gt; m;
    std::vector&amp;lt;mat&amp;gt; a(m + 1);
    std::vector&amp;lt;int&amp;gt; ty(m + 1);
    std::set&amp;lt;std::pair&amp;lt;long long, int&amp;gt; &amp;gt; s;
    s.emplace(-inf, 0);
    for (int op, x, i = 1; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; op &amp;gt;&amp;gt; x;
        auto &amp;amp;u = a[i];
        for (int i = 0; i &amp;lt; 5; ++i)
            for (int j = 0; j &amp;lt; 5; ++j)
                u[i][j] = -inf;
        auto p = --s.lower_bound(std::make_pair(x, 0)), q = s.upper_bound(std::make_pair(x, 0));
        int v = 0;
        if (op == 2)
            std::cin &amp;gt;&amp;gt; v;
        u[0][0] = v, u[1][1] = v, u[4][0] = v + x, u[4][1] = v + 2 * x;
        if (op == 1) &amp;#123;
            ty[i] = 0;
            u[4][2] = u[4][1] - 2 * x;
            u[1][2] = u[1][1] - 2 * x;
            u[4][3] = u[4][0] - x;
            u[0][3] = u[0][0] - x;
        &amp;#125;
        else &amp;#123;
            ty[i] = 1;
            u[2][2] = v - (x - p-&amp;gt;first);
            u[3][3] = v - 2 * (x - p-&amp;gt;first);
        &amp;#125;
        u[4][4] = std::max(&amp;#123; 0ll, u[4][2], u[4][3] &amp;#125;);
        u[1][4] = u[1][2], u[0][4] = u[0][3], u[2][4] = u[2][2], u[3][4] = u[3][3];
        add(rt, 0, lim, x, u);
        if (q != s.end() &amp;amp;&amp;amp; ty[q-&amp;gt;second] == 1) &amp;#123;
            auto &amp;amp;u = a[q-&amp;gt;second];
            u[2][2] -= p-&amp;gt;first, u[2][2] += x;
            u[3][3] -= 2 * p-&amp;gt;first, u[3][3] += 2 * x;
            u[2][4] = u[2][2], u[3][4] = u[3][3];
            add(rt, 0, lim, q-&amp;gt;first, a[q-&amp;gt;second]);
        &amp;#125;
        s.emplace(x, i);
        std::cout &amp;lt;&amp;lt; t[1].u[4][4] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        // for (int i = 0; i &amp;lt; 5; ++i, puts(&amp;quot;&amp;quot;))
        //     for (int j = 0; j &amp;lt; 5; ++j)
        //         if (t[1].u[i][j] &amp;lt; -200)
        //             printf(&amp;quot;  x &amp;quot;);
        //         else
        //             printf(&amp;quot;%3lld &amp;quot;, t[1].u[i][j]);
        // puts(&amp;quot;=============&amp;quot;);
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---密码箱&#34;&gt;C - 密码箱&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/20250818/#c---%E5%AF%86%E7%A0%81%E7%AE%B1&#34;&gt;link&lt;/a&gt;;&lt;/p&gt;
</content>
        <category term="线段树" />
        <category term="DDP" />
        <updated>2025-08-14T09:08:21.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250812/</id>
        <title>DDP 与全局平衡二叉树</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250812/"/>
        <content type="html">&lt;p&gt;其实动态 DP 不是动态树 DP 的同义词&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;动态-dp&#34;&gt;动态 DP&lt;/h2&gt;
&lt;p&gt;对于转移只依赖前几项的 DP，可以放进矩阵。&lt;/p&gt;
&lt;p&gt;默认转移范围是 &lt;span class=&#34;math inline&#34;&gt;\([1,n]\)&lt;/span&gt;；如果我们需要改变求解范围，发现如果能获取转移矩阵的乘积就很快了。考虑存下来。&lt;/p&gt;
&lt;p&gt;如果需要单点修改，等价于修改其所在矩阵，则想要尽可能少地修改存储的答案，考虑使用线段树优化该过程。&lt;/p&gt;
&lt;h3 id=&#34;例海报&#34;&gt;例：海报&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9790&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9790&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易列出暴力 DP 式：令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示枚举到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时，包含 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 在内已经有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个连续的人举起海报，易得：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,0}=\max(f_{i-1,0},f_{i-1,1},f_{i-1,2},f_{i-1,3})\\
f_{i,j}=f_{i-1,j-1}+a_i \forall 1\le j\le 3
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;发现满足 + / max &lt;strong&gt;矩阵乘法&lt;/strong&gt; 的形式；想到用线段树保存每段区间对应矩阵（对应性质：结合律），每次修改 / 查询就能在 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 之内完成。&lt;/p&gt;
&lt;p&gt;原问题是环形的，可以再加一维 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 表示钦定选了前 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个且不选第 &lt;span class=&#34;math inline&#34;&gt;\(k+1\)&lt;/span&gt; 个时的答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 4e4 + 5;
const long long inf = 1e18;
struct mat &amp;#123;
    int n, m;
    long long a[4][4];
    mat() &amp;#123;&amp;#125;
    mat(int n1, int m1): n(n1), m(m1) &amp;#123;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int j = 0; j &amp;lt; m; ++j)
                a[i][j] = -inf;
        return;
    &amp;#125;
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res(n, q.m);
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k)
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int l, r; mat u[4]; &amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int a[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
#define c t[p].u[i]
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        for (int i = 0; i &amp;lt;= 3; ++i) &amp;#123;
            c = mat(4, 4);
            if (l &amp;gt; i + 1) &amp;#123;
                c[0][0] = c[1][0] = c[2][0] = c[3][0] = 0;
                c[0][1] = c[1][2] = c[2][3] = a[l];
            &amp;#125;
            else if (l == i + 1)
                c[0][0] = c[1][0] = c[2][0] = c[3][0] = 0;
            else
                c[0][1] = c[1][2] = c[2][3] = a[l];
        &amp;#125;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    for (int i = 0; i &amp;lt;= 3; ++i)
        t[p].u[i] = t[lt].u[i] * t[rt].u[i];
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        for (int i = 0; i &amp;lt;= 3; ++i)
            if (t[p].l != i + 1) 
                c[0][1] = c[1][2] = c[2][3] = v;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x, v);
    else
        add(rt, x, v);
    for (int i = 0; i &amp;lt;= 3; ++i)
        t[p].u[i] = t[lt].u[i] * t[rt].u[i];
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    bld(1, 1, n);
    auto calc = [&amp;amp;](void) &amp;#123;
        mat f(1, 4);
        f[0][0] = 0;
        auto res = -inf;
        for (int i = 0; i &amp;lt;= 3; ++i) &amp;#123;
            auto r = (f * t[1].u[i]);
            for (int j = 0; j &amp;lt;= 3; ++j)
                if (i + j &amp;lt;= 3) &amp;#123;
                    res = std::max(res, r[0][j]);
                    // printf(&amp;quot;f[%d][%d] = %lld\n&amp;quot;, i, j, f[i][j]);
                &amp;#125;
        &amp;#125;
        return res;
    &amp;#125;;
    std::cout &amp;lt;&amp;lt; calc() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    int q;
    std::cin &amp;gt;&amp;gt; q;
    for (int x, v; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v;
        add(1, x, v);
        std::cout &amp;lt;&amp;lt; calc() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;发现矩阵本身和 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 无关，还可以可以共用一个线段树上的信息，就可以只开一个线段树了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;我写这一版本的原因是 &lt;code&gt;maxn&lt;/code&gt; 开大了导致 MLE，实际上四个线段树是没有任何空间压力的 😅&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 4e5 + 5;
const long long inf = 1e18;
struct mat &amp;#123;
    int n, m;
    long long a[4][4];
    mat() &amp;#123;&amp;#125;
    mat(int n1, int m1): n(n1), m(m1) &amp;#123;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int j = 0; j &amp;lt; m; ++j)
                a[i][j] = -inf;
        return;
    &amp;#125;
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat q) const &amp;#123;
        mat res(n, q.m);
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k)
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int l, r; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int a[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u = mat(4, 4);
        t[p].u[0][0] = t[p].u[1][0] = t[p].u[2][0] = t[p].u[3][0] = 0;
        t[p].u[0][1] = t[p].u[1][2] = t[p].u[2][3] = a[l];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    t[p].u = t[lt].u * t[rt].u;
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        t[p].u[0][1] = t[p].u[1][2] = t[p].u[2][3] = v;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x, v);
    else
        add(rt, x, v);
    t[p].u = t[lt].u * t[rt].u;
    return;
&amp;#125;
mat ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    return ask(lt, l, r) * ask(rt, l, r);
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    bld(1, 1, n);
    auto calc = [&amp;amp;](void) &amp;#123;
        mat f(1, 4);
        f[0][0] = 0, f[0][1] = f[0][2] = f[0][3] = -inf;
        auto r(f * ask(1, 2, n));
        auto res(*std::max_element(r[0], r[0] + 4));
        mat z(4, 4);
        z[0][0] = z[1][0] = z[2][0] = z[3][0] = 0ll;
        for (int i = 1; i &amp;lt;= 3; ++i) &amp;#123;
            mat op(4, 4);
            op[0][1] = op[1][2] = op[2][3] = a[i];
            f *= op;
            if (i + 2 &amp;lt;= n)
                r = f * z * ask(1, i + 2, n);
            else
                r = f * z;
            res = std::max(res, *std::max_element(r[0], r[0] + 4 - i));
        &amp;#125;
        return res;
    &amp;#125;;
    std::cout &amp;lt;&amp;lt; calc() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    int q;
    std::cin &amp;gt;&amp;gt; q;
    for (int x, v; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v, a[x] = v;
        add(1, x, v);
        std::cout &amp;lt;&amp;lt; calc() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;经典题gss3&#34;&gt;经典题：GSS3&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/SP1716&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/SP1716&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;怎么是子段和 😓&lt;/p&gt;
&lt;p&gt;同样列出能够矩阵乘法的 DP 式，发现限制在于至少要选一个数。设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}\)&lt;/span&gt; 表示选了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的最大值，&lt;span class=&#34;math inline&#34;&gt;\(g_i\)&lt;/span&gt; 表示历史最大值，则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_i=\max(f_{i-1}+a_i,0+a_i)\\
g_i=\max(g_{i-1}+0,f_{i-1}+a_i,0+a_i)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;容易发现是一个 + / max 矩乘，线段树维护即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 4e5 + 5;
const long long inf = 1e18;
struct mat &amp;#123;
    int n, m;
    long long a[3][3];
    mat() &amp;#123;&amp;#125;
    mat(int n1, int m1): n(n1), m(m1) &amp;#123;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int j = 0; j &amp;lt; m; ++j)
                a[i][j] = -inf;
        return;
    &amp;#125;
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat q) const &amp;#123;
        mat res(n, q.m);
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k)
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int l, r; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int a[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u = mat(3, 3);
        t[p].u[0][0] = t[p].u[2][0] = a[l];
        t[p].u[0][1] = a[l], t[p].u[1][1] = 0ll, t[p].u[2][1] = a[l];
        t[p].u[2][2] = 0ll;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    t[p].u = t[lt].u * t[rt].u;
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        t[p].u[0][0] = t[p].u[2][0] = t[p].u[0][1] = t[p].u[2][1] = v;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x, v);
    else
        add(rt, x, v);
    t[p].u = t[lt].u * t[rt].u;
    return;
&amp;#125;
mat ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    return ask(lt, l, r) * ask(rt, l, r);
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    bld(1, 1, n);
    auto calc = [&amp;amp;](int l, int r) &amp;#123;
        mat f(1, 3);
        f[0][2] = 0ll;
        auto res(f * ask(1, l, r));
        return res[0][1];
    &amp;#125;;
    int q;
    std::cin &amp;gt;&amp;gt; q;
    for (int op; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            int l, r;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
            std::cout &amp;lt;&amp;lt; calc(l, r) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
        else &amp;#123;
            int x, v;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v;
            a[x] = v, add(1, x, v);
        &amp;#125;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;动态树-dp&#34;&gt;动态树 DP&lt;/h2&gt;
&lt;p&gt;把上述过程放到树上，很容易想到树剖 + 线段树。&lt;/p&gt;
&lt;p&gt;由于认为线段树上的矩乘只能进行从重儿子到父亲的转移，轻儿子的转移会被合并为一个新函数（同时是矩阵的系数），在跳重链的时候被单独更新。&lt;/p&gt;
&lt;p&gt;由于两个函数相互依赖，需要思考清楚更新的先后顺序。&lt;/p&gt;
&lt;h3 id=&#34;模板动态-dp&#34;&gt;【模板】动态 DP&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4719&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4719&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 上，选 / 不选 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的最大价值。容易得出转移：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{u,0}=\sum\max(f_{v,0},f_{v,1})\\
f_{u,1}=a_i+\sum f_{v,0}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;把转移矩阵放到树剖上后，考虑更新，发现求和这一步很困难。解决方案是&lt;strong&gt;直接将求和用另一个函数代替&lt;/strong&gt;。定义 &lt;span class=&#34;math inline&#34;&gt;\(g_{u,0}\)&lt;/span&gt; 表示取 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;、不取 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的所有轻儿子的答案，&lt;span class=&#34;math inline&#34;&gt;\(g_{u,1}\)&lt;/span&gt; 不取 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，轻儿子可选可不选的答案。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 是可求的，且只需要在跳重链的时候更新 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt;。具体更新起来非常绞，因为 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 是相互依赖的，需要分清楚先后关系。&lt;/p&gt;
&lt;p&gt;首先 &lt;span class=&#34;math inline&#34;&gt;\(g_u\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 都会被更新；接着，重链上其它的 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 不会被影响，而链顶的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 需要被新的 &lt;span class=&#34;math inline&#34;&gt;\(g_u\)&lt;/span&gt; 更新；由此链顶父亲的 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 被更新；依次类推。注意到对于一个链顶，其 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 值是整条重链的乘积，故需要记录链底。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(q\log ^2n)\)&lt;/span&gt;。注意很重要的一点是线段树内乘法应从右往左。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
const int inf = 0x3f3f3f3f;
struct mat &amp;#123;
    int n, m, a[2][2];
    mat() &amp;#123;&amp;#125;
    mat(int n1, int m1): n(n1), m(m1) &amp;#123;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int j = 0; j &amp;lt; m; ++j)
                a[i][j] = -inf;
        return;
    &amp;#125;
    int* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat q) const &amp;#123;
        mat res(n, q.m);
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k)
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int l, r; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int g[maxn][2], tab[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        int u = tab[l];
        t[p].u = mat(2, 2);
        t[p].u[0][0] = t[p].u[1][0] = g[u][1];
        t[p].u[0][1] = g[u][0];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        int u = tab[x];
        t[p].u[0][0] = t[p].u[1][0] = g[u][1];
        t[p].u[0][1] = g[u][0];
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x);
    else
        add(rt, x);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
mat ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    return ask(rt, l, r) * ask(lt, l, r);
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), fa(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != fa[x]) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            g[x][0] = a[x];
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                    top[i] = i, DFS(i);
                    g[x][0] += f[i][0];
                    g[x][1] += std::max(f[i][1], f[i][0]);
                &amp;#125;
            f[x][0] = g[x][1] + std::max(f[son[x]][0], f[son[x]][1]);
            f[x][1] = g[x][0] + f[son[x]][0];
        &amp;#125;
        else
            f[x][1] = g[x][0] = a[x], bot[x] = x;
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    bld(1, 1, n);
    for (int x, v; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v;
        g[x][0] -= a[x], g[x][0] += v, a[x] = v;
        for (; top[x] != 1; ) &amp;#123;
            auto r = ask(1, dfn[top[x]], dfn[bot[x]]);
            f[top[x]][0] = r[0][0], f[top[x]][1] = r[0][1];
            g[fa[top[x]]][0] -= f[top[x]][0];
            g[fa[top[x]]][1] -= std::max(f[top[x]][0], f[top[x]][1]);
            add(1, dfn[x]);
            r = ask(1, dfn[top[x]], dfn[bot[x]]);
            f[top[x]][0] = r[0][0], f[top[x]][1] = r[0][1];
            g[fa[top[x]]][0] += f[top[x]][0];
            g[fa[top[x]]][1] += std::max(f[top[x]][0], f[top[x]][1]);
            x = fa[top[x]];
        &amp;#125;
        add(1, dfn[x]);
        auto r = ask(1, dfn[1], dfn[bot[1]]);
        f[1][0] = r[0][0], f[1][1] = r[0][1];
        std::cout &amp;lt;&amp;lt; std::max(f[1][0], f[1][1]) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;全局平衡二叉树&#34;&gt;全局平衡二叉树&lt;/h2&gt;
&lt;p&gt;回顾树剖（重剖），功能在于解决路径问题，单次操作能够在 &lt;span class=&#34;math inline&#34;&gt;\(O(\log^2 n)\)&lt;/span&gt; 的时间内完成。这个功能可以被&lt;strong&gt;全局平衡二叉树（GBT）&lt;/strong&gt;上位替代。GBT 能够在单次 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 的复杂度内完成链操作、子树操作。&lt;em&gt;&lt;a href=&#34;QTREE解法的一些研究.pdf&#34;&gt;Yang Zhe - SPOJ375 QTREE 解法的一些研究&lt;/a&gt; 中更为详细严谨地对 GBT 进行了说明，我传了份文件上来。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;考虑树剖能被卡的原因：每次线段树询问都会卡满 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt;，找一条卡得满 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 次跳重链次数的路径一直薅，就可以卡到 &lt;span class=&#34;math inline&#34;&gt;\(O(\log^2 n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;在实现线段树时发现，对于&lt;strong&gt;路径操作&lt;/strong&gt;和&lt;strong&gt;单点操作&lt;/strong&gt;，树剖只需要维护同一条重链的信息，建一个大线段树会产生许多重链间的无效维护。故一种经典的树剖卡常技巧是对于每一条重链建出线段树。&lt;/p&gt;
&lt;p&gt;在本文中定义&lt;strong&gt;全局二叉树&lt;/strong&gt;：将单个线段树按照在原树上重链顶的相对祖孙关系连边得到的模型。这里为了和&lt;strong&gt;全局平衡二叉树&lt;/strong&gt;形成照应而命名，实际上模型并不是二叉树。容易发现&lt;strong&gt;修改某个点花费的操作次数和其在全局二叉树中的深度相同&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;考虑本方法理论上仍可卡到 &lt;span class=&#34;math inline&#34;&gt;\(O(\log^2 n)\)&lt;/span&gt; 单次操作的原因，虽然单个线段树平衡，但&lt;strong&gt;全局二叉树&lt;/strong&gt;并不平衡；能够构造数据使得树高达到 &lt;span class=&#34;math inline&#34;&gt;\(\log^2 n\)&lt;/span&gt;。考虑使得全局二叉树平衡，即调整线段树结构使得任何一个点在全局二叉树上的左右儿子大小最接近。发现是易做的，只需在建线段树时移动左右儿子分割点使得两边子树大小均为全树的一半即可。&lt;/p&gt;
&lt;p&gt;法一：求出每个点的轻子树大小 &lt;span class=&#34;math inline&#34;&gt;\(ls_u=1+\sum siz_v\)&lt;/span&gt;，作为加权在线段树上找 mid 就能满足全局平衡；证明可以见上面的论文。这里用线段树代替了 BST，常数很大。&lt;/p&gt;
&lt;p&gt;法二：用一个 BST 实现上述功能，需要满足：任意子树的根为子树的带权 mid；BST 的中序遍历为原重链。显然有：树高为 log 级别。这就决定了所有问题都可以通过暴力爬山解决。&lt;/p&gt;
&lt;p&gt;GBT 能够快速维护&lt;strong&gt;普通树剖操作&lt;/strong&gt;和 &lt;strong&gt;DDP 信息&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;维护-ddp模板动态-dp加强版&#34;&gt;维护 DDP：【模板】动态 DP（加强版）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4751&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4751&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和未加强版类似，把所有线段树操作替换为 BST 即可。如果写得丑可能需要一些额外的卡常技巧。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e6 + 5;
const int inf = 0x3f3f3f3f;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
struct mat &amp;#123;
    int a[2][2];
    int* operator[] (const int q) &amp;#123; 
        return a[q];
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        res[0][0] = res[0][1] = res[1][0] = res[1][1] = -inf;
        for (int i = 0; i &amp;lt; 2; ++i)
            for (int k = 0; k &amp;lt; 2; ++k)
                for (int j = 0; j &amp;lt; 2; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int lc, rc, fa; mat u; &amp;#125; t[maxn]; 
int g[maxn][2], tab[maxn], ls[maxn];
mat p[maxn];
void pushup(int x) &amp;#123;
    t[x].u = t[t[x].rc].u * p[x] * t[t[x].lc].u;
    return;
&amp;#125;
void bld(int &amp;amp;x, int l, int r) &amp;#123;
    if (l &amp;gt; r)
        return;
    int s = 0, k = 0;
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    for (int i = l; i &amp;lt;= r; ++i, k += ls[tab[i]])
        if ((k + ls[tab[i]]) * 2 &amp;gt; s) &amp;#123;
            x = tab[i];
            bld(t[x].lc, l, i - 1), t[t[x].lc].fa = x;
            bld(t[x].rc, i + 1, r), t[t[x].rc].fa = x;
            pushup(x);
            break;
        &amp;#125;
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    t[0].u[0][0] = t[0].u[1][1] = 0, t[0].u[0][1] = t[0].u[1][0] = -inf;
    int n, q;
    read(n), read(q);
    std::vector&amp;lt;int&amp;gt; a(n + 1), rt(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; son(n + 1), fa(n + 1), siz(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != fa[x]) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x, ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            g[x][0] = a[x];
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                    top[i] = i, DFS(i), t[rt[i]].fa = x;
                    ls[x] += siz[i];
                    g[x][0] += f[i][0];
                    g[x][1] += std::max(f[i][1], f[i][0]);
                &amp;#125;
            f[x][0] = g[x][1] + std::max(f[son[x]][0], f[son[x]][1]);
            f[x][1] = g[x][0] + f[son[x]][0];
        &amp;#125;
        else
            f[x][1] = g[x][0] = a[x], bot[x] = x;
        p[x][0][0] = p[x][1][0] = g[x][1];
        p[x][0][1] = g[x][0], p[x][1][1] = -inf;
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    for (int x, v, la = 0; q--; ) &amp;#123;
        read(x), read(v), x ^= la;
        p[x][0][1] += v - a[x], a[x] = v;
        for (; x; ) &amp;#123;
            int fa = t[x].fa;
            if (fa &amp;amp;&amp;amp; x != t[fa].lc &amp;amp;&amp;amp; x != t[fa].rc) &amp;#123;
                int f0 = t[x].u[0][0], f1 = std::max(f0, t[x].u[0][1]);
                pushup(x);
                int F0 = t[x].u[0][0], F1 = std::max(F0, t[x].u[0][1]);
                p[fa][0][0] += F1 - f1, p[fa][1][0] += F1 - f1;
                p[fa][0][1] += F0 - f0;
            &amp;#125;
            else
                pushup(x);
            x = fa;
        &amp;#125;
        print(la = std::max(t[rt[1]].u[0][0], t[rt[1]].u[0][1]), &amp;#39;\n&amp;#39;);
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;也给出一个线段树版本的&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e6 + 5;
const int inf = 0x3f3f3f3f;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
struct mat &amp;#123;
    int a[2][2];
    int* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat q) const &amp;#123;
        mat res;
        res[0][0] = res[0][1] = res[1][0] = res[1][1] = -inf;
        for (int i = 0; i &amp;lt; 2; ++i)
            for (int k = 0; k &amp;lt; 2; ++k)
                for (int j = 0; j &amp;lt; 2; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int lc, rc, l, r, mid; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int g[maxn][2], tab[maxn], ls[maxn];
#define lt t[p].lc
#define rt t[p].rc
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    static int tot = 0;
    p = ++tot, t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        int u = tab[l];
        t[p].u[0][0] = t[p].u[1][0] = g[u][1];
        t[p].u[0][1] = g[u][0], t[p].u[1][1] = -inf;
        return;
    &amp;#125;
    int s = 0, u = ls[tab[l]];
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    s &amp;gt;&amp;gt;= 1;
    t[p].mid = r - 1;
    for (int i = l + 1; i &amp;lt; r; ++i) &amp;#123;
        u += ls[tab[i]];
        if (u + ls[tab[i + 1]] &amp;gt; s) &amp;#123;
            t[p].mid = i;
            break;
        &amp;#125;
    &amp;#125;
    bld(lt, l, t[p].mid), bld(rt, t[p].mid + 1, r);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        int u = tab[x];
        t[p].u[0][0] = t[p].u[1][0] = g[u][1];
        t[p].u[0][1] = g[u][0];
        return;
    &amp;#125;
    if (x &amp;lt;= t[p].mid)
        add(lt, x);
    else
        add(rt, x);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
mat ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    if (r &amp;lt;= t[p].mid)
        return ask(lt, l, r);
    if (l &amp;gt; t[p].mid)
        return ask(rt, l, r);
    return ask(rt, l, r) * ask(lt, l, r);
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q;
    read(n), read(q);
    std::vector&amp;lt;int&amp;gt; a(n + 1), rt(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), fa(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != fa[x]) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x;
        ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            g[x][0] = a[x];
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                    top[i] = i, DFS(i);
                    ls[x] += siz[i];
                    g[x][0] += f[i][0];
                    g[x][1] += std::max(f[i][1], f[i][0]);
                &amp;#125;
            f[x][0] = g[x][1] + std::max(f[son[x]][0], f[son[x]][1]);
            f[x][1] = g[x][0] + f[son[x]][0];
        &amp;#125;
        else
            f[x][1] = g[x][0] = a[x], bot[x] = x;
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    for (int x, v, la = 0; q--; ) &amp;#123;
        read(x), read(v), x ^= la;
        g[x][0] -= a[x], g[x][0] += v, a[x] = v;
        for (; top[x] != 1; ) &amp;#123;
            auto r = t[rt[top[x]]].u;
            f[top[x]][0] = r[0][0], f[top[x]][1] = r[0][1];
            g[fa[top[x]]][0] -= f[top[x]][0];
            g[fa[top[x]]][1] -= std::max(f[top[x]][0], f[top[x]][1]);
            add(rt[top[x]], dfn[x]);
            r = t[rt[top[x]]].u;
            f[top[x]][0] = r[0][0], f[top[x]][1] = r[0][1];
            g[fa[top[x]]][0] += f[top[x]][0];
            g[fa[top[x]]][1] += std::max(f[top[x]][0], f[top[x]][1]);
            x = fa[top[x]];
        &amp;#125;
        add(rt[1], dfn[x]);
        auto r =  t[rt[1]].u;
        f[1][0] = r[0][0], f[1][1] = r[0][1];
        std::cout &amp;lt;&amp;lt; (la = std::max(f[1][0], f[1][1])) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;树上路径问题染色&#34;&gt;树上路径问题：染色&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2486&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2486&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GBT 上的&lt;strong&gt;路径问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;BST：首先暴力爬山到 LCA，统计一路上的答案；然后跳到当前 BST 的根。由于本题有标记，所以需要在跳的同时想办法把标记问题解决一下。&lt;/p&gt;
&lt;p&gt;线段树：把树剖的线段树略改一下就过了。从上一行模棱两可的描述就可以看出来 BST 实现起来不太轻松；还是线段树更轮椅啊！&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;跑得没纯树剖快，因为数据没有刻意构造导致树高很低，再加上常数的影响吧。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void read(char &amp;amp;x) &amp;#123;
    for (x = nec(); x != &amp;#39;C&amp;#39; &amp;amp;&amp;amp; x != &amp;#39;Q&amp;#39;; x = nec());
    return;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
class node &amp;#123;
private:
    int lt, rt;
public:
    int l, r, mid, lc, rc, u, d;
    node(): u(-1) &amp;#123;&amp;#125;
    inline int&amp;amp; ls(void) &amp;#123; return lt; &amp;#125;
    inline int&amp;amp; rs(void) &amp;#123; return rt; &amp;#125;
    node&amp;amp; operator= (const node &amp;amp;q) &amp;#123;
        lc = q.lc, rc = q.rc, u = q.u;
        return *this;
    &amp;#125;
    node operator+ (const node &amp;amp;q) const &amp;#123;
        if (u == -1)
            return q;
        if (q.u == -1)
            return *this;
        node res;
        res.lc = lc, res.rc = q.rc, res.u = u + q.u - (rc == q.lc);
        return res;
    &amp;#125;
    inline void swap(void) &amp;#123;
        if (~u)
            lc ^= rc ^= lc ^= rc;
        return;
    &amp;#125;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int tab[maxn], ls[maxn], a[maxn];
#define lt t[p].ls()
#define rt t[p].rs()
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    static int tot = 0;
    p = ++tot, t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u = 1;
        t[p].lc = t[p].rc = a[tab[l]];
        return;
    &amp;#125;
    int s = 0, u = ls[tab[l]];
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    s &amp;gt;&amp;gt;= 1;
    t[p].mid = r - 1;
    for (int i = l + 1; i &amp;lt; r; ++i) &amp;#123;
        u += ls[tab[i]];
        if (u + ls[tab[i + 1]] &amp;gt; s) &amp;#123;
            t[p].mid = i;
            break;
        &amp;#125;
    &amp;#125;
    bld(lt, l, t[p].mid), bld(rt, t[p].mid + 1, r);
    t[p] = t[lt] + t[rt];
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d = t[lt].lc = t[lt].rc = t[rt].d = t[rt].lc = t[rt].rc = t[p].d;
        t[lt].u = t[rt].u = 1;
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void add(int p, int l, int r, int v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].u = 1;
        t[p].lc = t[p].rc = t[p].d = v;
        return;
    &amp;#125;
    pushdown(p);
    if (l &amp;lt;= t[p].mid)
        add(lt, l, r, v);
    if (r &amp;gt; t[p].mid)
        add(rt, l, r, v);
    t[p] = t[lt] + t[rt];
    return;
&amp;#125;
node ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p];
    pushdown(p);
    if (r &amp;lt;= t[p].mid)
        return ask(lt, l, r);
    if (l &amp;gt; t[p].mid)
        return ask(rt, l, r);
    return ask(lt, l, r) + ask(rt, l, r);
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
#else
    std::freopen(&amp;quot;paint17.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q;
    read(n), read(q);
    std::vector&amp;lt;int&amp;gt; rt(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), fa(n + 1), dep(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != fa[x]) &amp;#123;
                dep[i] = dep[x] + 1;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x, ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
        &amp;#125;
        else
            bot[x] = x;
        for (auto i : g[x])
            if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                top[i] = i;
                DFS(i);
                ls[x] += siz[i];
            &amp;#125;
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    for (char op; q--; ) &amp;#123;
        read(op);
        if (op == &amp;#39;C&amp;#39;) &amp;#123;
            int x, y, c;
            read(x), read(y), read(c);
            for (; top[x] != top[y]; x = fa[top[x]]) &amp;#123;
                if (dep[top[x]] &amp;lt; dep[top[y]])
                    std::swap(x, y);
                add(rt[top[x]], dfn[top[x]], dfn[x], c);
            &amp;#125;
            if (dep[x] &amp;gt; dep[y])
                std::swap(x, y);
            add(rt[top[x]], dfn[x], dfn[y], c);
        &amp;#125;
        else &amp;#123;
            int x, y;
            read(x), read(y);
            node res1, res2;
            for (; top[x] != top[y]; )
                if (dep[top[x]] &amp;lt; dep[top[y]]) &amp;#123;
                    res2 = ask(rt[top[y]], dfn[top[y]], dfn[y]) + res2;
                    y = fa[top[y]];
                &amp;#125;
                else &amp;#123;
                    res1 = ask(rt[top[x]], dfn[top[x]], dfn[x]) + res1;
                    x = fa[top[x]];
                &amp;#125;
            if (dep[x] &amp;gt; dep[y])
                res1 = ask(rt[top[y]], dfn[y], dfn[x]) + res1;
            else
                res2 = ask(rt[top[x]], dfn[x], dfn[y]) + res2;
            res1.swap();
            print((res1 + res2).u, &amp;#39;\n&amp;#39;);
        &amp;#125;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;树上路径查询&#34;&gt;树上路径查询？&lt;/h3&gt;
&lt;p&gt;做题的时候可以感受到，路径询问的存在很诡异，因为只需要一条链的操作，更偏向链上 DDP 而非树上的；&lt;strong&gt;轻儿子的信息是不用维护的&lt;/strong&gt;，形式上更像树剖（DS）；当成链上的 DDP 就可以解决了。&lt;/p&gt;
&lt;p&gt;可以用倍增维护 DDP（不用考虑轻重儿子，只用维护父子关系，进一步向序列 DDP 靠近），就不用打 GBT 了，常数也会小一些。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;习题&#34;&gt;习题&lt;/h2&gt;
&lt;p&gt;GBT 就统一用线段树了。DDP 也就可以顺带用 GBT 优化了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e---猫或狗-cats-or-dogs&#34;&gt;E - 猫或狗 / Cats or Dogs&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9597&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9597&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1}\)&lt;/span&gt; 表示从根上颜色为 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt; 时的最小断边数，显然无色可以视作任选一个颜色。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{u,a}=\sum\limits_v\min\limits_{b\in\{0,1\}}\{f_{v,b}+[a\ne b]\}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;直接把轻儿子的项提出来，记 &lt;span class=&#34;math inline&#34;&gt;\(g_{u,0/1}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1}\)&lt;/span&gt; 对应的轻儿子贡献即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
const int inf = 0x3f3f3f3f;
struct mat &amp;#123;
    int a[2][2];
    int* operator[] (const int q) &amp;#123; 
        return a[q];
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        res[0][0] = res[0][1] = res[1][0] = res[1][1] = inf;
        for (int i = 0; i &amp;lt; 2; ++i)
            for (int k = 0; k &amp;lt; 2; ++k)
                for (int j = 0; j &amp;lt; 2; ++j)
                    res[i][k] = std::min(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125; p[maxn];
struct &amp;#123; int lc, rc, l, r, mid; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int ls[maxn], tab[maxn], g[maxn][2], rt[maxn], top[maxn], dfn[maxn], fa[maxn];
std::vector&amp;lt;int&amp;gt; a;
#define lt t[p].lc
#define rt t[p].rc
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    static int tot = 0;
    p = ++tot, t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u[0][1] = t[p].u[1][0] = 1;
        return;
    &amp;#125;
    int s = 0, u = ls[tab[l]];
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    s &amp;gt;&amp;gt;= 1;
    t[p].mid = r - 1;
    for (int i = l + 1; i &amp;lt; r; ++i) &amp;#123;
        u += ls[tab[i]];
        if (u + ls[tab[i + 1]] &amp;gt; s) &amp;#123;
            t[p].mid = i;
            break;
        &amp;#125;
    &amp;#125;
    bld(lt, l, t[p].mid), bld(rt, t[p].mid + 1, r);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        int u = tab[x], g0 = (a[u] == 1 ? inf : g[u][0]), g1 = (a[u] == 0 ? inf : g[u][1]);
        t[p].u[0][0] = g0, t[p].u[0][1] = g1 + 1;
        t[p].u[1][0] = g0 + 1, t[p].u[1][1] = g1;
        return;
    &amp;#125;
    if (x &amp;lt;= t[p].mid)
        add(lt, x);
    else
        add(rt, x);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
#undef lt
#undef rt
void initialize(int n, std::vector&amp;lt;int&amp;gt; A, std::vector&amp;lt;int&amp;gt; B) &amp;#123;
    a.assign(n + 1, -1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 0; i &amp;lt; n - 1; ++i)
        g1[A[i]].push_back(B[i]), g1[B[i]].push_back(A[i]);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != fa[x]) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;int&amp;gt; bot(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x, ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                    top[i] = i, DFS(i);
                    ls[x] += siz[i];
                &amp;#125;
        &amp;#125;
        else
            bot[x] = x;
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    return;
&amp;#125;
int upd(int x) &amp;#123;
    for (; top[x] != 1; ) &amp;#123;
        int faa = fa[top[x]];
        auto &amp;amp;id = t[rt[top[x]]].u;
        int f0 = std::min(id[0][0], id[1][0]), f1 = std::min(id[0][1], id[1][1]);
        g[faa][0] -= std::min(f0, f1 + 1);
        g[faa][1] -= std::min(f0 + 1, f1);
        add(rt[top[x]], dfn[x]);
        f0 = std::min(id[0][0], id[1][0]), f1 = std::min(id[0][1], id[1][1]);
        // printf(&amp;quot;%d: f0 = %d, f1 = %d\n&amp;quot;, top[x], f0, f1);
        g[faa][0] += std::min(f0, f1 + 1);
        g[faa][1] += std::min(f0 + 1, f1);
        x = faa;
    &amp;#125;
    add(rt[1], dfn[x]);
    auto &amp;amp;id = t[rt[1]].u;
    int f0 = std::min(id[0][0], id[1][0]), f1 = std::min(id[0][1], id[1][1]);
    // printf(&amp;quot;%d: f0 = %d, f1 = %d\n&amp;quot;, 1, f0, f1);
    return std::min(f0, f1);
&amp;#125;
int cat(int x) &amp;#123;
    a[x] = 0;
    return upd(x);
&amp;#125;
int dog(int x) &amp;#123;
    a[x] = 1;
    return upd(x);
&amp;#125;
int neighbor(int x) &amp;#123;
    a[x] = -1;
    return upd(x);
&amp;#125;
#ifndef ONLINE_JUDGE
int main() &amp;#123;
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; A(n - 1), B(n - 1);
    for (int i = 0; i &amp;lt; n - 1; ++i)
        std::cin &amp;gt;&amp;gt; A[i] &amp;gt;&amp;gt; B[i];
    initialize(n, A, B);
    int q;
    std::cin &amp;gt;&amp;gt; q;
    for (int op, x; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; op &amp;gt;&amp;gt; x;
        std::cout &amp;lt;&amp;lt; (op == 1 ? cat(x) : (op == 2 ? dog(x) : neighbor(x))) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
    return 0;
&amp;#125;
#endif&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f---hash-on-tree&#34;&gt;F - Hash on Tree&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/AT_abc351_g&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/AT_abc351_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;记 &lt;span class=&#34;math inline&#34;&gt;\(g_x\)&lt;/span&gt; 为轻儿子的哈希值之积，则 &lt;span class=&#34;math inline&#34;&gt;\(f_u=A_u+f_{son}\cdot g_u\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后开一个常数维即可。快速幂的 log 省不掉，所以是双 log 的。&lt;/p&gt;
&lt;p&gt;初值和修改都有可能为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，需要维护实际哈希值和去掉 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的哈希值。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e6 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
const int mod = 998244353;
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
struct mat &amp;#123;
    int n, m;
    long long a[2][2];
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        res.n = n, res.m = q.m;
        res[0][0] = res[0][1] = res[1][0] = res[1][1] = 0ll;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k) &amp;#123;
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] += a[i][j] * q[j][k];
                res[i][k] %= mod;
            &amp;#125;
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int lc, rc, l, r, mid; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
long long g[maxn];
int tab[maxn], ls[maxn], a[maxn];
#define lt t[p].lc
#define rt t[p].rc
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    static int tot = 0;
    p = ++tot, t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        int u = tab[l];
        t[p].u.n = t[p].u.m = 2;
        t[p].u[0][0] = g[u];
        t[p].u[0][1] = 0ll;
        t[p].u[1][0] = a[u];
        t[p].u[1][1] = 1ll;
        return;
    &amp;#125;
    int s = 0, u = ls[tab[l]];
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    s &amp;gt;&amp;gt;= 1;
    t[p].mid = r - 1;
    for (int i = l + 1; i &amp;lt; r; ++i) &amp;#123;
        u += ls[tab[i]];
        if (u + ls[tab[i + 1]] &amp;gt; s) &amp;#123;
            t[p].mid = i;
            break;
        &amp;#125;
    &amp;#125;
    bld(lt, l, t[p].mid), bld(rt, t[p].mid + 1, r);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        int u = tab[x];
        t[p].u[0][0] = g[u];
        t[p].u[1][0] = a[u];
        return;
    &amp;#125;
    if (x &amp;lt;= t[p].mid)
        add(lt, x);
    else
        add(rt, x);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q;
    read(n), read(q);
    std::vector&amp;lt;int&amp;gt; rt(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 2, x; i &amp;lt;= n; ++i) &amp;#123;
        read(x);
        g1[i].push_back(x), g1[x].push_back(i);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), fa(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != fa[x]) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1), la(n + 1), cnt(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x, ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            g[x] = 1ll;
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                    top[i] = i, DFS(i);
                    ls[x] += siz[i];
                    if (f[i] == 0ll)
                        ++cnt[x];
                    else
                        (la[x] *= f[i]) %= mod;
                    (g[x] *= f[i]) %= mod;
                &amp;#125;
            f[x] = (a[x] + g[x] * f[son[x]]) % mod;
        &amp;#125;
        else
            f[x] = a[x], bot[x] = x;
        // printf(&amp;quot;f[%d] = %lld\n&amp;quot;, x, f[x]);
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    mat init;
    init.n = 1, init.m = 2;
    init[0][0] = 0ll, init[0][1] = 1ll;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto inv = [&amp;amp;](int x) &amp;#123;
        return qkp(x, mod - 2);
    &amp;#125;;
    for (int x, v; q--; ) &amp;#123;
        read(x), read(v);
        a[x] = v;
        for (; top[x] != 1; ) &amp;#123;
            int faa = fa[top[x]];
            auto &amp;amp;id = t[rt[top[x]]].u;
            int f = (init * id)[0][0];
            if (f == 0) &amp;#123;
                if (--cnt[faa] == 0)
                    g[faa] = la[faa];
            &amp;#125;
            else &amp;#123;
                f = inv(f);
                (g[faa] *= f) %= mod;
                (la[faa] *= f) %= mod;
            &amp;#125;
            add(rt[top[x]], dfn[x]);
            f = (init * id)[0][0];
            if (f == 0) &amp;#123;
                if (cnt[faa]++ == 0)
                    la[faa] = g[faa];
                g[faa] = 0ll;
            &amp;#125;
            else &amp;#123;
                (g[faa] *= f) %= mod;
                (la[faa] *= f) %= mod;
            &amp;#125;
            x = faa;
        &amp;#125;
        add(rt[1], dfn[x]);
        auto &amp;amp;id = t[rt[1]].u;
        int f = (init * id)[0][0];
        std::cout &amp;lt;&amp;lt; f &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;g---考试-2&#34;&gt;G - 考试 2&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10626&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10626&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运算均是线性的，容易想到『按位』维护，即只维护某个特定点值。如果将询问离线下来排序，每个函数的点值只会变化 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 次。&lt;/p&gt;
&lt;p&gt;建出符号二叉树，进行 DDP 即可。具体地，令 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 表示在运算 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 处的答案，计算 &lt;span class=&#34;math inline&#34;&gt;\(g_u\)&lt;/span&gt; 为轻儿子的答案，按照 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 处的符号写矩阵即可。叶子不是一次运算，应该直接填入点值（注意线段树上的叶子不一定是原树上的叶子）。&lt;/p&gt;
&lt;p&gt;建树和矩阵更新有点史，适当封装一下感觉会好一点&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e6 + 5;
const char mp[] = &amp;quot;x!&amp;amp;|^&amp;quot;;
const int LEN = (1 &amp;lt;&amp;lt; 20);
#define nec getchar
inline bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
struct mat &amp;#123;
    int n, m;
    int a[2][2];
    int* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    inline mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        res.n = n, res.m = q.m;
        res[0][0] = res[0][1] = res[1][0] = res[1][1] = 0ll;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k)
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] += a[i][j] * q[j][k];
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int lc, rc, l, r, mid; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int g1[maxn][2];
int g[maxn], ty[maxn];
int tab[maxn], ls[maxn], lim[maxn];
#define lt t[p].lc
#define rt t[p].rc
void fillmat(mat &amp;amp;a, int op, int g) &amp;#123;
    if (op == 0) &amp;#123;
        a.n = 1, a.m = 2;
        a[0][!g] = 0, a[0][g] = 1;
        return;
    &amp;#125;
    a.n = 2, a.m = 2;
    switch (op) &amp;#123;
    case 1: // !
        a[0][0] = 0, a[0][1] = 1;
        a[1][0] = 1, a[1][1] = 0;
        break;
    case 2: // &amp;amp;
        a[0][0] = 1, a[0][1] = 0;
        a[1][0] = !g, a[1][1] = g;
        break;
    case 3: // |
        a[0][0] = !g, a[0][1] = g;
        a[1][0] = 0, a[1][1] = 1;
        break;
    case 4: // ^
        a[0][0] = !g, a[0][1] = g;
        a[1][0] = g, a[1][1] = !g;
        break;
    default:
        assert(0);
    &amp;#125;
    return;
&amp;#125;
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    static int tot = 0;
    p = ++tot, t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        fillmat(t[p].u, ty[tab[l]], g[tab[l]]);
        return;
    &amp;#125;
    int s = 0, u = ls[tab[l]];
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    s &amp;gt;&amp;gt;= 1;
    t[p].mid = r - 1;
    for (int i = l + 1; i &amp;lt; r; ++i) &amp;#123;
        u += ls[tab[i]];
        if (u + ls[tab[i + 1]] &amp;gt; s) &amp;#123;
            t[p].mid = i;
            break;
        &amp;#125;
    &amp;#125;
    bld(lt, l, t[p].mid), bld(rt, t[p].mid + 1, r);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        fillmat(t[p].u, ty[tab[t[p].l]], g[tab[t[p].l]]);
        return;
    &amp;#125;
    if (x &amp;lt;= t[p].mid)
        add(lt, x);
    else
        add(rt, x);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifndef ONLINE_JUDGE
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n = 0, q, p;
    read(q), read(q);
    &amp;#123;
        std::string s;
        std::cin &amp;gt;&amp;gt; s;
        std::stringstream in(s);
        std::stack&amp;lt;char&amp;gt; op;
        std::stack&amp;lt;int&amp;gt; id;
        auto trans = [&amp;amp;](char t) &amp;#123;
            switch (t) &amp;#123;
            case &amp;#39;!&amp;#39;:
                return 1;
            case &amp;#39;&amp;amp;&amp;#39;:
                return 2;
            case &amp;#39;|&amp;#39;:
                return 3;
            case &amp;#39;^&amp;#39;:
                return 4;
            &amp;#125;
            assert(0);
            return -1;
        &amp;#125;;
        auto calcNot = [&amp;amp;](void) &amp;#123;
            for (; !op.empty() &amp;amp;&amp;amp; op.top() == &amp;#39;!&amp;#39;; ) &amp;#123;
                ty[++n] = trans(op.top());
                g1[n][0] = id.top(), id.pop(), id.push(n);
                op.pop();
            &amp;#125;
            return;
        &amp;#125;;
        auto opt = [&amp;amp;](void) &amp;#123;
            ty[++n] = trans(op.top());
            g1[n][0] = id.top(), id.pop();
            g1[n][1] = id.top(), id.pop();
            id.push(n), op.pop();
            return;
        &amp;#125;;
        for (char t; in &amp;gt;&amp;gt; t; )
            if (t == &amp;#39;[&amp;#39;) &amp;#123;
                int x;
                in &amp;gt;&amp;gt; x, in &amp;gt;&amp;gt; t;
                lim[++n] = x - 1;
                id.push(n), calcNot();
            &amp;#125;
            else if (t == &amp;#39;(&amp;#39;)
                op.push(t);
            else if (t == &amp;#39;)&amp;#39;) &amp;#123;
                for (; op.top() != &amp;#39;(&amp;#39;; opt());
                op.pop(), calcNot();
            &amp;#125;
            else if (t == &amp;#39;&amp;amp;&amp;#39;)
                op.push(t);
            else if (t == &amp;#39;^&amp;#39;) &amp;#123;
                for (; !op.empty() &amp;amp;&amp;amp; op.top() == &amp;#39;&amp;amp;&amp;#39;; opt());
                op.push(t);
            &amp;#125;
            else if (t == &amp;#39;|&amp;#39;) &amp;#123;
                for (; !op.empty() &amp;amp;&amp;amp; (op.top() == &amp;#39;&amp;amp;&amp;#39; || op.top() == &amp;#39;^&amp;#39;); opt());
                op.push(t);
            &amp;#125;
            else &amp;#123;
                assert(t == &amp;#39;!&amp;#39;);
                op.push(t);
            &amp;#125;
        for (; !op.empty(); opt());
        p = id.top();
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; rt(n + 1);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), fa(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != 0) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(p);
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x, ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != 0) &amp;#123;
                    top[i] = i, DFS(i);
                    ls[x] += siz[i], g[x] = f[i];
                &amp;#125;
            switch (ty[x]) &amp;#123;
            case 1:
                f[x] = !f[son[x]];
                break;
            case 2:
                f[x] = g[x] &amp;amp; f[son[x]];
                break;
            case 3:
                f[x] = g[x] | f[son[x]];
                break;
            case 4:
                f[x] = g[x] ^ f[son[x]];
                break;
            default:
                assert(0);
                break;
            &amp;#125;
        &amp;#125;
        else
            assert(!ty[x]), f[x] = g[x] = 0, bot[x] = x;
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[p] = p, DFS(p);
    std::vector&amp;lt;int&amp;gt; a(q + 1), res(q + 1);
    for (int i = 1; i &amp;lt;= q; ++i)
        read(a[i]);
    std::vector&amp;lt;int&amp;gt; qid(q), nid;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (ty[i] == 0)
            nid.push_back(i);
    std::iota(qid.begin(), qid.end(), 1);
    std::sort(qid.begin(), qid.end(), [&amp;amp;](int x, int y) &amp;#123; return a[x] &amp;lt; a[y]; &amp;#125;);
    std::sort(nid.begin(), nid.end(), [&amp;amp;](int x, int y) &amp;#123; return lim[x] &amp;gt; lim[y]; &amp;#125;);
    for (auto i : qid) &amp;#123;
        for (; !nid.empty() &amp;amp;&amp;amp; lim[nid.back()] &amp;lt; a[i]; ) &amp;#123;
            int x = nid.back();
            nid.pop_back();
            g[x] = 1;
            for (; top[x] != p; ) &amp;#123;
                add(rt[top[x]], dfn[x]);
                g[fa[top[x]]] = t[rt[top[x]]].u[0][1];
                x = fa[top[x]];
            &amp;#125;
            add(rt[p], dfn[x]);
        &amp;#125;
        res[i] = t[rt[p]].u[0][1];
    &amp;#125;
    for (int i = 1; i &amp;lt;= q; ++i)
        if (res[i])
            std::cout &amp;lt;&amp;lt; &amp;quot;True\n&amp;quot;;
        else
            std::cout &amp;lt;&amp;lt; &amp;quot;False\n&amp;quot;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <category term="DDP" />
        <updated>2025-08-12T00:16:52.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250524/</id>
        <title>周考</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250524/"/>
        <content type="html">&lt;p&gt;并非周考。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---carousel-of-combinations&#34;&gt;B - Carousel of Combinations&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1957/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1957/E&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次询问，每次给定一个 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，求：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\left(\sum\limits_{i=1}^n\sum\limits_{j=1}^i \dfrac {i!}{(i-j)!\cdot j!}\bmod j\right) \bmod 10^9+7
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;赛时打表 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {i!}{(i-j)!\cdot j!}\bmod j\)&lt;/span&gt; 易发现只有 &lt;span class=&#34;math inline&#34;&gt;\(j=4\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 为质数的列上有值；且仅当 &lt;span class=&#34;math inline&#34;&gt;\(\left\lfloor \dfrac ij\right\rfloor\)&lt;/span&gt; 发生变化时，&lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 的值不同。&lt;/p&gt;
&lt;p&gt;于是乎埃筛找每个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的倍数，由于每个值会持续一段 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 上的区间，考虑维护差分数组。前缀和得到原数组，再前缀和就能得到答案。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;证明&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;考虑转化为组合数形式方便证明。当 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 为质数时：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\dfrac {i!}{(i-j)!\cdot j!}\bmod j
&amp;amp;=C_i^j\cdot (j-1)!\bmod j\\
&amp;amp;=C_{i\bmod j}^{j\bmod j}\cdot C_{\lfloor \frac ij\rfloor}^{\frac jj}\cdot (j-1)!\bmod j\\
&amp;amp;=\left\lfloor \frac ij\right\rfloor\cdot (j-1)!\bmod j\\
&amp;amp;=\left\lfloor \frac ij\right\rfloor\cdot (j-1)\bmod j
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 为合数时：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\dfrac {i!}{(i-j)!\cdot j!}\bmod j=\left\lfloor \frac ij\right\rfloor\cdot (j-1)!\bmod j
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j=p^2\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 为质数时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j\ne 4\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(\dfrac jp \ge 3\)&lt;/span&gt;，代表在 &lt;span class=&#34;math inline&#34;&gt;\(1\sim j-1\)&lt;/span&gt; 中至少出现了两个 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的倍数，即 &lt;span class=&#34;math inline&#34;&gt;\((j-1)\bmod j = 0\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;否则，原式转化为 &lt;span class=&#34;math inline&#34;&gt;\(2\cdot \left\lfloor \frac i4\right\rfloor\bmod 4\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;否则：可以找到至少一组 &lt;span class=&#34;math inline&#34;&gt;\(j=i\cdot k\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\(i\ne k\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(i,k\)&lt;/span&gt; 出现在 &lt;span class=&#34;math inline&#34;&gt;\(1\sim j-1\)&lt;/span&gt; 中，即 &lt;span class=&#34;math inline&#34;&gt;\((j-1)\bmod j = 0\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;得到上述结论。&lt;/p&gt;
&lt;p&gt;Tips：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卢卡斯定理：懒得写了。&lt;/li&gt;
&lt;li&gt;威尔逊定理：对于质数 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\((p-1)!\equiv -1\pmod p\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---玻利维亚-bolivija&#34;&gt;C - 玻利维亚 / Bolivija&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P12401&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P12401&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定若干次区间的插入与删除操作，对于所有值域内未被覆盖极长段 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(len_i\)&lt;/span&gt; 为其长度；每次操作后询问 &lt;span class=&#34;math inline&#34;&gt;\(\sum \frac {len_i\cdot (len_i-1)}2+len_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来一点新奇的思路。假如你和我一样，很不幸地不知道维护最小值这个 trick，怎么解决这道题？&lt;/p&gt;
&lt;p&gt;容易想到线段树维护节点内贡献和左侧、右侧极长未覆盖长度。加入区间是简单的：对于线段树上被完全覆盖的节点，更新其贡献为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。依次 &lt;code&gt;pushup&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;删除区间，对于被这段区间完全覆盖的节点，发现如果整体被覆盖次数减少 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，有可能出现新的、未被覆盖的点，如果暴力 check 左右儿子是否出现了这样的点并更新，复杂度就不太美观了。&lt;/p&gt;
&lt;p&gt;故而对于一个节点，&lt;strong&gt;将『完全覆盖它的区间』和『部分覆盖它的区间』分开考虑&lt;/strong&gt;，在维护该节点所有实时信息（记为 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;）的同时，&lt;strong&gt;维护另一份只考虑了『部分覆盖它地区间』的信息（记为 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt;）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果一个『部分覆盖它的区间』被删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果存在『完全覆盖它的区间』：&lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 不变；向下修改儿子的 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt; 需要从儿子的 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 更新。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个『完全覆盖它的区间』被删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果还存在其他『完全覆盖它的区间』：&lt;span class=&#34;math inline&#34;&gt;\(s,s&amp;#39;\)&lt;/span&gt; 都不变。&lt;/li&gt;
&lt;li&gt;如果不存在其他『完全覆盖它的区间』：用 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt; 更新 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就能 &lt;span class=&#34;math inline&#34;&gt;\(O(q\log V)\)&lt;/span&gt; 解决上述问题。本方法较维护最小值的优势在于——似乎没有。想了许多种情况，它们大抵是等价的——且本方法更难写（哭）。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 654205;
struct &amp;#123;
    int cnt;
    long long u, s;
    int l, r, lu, ru, ls, rs;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
#define len(p) (t[p].r - t[p].l + 1)
void pushup(int p) &amp;#123;
    t[p].s = t[lt].u + t[rt].u + (long long)t[lt].ru * t[rt].lu;
    if (t[lt].lu == len(lt))
        t[p].ls = len(lt) + t[rt].lu;
    else
        t[p].ls = t[lt].lu;
    if (t[rt].ru == len(rt))
        t[p].rs = t[lt].ru + len(rt);
    else
        t[p].rs = t[rt].ru;
    if (!t[p].cnt)
        t[p].u = t[p].s, t[p].lu = t[p].ls, t[p].ru = t[p].rs;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u = t[p].s = 1ll;
        t[p].lu = t[p].ru = t[p].ls = t[p].rs = 1;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void add(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        ++t[p].cnt, t[p].u = 0ll, t[p].lu = t[p].ru = 0;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        add(lt, l, r);
    if (r &amp;gt; mid)
        add(rt, l, r);
    pushup(p);
    return;
&amp;#125;
void rem(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        if (!--t[p].cnt)
            t[p].u = t[p].s, t[p].lu = t[p].ls, t[p].ru = t[p].rs;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        rem(lt, l, r);
    if (r &amp;gt; mid)
        rem(rt, l, r);
    pushup(p);
    return;
&amp;#125;
int main() &amp;#123;
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    int n, q;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    int u = (n + 1) / 2;
    const int N = a[u];
    bld(1, 1, N);
    for (int i = 1; i &amp;lt; u; ++i)
        if (a[i] != a[n - i + 1])
            add(1, std::min(a[i], a[n - i + 1]) + 1, std::max(a[i], a[n - i + 1]));
    std::cout &amp;lt;&amp;lt; t[1].u &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    for (int i, v; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; i &amp;gt;&amp;gt; v;
        if (a[i] != a[n - i + 1])
            rem(1, std::min(a[i], a[n - i + 1]) + 1, std::max(a[i], a[n - i + 1]));
        a[i] = v;
        if (a[i] != a[n - i + 1])
            add(1, std::min(a[i], a[n - i + 1]) + 1, std::max(a[i], a[n - i + 1]));
        std::cout &amp;lt;&amp;lt; t[1].u &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---移动金币&#34;&gt;D - 移动金币&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5363&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5363&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后一个棋子的移动等价于丢掉最后一部分空格；中间棋子的移动等价于把左边间隔里的一段空格拿到右边的间隔里。发现原问题转化为『阶梯 Nim 博弈』。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;关于阶梯 Nim 博弈…&lt;/summary&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 层石头，每次行动可以选择以下操作中的一种：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;选择 &lt;span class=&#34;math inline&#34;&gt;\(2\le i\le n\)&lt;/span&gt;，从第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 层石头中拿走若干颗，全部放到第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 层里。&lt;/li&gt;
&lt;li&gt;从第 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 层石头中拿走若干颗，全部丢弃。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不能行动者输。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本问题可以等效为 Nim 游戏：&lt;/p&gt;
&lt;p&gt;对于第偶数层，若 Alice 选择从第 &lt;span class=&#34;math inline&#34;&gt;\(2i\)&lt;/span&gt; 层中移动 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个石头到 &lt;span class=&#34;math inline&#34;&gt;\(2i-1\)&lt;/span&gt;，Bob 可以立即从 &lt;span class=&#34;math inline&#34;&gt;\(2i-1\)&lt;/span&gt; 层中将这 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个石头移动到 &lt;span class=&#34;math inline&#34;&gt;\(2i-2\)&lt;/span&gt;（或丢弃）。&lt;/p&gt;
&lt;p&gt;也就是说，Alice 在偶数层中的操作不会对 Bob 带来任何限制。偶数层的石头可以被视作不存在；从奇数层移动到偶数层的石头可以被视为丢弃；进而，奇数堆中的移动等效为『丢弃』，将原问题中所有奇数堆抽离出来，等效成普通的 Nim 游戏。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;问题转化成，将 &lt;span class=&#34;math inline&#34;&gt;\(n-m\)&lt;/span&gt; 个元素放到编号 &lt;span class=&#34;math inline&#34;&gt;\(0\sim m+1\)&lt;/span&gt; 的盒子里，满足奇数号盒子球个数异或和为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的方案数。小容斥一下，用总数减去异或和为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 者。&lt;/p&gt;
</content>
        <category term="线段树" />
        <category term="博弈论" />
        <updated>2025-05-24T06:29:44.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250217/</id>
        <title>线段树维护前缀最值序列信息</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250217/"/>
        <content type="html">&lt;p&gt;人类不应该使用 &lt;code&gt;std::vector&lt;/code&gt; 实现线段树的 2 个原因：&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;当你的参数包含引用时，扩容操作，包括显式的 &lt;code&gt;resize()&lt;/code&gt; 和隐式的 &lt;code&gt;push_back()&lt;/code&gt; 均会导致引用失效。&lt;/li&gt;
&lt;li&gt;当你的左值为引用时，由于 &lt;code&gt;=&lt;/code&gt; 左右计算顺序是不确定的（C++14），由于 1 中所述原因，引用可能失效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terminate called after throwing an instance of &#39;std::bad_alloc&#39; what():  std::bad_alloc&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;笑点解析：首先通过「……的 2 个原因」暗示声明一个长度为 2 的 &lt;code&gt;vector&lt;/code&gt;，接着在试图访问第 3 个元素时抛出错误。&lt;/p&gt;
&lt;p&gt;什么？你说我的下标是从 1 开始的？恭喜你发现了 &lt;code&gt;vector&lt;/code&gt; 的第 0 个笑点。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;楼房重建&#34;&gt;楼房重建&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4198&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4198&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑用线段树解决问题。难点在于如何合并两个区间的信息——直觉地，大区间的信息一定与两个子区间有关。&lt;/p&gt;
&lt;p&gt;考虑理想的情况：我们现在知道左右两边区间的答案序列。显然我们需要保留左边整段区间，对于左区间序列末的元素 &lt;span class=&#34;math inline&#34;&gt;\(rv_l\)&lt;/span&gt;，我们在右区间内找到第一个大于之的元素 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，从它开始的序列就是答案。&lt;/p&gt;
&lt;p&gt;反证法易得 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 一定在右区间答案序列内：若 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 不在答案序列内，则右区间内存在一个 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt; 且位于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 之前的元素，那么 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 就不是第一个 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;rv_l\)&lt;/span&gt; 的元素，矛盾。&lt;/p&gt;
&lt;p&gt;那么现在对于左右序列未知的情况，我们取左区间的答案，再在右区间中单 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 查找能够接上去的区间长度，加起来即可。&lt;/p&gt;
&lt;p&gt;题目只要求总区间答案，故不需要查询。动态开点可能需要小心处理一下。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
struct &amp;#123;
    int l, r, u;
    double lv, rv, mv;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int tot;
#define lt t[p].l
#define rt t[p].r
int askt(int p, int l, int r, double v) &amp;#123;
    if (l == r)
        return t[p].u;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (lt &amp;amp;&amp;amp; t[p].mv &amp;gt; v)
        return t[p].u - t[lt].u + askt(lt, l, mid, v);
    return askt(rt, mid + 1, r, v);
&amp;#125;
void pushup(int p, int l, int r) &amp;#123;
    t[p].mv = t[lt].rv;
    if (lt &amp;amp;&amp;amp; rt) &amp;#123;
        t[p].lv = t[lt].lv;
        t[p].rv = std::max(t[lt].rv, t[rt].rv);
        if (t[lt].rv &amp;lt; t[rt].lv)
            t[p].u = t[lt].u + t[rt].u;
        else if (t[lt].rv &amp;gt;= t[rt].rv)
            t[p].u = t[lt].u;
        else &amp;#123;
            int mid = (l + r) &amp;gt;&amp;gt; 1;
            t[p].u = t[lt].u + askt(rt, mid + 1, r, t[lt].rv);
        &amp;#125;
    &amp;#125;
    else &amp;#123;
        t[p].u = t[lt + rt].u;
        t[p].lv = t[lt + rt].lv, t[p].rv = t[lt + rt].rv;
    &amp;#125;
    return;
&amp;#125;
void upd(int &amp;amp;p, int l, int r, int x, double v) &amp;#123;
    if (!p)
        p = ++tot;
    if (l == r) &amp;#123;
        t[p].lv = t[p].rv = v, t[p].u = 1;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, l, mid, x, v);
    else
        upd(rt, mid + 1, r, x, v);
    pushup(p, l, r);
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P4198_2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, rt = 0;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;double&amp;gt; a(n + 1);
    for (int x; m--; ) &amp;#123;
        double y;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        a[x] = y / x;
        upd(rt, 1, n, x, y / x);
        std::cout &amp;lt;&amp;lt; t[1].u &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <updated>2025-02-17T11:09:57.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250216/</id>
        <title>Public Round 15 前两题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250216/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;https://pjudge.ac/contest/1914&#34;&gt;PR #15&lt;/a&gt; 前两题题解。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;最小表示法&#34;&gt;最小表示法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pjudge.ac/contest/1914/problem/21888&#34; class=&#34;uri&#34;&gt;https://pjudge.ac/contest/1914/problem/21888&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先不妨假设每个 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 在值域内等概率取值以简化问题。那么手玩一下可以轻松地得到规律：不妨将 &lt;span class=&#34;math inline&#34;&gt;\(\{s\}\)&lt;/span&gt; 循环右移一位的结果记为 &lt;span class=&#34;math inline&#34;&gt;\(\{t\}\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(res=\sum\frac 1{\max(|s_i|,|t_i|)}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这看起来令人疑惑：对于不同的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\([f(s_i)=f(t_i)]\)&lt;/span&gt; 的期望似乎是彼此独立的，十分奇怪。这其实与表达式的来源有关，记 &lt;span class=&#34;math inline&#34;&gt;\(g(s_i, j)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(f(s_i)=j\)&lt;/span&gt; 的概率，那么上述等式可以转写为 &lt;span class=&#34;math inline&#34;&gt;\(res=\sum\limits_i\sum\limits_jg({s_i},j)\times g(t_i,j)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么将最小表示法带来的偏差纳入考虑范围，我们发现 &lt;span class=&#34;math inline&#34;&gt;\(g(s,j)\)&lt;/span&gt; 对于不同的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 并不永远相等。具体地，当 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 具有循环节时，最小循环节的第一处结尾会享有更大的取得概率。&lt;/p&gt;
&lt;p&gt;枚举 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 的因数作为最小循环节长度的情况，显然，对于最小循环节为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的情况（该情况出现的概率，容斥得到 &lt;span class=&#34;math inline&#34;&gt;\(p_j=26^j-\sum_{k\mid j}p_k\)&lt;/span&gt;），&lt;span class=&#34;math inline&#34;&gt;\(f(s_i)\)&lt;/span&gt; 的取值在 &lt;span class=&#34;math inline&#34;&gt;\(1\sim j\)&lt;/span&gt; 上等概率分布，差分即可统计每个值在不同循环节长度下被取到的概率和。&lt;/p&gt;
&lt;p&gt;用埃筛解决每个数的因数和 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 值，那么此时复杂度瓶颈在于 &lt;span class=&#34;math inline&#34;&gt;\(g(s_i, j)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_i\sum\limits_jg({s_i},j)\times g(t_i,j)\)&lt;/span&gt; 的求解。容易发现只有每个 &lt;span class=&#34;math inline&#34;&gt;\(g(s_i,j),j\mid |s_i|\)&lt;/span&gt; 的值是有效的（其他的和它们值都相同），考虑只求解和利用这些值，类 &lt;code&gt;std::merge&lt;/code&gt;（即归并排序）地求解答案。&lt;/p&gt;
&lt;p&gt;注意特判 &lt;span class=&#34;math inline&#34;&gt;\(n=1\)&lt;/span&gt;。会得到错误答案的原因是此时存在 &lt;span class=&#34;math inline&#34;&gt;\(s_i=t_i\)&lt;/span&gt;，不满足基本要求。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 1e5;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    if (n == 1) &amp;#123;
        std::cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    auto qkp = [](long long x, int y) &amp;#123;
        long long res = 1ll;
        for (; y; y &amp;gt;&amp;gt;= 1, (x *= x) %= mod)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto inv = [&amp;amp;](int x) &amp;#123;
        return qkp(x, mod - 2);
    &amp;#125;;
    std::vector&amp;lt;long long&amp;gt; f(lim + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; fac(lim + 1);
    for (int i = 1; i &amp;lt;= lim; ++i) &amp;#123;
        static long long now = 26;
        (f[i] += now) %= mod;
        fac[i].push_back(i);
        for (int j = 2 * i; j &amp;lt;= lim; j += i)
            (f[j] += mod - f[i]) %= mod, fac[j].push_back(i);
        (now *= 26) %= mod;
    &amp;#125;
    for (int i = 1; i &amp;lt;= lim; ++i)
        (f[i] *= inv(i)) %= mod;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    struct _ &amp;#123; int l, r; long long f; &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;_&amp;gt; &amp;gt; g(lim + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        if (g[a[i]].empty()) &amp;#123;
            g[a[i]].resize(fac[a[i]].size());
            for (int j = 0; j &amp;lt; (int)fac[a[i]].size(); ++j) &amp;#123;
                g[a[i]][j].l = (j ? g[a[i]][j - 1].r + 1 : 1);
                g[a[i]][j].r = fac[a[i]][j];
                (g[a[i]][0].f += f[fac[a[i]][j]]) %= mod;
                if (j != (int)fac[a[i]].size() - 1)
                    (g[a[i]][j + 1].f += mod - f[fac[a[i]][j]]) %= mod;
            &amp;#125;
            for (int j = 1; j &amp;lt; (int)fac[a[i]].size(); ++j)
                (g[a[i]][j].f += g[a[i]][j - 1].f) %= mod;
            int getinv = inv(qkp(26, a[i]));
            for (int j = 0; j &amp;lt; (int)fac[a[i]].size(); ++j)
                (g[a[i]][j].f *= getinv) %= mod;
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; b(n + 1);
    std::rotate_copy(a.begin() + 1, --a.end(), a.end(), b.begin() + 1);
    long long res = 0ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 0, k = 0, now = 0;
            j &amp;lt; (int)fac[a[i]].size() &amp;amp;&amp;amp; k &amp;lt; (int)fac[b[i]].size(); )
            if (g[a[i]][j].r &amp;lt; g[b[i]][k].r) &amp;#123;
                (res += g[a[i]][j].f * g[b[i]][k].f % mod
                    * (g[a[i]][j].r - now) % mod) %= mod;
                now = g[a[i]][j].r, ++j;
            &amp;#125;
            else if (g[a[i]][j].r == g[b[i]][k].r) &amp;#123;
                (res += g[a[i]][j].f * g[b[i]][k].f % mod
                    * (g[a[i]][j].r - now) % mod) %= mod;
                now = g[a[i]][j].r, ++j, ++k;
            &amp;#125;
            else &amp;#123;
                (res += g[a[i]][j].f * g[b[i]][k].f % mod
                    * (g[b[i]][k].r - now) % mod) %= mod;
                now = g[b[i]][k].r, ++k;
            &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;二叉搜索树&#34;&gt;二叉搜索树&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pjudge.ac/contest/1914/problem/21889&#34; class=&#34;uri&#34;&gt;https://pjudge.ac/contest/1914/problem/21889&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当我们处理链的部分分时，很容易想到用差分解决问题。把更新 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 看作在差分数组 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 处插入，在 &lt;span class=&#34;math inline&#34;&gt;\(r+1\)&lt;/span&gt; 处删除，离线下来再从左到右扫一遍操作，考虑如何解决查询问题。&lt;/p&gt;
&lt;p&gt;考虑如何获取 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 树上 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 时刻点 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的所有祖先。根据前面的操作，我们可以获取 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 树上存在过的所有元素。&lt;/p&gt;
&lt;p&gt;对于比 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 大的元素，考虑祖先 &lt;span class=&#34;math inline&#34;&gt;\(p_a\)&lt;/span&gt; 和非祖先 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 有什么区别。根据 BST 的性质易得，对于最低的右侧祖先 &lt;span class=&#34;math inline&#34;&gt;\({p_a}_0\)&lt;/span&gt;，其是 &lt;span class=&#34;math inline&#34;&gt;\(\ge x\)&lt;/span&gt; 的最小的元素（当然其加入时刻 &lt;span class=&#34;math inline&#34;&gt;\(t_a&amp;lt;t_0\)&lt;/span&gt;）；那么同理可以找到 &lt;span class=&#34;math inline&#34;&gt;\({p_a}_0\)&lt;/span&gt; 右侧最低的祖先（其左侧的祖先显然也 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 左侧），该祖先满足 &lt;span class=&#34;math inline&#34;&gt;\(t&amp;lt;t_a\)&lt;/span&gt;。那么我们就从左右两边分别得到 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的所有祖先。容易证明该过程对于不在树上的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 也是正确的。&lt;/p&gt;
&lt;p&gt;具体地，我们需要一个数据结构，能够求出 &lt;span class=&#34;math inline&#34;&gt;\(\ge x\)&lt;/span&gt; 的元素中，以 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 为起点的前缀最小值序列的区间和。&lt;/p&gt;
&lt;p&gt;欸 ☝🤓 这是什么？&lt;a href=&#34;/20250217&#34;&gt;楼房重建&lt;/a&gt;！秒一下！&lt;/p&gt;
&lt;p&gt;进一步地，本题需要完成对于 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 为序列头的查询。再次利用性质，每次 &lt;span class=&#34;math inline&#34;&gt;\(O(\log V)\)&lt;/span&gt; 地合并答案。&lt;/p&gt;
&lt;p&gt;好的那么怎么把链搞到树上呢？把差分放到树上，写个线段树合并即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意由于这题细节太多了，所以你可能需要舍弃不必要的时空优化换取代码简洁度以方便调试。&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre data-line=&#34;12&#34; class=&#34;cpp language-cpp&#34;&gt;&lt;code data-line=&#34;12&#34; class=&#34;cpp language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 2e5;
const int maxn = 2e7 + 5;
const int inf = 0x3f3f3f3f;
struct &amp;#123;
    int l, r, rv;
    long long u;
&amp;#125; t[maxn];
std::vector&amp;lt;int&gt; tr;
#define lt t[p].l
#define rt t[p].r
int newnode(void) &amp;#123;         // 我知道你要说什么，但这属于「必要的」空间优化 😥
    static int tot = 0;
    if (tr.empty())
        return ++tot;
    auto p(tr.back());
    t[p].l = t[p].r = 0;
    tr.pop_back();
    return p;
&amp;#125;
long long askv(int p, int l, int r, int v) &amp;#123;
    if (l == r)
        return t[p].rv &lt; v ? t[p].u : 0;
    int mid = (l + r) &gt;&gt; 1;
    if (v &gt; t[lt].rv)
        return t[p].u - t[lt].u + askv(lt, l, mid, v);
    return askv(rt, mid + 1, r, v);
&amp;#125;
void pushup(int p, int l, int r) &amp;#123;
    t[p].rv = std::min(t[lt].rv, t[rt].rv);
    int mid = (l + r) &gt;&gt; 1;
    t[p].u = t[lt].u + askv(rt, mid + 1, r, t[lt].rv);
    return;
&amp;#125;
void upd(int &amp;p, int l, int r, int x, int v, int u) &amp;#123;
    if (!p)
        p = newnode();
    if (l == r) &amp;#123;
        t[p].rv = v, t[p].u = u;
        return;
    &amp;#125;
    int mid = (l + r) &gt;&gt; 1;
    if (x &lt;= mid)
        upd(lt, l, mid, x, v, u);
    else
        upd(rt, mid + 1, r, x, v, u);
    pushup(p, l, r);
    return;
&amp;#125;
void merge(int &amp;p, int q, int l, int r) &amp;#123;
    if (!p || !q) &amp;#123;
        p += q;
        return;
    &amp;#125;
    if (l == r) &amp;#123;
        t[p].rv = std::min(t[p].rv, t[q].rv);
        t[p].u = std::max(t[p].u, t[q].u);
        return;
    &amp;#125;
    int mid = (l + r) &gt;&gt; 1;
    merge(t[p].l, t[q].l, l, mid), merge(t[p].r, t[q].r, mid + 1, r);
    pushup(p, l, r), tr.push_back(q);
    return;
&amp;#125;
int qv = inf;
long long ask(int p, int l, int r, int ql, int qr) &amp;#123;
    if (ql &lt;= l &amp;&amp; r &lt;= qr) &amp;#123;
        auto s(askv(p, l, r, qv));
        qv = std::min(qv, t[p].rv);
        return s;
    &amp;#125;
    int mid = (l + r) &gt;&gt; 1;
    long long res = 0ll;
    if (ql &lt;= mid)
        res = ask(lt, l, mid, ql, qr);
    if (qr &gt; mid)
        res += ask(rt, mid + 1, r, ql, qr);
    return res;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&#34;ex_problem4.in&#34;, &#34;r&#34;, stdin);
    std::freopen(&#34;.out&#34;, &#34;w&#34;, stdout);
#endif
    int n, m;
    std::cin &gt;&gt; n &gt;&gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; g(n + 1);
    for (int i = 1, x, y; i &lt; n; ++i) &amp;#123;
        std::cin &gt;&gt; x &gt;&gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&gt; top(n + 1), fa(n + 1), siz(n + 1), son(n + 1), dep(n + 1);
    std::function&amp;lt;void(int, int)&gt; DFS = [&amp;](int x, int faa) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != faa) &amp;#123;
                fa[i] = x, dep[i] = dep[x] + 1;
                DFS(i, x), siz[x] += siz[i];
                if (siz[i] &gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    DFS = [&amp;](int x, int topp) &amp;#123;
        top[x] = topp;
        if (son[x])
            DFS(son[x], topp);
        for (auto i : g[x])
            if (i != fa[x] &amp;&amp; i != son[x])
                DFS(i, i);
        return;
    &amp;#125;;
    DFS(1, 1);
    auto getLCA = [&amp;](int x, int y) &amp;#123;
        for (; top[x] != top[y]; x = fa[top[x]])
            if (dep[top[y]] &gt; dep[top[x]])
                std::swap(x, y);
        return (dep[x] &lt; dep[y] ? x : y);
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; d(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&gt; &gt; &gt; u(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::tuple&amp;lt;int, int, int&gt; &gt; &gt; q(n + 1);
    int cnt = 0;
    for (int i = 1; i &lt;= m; ++i) &amp;#123;
        int op;
        std::cin &gt;&gt; op;
        if (op == 0) &amp;#123;
            int x, v;
            std::cin &gt;&gt; x &gt;&gt; v;
            q[x].emplace_back(++cnt, i, v);
        &amp;#125; else &amp;#123;
            int x, y, v;
            std::cin &gt;&gt; x &gt;&gt; y &gt;&gt; v;
            int faa = getLCA(x, y);
            u[x].emplace_back(i, v), u[y].emplace_back(i, v);
            if (fa[faa])
                d[fa[faa]].emplace_back(v);
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;long long&gt; res(cnt + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; rt(2, std::vector&amp;lt;int&gt; (n + 1));
    t[0].rv = inf;
    DFS = [&amp;](int x, int fa) &amp;#123;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                merge(rt[0][x], rt[0][i], 1, lim);
                merge(rt[1][x], rt[1][i], 1, lim);
            &amp;#125;
        for (auto [t, v] : u[x]) &amp;#123;
            upd(rt[0][x], 1, lim, v, t, v);
            upd(rt[1][x], 1, lim, lim - v + 1, t, v);
        &amp;#125;
        for (auto v : d[x]) &amp;#123;
            upd(rt[0][x], 1, lim, v, inf, 0);
            upd(rt[1][x], 1, lim, lim - v + 1, inf, 0);
        &amp;#125;
        for (auto [id, t, v] : q[x]) &amp;#123;
            qv = t, res[id] = ask(rt[0][x], 1, lim, v, lim);
            qv = t, res[id] += ask(rt[1][x], 1, lim, lim - v + 1, lim);
            qv = t, res[id] -= ask(rt[0][x], 1, lim, v, v);
        &amp;#125;
    &amp;#125;;
    DFS(1, -1);
    for (int i = 1; i &lt;= cnt; ++i)
        std::cout &lt;&lt; res[i] &lt;&lt; &#39;\n&#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <category term="数学" />
        <category term="树上差分" />
        <updated>2025-02-16T11:44:38.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20241021/</id>
        <title>字符串</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20241021/"/>
        <content type="html">&lt;p&gt;标题本来叫「哈希」，后来发现第二天的很多题虽然打了哈希的 tag 但是只有 KMP 做法，故忍痛改成「字符串」。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-two-permutations&#34;&gt;A. Two Permutations&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5653/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5653/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有个很重要的性质是 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 都是排列。然后我们就知道了 &lt;span class=&#34;math inline&#34;&gt;\(x\in [0,m-n]\)&lt;/span&gt;，且每个 &lt;span class=&#34;math inline&#34;&gt;\(a_i+x\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 中有元素与之唯一对应。&lt;mark&gt;于是问题可以转化成，&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 中在 &lt;span class=&#34;math inline&#34;&gt;\([1+x,n+x]\)&lt;/span&gt; 范围中的元素按顺序哈希起来和 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 序列是否完全一致&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;我们就有了一个想法：枚举这个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，通过某种方法快速查询这个长度固定的值域区间按顺序哈希起来的值。&lt;mark&gt;然后就是典中典之线段树维护哈希，只需在枚举 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 时滑动窗口，剔除头部元素，新增尾部元素，查询全局哈希值即可&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;还有一个小细节是关于实时维护全局加 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 后的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;。由于哈希用乘的肯定拆不开，只能用加哈希了。每次 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 加一的时候全局哈希值加上 &lt;span class=&#34;math inline&#34;&gt;\(\sum p_i\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int p = 998244353;
const int mod = 1e9 + 7;
const int maxn = 2e5 + 5;
struct &amp;#123;
    int l, r, s;
    long long u;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
long long base[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void pushup(int p) &amp;#123;
    t[p].u = (t[lt].u * base[t[rt].s] % mod + t[rt].u) % mod;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    t[p].s += (v &amp;gt;= 0 ? 1 : -1);
    if (t[p].l == t[p].r) &amp;#123;
        t[p].u += v;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x, v);
    else
        add(rt, x, v);
    pushup(p);
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(m + 1), pos(m + 1);
    base[0] = 1;
    long long s = 1;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        base[i] = base[i - 1] * p % mod;
        if (i &amp;lt; n)
            (s += base[i]) %= mod;
    &amp;#125;
    long long now = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        now = (now * p % mod + a[i]) % mod;
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cin &amp;gt;&amp;gt; b[i], pos[b[i]] = i;
    int res = 0;
    bld(1, 1, m);
    for (int x = 0; x &amp;lt;= m - n; ++x) &amp;#123;
        for (static int l = 1; l &amp;lt; 1 + x; add(1, pos[l], -l), ++l);
            // printf(&amp;quot;add %d: %d\n&amp;quot;, pos[l], -l);
        for (static int r = 1; r &amp;lt;= n + x; add(1, pos[r], r), ++r);
            // printf(&amp;quot;add %d: %d\n&amp;quot;, pos[r], r);
        (res += (now == t[1].u));
        // printf(&amp;quot;x = %d, now = %lld, t[1].u = %lld\n&amp;quot;, x, now, t[1].u);
        (now += s) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-k-substrings&#34;&gt;B. k-substrings&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5653/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5653/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们可以发现这 &lt;span class=&#34;math inline&#34;&gt;\(\left\lceil\dfrac n2\right\rceil\)&lt;/span&gt; 个串都有共同中点，而&lt;mark&gt;不管其位于元素还是元素间的空隙，两边的 border 都应关于其对称&lt;/mark&gt;。啥叫奇 border 呢，就是每个 border 都能取到元素上的中点，&lt;mark&gt;也就是说这俩中点是关于全串中点对称的&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;我们枚举这 &lt;span class=&#34;math inline&#34;&gt;\(\left\lfloor\dfrac n2\right\rfloor\)&lt;/span&gt; 对可能的 border 中点，分别二分 border 长度。假设最后该对中点最长合法 border 为 &lt;span class=&#34;math inline&#34;&gt;\([l_1,r_1]\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\([l_2,r_2]\)&lt;/span&gt;，用 &lt;span class=&#34;math inline&#34;&gt;\(r_1-l_1+1-2\times k\)&lt;/span&gt; 更新 &lt;span class=&#34;math inline&#34;&gt;\(l_1+k\)&lt;/span&gt; 处的答案即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int p = 131;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;char&amp;gt; a(n + 1);
    std::vector&amp;lt;int&amp;gt; res(n + 1, -1);
    std::vector&amp;lt;long long&amp;gt; h(n + 1), base(n + 1);
    base[0] = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        h[i] = (h[i - 1] * p + a[i]) % mod;
        base[i] = base[i - 1] * p % mod;
    &amp;#125;
    auto geth = [&amp;amp;](int l, int r) &amp;#123;
        return (h[r] + mod - h[l - 1] * base[r - l + 1] % mod) % mod;
    &amp;#125;;
    for (int l = n / 2, r = (n + 1) / 2 + 1; r &amp;lt;= n; --l, ++r)
        if (a[l] == a[r]) &amp;#123;
            int t = 0;
            for (int ll = 1, rr = l, mid; ll &amp;lt;= rr; ) &amp;#123;
                mid = (ll + rr) &amp;gt;&amp;gt; 1;
                if (geth(l - mid + 1, l + mid - 1) == geth(r - mid + 1, r + mid - 1))
                    t = mid, ll = mid + 1;
                else
                    rr = mid - 1;
            &amp;#125;
            res[l - t + 1] = std::max(res[l - t + 1], 2 * t - 1);
        &amp;#125;
    for (int i = 1; i &amp;lt;= (n + 1) / 2; ++i) &amp;#123;
        res[i] = std::max(res[i - 1] - 2, res[i]);
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c.-kefa-and-watch&#34;&gt;C. Kefa and Watch&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5653/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5653/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个挺常用的 trick 是，&lt;mark&gt;&lt;span class=&#34;math inline&#34;&gt;\(S_{l\sim r}\)&lt;/span&gt; 存在长度为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的循环节 &lt;span class=&#34;math inline&#34;&gt;\(\iff S_{l\sim (r-d)}=S_{(l+d+)\sim r}\)&lt;/span&gt;&lt;/mark&gt;。而题目要求为混循环节，刚好也可以用这个方法判定。线段树随便维护一下哈希就行。assign 操作就是将长度为 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 的区间哈希值更改为 &lt;span class=&#34;math inline&#34;&gt;\(t\times \sum_{i=0}^{len-1}p^i\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int p = 131;
const int mod = 1e9 + 7;
const int maxn = 1e5 + 5;
struct &amp;#123;
    int l, r, d;
    long long u;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int a[maxn];
long long base[maxn], s[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void pushup(int p) &amp;#123;
    t[p].u = (t[lt].u * base[t[rt].r - t[rt].l + 1] % mod + t[rt].u) % mod;
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (~t[p].d) &amp;#123;
        t[lt].d = t[rt].d = t[p].d;
        t[lt].u = t[p].d * s[t[lt].r - t[lt].l] % mod;
        t[rt].u = t[p].d * s[t[rt].r - t[rt].l] % mod;
        t[p].d = -1;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r, t[p].d = -1;
    if (l == r) &amp;#123;
        t[p].u = a[l];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void ass(int p, int l, int r, int v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d = v;
        t[p].u = v * s[t[p].r - t[p].l] % mod;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        ass(lt, l, r, v);
    if (r &amp;gt; mid)
        ass(rt, l, r, v);
    pushup(p);
    return;
&amp;#125;
long long ask(int p, int l, int r) &amp;#123;
    // printf(&amp;quot;p = %d, u = %lld, [%d, %d] of [%d, %d]\n&amp;quot;, p, t[p].u, t[p].l, t[p].r, l, r);
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    return (ask(lt, l, r) * base[std::min(r, t[p].r) - mid] % mod + ask(rt, l, r)) % mod;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; k;
    base[0] = s[0] = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        a[i] = t - &amp;#39;0&amp;#39;;
        base[i] = base[i - 1] * p % mod;
        s[i] = (s[i - 1] + base[i]) % mod;
    &amp;#125;
    bld(1, 1, n);
    for (int q = m + k; q--; ) &amp;#123;
        int op;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            int l, r, t;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r &amp;gt;&amp;gt; t;
            ass(1, l, r, t);
        &amp;#125;
        else &amp;#123;
            int l, r, d;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r &amp;gt;&amp;gt; d;
            // if (d != r - l + 1)
            //     printf(&amp;quot;%lld / %lld\n&amp;quot;, ask(1, l, r - d), ask(1, l + d, r));
            std::cout &amp;lt;&amp;lt; ((d == r - l + 1 || ask(1, l, r - d) == ask(1, l + d, r)) ? &amp;quot;YES&amp;quot; : &amp;quot;NO&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-misha-and-lcp-on-tree&#34;&gt;D. Misha and LCP on Tree&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5653/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5653/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个很显然的做法是，我们二分一个长度，然后在 &lt;span class=&#34;math inline&#34;&gt;\(a\to fa\)&lt;/span&gt; 上正哈希，&lt;span class=&#34;math inline&#34;&gt;\(b\to fa\)&lt;/span&gt; 上反哈希，&lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; check。&lt;/p&gt;
&lt;p&gt;笑话：本来想用倍增求 &lt;span class=&#34;math inline&#34;&gt;\(a\to fa\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b\to fa\)&lt;/span&gt; 的哈希（当然双 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 肯定是会被卡飞的），后来发现&lt;mark&gt;哈希具有可减性，我们又只需求一条链上的哈希值，直接减掉就行&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;还有一个点就是 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 求 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 级祖先，有长剖预处理的做法。&lt;a href=&#34;/20241021-1&#34;&gt;具体做法&lt;/a&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int p = 131;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; to(n + 1);
    std::vector&amp;lt;char&amp;gt; a(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    std::vector&amp;lt;long long&amp;gt; base(n + 1), inv(n + 1);
    auto qkp = [](long long x, int y) &amp;#123;
        long long res = 1;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    base[0] = inv[0] = 1;
    for (int i = 1, mx = 0; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        base[i] = base[i - 1] * p % mod;
        inv[i] = qkp(base[i], mod - 2);
        if (i &amp;gt;= (1 &amp;lt;&amp;lt; mx) * 2)
            ++mx;
        to[i] = mx;
    &amp;#125;
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; h1(n + 1), h2(n + 1);
    std::vector&amp;lt;std::array&amp;lt;int, 21&amp;gt; &amp;gt; fa(n + 1);
    std::vector&amp;lt;int&amp;gt; h(n + 1, 1), son(n + 1), dep(n + 1);
    h[0] = 0;
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        h1[x] = (h1[fa[x][0]] * p % mod + a[x]) % mod;
        h2[x] = (h2[fa[x][0]] + a[x] * base[dep[x] - 1]) % mod;
        for (auto i : g[x])
            if (i != fa[x][0]) &amp;#123;
                fa[i][0] = x;
                for (int j = 1; j &amp;lt;= 20; ++j)
                    fa[i][j] = fa[fa[i][j - 1]][j - 1];
                dep[i] = dep[x] + 1;
                DFS(i);
                if (h[i] &amp;gt;= h[son[x]])
                    son[x] = i, h[x] = h[i] + 1;
            &amp;#125;
        return;
    &amp;#125;;
    dep[1] = 1, DFS(1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), id(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; anc(n + 1), des(n + 1, std::vector&amp;lt;int&amp;gt; (1));
    std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int toq) &amp;#123;
        top[x] = toq;
        if (son[x])
            DFS1(son[x], toq);
        for (auto i : g[x])
            if (i != fa[x][0] &amp;amp;&amp;amp; i != son[x])
                DFS1(i, i);
        des[toq].push_back(x);
        id[x] = (int)des[toq].size() - 1;
        if (x == toq) &amp;#123;
            anc[x].push_back(x);
            for (int j = 1, now = x; j &amp;lt;= id[x]; ++j, now = fa[now][0])
                anc[x].push_back(fa[now][0]);
        &amp;#125;
        return;
    &amp;#125;;
    DFS1(1, 1);
    auto getLCA = [&amp;amp;](int x, int y) &amp;#123;
        if (dep[x] &amp;lt; dep[y])
            std::swap(x, y);
        for (int i = 20; ~i; --i)
            if (dep[fa[x][i]] &amp;gt;= dep[y])
                x = fa[x][i];
        if (x == y)
            return x;
        for (int i = 20; ~i; --i)
            if (fa[x][i] != fa[y][i])
                x = fa[x][i], y = fa[y][i];
        return fa[x][0];
    &amp;#125;;
    auto ask = [&amp;amp;](int x, int k) &amp;#123;
        assert(dep[x] - 1 &amp;gt;= k);
        int x1 = x;
        if (!k)
            return x;
        x = fa[x][to[k]];
        if (dep[x] - dep[top[x]] &amp;gt;= k - (1 &amp;lt;&amp;lt; to[k]))
            return des[top[x]][id[x] + k - (1 &amp;lt;&amp;lt; to[k])];
        return anc[top[x]][k - (1 &amp;lt;&amp;lt; to[k]) - (dep[x] - dep[top[x]])];
    &amp;#125;;
    auto dis = [&amp;amp;](int x, int y, int fa) &amp;#123;
        return dep[x] + dep[y] - 2 * dep[fa];
    &amp;#125;;
    auto gethash = [&amp;amp;](int x, int y, int f, int k) &amp;#123;
        if (!k)
            return 0ll;
        if (k &amp;lt;= dep[x] - dep[f] + 1) &amp;#123;
            f = ask(x, k - 1);
            return (h2[x] + mod - h2[fa[f][0]]) % mod * inv[dep[f] - 1] % mod;
        &amp;#125;
        long long h = (h2[x] + mod - h2[fa[f][0]]) % mod * inv[dep[f] - 1] % mod;
        k -= (dep[x] - dep[f] + 1);
        y = ask(y, (dep[y] - dep[f]) - k);
        h = (h * base[dep[y] - dep[f]] % mod + (h1[y] + mod - h1[f] * base[dep[y] - dep[f]] % mod) % mod) % mod;
        return h;
    &amp;#125;;
    int m;
    std::cin &amp;gt;&amp;gt; m;
    for (int x, y, a, b; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        int fa1 = getLCA(x, y), fa2 = getLCA(a, b), res = 0;
        for (int l = 0, r = std::min(dis(x, y, fa1), dis(a, b, fa2)) + 1, mid; l &amp;lt;= r; ) &amp;#123;
            mid = (l + r) &amp;gt;&amp;gt; 1;
            if (gethash(x, y, fa1, mid) == gethash(a, b, fa2, mid))
                res = mid, l = mid + 1;
            else
                r = mid - 1;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-song-of-the-sirens&#34;&gt;A. Song of the Sirens&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5658/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5658/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;笑话：是 &lt;span class=&#34;math inline&#34;&gt;\(s_it_is_i\)&lt;/span&gt; 而不是 &lt;span class=&#34;math inline&#34;&gt;\(s_its_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们发现 &lt;span class=&#34;math inline&#34;&gt;\(s_0\)&lt;/span&gt; 很短，所以直接枚举起始位置把 &lt;span class=&#34;math inline&#34;&gt;\(s_0\)&lt;/span&gt; 和匹配串大力匹配，把空位挖出来组成新的匹配串再考虑 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的问题（因为所有 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 最开头都有一个完整的 &lt;span class=&#34;math inline&#34;&gt;\(s_0\)&lt;/span&gt;，所以可以随便选断点）。&lt;/p&gt;
&lt;p&gt;我们知道 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的下标是一个自底向上从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的满二叉树的中序遍历，其中 &lt;mark&gt;&lt;span class=&#34;math inline&#34;&gt;\(t_1\)&lt;/span&gt; 间隔一位出现；于是我们仿照对 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的处理方式，再把 &lt;span class=&#34;math inline&#34;&gt;\(t_1\)&lt;/span&gt; 挖掉。注意到此时 &lt;span class=&#34;math inline&#34;&gt;\(t_2\)&lt;/span&gt; 又成为二叉树最底层，间隔一位出现，这就变成了一个 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log n)\)&lt;/span&gt; 递归的问题&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;至于答案，当 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 被删空时，假设删掉的最后一个元素为 &lt;span class=&#34;math inline&#34;&gt;\(t_p\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的出现次数即为二叉树中 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 层点数，为 &lt;span class=&#34;math inline&#34;&gt;\(2^{k-p}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;有一个细节，就是如果当前删到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 了，&lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的长度只剩 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，就会有一个很尴尬的问题——这个元素不一定就是 &lt;span class=&#34;math inline&#34;&gt;\(t_i\)&lt;/span&gt;，而应该是 &lt;span class=&#34;math inline&#34;&gt;\(\{j \mid j\ge i\land t_j=t_i\}\)&lt;/span&gt;。统计 &lt;span class=&#34;math inline&#34;&gt;\(t_{i\sim k}\)&lt;/span&gt; 中值为 &lt;span class=&#34;math inline&#34;&gt;\(t_i\)&lt;/span&gt; 的元素个数（前缀和），乘上对应的层数即可。这个可以用一点小技巧搞定，前缀和时忽略 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 乘上 &lt;span class=&#34;math inline&#34;&gt;\(k=n\)&lt;/span&gt; 时的系数，统计答案时乘上 &lt;span class=&#34;math inline&#34;&gt;\(2^{n-k}\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;不是，那我缺的哈希这块谁来补啊？？？&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;sirens1.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, q, m;
    std::string s;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q &amp;gt;&amp;gt; s;
    s = &amp;#39;\0&amp;#39; + s, m = (int)s.length() - 1;
    std::vector&amp;lt;char&amp;gt; t(n + 1);
    std::vector&amp;lt;long long&amp;gt; base(n + 1), inv(n + 1);
    std::vector&amp;lt;std::array&amp;lt;long long, 26&amp;gt; &amp;gt; a(n + 1);
    auto qkp = [](long long x, int y) &amp;#123;
        long long res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    base[0] = 1ll, inv[0] = 1ll, inv[1] = qkp(2, mod - 2);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; t[i];
        base[i] = base[i - 1] * 2 % mod;
        if (i != 1)
            inv[i] = inv[i - 1] * inv[1] % mod;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        a[i] = a[i - 1], (a[i][t[i] - &amp;#39;a&amp;#39;] += base[n - i]) %= mod;
    for (int k; q--; ) &amp;#123;
        std::string p;
        std::cin &amp;gt;&amp;gt; k &amp;gt;&amp;gt; p;
        p = &amp;#39;\0&amp;#39; + p;
        long long res = 0;
        int l = (int)p.length() - 1;
        std::vector&amp;lt;char&amp;gt; u;
        std::function&amp;lt;void(int, std::vector&amp;lt;char&amp;gt; &amp;amp;)&amp;gt; calc = [&amp;amp;](int x, std::vector&amp;lt;char&amp;gt; &amp;amp;p) &amp;#123;
            int m = (int)p.size() - 1;
            if (m == 0) &amp;#123;
                // puts(&amp;quot;# 45&amp;quot;);
                // printf(&amp;quot;0, += %lld\n&amp;quot;, base[k - x + 1]);
                (res += base[k - x + 1]) %= mod;
                return;
            &amp;#125;
            if (x &amp;gt; k)
                return;
            if (m == 1) &amp;#123;
                // puts(&amp;quot;# 50&amp;quot;);
                // printf(&amp;quot;1, += %lld(%lld)\n&amp;quot;, (a[k][p[1] - &amp;#39;a&amp;#39;] + mod - a[x - 1][p[1] - &amp;#39;a&amp;#39;]) % mod * inv[n - k] % mod, inv[n - k] % mod);
                (res += (a[k][p[1] - &amp;#39;a&amp;#39;] + mod - a[x - 1][p[1] - &amp;#39;a&amp;#39;]) % mod * inv[n - k] % mod) %= mod;
                return;
            &amp;#125;
            bool flag0 = 1, flag1 = 1;
            std::vector&amp;lt;char&amp;gt; t0(1), t1(1);
            for (int i = 1; i &amp;lt;= m; ++i)
                if (!(i &amp;amp; 1)) &amp;#123;
                    if (flag0)
                        t0.push_back(p[i]);
                    flag1 &amp;amp;= (p[i] == t[x]);
                &amp;#125;
                else &amp;#123;
                    if (flag1)
                        t1.push_back(p[i]);
                    flag0 &amp;amp;= (p[i] == t[x]);
                &amp;#125;
            if (flag0)
                calc(x + 1, t0);
            if (flag1)
                calc(x + 1, t1);
            return;
        &amp;#125;;
        for (int i = 1; i &amp;lt;= m + 1; ++i) &amp;#123;
            std::vector&amp;lt;char&amp;gt;(1).swap(u);
            for (int j = i, now = 1; now &amp;lt;= l; ++now) &amp;#123;
                if (j == m + 1)
                    j = 1, u.push_back(p[now]);
                else if (p[now] != s[j])
                    goto nosol;
                else
                    ++j;
            &amp;#125;
            // printf(&amp;quot;u: &amp;quot;);
            // for (int i = 1; i &amp;lt; (int)u.size(); ++i)
            //     std::cout &amp;lt;&amp;lt; u[i];
            // puts(&amp;quot;&amp;quot;);
            calc(1, u);
        nosol: ;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-prefix-of-suffixes&#34;&gt;B. Prefix of Suffixes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5658/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5658/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还是太科幻了。哦哦 border 我的 border。&lt;/p&gt;
&lt;h3 id=&#34;法一&#34;&gt;法一&lt;/h3&gt;
&lt;p&gt;考虑每次增量，若加入 &lt;span class=&#34;math inline&#34;&gt;\(S_i\)&lt;/span&gt; 后有 &lt;span class=&#34;math inline&#34;&gt;\(z_j\)&lt;/span&gt; 的值增加 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，那么这对 &lt;span class=&#34;math inline&#34;&gt;\((i, j)\)&lt;/span&gt; 就会贡献 &lt;span class=&#34;math inline&#34;&gt;\(A_j\cdot B_i\)&lt;/span&gt; 的增量；&lt;mark&gt;反之，&lt;span class=&#34;math inline&#34;&gt;\(z_j\)&lt;/span&gt; 在以后也不会增加&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;我们维护当前没有确定下来的所有 &lt;span class=&#34;math inline&#34;&gt;\(z_j\)&lt;/span&gt;，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 暴力 check &lt;span class=&#34;math inline&#34;&gt;\(z_j\)&lt;/span&gt; 是否确定并更新答案，&lt;strong&gt;因为数据比较弱&lt;/strong&gt;，在 CF 神机上跑得飞快 &lt;img src=&#34;/em/dy.gif&#34; /&gt; 但是 QOJ 上死活过不了 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    long long res = 0, s = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; now;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(n + 1), t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; t[i] &amp;gt;&amp;gt; a[i] &amp;gt;&amp;gt; b[i];
        t[i] = (res + t[i]) % n;
        if (t[i] == t[1])
            s += b[i], now.push_back(i);
        std::vector&amp;lt;int&amp;gt; g(std::move(now));
        for (auto j : g)
            if (t[i] == t[i - j + 1])
                now.push_back(j);
            else
                s -= b[j];
        res += a[i] * s;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h3 id=&#34;法二&#34;&gt;法二&lt;/h3&gt;
&lt;p&gt;依然考虑增量。&lt;mark&gt;&lt;span class=&#34;math inline&#34;&gt;\(z_j\)&lt;/span&gt; 增加 &lt;span class=&#34;math inline&#34;&gt;\(\iff S_{j\to i}\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(S_{1\sim i}\)&lt;/span&gt; 的一个 border&lt;/mark&gt;。考虑对于每一个 &lt;span class=&#34;math inline&#34;&gt;\(S_i\)&lt;/span&gt;，border 的组成。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(S_1=S_i\)&lt;/span&gt;，那么将会新增一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的 border。&lt;/li&gt;
&lt;li&gt;对于在 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 处合法的 border &lt;span class=&#34;math inline&#34;&gt;\(S_{j\sim i-1}\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(S_i=S_{i-j+1}\)&lt;/span&gt;，则该 border 仍合法；否则非法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们的法一其实相当于是暴力 check 了所有合法 border 是否仍然合法，但这显然最坏是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 的。我们考虑从 border 角度优化一下。&lt;/p&gt;
&lt;p&gt;我们发现，比如说 &lt;span class=&#34;math inline&#34;&gt;\(\texttt{abababa + b}\)&lt;/span&gt;，我们会进行很多次不必要的 check，当然这个时候我们会本能大力跳 fail，但是这里有一个 &lt;a href=&#34;https://www.luogu.com/article/e08ebmz6&#34;&gt;border 的等差数列性质&lt;/a&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(x+1\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 能够匹配，那么与 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 同属一个等差数列的所有 &lt;span class=&#34;math inline&#34;&gt;\(x&amp;#39;+1\)&lt;/span&gt; 都应和 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 匹配。&lt;/p&gt;
&lt;p&gt;对于正在 check 的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，如果 check 成功则跳到上一条链的链尾；否则跳到链头。总的复杂度是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 的。找一下和每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 匹配不了的第一个链头，甚至可以因为某些我太菜了所以不知道的不明原因整到线性。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    long long res = 0, s = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(n + 1), t(n + 1), ne(n + 1), to(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; t[i] &amp;gt;&amp;gt; a[i] &amp;gt;&amp;gt; b[i];
        t[i] = (res + t[i]) % n;
        if (i == 1)
            s += b[i], res = (long long)a[i] * b[i];
        else &amp;#123;
            int j = ne[i - 1];
            for (; j &amp;amp;&amp;amp; t[j + 1] != t[i]; j = ne[j]);
            if (t[j + 1] == t[i])
                ++j;
            ne[i] = j;
            if (t[i] == t[1])
                s += b[i];
            to[i - 1] = (t[ne[i - 1] + 1] == t[i] ? to[ne[i - 1]] : ne[i - 1]);
            for (int j = i - 1; j; )
                if (t[j + 1] == t[i])
                    j = to[j];
                else
                    for (int at = to[j]; j != at; s -= b[i - j], j = ne[j]);
            res += a[i] * s;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c.-matching&#34;&gt;C. Matching&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5658/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5658/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们发现，如果我们直接要 check 一段 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，感觉不太好整。&lt;/p&gt;
&lt;p&gt;然后考虑这么一个问题，假如我们通过神秘方法让我们每次 check 的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="哈希" />
        <category term="线段树" />
        <category term="KMP" />
        <category term="border" />
        <updated>2024-10-21T00:32:59.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240106/</id>
        <title>杂题全谈</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240106/"/>
        <content type="html">&lt;p&gt;想不到好标题了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;有句话怎么说来着，罗马不是一天建成的，是一天天建成的。&lt;/p&gt;
&lt;p&gt;还有什么，Do in Rome as the Romans’ do，还有一句，All roads leads to Rome。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-连续的零-zero&#34;&gt;A. 连续的零 zero&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做个前缀和，看看任意一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的区间中有几个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 5e5 + 5;
const int inf = 0x3f3f3f3f;
int n, m, res = inf;
int a[maxn], s[maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        scanf(&amp;quot;%1d&amp;quot;, &amp;amp;a[i]);
        s[i] = s[i - 1] + a[i];
        if (i &amp;gt;= m)
            res = min(res, s[i] - s[i - m]);
    &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-反回文串-anti&#34;&gt;B. 反回文串 anti&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 为奇时，中间的元素一定和自己相等，故无解。&lt;/p&gt;
&lt;p&gt;当数量最多的一个字符个数超过 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 时，由鸽巢得无解。&lt;/p&gt;
&lt;p&gt;剩下的情况一定有解。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;证明&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;可以找到一种合法的构造方式。我们列出一个列数为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;，行数为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 的表格，将所有相同字母排列在一起，按照从左到右，从上到下的方式将字母填入表格，最后将第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行第一列的字母填入 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行第二列的字母填入 &lt;span class=&#34;math inline&#34;&gt;\(a_{n-i+1}\)&lt;/span&gt;，即可完成构造。&lt;/p&gt;
&lt;p&gt;一种字母只在第一列或第二列出现当然合法，如果从第一列持续到第二列，因为任意字母出现次数不超过 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 次，所以同一行的两列不会出现同一种字母。&lt;/p&gt;
&lt;p&gt;这叫什么，有字证明。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;感觉可以拿去出一道类似于「找到字符串字典序最小的反回文串」之类的小水题&lt;/del&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;然后现在我们知道有解了，怎么找到最优解呢。&lt;/p&gt;
&lt;p&gt;比如有一组 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_{n-i+1})=(\texttt a, \texttt a)\)&lt;/span&gt;，还有一组 &lt;span class=&#34;math inline&#34;&gt;\((a_j, a_{n-j+1})=(\texttt b, \texttt b)\)&lt;/span&gt;，那我们直接把 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 交换，皆大欢喜。&lt;/p&gt;
&lt;p&gt;这就说明我们需要把值不相等的非法 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 配对。&lt;/p&gt;
&lt;p&gt;然后我们就可以沿用证明中的构造方式，分组配对，一定最优，每组代价为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;同一行两个值 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 相等，因为已经最优了，所以不能再在非法串中寻找答案。应该找合法对中某个值交换，每组代价为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;。具体和谁交换我们不用担心，只要找到一组 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_{n-i+1})\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\(a_i\ne v\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(a_{n-i+1}\ne v\)&lt;/span&gt; 就可以了，然后我们又知道 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的个数 &lt;span class=&#34;math inline&#34;&gt;\(\ne \dfrac n2\)&lt;/span&gt;，假设 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 对中每队都有至少一个 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;，由于当前这一对有两个相同的 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的个数就会大于 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt;，矛盾了，所以一定能找到。&lt;/p&gt;
&lt;p&gt;对于非法总对数是奇数的情况，我们要钦定一个非法对强制让其和合法对交换，贪心一下取非法对数量最多的 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的某一对最优。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxm = 35;
const int maxn = 2e5 + 5;
char s[maxn];
int cnt[maxm], p[maxn];
int T, n, tot, res, now;
int main() &amp;#123;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;T);
    while (T--) &amp;#123;
        tot = 0;
        scanf(&amp;quot;%d %s&amp;quot;, &amp;amp;n, s + 1);
        if (n &amp;amp; 1) &amp;#123;
            puts(&amp;quot;-1&amp;quot;);
            continue;
        &amp;#125;
        memset(cnt, 0, sizeof (cnt));
        for (int i = 1; i &amp;lt;= n; ++i)
            ++cnt[s[i] - &amp;#39;a&amp;#39; + 1];
        for (int i = 1; i &amp;lt;= 26; ++i) &amp;#123;
            if (cnt[i] * 2 &amp;gt; n) &amp;#123;
                puts(&amp;quot;-1&amp;quot;);
                goto noSol;
            &amp;#125;
        &amp;#125;
        memset(cnt, 0, sizeof (cnt));
        for (int i = 1; i * 2 &amp;lt;= n; ++i) &amp;#123;
            if (s[i] == s[n - i + 1])
                ++cnt[s[i] - &amp;#39;a&amp;#39; + 1], ++tot;
        &amp;#125;
        std::sort(cnt + 1, cnt + 27,
                    std::greater&amp;lt;int&amp;gt;());
        res = now = 0;
        if (tot &amp;amp; 1) &amp;#123;
            res = 1, --cnt[1];
            std::sort(cnt + 1, cnt + 27,
                        std::greater&amp;lt;int&amp;gt;());
        &amp;#125;
        for (int i = 1; i &amp;lt;= 26; ++i) &amp;#123;
            while (cnt[i]--) &amp;#123;
                if (++now &amp;gt; tot / 2) &amp;#123;
                    if (i == p[now - tot / 2])
                        res += 2;
                    else ++res;
                &amp;#125;
                else p[now] = i;
            &amp;#125;
        &amp;#125;
        print(res, &amp;#39;\n&amp;#39;);
        noSol: ;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-除与减-divsub&#34;&gt;C. 除与减 divsub&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;小数学，还好。&lt;/p&gt;
&lt;p&gt;假设 &lt;span class=&#34;math inline&#34;&gt;\(n=d\times k^p\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(k\nmid d\)&lt;/span&gt;，那么我们分两种情况讨论。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(p=0\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(k\nmid n\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(n\bmod k=1\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(k\mid (n-1)\)&lt;/span&gt;。&lt;/p&gt;
这个时候问 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的个数就相当于是在问 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 除 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 以外的因子个数。假设 &lt;span class=&#34;math inline&#34;&gt;\(n-1={x_1}^{p_1}{x_2}^{p_2}\cdots {x_m}^{p_m}\)&lt;/span&gt;，那么答案为 &lt;span class=&#34;math inline&#34;&gt;\((\prod p_i+1)-1\)&lt;/span&gt;，减去的是 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(p\ne 0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(k\mid n\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这个时候好像并没有什么好的转化。好消息是 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的范围是 &lt;span class=&#34;math inline&#34;&gt;\(10^{12}\)&lt;/span&gt;，根号枚举因数复杂度跑得过。所以我们就可以暴力判定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的所有因数是否满足条件。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;时间复杂度，&lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt n\times \log n)\)&lt;/span&gt;，枚举因数是根号，算次数（也就是算 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;）是 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
int n, m, res, cnt;
int main() &amp;#123;
    read(n), m = n;
    for (int i = 2; i * i &amp;lt;= n; ++i) &amp;#123;
        if (n % i == 0) &amp;#123;
            m = n;
            while (m % i == 0) m /= i;
            if (m % i == 1) ++res;
            if (i * i != n) &amp;#123;
                m = n;
                while (m % (n / i) == 0)
                    m /= (n / i);
                if (m % (n / i) == 1) ++res;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    m = n - 1, cnt = 1;
    for (int i = 2; i * i &amp;lt;= m; ++i) &amp;#123;
        if (m % i == 0) &amp;#123;
            int now = 0;
            while (m % i == 0)
                ++now, m /= i;
            cnt *= now + 1;
        &amp;#125;
    &amp;#125;
    if (m != 1) cnt *= 2;
    print(res + cnt, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-图书管理员-librarian&#34;&gt;D. 图书管理员 librarian&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[SDOI2008] 郁闷的小 J。&lt;/p&gt;
&lt;p&gt;关于这个，我们发现自己不会考场现冲主席树。哎，打 CDQ 又怕写挂。&lt;/p&gt;
&lt;p&gt;我们发现这道题的修改都是单点的，询问也只关于某一种颜色，不同的颜色之间没有影响。&lt;/p&gt;
&lt;p&gt;于是我们可以把操作离线下来，初始视作将某颜色在某位置增加，修改视作将某颜色在某位置删除，将另一颜色在该位置增加，将所有操作按颜色离散化分类然后 &lt;code&gt;vector&lt;/code&gt; 下来，对于所有颜色从前到后树状数组做一遍操作就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n+q\log n)\)&lt;/span&gt; 解决。&lt;/p&gt;
&lt;p&gt;树状数组清空是肯定不能 &lt;code&gt;memset&lt;/code&gt; 的，复杂度不对。那么怎么办呢？把所有操作撤回去就可以了。&lt;/p&gt;
&lt;p&gt;顺带一提我是洛谷上最优解。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e5 + 5;
struct __ &amp;#123;
    int ty, l, r, v;
    __() &amp;#123;&amp;#125;
    __(int t1, int l1, int r1, int v1 = 0) &amp;#123;
        if (t1 == 0)
            ty = 0, l = l1, v = r1;
        else ty = 1, l = l1, r = r1, v = v1;
    &amp;#125;
&amp;#125;;
char ty;
std::map&amp;lt;int, int&amp;gt; tab;
std::vector&amp;lt;__&amp;gt; q[maxn];
int n, m, tot, x, y, v, id;
int Bit[maxn], a[maxn], res[maxn];
int lowbit(int x) &amp;#123; return x &amp;amp; -x; &amp;#125;
void add(int x, int v) &amp;#123;
    for (; x &amp;lt;= n; x += lowbit(x))
        Bit[x] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0;
    for (; x; x -= lowbit(x)) res += Bit[x];
    return res;
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]);
        if (!tab.count(a[i]))
            tab[a[i]] = ++tot;
        a[i] = tab[a[i]];
        q[a[i]].emplace_back(0, i, 1);
    &amp;#125;
    while (m--) &amp;#123;
        scanf(&amp;quot;%1s&amp;quot;, &amp;amp;ty);
        if (ty == &amp;#39;C&amp;#39;) &amp;#123;
            read(x), read(y);
            if (!tab.count(y))
                tab[y] = ++tot;
            y = tab[y];
            q[a[x]].emplace_back(0, x, -1);
            q[a[x] = y].emplace_back(0, x, 1);
        &amp;#125;
        else &amp;#123;
            ++id;
            read(x), read(y), read(v);
            if (!tab.count(v)) continue;
            v = tab[v];
            q[v].emplace_back(1, x, y, id);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= tot; ++i) &amp;#123;
        for (auto &amp;amp;j : q[i]) &amp;#123;
            if (j.ty == 0) add(j.l, j.v);
            else &amp;#123;
                res[j.v] =
                    ask(j.r) - ask(j.l - 1);
            &amp;#125;
        &amp;#125;
        for (auto &amp;amp;j : q[i])
            if (j.ty == 0) add(j.l, -j.v);
    &amp;#125;
    for (int i = 1; i &amp;lt;= id; ++i)
        print(res[i], &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;E 会单独开一篇。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-树-tree&#34;&gt;F. 树 tree&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CF916E。&lt;/p&gt;
&lt;p&gt;大分讨给我整不会了，更给我整不会的是下来过后发现这只是个小分讨。&lt;/p&gt;
&lt;p&gt;更新子树和子树查询我们都会。换根 DP 我们也都写过，都知道换根并不会对子树结构产生大的影响。所以应当是能根据已知信息推测出子树在原树上对应的点集的。&lt;/p&gt;
&lt;p&gt;记 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为当前树根，&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为根时的 LCA，&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为根时的 LCA。&lt;/p&gt;
&lt;p&gt;那么对于 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y)\)&lt;/span&gt;，肯定是要讨论 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的位置关系的。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的子孙。此时 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y) = \text {LCA}(x,y)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的祖先。那么说明至少有一个点不是 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的子孙。此时 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)&amp;#39;\)&lt;/span&gt; 的值为 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为另一个点的 LCA。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整理可得 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y)\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt;、&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,r)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(y,r)\)&lt;/span&gt; 中的深度最大者。&lt;/p&gt;
&lt;p&gt;对于以 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为根时的子树 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=r\)&lt;/span&gt;，此时子树为整棵树。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,r)\ne x\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 不为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的子孙，此时子树就是以 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为根是的子树 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)=x\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的子孙，此时子树是整棵树除开 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 包含 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的儿子及其子孙。修改和查询的时候容斥一下就好。这个时候的子树倍增跳一下就能找到。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后就是常规线段树维护了。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxm = 35;
const int maxn = 1e5 + 5;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
struct _ &amp;#123; int l, r, u, d; &amp;#125;;
_ t[maxn &amp;lt;&amp;lt; 2];
int f[maxn][maxm];
std::vector&amp;lt;int&amp;gt; g[maxn];
int a[maxn], dfn[maxn], rfn[maxn];
int n, q, r, ty, x, y, v, si, now;
int top[maxn], dep[maxn], tab[maxn];
void swap(int &amp;amp;x, int &amp;amp;y) &amp;#123;
    x ^= y ^= x ^= y;
    return;
&amp;#125;
void DFS(int x) &amp;#123;
    dep[x] = dep[f[x][0]] + 1;
    dfn[x] = ++now, tab[now] = x;
    for (auto i : g[x]) &amp;#123;
        if (i == f[x][0]) continue;
        f[i][0] = x;
        for (int j = 1; j &amp;lt;= si; ++j)
            f[i][j] = f[f[i][j - 1]][j - 1];
        DFS(i);
    &amp;#125;
    rfn[x] = now;
    return;
&amp;#125;
void pushup(int p) &amp;#123;
    t[p].u = t[lt].u + t[rt].u;
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d += t[p].d;
        t[rt].d += t[p].d;
        t[lt].u += t[p].d *
                (t[lt].r - t[lt].l + 1);
        t[rt].u += t[p].d *
                (t[rt].r - t[rt].l + 1);
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u = a[tab[l]];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    t[p].u += v;
    if (t[p].l == t[p].r) return;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid) add(lt, x, v);
    else add(rt, x, v);
    return;
&amp;#125;
void add(int p, int l, int r, int v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d += v;
        t[p].u += (t[p].r - t[p].l + 1) * v;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid) add(lt, l, r, v);
    if (r &amp;gt; mid) add(rt, l, r, v);
    pushup(p);
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    pushdown(p);
    int res = 0,
        mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid) res = ask(lt, l, r);
    if (r &amp;gt; mid) res += ask(rt, l, r);
    return res;
&amp;#125;
int LCA(int x, int y) &amp;#123;
    if (dep[x] &amp;lt; dep[y]) swap(x, y);
    for (int i = si; ~i; --i) &amp;#123;
        if (dep[f[x][i]] &amp;gt;= dep[y])
            x = f[x][i];
    &amp;#125;
    if (x == y) return x;
    for (int i = si; ~i; --i) &amp;#123;
        if (f[x][i] != f[y][i])
            x = f[x][i], y = f[y][i];
    &amp;#125;
    return f[x][0];
&amp;#125;
void Add(int x, int v) &amp;#123;
    int rlca = LCA(r, x);
    if (x == r) add(1, 1, n, v);
    else if (rlca != x)
        add(1, dfn[x], rfn[x], v);
    else &amp;#123;
        add(1, 1, n, v);
        int p = r;
        for (int i = si; ~i; --i) &amp;#123;
            if (dep[f[p][i]] &amp;gt;= dep[x] + 1)
                p = f[p][i];
        &amp;#125;
        add(1, dfn[p], rfn[p], -v);
    &amp;#125;
    return;
&amp;#125;
void tAdd(int x, int y, int v) &amp;#123;
    int llca = LCA(r, x), rlca = LCA(r, y),
        ulca = LCA(x, y);
    if (dep[llca] &amp;gt;= dep[rlca] &amp;amp;&amp;amp;
        dep[llca] &amp;gt;= dep[ulca]) Add(llca, v);
    else if (dep[rlca] &amp;gt;= dep[llca] &amp;amp;&amp;amp;
        dep[rlca] &amp;gt;= dep[ulca]) Add(rlca, v);
    else Add(ulca, v);
    return;
&amp;#125;
int tAsk(int x) &amp;#123;
    int rlca = LCA(r, x);
    if (x == r) return t[1].u;
    if (rlca != x)
        return ask(1, dfn[x], rfn[x]);
    int p = r;
    for (int i = si; ~i; --i) &amp;#123;
        if (dep[f[p][i]] &amp;gt;= dep[x] + 1)
            p = f[p][i];
    &amp;#125;
    return t[1].u - ask(1, dfn[p], rfn[p]);
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(q), r = 1;
    si = log(n) / log(2.0);
    for (int i = 1; i &amp;lt;= n; ++i) read(a[i]);
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        add(x, y), add(y, x);
    &amp;#125;
    dep[0] = 1, DFS(1), dep[0] = 0;
    bld(1, 1, n);
    while (q--) &amp;#123;
        read(ty);
        if (ty == 1) read(r);
        else if (ty == 2) &amp;#123;
            read(x), read(y), read(v);
            tAdd(x, y, v);
        &amp;#125;
        else &amp;#123;
            read(x);
            print(tAsk(x), &amp;#39;\n&amp;#39;);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <category term="树状数组" />
        <category term="LCA" />
        <category term="倍增" />
        <category term="鸽巢原理" />
        <updated>2024-01-06T03:27:39.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20231003/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20231003/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268&#34;&gt;周考 14&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;医生问我对药有什么要求吗，我说我宁死不喝冲剂。&lt;/p&gt;
&lt;p&gt;然后医生给我开了五盒胶囊，告诉我说一天三次，一次六个。&lt;/p&gt;
&lt;p&gt;哈哈哈，我自找的。以此为证，A 一道题磕一片！！！&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-修改序列&#34;&gt;A. 修改序列&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意到一增一减，全数列的和 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 不变，考虑这一点带来的提示。&lt;/p&gt;
&lt;p&gt;假设最后要求一部分数为 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，另一部分为 &lt;span class=&#34;math inline&#34;&gt;\(p+1\)&lt;/span&gt;，那么有 &lt;span class=&#34;math inline&#34;&gt;\(p = \lfloor \dfrac sn \rfloor\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(p+1\)&lt;/span&gt; 的数量 &lt;span class=&#34;math inline&#34;&gt;\(c_r=s\bmod n\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的数量 &lt;span class=&#34;math inline&#34;&gt;\(c_l=n-c_r\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么我们让 &lt;span class=&#34;math inline&#34;&gt;\(\le p\)&lt;/span&gt; 的变成 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\ge p + 1\)&lt;/span&gt; 的变成 &lt;span class=&#34;math inline&#34;&gt;\(p + 1\)&lt;/span&gt;。直接求两数距离，最后将总和除以二即为答案、&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;正确性证明…&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;这样做的最优性毫无疑问，问题无非就在于这么做的正确性，换言之，为什么一定能找到合法的操作序列还原我们的求解过程。&lt;/p&gt;
&lt;p&gt;将原数列分为两部分，数值 &lt;span class=&#34;math inline&#34;&gt;\(\le p\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;）和数值 &lt;span class=&#34;math inline&#34;&gt;\(\ge p + 1\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;）。&lt;/p&gt;
&lt;p&gt;再把我们的目标状态分为两部分，数值 &lt;span class=&#34;math inline&#34;&gt;\(= p\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;）和 数值 &lt;span class=&#34;math inline&#34;&gt;\(=p + 1\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;）。&lt;/p&gt;
&lt;p&gt;那么有 &lt;span class=&#34;math inline&#34;&gt;\(\begin{cases}X+Y=s\\A+B=s\end{cases}\)&lt;/span&gt;，由等式的基本性质得 &lt;span class=&#34;math inline&#34;&gt;\(X-A+Y-B = 0\)&lt;/span&gt;，移项得 &lt;span class=&#34;math inline&#34;&gt;\(Y-B=A-X\)&lt;/span&gt;。也就是说，&lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; 部分与 &lt;span class=&#34;math inline&#34;&gt;\(p+1\)&lt;/span&gt; 的差的总和正好等于 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 部分与 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的差的总和。&lt;/p&gt;
&lt;p&gt;这个时候我们的正确性就有了保证。&lt;/p&gt;
&lt;p&gt;这个时候你可能就有疑问了，&lt;span class=&#34;math inline&#34;&gt;\(X,Y\)&lt;/span&gt; 中的元素个数和 &lt;span class=&#34;math inline&#34;&gt;\(A,B\)&lt;/span&gt; 中的元素个数并不对应，怎么办呢？&lt;/p&gt;
&lt;p&gt;我们发现上面的原理式并不会随元素个数的变化而变化，所以依然可以用它来解答这个问题。没有人规定 &lt;span class=&#34;math inline&#34;&gt;\(Y-B\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(A-X\)&lt;/span&gt; 不能为负，为负时我们把 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 中塞不下的 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 拿到 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 里面去即可，反之同理。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;那么代码还是很好写的。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e5 + 5;
int a[maxn];
int n, s, p, cl, cg, res;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]), s += a[i];
    p = s / n, cg = s - p * n, cl = n - cg;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (a[i] &amp;lt;= p) &amp;#123;
            if (cl) res += p - a[i], --cl;
            else res += p - a[i] + 1, --cg;
        &amp;#125;
        else &amp;#123;
            if (cg) res += a[i] - p - 1, --cg;
            else res += a[i] - p, --cl;
        &amp;#125;
    &amp;#125;
    print(res / 2, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-knuth-表示法&#34;&gt;B. Knuth 表示法&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模拟。输入的数用 &lt;code&gt;map&lt;/code&gt; 转化为 &lt;span class=&#34;math inline&#34;&gt;\(10\)&lt;/span&gt; 的次幂形式，然后幂次直接相加即表示指数相乘。&lt;/p&gt;
&lt;p&gt;最后按位数从大到小将次幂形式转化为字符串、再按位数从小到大输出。&lt;/p&gt;
&lt;p&gt;注意到开头的字符串不是 &lt;code&gt;one&lt;/code&gt; 就是 &lt;code&gt;ten&lt;/code&gt;，需要在没有抽出来 &lt;code&gt;ten&lt;/code&gt; 的时候补 &lt;code&gt;one&lt;/code&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
using str = std::string;
const str u[] = &amp;#123; &amp;quot;one&amp;quot;, &amp;quot;ten&amp;quot;, &amp;quot;hundred&amp;quot;, &amp;quot;myriad&amp;quot;, &amp;quot;myllion&amp;quot;, &amp;quot;byllion&amp;quot;, &amp;quot;tryllion&amp;quot;,
                  &amp;quot;quadryllion&amp;quot;, &amp;quot;quintyllion&amp;quot;, &amp;quot;sextyllion&amp;quot;, &amp;quot;septyllion&amp;quot;, &amp;quot;octyllion&amp;quot;,
                  &amp;quot;nonyllion&amp;quot;, &amp;quot;decyllion&amp;quot; &amp;#125;;
str x;
int res = 0;
std::stack&amp;lt;str&amp;gt; s;
std::map&amp;lt;str, int&amp;gt; t;
void get(str &amp;amp;x) &amp;#123;
    str y;
    std::stringstream p(x);
    while (p &amp;gt;&amp;gt; y) &amp;#123;
        if (y == &amp;quot;one&amp;quot;) continue;
        res += 1 &amp;lt;&amp;lt; (t[y] - 1);
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    for (int i = 0; i &amp;lt;= 13; ++i) t[u[i]] = i;
    std::getline(std::cin, x), get(x);
    std::getline(std::cin, x), get(x);
    for (int i = 13; i; --i) &amp;#123;
        if (res &amp;amp; (1 &amp;lt;&amp;lt; (i - 1)))
            s.push(u[i]), res ^= (1 &amp;lt;&amp;lt; (i - 1));
    &amp;#125;
    if (s.top() != &amp;quot;ten&amp;quot;) s.push(&amp;quot;one&amp;quot;);
    while (!s.empty())
        std::cout &amp;lt;&amp;lt; s.top() &amp;lt;&amp;lt; &amp;#39; &amp;#39;, s.pop();
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-魔力塔&#34;&gt;C. 魔力塔&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;神奇的线段树优化建图。这拿来放 T3？不合适吧。&lt;/p&gt;
&lt;p&gt;很好想到对于 &lt;span class=&#34;math inline&#34;&gt;\(a_i\ne -1\)&lt;/span&gt;，连边 &lt;span class=&#34;math inline&#34;&gt;\(i\to a_i\)&lt;/span&gt;；否则，连边 &lt;span class=&#34;math inline&#34;&gt;\(i\to x(x\in [i+1,\min(i + k,n+1)])\)&lt;/span&gt;。BFS 遍历，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\times k)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;问题在于无用边太多，例如 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 共同可达的点有整整 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 个，造成大量浪费。&lt;/p&gt;
&lt;p&gt;考虑到实际进入 BFS 的点只有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个，及由传送门构成的连通块均呈棒棒糖状（即链套环），我们直接优化掉 &lt;span class=&#34;math inline&#34;&gt;\(a_i=-1\)&lt;/span&gt; 时的连边。使用线段树查询 &lt;span class=&#34;math inline&#34;&gt;\([i+1,\min(i + k,n+1)]\)&lt;/span&gt; 内的所有剩余点，连边入队并从线段树中删除。&lt;/p&gt;
&lt;p&gt;这样，每个点只会入队一次（忽视无用环），时间复杂度控制在 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 来源于线段树，写得不好就是 &lt;span class=&#34;math inline&#34;&gt;\(\log^2\)&lt;/span&gt;，写得好一点就只有一个。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;然而…&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;会 T，因为常数太大了。&lt;/p&gt;
&lt;p&gt;所以我们需要另一种 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 的做法，并且短小精悍。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;set&lt;/code&gt; 存储所有未入队的点，每次 &lt;code&gt;lower_bound&lt;/code&gt; 并依次弹出、入队。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;用迭代器的话代码很短，美汁汁。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;，但等我先磕片药先。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 5e5 + 5;
int a[maxn];
int n, k, res;
bool vis[maxn];
std::set&amp;lt;int&amp;gt; t;
std::vector&amp;lt;int&amp;gt; g[maxn]; 
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
void DFS(int x) &amp;#123;
    res = max(res, x);
    if (a[x] == -1) &amp;#123;
        auto p = t.lower_bound(x + 1);
        while (p != t.end() &amp;amp;&amp;amp; *p &amp;lt;= x + k) &amp;#123;
            g[x].push_back(*p);
            t.erase(*p++);
        &amp;#125;
    &amp;#125;
    for (auto i : g[x]) &amp;#123;
        if (vis[i]) continue;
        vis[i] = 1, DFS(i);
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(k);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]), t.insert(i + 1);
        if (~a[i]) g[i].push_back(a[i]);
    &amp;#125;
    DFS(1), print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-卡牌游戏&#34;&gt;D. 卡牌游戏&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;怎么说呢，爆搜可以拿 80pts！！！然而正解是区间 DP，哭唧唧。他这个数据范围给得很神奇，让人只会往搜索上面想。&lt;/p&gt;
&lt;p&gt;摧毁操作是一换一，不会更改串长，而入栈操作会增加初始串的长度。&lt;/p&gt;
&lt;p&gt;所以我们考虑 &lt;strong&gt;逆序 DP&lt;/strong&gt;，从最终状态入手，用 &lt;span class=&#34;math inline&#34;&gt;\(f_{x, i, j}\)&lt;/span&gt; 表示是否可以使用一个字符 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 经过一系列操作消掉 &lt;span class=&#34;math inline&#34;&gt;\(w_{i\sim j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么明显若一条摧毁操作为可用字符 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 摧毁 &lt;span class=&#34;math inline&#34;&gt;\(w_i\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{a, i, i} = 1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;若一条入栈操作为用字符 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 换字符 &lt;span class=&#34;math inline&#34;&gt;\(b,c\)&lt;/span&gt;，枚举区间断点 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{a, i, j} = f_{b, i, k} \times f_{c, k + 1, j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;最后答案为 &lt;span class=&#34;math inline&#34;&gt;\(f_{\texttt S,i,|w_i|}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;注意循环顺序，区间的枚举应在字符的枚举之外。最终时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(T\times |w_i|^3\times N_2)\)&lt;/span&gt;，注意到字母的枚举属于常数。胶囊好吃滴捏。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 25;
const int maxm = 1e3 + 5;
int n, m, l;
char w[maxn];
bool r1[maxm][maxm];
bool f[maxm][maxn][maxn];
struct &amp;#123; int u, a, b; &amp;#125; r2[maxn];
int main() &amp;#123;
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        scanf(&amp;quot;%s&amp;quot;, w + 1);
        r1[(int)w[1]][(int)w[4]] = 1;
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        scanf(&amp;quot;%s&amp;quot;, w + 1);
        r2[i].u = w[1];
        r2[i].a = w[4], r2[i].b = w[5];
    &amp;#125;
    while (~scanf(&amp;quot;%s&amp;quot;, w + 1)) &amp;#123;
        memset(f, 0, sizeof (f));
        l = strlen(w + 1);
        for (int i = &amp;#39;A&amp;#39;; i &amp;lt;= &amp;#39;Z&amp;#39;; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= l; ++j) &amp;#123;
                if (r1[i][(int)w[j]])
                    f[i][j][j] = 1;
            &amp;#125;
        &amp;#125;
        for (int len = 1; len &amp;lt;= l; ++len) &amp;#123;
            for (int i = 1; i &amp;lt;= l - len + 1; ++i) &amp;#123;
                int j = i + len - 1;
                for (int t = &amp;#39;A&amp;#39;; t &amp;lt;= &amp;#39;Z&amp;#39;; ++t) &amp;#123;
                    for (int k = i; k &amp;lt; j; ++k) &amp;#123;
                        for (int p = 1; p &amp;lt;= m; ++p) &amp;#123;
                            if (r2[p].u != t) continue;
                            f[t][i][j] |= f[r2[p].a][i][k] &amp;amp;&amp;amp; f[r2[p].b][k + 1][j];
                        &amp;#125;
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        puts(f[&amp;#39;S&amp;#39;][1][l] ? &amp;quot;YES&amp;quot; : &amp;quot;NO&amp;quot;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e.-生长树&#34;&gt;E. 生长树&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/5&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一道很菜的题。我们发现有子树操作，第一时间想到树剖，那么接下来要考虑的内容就是线段树如何维护。&lt;/p&gt;
&lt;p&gt;题意换句话说就是往下数 0 代是加，数 1 代是减，数 2 代是加，以此类推。那么不难想到奇偶性。&lt;/p&gt;
&lt;p&gt;如果起点的深度是奇数，那么子树中所有奇数深度权值增加，偶数深度权值减少，反之同理。&lt;/p&gt;
&lt;p&gt;但是我们操作线段树的时候怎么知道点在树中的深度奇偶性呢？我们只能在线段树外才知道呀。&lt;/p&gt;
&lt;p&gt;所以观察询问，询问是单点的，所以我们知道了，可以只在线段树外对奇偶性进行处理。简单来说，假设更改起点深度为奇数，那么增加整个子树的「奇加偶减计数器」；反之，增加整个子树的「奇减偶加计数器」。&lt;/p&gt;
&lt;p&gt;最后查询的时候，如果该点深度为奇，那么答案为对应的「奇加偶减计数器」减去「奇减偶加计数器」的值，反之同理。&lt;/p&gt;
&lt;p&gt;做到最后发现根本不用树剖，就是一个 DFN 上线段树。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(m\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;胶囊真好吃！！！&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
const int maxn = 2e5 + 5;
struct _ &amp;#123;
    int l, r;
    int u1, u2, d1, d2;
&amp;#125;; 
_ t[maxn &amp;lt;&amp;lt; 2];
int a[maxn], dep[maxn];
std::vector&amp;lt;int&amp;gt; g[maxn];
int n, m, x, y, tot, typ;
int end[maxn], dfn[maxn], tab[maxn];
// u 只用维护最底层信息
// 所以不用打 pushup 
// 但维护起来好看一些 所以还是打了
void pushup(int p) &amp;#123;
    t[p].u1 = t[lt].u1 + t[rt].u1;
    t[p].u2 = t[lt].u2 + t[rt].u2;
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d1) &amp;#123;
        t[lt].d1 += t[p].d1;
        t[rt].d1 += t[p].d1;
        t[lt].u1 += t[p].d1 * (t[lt].r - t[lt].l + 1);
        t[rt].u1 += t[p].d1 * (t[rt].r - t[rt].l + 1);
        t[p].d1 = 0;
    &amp;#125;
    if (t[p].d2) &amp;#123;
        t[lt].d2 += t[p].d2;
        t[rt].d2 += t[p].d2;
        t[lt].u2 += t[p].d2 * (t[lt].r - t[lt].l + 1);
        t[rt].u2 += t[p].d2 * (t[rt].r - t[rt].l + 1);
        t[p].d2 = 0;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        if (dep[tab[l]] &amp;amp; 1)
            t[p].u1 = a[tab[l]];
        else t[p].u2 = a[tab[l]];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void add1(int p, int l, int r, int x) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d1 += x;
        t[p].u1 += (t[p].r - t[p].l + 1) * x;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (l &amp;lt;= mid) add1(lt, l, r, x);
    if (r &amp;gt; mid) add1(rt, l, r, x);
    pushup(p);
    return;
&amp;#125;
void add2(int p, int l, int r, int x) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d2 += x;
        t[p].u2 += (t[p].r - t[p].l + 1) * x;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (l &amp;lt;= mid) add2(lt, l, r, x);
    if (r &amp;gt; mid) add2(rt, l, r, x);
    pushup(p);
    return;
&amp;#125;
int ask(int p, int x) &amp;#123;
    if (t[p].l == t[p].r)
        return t[p].u1 - t[p].u2;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (x &amp;lt;= mid) return ask(lt, x);
    return ask(rt, x);
&amp;#125;
void DFS(int x, int fa) &amp;#123;
    dfn[x] = ++tot, tab[tot] = x;
    for (auto i : g[x]) &amp;#123;
        if (i == fa) continue;
        dep[i] = dep[x] + 1;
        DFS(i, x);
    &amp;#125;
    end[x] = tot;
    return;
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        add(x, y), add(y, x);
    &amp;#125;
    dep[1] = 1, DFS(1, -1);
    bld(1, 1, n);
    while (m--) &amp;#123;
        read(typ), read(x);
        if (typ == 1) &amp;#123;
            read(y);
            if (dep[x] &amp;amp; 1)
                add1(1, dfn[x], end[x], y);
            else add2(1, dfn[x], end[x], y);
        &amp;#125;
        else &amp;#123;
            int res = ask(1, dfn[x]);
            if (dep[x] &amp;amp; 1)
                print(res, &amp;#39;\n&amp;#39;);
            else print(-res, &amp;#39;\n&amp;#39;);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-单词&#34;&gt;F. 单词&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n \le 20\)&lt;/span&gt;，考虑状压。用 &lt;span class=&#34;math inline&#34;&gt;\(f_x\)&lt;/span&gt; 表示状态为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 时的最小代价，其中 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 是字符串合法情况的状态压缩。&lt;/p&gt;
&lt;p&gt;对于每一个待满足的串，枚举去满足它的哪一位，那么满足方式分两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把它变成一个新的值&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把和它重合的变成新的值&lt;/p&gt;
&lt;p&gt;我们注意到 &lt;span class=&#34;math inline&#34;&gt;\(n \le 20 \le 26\)&lt;/span&gt;，所以一定能找到一种方法让每个串的这一位都不一样。&lt;/p&gt;
&lt;p&gt;接着，反正我们都要改这一位了，那就贪心地把要改的全部改成完全不一样的。那么这些要改的串也在这一位上满足了条件。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，假设对于状态 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，有串 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 未满足，枚举位置 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，有：&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;f[i | (1 &amp;lt;&amp;lt; (j - 1))] = min(f[i | (1 &amp;lt;&amp;lt; (j - 1))], f[i] + a[j][k]); 
f[i | lac[j][k]] = min(f[i | lac[j][k]], f[i] + mx[j][k]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 &lt;code&gt;lac[j][k]&lt;/code&gt; 和 &lt;code&gt;mx[j][k]&lt;/code&gt; 都是预处理出来的值。&lt;code&gt;lac[j][k]&lt;/code&gt; 表示与第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个串的第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位相同串的状态压缩；&lt;code&gt;mx[j][k]&lt;/code&gt; 表示通过第二种方式将 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 串的第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位变得合法的最小费用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lac[j][k]&lt;/code&gt; 的求法没有任何疑问，主要是在 &lt;code&gt;mx[j][k]&lt;/code&gt; 上。注意到假设这一位上有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个串与 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 串的第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位相同（包括其本身），而我们只需要将这当中的 &lt;span class=&#34;math inline&#34;&gt;\(x-1\)&lt;/span&gt; 个变成两两不同的全新字符就可以同时满足这 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 串的条件，那我们为什么不把不动的这一个串设置为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个串中改这一位代价最大的那个呢？&lt;/p&gt;
&lt;p&gt;那么问题来了。我们枚举状态、枚举状态中的每一个 &lt;code&gt;0&lt;/code&gt;，枚举每一个串的每一位，实际上是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\times m\times 2^n)\)&lt;/span&gt; 的。虽然跑不满，但这个时间复杂度仍然是有问题的。我们需要优化。&lt;/p&gt;
&lt;p&gt;我们枚举的是状态中的每一个 &lt;code&gt;0&lt;/code&gt;，假设我们的状态是 &lt;code&gt;000&lt;/code&gt;，我们的解决方案是将三个 &lt;code&gt;0&lt;/code&gt; 位置的方案共同处理，表示为 &lt;code&gt;&#39;0--&#39;&lt;/code&gt; + &lt;code&gt;&#39;-0-&#39;&lt;/code&gt; + &lt;code&gt;&#39;--0&#39;&lt;/code&gt;。但实际上，我们只用实际求解一个 &lt;code&gt;0&lt;/code&gt; 位置的答案，表示为 &lt;code&gt;&#39;0--&#39;&lt;/code&gt; + &lt;code&gt;&#39;-00&#39;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;也就是说，我们原本需要枚举每一个状态为 &lt;code&gt;0&lt;/code&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 并用 &lt;span class=&#34;math inline&#34;&gt;\(O(m)\)&lt;/span&gt; 的时间进行计算，现在我们碰到一个状态为 &lt;code&gt;0&lt;/code&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 就开始计算，得到完全相同的答案。&lt;/p&gt;
&lt;p&gt;很 NB 并且很实用的优化，已加入 &lt;a href=&#34;/20231117/&#34;&gt;下饭操作合集&lt;/a&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 205;
const int maxm = (1 &amp;lt;&amp;lt; 25) + 5;
int f[maxm];
int n, m, siz;
char s[maxn][maxn];
int lac[maxn][maxn];
int a[maxn][maxn], mx[maxn][maxn];
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int main() &amp;#123;
    while(~scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m)) &amp;#123;
        memset(f, 0x3f, sizeof (f));
        f[0] = 0, siz = 1 &amp;lt;&amp;lt; n;
        for (int i = 1; i &amp;lt;= n; ++i)
            scanf(&amp;quot;%s&amp;quot;, s[i] + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j)
                scanf(&amp;quot;%d&amp;quot;, &amp;amp;a[i][j]);
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                int sum = 0;
                lac[i][j] = mx[i][j] = 0;
                for (int k = 1; k &amp;lt;= n; ++k) &amp;#123;
                    if (s[k][j] == s[i][j]) &amp;#123;
                        lac[i][j] |= 1 &amp;lt;&amp;lt; (k - 1);
                        sum += a[k][j];
                        mx[i][j] = max(mx[i][j], a[k][j]);
                    &amp;#125;
                &amp;#125;
                mx[i][j] = sum - mx[i][j];
            &amp;#125;
        &amp;#125;
        for (int i = 0, j; i &amp;lt; siz - 1; ++i) &amp;#123;
            for (j = 1; j &amp;lt;= n; ++j) &amp;#123;
                if (!(i &amp;amp; (1 &amp;lt;&amp;lt; (j - 1))))
                    break;
            &amp;#125;
            for (int k = 1; k &amp;lt;= m; ++k) &amp;#123;
                f[i | (1 &amp;lt;&amp;lt; (j - 1))] =
                    min(f[i | (1 &amp;lt;&amp;lt; (j - 1))], f[i] + a[j][k]); 
                f[i | lac[j][k]] =
                    min(f[i | lac[j][k]], f[i] + mx[j][k]);
            &amp;#125;
        &amp;#125;
        print(f[siz - 1], &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;这次暴露出的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深度乱求，打代码的时候考虑过要放在递归之前，但是由于精力不集中最后还是放在了递归后面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;没了。这次主要问题出在 T5。T3 估计真的想不到，先不强求自己。&lt;/p&gt;
&lt;p&gt;这次学到的新知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于子集合并最优性的问题，可以用单点 + 集合代替集合 + 集合枚举。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="DP" />
        <category term="线段树" />
        <updated>2023-10-03T08:42:43.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230928/</id>
        <title>颜色</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230928/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;https://vjudge.net/contest/583230#problem/B&#34;&gt;颜色&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b---颜色&#34;&gt;B - 颜色&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/583230#problem/B&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/583230#problem/B&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;颜色删完过后剩下的肯定是一段区间。&lt;/p&gt;
&lt;p&gt;那么区间外的所有颜色都会被删掉，如果要满足题目条件的话，删掉的颜色不能出现在区间内。&lt;/p&gt;
&lt;p&gt;那么就可以有这么一个题意的转化：寻找区间的个数，满足区间内的颜色只出现在区间内。&lt;/p&gt;
&lt;p&gt;然后你可能就要问了，不是还要满足区间外的所有颜色都不出现在区间内吗。但是你想想，要是它出现在区间内了，它作为区间内的颜色，不就不满足我们上面说的那条规则了吗。&lt;/p&gt;
&lt;p&gt;这个转化是非常厉害的。那么这个时候有一个显而易见暴力做法，我们记录一个颜色在整个序列中出现的第一个位置（记为 &lt;span class=&#34;math inline&#34;&gt;\(L_x\)&lt;/span&gt;）和最后一个位置（记作 &lt;span class=&#34;math inline&#34;&gt;\(R_x\)&lt;/span&gt;），然后枚举每一个区间 &lt;span class=&#34;math inline&#34;&gt;\([i, j]\)&lt;/span&gt;，再枚举其中的每一个颜色，看看有没有超出去就好，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;对纯暴力的一点小优化&lt;/summary&gt; 上述区间内枚举过程转化为判定区间是否满足 &lt;span class=&#34;math inline&#34;&gt;\({L_x}_{\min} \ge i\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\({R_x}_{\max} \le j\)&lt;/span&gt;，采用数据结构维护，就可以优化到 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2\log)\)&lt;/span&gt;。为什么要专门提一嘴这个呢，因为这个模型我没想到。我真 NB。
&lt;/details&gt;
&lt;p&gt;接下来又是一个我想不到的模型。我们发现复杂度瓶颈出在枚举区间上，所以考虑通过固定区间右端点，用较小的复杂度直接求解满足条件的左端点数量来解决问题。为什么不是固定左端点呢？&lt;/p&gt;
&lt;p&gt;「因为题解都是写的固定右端点。」 0# 如是说。&lt;/p&gt;
&lt;p&gt;对于正在枚举的右端点 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 右边的颜色 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，我们记录它们上一次出现的位置 &lt;span class=&#34;math inline&#34;&gt;\(p_x\)&lt;/span&gt;，并用线段树找到范围内最右值 &lt;span class=&#34;math inline&#34;&gt;\((p_x)_{\max}\)&lt;/span&gt;，那么左端点 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;gt;(p_x)_{\max}\)&lt;/span&gt;。取 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;=(p_x)_{\max}+1\)&lt;/span&gt;，这样我们就初步得到了一个 &lt;span class=&#34;math inline&#34;&gt;\([i&amp;#39;, j]\)&lt;/span&gt;。相对于纯暴力的做法，&lt;span class=&#34;math inline&#34;&gt;\(R_x\le j\)&lt;/span&gt; 的等价条件已经满足，但还有一个条件，就是 &lt;span class=&#34;math inline&#34;&gt;\(L_x\)&lt;/span&gt; 不能小于 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;为了方便数据结构维护 &lt;span class=&#34;math inline&#34;&gt;\(p_x\)&lt;/span&gt;，我们逆序枚举 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，这样又可以得到一个性质：&lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;\)&lt;/span&gt; 单调不降。这个时候我们逆向思维，处理出对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\ge i&amp;#39;\)&lt;/span&gt;，其能够到的最远的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，记为 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt;，那么我们对于 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 建一个权值线段树，然后在枚举过程中查询权值在 &lt;span class=&#34;math inline&#34;&gt;\([j, +\infty)\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的个数就是答案。由于求的是个数，所以可以对超出范围的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 对应的 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 进行删除操作。&lt;/p&gt;
&lt;p&gt;那么 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 又该怎么求呢？暴力地再建一个权值线段树维护 &lt;span class=&#34;math inline&#34;&gt;\(L_x\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\((-\infty, i)\)&lt;/span&gt; 权值范围内查询下标 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的最小值，此时的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 就是 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;因为 0# 讲课的时候我在开飞机，所以我也不知道 0# 是不是这么讲的，总之我这么做应该能做出来，就是要维护的东西实在有亿点点多。&lt;/p&gt;
&lt;p&gt;但是注意到一个线段树和两个权值线段树维护的大区间其实是一样的，所以我们只用一个线段树同时维护三个信息就好。最后时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
#define mid (t[p].l + t[p].r) / 2
const int maxn = 3e5 + 5;
// shaber monotonicity
// destroy my youth 
struct _ &amp;#123; int l, r, u, d; &amp;#125;;
struct __ &amp;#123;
    int u, i;
    __() &amp;#123;&amp;#125;
    __(int u1, int i1) &amp;#123;
        u = u1, i = i1;
    &amp;#125;
&amp;#125;;
int T, n, res;
_ t[maxn &amp;lt;&amp;lt; 2];
int a[maxn], L[maxn], R[maxn];
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
void pushup(int p) &amp;#123;
    t[p].u = t[lt].u + t[rt].u;
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d = t[rt].d = 1;
        t[lt].u = t[lt].r - t[lt].l + 1;
        t[rt].u = t[rt].r - t[rt].l + 1;
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].u = t[p].d = 0;
    t[p].l = l, t[p].r = r;
    if (l == r) return;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void add(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].u = t[p].r - t[p].l + 1;
        t[p].d = 1;
        return;
    &amp;#125;
    pushdown(p);
    if (l &amp;lt;= mid) add(lt, l, r);
    if (r &amp;gt; mid) add(rt, l, r);
    pushup(p);
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    int res = 0; pushdown(p);
    if (l &amp;lt;= mid) res = ask(lt, l, r);
    if (r &amp;gt; mid) res += ask(rt, l, r);
    return res;
&amp;#125;
int main() &amp;#123;
    read(T);
    while (T--) &amp;#123;
        read(n), res = 0;
        std::stack&amp;lt;__&amp;gt; p;
        std::fill(L + 1, L + n + 1, n + 5);
        std::fill(R + 1, R + n + 1, 0);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            read(a[i]), R[a[i]] = i;
            if (L[a[i]] == n + 5) L[a[i]] = i;
        &amp;#125;
        bld(1, 1, n);
        for (int i = 1, j; i &amp;lt;= n; ++i) &amp;#123;
            if (i == R[a[i]] &amp;amp;&amp;amp; i != L[a[i]])
                add(1, L[a[i]] + 1, R[a[i]]);
            else p.push(__(a[i], i));
            while (!p.empty() &amp;amp;&amp;amp; R[p.top().u] &amp;lt;= i) p.pop();
            j = p.size() ? p.top().i : 0;
            if (i != j) res += i - j - ask(1, j + 1, i);
        &amp;#125;
        print(res, &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <updated>2023-09-28T08:44:30.000Z</updated>
    </entry>
</feed>
