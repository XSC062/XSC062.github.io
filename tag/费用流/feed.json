{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"费用流\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20230720/",
            "url": "https://xsc062.netlify.app/20230720/",
            "title": "费用流练习",
            "date_published": "2023-07-20T09:57:23.000Z",
            "content_html": "<p><a href=\"http://222.180.160.110:61235/contest/3820\">费用流入门练习</a>。</p>\n<span id=\"more\"></span>\n<hr />\n<h3 id=\"a.-订货\">A. 订货</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3820/problem/1\" class=\"uri\">http://222.180.160.110:61235/contest/3820/problem/1</a></p>\n<p>这个带继承关系的模型很熟悉，想到了 <a href=\"https://www.cnblogs.com/XSC062/p/17548925.html\">猪</a> 那一题。所以我们试着仿照这个方式来建图。</p>\n<p>题目提到了单位费用，这简直就是直接把边的费用拍你脸上嘲讽。</p>\n<p>我们拉一个大源点，朝每个月连一条容量为无穷大、费用为当月购买单位费用的边，表示每个月的购买。</p>\n<p>拉一个大汇点，每个月朝它连一条容量为当月需求量、费用为 <span class=\"math inline\">\\(0\\)</span> 的边，表示每个月的需求。</p>\n<p>再让每个月朝下一个月连一条容量为仓库容量、费用为贮存费用的边，表示继承。跑一个最小费用最大流即可。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 405;\nconst int inf = 1e18;\nconst int maxm = 5e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nbool inq[maxn];\nint n, m, S, x, res;\nint gs, gt, tot = 1;\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w) &#123;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m), read(S);\n    gs = n + 1, gt = gs + 1;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        read(x);\n        addf(i, gt, x, 0);\n        if (i != n)\n            addf(i, i + 1, S, m);\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        read(x);\n        addf(gs, i, inf, x);\n    &#125;    \n    SSP(gs, gt);\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int  </code></pre>\n</details>\n<hr />\n<h3 id=\"b.-网络扩容\">B. 网络扩容</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3820/problem/2\" class=\"uri\">http://222.180.160.110:61235/contest/3820/problem/2</a></p>\n<p>鉴于一道费用流不会无缘无故先让你求一遍最大流，我们先持观望态度，暂且认为最大流对题目有提示作用 <del>而不是说这道题就是个缝合怪</del></p>\n<p>其实看完题我们就悟了，这怎么这么像上下界网络流那个差量网络呀，要不我们试试这么干？</p>\n<p>我们先求得普通网络中的最大流，然后每条边减去流量，就成为了一个「差量网络 Pro」。那么我们现在就要通过扩容让该网络中的最大流变为 <span class=\"math inline\">\\(K\\)</span>。对于扩容的操作，不难想到把每条边的边权设为正无穷，然后费用设为扩容费用。</p>\n<p>现在有了一个问题：原图中未留满的边，在现在的新网络中的残余容量应该如何处理呢？很简单，我们就把它当作已经扩过了这么多容，通过拆边操作拆出来一条容量为原图中残余容量、费用为 <span class=\"math inline\">\\(0\\)</span>「会员通道」，那么算法就会优先选择这条边。</p>\n<p>怎么去控制流量为 <span class=\"math inline\">\\(K\\)</span>？联想到之前的拆边操作，我们考虑拆点。在 <span class=\"math inline\">\\(1\\)</span> 和 <span class=\"math inline\">\\(N\\)</span> 中任选一个拆开作为新的源点 / 汇点，新点和旧点之间的容量为 <span class=\"math inline\">\\(K\\)</span>、费用为 <span class=\"math inline\">\\(0\\)</span> 即可。</p>\n<p>然后跑一个最小费用最大流就行。<del>该说不说题目的正解思路引导做得还挺好的</del></p>\n<p>其实注意到在跑完最大流之后，所有正向边的残余容量已经求得，只要在跑最大流时令所有边的费用为 <span class=\"math inline\">\\(0\\)</span>（毕竟最大流不关心费用），就可以沿用原图，只加新边再跑费用流。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 1e3 + 5;\nconst int maxm = 5e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\nstruct __ &#123; int x, y, c, w; &#125;;\n_ u[maxm];\n__ w[maxm];\nbool inq[maxn];\nint n, m, k, res;\nint gs, gt, tot = 1;\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint vis[maxn], now[maxn], dep[maxn];\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool BFS(int n) &#123;\n    std::fill(vis + 1, vis + n + 1, 0);\n    std::fill(dep + 1, dep + n + 1, 0); \n    std::queue&lt;int&gt; q;\n    dep[gs] = 1, vis[gs] = 1;\n    q.push(gs), now[gs] = h[gs];\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop();\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            int v = u[i].v, w = u[i].c;\n            if (vis[v] == 1 || w == 0)\n                continue;\n            vis[v] = 1, now[v] = h[v];\n            dep[v] = dep[f] + 1, q.push(v);\n            if (v == gt)\n                return 1;\n        &#125;\n    &#125;\n    return 0;\n&#125;\nint findP(int x, int flow = inf) &#123;\n    if (x == gt)\n        return flow;\n    int rest = flow, i;\n    for (i = now[x]; rest &amp;&amp; i; i = u[i].n) &#123;\n        int v = u[i].v, w = u[i].c;\n        now[x] = i;\n        if (dep[v] != dep[x] + 1 || w == 0)\n            continue;\n        int t = findP(v, min(rest, w));\n        if (t == 0)\n            dep[v] = 0;\n        rest -= t;\n        u[i].c -= t, u[i ^ 1].c += t;\n    &#125;\n    return flow - rest;\n&#125;\nint Dinic(int n) &#123;\n    int res = 0;\n    while (BFS(n)) &#123;\n        int t = findP(gs);\n        while (t) &#123;\n            res += t;\n            t = findP(gs);\n        &#125;\n    &#125;\n    return res;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w = 0) &#123;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m), read(k);\n    gs = 1, gt = n;\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        read(w[i].x), read(w[i].y);\n        read(w[i].c), read(w[i].w);\n        addf(w[i].x, w[i].y, w[i].c);\n    &#125;\n    print(Dinic(n), &#39; &#39;);\n    gs = n + 1, addf(gs, 1, k, 0);\n    for (int i = 1; i &lt;= m; ++i)\n        addf(w[i].x, w[i].y, inf, w[i].w);\n    SSP(gs, gt);\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"c.-航班安排\">C. 航班安排</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3820/problem/3\" class=\"uri\">http://222.180.160.110:61235/contest/3820/problem/3</a></p>\n<p>很简单一个道理，时间的具体值对我们来说并不重要。能到就是能到，不能到就是不能到。</p>\n<p>边权矩阵也并不是全部有用，这条边和任务有关系吗？没有，那就当它是空气。</p>\n<p>那什么会对我们产生限制？飞机数量。故容量由飞机数量决定。什么是我们要最大化的值？收益，故我们的费用是支出。</p>\n<p>如果飞机能在一个任务结束之后，在另一个任务开始之前飞过去，那就将两个任务连边，容量为 <span class=\"math inline\">\\(1\\)</span>，费用为两点间花费。特别地，应将机场拆为大源点和大汇点，并在二者中任选其一拆点（和 T2 类似），好作出 <span class=\"math inline\">\\(K\\)</span> 的流量限制。</p>\n<p>还有一个小细节，对于一个任务的流量我们也要加以约束，不然碰到流入 <span class=\"math inline\">\\(2\\)</span> 流出 <span class=\"math inline\">\\(2\\)</span> 这种平衡但不合法的情况就不行了，所以对于任务我们也要按老套路拆点。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 405;\nconst int maxm = 4e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\nstruct __ &#123;\n    int x, y, l, r, c;\n    bool operator&lt; (const __ &amp;q) const &#123;\n        return l &lt; q.l;\n    &#125;\n&#125;;\n_ u[maxm];\n__ w[maxn];\nbool inq[maxn];\nint gs, gt, tot = 1;\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint n, m, k, T, res, fs, ft;\nint t[maxn][maxn], f[maxn][maxn];\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w) &#123;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m), read(k), read(T);\n    fs = 2 * m + 1, ft = 2 * m + 2;\n    gs = 2 * m + 3, gt = 2 * m + 4;\n    addf(gs, fs, k, 0), addf(ft, gt, k, 0);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= n; ++j)\n            read(t[i][j]);\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= n; ++j)\n            read(f[i][j]);\n    &#125;\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        read(w[i].x), read(w[i].y);\n        read(w[i].l), read(w[i].r);\n        read(w[i].c), ++w[i].x, ++w[i].y;\n    &#125;\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        addf(i + m, i, 1, 0);\n        if (t[1][w[i].x] &lt;= w[i].l) &#123;\n            addf(fs, i + m, 1,\n                f[1][w[i].x] - w[i].c);\n        &#125;\n        if (w[i].r + t[w[i].y][1] &lt;= T)\n            addf(i, ft, 1, f[w[i].y][1]);\n        for (int j = 1; j &lt;= m; ++j) &#123;\n            if (i != j &amp;&amp; w[i].r +\n                t[w[i].y][w[j].x] &lt;= w[j].l) &#123;\n                addf(i, j + m, 1,\n                    f[w[i].y][w[j].x] - w[j].c);\n            &#125;\n        &#125;\n    &#125;\n    SSP(gs, gt);\n    print(-res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"d.-修车\">D. 修车</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3820/problem/4\" class=\"uri\">http://222.180.160.110:61235/contest/3820/problem/4</a></p>\n<p>顾客数一定，所谓平均等待时间不过是个幌子，只需要求得最小等待总时间。</p>\n<p>技术人员不能同时修两辆车，<span class=\"math inline\">\\(M\\)</span> 的范围又这么小，不往拆点想都难。可问题来了，怎么拆呢？</p>\n<p>我一开始的想法是，用点 <span class=\"math inline\">\\((i, j)\\)</span> 表示人 <span class=\"math inline\">\\(i\\)</span> 修车 <span class=\"math inline\">\\(j\\)</span>，但是这样建图怎样也无法达到目的。</p>\n<p>于是我添加了一个维度 <span class=\"math inline\">\\(k\\)</span>，用点 <span class=\"math inline\">\\((i, j, k)\\)</span> 表示人 <span class=\"math inline\">\\(i\\)</span> 修车 <span class=\"math inline\">\\(j\\)</span>，并且这是他修的倒数第 <span class=\"math inline\">\\(k\\)</span> 辆车，这样建图就轻而易举了。但接下来就面临了一个问题：这数据范围跑不过。于是乎审视我们的点，其实 <span class=\"math inline\">\\(j\\)</span> 这个维度是可以被合并的，只保留 <span class=\"math inline\">\\((i, k)\\)</span>，因为不可能存在两辆车同时为人 <span class=\"math inline\">\\(i\\)</span> 的倒数第 <span class=\"math inline\">\\(k\\)</span> 辆车。</p>\n<p>故将大源点和每辆车连边，容量为 <span class=\"math inline\">\\(1\\)</span>，费用为 <span class=\"math inline\">\\(0\\)</span>；将每辆车 <span class=\"math inline\">\\(j\\)</span> 和每个 <span class=\"math inline\">\\((i, k)\\)</span> 连边，容量为 <span class=\"math inline\">\\(1\\)</span>，费用为 <span class=\"math inline\">\\(T_{i, j}\\times k\\)</span>。</p>\n<p>这里有一点点费用提前计算的意思，所以就直接将每个 <span class=\"math inline\">\\((i, j)\\)</span> 和大汇点连边，容量为 <span class=\"math inline\">\\(1\\)</span>，费用为 <span class=\"math inline\">\\(0\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 1e4 + 5;\nconst int maxm = 1e6 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nbool inq[maxn];\nint n, m, x, res;\nint gs, gt, tot = 1;\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint fun(int i, int j) &#123;\n    return n + (i - 1) * n + j;\n&#125;\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w) &#123;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nint main() &#123;\n    read(m), read(n);\n    gs = n * m + n + 1, gt = gs + 1;\n    for (int i = 1; i &lt;= n; ++i)\n        addf(gs, i, 1, 0);\n    for (int i = 1; i &lt;= n * m; ++i)\n        addf(i + n, gt, 1, 0);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= m; ++j) &#123;\n            read(x);\n            for (int k = 1; k &lt;= n; ++k) &#123;\n                addf(i, fun(j, k),\n                            1, x * k);\n            &#125;\n        &#125;\n    &#125;\n    SSP(gs, gt);\n    printf(&quot;%.2lf&quot;, res * 1.0 / n);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"e.-连连看\">E. 连连看</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3820/problem/5\" class=\"uri\">http://222.180.160.110:61235/contest/3820/problem/5</a></p>\n<p>样例已经告诉了我们事实：小心删数，因为会有数同时出现在多组勾股数中。</p>\n<p>还是熟悉的单点 <span class=\"math inline\">\\(1\\)</span> 流量限制，故拆点为入点和出点，入点连大源点容量为 <span class=\"math inline\">\\(1\\)</span> 费用为 <span class=\"math inline\">\\(0\\)</span>，出点连大汇点容量为 <span class=\"math inline\">\\(1\\)</span> 费用为 <span class=\"math inline\">\\(0\\)</span>，满足条件的 <span class=\"math inline\">\\(x\\)</span> 和 <span class=\"math inline\">\\(y\\)</span> 我们为了不整细节就暴力地连双向边然后跑最大费用最大流。</p>\n<p>由于双向边这个神必操作，最后的最大流和最大费用都会翻倍，输出的时候要减半。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 2e3 + 5;\nconst int maxm = 4e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nbool inq[maxn];\nint l, r, res, cnt;\nbool f[maxn][maxn];\nint gs, gt, tot = 1;\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint gcd(int x, int y) &#123;\n    return y ? gcd(y, x % y) : x;\n&#125;\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, -inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &lt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d, cnt += mn;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w) &#123;\n    if (f[x][y])\n        return;\n    f[x][y] = f[y][x] = 1;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nbool check(int x, int y) &#123;\n    int z = sqrt(x * x - y * y);\n    if (z * z + y * y == x * x)\n        return (gcd(z, y) == 1);\n    return 0;\n&#125;\nint main() &#123;\n    read(l), read(r);\n    gs = 2 * r + 1, gt = 2 * r + 2;\n    for (int i = l; i &lt;= r; ++i) &#123;\n        addf(gs, i, 1, 0);\n        addf(i + r, gt, 1, 0);\n        for (int j = l; j &lt; i; ++j) &#123;\n            if (check(i, j)) &#123;\n                addf(j, i + r, 1, i + j);\n                addf(i, j + r, 1, i + j);\n            &#125;\n        &#125;\n    &#125;\n    SSP(gs, gt);\n    print(cnt / 2, &#39; &#39;), print(res / 2, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<p>依我看，队名就叫「曾总说的都队」吧 🐵</p>\n",
            "tags": [
                "网络流",
                "费用流"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20230717/",
            "url": "https://xsc062.netlify.app/20230717/",
            "title": "学习小组",
            "date_published": "2023-07-17T07:52:02.000Z",
            "content_html": "<p>Solution to <a href=\"https://codeforces.com/problemset/problem/756/D\">CF756D Bacterial Melee</a>。</p>\n<span id=\"more\"></span>\n<hr />\n<p>给我整不会了。怎么处理平方？怎么控制参与总学生最多？其中一定又有什么我不知道的奇技淫巧。</p>\n<p>一切尽在连边。</p>\n<ul>\n<li><p>处理学生与社团间的选择关系</p>\n<p>把学生向社团连边。学生只能选取某社团一次，故容量为 <span class=\"math inline\">\\(1\\)</span>。</p>\n<p>一个学生选取某个社团并不会立即对最终花费带来可计算的影响，因为最终花费由该社团参与的 <strong>所有学生平方数</strong> 决定。</p>\n故这一步我们先不慌计算社团的代价，只算参与社团本身需要的手续费 <span class=\"math inline\">\\(F_i\\)</span>。但是需要注意到手续费是财务部的收入而非支出，故实际边权为 <span class=\"math inline\">\\(-F_i\\)</span>，计算答案时视作负支出（明显不会因此而产生负环，因此可以放心加边）。</li>\n<li><p>处理学生的选择数量上限</p>\n<p>学生最多只能选择 <span class=\"math inline\">\\(K\\)</span> 个社团，为保证这一点，我们将源点向学生连边，容量为 <span class=\"math inline\">\\(K\\)</span>。</p>\n很明显，代价也不在此处计算，故令费用为 <span class=\"math inline\">\\(0\\)</span>。</li>\n<li><p>保证代价最小</p>\n<p>一开始，我认为最小费用最大流一定会找到最小费用，这个处理是无意义的，后来被打脸了。</p>\n<p>我们若欲在此图中寻得最小费用最大流，则 <strong>流一定最大</strong>。</p>\n<p>而学生的流入容量为 <span class=\"math inline\">\\(K\\)</span>，为了满流，学生一定会尽可能多地选择社团，那么费用就会噌噌上涨。回到目标，即保证学生都选取至少一个社团时，支出最小。</p>\n<p>那我们只要给机会让学生可以只选取一个社团就好了（当然也可以是两个、三个……）。</p>\n<p>故让学生向终点连边，容量为 <span class=\"math inline\">\\(K-1\\)</span>，那么学生可以在选取了所有比较赚的社团后就不再选了，选这条边达到满流。同样因为该边流量只有 <span class=\"math inline\">\\(K-1\\)</span>，学生为了满流就只能再选至少一个社团，满足题意。</p>\n不选社团明显是没有手续费和社团支出的，故费用为 <span class=\"math inline\">\\(0\\)</span>。</li>\n<li><p>处理社团本身支出</p>\n<p>问题在于如何处理 <span class=\"math inline\">\\(a\\)</span> 这个平方项。</p>\n<p>对于平方，我们可以联想到许多数学知识，譬如完全平方、平方差等，这里用到了平方差。</p>\n<p>假如原来的代价是 <span class=\"math inline\">\\(C_i\\times x^2\\)</span>，又加入了一个人，那么费用会变成 <span class=\"math inline\">\\(C_i\\times (x + 1)^2\\)</span>。由平方差得两者之差为 <span class=\"math inline\">\\(C_i\\times (2\\times x + 1)\\)</span>。当 <span class=\"math inline\">\\(x - 1\\)</span> 取为任意正整数时，<span class=\"math inline\">\\(2\\times x + 1\\)</span> 即为所有奇数。</p>\n<p>所以我们将社团向汇点连边，连很多条边，每条边表示 <strong>新增一个团员的代价</strong>，容量为 <span class=\"math inline\">\\(1\\)</span> 表示一个新增团员，费用为从 <span class=\"math inline\">\\(1\\)</span> 开始，一直到 <span class=\"math inline\">\\(2\\times (N - 1) + 1\\)</span> 的所有奇数。</p></li>\n</ul>\n<p>那么问题到这里就算处理完了。直接上费用流即可。</p>\n<p>不知道我的代码遭遇了哪家宇宙射线的侵蚀，Dinic 死活过不去，换成 EK 就过了。同学们如果发现自己的 Dinic 过不了也可以试试换 EK。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 405;\nconst int inf = 1e18;\nconst int maxm = 5e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nbool inq[maxn];\nint n, m, k, x, res;\nint gs, gt, tot = 1;\nint c[maxn], f[maxn];\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid readx(int &amp;x) &#123;\n    char ch = nec();\n    while (ch != &#39;0&#39; &amp;&amp; ch != &#39;1&#39;)\n        ch = nec();\n    x = ch - &#39;0&#39;;\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m), read(k);\n    gs = n + m + 1, gt = gs + 1;\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        read(c[i]);\n        for (int j = 0; j &lt; n; ++j) &#123;\n            add(i + n, gt, 1,\n                    (2 * j + 1) * c[i]);\n            add(gt, i + n, 0,\n                    -(2 * j + 1) * c[i]);\n        &#125;\n    &#125;\n    for (int i = 1; i &lt;= m; ++i)\n        read(f[i]);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        add(gs, i, k, 0);\n        add(i, gs, 0, 0);\n        add(i, gt, k - 1, 0);\n        add(gt, i, 0, 0);\n        for (int j = 1; j &lt;= m; ++j) &#123;\n            readx(x);\n            if (x == 1) &#123;\n                add(i, j + n, 1, -f[j]); // 负代价\n                add(j + n, i, 0, f[j]);\n            &#125;\n        &#125;\n    &#125;\n    SSP(gs, gt);\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n",
            "tags": [
                "网络流",
                "费用流"
            ]
        }
    ]
}