<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title> • Posts by &#34;树形 dp&#34; tag</title>
        <link>https://xsc062.netlify.app</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sun, 24 Aug 2025 15:37:55 +0800</pubDate>
        <lastBuildDate>Sun, 24 Aug 2025 15:37:55 +0800</lastBuildDate>
        <category>并查集</category>
        <category>斜率优化</category>
        <category>悬线法</category>
        <category>哈希</category>
        <category>字典树</category>
        <category>DP</category>
        <category>单调队列</category>
        <category>分治</category>
        <category>二分图</category>
        <category>CRT / exCRT</category>
        <category>排列组合</category>
        <category>网络流</category>
        <category>费用流</category>
        <category>二分</category>
        <category>上下界网络流</category>
        <category>容斥原理</category>
        <category>线段树</category>
        <category>树状数组</category>
        <category>区间 DP</category>
        <category>构造</category>
        <category>Tarjan</category>
        <category>数据结构</category>
        <category>下饭</category>
        <category>LCA</category>
        <category>倍增</category>
        <category>鸽巢原理</category>
        <category>概率期望</category>
        <category>调和级数</category>
        <category>差分</category>
        <category>思维</category>
        <category>树形 DP</category>
        <category>最小生成树</category>
        <category>SAM</category>
        <category>状压</category>
        <category>分块</category>
        <category>可持久化</category>
        <category>笛卡尔树</category>
        <category>高维前缀和</category>
        <category>闲话</category>
        <category>欧拉回路</category>
        <category>树链剖分</category>
        <category>长链剖分</category>
        <category>KMP</category>
        <category>border</category>
        <category>字符串</category>
        <category>AC 自动机</category>
        <category>SA</category>
        <category>数学</category>
        <category>树上差分</category>
        <category>FWT</category>
        <category>堆</category>
        <category>树的重心</category>
        <category>二项式定理</category>
        <category>二项式反演</category>
        <category>贪心</category>
        <category>均摊</category>
        <category>计数</category>
        <category>优化建图</category>
        <category>反悔贪心</category>
        <category>调整法</category>
        <category>背包</category>
        <category>博弈论</category>
        <category>DP 优化</category>
        <category>虚树</category>
        <category>点分治</category>
        <category>WQS 二分</category>
        <category>闵可夫斯基和</category>
        <category>slope trick</category>
        <category>四边形不等式</category>
        <category>暴力</category>
        <category>状压 DP</category>
        <category>组合数学</category>
        <category>支配对</category>
        <category>DDP</category>
        <category>平衡树</category>
        <category>容斥</category>
        <category>猫树</category>
        <category>Kruskal 重构树</category>
        <category>李超线段树</category>
        <item>
            <guid isPermalink="true">https://xsc062.netlify.app/20250824/</guid>
            <title>杂题</title>
            <link>https://xsc062.netlify.app/20250824/</link>
            <category>倍增</category>
            <category>树形 DP</category>
            <category>Kruskal 重构树</category>
            <pubDate>Sun, 24 Aug 2025 15:37:55 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;不会的东西越来越多了&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-k-set-tree&#34;&gt;B. K-Set Tree&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1691F&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1691F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(F_i\)&lt;/span&gt; 表示以 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为根时，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 子树内的答案。则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
F_u=\left(C_{siz_u}^k-\sum C_{siz_v}^k\right)\cdot siz_u+\sum F_v\\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;直接换根是很复杂的；把 &lt;span class=&#34;math inline&#34;&gt;\(\sum C_{siz_v}^k\)&lt;/span&gt; 记作 &lt;span class=&#34;math inline&#34;&gt;\(dp_u\)&lt;/span&gt;，把 &lt;span class=&#34;math inline&#34;&gt;\(\sum F_v\)&lt;/span&gt; 记作 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt;，那么：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
res=\sum(C_n^k-dp_u)\cdot n+f_u\\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样做是为了把两个和 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 有关的乘项拆开来换根&lt;/strong&gt;，实际换根的时候就只用分别换 &lt;span class=&#34;math inline&#34;&gt;\(f,dp\)&lt;/span&gt; 两个值，不用考虑二次项等问题，计算量会少很多&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        if (m &amp;gt; n)
            return 0ll;
        return fac[n] * inv[m] % mod * inv[n - m] % mod;
    &amp;#125;;
    auto res(0ll);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), ss(n + 1);
    std::vector&amp;lt;long long&amp;gt; f(n + 1), dp(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                (f[x] += (C(siz[i], k) - dp[i]) * siz[i] + f[i]) %= mod;
                (dp[x] += C(siz[i], k)) %= mod;
                siz[x] += siz[i];
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        (res += (C(n, k) - dp[x]) * n + f[x]) %= mod;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                (f[i] += (C(n - siz[i], k) - (dp[x] - C(siz[i], k))) * (n - siz[i]) + f[x] - f[i] - (C(siz[i], k) - dp[i]) * siz[i]) %= mod;
                (dp[i] += C(n - siz[i], k)) %= mod;
                DFS(i, x);
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; (res + mod) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c.-li-hua-and-path&#34;&gt;C. Li Hua and Path&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1797F&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1797F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑&lt;strong&gt;容斥&lt;/strong&gt;，分别求解满足 1、满足 2、满足 12（注意要减两倍）就能计算答案&lt;/p&gt;
&lt;p&gt;发现题目所求点对形式很符合 Kruskal 重构树的要求，考虑以对应点权为边权，分别建立 min，max Kruskal 点权多叉重构树。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;点权多叉重构树？&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;在点权上做 Kruskal 重构树时，发现边的虚点是不必要的，可以直接将更优点作为父亲。&lt;/p&gt;
&lt;p&gt;写的时候有点难想清楚…… 可以画画图，仔细确定一下 Kruskal 重构树的具体性质&lt;/p&gt;
&lt;p&gt;这样做的优势是没有虚点，一些问题会方便一些；但同时放弃了二叉树的结构，一些题可能没那么好做。&lt;/p&gt;
&lt;p&gt;这道题只用经典 Kruskal 重构树也可以解决。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;发现 1 2 均可以转化成两棵树在两棵树上的祖孙关系要求，可以轻松地分别统计满足 1、满足 2 的点对数量&lt;/p&gt;
&lt;p&gt;考虑怎么处理同时满足 12 的，发现要求在两棵树上二者应该都具有祖孙关系，且是相反的。&lt;del&gt;可以考虑在一棵树上 DFS 的同时用主席树存储祖先，在另一颗树上 ask&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;考虑从更容易用 dfn 表示的子树问题思考，在 min 树上分配 dfn 后，在 max 树上用 DFS + 回溯得到每个点实时祖先序列，存在树状数组里；ask 该点被分配的 dfn 子树区间就能得到答案。&lt;/p&gt;
&lt;p&gt;考虑询问，由于每次加入的都是编号最大的点，对于满足 1、满足 2 的贡献是显然的，而同时满足 12 的点就是在 min 树上的祖先，都是好做的。&lt;/p&gt;
&lt;p&gt;实现的时候一定要把 min / max 树对应的性质思考清楚，不然会很麻烦&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; f1(n + 1), f2(n + 1);
    std::iota(f1.begin() + 1, f1.end(), 1);
    std::iota(f2.begin() + 1, f2.end(), 1);
    std::function&amp;lt;int(int)&amp;gt; find1 = [&amp;amp;](int x) &amp;#123;
        return x == f1[x] ? x : f1[x] = find1(f1[x]);
    &amp;#125;;
    std::function&amp;lt;int(int)&amp;gt; find2 = [&amp;amp;](int x) &amp;#123;
        return x == f2[x] ? x : f2[x] = find2(f2[x]);
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1), g2(n + 1), adj1(n + 1), adj2(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        if (x &amp;gt; y)
            std::swap(x, y);
        adj1[y].push_back(x);
        adj2[x].push_back(y);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (auto j : adj1[i]) &amp;#123;
            int fi = find1(i), fj = find1(j);
            g1[fi].push_back(fj), f1[fj] = fi;
        &amp;#125;
    for (int i = n; i; --i)
        for (auto j : adj2[i]) &amp;#123;
            int fi = find2(i), fj = find2(j);
            g2[fi].push_back(fj), f2[fj] = fi;
        &amp;#125;
    std::vector&amp;lt;int&amp;gt; bit(n + 1), dfn(n + 1), rfn(n + 1);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] += v;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    int rt1 = 0, rt2 = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (f1[i] == i)
            rt1 = i;
        if (f2[i] == i)
            rt2 = i;
    &amp;#125;
    int q;
    std::cin &amp;gt;&amp;gt; q;
    std::vector&amp;lt;int&amp;gt; dep1(n + 1), dep2(n + q + 1);
    long long res = 0ll;
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now;
        res += dep1[x];
        for (auto i : g1[x]) &amp;#123;
            dep1[i] = dep1[x] + 1;
            DFS(i);
        &amp;#125;
        rfn[x] = now;
        return;
    &amp;#125;;
    DFS(rt1);
    DFS = [&amp;amp;](int x) &amp;#123;
        res += dep2[x];
        res -= 2 * (ask(rfn[x]) - ask(dfn[x] - 1));
        add(dfn[x], 1);
        for (auto i : g2[x]) &amp;#123;
            dep2[i] = dep2[x] + 1;
            DFS(i);
        &amp;#125;
        add(dfn[x], -1);
        return;
    &amp;#125;;
    DFS(rt2);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    for (int fa; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; fa;
        dep2[++n] = dep2[fa] + 1;
        res += (n - 1) - dep2[n];
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-团队选拔&#34;&gt;D. 团队选拔&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6534/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6534/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，从中任选一些互不相交的区间，满足每个区间内元素的 gcd 相同。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^5,V\le 10^7\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意到固定一个左端点后，移动右端点，gcd 每次至多减小到原来的一半；也就是说，其种类有 &lt;span class=&#34;math inline&#34;&gt;\(\log V\)&lt;/span&gt; 种。故全序列的 gcd 总数是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log V)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;很容易想到与此原理类似的全局答案求法：对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，向左处理出每一段 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(\gcd(a_{l\cdots i})=\gcd(a_r\cdots i)\)&lt;/span&gt;，并记录该 &lt;span class=&#34;math inline&#34;&gt;\(\gcd\)&lt;/span&gt;。这样求出来的 &lt;span class=&#34;math inline&#34;&gt;\((i,l,r)\)&lt;/span&gt; 共有 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log V)\)&lt;/span&gt; 段。&lt;/p&gt;
&lt;p&gt;对于每个 gcd 有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}=f_{i-1}+\sum\limits_{j=l_i}^{r_i} f_{j - 1}\)&lt;/span&gt;，可以做一个扫描线，得到全局答案；向前向后分别做到 &lt;span class=&#34;math inline&#34;&gt;\(i-1,i+1\)&lt;/span&gt;，相乘就能得到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 未被选取时的答案&lt;/p&gt;
&lt;p&gt;考虑怎么完成『相乘』这个动作：最后的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 在每个右端点处发生变化，可以转化成若干段 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;；反过来的 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;\)&lt;/span&gt; 亦可以这样转化。将 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 整体后移一位、&lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;\)&lt;/span&gt; 整体前移一位，就可以对齐。二者的端点总数是均摊单 log 的，区间总数也就是均摊单 log 的（归并就能快速寻找到区间），用差分做一个区间加即可。&lt;/p&gt;
&lt;p&gt;用二分勉强单 log 解决了转移；还看到 &lt;span class=&#34;citation&#34; data-cites=&#34;spdarkle&#34;&gt;@spdarkle&lt;/span&gt; 疑似在 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 上直接做的&lt;a href=&#34;http://222.180.160.110:61235/submission/3108272&#34;&gt;做法&lt;/a&gt;，和 &lt;span class=&#34;citation&#34; data-cites=&#34;Rosmist&#34;&gt;@Rosmist&lt;/span&gt; 疑似直接在每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 上做的&lt;a href=&#34;http://222.180.160.110:61235/submission/3108581&#34;&gt;做法&lt;/a&gt;。官解是个看不懂的做法&lt;/p&gt;
&lt;p&gt;呃，好像一不小心拿了最优解。而且优势很明显（怎么总用时比别人一个点还少？），这是为什么？&lt;/p&gt;
&lt;p&gt;可能因为大家都看不懂官解，做法比较多样？除了我之外比较快的 lwz 和 &lt;span class=&#34;citation&#34; data-cites=&#34;GoldSpade&#34;&gt;@GoldSpade&lt;/span&gt; 都用归并完成最后一步；我较他们的额外优势大概是用二分换掉了树状数组？迷惑&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;selection.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;selection.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;ex_selection2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; st(20, std::vector&amp;lt;int&amp;gt; (n + 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], st[0][i] = a[i];
    for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
        for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
            st[j][i] = std::__gcd(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
    auto askgcd = [&amp;amp;](int l, int r) &amp;#123;
        int k = std::__lg(r - l + 1);
        return std::__gcd(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
    &amp;#125;;
    std::unordered_map&amp;lt;int, int&amp;gt; tab;
    struct node &amp;#123;
        int i, l, r;
        bool operator&amp;lt; (const int q) const &amp;#123;
            return i &amp;lt; q;
        &amp;#125;
        bool operator&amp;lt;= (const int q) const &amp;#123;
            return i &amp;lt;= q;
        &amp;#125;
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;node&amp;gt; &amp;gt; p1, p2;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int to = i; to &amp;gt;= 1; ) &amp;#123;
            int at = i, g = askgcd(to, i);
            for (int l = 1, r = to, mid; l &amp;lt;= r; ) &amp;#123;
                mid = (l + r) &amp;gt;&amp;gt; 1;
                if (askgcd(mid, i) == g)
                    at = mid, r = mid - 1;
                else
                    l = mid + 1;
            &amp;#125;
            if (!tab.count(g)) &amp;#123;
                tab[g] = (int)p1.size();
                p1.emplace_back(), p2.emplace_back();
            &amp;#125;
            p1[tab[g]].push_back(&amp;#123; i, at, to &amp;#125;);
            to = at - 1;
        &amp;#125;
        for (int to = i; to &amp;lt;= n; ) &amp;#123;
            int at = i, g = askgcd(i, to);
            for (int l = to, r = n, mid; l &amp;lt;= r; ) &amp;#123;
                mid = (l + r) &amp;gt;&amp;gt; 1;
                if (askgcd(i, mid) == g)
                    at = mid, l = mid + 1;
                else
                    r = mid - 1;
            &amp;#125;
            if (!tab.count(g)) &amp;#123;
                tab[g] = (int)p2.size();
                p1.emplace_back(), p2.emplace_back();
            &amp;#125;
            p2[tab[g]].push_back(&amp;#123; i, to, at &amp;#125;);
            to = at + 1;
        &amp;#125;
    &amp;#125;
    auto s(0ll);
    std::vector&amp;lt;int&amp;gt; x1(n + 1), x2(n + 2), pos(2 * n + 3);
    std::vector&amp;lt;long long&amp;gt; f1(n + 1), f2(n + 2), s1(n + 1), s2(n + 2), diff(n + 1);
    for (auto [g, id] : tab) &amp;#123;
        // printf(&amp;quot;g = %d: \n&amp;quot;, g);
        int n1 = (int)p1[id].size();
        x1[0] = 0, f1[0] = s1[0] = 1ll;
        for (int i = 1; i &amp;lt;= n1; ++i) &amp;#123;
            auto [x, L, R] = p1[id][i - 1];
            --L, --R;
            x1[i] = x, f1[i] = f1[i - 1];
            int l = std::upper_bound(x1.begin() + 1, x1.begin() + i + 1, L) - x1.begin() - 1,
                r = std::upper_bound(x1.begin() + 1, x1.begin() + i + 1, R) - x1.begin() - 1;
            if (l == r)
                (f1[i] += f1[l] * (R - L + 1)) %= mod;
            else &amp;#123;
                f1[i] += s1[r - 1] + mod - s1[l];
                f1[i] += f1[r] * (R - x1[r] + 1);
                f1[i] += f1[l] * (x1[l + 1] - L);
                f1[i] %= mod;
            &amp;#125;
            // printf(&amp;quot;  r = %d, l = [%d, %d]: %lld\n&amp;quot;, x, L, R, f1[i]);
            if (i != n1)
                s1[i] = (s1[i - 1] + f1[i] * (p1[id][i].i - x)) % mod;
        &amp;#125;
        (s += f1[n1] - 1) %= mod;
        int n2 = (int)p2[id].size();
        x2[n2 + 1] = n + 1, f2[n2 + 1] = s2[n2 + 1] = 1ll;
        for (int i = n2; i; --i) &amp;#123;
            auto [x, L, R] = p2[id][i - 1];
            ++L, ++R;
            x2[i] = x, f2[i] = f2[i + 1];
            int l = std::lower_bound(x2.begin() + i, x2.begin() + n2 + 1, L) - x2.begin(),
                r = std::lower_bound(x2.begin() + i, x2.begin() + n2 + 1, R) - x2.begin();
            if (l == r)
                (f2[i] += f2[l] * (R - L + 1)) %= mod;
            else&amp;#123;
                f2[i] += s2[l + 1] + mod - s2[r];
                f2[i] += f2[r] * (R - x2[r - 1]);
                f2[i] += f2[l] * (x2[l] - L + 1);
                f2[i] %= mod;
            &amp;#125;
            // printf(&amp;quot;  l = %d, r = [%d, %d]: %lld\n&amp;quot;, x, L, R, f2[i]);
            if (i != 1)
                s2[i] = (s2[i + 1] + f2[i] * (x - p2[id][i - 2].i)) % mod;
        &amp;#125;
        for (int i = 0; i &amp;lt; n1; ++i)
            x1[i] = x1[i + 1];
        x1[n1] = n;
        int t = (x2[1] == 1) + 1;
        for (int i = 1; i &amp;lt;= n2 + 1; ++i)
            --x2[i];
        std::merge(x1.begin(), x1.begin() + n1 + 1, x2.begin() + t, x2.begin() + n2 + 2, pos.begin() + 1);
        int m = std::unique(pos.begin() + 1, pos.begin() + n1 + n2 + 4 - t) - pos.begin() - 1;
        for (int i = 1, p1 = 0, p2 = t, la = 0; i &amp;lt;= m; ++i) &amp;#123;
            for (; p1 + 1 &amp;lt;= n1 &amp;amp;&amp;amp; x1[p1] &amp;lt; pos[i]; ++p1);
            for (; p2 + 1 &amp;lt;= n2 + 1 &amp;amp;&amp;amp; x2[p2] &amp;lt; pos[i]; ++p2);
            (diff[la + 1] += f1[p1] * f2[p2] + mod - 1) %= mod;
            // printf(&amp;quot;  [%d, %d]: %lld, %lld\n&amp;quot;, la + 1, pos[i], f1[p1], f2[p2]);
            if (pos[i] + 1 &amp;lt;= n)
                (diff[pos[i] + 1] += mod - f1[p1] * f2[p2] + 1) %= mod;
            la = pos[i];
        &amp;#125;
    &amp;#125;
    // std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        (diff[i] += diff[i - 1]) %= mod;
        std::cout &amp;lt;&amp;lt; (s + mod - diff[i]) % mod &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;我一开始将 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 定义为单点答案而非前缀和，会导致需要线段树维护等差序列，还丢失了答案段数不多这个性质，非常麻烦。将 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的意义替换为前缀和后，就可以很轻松地做了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-宇宙&#34;&gt;A. 宇宙&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6535/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6535/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，对于 &lt;span class=&#34;math inline&#34;&gt;\(k=1,2,\cdots,n-1\)&lt;/span&gt;，回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 开始自增，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，都可以选取 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个互不相同的下标，并使它们对应的元素增加 1。此时，若存在元素不大于 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，停止。输出停止时 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 可能的最大值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6,V\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现不大于这个 condition 有些反人类，先将 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 全部减 1，转化成小于来考虑&lt;/p&gt;
&lt;p&gt;考虑能坚持到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的一个必要条件，即 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{a_j&amp;lt;i} i-a_j\le k\cdot i\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;容易发现该条件同时是充分的，同样从线段覆盖的角度出发，是一个 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的扩展&lt;/p&gt;
&lt;p&gt;对 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 排序，停止时参与运算的 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 是越来越多的，故记录最后一个参与运算的下标，逐步挪动（当发现解出来的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 比下一个更大时就需要挪动），同时解不等式即可。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;Quack&#34;&gt;@Quack&lt;/span&gt; 云我在场上能想出官解对我来说是非常了不起的（其实场上写正解的人少得出奇），我也不得不承认我能做出来确实有一定运气成分，也能从中一窥我令人眼前一黑的数学素养！&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
    std::freopen(&amp;quot;universe.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;universe.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    int n;
    std::cin &amp;gt;&amp;gt; n, std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], --a[i];
    std::sort(a.begin() + 1, a.end());
    int id = 1;
    long long s = a[1];
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        if (id &amp;lt; i + 1)
            s += a[++id];
        long long x = s / (id - i);
        for (; id != n &amp;amp;&amp;amp; x &amp;gt; a[id + 1]; s += a[++id], x = s / (id - i));
        std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-跳跃&#34;&gt;B. 跳跃&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6535/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6535/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的 01 序列和跳跃上限 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。给定 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 个询问，回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 跳到 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;，保证 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt; 的颜色均为 1，每次不能跳超过 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 格或跳出去，在最小化踩到 0 数量的前提下，最小化跳跃次数，输出这两个值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le5\times10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;容易发现只能往一个方向跳，那么不妨令 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;lt;b\)&lt;/span&gt;。有一个贪心的想法是能往右就往右，手玩发现&lt;strong&gt;是对的&lt;/strong&gt;（我场上手玩过后坚定地认为是错的；可能和没时间了兵荒马乱有关）。这样就很好想到第二问需要倍增；但把两个问结合起来考虑是有点困难的，赛时就意识到这两问的联系没有看起来那么大，甚至很可能是割裂的。&lt;/p&gt;
&lt;p&gt;单独考虑第一问，发现对于一段长度为 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 的 0，需要踩到恰好 &lt;span class=&#34;math inline&#34;&gt;\(\left\lfloor\dfrac {len}k\right\rfloor\)&lt;/span&gt; 个 0。答案容易计算。&lt;/p&gt;
&lt;p&gt;单独考虑第二问，考虑一个第一问答案固定为 0 的情况，也即每个 len 都比 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 小。则问题转化成在不踩 0 的情况下最小的步数。容易用倍增解决。&lt;/p&gt;
&lt;p&gt;本题最令人印象深刻的点在于二者的结合，发现这 &lt;span class=&#34;math inline&#34;&gt;\(\left\lfloor\dfrac {len}k\right\rfloor\cdot k\)&lt;/span&gt; 个 0 是无论如何都会被经过的，所以可以在原始数组里删掉它们，转化成只考虑第二问的情况&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;？？？&lt;/p&gt;
&lt;p&gt;我对于自己莫名其妙跑得比别人块一大截这件事情已经快要见怪不怪了，这次又是什么原理，我预处理写得比较漂亮吗？？&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;jump.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;jump.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, k, q, op;
    std::cin &amp;gt;&amp;gt; n, std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q &amp;gt;&amp;gt; k &amp;gt;&amp;gt; op;
    std::vector&amp;lt;int&amp;gt; tmp(n + 1), a(1), s(1), to(n + 2);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        tmp[i] = t - &amp;#39;0&amp;#39;;
    &amp;#125;
    tmp.push_back(1), ++n;
    int cnt = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (tmp[i] == 1) &amp;#123;
            a.push_back(1), to[i] = (int)a.size() - 1;
            s.push_back(s.back() + cnt), cnt = 0;
        &amp;#125;
        else &amp;#123;
            ++cnt;
            if (i == n || tmp[i + 1] == 1) &amp;#123;
                for (int j = 1; j &amp;lt;= cnt % k; ++j)
                    a.push_back(0), s.push_back(s.back());
                cnt /= k;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    n = (int)a.size() - 1;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(20, std::vector&amp;lt;int&amp;gt; (n + 1));
    for (int i = 0; i &amp;lt; 20; ++i)
        f[i][n] = n;
    for (int i = n - 1; i; --i) &amp;#123;
        f[0][i] = std::min(&amp;#123; n, i + k, f[0][i + 1] &amp;#125;);
        for (; !a[f[0][i]]; --f[0][i]);
        if (a[i] == 1) &amp;#123;
            for (int j = 1; j &amp;lt; 20; ++j)
                f[j][i] = f[j - 1][f[j - 1][i]];
        &amp;#125;
    &amp;#125;
    for (int a, b; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        if (a &amp;gt; b)
            std::swap(a, b);
        a = to[a], b = to[b];
        std::cout &amp;lt;&amp;lt; s[b] - s[a];
        if (op == 1) &amp;#123;
            int res = s[b] - s[a];
            for (int i = 19; ~i; --i)
                if (f[i][a] &amp;lt; b)
                    a = f[i][a], res += (1 &amp;lt;&amp;lt; i);
            std::cout &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; res + 1;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-jongmah&#34;&gt;D. Jongmah&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1110/problem/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/1110/problem/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易发现当连续出现三次 &lt;span class=&#34;math inline&#34;&gt;\((i-1,i,i+1)\)&lt;/span&gt; 时，可以被三次相同代替；&lt;/p&gt;
&lt;p&gt;容易发现需要使用 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,a,b}\)&lt;/span&gt; 来代表 DP 到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时，用了 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 组 &lt;span class=&#34;math inline&#34;&gt;\((i-1,i,i+1)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 组 &lt;span class=&#34;math inline&#34;&gt;\((i,i+1,i+2)\)&lt;/span&gt; 时的最大组数；&lt;/p&gt;
&lt;p&gt;但是并没有想到要将二者结合起来！感觉应该是能比较快做出来的水平。能察觉到不太认真。悔过！&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; cnt(m + 1);
    for (int i = 1, x; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; x, ++cnt[x];
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; (3, std::vector&amp;lt;int&amp;gt; (3, -inf)));
    f[0][0][0] = 0ll;
    for (int i = 1; i &amp;lt;= m; ++i)
        for (int a = 0; a &amp;lt;= 2; ++a) // i - 1, i, i + 1
            for (int b = 0; b &amp;lt;= 2; ++b) // i, i + 1, i + 2
                for (int c = 0; c &amp;lt;= 2; ++c) &amp;#123; // i - 2, i - 1, i
                    if (a + b + c &amp;gt; cnt[i]) continue;
                    f[i][a][b] = std::max(f[i][a][b], f[i - 1][c][a] + b + (cnt[i] - a - b - c) / 3);
                &amp;#125;
    std::cout &amp;lt;&amp;lt; f[m][0][0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e.-magic-stones&#34;&gt;E. Magic Stones&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1110/problem/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/1110/problem/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易想到考察差分数组，发现这个操作就是交换了差分数组的相邻两个元素。故对于 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的差分数组分别排序，然后 check 是否相等即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; b[i];
    if (a[1] != b[1] || a[n] != b[n]) &amp;#123;
        std::cout &amp;lt;&amp;lt; &amp;quot;No&amp;quot; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; da(n), db(n);
    std::adjacent_difference(a.begin() + 1, a.end(), da.begin());
    std::adjacent_difference(b.begin() + 1, b.end(), db.begin());
    std::sort(da.begin(), da.end());
    std::sort(db.begin(), db.end());
    std::cout &amp;lt;&amp;lt; (da == db ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xsc062.netlify.app/20250803/</guid>
            <title>树 DP</title>
            <link>https://xsc062.netlify.app/20250803/</link>
            <category>DP</category>
            <category>树形 DP</category>
            <category>长链剖分</category>
            <pubDate>Sun, 03 Aug 2025 11:44:54 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;树上的 DP 以及 和树有关的 DP&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---svjetlo&#34;&gt;A - Svjetlo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7163&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7163&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很容易想到一种状态设计，即令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,0/1/2}\)&lt;/span&gt; 分别表示有 &lt;span class=&#34;math inline&#34;&gt;\(0/1/2\)&lt;/span&gt; 个端点在子树内部的情况；然后就开始思考，如何满足对于开关状态的要求？&lt;/p&gt;
&lt;p&gt;还是想少了。如果再加一维，从『状态为开或关』思考就会轻松很多，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,0/1/2,0/1}\)&lt;/span&gt; 表示有 &lt;span class=&#34;math inline&#34;&gt;\(0/1/2\)&lt;/span&gt; 个端点再子树外部，且子树内操作完后 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为关 / 开的最少步数。然后分类讨论转移方式即可。&lt;/p&gt;
&lt;p&gt;一个比较方便的讨论方式是，先确定某种情况下，访问 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的次数，然后就可以得到它们原本的状态。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, rt = -1;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        a[i] = t - &amp;#39;0&amp;#39;;
        if (!a[i])
            rt = i;
    &amp;#125;
    if (rt == -1) &amp;#123;
        std::cout &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tag(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        tag[x] = a[x];
        for (auto i : g[x])
            if (i != fa)
                DFS(i, x), tag[x] &amp;amp;= tag[i];
        return;
    &amp;#125;;
    DFS(rt, -1);
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; (3, std::vector&amp;lt;int&amp;gt; (2, 0x3f3f3f3f)));
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        f[x][0][a[x]] = 0;
        for (auto i : g[x])
            if (i != fa &amp;amp;&amp;amp; !tag[i]) &amp;#123;
                DFS(i, x);
                auto g = f[x];
                f[x][0][0] = std::min(g[0][0] + f[i][0][1] + 4, g[0][1] + f[i][0][0] + 2);
                f[x][0][1] = std::min(g[0][1] + f[i][0][1] + 4, g[0][0] + f[i][0][0] + 2);
                f[x][1][0] = std::min(&amp;#123; g[1][0] + f[i][0][1] + 4, g[1][1] + f[i][0][0] + 2, g[0][0] + f[i][1][0] + 3, g[0][1] + f[i][1][1] + 1 &amp;#125;);
                f[x][1][1] = std::min(&amp;#123; g[1][1] + f[i][0][1] + 4, g[1][0] + f[i][0][0] + 2, g[0][1] + f[i][1][0] + 3, g[0][0] + f[i][1][1] + 1 &amp;#125;);
                f[x][2][0] = std::min(&amp;#123; g[2][0] + f[i][0][1] + 4, g[2][1] + f[i][0][0] + 2, g[1][0] + f[i][1][1], g[1][1] + f[i][1][0] + 2, g[0][0] + f[i][2][1] + 4, g[0][1] + f[i][2][0] + 2 &amp;#125;);
                f[x][2][1] = std::min(&amp;#123; g[2][1] + f[i][0][1] + 4, g[2][0] + f[i][0][0] + 2, g[1][1] + f[i][1][1], g[1][0] + f[i][1][0] + 2, g[0][1] + f[i][2][1] + 4, g[0][0] + f[i][2][0] + 2 &amp;#125;);
            &amp;#125;
        f[x][1][0] = std::min(f[x][1][0], f[x][0][1] + 1);
        f[x][1][1] = std::min(f[x][1][1], f[x][0][0] + 1);
        f[x][2][0] = std::min(f[x][2][0], f[x][1][0]);
        f[x][2][1] = std::min(f[x][2][1], f[x][1][1]);
        // for (int i = 0; i &amp;lt; 3; ++i)
        //     for (int j = 0; j &amp;lt; 2; ++j)
        //         printf(&amp;quot;f[%d][%d][%d] = %d\n&amp;quot;, x, i, j, f[x][i][j]);
        return;
    &amp;#125;;
    DFS(rt, -1);
    std::cout &amp;lt;&amp;lt; f[rt][2][1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---one-to-one&#34;&gt;B - One to One&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc140/tasks/arc140_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc140/tasks/arc140_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;观察原图上连通块，发现要么是没有未确定边的基环树，要么是有恰好一条未确定边的树。缩点，任意为未确定边赋值，考察最后得到的连通块，发现要么是以『基环树点』为根的树，要么是不包含『基环树点』的（内向）基环树。&lt;/p&gt;
&lt;p&gt;这里要用到贡献的思想。考虑将全局划分为若干个部分，保证每部分的单步价值是可确定的。将第一步，即对树和基环树的讨论拆开，对于树，其数量确定；对于基环树，发现环的数量即为基环树的数量，进一步将所有步中的『环』这一类分开，统计成环的方案数就可以得到基环树的贡献。具体地，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 为在前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个点中选择 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个成一个环的方案数，则有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,j}=f_{i-1,j}+f_{i-1,j-1}\times siz_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后计算每个环的贡献即可。注意还要算上环内部的排列（注意循环位移）。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), tag(n + 1), s(n + 1, 1), fa(n + 1), siz(n + 1);
    std::iota(fa.begin() + 1, fa.end(), 1);
    std::function&amp;lt;int(int)&amp;gt; find = [&amp;amp;](int x) &amp;#123;
        return x == fa[x] ? x : fa[x] = find(fa[x]);
    &amp;#125;;
    auto merge = [&amp;amp;](int x, int y) &amp;#123;
        x = find(x), y = find(y);
        if (x != y) &amp;#123;
            tag[y] += tag[x];
            s[y] += s[x];
            fa[x] = y;
        &amp;#125;
        return;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)  &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i], fa[i] = i;
        if (a[i] == -1)
            tag[i] = 1;
        else
            merge(i, a[i]);
    &amp;#125;
    int cnt1 = 0, cnt2 = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        cnt1 += (fa[i] == i &amp;amp;&amp;amp; !tag[i]);
        if (fa[i] == i &amp;amp;&amp;amp; tag[i])
            siz[++cnt2] = s[i];
    &amp;#125;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto res(cnt1 * qkp(n, cnt2) % mod);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(cnt2 + 1, std::vector&amp;lt;long long&amp;gt; (cnt2 + 1));
    f[0][0] = 1ll;
    for (int i = 1; i &amp;lt;= cnt2; ++i) &amp;#123;
        // printf(&amp;quot;i = %d, siz = %d: \n&amp;quot;, i, siz[i]);
        for (int j = 0; j &amp;lt;= i; ++j) &amp;#123;
            f[i][j] = f[i - 1][j];
            if (j != 0)
                (f[i][j] += f[i - 1][j - 1] * siz[i]) %= mod;
            // printf(&amp;quot;  f[%d][%d] = %lld\n&amp;quot;, i, j, f[i][j]);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= cnt2; ++i) &amp;#123;
        static auto fac(1ll);
        (res += f[cnt2][i] * fac % mod * qkp(n, cnt2 - i) % mod) %= mod;
        (fac *= i) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---diameter-cuts&#34;&gt;C - Diameter Cuts&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1499/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1499/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,i}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 上的最长链长为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的方案数，就可以用一个类似背包的过程求答案了。发现这个背包满足可以被优化的形式，故能在 &lt;span class=&#34;math inline&#34;&gt;\(O(nk)\)&lt;/span&gt; 内解决问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k, ++k;
    if (k == 0) &amp;#123;
        std::cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; h(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long long&amp;gt; (k + 1));
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        f[x][1] = 1ll, h[x] = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                std::vector&amp;lt;long long&amp;gt; g(k + 1);
                g.swap(f[x]);
                for (int j = std::min(h[x], k); j; --j)
                    for (int l = std::min(h[i], k - j); ~l; --l)
                        (f[x][std::max(j, l + 1)] += g[j] * f[i][l] % mod) %= mod;
                h[x] = std::max(h[x], h[i] + 1);
            &amp;#125;
        for (int i = 1; i &amp;lt;= h[x] &amp;amp;&amp;amp; i &amp;lt;= k; ++i)
            (f[x][0] += f[x][i]) %= mod;
        // for (int i = 0; i &amp;lt;= h[x] &amp;amp;&amp;amp; i &amp;lt;= k; ++i)
        //     printf(&amp;quot;f[%d][%d] = %lld\n&amp;quot;, x, i, f[x][i]);
        return;
    &amp;#125;;
    DFS(1, -1);
    auto res(0ll);
    for (int i = 1; i &amp;lt;= k; ++i)
        (res += f[1][i]) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---leaf-partition&#34;&gt;D - Leaf Partition&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1146/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1146/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设已经完成分组，欲判定这种方式是否合法，容易想到对每一组叶子建立虚树，则该分组方式合法，当且仅当没有一个点被多个虚树占用。也即，我们需要在总的虚树上选出一些点，让它们可以覆盖所有叶子。&lt;/p&gt;
&lt;p&gt;虚树上 DP，容易发现当且仅当存在 &lt;span class=&#34;math inline&#34;&gt;\(\ge 2\)&lt;/span&gt; 个儿子想要分进同一个虚树时，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 会被选到。故令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, 0/1/2}\)&lt;/span&gt; 表示当前有 &lt;span class=&#34;math inline&#34;&gt;\(0/1/\ge 2\)&lt;/span&gt; 个儿子想要选择 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时的方案数，DP 即可。&lt;/p&gt;
&lt;p&gt;在实现的过程中就会发现根本不需要求虚树，原树上 DP 就可以了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; fa(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 2; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; fa[i], g[fa[i]].push_back(i);
    std::vector&amp;lt;std::array&amp;lt;long long, 3&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        if (g[x].empty())
            f[x][2] = 1ll;
        else
            f[x][0] = 1ll;
        for (auto i : g[x]) &amp;#123;
            DFS(i);
            auto F0 = (f[i][0] + f[i][2]) % mod, F1 = (f[i][1] + f[i][2]) % mod;
            f[x][2] = (f[x][2] * F0 % mod + f[x][2] * F1 % mod + f[x][1] * F1 % mod) % mod;
            f[x][1] = (f[x][1] * F0 % mod + f[x][0] * F1 % mod) % mod;
            (f[x][0] *= F0) %= mod;
        &amp;#125;
        // printf(&amp;quot;%d: %lld / %lld / %lld\n&amp;quot;, x, f[x][0], f[x][1], f[x][2]);
        return;
    &amp;#125;;
    DFS(1);
    std::cout &amp;lt;&amp;lt; (f[1][0] + f[1][2]) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---uniformly-branched-trees&#34;&gt;E - Uniformly Branched Trees&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/724/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/724/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感觉是很常见的套路，但是我不会 😱&lt;/p&gt;
&lt;p&gt;在手玩样例的时候可以感性认知到，每个树会被每种点作为根的情况统计一次。且如果固定以某种（化学环境）的点为根，可以通过按 siz 从小到大排列唯一求解出该树。&lt;/p&gt;
&lt;p&gt;发现以重心为根（即钦定根为重心）可以带来很多优美的性质。因为 siz 是好确定的，且是儿子的排序依据，所以选重心便于统计，同时满足每种树最多被统计两次（当且仅当有两个重心）。&lt;/p&gt;
&lt;p&gt;发现这就变成了多重集的组合数，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k}\)&lt;/span&gt; 表示已经花费 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个点组成一个子树，子树的根节点当前已经确认了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个儿子，最靠右的一个 siz &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt; 的方案数。得到 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k}=\sum_{x=0} f_{i-x\cdot k,j-x,k-1}\cdot \binom{f_{k,d-1,k}+x-1}{x}\)&lt;/span&gt;（相当于将 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个无标号的位置 / 球分配给 &lt;span class=&#34;math inline&#34;&gt;\(f_{k,d-1,k}\)&lt;/span&gt; 个有标号的选项 / 盒子，插板即可）。&lt;/p&gt;
&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 为奇数，则可直接输出 &lt;span class=&#34;math inline&#34;&gt;\(f_{n,d,\lfloor\frac n2\rfloor}\)&lt;/span&gt;；若 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 为偶数，则可能存在两个重心，即需要统计拥有两个重心，且以两个重心分别为根时长相不同的树种类。这种情况下显然存在一条边，左右两边 siz 相同且长相不同。故数量为 &lt;span class=&#34;math inline&#34;&gt;\(\binom{f_{\lfloor \frac n2\rfloor, d-1,\lfloor \frac n2\rfloor}}{2}\)&lt;/span&gt;，容斥掉即可。&lt;/p&gt;
&lt;p&gt;需要特判 &lt;span class=&#34;math inline&#34;&gt;\(n\le2\)&lt;/span&gt; 的情况。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, d, mod;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; d &amp;gt;&amp;gt; mod;
    if (n &amp;lt;= 2) &amp;#123;
        std::cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    arr inv(d + 1);
    inv[0] = inv[1] = 1ll;
    auto fac = 1ll;
    for (int i = 2; i &amp;lt;= d; ++i) &amp;#123;
        (fac *= i) %= mod;
        inv[i] = qkp(fac, mod - 2);
    &amp;#125;
    auto C = [&amp;amp;](long long n, int m) &amp;#123;
        if (m == 0)
            return 1ll;
        if (m &amp;gt; n)
            return 0ll;
        auto res(1ll);
        for (auto i = 0; i &amp;lt; m; ++i)
            (res *= n - i) %= mod;
        return res * inv[m] % mod;
    &amp;#125;;
    crr f(n + 1, brr(d + 1, arr(n / 2 + 1)));
    f[1][0][0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 0; j &amp;lt;= d &amp;amp;&amp;amp; 1 + j &amp;lt;= i; ++j) &amp;#123;
            for (int x = 0; x &amp;lt;= j &amp;amp;&amp;amp; x &amp;lt;= i; ++x)
                f[i][j][1] += f[i - x][j - x][0];
            f[i][j][1] %= mod;
            for (int k = 2; k &amp;lt;= n / 2; ++k) &amp;#123;
                // bool flag = (i == 10 &amp;amp;&amp;amp; j == 3 &amp;amp;&amp;amp; k == 3);
                for (int x = 0; x &amp;lt;= j &amp;amp;&amp;amp; x * k &amp;lt;= i; ++x) &amp;#123;
                    f[i][j][k] += f[i - x * k][j - x][k - 1] * C(f[k][d - 1][k - 1] + x - 1, x);
                    // if (flag)
                    //     printf(&amp;quot;x = %d, f[%d][%d][%d](%lld) * C(%lld, %d)(%lld)\n&amp;quot;, x, i - x * k, j - x, k - 1, f[i - x * k][j - x][k - 1], f[k][d - 1][k - 1] + x - 1, x, C(f[k][d - 1][k - 1] + x - 1, x));
                &amp;#125;
                f[i][j][k] %= mod;
            &amp;#125;
        &amp;#125;
    // for (int i = 1; i &amp;lt;= n; ++i)
    //     for (int j = 0; j &amp;lt;= d &amp;amp;&amp;amp; j &amp;lt;= i - 1; ++j, puts(&amp;quot;&amp;quot;))
    //         for (int k = 0; k &amp;lt;= n / 2; ++k) &amp;#123;
    //             printf(&amp;quot;f[%d][%d][%d] = %lld\n&amp;quot;, i, j, k, f[i][j][k]);
    //         &amp;#125;
    if (n &amp;amp; 1)
        std::cout &amp;lt;&amp;lt; f[n][d][n / 2] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    else &amp;#123;
        auto res(f[n][d][n / 2]);
        res = (res + mod - C(f[n / 2][d - 1][n / 2 - 1], 2)) % mod;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---dominant-indices&#34;&gt;A - Dominant Indices&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1009/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1009/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;长剖板子；难点在于可能要复习一下长剖怎么写。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; h(n + 1), son(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        h[x] = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                h[x] = std::max(h[x], h[i] + 1);
                if (h[i] &amp;gt; h[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::vector&amp;lt;int&amp;gt; _f(2 * n + 1), res(n + 1);
    auto pos(_f.begin());
    std::vector&amp;lt;decltype(pos)&amp;gt; f(n + 1);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        ++f[x][0];
        if (!son[x]) &amp;#123;
            res[x] = 0;
            return;
        &amp;#125;
        f[son[x]] = std::next(f[x]);
        DFS(son[x], x);
        int mx = -std::max(std::make_pair(f[x][res[son[x]] + 1], -(res[son[x]] + 1)), std::make_pair(1, 0)).second;
        for (auto i : g[x])
            if (i != fa &amp;amp;&amp;amp; i != son[x]) &amp;#123;
                f[i] = pos, pos = std::next(pos, h[i] + 1);
                DFS(i, x);
                for (int j = 0; j &amp;lt;= h[i]; ++j) &amp;#123;
                    f[x][j + 1] += f[i][j];
                    if (j + 1 != mx &amp;amp;&amp;amp; std::make_pair(f[x][j + 1], -(j + 1)) &amp;gt; std::make_pair(f[x][mx], -mx))
                        mx = j + 1;
                &amp;#125;
            &amp;#125;
        // printf(&amp;quot;%d: &amp;quot;, x);
        // for (int i = 0; i &amp;lt;= h[x]; ++i)
        //     printf(&amp;quot;%d &amp;quot;, f[x][i]);
        // puts(&amp;quot;&amp;quot;);
        res[x] = mx;
        return;
    &amp;#125;;
    f[1] = pos, pos = std::next(pos, h[1]);
    DFS(1, -1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---树上异或&#34;&gt;B - 树上异或&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9745&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9745&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和 &lt;a href=&#34;#a---svjetlo&#34;&gt;Svjetlo&lt;/a&gt; 很像，把连通块的异或和放到状态里，拆位后令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,0/1}\)&lt;/span&gt; 表示点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 所在的连通块在第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 位异或和为 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt; 的权值（&lt;strong&gt;不计 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 所在连通块&lt;/strong&gt;），转移即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 2, x; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x;
        g[x].push_back(i), g[i].push_back(x);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; dp(n + 1);
    std::vector&amp;lt;std::array&amp;lt;std::array&amp;lt;long long, 2&amp;gt;, 60&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        for (int i = 0; i &amp;lt; 60; ++i)
            f[x][i][(a[x] &amp;gt;&amp;gt; i) &amp;amp; 1] = 1ll;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                for (int j = 0; j &amp;lt; 60; ++j) &amp;#123;
                    auto f1 = f[x][j];
                    f[x][j][0] = (f1[0] * dp[i] % mod + f1[0] * f[i][j][0] % mod + f1[1] * f[i][j][1] % mod) % mod;
                    f[x][j][1] = (f1[1] * dp[i] % mod + f1[0] * f[i][j][1] % mod + f1[1] * f[i][j][0] % mod) % mod;
                &amp;#125;
            &amp;#125;
        for (int i = 0; i &amp;lt; 60; ++i)
            dp[x] += (1ll &amp;lt;&amp;lt; i) % mod * f[x][i][1] % mod;
        dp[x] %= mod;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; dp[1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---一个网的路&#34;&gt;C - 一个网的路&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P8595&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P8595&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先需要意识到，树和链的边数是一样的，炸掉了多少条边，在之后就会花多少代价补回来。故炸一个点的代价为度数 +1。对于一个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，分为四种可能性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被炸了，单独作为一个连通块。&lt;/li&gt;
&lt;li&gt;没被炸，儿子全部被炸了。&lt;/li&gt;
&lt;li&gt;没被炸，有 1 个儿子没被炸。&lt;/li&gt;
&lt;li&gt;没被炸，有 2 个儿子没被炸。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分别用 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1/2/3}\)&lt;/span&gt; 代表上面四种可能性，转移即可。&lt;/p&gt;
&lt;p&gt;贺了个 fread，擦边跑过了。这个不是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的吗？&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int LEN = (1 &amp;lt;&amp;lt; 20);
#ifdef ONLINE_JUDGE
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar

#endif
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
int main() &amp;#123;
    int n, m;
    read(n), read(m);
    int res = (n - 1) - m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int x, y; m--; ) &amp;#123;
        read(x), read(y);
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tag(n + 1);
    std::vector&amp;lt;std::array&amp;lt;int, 4&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        tag[x] = 1;
        f[x][0] = (fa != -1) + 1;
        f[x][2] = f[x][3] = 0x3f3f3f3f;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                f[x][3] = std::min(f[x][3] + f[i][0], f[x][2] + std::min(f[i][1], f[i][2]));
                f[x][2] = std::min(f[x][2] + f[i][0], f[x][1] + std::min(f[i][1], f[i][2]));
                f[x][1] += f[i][0];
                f[x][0] += std::min(&amp;#123; f[i][0] - 1, f[i][1], f[i][2], f[i][3] &amp;#125;) + 1;
            &amp;#125;
        return;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (!tag[i]) &amp;#123;
            DFS(i, -1);
            res += *std::min_element(f[i].begin(), f[i].end());
        &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---随机树&#34;&gt;D - 随机树&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3830&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3830&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于第一问，令 &lt;span class=&#34;math inline&#34;&gt;\(f_x\)&lt;/span&gt; 表示共有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个叶子时的期望深度，两个新叶子的期望深度为 &lt;span class=&#34;math inline&#34;&gt;\(f_{x-1}+1\)&lt;/span&gt;，delta 为 &lt;span class=&#34;math inline&#34;&gt;\(f_{x-1}+2\)&lt;/span&gt;，故有 &lt;span class=&#34;math inline&#34;&gt;\(f_x=\dfrac {(x-1)f_{x-1}+f_{x-1}+2}x\)&lt;/span&gt;，递推即可。&lt;/p&gt;
&lt;p&gt;对于第二问，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,k}\)&lt;/span&gt; 表示有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个叶子，深度 &lt;span class=&#34;math inline&#34;&gt;\(\ge k\)&lt;/span&gt; 的概率（一种理解是从整数概率公式的角度出发）。则考虑枚举左、右叶子数，对于左侧叶子数为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的情况，&lt;strong&gt;为了去重，只选择深度为 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 的叶子展开&lt;/strong&gt;。只考虑某种组合的出现概率，为 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,k-1}+f_{x-i,k-1}-f_{i,k-1}\cdot f_{x-i,k-1}\)&lt;/span&gt;。数归可以证明，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，深度为 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 的叶子被选中的概率均为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac 1{x-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int q, n;
    std::cin &amp;gt;&amp;gt; q &amp;gt;&amp;gt; n;
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6);
    if (q == 1) &amp;#123;
        std::vector&amp;lt;double&amp;gt; f(n + 1);
        for (int i = 2; i &amp;lt;= n; ++i)
            f[i] = (f[i - 1] * (i - 1) + f[i - 1] + 2.) / i;
        std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    else &amp;#123;
        std::vector&amp;lt;std::vector&amp;lt;double&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;double&amp;gt; (n + 1));
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            f[i][0] = 1.;
            for (int j = 1; j &amp;lt; i; ++j) &amp;#123;
                auto s(0.);
                for (int k = 1; k &amp;lt; i; ++k)
                    s += f[k][j - 1] + f[i - k][j - 1] - f[k][j - 1] * f[i - k][j - 1];
                f[i][j] = s / (i - 1);
            &amp;#125;
        &amp;#125;
        auto res(0.);
        for (int i = 1; i &amp;lt; n; ++i)
            res += f[n][i];
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---complete-compress&#34;&gt;E - Complete Compress&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/agc034/tasks/agc034_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/agc034/tasks/agc034_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于链，发现可以枚举最后聚集的点，答案与配对方式无关，check 是否能配对即可。&lt;/p&gt;
&lt;p&gt;如果不是链，则相比链，还可以选择同一子树中不存在祖孙关系的两个点，将它们都向 LCA 移一步。&lt;/p&gt;
&lt;p&gt;故而，可以在链的做法上打一个补丁，观察到先『内部消化』，再在子树间配对一定不劣，且答案仍然和配对方式无关。故令 &lt;span class=&#34;math inline&#34;&gt;\(f_x\)&lt;/span&gt; 表示点 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 内最多消掉多少对，就可以 check 了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;line_02.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        a[i] = t - &amp;#39;0&amp;#39;;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    auto res(inf);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::vector&amp;lt;int&amp;gt; s(n + 1);
        std::vector&amp;lt;long long&amp;gt; f(n + 1), cnt(n + 1);
        std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
            s[x] = a[x];
            int son = 0;
            auto sum(0ll);
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    DFS(i, x), s[x] += s[i];
                    sum += cnt[i];
                    if (cnt[i] &amp;gt; cnt[son])
                        son = i;
                &amp;#125;
            if (son) &amp;#123;
                if (cnt[son] * 2 &amp;lt;= sum)
                    f[x] = sum / 2;
                else
                    f[x] = sum - cnt[son] + std::min(f[son], (cnt[son] - (sum - cnt[son])) / 2);
            &amp;#125;
            cnt[x] = sum;
            if (x != i)
                cnt[x] += s[x];
            return;
        &amp;#125;;
        DFS(i, -1);
        if (cnt[i] % 2 == 0 &amp;amp;&amp;amp; f[i] == cnt[i] / 2)
            res = std::min(res, cnt[i] / 2);
    &amp;#125;
    if (res == inf)
        std::cout &amp;lt;&amp;lt; -1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    else
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xsc062.netlify.app/20240131/</guid>
            <title>USACO2024JAN 三组连打</title>
            <link>https://xsc062.netlify.app/20240131/</link>
            <category>鸽巢原理</category>
            <category>调和级数</category>
            <category>差分</category>
            <category>思维</category>
            <category>树形 DP</category>
            <pubDate>Wed, 31 Jan 2024 10:30:29 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;假的，只连打了两组。Ag 没时间了。日后再补吧。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/65b7b152871b83018ac5e7b7.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;无意中存了题面，但代码大部分因为系统还原消失了，只有文字题解，将就着看吧。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;cu-a.-majority-opinion&#34;&gt;Cu A. Majority Opinion&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10131&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10131&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：任意区间内，若某元素出现个数严格大于区间长度一半，则可将整个区间推平为该值。问最终可以使整个序列被推平为哪些值。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;注意到当任意长度 &lt;span class=&#34;math inline&#34;&gt;\(\ge 2\)&lt;/span&gt; 的区间可以被推平为某种元素时，整个数列都可以被推平为该元素。故目标转化为对于某种元素判定是否存在一个可被其推平的区间。&lt;/p&gt;
&lt;p&gt;统计元素个数采用前缀和。令 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt; 在前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 项中出现的次数，假设有 &lt;span class=&#34;math inline&#34;&gt;\([j,i]\)&lt;/span&gt; 满足条件，贪心可知 &lt;span class=&#34;math inline&#34;&gt;\(h_i=h_j\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么由定义有 &lt;span class=&#34;math inline&#34;&gt;\(i-j+1&amp;lt;2\times (s_i-s_j+1)\)&lt;/span&gt;。典中典，直接移项分离变量。则有 &lt;span class=&#34;math inline&#34;&gt;\(i-2\times s_i-1&amp;lt;j-2\times s_j\)&lt;/span&gt;。令 &lt;span class=&#34;math inline&#34;&gt;\(t_p\gets p-2\times s_p\)&lt;/span&gt;，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 记录 &lt;span class=&#34;math inline&#34;&gt;\(t_j\)&lt;/span&gt; 最大值查看是否有 &lt;span class=&#34;math inline&#34;&gt;\(i,j\)&lt;/span&gt; 满足条件即可。&lt;/p&gt;
&lt;h3 id=&#34;cu-b.-cannonball&#34;&gt;Cu B. Cannonball&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10132&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10132&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：有 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个格子，从 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 格子开始以 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为初始能量向右跳，跳一步的距离为能量大小。格子分两种，一种经过加一定能量并反向，另一种若当前能量大于一定值则可永久摧毁，问跳出范围或无限长时间后可摧毁格子个数。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;不难发现若忽略增加能量为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的跳板则每经过一个跳板可跳距离增加 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，最多增加到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，否则会跳出去。&lt;/p&gt;
&lt;p&gt;注意到调和级数，故直接模拟跳的过程。唯一导致时间无限的情况是存在相邻的增加能量为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的跳板，但其实它具体是什么并不重要，反正我们跳的次数严格大于调和级数后就可以认为进入死循环，直接结束模拟即可。我这里嫌麻烦直接拿了 &lt;span class=&#34;math inline&#34;&gt;\(2\times 10^8\)&lt;/span&gt; 作阈值。&lt;/p&gt;
&lt;h3 id=&#34;cu-c.-balancing-bacteria&#34;&gt;Cu C. Balancing Bacteria&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10133&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10133&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：定义一次操作为选取一个整数 &lt;span class=&#34;math inline&#34;&gt;\(\Delta\le N\)&lt;/span&gt;，并从 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(a_i\gets a_i+\Delta\)&lt;/span&gt; 并令 &lt;span class=&#34;math inline&#34;&gt;\(\Delta\)&lt;/span&gt; 向 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 靠近 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\Delta=0\)&lt;/span&gt; 时停止。问令所有 &lt;span class=&#34;math inline&#34;&gt;\(a_i=0\)&lt;/span&gt; 所需最少操作次数。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;挺有意思的思维题，首先需要进行一个思维转化。&lt;span class=&#34;math inline&#34;&gt;\(\Delta\le N\)&lt;/span&gt; 是一个利于解题的限制，这意味着我们想让任何一个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 改变 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 而不影响到之前的值，从让 &lt;span class=&#34;math inline&#34;&gt;\(a_1\gets 0\)&lt;/span&gt; 入手，进行一次操作后每个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 分到的 &lt;span class=&#34;math inline&#34;&gt;\(\Delta\)&lt;/span&gt; 应依次加 1 或依次减 1。则差分数组为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 后跟着一截 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 是理想状态。中间每有一项不满足规律都会带来额外的操作次数。&lt;/p&gt;
&lt;p&gt;归纳为差分数组的差分数组绝对值之和即为答案。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;ag-a.-cowmpetency&#34;&gt;Ag A. Cowmpetency&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10134&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10134&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：有若干条限制，每条形如 &lt;span class=&#34;math inline&#34;&gt;\(\max\limits_{i=1}^{a_h-1}\{A_i\}=\max\limits_{i=1}^{a_j}\{A_i\}\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(A_{a_h}&amp;gt;\max\limits_{i=1}^{a_h-1}\{A_i\}\)&lt;/span&gt;，部分数已知，构造出符合条件且字典序最小的序列。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;是本场最难题吧，但也没啥卡的。画个线段图容易发现，若将 &lt;span class=&#34;math inline&#34;&gt;\([a,h)\)&lt;/span&gt; 视作一条线段，那么除非 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 相同，否则两条线段不能有交集。不然的话就无解。以及如果存在不满足条件的定值也显然无解。&lt;/p&gt;
&lt;p&gt;从前往后看每个 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 并尝试赋值，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(1\sim a\)&lt;/span&gt; 记录一个需要满足的最大值数值，按照此数值从后往前填空格。&lt;/p&gt;
&lt;p&gt;填完过后扫一遍看看是不是全部合法，可以证明若此时不合法则无解。&lt;/p&gt;
&lt;h3 id=&#34;ag-b.-potion-farming&#34;&gt;Ag B. Potion Farming&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10135&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10135&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：一棵树，每个点上有若干个物品，对于每条从根到叶子的简单路径，可以选择路径上的一个物品，每个物品只能被选一次，问最多可选物品数。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果一个点引导的子树下所有叶子有没有分配到的，就可以把这个点的物品分配给该叶子。&lt;/p&gt;
&lt;p&gt;跑一个树形 DP 即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
int n, x, y;
int cnt[maxn];
std::vector&amp;lt;int&amp;gt; g[maxn];
int a[maxn], f[maxn], p[maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
void DFS(int x, int fa) &amp;#123;
    if ((int)g[x].size() == 1)
        cnt[x] = 1;
    for (auto i : g[x]) &amp;#123;
        if (i == fa) continue;
        DFS(i, x);
        f[x] += f[i];
        cnt[x] += cnt[i];
    &amp;#125;
    if (f[x] &amp;lt; cnt[x])
        f[x] = min(f[x] + a[x], cnt[x]);
    return;
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i) read(p[i]);
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        add(x, y), add(y, x);
    &amp;#125;
    int tot = 0;
    for (int i = 2; i &amp;lt;= n; ++i)
        tot += ((int)g[i].size() == 1);
    for (int i = 1; i &amp;lt;= tot; ++i) ++a[p[i]];
    DFS(1, -1);
    print(f[1], &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h3 id=&#34;ag-c.-cowlendar&#34;&gt;Ag C. Cowlendar&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10136&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10136&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：对于给定的序列 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，找出所有满足 &lt;span class=&#34;math inline&#34;&gt;\(a_i\bmod L\)&lt;/span&gt; 的值的种类最多为 3 的 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;也是挺有意思的数学题了。若将 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 按照模 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 的情况分组，则对于任意一个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_i+L)\)&lt;/span&gt; 中最多包含两个分别来自其余两组的数。&lt;/p&gt;
&lt;p&gt;对于去重后 &lt;span class=&#34;math inline&#34;&gt;\(n&amp;gt;3\)&lt;/span&gt; 的情况，由鸽巢得必定有两个数可分为一组。故我们枚举可能的组间间隔，而可能的 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 就是这些间隔的因数。&lt;/p&gt;
&lt;p&gt;由上面我们推出一个合法组间间隔中最多间隔三个数，我们将所有 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+3}-a_i\)&lt;/span&gt;、&lt;span class=&#34;math inline&#34;&gt;\(a_{i+2}-a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}-a_i\)&lt;/span&gt; 纳入考虑范围即可。对于所有可能的 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;，直接 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 跑一个 &lt;code&gt;check&lt;/code&gt; 检查是否合法。&lt;/p&gt;
&lt;p&gt;因子个数照理来说是 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt{V}\times n\)&lt;/span&gt; 级别的，但是实测 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 最多只有一百多。估计是因为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 太大就很难构造出更多的合法解吧。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e4 + 5;
const int maxm = 3e4 + 5;
std::set&amp;lt;int&amp;gt; u;
int n, res, mn, tot;
int a[maxn], b[maxm];
bool check(int x) &amp;#123;
    int l1 = 0, l2 = 0, l3 = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (l1 == 0) l1 = a[i];
        else if (x &amp;amp;&amp;amp; (a[i] - l1) % x == 0) l1 = a[i];
        else if (l2 == 0) l2 = a[i];
        else if (x &amp;amp;&amp;amp; (a[i] - l2) % x == 0) l2 = a[i];
        else if (l3 == 0) l3 = a[i];
        else if (x &amp;amp;&amp;amp; (a[i] - l3) % x == 0) l3 = a[i];
        else return 0;
    &amp;#125;
    return 1;
&amp;#125;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]);
        if (!mn || a[i] / 4 &amp;lt; mn) mn = a[i] / 4;
    &amp;#125;
    std::sort(a + 1, a + n + 1);
    n = std::unique(a + 1, a + n + 1) - a - 1;
    if (check(0)) &amp;#123;
        print(mn * (mn + 1) / 2, &amp;#39;\n&amp;#39;);
        return 0;
    &amp;#125;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        b[++tot] = a[i] - a[i - 1];
        if (i &amp;gt;= 3) b[++tot] = a[i] - a[i - 2];
        if (i &amp;gt;= 4) b[++tot] = a[i] - a[i - 3];
    &amp;#125;
    std::sort(b + 1, b + tot + 1);
    tot = std::unique(b + 1, b + tot + 1) - b - 1;
    for (int i = 1; i &amp;lt;= tot; ++i) &amp;#123;
        if (check(b[i])) &amp;#123;
            for (int j = 1; j * j &amp;lt;= b[i]; ++j) &amp;#123;
                if (b[i] % j == 0)
                    u.insert(j), u.insert(b[i] / j);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    for (auto i : u) &amp;#123;
        if (i &amp;gt; mn) break;
        res += i;
    &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/deteails&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
