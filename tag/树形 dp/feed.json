{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"树形 dp\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20250824/",
            "url": "https://xsc062.netlify.app/20250824/",
            "title": "杂题",
            "date_published": "2025-08-24T07:37:55.000Z",
            "content_html": "<p>不会的东西越来越多了</p>\n<span id=\"more\"></span>\n<hr />\n<h2 id=\"b.-k-set-tree\">B. K-Set Tree</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/CF1691F\" class=\"uri\">https://www.luogu.com.cn/problem/CF1691F</a></p>\n<p>令 <span class=\"math inline\">\\(F_i\\)</span> 表示以 <span class=\"math inline\">\\(1\\)</span> 为根时，<span class=\"math inline\">\\(S\\)</span> 在 <span class=\"math inline\">\\(i\\)</span> 子树内的答案。则：</p>\n<p><span class=\"math display\">\\[\nF_u=\\left(C_{siz_u}^k-\\sum C_{siz_v}^k\\right)\\cdot siz_u+\\sum F_v\\\\\n\\]</span></p>\n<p>直接换根是很复杂的；把 <span class=\"math inline\">\\(\\sum C_{siz_v}^k\\)</span> 记作 <span class=\"math inline\">\\(dp_u\\)</span>，把 <span class=\"math inline\">\\(\\sum F_v\\)</span> 记作 <span class=\"math inline\">\\(f_u\\)</span>，那么：</p>\n<p><span class=\"math display\">\\[\nres=\\sum(C_n^k-dp_u)\\cdot n+f_u\\\\\n\\]</span></p>\n<p><strong>这样做是为了把两个和 <span class=\"math inline\">\\(v\\)</span> 有关的乘项拆开来换根</strong>，实际换根的时候就只用分别换 <span class=\"math inline\">\\(f,dp\\)</span> 两个值，不用考虑二次项等问题，计算量会少很多</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 1e9 + 7;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n, k;\n    std::cin &gt;&gt; n &gt;&gt; k;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    std::vector&lt;long long&gt; fac(n + 1), inv(n + 1);\n    fac[0] = inv[0] = 1ll;\n    for (int i = 1; i &lt;= n; ++i)\n        fac[i] = fac[i - 1] * i % mod;\n    auto qkp = [](long long x, int y) &#123;\n        auto res(1ll);\n        for (; y; (x *= x) %= mod, y &gt;&gt;= 1)\n            if (y &amp; 1)\n                (res *= x) %= mod;\n        return res;\n    &#125;;\n    inv[n] = qkp(fac[n], mod - 2);\n    for (int i = n - 1; i; --i)\n        inv[i] = inv[i + 1] * (i + 1) % mod;\n    auto C = [&amp;](int n, int m) &#123;\n        if (m &gt; n)\n            return 0ll;\n        return fac[n] * inv[m] % mod * inv[n - m] % mod;\n    &#125;;\n    auto res(0ll);\n    std::vector&lt;int&gt; siz(n + 1), ss(n + 1);\n    std::vector&lt;long long&gt; f(n + 1), dp(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        siz[x] = 1;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                (f[x] += (C(siz[i], k) - dp[i]) * siz[i] + f[i]) %= mod;\n                (dp[x] += C(siz[i], k)) %= mod;\n                siz[x] += siz[i];\n            &#125;\n        return;\n    &#125;;\n    DFS(1, -1);\n    DFS = [&amp;](int x, int fa) &#123;\n        (res += (C(n, k) - dp[x]) * n + f[x]) %= mod;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                (f[i] += (C(n - siz[i], k) - (dp[x] - C(siz[i], k))) * (n - siz[i]) + f[x] - f[i] - (C(siz[i], k) - dp[i]) * siz[i]) %= mod;\n                (dp[i] += C(n - siz[i], k)) %= mod;\n                DFS(i, x);\n            &#125;\n        return;\n    &#125;;\n    DFS(1, -1);\n    std::cout &lt;&lt; (res + mod) % mod &lt;&lt; &#39;\\n&#39;;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"c.-li-hua-and-path\">C. Li Hua and Path</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/CF1797F\" class=\"uri\">https://www.luogu.com.cn/problem/CF1797F</a></p>\n<p>考虑<strong>容斥</strong>，分别求解满足 1、满足 2、满足 12（注意要减两倍）就能计算答案</p>\n<p>发现题目所求点对形式很符合 Kruskal 重构树的要求，考虑以对应点权为边权，分别建立 min，max Kruskal 点权多叉重构树。</p>\n<details>\n<p><summary>点权多叉重构树？</summary></p>\n<p>在点权上做 Kruskal 重构树时，发现边的虚点是不必要的，可以直接将更优点作为父亲。</p>\n<p>写的时候有点难想清楚…… 可以画画图，仔细确定一下 Kruskal 重构树的具体性质</p>\n<p>这样做的优势是没有虚点，一些问题会方便一些；但同时放弃了二叉树的结构，一些题可能没那么好做。</p>\n<p>这道题只用经典 Kruskal 重构树也可以解决。</p>\n</details>\n<p>发现 1 2 均可以转化成两棵树在两棵树上的祖孙关系要求，可以轻松地分别统计满足 1、满足 2 的点对数量</p>\n<p>考虑怎么处理同时满足 12 的，发现要求在两棵树上二者应该都具有祖孙关系，且是相反的。<del>可以考虑在一棵树上 DFS 的同时用主席树存储祖先，在另一颗树上 ask</del></p>\n<p>考虑从更容易用 dfn 表示的子树问题思考，在 min 树上分配 dfn 后，在 max 树上用 DFS + 回溯得到每个点实时祖先序列，存在树状数组里；ask 该点被分配的 dfn 子树区间就能得到答案。</p>\n<p>考虑询问，由于每次加入的都是编号最大的点，对于满足 1、满足 2 的贡献是显然的，而同时满足 12 的点就是在 min 树上的祖先，都是好做的。</p>\n<p>实现的时候一定要把 min / max 树对应的性质思考清楚，不然会很麻烦</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; f1(n + 1), f2(n + 1);\n    std::iota(f1.begin() + 1, f1.end(), 1);\n    std::iota(f2.begin() + 1, f2.end(), 1);\n    std::function&lt;int(int)&gt; find1 = [&amp;](int x) &#123;\n        return x == f1[x] ? x : f1[x] = find1(f1[x]);\n    &#125;;\n    std::function&lt;int(int)&gt; find2 = [&amp;](int x) &#123;\n        return x == f2[x] ? x : f2[x] = find2(f2[x]);\n    &#125;;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g1(n + 1), g2(n + 1), adj1(n + 1), adj2(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        if (x &gt; y)\n            std::swap(x, y);\n        adj1[y].push_back(x);\n        adj2[x].push_back(y);\n    &#125;\n    for (int i = 1; i &lt;= n; ++i)\n        for (auto j : adj1[i]) &#123;\n            int fi = find1(i), fj = find1(j);\n            g1[fi].push_back(fj), f1[fj] = fi;\n        &#125;\n    for (int i = n; i; --i)\n        for (auto j : adj2[i]) &#123;\n            int fi = find2(i), fj = find2(j);\n            g2[fi].push_back(fj), f2[fj] = fi;\n        &#125;\n    std::vector&lt;int&gt; bit(n + 1), dfn(n + 1), rfn(n + 1);\n    auto lowbit = [](int x) &#123;\n        return x &amp; -x;\n    &#125;;\n    auto add = [&amp;](int x, int v) &#123;\n        for (; x &lt;= n; x += lowbit(x))\n            bit[x] += v;\n        return;\n    &#125;;\n    auto ask = [&amp;](int x) &#123;\n        int res = 0;\n        for (; x; x -= lowbit(x))\n            res += bit[x];\n        return res;\n    &#125;;\n    int rt1 = 0, rt2 = 0;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (f1[i] == i)\n            rt1 = i;\n        if (f2[i] == i)\n            rt2 = i;\n    &#125;\n    int q;\n    std::cin &gt;&gt; q;\n    std::vector&lt;int&gt; dep1(n + 1), dep2(n + q + 1);\n    long long res = 0ll;\n    std::function&lt;void(int)&gt; DFS = [&amp;](int x) &#123;\n        static int now = 0;\n        dfn[x] = ++now;\n        res += dep1[x];\n        for (auto i : g1[x]) &#123;\n            dep1[i] = dep1[x] + 1;\n            DFS(i);\n        &#125;\n        rfn[x] = now;\n        return;\n    &#125;;\n    DFS(rt1);\n    DFS = [&amp;](int x) &#123;\n        res += dep2[x];\n        res -= 2 * (ask(rfn[x]) - ask(dfn[x] - 1));\n        add(dfn[x], 1);\n        for (auto i : g2[x]) &#123;\n            dep2[i] = dep2[x] + 1;\n            DFS(i);\n        &#125;\n        add(dfn[x], -1);\n        return;\n    &#125;;\n    DFS(rt2);\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    for (int fa; q--; ) &#123;\n        std::cin &gt;&gt; fa;\n        dep2[++n] = dep2[fa] + 1;\n        res += (n - 1) - dep2[n];\n        std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    &#125;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"d.-团队选拔\">D. 团队选拔</h2>\n<p><a href=\"http://222.180.160.110:61235/contest/6534/problem/4\" class=\"uri\">http://222.180.160.110:61235/contest/6534/problem/4</a></p>\n<blockquote>\n<p>给定 <span class=\"math inline\">\\(a_{1\\sim n}\\)</span>，从中任选一些互不相交的区间，满足每个区间内元素的 gcd 相同。</p>\n<p><span class=\"math inline\">\\(n\\le 10^5,V\\le 10^7\\)</span>。</p>\n</blockquote>\n<p>注意到固定一个左端点后，移动右端点，gcd 每次至多减小到原来的一半；也就是说，其种类有 <span class=\"math inline\">\\(\\log V\\)</span> 种。故全序列的 gcd 总数是 <span class=\"math inline\">\\(O(n\\log V)\\)</span> 的。</p>\n<p>很容易想到与此原理类似的全局答案求法：对于每个 <span class=\"math inline\">\\(i\\)</span>，向左处理出每一段 <span class=\"math inline\">\\([l,r]\\)</span>，满足 <span class=\"math inline\">\\(\\gcd(a_{l\\cdots i})=\\gcd(a_r\\cdots i)\\)</span>，并记录该 <span class=\"math inline\">\\(\\gcd\\)</span>。这样求出来的 <span class=\"math inline\">\\((i,l,r)\\)</span> 共有 <span class=\"math inline\">\\(O(n\\log V)\\)</span> 段。</p>\n<p>对于每个 gcd 有 <span class=\"math inline\">\\(f_{i}=f_{i-1}+\\sum\\limits_{j=l_i}^{r_i} f_{j - 1}\\)</span>，可以做一个扫描线，得到全局答案；向前向后分别做到 <span class=\"math inline\">\\(i-1,i+1\\)</span>，相乘就能得到 <span class=\"math inline\">\\(i\\)</span> 未被选取时的答案</p>\n<p>考虑怎么完成『相乘』这个动作：最后的 <span class=\"math inline\">\\(f\\)</span> 在每个右端点处发生变化，可以转化成若干段 <span class=\"math inline\">\\(f\\)</span>；反过来的 <span class=\"math inline\">\\(f&#39;\\)</span> 亦可以这样转化。将 <span class=\"math inline\">\\(f\\)</span> 整体后移一位、<span class=\"math inline\">\\(f&#39;\\)</span> 整体前移一位，就可以对齐。二者的端点总数是均摊单 log 的，区间总数也就是均摊单 log 的（归并就能快速寻找到区间），用差分做一个区间加即可。</p>\n<p>用二分勉强单 log 解决了转移；还看到 <span class=\"citation\" data-cites=\"spdarkle\">@spdarkle</span> 疑似在 <span class=\"math inline\">\\(1\\sim n\\)</span> 上直接做的<a href=\"http://222.180.160.110:61235/submission/3108272\">做法</a>，和 <span class=\"citation\" data-cites=\"Rosmist\">@Rosmist</span> 疑似直接在每个 <span class=\"math inline\">\\(i\\)</span> 上做的<a href=\"http://222.180.160.110:61235/submission/3108581\">做法</a>。官解是个看不懂的做法</p>\n<p>呃，好像一不小心拿了最优解。而且优势很明显（怎么总用时比别人一个点还少？），这是为什么？</p>\n<p>可能因为大家都看不懂官解，做法比较多样？除了我之外比较快的 lwz 和 <span class=\"citation\" data-cites=\"GoldSpade\">@GoldSpade</span> 都用归并完成最后一步；我较他们的额外优势大概是用二分换掉了树状数组？迷惑</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n    std::freopen(&quot;selection.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;selection.out&quot;, &quot;w&quot;, stdout);\n#else\n    std::freopen(&quot;ex_selection2.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1);\n    std::vector&lt;std::vector&lt;int&gt; &gt; st(20, std::vector&lt;int&gt; (n + 1));\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i], st[0][i] = a[i];\n    for (int j = 1; (1 &lt;&lt; j) &lt;= n; ++j)\n        for (int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= n; ++i)\n            st[j][i] = std::__gcd(st[j - 1][i], st[j - 1][i + (1 &lt;&lt; (j - 1))]);\n    auto askgcd = [&amp;](int l, int r) &#123;\n        int k = std::__lg(r - l + 1);\n        return std::__gcd(st[k][l], st[k][r - (1 &lt;&lt; k) + 1]);\n    &#125;;\n    std::unordered_map&lt;int, int&gt; tab;\n    struct node &#123;\n        int i, l, r;\n        bool operator&lt; (const int q) const &#123;\n            return i &lt; q;\n        &#125;\n        bool operator&lt;= (const int q) const &#123;\n            return i &lt;= q;\n        &#125;\n    &#125;;\n    std::vector&lt;std::vector&lt;node&gt; &gt; p1, p2;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int to = i; to &gt;= 1; ) &#123;\n            int at = i, g = askgcd(to, i);\n            for (int l = 1, r = to, mid; l &lt;= r; ) &#123;\n                mid = (l + r) &gt;&gt; 1;\n                if (askgcd(mid, i) == g)\n                    at = mid, r = mid - 1;\n                else\n                    l = mid + 1;\n            &#125;\n            if (!tab.count(g)) &#123;\n                tab[g] = (int)p1.size();\n                p1.emplace_back(), p2.emplace_back();\n            &#125;\n            p1[tab[g]].push_back(&#123; i, at, to &#125;);\n            to = at - 1;\n        &#125;\n        for (int to = i; to &lt;= n; ) &#123;\n            int at = i, g = askgcd(i, to);\n            for (int l = to, r = n, mid; l &lt;= r; ) &#123;\n                mid = (l + r) &gt;&gt; 1;\n                if (askgcd(i, mid) == g)\n                    at = mid, l = mid + 1;\n                else\n                    r = mid - 1;\n            &#125;\n            if (!tab.count(g)) &#123;\n                tab[g] = (int)p2.size();\n                p1.emplace_back(), p2.emplace_back();\n            &#125;\n            p2[tab[g]].push_back(&#123; i, to, at &#125;);\n            to = at + 1;\n        &#125;\n    &#125;\n    auto s(0ll);\n    std::vector&lt;int&gt; x1(n + 1), x2(n + 2), pos(2 * n + 3);\n    std::vector&lt;long long&gt; f1(n + 1), f2(n + 2), s1(n + 1), s2(n + 2), diff(n + 1);\n    for (auto [g, id] : tab) &#123;\n        // printf(&quot;g = %d: \\n&quot;, g);\n        int n1 = (int)p1[id].size();\n        x1[0] = 0, f1[0] = s1[0] = 1ll;\n        for (int i = 1; i &lt;= n1; ++i) &#123;\n            auto [x, L, R] = p1[id][i - 1];\n            --L, --R;\n            x1[i] = x, f1[i] = f1[i - 1];\n            int l = std::upper_bound(x1.begin() + 1, x1.begin() + i + 1, L) - x1.begin() - 1,\n                r = std::upper_bound(x1.begin() + 1, x1.begin() + i + 1, R) - x1.begin() - 1;\n            if (l == r)\n                (f1[i] += f1[l] * (R - L + 1)) %= mod;\n            else &#123;\n                f1[i] += s1[r - 1] + mod - s1[l];\n                f1[i] += f1[r] * (R - x1[r] + 1);\n                f1[i] += f1[l] * (x1[l + 1] - L);\n                f1[i] %= mod;\n            &#125;\n            // printf(&quot;  r = %d, l = [%d, %d]: %lld\\n&quot;, x, L, R, f1[i]);\n            if (i != n1)\n                s1[i] = (s1[i - 1] + f1[i] * (p1[id][i].i - x)) % mod;\n        &#125;\n        (s += f1[n1] - 1) %= mod;\n        int n2 = (int)p2[id].size();\n        x2[n2 + 1] = n + 1, f2[n2 + 1] = s2[n2 + 1] = 1ll;\n        for (int i = n2; i; --i) &#123;\n            auto [x, L, R] = p2[id][i - 1];\n            ++L, ++R;\n            x2[i] = x, f2[i] = f2[i + 1];\n            int l = std::lower_bound(x2.begin() + i, x2.begin() + n2 + 1, L) - x2.begin(),\n                r = std::lower_bound(x2.begin() + i, x2.begin() + n2 + 1, R) - x2.begin();\n            if (l == r)\n                (f2[i] += f2[l] * (R - L + 1)) %= mod;\n            else&#123;\n                f2[i] += s2[l + 1] + mod - s2[r];\n                f2[i] += f2[r] * (R - x2[r - 1]);\n                f2[i] += f2[l] * (x2[l] - L + 1);\n                f2[i] %= mod;\n            &#125;\n            // printf(&quot;  l = %d, r = [%d, %d]: %lld\\n&quot;, x, L, R, f2[i]);\n            if (i != 1)\n                s2[i] = (s2[i + 1] + f2[i] * (x - p2[id][i - 2].i)) % mod;\n        &#125;\n        for (int i = 0; i &lt; n1; ++i)\n            x1[i] = x1[i + 1];\n        x1[n1] = n;\n        int t = (x2[1] == 1) + 1;\n        for (int i = 1; i &lt;= n2 + 1; ++i)\n            --x2[i];\n        std::merge(x1.begin(), x1.begin() + n1 + 1, x2.begin() + t, x2.begin() + n2 + 2, pos.begin() + 1);\n        int m = std::unique(pos.begin() + 1, pos.begin() + n1 + n2 + 4 - t) - pos.begin() - 1;\n        for (int i = 1, p1 = 0, p2 = t, la = 0; i &lt;= m; ++i) &#123;\n            for (; p1 + 1 &lt;= n1 &amp;&amp; x1[p1] &lt; pos[i]; ++p1);\n            for (; p2 + 1 &lt;= n2 + 1 &amp;&amp; x2[p2] &lt; pos[i]; ++p2);\n            (diff[la + 1] += f1[p1] * f2[p2] + mod - 1) %= mod;\n            // printf(&quot;  [%d, %d]: %lld, %lld\\n&quot;, la + 1, pos[i], f1[p1], f2[p2]);\n            if (pos[i] + 1 &lt;= n)\n                (diff[pos[i] + 1] += mod - f1[p1] * f2[p2] + 1) %= mod;\n            la = pos[i];\n        &#125;\n    &#125;\n    // std::cout &lt;&lt; s &lt;&lt; &#39;\\n&#39;;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        (diff[i] += diff[i - 1]) %= mod;\n        std::cout &lt;&lt; (s + mod - diff[i]) % mod &lt;&lt; &#39; &#39;;\n    &#125;\n    std::cout &lt;&lt; &#39;\\n&#39;;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<p>我一开始将 <span class=\"math inline\">\\(f\\)</span> 定义为单点答案而非前缀和，会导致需要线段树维护等差序列，还丢失了答案段数不多这个性质，非常麻烦。将 <span class=\"math inline\">\\(f\\)</span> 的意义替换为前缀和后，就可以很轻松地做了。</p>\n<hr />\n<h2 id=\"a.-宇宙\">A. 宇宙</h2>\n<p><a href=\"http://222.180.160.110:61235/contest/6535/problem/1\" class=\"uri\">http://222.180.160.110:61235/contest/6535/problem/1</a></p>\n<blockquote>\n<p>给定 <span class=\"math inline\">\\(a_{1\\sim n}\\)</span>，对于 <span class=\"math inline\">\\(k=1,2,\\cdots,n-1\\)</span>，回答：</p>\n<ul>\n<li>令 <span class=\"math inline\">\\(i\\)</span> 从 <span class=\"math inline\">\\(1\\)</span> 开始自增，对于每个 <span class=\"math inline\">\\(i\\)</span>，都可以选取 <span class=\"math inline\">\\(k\\)</span> 个互不相同的下标，并使它们对应的元素增加 1。此时，若存在元素不大于 <span class=\"math inline\">\\(i\\)</span>，停止。输出停止时 <span class=\"math inline\">\\(i\\)</span> 可能的最大值。</li>\n</ul>\n<p><span class=\"math inline\">\\(n\\le 10^6,V\\le 10^9\\)</span>。</p>\n</blockquote>\n<p>发现不大于这个 condition 有些反人类，先将 <span class=\"math inline\">\\(a\\)</span> 全部减 1，转化成小于来考虑</p>\n<p>考虑能坚持到 <span class=\"math inline\">\\(i\\)</span> 的一个必要条件，即 <span class=\"math inline\">\\(\\sum\\limits_{a_j&lt;i} i-a_j\\le k\\cdot i\\)</span></p>\n<p>容易发现该条件同时是充分的，同样从线段覆盖的角度出发，是一个 <span class=\"math inline\">\\(k\\)</span> 的扩展</p>\n<p>对 <span class=\"math inline\">\\(a\\)</span> 排序，停止时参与运算的 <span class=\"math inline\">\\(a_j\\)</span> 是越来越多的，故记录最后一个参与运算的下标，逐步挪动（当发现解出来的 <span class=\"math inline\">\\(i\\)</span> 比下一个更大时就需要挪动），同时解不等式即可。</p>\n<p><span class=\"citation\" data-cites=\"Quack\">@Quack</span> 云我在场上能想出官解对我来说是非常了不起的（其实场上写正解的人少得出奇），我也不得不承认我能做出来确实有一定运气成分，也能从中一窥我令人眼前一黑的数学素养！</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n    std::freopen(&quot;universe.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;universe.out&quot;, &quot;w&quot;, stdout);\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n    int n;\n    std::cin &gt;&gt; n, std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i], --a[i];\n    std::sort(a.begin() + 1, a.end());\n    int id = 1;\n    long long s = a[1];\n    for (int i = 1; i &lt; n; ++i) &#123;\n        if (id &lt; i + 1)\n            s += a[++id];\n        long long x = s / (id - i);\n        for (; id != n &amp;&amp; x &gt; a[id + 1]; s += a[++id], x = s / (id - i));\n        std::cout &lt;&lt; x &lt;&lt; &#39; &#39;;\n    &#125;\n    std::cout &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"b.-跳跃\">B. 跳跃</h2>\n<p><a href=\"http://222.180.160.110:61235/contest/6535/problem/2\" class=\"uri\">http://222.180.160.110:61235/contest/6535/problem/2</a></p>\n<blockquote>\n<p>给定长度为 <span class=\"math inline\">\\(n\\)</span> 的 01 序列和跳跃上限 <span class=\"math inline\">\\(k\\)</span>。给定 <span class=\"math inline\">\\(q\\)</span> 个询问，回答：</p>\n<ul>\n<li>从 <span class=\"math inline\">\\(a\\)</span> 跳到 <span class=\"math inline\">\\(b\\)</span>，保证 <span class=\"math inline\">\\(a,b\\)</span> 的颜色均为 1，每次不能跳超过 <span class=\"math inline\">\\(k\\)</span> 格或跳出去，在最小化踩到 0 数量的前提下，最小化跳跃次数，输出这两个值。</li>\n</ul>\n<p><span class=\"math inline\">\\(n,q\\le5\\times10^5\\)</span>。</p>\n</blockquote>\n<p>容易发现只能往一个方向跳，那么不妨令 <span class=\"math inline\">\\(a&lt;b\\)</span>。有一个贪心的想法是能往右就往右，手玩发现<strong>是对的</strong>（我场上手玩过后坚定地认为是错的；可能和没时间了兵荒马乱有关）。这样就很好想到第二问需要倍增；但把两个问结合起来考虑是有点困难的，赛时就意识到这两问的联系没有看起来那么大，甚至很可能是割裂的。</p>\n<p>单独考虑第一问，发现对于一段长度为 <span class=\"math inline\">\\(len\\)</span> 的 0，需要踩到恰好 <span class=\"math inline\">\\(\\left\\lfloor\\dfrac {len}k\\right\\rfloor\\)</span> 个 0。答案容易计算。</p>\n<p>单独考虑第二问，考虑一个第一问答案固定为 0 的情况，也即每个 len 都比 <span class=\"math inline\">\\(k\\)</span> 小。则问题转化成在不踩 0 的情况下最小的步数。容易用倍增解决。</p>\n<p>本题最令人印象深刻的点在于二者的结合，发现这 <span class=\"math inline\">\\(\\left\\lfloor\\dfrac {len}k\\right\\rfloor\\cdot k\\)</span> 个 0 是无论如何都会被经过的，所以可以在原始数组里删掉它们，转化成只考虑第二问的情况</p>\n<details>\n<p>？？？</p>\n<p>我对于自己莫名其妙跑得比别人块一大截这件事情已经快要见怪不怪了，这次又是什么原理，我预处理写得比较漂亮吗？？</p>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n    std::freopen(&quot;jump.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;jump.out&quot;, &quot;w&quot;, stdout);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n, k, q, op;\n    std::cin &gt;&gt; n, std::cin &gt;&gt; n &gt;&gt; q &gt;&gt; k &gt;&gt; op;\n    std::vector&lt;int&gt; tmp(n + 1), a(1), s(1), to(n + 2);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        char t;\n        std::cin &gt;&gt; t;\n        tmp[i] = t - &#39;0&#39;;\n    &#125;\n    tmp.push_back(1), ++n;\n    int cnt = 0;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (tmp[i] == 1) &#123;\n            a.push_back(1), to[i] = (int)a.size() - 1;\n            s.push_back(s.back() + cnt), cnt = 0;\n        &#125;\n        else &#123;\n            ++cnt;\n            if (i == n || tmp[i + 1] == 1) &#123;\n                for (int j = 1; j &lt;= cnt % k; ++j)\n                    a.push_back(0), s.push_back(s.back());\n                cnt /= k;\n            &#125;\n        &#125;\n    &#125;\n    n = (int)a.size() - 1;\n    std::vector&lt;std::vector&lt;int&gt; &gt; f(20, std::vector&lt;int&gt; (n + 1));\n    for (int i = 0; i &lt; 20; ++i)\n        f[i][n] = n;\n    for (int i = n - 1; i; --i) &#123;\n        f[0][i] = std::min(&#123; n, i + k, f[0][i + 1] &#125;);\n        for (; !a[f[0][i]]; --f[0][i]);\n        if (a[i] == 1) &#123;\n            for (int j = 1; j &lt; 20; ++j)\n                f[j][i] = f[j - 1][f[j - 1][i]];\n        &#125;\n    &#125;\n    for (int a, b; q--; ) &#123;\n        std::cin &gt;&gt; a &gt;&gt; b;\n        if (a &gt; b)\n            std::swap(a, b);\n        a = to[a], b = to[b];\n        std::cout &lt;&lt; s[b] - s[a];\n        if (op == 1) &#123;\n            int res = s[b] - s[a];\n            for (int i = 19; ~i; --i)\n                if (f[i][a] &lt; b)\n                    a = f[i][a], res += (1 &lt;&lt; i);\n            std::cout &lt;&lt; &#39; &#39; &lt;&lt; res + 1;\n        &#125;\n        std::cout &lt;&lt; &#39;\\n&#39;;\n    &#125;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"d.-jongmah\">D. Jongmah</h2>\n<p><a href=\"https://codeforces.com/contest/1110/problem/D\" class=\"uri\">https://codeforces.com/contest/1110/problem/D</a></p>\n<p>容易发现当连续出现三次 <span class=\"math inline\">\\((i-1,i,i+1)\\)</span> 时，可以被三次相同代替；</p>\n<p>容易发现需要使用 <span class=\"math inline\">\\(f_{i,a,b}\\)</span> 来代表 DP 到 <span class=\"math inline\">\\(i\\)</span> 时，用了 <span class=\"math inline\">\\(a\\)</span> 组 <span class=\"math inline\">\\((i-1,i,i+1)\\)</span> 和 <span class=\"math inline\">\\(b\\)</span> 组 <span class=\"math inline\">\\((i,i+1,i+2)\\)</span> 时的最大组数；</p>\n<p>但是并没有想到要将二者结合起来！感觉应该是能比较快做出来的水平。能察觉到不太认真。悔过！</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int inf = 0x3f3f3f3f;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m;\n    std::vector&lt;int&gt; cnt(m + 1);\n    for (int i = 1, x; i &lt;= n; ++i)\n        std::cin &gt;&gt; x, ++cnt[x];\n    std::vector&lt;std::vector&lt;std::vector&lt;int&gt; &gt; &gt; f(m + 1, std::vector&lt;std::vector&lt;int&gt; &gt; (3, std::vector&lt;int&gt; (3, -inf)));\n    f[0][0][0] = 0ll;\n    for (int i = 1; i &lt;= m; ++i)\n        for (int a = 0; a &lt;= 2; ++a) // i - 1, i, i + 1\n            for (int b = 0; b &lt;= 2; ++b) // i, i + 1, i + 2\n                for (int c = 0; c &lt;= 2; ++c) &#123; // i - 2, i - 1, i\n                    if (a + b + c &gt; cnt[i]) continue;\n                    f[i][a][b] = std::max(f[i][a][b], f[i - 1][c][a] + b + (cnt[i] - a - b - c) / 3);\n                &#125;\n    std::cout &lt;&lt; f[m][0][0] &lt;&lt; &#39;\\n&#39;;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"e.-magic-stones\">E. Magic Stones</h2>\n<p><a href=\"https://codeforces.com/contest/1110/problem/F\" class=\"uri\">https://codeforces.com/contest/1110/problem/F</a></p>\n<p>容易想到考察差分数组，发现这个操作就是交换了差分数组的相邻两个元素。故对于 <span class=\"math inline\">\\(c\\)</span> 和 <span class=\"math inline\">\\(t\\)</span> 的差分数组分别排序，然后 check 是否相等即可。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1), b(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i];\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; b[i];\n    if (a[1] != b[1] || a[n] != b[n]) &#123;\n        std::cout &lt;&lt; &quot;No&quot; &lt;&lt; &#39;\\n&#39;;\n        return 0;\n    &#125;\n    std::vector&lt;int&gt; da(n), db(n);\n    std::adjacent_difference(a.begin() + 1, a.end(), da.begin());\n    std::adjacent_difference(b.begin() + 1, b.end(), db.begin());\n    std::sort(da.begin(), da.end());\n    std::sort(db.begin(), db.end());\n    std::cout &lt;&lt; (da == db ? &quot;Yes&quot; : &quot;No&quot;) &lt;&lt; &#39;\\n&#39;;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n",
            "tags": [
                "倍增",
                "树形 DP",
                "Kruskal 重构树"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20250803/",
            "url": "https://xsc062.netlify.app/20250803/",
            "title": "树 DP",
            "date_published": "2025-08-03T03:44:54.000Z",
            "content_html": "<p>树上的 DP 以及 和树有关的 DP</p>\n<span id=\"more\"></span>\n<hr />\n<h2 id=\"a---svjetlo\">A - Svjetlo</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P7163\" class=\"uri\">https://www.luogu.com.cn/problem/P7163</a></p>\n<p>很容易想到一种状态设计，即令 <span class=\"math inline\">\\(f_{x,0/1/2}\\)</span> 分别表示有 <span class=\"math inline\">\\(0/1/2\\)</span> 个端点在子树内部的情况；然后就开始思考，如何满足对于开关状态的要求？</p>\n<p>还是想少了。如果再加一维，从『状态为开或关』思考就会轻松很多，令 <span class=\"math inline\">\\(f_{x,0/1/2,0/1}\\)</span> 表示有 <span class=\"math inline\">\\(0/1/2\\)</span> 个端点再子树外部，且子树内操作完后 <span class=\"math inline\">\\(x\\)</span> 为关 / 开的最少步数。然后分类讨论转移方式即可。</p>\n<p>一个比较方便的讨论方式是，先确定某种情况下，访问 <span class=\"math inline\">\\(u\\)</span> 与 <span class=\"math inline\">\\(v\\)</span> 的次数，然后就可以得到它们原本的状态。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, rt = -1;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        char t;\n        std::cin &gt;&gt; t;\n        a[i] = t - &#39;0&#39;;\n        if (!a[i])\n            rt = i;\n    &#125;\n    if (rt == -1) &#123;\n        std::cout &lt;&lt; 0 &lt;&lt; &#39;\\n&#39;;\n        return 0;\n    &#125;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    std::vector&lt;int&gt; tag(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        tag[x] = a[x];\n        for (auto i : g[x])\n            if (i != fa)\n                DFS(i, x), tag[x] &amp;= tag[i];\n        return;\n    &#125;;\n    DFS(rt, -1);\n    std::vector&lt;std::vector&lt;std::vector&lt;int&gt; &gt; &gt; f(n + 1, std::vector&lt;std::vector&lt;int&gt; &gt; (3, std::vector&lt;int&gt; (2, 0x3f3f3f3f)));\n    DFS = [&amp;](int x, int fa) &#123;\n        f[x][0][a[x]] = 0;\n        for (auto i : g[x])\n            if (i != fa &amp;&amp; !tag[i]) &#123;\n                DFS(i, x);\n                auto g = f[x];\n                f[x][0][0] = std::min(g[0][0] + f[i][0][1] + 4, g[0][1] + f[i][0][0] + 2);\n                f[x][0][1] = std::min(g[0][1] + f[i][0][1] + 4, g[0][0] + f[i][0][0] + 2);\n                f[x][1][0] = std::min(&#123; g[1][0] + f[i][0][1] + 4, g[1][1] + f[i][0][0] + 2, g[0][0] + f[i][1][0] + 3, g[0][1] + f[i][1][1] + 1 &#125;);\n                f[x][1][1] = std::min(&#123; g[1][1] + f[i][0][1] + 4, g[1][0] + f[i][0][0] + 2, g[0][1] + f[i][1][0] + 3, g[0][0] + f[i][1][1] + 1 &#125;);\n                f[x][2][0] = std::min(&#123; g[2][0] + f[i][0][1] + 4, g[2][1] + f[i][0][0] + 2, g[1][0] + f[i][1][1], g[1][1] + f[i][1][0] + 2, g[0][0] + f[i][2][1] + 4, g[0][1] + f[i][2][0] + 2 &#125;);\n                f[x][2][1] = std::min(&#123; g[2][1] + f[i][0][1] + 4, g[2][0] + f[i][0][0] + 2, g[1][1] + f[i][1][1], g[1][0] + f[i][1][0] + 2, g[0][1] + f[i][2][1] + 4, g[0][0] + f[i][2][0] + 2 &#125;);\n            &#125;\n        f[x][1][0] = std::min(f[x][1][0], f[x][0][1] + 1);\n        f[x][1][1] = std::min(f[x][1][1], f[x][0][0] + 1);\n        f[x][2][0] = std::min(f[x][2][0], f[x][1][0]);\n        f[x][2][1] = std::min(f[x][2][1], f[x][1][1]);\n        // for (int i = 0; i &lt; 3; ++i)\n        //     for (int j = 0; j &lt; 2; ++j)\n        //         printf(&quot;f[%d][%d][%d] = %d\\n&quot;, x, i, j, f[x][i][j]);\n        return;\n    &#125;;\n    DFS(rt, -1);\n    std::cout &lt;&lt; f[rt][2][1] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"b---one-to-one\">B - One to One</h2>\n<p><a href=\"https://atcoder.jp/contests/arc140/tasks/arc140_d\" class=\"uri\">https://atcoder.jp/contests/arc140/tasks/arc140_d</a></p>\n<p>观察原图上连通块，发现要么是没有未确定边的基环树，要么是有恰好一条未确定边的树。缩点，任意为未确定边赋值，考察最后得到的连通块，发现要么是以『基环树点』为根的树，要么是不包含『基环树点』的（内向）基环树。</p>\n<p>这里要用到贡献的思想。考虑将全局划分为若干个部分，保证每部分的单步价值是可确定的。将第一步，即对树和基环树的讨论拆开，对于树，其数量确定；对于基环树，发现环的数量即为基环树的数量，进一步将所有步中的『环』这一类分开，统计成环的方案数就可以得到基环树的贡献。具体地，令 <span class=\"math inline\">\\(f_{i,j}\\)</span> 为在前 <span class=\"math inline\">\\(i\\)</span> 个点中选择 <span class=\"math inline\">\\(j\\)</span> 个成一个环的方案数，则有：</p>\n<p><span class=\"math display\">\\[\nf_{i,j}=f_{i-1,j}+f_{i-1,j-1}\\times siz_i\n\\]</span></p>\n<p>最后计算每个环的贡献即可。注意还要算上环内部的排列（注意循环位移）。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1), tag(n + 1), s(n + 1, 1), fa(n + 1), siz(n + 1);\n    std::iota(fa.begin() + 1, fa.end(), 1);\n    std::function&lt;int(int)&gt; find = [&amp;](int x) &#123;\n        return x == fa[x] ? x : fa[x] = find(fa[x]);\n    &#125;;\n    auto merge = [&amp;](int x, int y) &#123;\n        x = find(x), y = find(y);\n        if (x != y) &#123;\n            tag[y] += tag[x];\n            s[y] += s[x];\n            fa[x] = y;\n        &#125;\n        return;\n    &#125;;\n    for (int i = 1; i &lt;= n; ++i)  &#123;\n        std::cin &gt;&gt; a[i], fa[i] = i;\n        if (a[i] == -1)\n            tag[i] = 1;\n        else\n            merge(i, a[i]);\n    &#125;\n    int cnt1 = 0, cnt2 = 0;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        cnt1 += (fa[i] == i &amp;&amp; !tag[i]);\n        if (fa[i] == i &amp;&amp; tag[i])\n            siz[++cnt2] = s[i];\n    &#125;\n    auto qkp = [&amp;](long long x, int y) &#123;\n        auto res(1ll);\n        for (; y; (x *= x) %= mod, y &gt;&gt;= 1)\n            if (y &amp; 1)\n                (res *= x) %= mod;\n        return res;\n    &#125;;\n    auto res(cnt1 * qkp(n, cnt2) % mod);\n    std::vector&lt;std::vector&lt;long long&gt; &gt; f(cnt2 + 1, std::vector&lt;long long&gt; (cnt2 + 1));\n    f[0][0] = 1ll;\n    for (int i = 1; i &lt;= cnt2; ++i) &#123;\n        // printf(&quot;i = %d, siz = %d: \\n&quot;, i, siz[i]);\n        for (int j = 0; j &lt;= i; ++j) &#123;\n            f[i][j] = f[i - 1][j];\n            if (j != 0)\n                (f[i][j] += f[i - 1][j - 1] * siz[i]) %= mod;\n            // printf(&quot;  f[%d][%d] = %lld\\n&quot;, i, j, f[i][j]);\n        &#125;\n    &#125;\n    for (int i = 1; i &lt;= cnt2; ++i) &#123;\n        static auto fac(1ll);\n        (res += f[cnt2][i] * fac % mod * qkp(n, cnt2 - i) % mod) %= mod;\n        (fac *= i) %= mod;\n    &#125;\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"c---diameter-cuts\">C - Diameter Cuts</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/1499/F\" class=\"uri\">https://codeforces.com/problemset/problem/1499/F</a></p>\n<p>令 <span class=\"math inline\">\\(f_{x,i}\\)</span> 表示 <span class=\"math inline\">\\(x\\)</span> 上的最长链长为 <span class=\"math inline\">\\(i\\)</span> 的方案数，就可以用一个类似背包的过程求答案了。发现这个背包满足可以被优化的形式，故能在 <span class=\"math inline\">\\(O(nk)\\)</span> 内解决问题。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, k;\n    std::cin &gt;&gt; n &gt;&gt; k, ++k;\n    if (k == 0) &#123;\n        std::cout &lt;&lt; 1 &lt;&lt; &#39;\\n&#39;;\n        return 0;\n    &#125;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    std::vector&lt;int&gt; h(n + 1);\n    std::vector&lt;std::vector&lt;long long&gt; &gt; f(n + 1, std::vector&lt;long long&gt; (k + 1));\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        f[x][1] = 1ll, h[x] = 1;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                std::vector&lt;long long&gt; g(k + 1);\n                g.swap(f[x]);\n                for (int j = std::min(h[x], k); j; --j)\n                    for (int l = std::min(h[i], k - j); ~l; --l)\n                        (f[x][std::max(j, l + 1)] += g[j] * f[i][l] % mod) %= mod;\n                h[x] = std::max(h[x], h[i] + 1);\n            &#125;\n        for (int i = 1; i &lt;= h[x] &amp;&amp; i &lt;= k; ++i)\n            (f[x][0] += f[x][i]) %= mod;\n        // for (int i = 0; i &lt;= h[x] &amp;&amp; i &lt;= k; ++i)\n        //     printf(&quot;f[%d][%d] = %lld\\n&quot;, x, i, f[x][i]);\n        return;\n    &#125;;\n    DFS(1, -1);\n    auto res(0ll);\n    for (int i = 1; i &lt;= k; ++i)\n        (res += f[1][i]) %= mod;\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"d---leaf-partition\">D - Leaf Partition</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/1146/F\" class=\"uri\">https://codeforces.com/problemset/problem/1146/F</a></p>\n<p>假设已经完成分组，欲判定这种方式是否合法，容易想到对每一组叶子建立虚树，则该分组方式合法，当且仅当没有一个点被多个虚树占用。也即，我们需要在总的虚树上选出一些点，让它们可以覆盖所有叶子。</p>\n<p>虚树上 DP，容易发现当且仅当存在 <span class=\"math inline\">\\(\\ge 2\\)</span> 个儿子想要分进同一个虚树时，<span class=\"math inline\">\\(i\\)</span> 会被选到。故令 <span class=\"math inline\">\\(f_{i, 0/1/2}\\)</span> 表示当前有 <span class=\"math inline\">\\(0/1/\\ge 2\\)</span> 个儿子想要选择 <span class=\"math inline\">\\(i\\)</span> 时的方案数，DP 即可。</p>\n<p>在实现的过程中就会发现根本不需要求虚树，原树上 DP 就可以了。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; fa(n + 1);\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 2; i &lt;= n; ++i)\n        std::cin &gt;&gt; fa[i], g[fa[i]].push_back(i);\n    std::vector&lt;std::array&lt;long long, 3&gt; &gt; f(n + 1);\n    std::function&lt;void(int)&gt; DFS = [&amp;](int x) &#123;\n        if (g[x].empty())\n            f[x][2] = 1ll;\n        else\n            f[x][0] = 1ll;\n        for (auto i : g[x]) &#123;\n            DFS(i);\n            auto F0 = (f[i][0] + f[i][2]) % mod, F1 = (f[i][1] + f[i][2]) % mod;\n            f[x][2] = (f[x][2] * F0 % mod + f[x][2] * F1 % mod + f[x][1] * F1 % mod) % mod;\n            f[x][1] = (f[x][1] * F0 % mod + f[x][0] * F1 % mod) % mod;\n            (f[x][0] *= F0) %= mod;\n        &#125;\n        // printf(&quot;%d: %lld / %lld / %lld\\n&quot;, x, f[x][0], f[x][1], f[x][2]);\n        return;\n    &#125;;\n    DFS(1);\n    std::cout &lt;&lt; (f[1][0] + f[1][2]) % mod &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"e---uniformly-branched-trees\">E - Uniformly Branched Trees</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/724/F\" class=\"uri\">https://codeforces.com/problemset/problem/724/F</a></p>\n<p>感觉是很常见的套路，但是我不会 😱</p>\n<p>在手玩样例的时候可以感性认知到，每个树会被每种点作为根的情况统计一次。且如果固定以某种（化学环境）的点为根，可以通过按 siz 从小到大排列唯一求解出该树。</p>\n<p>发现以重心为根（即钦定根为重心）可以带来很多优美的性质。因为 siz 是好确定的，且是儿子的排序依据，所以选重心便于统计，同时满足每种树最多被统计两次（当且仅当有两个重心）。</p>\n<p>发现这就变成了多重集的组合数，设 <span class=\"math inline\">\\(f_{i,j,k}\\)</span> 表示已经花费 <span class=\"math inline\">\\(i\\)</span> 个点组成一个子树，子树的根节点当前已经确认了 <span class=\"math inline\">\\(j\\)</span> 个儿子，最靠右的一个 siz <span class=\"math inline\">\\(\\le k\\)</span> 的方案数。得到 <span class=\"math inline\">\\(f_{i,j,k}=\\sum_{x=0} f_{i-x\\cdot k,j-x,k-1}\\cdot \\binom{f_{k,d-1,k}+x-1}{x}\\)</span>（相当于将 <span class=\"math inline\">\\(x\\)</span> 个无标号的位置 / 球分配给 <span class=\"math inline\">\\(f_{k,d-1,k}\\)</span> 个有标号的选项 / 盒子，插板即可）。</p>\n<p>若 <span class=\"math inline\">\\(n\\)</span> 为奇数，则可直接输出 <span class=\"math inline\">\\(f_{n,d,\\lfloor\\frac n2\\rfloor}\\)</span>；若 <span class=\"math inline\">\\(n\\)</span> 为偶数，则可能存在两个重心，即需要统计拥有两个重心，且以两个重心分别为根时长相不同的树种类。这种情况下显然存在一条边，左右两边 siz 相同且长相不同。故数量为 <span class=\"math inline\">\\(\\binom{f_{\\lfloor \\frac n2\\rfloor, d-1,\\lfloor \\frac n2\\rfloor}}{2}\\)</span>，容斥掉即可。</p>\n<p>需要特判 <span class=\"math inline\">\\(n\\le2\\)</span> 的情况。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, d, mod;\n    std::cin &gt;&gt; n &gt;&gt; d &gt;&gt; mod;\n    if (n &lt;= 2) &#123;\n        std::cout &lt;&lt; 1 &lt;&lt; &#39;\\n&#39;;\n        return 0;\n    &#125;\n    using arr = std::vector&lt;long long&gt;;\n    using brr = std::vector&lt;arr&gt;;\n    using crr = std::vector&lt;brr&gt;;\n    auto qkp = [&amp;](long long x, int y) &#123;\n        auto res(1ll);\n        for (; y; (x *= x) %= mod, y &gt;&gt;= 1)\n            if (y &amp; 1)\n                (res *= x) %= mod;\n        return res;\n    &#125;;\n    arr inv(d + 1);\n    inv[0] = inv[1] = 1ll;\n    auto fac = 1ll;\n    for (int i = 2; i &lt;= d; ++i) &#123;\n        (fac *= i) %= mod;\n        inv[i] = qkp(fac, mod - 2);\n    &#125;\n    auto C = [&amp;](long long n, int m) &#123;\n        if (m == 0)\n            return 1ll;\n        if (m &gt; n)\n            return 0ll;\n        auto res(1ll);\n        for (auto i = 0; i &lt; m; ++i)\n            (res *= n - i) %= mod;\n        return res * inv[m] % mod;\n    &#125;;\n    crr f(n + 1, brr(d + 1, arr(n / 2 + 1)));\n    f[1][0][0] = 1ll;\n    for (int i = 1; i &lt;= n; ++i)\n        for (int j = 0; j &lt;= d &amp;&amp; 1 + j &lt;= i; ++j) &#123;\n            for (int x = 0; x &lt;= j &amp;&amp; x &lt;= i; ++x)\n                f[i][j][1] += f[i - x][j - x][0];\n            f[i][j][1] %= mod;\n            for (int k = 2; k &lt;= n / 2; ++k) &#123;\n                // bool flag = (i == 10 &amp;&amp; j == 3 &amp;&amp; k == 3);\n                for (int x = 0; x &lt;= j &amp;&amp; x * k &lt;= i; ++x) &#123;\n                    f[i][j][k] += f[i - x * k][j - x][k - 1] * C(f[k][d - 1][k - 1] + x - 1, x);\n                    // if (flag)\n                    //     printf(&quot;x = %d, f[%d][%d][%d](%lld) * C(%lld, %d)(%lld)\\n&quot;, x, i - x * k, j - x, k - 1, f[i - x * k][j - x][k - 1], f[k][d - 1][k - 1] + x - 1, x, C(f[k][d - 1][k - 1] + x - 1, x));\n                &#125;\n                f[i][j][k] %= mod;\n            &#125;\n        &#125;\n    // for (int i = 1; i &lt;= n; ++i)\n    //     for (int j = 0; j &lt;= d &amp;&amp; j &lt;= i - 1; ++j, puts(&quot;&quot;))\n    //         for (int k = 0; k &lt;= n / 2; ++k) &#123;\n    //             printf(&quot;f[%d][%d][%d] = %lld\\n&quot;, i, j, k, f[i][j][k]);\n    //         &#125;\n    if (n &amp; 1)\n        std::cout &lt;&lt; f[n][d][n / 2] &lt;&lt; &#39;\\n&#39;;\n    else &#123;\n        auto res(f[n][d][n / 2]);\n        res = (res + mod - C(f[n / 2][d - 1][n / 2 - 1], 2)) % mod;\n        std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    &#125;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"a---dominant-indices\">A - Dominant Indices</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/1009/F\" class=\"uri\">https://codeforces.com/problemset/problem/1009/F</a></p>\n<p>长剖板子；难点在于可能要复习一下长剖怎么写。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    std::vector&lt;int&gt; h(n + 1), son(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        h[x] = 1;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                h[x] = std::max(h[x], h[i] + 1);\n                if (h[i] &gt; h[son[x]])\n                    son[x] = i;\n            &#125;\n        return;\n    &#125;;\n    DFS(1, -1);\n    std::vector&lt;int&gt; _f(2 * n + 1), res(n + 1);\n    auto pos(_f.begin());\n    std::vector&lt;decltype(pos)&gt; f(n + 1);\n    DFS = [&amp;](int x, int fa) &#123;\n        ++f[x][0];\n        if (!son[x]) &#123;\n            res[x] = 0;\n            return;\n        &#125;\n        f[son[x]] = std::next(f[x]);\n        DFS(son[x], x);\n        int mx = -std::max(std::make_pair(f[x][res[son[x]] + 1], -(res[son[x]] + 1)), std::make_pair(1, 0)).second;\n        for (auto i : g[x])\n            if (i != fa &amp;&amp; i != son[x]) &#123;\n                f[i] = pos, pos = std::next(pos, h[i] + 1);\n                DFS(i, x);\n                for (int j = 0; j &lt;= h[i]; ++j) &#123;\n                    f[x][j + 1] += f[i][j];\n                    if (j + 1 != mx &amp;&amp; std::make_pair(f[x][j + 1], -(j + 1)) &gt; std::make_pair(f[x][mx], -mx))\n                        mx = j + 1;\n                &#125;\n            &#125;\n        // printf(&quot;%d: &quot;, x);\n        // for (int i = 0; i &lt;= h[x]; ++i)\n        //     printf(&quot;%d &quot;, f[x][i]);\n        // puts(&quot;&quot;);\n        res[x] = mx;\n        return;\n    &#125;;\n    f[1] = pos, pos = std::next(pos, h[1]);\n    DFS(1, -1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cout &lt;&lt; res[i] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"b---树上异或\">B - 树上异或</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P9745\" class=\"uri\">https://www.luogu.com.cn/problem/P9745</a></p>\n<p>和 <a href=\"#a---svjetlo\">Svjetlo</a> 很像，把连通块的异或和放到状态里，拆位后令 <span class=\"math inline\">\\(f_{i,j,0/1}\\)</span> 表示点 <span class=\"math inline\">\\(i\\)</span> 所在的连通块在第 <span class=\"math inline\">\\(j\\)</span> 位异或和为 <span class=\"math inline\">\\(0/1\\)</span> 的权值（<strong>不计 <span class=\"math inline\">\\(i\\)</span> 所在连通块</strong>），转移即可。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;long long&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i];\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 2, x; i &lt;= n; ++i) &#123;\n        std::cin &gt;&gt; x;\n        g[x].push_back(i), g[i].push_back(x);\n    &#125;\n    std::vector&lt;long long&gt; dp(n + 1);\n    std::vector&lt;std::array&lt;std::array&lt;long long, 2&gt;, 60&gt; &gt; f(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        for (int i = 0; i &lt; 60; ++i)\n            f[x][i][(a[x] &gt;&gt; i) &amp; 1] = 1ll;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                for (int j = 0; j &lt; 60; ++j) &#123;\n                    auto f1 = f[x][j];\n                    f[x][j][0] = (f1[0] * dp[i] % mod + f1[0] * f[i][j][0] % mod + f1[1] * f[i][j][1] % mod) % mod;\n                    f[x][j][1] = (f1[1] * dp[i] % mod + f1[0] * f[i][j][1] % mod + f1[1] * f[i][j][0] % mod) % mod;\n                &#125;\n            &#125;\n        for (int i = 0; i &lt; 60; ++i)\n            dp[x] += (1ll &lt;&lt; i) % mod * f[x][i][1] % mod;\n        dp[x] %= mod;\n        return;\n    &#125;;\n    DFS(1, -1);\n    std::cout &lt;&lt; dp[1] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"c---一个网的路\">C - 一个网的路</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P8595\" class=\"uri\">https://www.luogu.com.cn/problem/P8595</a></p>\n<p>首先需要意识到，树和链的边数是一样的，炸掉了多少条边，在之后就会花多少代价补回来。故炸一个点的代价为度数 +1。对于一个点 <span class=\"math inline\">\\(u\\)</span>，分为四种可能性：</p>\n<ul>\n<li>被炸了，单独作为一个连通块。</li>\n<li>没被炸，儿子全部被炸了。</li>\n<li>没被炸，有 1 个儿子没被炸。</li>\n<li>没被炸，有 2 个儿子没被炸。</li>\n</ul>\n<p>分别用 <span class=\"math inline\">\\(f_{u,0/1/2/3}\\)</span> 代表上面四种可能性，转移即可。</p>\n<p>贺了个 fread，擦边跑过了。这个不是 <span class=\"math inline\">\\(O(n)\\)</span> 的吗？</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int LEN = (1 &lt;&lt; 20);\n#ifdef ONLINE_JUDGE\nint nec(void) &#123;\n    static char buf[LEN], *p = buf, *e = buf;\n    if (p == e) &#123;\n        e = buf + fread(buf, 1, LEN, stdin);\n        if (e == buf) return EOF;\n        p = buf;\n    &#125;\n    return *p++;\n&#125;\n#else\n#define nec getchar\n\n#endif\nbool read(int &amp;x) &#123;\n    x = 0;\n    bool f = 0;\n    char ch = nec();\n    while (ch &lt; &#39;0&#39; || ch &gt; &#39;9&#39;) &#123;\n        if (ch == EOF) return 0;\n        if (ch == &#39;-&#39;) f = 1;\n        ch = nec();\n    &#125;\n    while (ch &gt;= &#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;) &#123;\n        x = x * 10 + ch - &#39;0&#39;;\n        ch = nec();\n    &#125;\n    if (f) x = -x;\n    return 1;\n&#125;\nvoid print(int x) &#123;\n    if (x &lt; 0)\n        putchar(&#39;-&#39;), x = -x;\n    if (x &gt;= 10) print(x / 10);\n    putchar(x % 10 + &#39;0&#39;);\n    return;\n&#125;\nvoid print(int x, char ch) &#123;\n    print(x), putchar(ch);\n    return;\n&#125;\nint main() &#123;\n    int n, m;\n    read(n), read(m);\n    int res = (n - 1) - m;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int x, y; m--; ) &#123;\n        read(x), read(y);\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    std::vector&lt;int&gt; tag(n + 1);\n    std::vector&lt;std::array&lt;int, 4&gt; &gt; f(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        tag[x] = 1;\n        f[x][0] = (fa != -1) + 1;\n        f[x][2] = f[x][3] = 0x3f3f3f3f;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                f[x][3] = std::min(f[x][3] + f[i][0], f[x][2] + std::min(f[i][1], f[i][2]));\n                f[x][2] = std::min(f[x][2] + f[i][0], f[x][1] + std::min(f[i][1], f[i][2]));\n                f[x][1] += f[i][0];\n                f[x][0] += std::min(&#123; f[i][0] - 1, f[i][1], f[i][2], f[i][3] &#125;) + 1;\n            &#125;\n        return;\n    &#125;;\n    for (int i = 1; i &lt;= n; ++i)\n        if (!tag[i]) &#123;\n            DFS(i, -1);\n            res += *std::min_element(f[i].begin(), f[i].end());\n        &#125;\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"d---随机树\">D - 随机树</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P3830\" class=\"uri\">https://www.luogu.com.cn/problem/P3830</a></p>\n<p>对于第一问，令 <span class=\"math inline\">\\(f_x\\)</span> 表示共有 <span class=\"math inline\">\\(x\\)</span> 个叶子时的期望深度，两个新叶子的期望深度为 <span class=\"math inline\">\\(f_{x-1}+1\\)</span>，delta 为 <span class=\"math inline\">\\(f_{x-1}+2\\)</span>，故有 <span class=\"math inline\">\\(f_x=\\dfrac {(x-1)f_{x-1}+f_{x-1}+2}x\\)</span>，递推即可。</p>\n<p>对于第二问，令 <span class=\"math inline\">\\(f_{x,k}\\)</span> 表示有 <span class=\"math inline\">\\(x\\)</span> 个叶子，深度 <span class=\"math inline\">\\(\\ge k\\)</span> 的概率（一种理解是从整数概率公式的角度出发）。则考虑枚举左、右叶子数，对于左侧叶子数为 <span class=\"math inline\">\\(i\\)</span> 的情况，<strong>为了去重，只选择深度为 <span class=\"math inline\">\\(k-1\\)</span> 的叶子展开</strong>。只考虑某种组合的出现概率，为 <span class=\"math inline\">\\(f_{i,k-1}+f_{x-i,k-1}-f_{i,k-1}\\cdot f_{x-i,k-1}\\)</span>。数归可以证明，对于任意 <span class=\"math inline\">\\(i\\)</span>，深度为 <span class=\"math inline\">\\(k-1\\)</span> 的叶子被选中的概率均为 <span class=\"math inline\">\\(\\dfrac 1{x-1}\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int q, n;\n    std::cin &gt;&gt; q &gt;&gt; n;\n    std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(6);\n    if (q == 1) &#123;\n        std::vector&lt;double&gt; f(n + 1);\n        for (int i = 2; i &lt;= n; ++i)\n            f[i] = (f[i - 1] * (i - 1) + f[i - 1] + 2.) / i;\n        std::cout &lt;&lt; f[n] &lt;&lt; &#39;\\n&#39;;\n    &#125;\n    else &#123;\n        std::vector&lt;std::vector&lt;double&gt; &gt; f(n + 1, std::vector&lt;double&gt; (n + 1));\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            f[i][0] = 1.;\n            for (int j = 1; j &lt; i; ++j) &#123;\n                auto s(0.);\n                for (int k = 1; k &lt; i; ++k)\n                    s += f[k][j - 1] + f[i - k][j - 1] - f[k][j - 1] * f[i - k][j - 1];\n                f[i][j] = s / (i - 1);\n            &#125;\n        &#125;\n        auto res(0.);\n        for (int i = 1; i &lt; n; ++i)\n            res += f[n][i];\n        std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    &#125;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"e---complete-compress\">E - Complete Compress</h2>\n<p><a href=\"https://atcoder.jp/contests/agc034/tasks/agc034_e\" class=\"uri\">https://atcoder.jp/contests/agc034/tasks/agc034_e</a></p>\n<p>对于链，发现可以枚举最后聚集的点，答案与配对方式无关，check 是否能配对即可。</p>\n<p>如果不是链，则相比链，还可以选择同一子树中不存在祖孙关系的两个点，将它们都向 LCA 移一步。</p>\n<p>故而，可以在链的做法上打一个补丁，观察到先『内部消化』，再在子树间配对一定不劣，且答案仍然和配对方式无关。故令 <span class=\"math inline\">\\(f_x\\)</span> 表示点 <span class=\"math inline\">\\(x\\)</span> 内最多消掉多少对，就可以 check 了。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst long long inf = 1e18;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;line_02.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        char t;\n        std::cin &gt;&gt; t;\n        a[i] = t - &#39;0&#39;;\n    &#125;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    auto res(inf);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        std::vector&lt;int&gt; s(n + 1);\n        std::vector&lt;long long&gt; f(n + 1), cnt(n + 1);\n        std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n            s[x] = a[x];\n            int son = 0;\n            auto sum(0ll);\n            for (auto i : g[x])\n                if (i != fa) &#123;\n                    DFS(i, x), s[x] += s[i];\n                    sum += cnt[i];\n                    if (cnt[i] &gt; cnt[son])\n                        son = i;\n                &#125;\n            if (son) &#123;\n                if (cnt[son] * 2 &lt;= sum)\n                    f[x] = sum / 2;\n                else\n                    f[x] = sum - cnt[son] + std::min(f[son], (cnt[son] - (sum - cnt[son])) / 2);\n            &#125;\n            cnt[x] = sum;\n            if (x != i)\n                cnt[x] += s[x];\n            return;\n        &#125;;\n        DFS(i, -1);\n        if (cnt[i] % 2 == 0 &amp;&amp; f[i] == cnt[i] / 2)\n            res = std::min(res, cnt[i] / 2);\n    &#125;\n    if (res == inf)\n        std::cout &lt;&lt; -1 &lt;&lt; &#39;\\n&#39;;\n    else\n        std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n",
            "tags": [
                "DP",
                "树形 DP",
                "长链剖分"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20240131/",
            "url": "https://xsc062.netlify.app/20240131/",
            "title": "USACO2024JAN 三组连打",
            "date_published": "2024-01-31T02:30:29.000Z",
            "content_html": "<p>假的，只连打了两组。Ag 没时间了。日后再补吧。</p>\n<span id=\"more\"></span>\n<p><img src=\"https://pic.imgdb.cn/item/65b7b152871b83018ac5e7b7.gif\" /></p>\n<p>无意中存了题面，但代码大部分因为系统还原消失了，只有文字题解，将就着看吧。</p>\n<hr />\n<h3 id=\"cu-a.-majority-opinion\">Cu A. Majority Opinion</h3>\n<p><a href=\"https://www.luogu.com.cn/problem/P10131\" class=\"uri\">https://www.luogu.com.cn/problem/P10131</a></p>\n<p><em>省流：任意区间内，若某元素出现个数严格大于区间长度一半，则可将整个区间推平为该值。问最终可以使整个序列被推平为哪些值。</em></p>\n<p>注意到当任意长度 <span class=\"math inline\">\\(\\ge 2\\)</span> 的区间可以被推平为某种元素时，整个数列都可以被推平为该元素。故目标转化为对于某种元素判定是否存在一个可被其推平的区间。</p>\n<p>统计元素个数采用前缀和。令 <span class=\"math inline\">\\(s_i\\)</span> 表示 <span class=\"math inline\">\\(h_i\\)</span> 在前 <span class=\"math inline\">\\(i\\)</span> 项中出现的次数，假设有 <span class=\"math inline\">\\([j,i]\\)</span> 满足条件，贪心可知 <span class=\"math inline\">\\(h_i=h_j\\)</span>。</p>\n<p>那么由定义有 <span class=\"math inline\">\\(i-j+1&lt;2\\times (s_i-s_j+1)\\)</span>。典中典，直接移项分离变量。则有 <span class=\"math inline\">\\(i-2\\times s_i-1&lt;j-2\\times s_j\\)</span>。令 <span class=\"math inline\">\\(t_p\\gets p-2\\times s_p\\)</span>，对于每个 <span class=\"math inline\">\\(h\\)</span> 记录 <span class=\"math inline\">\\(t_j\\)</span> 最大值查看是否有 <span class=\"math inline\">\\(i,j\\)</span> 满足条件即可。</p>\n<h3 id=\"cu-b.-cannonball\">Cu B. Cannonball</h3>\n<p><a href=\"https://www.luogu.com.cn/problem/P10132\" class=\"uri\">https://www.luogu.com.cn/problem/P10132</a></p>\n<p><em>省流：有 <span class=\"math inline\">\\(N\\)</span> 个格子，从 <span class=\"math inline\">\\(s\\)</span> 格子开始以 <span class=\"math inline\">\\(1\\)</span> 为初始能量向右跳，跳一步的距离为能量大小。格子分两种，一种经过加一定能量并反向，另一种若当前能量大于一定值则可永久摧毁，问跳出范围或无限长时间后可摧毁格子个数。</em></p>\n<p>不难发现若忽略增加能量为 <span class=\"math inline\">\\(0\\)</span> 的跳板则每经过一个跳板可跳距离增加 <span class=\"math inline\">\\(1\\)</span>，最多增加到 <span class=\"math inline\">\\(n\\)</span>，否则会跳出去。</p>\n<p>注意到调和级数，故直接模拟跳的过程。唯一导致时间无限的情况是存在相邻的增加能量为 <span class=\"math inline\">\\(0\\)</span> 的跳板，但其实它具体是什么并不重要，反正我们跳的次数严格大于调和级数后就可以认为进入死循环，直接结束模拟即可。我这里嫌麻烦直接拿了 <span class=\"math inline\">\\(2\\times 10^8\\)</span> 作阈值。</p>\n<h3 id=\"cu-c.-balancing-bacteria\">Cu C. Balancing Bacteria</h3>\n<p><a href=\"https://www.luogu.com.cn/problem/P10133\" class=\"uri\">https://www.luogu.com.cn/problem/P10133</a></p>\n<p><em>省流：定义一次操作为选取一个整数 <span class=\"math inline\">\\(\\Delta\\le N\\)</span>，并从 <span class=\"math inline\">\\(N\\)</span> 到 <span class=\"math inline\">\\(1\\)</span>，令 <span class=\"math inline\">\\(a_i\\gets a_i+\\Delta\\)</span> 并令 <span class=\"math inline\">\\(\\Delta\\)</span> 向 <span class=\"math inline\">\\(0\\)</span> 靠近 <span class=\"math inline\">\\(1\\)</span>，<span class=\"math inline\">\\(\\Delta=0\\)</span> 时停止。问令所有 <span class=\"math inline\">\\(a_i=0\\)</span> 所需最少操作次数。</em></p>\n<p>挺有意思的思维题，首先需要进行一个思维转化。<span class=\"math inline\">\\(\\Delta\\le N\\)</span> 是一个利于解题的限制，这意味着我们想让任何一个 <span class=\"math inline\">\\(a_i\\)</span> 改变 <span class=\"math inline\">\\(1\\)</span> 而不影响到之前的值，从让 <span class=\"math inline\">\\(a_1\\gets 0\\)</span> 入手，进行一次操作后每个 <span class=\"math inline\">\\(a_i\\)</span> 分到的 <span class=\"math inline\">\\(\\Delta\\)</span> 应依次加 1 或依次减 1。则差分数组为 <span class=\"math inline\">\\(0\\)</span> 后跟着一截 <span class=\"math inline\">\\(1\\)</span> 是理想状态。中间每有一项不满足规律都会带来额外的操作次数。</p>\n<p>归纳为差分数组的差分数组绝对值之和即为答案。</p>\n<hr />\n<h3 id=\"ag-a.-cowmpetency\">Ag A. Cowmpetency</h3>\n<p><a href=\"https://www.luogu.com.cn/problem/P10134\" class=\"uri\">https://www.luogu.com.cn/problem/P10134</a></p>\n<p><em>省流：有若干条限制，每条形如 <span class=\"math inline\">\\(\\max\\limits_{i=1}^{a_h-1}\\{A_i\\}=\\max\\limits_{i=1}^{a_j}\\{A_i\\}\\)</span> 且 <span class=\"math inline\">\\(A_{a_h}&gt;\\max\\limits_{i=1}^{a_h-1}\\{A_i\\}\\)</span>，部分数已知，构造出符合条件且字典序最小的序列。</em></p>\n<p>是本场最难题吧，但也没啥卡的。画个线段图容易发现，若将 <span class=\"math inline\">\\([a,h)\\)</span> 视作一条线段，那么除非 <span class=\"math inline\">\\(h\\)</span> 相同，否则两条线段不能有交集。不然的话就无解。以及如果存在不满足条件的定值也显然无解。</p>\n<p>从前往后看每个 <span class=\"math inline\">\\(h\\)</span> 并尝试赋值，对于每个 <span class=\"math inline\">\\(1\\sim a\\)</span> 记录一个需要满足的最大值数值，按照此数值从后往前填空格。</p>\n<p>填完过后扫一遍看看是不是全部合法，可以证明若此时不合法则无解。</p>\n<h3 id=\"ag-b.-potion-farming\">Ag B. Potion Farming</h3>\n<p><a href=\"https://www.luogu.com.cn/problem/P10135\" class=\"uri\">https://www.luogu.com.cn/problem/P10135</a></p>\n<p><em>省流：一棵树，每个点上有若干个物品，对于每条从根到叶子的简单路径，可以选择路径上的一个物品，每个物品只能被选一次，问最多可选物品数。</em></p>\n<p>如果一个点引导的子树下所有叶子有没有分配到的，就可以把这个点的物品分配给该叶子。</p>\n<p>跑一个树形 DP 即可。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 1e5 + 5;\nint n, x, y;\nint cnt[maxn];\nstd::vector&lt;int&gt; g[maxn];\nint a[maxn], f[maxn], p[maxn];\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nvoid DFS(int x, int fa) &#123;\n    if ((int)g[x].size() == 1)\n        cnt[x] = 1;\n    for (auto i : g[x]) &#123;\n        if (i == fa) continue;\n        DFS(i, x);\n        f[x] += f[i];\n        cnt[x] += cnt[i];\n    &#125;\n    if (f[x] &lt; cnt[x])\n        f[x] = min(f[x] + a[x], cnt[x]);\n    return;\n&#125;\nvoid add(int x, int y) &#123;\n    g[x].push_back(y);\n    return;\n&#125;\nint main() &#123;\n    read(n);\n    for (int i = 1; i &lt;= n; ++i) read(p[i]);\n    for (int i = 1; i &lt; n; ++i) &#123;\n        read(x), read(y);\n        add(x, y), add(y, x);\n    &#125;\n    int tot = 0;\n    for (int i = 2; i &lt;= n; ++i)\n        tot += ((int)g[i].size() == 1);\n    for (int i = 1; i &lt;= tot; ++i) ++a[p[i]];\n    DFS(1, -1);\n    print(f[1], &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062</code></pre>\n</details>\n<h3 id=\"ag-c.-cowlendar\">Ag C. Cowlendar</h3>\n<p><a href=\"https://www.luogu.com.cn/problem/P10136\" class=\"uri\">https://www.luogu.com.cn/problem/P10136</a></p>\n<p><em>省流：对于给定的序列 <span class=\"math inline\">\\(a\\)</span>，找出所有满足 <span class=\"math inline\">\\(a_i\\bmod L\\)</span> 的值的种类最多为 3 的 <span class=\"math inline\">\\(L\\)</span>。</em></p>\n<p>也是挺有意思的数学题了。若将 <span class=\"math inline\">\\(a_i\\)</span> 按照模 <span class=\"math inline\">\\(L\\)</span> 的情况分组，则对于任意一个 <span class=\"math inline\">\\(a_i\\)</span>，在 <span class=\"math inline\">\\((a_i,a_i+L)\\)</span> 中最多包含两个分别来自其余两组的数。</p>\n<p>对于去重后 <span class=\"math inline\">\\(n&gt;3\\)</span> 的情况，由鸽巢得必定有两个数可分为一组。故我们枚举可能的组间间隔，而可能的 <span class=\"math inline\">\\(L\\)</span> 就是这些间隔的因数。</p>\n<p>由上面我们推出一个合法组间间隔中最多间隔三个数，我们将所有 <span class=\"math inline\">\\(a_{i+3}-a_i\\)</span>、<span class=\"math inline\">\\(a_{i+2}-a_i\\)</span> 和 <span class=\"math inline\">\\(a_{i+1}-a_i\\)</span> 纳入考虑范围即可。对于所有可能的 <span class=\"math inline\">\\(L\\)</span>，直接 <span class=\"math inline\">\\(O(n)\\)</span> 跑一个 <code>check</code> 检查是否合法。</p>\n<p>因子个数照理来说是 <span class=\"math inline\">\\(\\sqrt{V}\\times n\\)</span> 级别的，但是实测 <span class=\"math inline\">\\(n\\)</span> 最多只有一百多。估计是因为 <span class=\"math inline\">\\(n\\)</span> 太大就很难构造出更多的合法解吧。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 1e4 + 5;\nconst int maxm = 3e4 + 5;\nstd::set&lt;int&gt; u;\nint n, res, mn, tot;\nint a[maxn], b[maxm];\nbool check(int x) &#123;\n    int l1 = 0, l2 = 0, l3 = 0;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (l1 == 0) l1 = a[i];\n        else if (x &amp;&amp; (a[i] - l1) % x == 0) l1 = a[i];\n        else if (l2 == 0) l2 = a[i];\n        else if (x &amp;&amp; (a[i] - l2) % x == 0) l2 = a[i];\n        else if (l3 == 0) l3 = a[i];\n        else if (x &amp;&amp; (a[i] - l3) % x == 0) l3 = a[i];\n        else return 0;\n    &#125;\n    return 1;\n&#125;\nint main() &#123;\n    read(n);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        read(a[i]);\n        if (!mn || a[i] / 4 &lt; mn) mn = a[i] / 4;\n    &#125;\n    std::sort(a + 1, a + n + 1);\n    n = std::unique(a + 1, a + n + 1) - a - 1;\n    if (check(0)) &#123;\n        print(mn * (mn + 1) / 2, &#39;\\n&#39;);\n        return 0;\n    &#125;\n    for (int i = 2; i &lt;= n; ++i) &#123;\n        b[++tot] = a[i] - a[i - 1];\n        if (i &gt;= 3) b[++tot] = a[i] - a[i - 2];\n        if (i &gt;= 4) b[++tot] = a[i] - a[i - 3];\n    &#125;\n    std::sort(b + 1, b + tot + 1);\n    tot = std::unique(b + 1, b + tot + 1) - b - 1;\n    for (int i = 1; i &lt;= tot; ++i) &#123;\n        if (check(b[i])) &#123;\n            for (int j = 1; j * j &lt;= b[i]; ++j) &#123;\n                if (b[i] % j == 0)\n                    u.insert(j), u.insert(b[i] / j);\n            &#125;\n        &#125;\n    &#125;\n    for (auto i : u) &#123;\n        if (i &gt; mn) break;\n        res += i;\n    &#125;\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n<p></deteails></p>\n",
            "tags": [
                "鸽巢原理",
                "调和级数",
                "差分",
                "思维",
                "树形 DP"
            ]
        }
    ]
}