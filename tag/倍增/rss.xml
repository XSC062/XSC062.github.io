<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title> • Posts by &#34;倍增&#34; tag</title>
        <link>https://xsc062.netlify.app</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sun, 24 Aug 2025 15:37:55 +0800</pubDate>
        <lastBuildDate>Sun, 24 Aug 2025 15:37:55 +0800</lastBuildDate>
        <category>并查集</category>
        <category>斜率优化</category>
        <category>悬线法</category>
        <category>哈希</category>
        <category>字典树</category>
        <category>DP</category>
        <category>单调队列</category>
        <category>分治</category>
        <category>二分图</category>
        <category>CRT / exCRT</category>
        <category>排列组合</category>
        <category>网络流</category>
        <category>费用流</category>
        <category>二分</category>
        <category>上下界网络流</category>
        <category>容斥原理</category>
        <category>线段树</category>
        <category>树状数组</category>
        <category>区间 DP</category>
        <category>构造</category>
        <category>Tarjan</category>
        <category>数据结构</category>
        <category>下饭</category>
        <category>LCA</category>
        <category>倍增</category>
        <category>鸽巢原理</category>
        <category>概率期望</category>
        <category>调和级数</category>
        <category>差分</category>
        <category>思维</category>
        <category>树形 DP</category>
        <category>最小生成树</category>
        <category>SAM</category>
        <category>状压</category>
        <category>分块</category>
        <category>可持久化</category>
        <category>笛卡尔树</category>
        <category>高维前缀和</category>
        <category>闲话</category>
        <category>欧拉回路</category>
        <category>树链剖分</category>
        <category>长链剖分</category>
        <category>KMP</category>
        <category>border</category>
        <category>字符串</category>
        <category>AC 自动机</category>
        <category>SA</category>
        <category>数学</category>
        <category>树上差分</category>
        <category>FWT</category>
        <category>堆</category>
        <category>树的重心</category>
        <category>二项式定理</category>
        <category>二项式反演</category>
        <category>贪心</category>
        <category>均摊</category>
        <category>计数</category>
        <category>优化建图</category>
        <category>反悔贪心</category>
        <category>调整法</category>
        <category>背包</category>
        <category>博弈论</category>
        <category>DP 优化</category>
        <category>虚树</category>
        <category>点分治</category>
        <category>WQS 二分</category>
        <category>闵可夫斯基和</category>
        <category>slope trick</category>
        <category>四边形不等式</category>
        <category>暴力</category>
        <category>状压 DP</category>
        <category>组合数学</category>
        <category>支配对</category>
        <category>DDP</category>
        <category>平衡树</category>
        <category>容斥</category>
        <category>猫树</category>
        <category>Kruskal 重构树</category>
        <category>李超线段树</category>
        <item>
            <guid isPermalink="true">https://xsc062.netlify.app/20250824/</guid>
            <title>杂题</title>
            <link>https://xsc062.netlify.app/20250824/</link>
            <category>倍增</category>
            <category>树形 DP</category>
            <category>Kruskal 重构树</category>
            <pubDate>Sun, 24 Aug 2025 15:37:55 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;不会的东西越来越多了&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-k-set-tree&#34;&gt;B. K-Set Tree&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1691F&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1691F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(F_i\)&lt;/span&gt; 表示以 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为根时，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 子树内的答案。则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
F_u=\left(C_{siz_u}^k-\sum C_{siz_v}^k\right)\cdot siz_u+\sum F_v\\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;直接换根是很复杂的；把 &lt;span class=&#34;math inline&#34;&gt;\(\sum C_{siz_v}^k\)&lt;/span&gt; 记作 &lt;span class=&#34;math inline&#34;&gt;\(dp_u\)&lt;/span&gt;，把 &lt;span class=&#34;math inline&#34;&gt;\(\sum F_v\)&lt;/span&gt; 记作 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt;，那么：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
res=\sum(C_n^k-dp_u)\cdot n+f_u\\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样做是为了把两个和 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 有关的乘项拆开来换根&lt;/strong&gt;，实际换根的时候就只用分别换 &lt;span class=&#34;math inline&#34;&gt;\(f,dp\)&lt;/span&gt; 两个值，不用考虑二次项等问题，计算量会少很多&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        if (m &amp;gt; n)
            return 0ll;
        return fac[n] * inv[m] % mod * inv[n - m] % mod;
    &amp;#125;;
    auto res(0ll);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), ss(n + 1);
    std::vector&amp;lt;long long&amp;gt; f(n + 1), dp(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                (f[x] += (C(siz[i], k) - dp[i]) * siz[i] + f[i]) %= mod;
                (dp[x] += C(siz[i], k)) %= mod;
                siz[x] += siz[i];
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        (res += (C(n, k) - dp[x]) * n + f[x]) %= mod;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                (f[i] += (C(n - siz[i], k) - (dp[x] - C(siz[i], k))) * (n - siz[i]) + f[x] - f[i] - (C(siz[i], k) - dp[i]) * siz[i]) %= mod;
                (dp[i] += C(n - siz[i], k)) %= mod;
                DFS(i, x);
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; (res + mod) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c.-li-hua-and-path&#34;&gt;C. Li Hua and Path&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1797F&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1797F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑&lt;strong&gt;容斥&lt;/strong&gt;，分别求解满足 1、满足 2、满足 12（注意要减两倍）就能计算答案&lt;/p&gt;
&lt;p&gt;发现题目所求点对形式很符合 Kruskal 重构树的要求，考虑以对应点权为边权，分别建立 min，max Kruskal 点权多叉重构树。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;点权多叉重构树？&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;在点权上做 Kruskal 重构树时，发现边的虚点是不必要的，可以直接将更优点作为父亲。&lt;/p&gt;
&lt;p&gt;写的时候有点难想清楚…… 可以画画图，仔细确定一下 Kruskal 重构树的具体性质&lt;/p&gt;
&lt;p&gt;这样做的优势是没有虚点，一些问题会方便一些；但同时放弃了二叉树的结构，一些题可能没那么好做。&lt;/p&gt;
&lt;p&gt;这道题只用经典 Kruskal 重构树也可以解决。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;发现 1 2 均可以转化成两棵树在两棵树上的祖孙关系要求，可以轻松地分别统计满足 1、满足 2 的点对数量&lt;/p&gt;
&lt;p&gt;考虑怎么处理同时满足 12 的，发现要求在两棵树上二者应该都具有祖孙关系，且是相反的。&lt;del&gt;可以考虑在一棵树上 DFS 的同时用主席树存储祖先，在另一颗树上 ask&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;考虑从更容易用 dfn 表示的子树问题思考，在 min 树上分配 dfn 后，在 max 树上用 DFS + 回溯得到每个点实时祖先序列，存在树状数组里；ask 该点被分配的 dfn 子树区间就能得到答案。&lt;/p&gt;
&lt;p&gt;考虑询问，由于每次加入的都是编号最大的点，对于满足 1、满足 2 的贡献是显然的，而同时满足 12 的点就是在 min 树上的祖先，都是好做的。&lt;/p&gt;
&lt;p&gt;实现的时候一定要把 min / max 树对应的性质思考清楚，不然会很麻烦&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; f1(n + 1), f2(n + 1);
    std::iota(f1.begin() + 1, f1.end(), 1);
    std::iota(f2.begin() + 1, f2.end(), 1);
    std::function&amp;lt;int(int)&amp;gt; find1 = [&amp;amp;](int x) &amp;#123;
        return x == f1[x] ? x : f1[x] = find1(f1[x]);
    &amp;#125;;
    std::function&amp;lt;int(int)&amp;gt; find2 = [&amp;amp;](int x) &amp;#123;
        return x == f2[x] ? x : f2[x] = find2(f2[x]);
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1), g2(n + 1), adj1(n + 1), adj2(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        if (x &amp;gt; y)
            std::swap(x, y);
        adj1[y].push_back(x);
        adj2[x].push_back(y);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (auto j : adj1[i]) &amp;#123;
            int fi = find1(i), fj = find1(j);
            g1[fi].push_back(fj), f1[fj] = fi;
        &amp;#125;
    for (int i = n; i; --i)
        for (auto j : adj2[i]) &amp;#123;
            int fi = find2(i), fj = find2(j);
            g2[fi].push_back(fj), f2[fj] = fi;
        &amp;#125;
    std::vector&amp;lt;int&amp;gt; bit(n + 1), dfn(n + 1), rfn(n + 1);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] += v;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    int rt1 = 0, rt2 = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (f1[i] == i)
            rt1 = i;
        if (f2[i] == i)
            rt2 = i;
    &amp;#125;
    int q;
    std::cin &amp;gt;&amp;gt; q;
    std::vector&amp;lt;int&amp;gt; dep1(n + 1), dep2(n + q + 1);
    long long res = 0ll;
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now;
        res += dep1[x];
        for (auto i : g1[x]) &amp;#123;
            dep1[i] = dep1[x] + 1;
            DFS(i);
        &amp;#125;
        rfn[x] = now;
        return;
    &amp;#125;;
    DFS(rt1);
    DFS = [&amp;amp;](int x) &amp;#123;
        res += dep2[x];
        res -= 2 * (ask(rfn[x]) - ask(dfn[x] - 1));
        add(dfn[x], 1);
        for (auto i : g2[x]) &amp;#123;
            dep2[i] = dep2[x] + 1;
            DFS(i);
        &amp;#125;
        add(dfn[x], -1);
        return;
    &amp;#125;;
    DFS(rt2);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    for (int fa; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; fa;
        dep2[++n] = dep2[fa] + 1;
        res += (n - 1) - dep2[n];
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-团队选拔&#34;&gt;D. 团队选拔&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6534/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6534/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，从中任选一些互不相交的区间，满足每个区间内元素的 gcd 相同。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^5,V\le 10^7\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意到固定一个左端点后，移动右端点，gcd 每次至多减小到原来的一半；也就是说，其种类有 &lt;span class=&#34;math inline&#34;&gt;\(\log V\)&lt;/span&gt; 种。故全序列的 gcd 总数是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log V)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;很容易想到与此原理类似的全局答案求法：对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，向左处理出每一段 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(\gcd(a_{l\cdots i})=\gcd(a_r\cdots i)\)&lt;/span&gt;，并记录该 &lt;span class=&#34;math inline&#34;&gt;\(\gcd\)&lt;/span&gt;。这样求出来的 &lt;span class=&#34;math inline&#34;&gt;\((i,l,r)\)&lt;/span&gt; 共有 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log V)\)&lt;/span&gt; 段。&lt;/p&gt;
&lt;p&gt;对于每个 gcd 有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}=f_{i-1}+\sum\limits_{j=l_i}^{r_i} f_{j - 1}\)&lt;/span&gt;，可以做一个扫描线，得到全局答案；向前向后分别做到 &lt;span class=&#34;math inline&#34;&gt;\(i-1,i+1\)&lt;/span&gt;，相乘就能得到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 未被选取时的答案&lt;/p&gt;
&lt;p&gt;考虑怎么完成『相乘』这个动作：最后的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 在每个右端点处发生变化，可以转化成若干段 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;；反过来的 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;\)&lt;/span&gt; 亦可以这样转化。将 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 整体后移一位、&lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;\)&lt;/span&gt; 整体前移一位，就可以对齐。二者的端点总数是均摊单 log 的，区间总数也就是均摊单 log 的（归并就能快速寻找到区间），用差分做一个区间加即可。&lt;/p&gt;
&lt;p&gt;用二分勉强单 log 解决了转移；还看到 &lt;span class=&#34;citation&#34; data-cites=&#34;spdarkle&#34;&gt;@spdarkle&lt;/span&gt; 疑似在 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 上直接做的&lt;a href=&#34;http://222.180.160.110:61235/submission/3108272&#34;&gt;做法&lt;/a&gt;，和 &lt;span class=&#34;citation&#34; data-cites=&#34;Rosmist&#34;&gt;@Rosmist&lt;/span&gt; 疑似直接在每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 上做的&lt;a href=&#34;http://222.180.160.110:61235/submission/3108581&#34;&gt;做法&lt;/a&gt;。官解是个看不懂的做法&lt;/p&gt;
&lt;p&gt;呃，好像一不小心拿了最优解。而且优势很明显（怎么总用时比别人一个点还少？），这是为什么？&lt;/p&gt;
&lt;p&gt;可能因为大家都看不懂官解，做法比较多样？除了我之外比较快的 lwz 和 &lt;span class=&#34;citation&#34; data-cites=&#34;GoldSpade&#34;&gt;@GoldSpade&lt;/span&gt; 都用归并完成最后一步；我较他们的额外优势大概是用二分换掉了树状数组？迷惑&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;selection.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;selection.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;ex_selection2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; st(20, std::vector&amp;lt;int&amp;gt; (n + 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], st[0][i] = a[i];
    for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
        for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
            st[j][i] = std::__gcd(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
    auto askgcd = [&amp;amp;](int l, int r) &amp;#123;
        int k = std::__lg(r - l + 1);
        return std::__gcd(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
    &amp;#125;;
    std::unordered_map&amp;lt;int, int&amp;gt; tab;
    struct node &amp;#123;
        int i, l, r;
        bool operator&amp;lt; (const int q) const &amp;#123;
            return i &amp;lt; q;
        &amp;#125;
        bool operator&amp;lt;= (const int q) const &amp;#123;
            return i &amp;lt;= q;
        &amp;#125;
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;node&amp;gt; &amp;gt; p1, p2;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int to = i; to &amp;gt;= 1; ) &amp;#123;
            int at = i, g = askgcd(to, i);
            for (int l = 1, r = to, mid; l &amp;lt;= r; ) &amp;#123;
                mid = (l + r) &amp;gt;&amp;gt; 1;
                if (askgcd(mid, i) == g)
                    at = mid, r = mid - 1;
                else
                    l = mid + 1;
            &amp;#125;
            if (!tab.count(g)) &amp;#123;
                tab[g] = (int)p1.size();
                p1.emplace_back(), p2.emplace_back();
            &amp;#125;
            p1[tab[g]].push_back(&amp;#123; i, at, to &amp;#125;);
            to = at - 1;
        &amp;#125;
        for (int to = i; to &amp;lt;= n; ) &amp;#123;
            int at = i, g = askgcd(i, to);
            for (int l = to, r = n, mid; l &amp;lt;= r; ) &amp;#123;
                mid = (l + r) &amp;gt;&amp;gt; 1;
                if (askgcd(i, mid) == g)
                    at = mid, l = mid + 1;
                else
                    r = mid - 1;
            &amp;#125;
            if (!tab.count(g)) &amp;#123;
                tab[g] = (int)p2.size();
                p1.emplace_back(), p2.emplace_back();
            &amp;#125;
            p2[tab[g]].push_back(&amp;#123; i, to, at &amp;#125;);
            to = at + 1;
        &amp;#125;
    &amp;#125;
    auto s(0ll);
    std::vector&amp;lt;int&amp;gt; x1(n + 1), x2(n + 2), pos(2 * n + 3);
    std::vector&amp;lt;long long&amp;gt; f1(n + 1), f2(n + 2), s1(n + 1), s2(n + 2), diff(n + 1);
    for (auto [g, id] : tab) &amp;#123;
        // printf(&amp;quot;g = %d: \n&amp;quot;, g);
        int n1 = (int)p1[id].size();
        x1[0] = 0, f1[0] = s1[0] = 1ll;
        for (int i = 1; i &amp;lt;= n1; ++i) &amp;#123;
            auto [x, L, R] = p1[id][i - 1];
            --L, --R;
            x1[i] = x, f1[i] = f1[i - 1];
            int l = std::upper_bound(x1.begin() + 1, x1.begin() + i + 1, L) - x1.begin() - 1,
                r = std::upper_bound(x1.begin() + 1, x1.begin() + i + 1, R) - x1.begin() - 1;
            if (l == r)
                (f1[i] += f1[l] * (R - L + 1)) %= mod;
            else &amp;#123;
                f1[i] += s1[r - 1] + mod - s1[l];
                f1[i] += f1[r] * (R - x1[r] + 1);
                f1[i] += f1[l] * (x1[l + 1] - L);
                f1[i] %= mod;
            &amp;#125;
            // printf(&amp;quot;  r = %d, l = [%d, %d]: %lld\n&amp;quot;, x, L, R, f1[i]);
            if (i != n1)
                s1[i] = (s1[i - 1] + f1[i] * (p1[id][i].i - x)) % mod;
        &amp;#125;
        (s += f1[n1] - 1) %= mod;
        int n2 = (int)p2[id].size();
        x2[n2 + 1] = n + 1, f2[n2 + 1] = s2[n2 + 1] = 1ll;
        for (int i = n2; i; --i) &amp;#123;
            auto [x, L, R] = p2[id][i - 1];
            ++L, ++R;
            x2[i] = x, f2[i] = f2[i + 1];
            int l = std::lower_bound(x2.begin() + i, x2.begin() + n2 + 1, L) - x2.begin(),
                r = std::lower_bound(x2.begin() + i, x2.begin() + n2 + 1, R) - x2.begin();
            if (l == r)
                (f2[i] += f2[l] * (R - L + 1)) %= mod;
            else&amp;#123;
                f2[i] += s2[l + 1] + mod - s2[r];
                f2[i] += f2[r] * (R - x2[r - 1]);
                f2[i] += f2[l] * (x2[l] - L + 1);
                f2[i] %= mod;
            &amp;#125;
            // printf(&amp;quot;  l = %d, r = [%d, %d]: %lld\n&amp;quot;, x, L, R, f2[i]);
            if (i != 1)
                s2[i] = (s2[i + 1] + f2[i] * (x - p2[id][i - 2].i)) % mod;
        &amp;#125;
        for (int i = 0; i &amp;lt; n1; ++i)
            x1[i] = x1[i + 1];
        x1[n1] = n;
        int t = (x2[1] == 1) + 1;
        for (int i = 1; i &amp;lt;= n2 + 1; ++i)
            --x2[i];
        std::merge(x1.begin(), x1.begin() + n1 + 1, x2.begin() + t, x2.begin() + n2 + 2, pos.begin() + 1);
        int m = std::unique(pos.begin() + 1, pos.begin() + n1 + n2 + 4 - t) - pos.begin() - 1;
        for (int i = 1, p1 = 0, p2 = t, la = 0; i &amp;lt;= m; ++i) &amp;#123;
            for (; p1 + 1 &amp;lt;= n1 &amp;amp;&amp;amp; x1[p1] &amp;lt; pos[i]; ++p1);
            for (; p2 + 1 &amp;lt;= n2 + 1 &amp;amp;&amp;amp; x2[p2] &amp;lt; pos[i]; ++p2);
            (diff[la + 1] += f1[p1] * f2[p2] + mod - 1) %= mod;
            // printf(&amp;quot;  [%d, %d]: %lld, %lld\n&amp;quot;, la + 1, pos[i], f1[p1], f2[p2]);
            if (pos[i] + 1 &amp;lt;= n)
                (diff[pos[i] + 1] += mod - f1[p1] * f2[p2] + 1) %= mod;
            la = pos[i];
        &amp;#125;
    &amp;#125;
    // std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        (diff[i] += diff[i - 1]) %= mod;
        std::cout &amp;lt;&amp;lt; (s + mod - diff[i]) % mod &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;我一开始将 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 定义为单点答案而非前缀和，会导致需要线段树维护等差序列，还丢失了答案段数不多这个性质，非常麻烦。将 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的意义替换为前缀和后，就可以很轻松地做了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-宇宙&#34;&gt;A. 宇宙&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6535/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6535/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，对于 &lt;span class=&#34;math inline&#34;&gt;\(k=1,2,\cdots,n-1\)&lt;/span&gt;，回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 开始自增，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，都可以选取 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个互不相同的下标，并使它们对应的元素增加 1。此时，若存在元素不大于 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，停止。输出停止时 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 可能的最大值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6,V\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现不大于这个 condition 有些反人类，先将 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 全部减 1，转化成小于来考虑&lt;/p&gt;
&lt;p&gt;考虑能坚持到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的一个必要条件，即 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{a_j&amp;lt;i} i-a_j\le k\cdot i\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;容易发现该条件同时是充分的，同样从线段覆盖的角度出发，是一个 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的扩展&lt;/p&gt;
&lt;p&gt;对 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 排序，停止时参与运算的 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 是越来越多的，故记录最后一个参与运算的下标，逐步挪动（当发现解出来的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 比下一个更大时就需要挪动），同时解不等式即可。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;Quack&#34;&gt;@Quack&lt;/span&gt; 云我在场上能想出官解对我来说是非常了不起的（其实场上写正解的人少得出奇），我也不得不承认我能做出来确实有一定运气成分，也能从中一窥我令人眼前一黑的数学素养！&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
    std::freopen(&amp;quot;universe.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;universe.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    int n;
    std::cin &amp;gt;&amp;gt; n, std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], --a[i];
    std::sort(a.begin() + 1, a.end());
    int id = 1;
    long long s = a[1];
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        if (id &amp;lt; i + 1)
            s += a[++id];
        long long x = s / (id - i);
        for (; id != n &amp;amp;&amp;amp; x &amp;gt; a[id + 1]; s += a[++id], x = s / (id - i));
        std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-跳跃&#34;&gt;B. 跳跃&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6535/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6535/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的 01 序列和跳跃上限 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。给定 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 个询问，回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 跳到 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;，保证 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt; 的颜色均为 1，每次不能跳超过 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 格或跳出去，在最小化踩到 0 数量的前提下，最小化跳跃次数，输出这两个值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le5\times10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;容易发现只能往一个方向跳，那么不妨令 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;lt;b\)&lt;/span&gt;。有一个贪心的想法是能往右就往右，手玩发现&lt;strong&gt;是对的&lt;/strong&gt;（我场上手玩过后坚定地认为是错的；可能和没时间了兵荒马乱有关）。这样就很好想到第二问需要倍增；但把两个问结合起来考虑是有点困难的，赛时就意识到这两问的联系没有看起来那么大，甚至很可能是割裂的。&lt;/p&gt;
&lt;p&gt;单独考虑第一问，发现对于一段长度为 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 的 0，需要踩到恰好 &lt;span class=&#34;math inline&#34;&gt;\(\left\lfloor\dfrac {len}k\right\rfloor\)&lt;/span&gt; 个 0。答案容易计算。&lt;/p&gt;
&lt;p&gt;单独考虑第二问，考虑一个第一问答案固定为 0 的情况，也即每个 len 都比 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 小。则问题转化成在不踩 0 的情况下最小的步数。容易用倍增解决。&lt;/p&gt;
&lt;p&gt;本题最令人印象深刻的点在于二者的结合，发现这 &lt;span class=&#34;math inline&#34;&gt;\(\left\lfloor\dfrac {len}k\right\rfloor\cdot k\)&lt;/span&gt; 个 0 是无论如何都会被经过的，所以可以在原始数组里删掉它们，转化成只考虑第二问的情况&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;？？？&lt;/p&gt;
&lt;p&gt;我对于自己莫名其妙跑得比别人块一大截这件事情已经快要见怪不怪了，这次又是什么原理，我预处理写得比较漂亮吗？？&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;jump.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;jump.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, k, q, op;
    std::cin &amp;gt;&amp;gt; n, std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q &amp;gt;&amp;gt; k &amp;gt;&amp;gt; op;
    std::vector&amp;lt;int&amp;gt; tmp(n + 1), a(1), s(1), to(n + 2);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        tmp[i] = t - &amp;#39;0&amp;#39;;
    &amp;#125;
    tmp.push_back(1), ++n;
    int cnt = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (tmp[i] == 1) &amp;#123;
            a.push_back(1), to[i] = (int)a.size() - 1;
            s.push_back(s.back() + cnt), cnt = 0;
        &amp;#125;
        else &amp;#123;
            ++cnt;
            if (i == n || tmp[i + 1] == 1) &amp;#123;
                for (int j = 1; j &amp;lt;= cnt % k; ++j)
                    a.push_back(0), s.push_back(s.back());
                cnt /= k;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    n = (int)a.size() - 1;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(20, std::vector&amp;lt;int&amp;gt; (n + 1));
    for (int i = 0; i &amp;lt; 20; ++i)
        f[i][n] = n;
    for (int i = n - 1; i; --i) &amp;#123;
        f[0][i] = std::min(&amp;#123; n, i + k, f[0][i + 1] &amp;#125;);
        for (; !a[f[0][i]]; --f[0][i]);
        if (a[i] == 1) &amp;#123;
            for (int j = 1; j &amp;lt; 20; ++j)
                f[j][i] = f[j - 1][f[j - 1][i]];
        &amp;#125;
    &amp;#125;
    for (int a, b; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        if (a &amp;gt; b)
            std::swap(a, b);
        a = to[a], b = to[b];
        std::cout &amp;lt;&amp;lt; s[b] - s[a];
        if (op == 1) &amp;#123;
            int res = s[b] - s[a];
            for (int i = 19; ~i; --i)
                if (f[i][a] &amp;lt; b)
                    a = f[i][a], res += (1 &amp;lt;&amp;lt; i);
            std::cout &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; res + 1;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-jongmah&#34;&gt;D. Jongmah&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1110/problem/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/1110/problem/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易发现当连续出现三次 &lt;span class=&#34;math inline&#34;&gt;\((i-1,i,i+1)\)&lt;/span&gt; 时，可以被三次相同代替；&lt;/p&gt;
&lt;p&gt;容易发现需要使用 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,a,b}\)&lt;/span&gt; 来代表 DP 到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时，用了 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 组 &lt;span class=&#34;math inline&#34;&gt;\((i-1,i,i+1)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 组 &lt;span class=&#34;math inline&#34;&gt;\((i,i+1,i+2)\)&lt;/span&gt; 时的最大组数；&lt;/p&gt;
&lt;p&gt;但是并没有想到要将二者结合起来！感觉应该是能比较快做出来的水平。能察觉到不太认真。悔过！&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; cnt(m + 1);
    for (int i = 1, x; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; x, ++cnt[x];
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; (3, std::vector&amp;lt;int&amp;gt; (3, -inf)));
    f[0][0][0] = 0ll;
    for (int i = 1; i &amp;lt;= m; ++i)
        for (int a = 0; a &amp;lt;= 2; ++a) // i - 1, i, i + 1
            for (int b = 0; b &amp;lt;= 2; ++b) // i, i + 1, i + 2
                for (int c = 0; c &amp;lt;= 2; ++c) &amp;#123; // i - 2, i - 1, i
                    if (a + b + c &amp;gt; cnt[i]) continue;
                    f[i][a][b] = std::max(f[i][a][b], f[i - 1][c][a] + b + (cnt[i] - a - b - c) / 3);
                &amp;#125;
    std::cout &amp;lt;&amp;lt; f[m][0][0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e.-magic-stones&#34;&gt;E. Magic Stones&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1110/problem/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/1110/problem/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易想到考察差分数组，发现这个操作就是交换了差分数组的相邻两个元素。故对于 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的差分数组分别排序，然后 check 是否相等即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; b[i];
    if (a[1] != b[1] || a[n] != b[n]) &amp;#123;
        std::cout &amp;lt;&amp;lt; &amp;quot;No&amp;quot; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; da(n), db(n);
    std::adjacent_difference(a.begin() + 1, a.end(), da.begin());
    std::adjacent_difference(b.begin() + 1, b.end(), db.begin());
    std::sort(da.begin(), da.end());
    std::sort(db.begin(), db.end());
    std::cout &amp;lt;&amp;lt; (da == db ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xsc062.netlify.app/20240106/</guid>
            <title>杂题全谈</title>
            <link>https://xsc062.netlify.app/20240106/</link>
            <category>线段树</category>
            <category>树状数组</category>
            <category>LCA</category>
            <category>倍增</category>
            <category>鸽巢原理</category>
            <pubDate>Sat, 06 Jan 2024 11:27:39 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;想不到好标题了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;有句话怎么说来着，罗马不是一天建成的，是一天天建成的。&lt;/p&gt;
&lt;p&gt;还有什么，Do in Rome as the Romans’ do，还有一句，All roads leads to Rome。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-连续的零-zero&#34;&gt;A. 连续的零 zero&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做个前缀和，看看任意一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的区间中有几个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 5e5 + 5;
const int inf = 0x3f3f3f3f;
int n, m, res = inf;
int a[maxn], s[maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        scanf(&amp;quot;%1d&amp;quot;, &amp;amp;a[i]);
        s[i] = s[i - 1] + a[i];
        if (i &amp;gt;= m)
            res = min(res, s[i] - s[i - m]);
    &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-反回文串-anti&#34;&gt;B. 反回文串 anti&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 为奇时，中间的元素一定和自己相等，故无解。&lt;/p&gt;
&lt;p&gt;当数量最多的一个字符个数超过 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 时，由鸽巢得无解。&lt;/p&gt;
&lt;p&gt;剩下的情况一定有解。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;证明&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;可以找到一种合法的构造方式。我们列出一个列数为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;，行数为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 的表格，将所有相同字母排列在一起，按照从左到右，从上到下的方式将字母填入表格，最后将第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行第一列的字母填入 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行第二列的字母填入 &lt;span class=&#34;math inline&#34;&gt;\(a_{n-i+1}\)&lt;/span&gt;，即可完成构造。&lt;/p&gt;
&lt;p&gt;一种字母只在第一列或第二列出现当然合法，如果从第一列持续到第二列，因为任意字母出现次数不超过 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 次，所以同一行的两列不会出现同一种字母。&lt;/p&gt;
&lt;p&gt;这叫什么，有字证明。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;感觉可以拿去出一道类似于「找到字符串字典序最小的反回文串」之类的小水题&lt;/del&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;然后现在我们知道有解了，怎么找到最优解呢。&lt;/p&gt;
&lt;p&gt;比如有一组 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_{n-i+1})=(\texttt a, \texttt a)\)&lt;/span&gt;，还有一组 &lt;span class=&#34;math inline&#34;&gt;\((a_j, a_{n-j+1})=(\texttt b, \texttt b)\)&lt;/span&gt;，那我们直接把 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 交换，皆大欢喜。&lt;/p&gt;
&lt;p&gt;这就说明我们需要把值不相等的非法 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 配对。&lt;/p&gt;
&lt;p&gt;然后我们就可以沿用证明中的构造方式，分组配对，一定最优，每组代价为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;同一行两个值 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 相等，因为已经最优了，所以不能再在非法串中寻找答案。应该找合法对中某个值交换，每组代价为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;。具体和谁交换我们不用担心，只要找到一组 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_{n-i+1})\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\(a_i\ne v\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(a_{n-i+1}\ne v\)&lt;/span&gt; 就可以了，然后我们又知道 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的个数 &lt;span class=&#34;math inline&#34;&gt;\(\ne \dfrac n2\)&lt;/span&gt;，假设 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 对中每队都有至少一个 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;，由于当前这一对有两个相同的 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的个数就会大于 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt;，矛盾了，所以一定能找到。&lt;/p&gt;
&lt;p&gt;对于非法总对数是奇数的情况，我们要钦定一个非法对强制让其和合法对交换，贪心一下取非法对数量最多的 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的某一对最优。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxm = 35;
const int maxn = 2e5 + 5;
char s[maxn];
int cnt[maxm], p[maxn];
int T, n, tot, res, now;
int main() &amp;#123;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;T);
    while (T--) &amp;#123;
        tot = 0;
        scanf(&amp;quot;%d %s&amp;quot;, &amp;amp;n, s + 1);
        if (n &amp;amp; 1) &amp;#123;
            puts(&amp;quot;-1&amp;quot;);
            continue;
        &amp;#125;
        memset(cnt, 0, sizeof (cnt));
        for (int i = 1; i &amp;lt;= n; ++i)
            ++cnt[s[i] - &amp;#39;a&amp;#39; + 1];
        for (int i = 1; i &amp;lt;= 26; ++i) &amp;#123;
            if (cnt[i] * 2 &amp;gt; n) &amp;#123;
                puts(&amp;quot;-1&amp;quot;);
                goto noSol;
            &amp;#125;
        &amp;#125;
        memset(cnt, 0, sizeof (cnt));
        for (int i = 1; i * 2 &amp;lt;= n; ++i) &amp;#123;
            if (s[i] == s[n - i + 1])
                ++cnt[s[i] - &amp;#39;a&amp;#39; + 1], ++tot;
        &amp;#125;
        std::sort(cnt + 1, cnt + 27,
                    std::greater&amp;lt;int&amp;gt;());
        res = now = 0;
        if (tot &amp;amp; 1) &amp;#123;
            res = 1, --cnt[1];
            std::sort(cnt + 1, cnt + 27,
                        std::greater&amp;lt;int&amp;gt;());
        &amp;#125;
        for (int i = 1; i &amp;lt;= 26; ++i) &amp;#123;
            while (cnt[i]--) &amp;#123;
                if (++now &amp;gt; tot / 2) &amp;#123;
                    if (i == p[now - tot / 2])
                        res += 2;
                    else ++res;
                &amp;#125;
                else p[now] = i;
            &amp;#125;
        &amp;#125;
        print(res, &amp;#39;\n&amp;#39;);
        noSol: ;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-除与减-divsub&#34;&gt;C. 除与减 divsub&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;小数学，还好。&lt;/p&gt;
&lt;p&gt;假设 &lt;span class=&#34;math inline&#34;&gt;\(n=d\times k^p\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(k\nmid d\)&lt;/span&gt;，那么我们分两种情况讨论。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(p=0\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(k\nmid n\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(n\bmod k=1\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(k\mid (n-1)\)&lt;/span&gt;。&lt;/p&gt;
这个时候问 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的个数就相当于是在问 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 除 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 以外的因子个数。假设 &lt;span class=&#34;math inline&#34;&gt;\(n-1={x_1}^{p_1}{x_2}^{p_2}\cdots {x_m}^{p_m}\)&lt;/span&gt;，那么答案为 &lt;span class=&#34;math inline&#34;&gt;\((\prod p_i+1)-1\)&lt;/span&gt;，减去的是 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(p\ne 0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(k\mid n\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这个时候好像并没有什么好的转化。好消息是 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的范围是 &lt;span class=&#34;math inline&#34;&gt;\(10^{12}\)&lt;/span&gt;，根号枚举因数复杂度跑得过。所以我们就可以暴力判定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的所有因数是否满足条件。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;时间复杂度，&lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt n\times \log n)\)&lt;/span&gt;，枚举因数是根号，算次数（也就是算 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;）是 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
int n, m, res, cnt;
int main() &amp;#123;
    read(n), m = n;
    for (int i = 2; i * i &amp;lt;= n; ++i) &amp;#123;
        if (n % i == 0) &amp;#123;
            m = n;
            while (m % i == 0) m /= i;
            if (m % i == 1) ++res;
            if (i * i != n) &amp;#123;
                m = n;
                while (m % (n / i) == 0)
                    m /= (n / i);
                if (m % (n / i) == 1) ++res;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    m = n - 1, cnt = 1;
    for (int i = 2; i * i &amp;lt;= m; ++i) &amp;#123;
        if (m % i == 0) &amp;#123;
            int now = 0;
            while (m % i == 0)
                ++now, m /= i;
            cnt *= now + 1;
        &amp;#125;
    &amp;#125;
    if (m != 1) cnt *= 2;
    print(res + cnt, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-图书管理员-librarian&#34;&gt;D. 图书管理员 librarian&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[SDOI2008] 郁闷的小 J。&lt;/p&gt;
&lt;p&gt;关于这个，我们发现自己不会考场现冲主席树。哎，打 CDQ 又怕写挂。&lt;/p&gt;
&lt;p&gt;我们发现这道题的修改都是单点的，询问也只关于某一种颜色，不同的颜色之间没有影响。&lt;/p&gt;
&lt;p&gt;于是我们可以把操作离线下来，初始视作将某颜色在某位置增加，修改视作将某颜色在某位置删除，将另一颜色在该位置增加，将所有操作按颜色离散化分类然后 &lt;code&gt;vector&lt;/code&gt; 下来，对于所有颜色从前到后树状数组做一遍操作就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n+q\log n)\)&lt;/span&gt; 解决。&lt;/p&gt;
&lt;p&gt;树状数组清空是肯定不能 &lt;code&gt;memset&lt;/code&gt; 的，复杂度不对。那么怎么办呢？把所有操作撤回去就可以了。&lt;/p&gt;
&lt;p&gt;顺带一提我是洛谷上最优解。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e5 + 5;
struct __ &amp;#123;
    int ty, l, r, v;
    __() &amp;#123;&amp;#125;
    __(int t1, int l1, int r1, int v1 = 0) &amp;#123;
        if (t1 == 0)
            ty = 0, l = l1, v = r1;
        else ty = 1, l = l1, r = r1, v = v1;
    &amp;#125;
&amp;#125;;
char ty;
std::map&amp;lt;int, int&amp;gt; tab;
std::vector&amp;lt;__&amp;gt; q[maxn];
int n, m, tot, x, y, v, id;
int Bit[maxn], a[maxn], res[maxn];
int lowbit(int x) &amp;#123; return x &amp;amp; -x; &amp;#125;
void add(int x, int v) &amp;#123;
    for (; x &amp;lt;= n; x += lowbit(x))
        Bit[x] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0;
    for (; x; x -= lowbit(x)) res += Bit[x];
    return res;
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]);
        if (!tab.count(a[i]))
            tab[a[i]] = ++tot;
        a[i] = tab[a[i]];
        q[a[i]].emplace_back(0, i, 1);
    &amp;#125;
    while (m--) &amp;#123;
        scanf(&amp;quot;%1s&amp;quot;, &amp;amp;ty);
        if (ty == &amp;#39;C&amp;#39;) &amp;#123;
            read(x), read(y);
            if (!tab.count(y))
                tab[y] = ++tot;
            y = tab[y];
            q[a[x]].emplace_back(0, x, -1);
            q[a[x] = y].emplace_back(0, x, 1);
        &amp;#125;
        else &amp;#123;
            ++id;
            read(x), read(y), read(v);
            if (!tab.count(v)) continue;
            v = tab[v];
            q[v].emplace_back(1, x, y, id);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= tot; ++i) &amp;#123;
        for (auto &amp;amp;j : q[i]) &amp;#123;
            if (j.ty == 0) add(j.l, j.v);
            else &amp;#123;
                res[j.v] =
                    ask(j.r) - ask(j.l - 1);
            &amp;#125;
        &amp;#125;
        for (auto &amp;amp;j : q[i])
            if (j.ty == 0) add(j.l, -j.v);
    &amp;#125;
    for (int i = 1; i &amp;lt;= id; ++i)
        print(res[i], &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;E 会单独开一篇。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-树-tree&#34;&gt;F. 树 tree&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CF916E。&lt;/p&gt;
&lt;p&gt;大分讨给我整不会了，更给我整不会的是下来过后发现这只是个小分讨。&lt;/p&gt;
&lt;p&gt;更新子树和子树查询我们都会。换根 DP 我们也都写过，都知道换根并不会对子树结构产生大的影响。所以应当是能根据已知信息推测出子树在原树上对应的点集的。&lt;/p&gt;
&lt;p&gt;记 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为当前树根，&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为根时的 LCA，&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为根时的 LCA。&lt;/p&gt;
&lt;p&gt;那么对于 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y)\)&lt;/span&gt;，肯定是要讨论 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的位置关系的。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的子孙。此时 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y) = \text {LCA}(x,y)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的祖先。那么说明至少有一个点不是 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的子孙。此时 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)&amp;#39;\)&lt;/span&gt; 的值为 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为另一个点的 LCA。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整理可得 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y)\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt;、&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,r)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(y,r)\)&lt;/span&gt; 中的深度最大者。&lt;/p&gt;
&lt;p&gt;对于以 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为根时的子树 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=r\)&lt;/span&gt;，此时子树为整棵树。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,r)\ne x\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 不为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的子孙，此时子树就是以 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为根是的子树 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)=x\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的子孙，此时子树是整棵树除开 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 包含 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的儿子及其子孙。修改和查询的时候容斥一下就好。这个时候的子树倍增跳一下就能找到。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后就是常规线段树维护了。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxm = 35;
const int maxn = 1e5 + 5;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
struct _ &amp;#123; int l, r, u, d; &amp;#125;;
_ t[maxn &amp;lt;&amp;lt; 2];
int f[maxn][maxm];
std::vector&amp;lt;int&amp;gt; g[maxn];
int a[maxn], dfn[maxn], rfn[maxn];
int n, q, r, ty, x, y, v, si, now;
int top[maxn], dep[maxn], tab[maxn];
void swap(int &amp;amp;x, int &amp;amp;y) &amp;#123;
    x ^= y ^= x ^= y;
    return;
&amp;#125;
void DFS(int x) &amp;#123;
    dep[x] = dep[f[x][0]] + 1;
    dfn[x] = ++now, tab[now] = x;
    for (auto i : g[x]) &amp;#123;
        if (i == f[x][0]) continue;
        f[i][0] = x;
        for (int j = 1; j &amp;lt;= si; ++j)
            f[i][j] = f[f[i][j - 1]][j - 1];
        DFS(i);
    &amp;#125;
    rfn[x] = now;
    return;
&amp;#125;
void pushup(int p) &amp;#123;
    t[p].u = t[lt].u + t[rt].u;
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d += t[p].d;
        t[rt].d += t[p].d;
        t[lt].u += t[p].d *
                (t[lt].r - t[lt].l + 1);
        t[rt].u += t[p].d *
                (t[rt].r - t[rt].l + 1);
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u = a[tab[l]];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    t[p].u += v;
    if (t[p].l == t[p].r) return;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid) add(lt, x, v);
    else add(rt, x, v);
    return;
&amp;#125;
void add(int p, int l, int r, int v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d += v;
        t[p].u += (t[p].r - t[p].l + 1) * v;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid) add(lt, l, r, v);
    if (r &amp;gt; mid) add(rt, l, r, v);
    pushup(p);
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    pushdown(p);
    int res = 0,
        mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid) res = ask(lt, l, r);
    if (r &amp;gt; mid) res += ask(rt, l, r);
    return res;
&amp;#125;
int LCA(int x, int y) &amp;#123;
    if (dep[x] &amp;lt; dep[y]) swap(x, y);
    for (int i = si; ~i; --i) &amp;#123;
        if (dep[f[x][i]] &amp;gt;= dep[y])
            x = f[x][i];
    &amp;#125;
    if (x == y) return x;
    for (int i = si; ~i; --i) &amp;#123;
        if (f[x][i] != f[y][i])
            x = f[x][i], y = f[y][i];
    &amp;#125;
    return f[x][0];
&amp;#125;
void Add(int x, int v) &amp;#123;
    int rlca = LCA(r, x);
    if (x == r) add(1, 1, n, v);
    else if (rlca != x)
        add(1, dfn[x], rfn[x], v);
    else &amp;#123;
        add(1, 1, n, v);
        int p = r;
        for (int i = si; ~i; --i) &amp;#123;
            if (dep[f[p][i]] &amp;gt;= dep[x] + 1)
                p = f[p][i];
        &amp;#125;
        add(1, dfn[p], rfn[p], -v);
    &amp;#125;
    return;
&amp;#125;
void tAdd(int x, int y, int v) &amp;#123;
    int llca = LCA(r, x), rlca = LCA(r, y),
        ulca = LCA(x, y);
    if (dep[llca] &amp;gt;= dep[rlca] &amp;amp;&amp;amp;
        dep[llca] &amp;gt;= dep[ulca]) Add(llca, v);
    else if (dep[rlca] &amp;gt;= dep[llca] &amp;amp;&amp;amp;
        dep[rlca] &amp;gt;= dep[ulca]) Add(rlca, v);
    else Add(ulca, v);
    return;
&amp;#125;
int tAsk(int x) &amp;#123;
    int rlca = LCA(r, x);
    if (x == r) return t[1].u;
    if (rlca != x)
        return ask(1, dfn[x], rfn[x]);
    int p = r;
    for (int i = si; ~i; --i) &amp;#123;
        if (dep[f[p][i]] &amp;gt;= dep[x] + 1)
            p = f[p][i];
    &amp;#125;
    return t[1].u - ask(1, dfn[p], rfn[p]);
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(q), r = 1;
    si = log(n) / log(2.0);
    for (int i = 1; i &amp;lt;= n; ++i) read(a[i]);
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        add(x, y), add(y, x);
    &amp;#125;
    dep[0] = 1, DFS(1), dep[0] = 0;
    bld(1, 1, n);
    while (q--) &amp;#123;
        read(ty);
        if (ty == 1) read(r);
        else if (ty == 2) &amp;#123;
            read(x), read(y), read(v);
            tAdd(x, y, v);
        &amp;#125;
        else &amp;#123;
            read(x);
            print(tAsk(x), &amp;#39;\n&amp;#39;);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
 ]]></description>
        </item>
    </channel>
</rss>
