{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"kruskal 重构树\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20250826/",
            "url": "https://xsc062.netlify.app/20250826/",
            "title": "学习笔记 Kruskal 重构树",
            "date_published": "2025-08-26T07:21:09.000Z",
            "content_html": "<p>有很多优秀性质的东西，应用场景比较明显</p>\n<span id=\"more\"></span>\n<hr />\n<p>把 Kruskal 过程中，一次合并连通块的操作看作，建立一个边的虚点，把这个虚点和两侧连通块的根连起来，并成为新连通块的根</p>\n<p>这样就可以把图变成一个二叉树，并且点权从浅到深是单增的，也就是<strong>大根堆</strong>，而且有且仅有实点是叶子</p>\n<p>原图中『两个点路径上最大边权』的最小值，就是重构树上路径边权的最大值，<strong>即两点 LCA 的点权</strong>。</p>\n<p>反过来，如果要找到 <span class=\"math inline\">\\(u\\)</span> 的最大边权最小值 <span class=\"math inline\">\\(\\le w\\)</span> 的所有 <span class=\"math inline\">\\(v\\)</span>，会发现是某个子树的所有实点（叶子）</p>\n<hr />\n<p>实际应用起来不只跟边权有关系，很多时候需要想办法把点权转化成边权，再在重构树上研究原本的点权问题，标志是『找树 / 图上两点间的编号 / 点权最值』</p>\n",
            "tags": [
                "Kruskal 重构树"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20250824/",
            "url": "https://xsc062.netlify.app/20250824/",
            "title": "杂题",
            "date_published": "2025-08-24T07:37:55.000Z",
            "content_html": "<p>不会的东西越来越多了</p>\n<span id=\"more\"></span>\n<hr />\n<h2 id=\"b.-k-set-tree\">B. K-Set Tree</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/CF1691F\" class=\"uri\">https://www.luogu.com.cn/problem/CF1691F</a></p>\n<p>令 <span class=\"math inline\">\\(F_i\\)</span> 表示以 <span class=\"math inline\">\\(1\\)</span> 为根时，<span class=\"math inline\">\\(S\\)</span> 在 <span class=\"math inline\">\\(i\\)</span> 子树内的答案。则：</p>\n<p><span class=\"math display\">\\[\nF_u=\\left(C_{siz_u}^k-\\sum C_{siz_v}^k\\right)\\cdot siz_u+\\sum F_v\\\\\n\\]</span></p>\n<p>直接换根是很复杂的；把 <span class=\"math inline\">\\(\\sum C_{siz_v}^k\\)</span> 记作 <span class=\"math inline\">\\(dp_u\\)</span>，把 <span class=\"math inline\">\\(\\sum F_v\\)</span> 记作 <span class=\"math inline\">\\(f_u\\)</span>，那么：</p>\n<p><span class=\"math display\">\\[\nres=\\sum(C_n^k-dp_u)\\cdot n+f_u\\\\\n\\]</span></p>\n<p><strong>这样做是为了把两个和 <span class=\"math inline\">\\(v\\)</span> 有关的乘项拆开来换根</strong>，实际换根的时候就只用分别换 <span class=\"math inline\">\\(f,dp\\)</span> 两个值，不用考虑二次项等问题，计算量会少很多</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 1e9 + 7;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n, k;\n    std::cin &gt;&gt; n &gt;&gt; k;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    std::vector&lt;long long&gt; fac(n + 1), inv(n + 1);\n    fac[0] = inv[0] = 1ll;\n    for (int i = 1; i &lt;= n; ++i)\n        fac[i] = fac[i - 1] * i % mod;\n    auto qkp = [](long long x, int y) &#123;\n        auto res(1ll);\n        for (; y; (x *= x) %= mod, y &gt;&gt;= 1)\n            if (y &amp; 1)\n                (res *= x) %= mod;\n        return res;\n    &#125;;\n    inv[n] = qkp(fac[n], mod - 2);\n    for (int i = n - 1; i; --i)\n        inv[i] = inv[i + 1] * (i + 1) % mod;\n    auto C = [&amp;](int n, int m) &#123;\n        if (m &gt; n)\n            return 0ll;\n        return fac[n] * inv[m] % mod * inv[n - m] % mod;\n    &#125;;\n    auto res(0ll);\n    std::vector&lt;int&gt; siz(n + 1), ss(n + 1);\n    std::vector&lt;long long&gt; f(n + 1), dp(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        siz[x] = 1;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                (f[x] += (C(siz[i], k) - dp[i]) * siz[i] + f[i]) %= mod;\n                (dp[x] += C(siz[i], k)) %= mod;\n                siz[x] += siz[i];\n            &#125;\n        return;\n    &#125;;\n    DFS(1, -1);\n    DFS = [&amp;](int x, int fa) &#123;\n        (res += (C(n, k) - dp[x]) * n + f[x]) %= mod;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                (f[i] += (C(n - siz[i], k) - (dp[x] - C(siz[i], k))) * (n - siz[i]) + f[x] - f[i] - (C(siz[i], k) - dp[i]) * siz[i]) %= mod;\n                (dp[i] += C(n - siz[i], k)) %= mod;\n                DFS(i, x);\n            &#125;\n        return;\n    &#125;;\n    DFS(1, -1);\n    std::cout &lt;&lt; (res + mod) % mod &lt;&lt; &#39;\\n&#39;;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"c.-li-hua-and-path\">C. Li Hua and Path</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/CF1797F\" class=\"uri\">https://www.luogu.com.cn/problem/CF1797F</a></p>\n<p>考虑<strong>容斥</strong>，分别求解满足 1、满足 2、满足 12（注意要减两倍）就能计算答案</p>\n<p>发现题目所求点对形式很符合 Kruskal 重构树的要求，考虑以对应点权为边权，分别建立 min，max Kruskal 点权多叉重构树。</p>\n<details>\n<p><summary>点权多叉重构树？</summary></p>\n<p>在点权上做 Kruskal 重构树时，发现边的虚点是不必要的，可以直接将更优点作为父亲。</p>\n<p>写的时候有点难想清楚…… 可以画画图，仔细确定一下 Kruskal 重构树的具体性质</p>\n<p>这样做的优势是没有虚点，一些问题会方便一些；但同时放弃了二叉树的结构，一些题可能没那么好做。</p>\n<p>这道题只用经典 Kruskal 重构树也可以解决。</p>\n</details>\n<p>发现 1 2 均可以转化成两棵树在两棵树上的祖孙关系要求，可以轻松地分别统计满足 1、满足 2 的点对数量</p>\n<p>考虑怎么处理同时满足 12 的，发现要求在两棵树上二者应该都具有祖孙关系，且是相反的。<del>可以考虑在一棵树上 DFS 的同时用主席树存储祖先，在另一颗树上 ask</del></p>\n<p>考虑从更容易用 dfn 表示的子树问题思考，在 min 树上分配 dfn 后，在 max 树上用 DFS + 回溯得到每个点实时祖先序列，存在树状数组里；ask 该点被分配的 dfn 子树区间就能得到答案。</p>\n<p>考虑询问，由于每次加入的都是编号最大的点，对于满足 1、满足 2 的贡献是显然的，而同时满足 12 的点就是在 min 树上的祖先，都是好做的。</p>\n<p>实现的时候一定要把 min / max 树对应的性质思考清楚，不然会很麻烦</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; f1(n + 1), f2(n + 1);\n    std::iota(f1.begin() + 1, f1.end(), 1);\n    std::iota(f2.begin() + 1, f2.end(), 1);\n    std::function&lt;int(int)&gt; find1 = [&amp;](int x) &#123;\n        return x == f1[x] ? x : f1[x] = find1(f1[x]);\n    &#125;;\n    std::function&lt;int(int)&gt; find2 = [&amp;](int x) &#123;\n        return x == f2[x] ? x : f2[x] = find2(f2[x]);\n    &#125;;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g1(n + 1), g2(n + 1), adj1(n + 1), adj2(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        if (x &gt; y)\n            std::swap(x, y);\n        adj1[y].push_back(x);\n        adj2[x].push_back(y);\n    &#125;\n    for (int i = 1; i &lt;= n; ++i)\n        for (auto j : adj1[i]) &#123;\n            int fi = find1(i), fj = find1(j);\n            g1[fi].push_back(fj), f1[fj] = fi;\n        &#125;\n    for (int i = n; i; --i)\n        for (auto j : adj2[i]) &#123;\n            int fi = find2(i), fj = find2(j);\n            g2[fi].push_back(fj), f2[fj] = fi;\n        &#125;\n    std::vector&lt;int&gt; bit(n + 1), dfn(n + 1), rfn(n + 1);\n    auto lowbit = [](int x) &#123;\n        return x &amp; -x;\n    &#125;;\n    auto add = [&amp;](int x, int v) &#123;\n        for (; x &lt;= n; x += lowbit(x))\n            bit[x] += v;\n        return;\n    &#125;;\n    auto ask = [&amp;](int x) &#123;\n        int res = 0;\n        for (; x; x -= lowbit(x))\n            res += bit[x];\n        return res;\n    &#125;;\n    int rt1 = 0, rt2 = 0;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (f1[i] == i)\n            rt1 = i;\n        if (f2[i] == i)\n            rt2 = i;\n    &#125;\n    int q;\n    std::cin &gt;&gt; q;\n    std::vector&lt;int&gt; dep1(n + 1), dep2(n + q + 1);\n    long long res = 0ll;\n    std::function&lt;void(int)&gt; DFS = [&amp;](int x) &#123;\n        static int now = 0;\n        dfn[x] = ++now;\n        res += dep1[x];\n        for (auto i : g1[x]) &#123;\n            dep1[i] = dep1[x] + 1;\n            DFS(i);\n        &#125;\n        rfn[x] = now;\n        return;\n    &#125;;\n    DFS(rt1);\n    DFS = [&amp;](int x) &#123;\n        res += dep2[x];\n        res -= 2 * (ask(rfn[x]) - ask(dfn[x] - 1));\n        add(dfn[x], 1);\n        for (auto i : g2[x]) &#123;\n            dep2[i] = dep2[x] + 1;\n            DFS(i);\n        &#125;\n        add(dfn[x], -1);\n        return;\n    &#125;;\n    DFS(rt2);\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    for (int fa; q--; ) &#123;\n        std::cin &gt;&gt; fa;\n        dep2[++n] = dep2[fa] + 1;\n        res += (n - 1) - dep2[n];\n        std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    &#125;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"d.-团队选拔\">D. 团队选拔</h2>\n<p><a href=\"http://222.180.160.110:61235/contest/6534/problem/4\" class=\"uri\">http://222.180.160.110:61235/contest/6534/problem/4</a></p>\n<blockquote>\n<p>给定 <span class=\"math inline\">\\(a_{1\\sim n}\\)</span>，从中任选一些互不相交的区间，满足每个区间内元素的 gcd 相同。</p>\n<p><span class=\"math inline\">\\(n\\le 10^5,V\\le 10^7\\)</span>。</p>\n</blockquote>\n<p>注意到固定一个左端点后，移动右端点，gcd 每次至多减小到原来的一半；也就是说，其种类有 <span class=\"math inline\">\\(\\log V\\)</span> 种。故全序列的 gcd 总数是 <span class=\"math inline\">\\(O(n\\log V)\\)</span> 的。</p>\n<p>很容易想到与此原理类似的全局答案求法：对于每个 <span class=\"math inline\">\\(i\\)</span>，向左处理出每一段 <span class=\"math inline\">\\([l,r]\\)</span>，满足 <span class=\"math inline\">\\(\\gcd(a_{l\\cdots i})=\\gcd(a_r\\cdots i)\\)</span>，并记录该 <span class=\"math inline\">\\(\\gcd\\)</span>。这样求出来的 <span class=\"math inline\">\\((i,l,r)\\)</span> 共有 <span class=\"math inline\">\\(O(n\\log V)\\)</span> 段。</p>\n<p>对于每个 gcd 有 <span class=\"math inline\">\\(f_{i}=f_{i-1}+\\sum\\limits_{j=l_i}^{r_i} f_{j - 1}\\)</span>，可以做一个扫描线，得到全局答案；向前向后分别做到 <span class=\"math inline\">\\(i-1,i+1\\)</span>，相乘就能得到 <span class=\"math inline\">\\(i\\)</span> 未被选取时的答案</p>\n<p>考虑怎么完成『相乘』这个动作：最后的 <span class=\"math inline\">\\(f\\)</span> 在每个右端点处发生变化，可以转化成若干段 <span class=\"math inline\">\\(f\\)</span>；反过来的 <span class=\"math inline\">\\(f&#39;\\)</span> 亦可以这样转化。将 <span class=\"math inline\">\\(f\\)</span> 整体后移一位、<span class=\"math inline\">\\(f&#39;\\)</span> 整体前移一位，就可以对齐。二者的端点总数是均摊单 log 的，区间总数也就是均摊单 log 的（归并就能快速寻找到区间），用差分做一个区间加即可。</p>\n<p>用二分勉强单 log 解决了转移；还看到 <span class=\"citation\" data-cites=\"spdarkle\">@spdarkle</span> 疑似在 <span class=\"math inline\">\\(1\\sim n\\)</span> 上直接做的<a href=\"http://222.180.160.110:61235/submission/3108272\">做法</a>，和 <span class=\"citation\" data-cites=\"Rosmist\">@Rosmist</span> 疑似直接在每个 <span class=\"math inline\">\\(i\\)</span> 上做的<a href=\"http://222.180.160.110:61235/submission/3108581\">做法</a>。官解是个看不懂的做法</p>\n<p>呃，好像一不小心拿了最优解。而且优势很明显（怎么总用时比别人一个点还少？），这是为什么？</p>\n<p>可能因为大家都看不懂官解，做法比较多样？除了我之外比较快的 lwz 和 <span class=\"citation\" data-cites=\"GoldSpade\">@GoldSpade</span> 都用归并完成最后一步；我较他们的额外优势大概是用二分换掉了树状数组？迷惑</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n    std::freopen(&quot;selection.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;selection.out&quot;, &quot;w&quot;, stdout);\n#else\n    std::freopen(&quot;ex_selection2.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1);\n    std::vector&lt;std::vector&lt;int&gt; &gt; st(20, std::vector&lt;int&gt; (n + 1));\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i], st[0][i] = a[i];\n    for (int j = 1; (1 &lt;&lt; j) &lt;= n; ++j)\n        for (int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= n; ++i)\n            st[j][i] = std::__gcd(st[j - 1][i], st[j - 1][i + (1 &lt;&lt; (j - 1))]);\n    auto askgcd = [&amp;](int l, int r) &#123;\n        int k = std::__lg(r - l + 1);\n        return std::__gcd(st[k][l], st[k][r - (1 &lt;&lt; k) + 1]);\n    &#125;;\n    std::unordered_map&lt;int, int&gt; tab;\n    struct node &#123;\n        int i, l, r;\n        bool operator&lt; (const int q) const &#123;\n            return i &lt; q;\n        &#125;\n        bool operator&lt;= (const int q) const &#123;\n            return i &lt;= q;\n        &#125;\n    &#125;;\n    std::vector&lt;std::vector&lt;node&gt; &gt; p1, p2;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int to = i; to &gt;= 1; ) &#123;\n            int at = i, g = askgcd(to, i);\n            for (int l = 1, r = to, mid; l &lt;= r; ) &#123;\n                mid = (l + r) &gt;&gt; 1;\n                if (askgcd(mid, i) == g)\n                    at = mid, r = mid - 1;\n                else\n                    l = mid + 1;\n            &#125;\n            if (!tab.count(g)) &#123;\n                tab[g] = (int)p1.size();\n                p1.emplace_back(), p2.emplace_back();\n            &#125;\n            p1[tab[g]].push_back(&#123; i, at, to &#125;);\n            to = at - 1;\n        &#125;\n        for (int to = i; to &lt;= n; ) &#123;\n            int at = i, g = askgcd(i, to);\n            for (int l = to, r = n, mid; l &lt;= r; ) &#123;\n                mid = (l + r) &gt;&gt; 1;\n                if (askgcd(i, mid) == g)\n                    at = mid, l = mid + 1;\n                else\n                    r = mid - 1;\n            &#125;\n            if (!tab.count(g)) &#123;\n                tab[g] = (int)p2.size();\n                p1.emplace_back(), p2.emplace_back();\n            &#125;\n            p2[tab[g]].push_back(&#123; i, to, at &#125;);\n            to = at + 1;\n        &#125;\n    &#125;\n    auto s(0ll);\n    std::vector&lt;int&gt; x1(n + 1), x2(n + 2), pos(2 * n + 3);\n    std::vector&lt;long long&gt; f1(n + 1), f2(n + 2), s1(n + 1), s2(n + 2), diff(n + 1);\n    for (auto [g, id] : tab) &#123;\n        // printf(&quot;g = %d: \\n&quot;, g);\n        int n1 = (int)p1[id].size();\n        x1[0] = 0, f1[0] = s1[0] = 1ll;\n        for (int i = 1; i &lt;= n1; ++i) &#123;\n            auto [x, L, R] = p1[id][i - 1];\n            --L, --R;\n            x1[i] = x, f1[i] = f1[i - 1];\n            int l = std::upper_bound(x1.begin() + 1, x1.begin() + i + 1, L) - x1.begin() - 1,\n                r = std::upper_bound(x1.begin() + 1, x1.begin() + i + 1, R) - x1.begin() - 1;\n            if (l == r)\n                (f1[i] += f1[l] * (R - L + 1)) %= mod;\n            else &#123;\n                f1[i] += s1[r - 1] + mod - s1[l];\n                f1[i] += f1[r] * (R - x1[r] + 1);\n                f1[i] += f1[l] * (x1[l + 1] - L);\n                f1[i] %= mod;\n            &#125;\n            // printf(&quot;  r = %d, l = [%d, %d]: %lld\\n&quot;, x, L, R, f1[i]);\n            if (i != n1)\n                s1[i] = (s1[i - 1] + f1[i] * (p1[id][i].i - x)) % mod;\n        &#125;\n        (s += f1[n1] - 1) %= mod;\n        int n2 = (int)p2[id].size();\n        x2[n2 + 1] = n + 1, f2[n2 + 1] = s2[n2 + 1] = 1ll;\n        for (int i = n2; i; --i) &#123;\n            auto [x, L, R] = p2[id][i - 1];\n            ++L, ++R;\n            x2[i] = x, f2[i] = f2[i + 1];\n            int l = std::lower_bound(x2.begin() + i, x2.begin() + n2 + 1, L) - x2.begin(),\n                r = std::lower_bound(x2.begin() + i, x2.begin() + n2 + 1, R) - x2.begin();\n            if (l == r)\n                (f2[i] += f2[l] * (R - L + 1)) %= mod;\n            else&#123;\n                f2[i] += s2[l + 1] + mod - s2[r];\n                f2[i] += f2[r] * (R - x2[r - 1]);\n                f2[i] += f2[l] * (x2[l] - L + 1);\n                f2[i] %= mod;\n            &#125;\n            // printf(&quot;  l = %d, r = [%d, %d]: %lld\\n&quot;, x, L, R, f2[i]);\n            if (i != 1)\n                s2[i] = (s2[i + 1] + f2[i] * (x - p2[id][i - 2].i)) % mod;\n        &#125;\n        for (int i = 0; i &lt; n1; ++i)\n            x1[i] = x1[i + 1];\n        x1[n1] = n;\n        int t = (x2[1] == 1) + 1;\n        for (int i = 1; i &lt;= n2 + 1; ++i)\n            --x2[i];\n        std::merge(x1.begin(), x1.begin() + n1 + 1, x2.begin() + t, x2.begin() + n2 + 2, pos.begin() + 1);\n        int m = std::unique(pos.begin() + 1, pos.begin() + n1 + n2 + 4 - t) - pos.begin() - 1;\n        for (int i = 1, p1 = 0, p2 = t, la = 0; i &lt;= m; ++i) &#123;\n            for (; p1 + 1 &lt;= n1 &amp;&amp; x1[p1] &lt; pos[i]; ++p1);\n            for (; p2 + 1 &lt;= n2 + 1 &amp;&amp; x2[p2] &lt; pos[i]; ++p2);\n            (diff[la + 1] += f1[p1] * f2[p2] + mod - 1) %= mod;\n            // printf(&quot;  [%d, %d]: %lld, %lld\\n&quot;, la + 1, pos[i], f1[p1], f2[p2]);\n            if (pos[i] + 1 &lt;= n)\n                (diff[pos[i] + 1] += mod - f1[p1] * f2[p2] + 1) %= mod;\n            la = pos[i];\n        &#125;\n    &#125;\n    // std::cout &lt;&lt; s &lt;&lt; &#39;\\n&#39;;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        (diff[i] += diff[i - 1]) %= mod;\n        std::cout &lt;&lt; (s + mod - diff[i]) % mod &lt;&lt; &#39; &#39;;\n    &#125;\n    std::cout &lt;&lt; &#39;\\n&#39;;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<p>我一开始将 <span class=\"math inline\">\\(f\\)</span> 定义为单点答案而非前缀和，会导致需要线段树维护等差序列，还丢失了答案段数不多这个性质，非常麻烦。将 <span class=\"math inline\">\\(f\\)</span> 的意义替换为前缀和后，就可以很轻松地做了。</p>\n<hr />\n<h2 id=\"a.-宇宙\">A. 宇宙</h2>\n<p><a href=\"http://222.180.160.110:61235/contest/6535/problem/1\" class=\"uri\">http://222.180.160.110:61235/contest/6535/problem/1</a></p>\n<blockquote>\n<p>给定 <span class=\"math inline\">\\(a_{1\\sim n}\\)</span>，对于 <span class=\"math inline\">\\(k=1,2,\\cdots,n-1\\)</span>，回答：</p>\n<ul>\n<li>令 <span class=\"math inline\">\\(i\\)</span> 从 <span class=\"math inline\">\\(1\\)</span> 开始自增，对于每个 <span class=\"math inline\">\\(i\\)</span>，都可以选取 <span class=\"math inline\">\\(k\\)</span> 个互不相同的下标，并使它们对应的元素增加 1。此时，若存在元素不大于 <span class=\"math inline\">\\(i\\)</span>，停止。输出停止时 <span class=\"math inline\">\\(i\\)</span> 可能的最大值。</li>\n</ul>\n<p><span class=\"math inline\">\\(n\\le 10^6,V\\le 10^9\\)</span>。</p>\n</blockquote>\n<p>发现不大于这个 condition 有些反人类，先将 <span class=\"math inline\">\\(a\\)</span> 全部减 1，转化成小于来考虑</p>\n<p>考虑能坚持到 <span class=\"math inline\">\\(i\\)</span> 的一个必要条件，即 <span class=\"math inline\">\\(\\sum\\limits_{a_j&lt;i} i-a_j\\le k\\cdot i\\)</span></p>\n<p>容易发现该条件同时是充分的，同样从线段覆盖的角度出发，是一个 <span class=\"math inline\">\\(k\\)</span> 的扩展</p>\n<p>对 <span class=\"math inline\">\\(a\\)</span> 排序，停止时参与运算的 <span class=\"math inline\">\\(a_j\\)</span> 是越来越多的，故记录最后一个参与运算的下标，逐步挪动（当发现解出来的 <span class=\"math inline\">\\(i\\)</span> 比下一个更大时就需要挪动），同时解不等式即可。</p>\n<p><span class=\"citation\" data-cites=\"Quack\">@Quack</span> 云我在场上能想出官解对我来说是非常了不起的（其实场上写正解的人少得出奇），我也不得不承认我能做出来确实有一定运气成分，也能从中一窥我令人眼前一黑的数学素养！</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n    std::freopen(&quot;universe.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;universe.out&quot;, &quot;w&quot;, stdout);\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n    int n;\n    std::cin &gt;&gt; n, std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i], --a[i];\n    std::sort(a.begin() + 1, a.end());\n    int id = 1;\n    long long s = a[1];\n    for (int i = 1; i &lt; n; ++i) &#123;\n        if (id &lt; i + 1)\n            s += a[++id];\n        long long x = s / (id - i);\n        for (; id != n &amp;&amp; x &gt; a[id + 1]; s += a[++id], x = s / (id - i));\n        std::cout &lt;&lt; x &lt;&lt; &#39; &#39;;\n    &#125;\n    std::cout &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"b.-跳跃\">B. 跳跃</h2>\n<p><a href=\"http://222.180.160.110:61235/contest/6535/problem/2\" class=\"uri\">http://222.180.160.110:61235/contest/6535/problem/2</a></p>\n<blockquote>\n<p>给定长度为 <span class=\"math inline\">\\(n\\)</span> 的 01 序列和跳跃上限 <span class=\"math inline\">\\(k\\)</span>。给定 <span class=\"math inline\">\\(q\\)</span> 个询问，回答：</p>\n<ul>\n<li>从 <span class=\"math inline\">\\(a\\)</span> 跳到 <span class=\"math inline\">\\(b\\)</span>，保证 <span class=\"math inline\">\\(a,b\\)</span> 的颜色均为 1，每次不能跳超过 <span class=\"math inline\">\\(k\\)</span> 格或跳出去，在最小化踩到 0 数量的前提下，最小化跳跃次数，输出这两个值。</li>\n</ul>\n<p><span class=\"math inline\">\\(n,q\\le5\\times10^5\\)</span>。</p>\n</blockquote>\n<p>容易发现只能往一个方向跳，那么不妨令 <span class=\"math inline\">\\(a&lt;b\\)</span>。有一个贪心的想法是能往右就往右，手玩发现<strong>是对的</strong>（我场上手玩过后坚定地认为是错的；可能和没时间了兵荒马乱有关）。这样就很好想到第二问需要倍增；但把两个问结合起来考虑是有点困难的，赛时就意识到这两问的联系没有看起来那么大，甚至很可能是割裂的。</p>\n<p>单独考虑第一问，发现对于一段长度为 <span class=\"math inline\">\\(len\\)</span> 的 0，需要踩到恰好 <span class=\"math inline\">\\(\\left\\lfloor\\dfrac {len}k\\right\\rfloor\\)</span> 个 0。答案容易计算。</p>\n<p>单独考虑第二问，考虑一个第一问答案固定为 0 的情况，也即每个 len 都比 <span class=\"math inline\">\\(k\\)</span> 小。则问题转化成在不踩 0 的情况下最小的步数。容易用倍增解决。</p>\n<p>本题最令人印象深刻的点在于二者的结合，发现这 <span class=\"math inline\">\\(\\left\\lfloor\\dfrac {len}k\\right\\rfloor\\cdot k\\)</span> 个 0 是无论如何都会被经过的，所以可以在原始数组里删掉它们，转化成只考虑第二问的情况</p>\n<details>\n<p>？？？</p>\n<p>我对于自己莫名其妙跑得比别人块一大截这件事情已经快要见怪不怪了，这次又是什么原理，我预处理写得比较漂亮吗？？</p>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n    std::freopen(&quot;jump.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;jump.out&quot;, &quot;w&quot;, stdout);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n, k, q, op;\n    std::cin &gt;&gt; n, std::cin &gt;&gt; n &gt;&gt; q &gt;&gt; k &gt;&gt; op;\n    std::vector&lt;int&gt; tmp(n + 1), a(1), s(1), to(n + 2);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        char t;\n        std::cin &gt;&gt; t;\n        tmp[i] = t - &#39;0&#39;;\n    &#125;\n    tmp.push_back(1), ++n;\n    int cnt = 0;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (tmp[i] == 1) &#123;\n            a.push_back(1), to[i] = (int)a.size() - 1;\n            s.push_back(s.back() + cnt), cnt = 0;\n        &#125;\n        else &#123;\n            ++cnt;\n            if (i == n || tmp[i + 1] == 1) &#123;\n                for (int j = 1; j &lt;= cnt % k; ++j)\n                    a.push_back(0), s.push_back(s.back());\n                cnt /= k;\n            &#125;\n        &#125;\n    &#125;\n    n = (int)a.size() - 1;\n    std::vector&lt;std::vector&lt;int&gt; &gt; f(20, std::vector&lt;int&gt; (n + 1));\n    for (int i = 0; i &lt; 20; ++i)\n        f[i][n] = n;\n    for (int i = n - 1; i; --i) &#123;\n        f[0][i] = std::min(&#123; n, i + k, f[0][i + 1] &#125;);\n        for (; !a[f[0][i]]; --f[0][i]);\n        if (a[i] == 1) &#123;\n            for (int j = 1; j &lt; 20; ++j)\n                f[j][i] = f[j - 1][f[j - 1][i]];\n        &#125;\n    &#125;\n    for (int a, b; q--; ) &#123;\n        std::cin &gt;&gt; a &gt;&gt; b;\n        if (a &gt; b)\n            std::swap(a, b);\n        a = to[a], b = to[b];\n        std::cout &lt;&lt; s[b] - s[a];\n        if (op == 1) &#123;\n            int res = s[b] - s[a];\n            for (int i = 19; ~i; --i)\n                if (f[i][a] &lt; b)\n                    a = f[i][a], res += (1 &lt;&lt; i);\n            std::cout &lt;&lt; &#39; &#39; &lt;&lt; res + 1;\n        &#125;\n        std::cout &lt;&lt; &#39;\\n&#39;;\n    &#125;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"d.-jongmah\">D. Jongmah</h2>\n<p><a href=\"https://codeforces.com/contest/1110/problem/D\" class=\"uri\">https://codeforces.com/contest/1110/problem/D</a></p>\n<p>容易发现当连续出现三次 <span class=\"math inline\">\\((i-1,i,i+1)\\)</span> 时，可以被三次相同代替；</p>\n<p>容易发现需要使用 <span class=\"math inline\">\\(f_{i,a,b}\\)</span> 来代表 DP 到 <span class=\"math inline\">\\(i\\)</span> 时，用了 <span class=\"math inline\">\\(a\\)</span> 组 <span class=\"math inline\">\\((i-1,i,i+1)\\)</span> 和 <span class=\"math inline\">\\(b\\)</span> 组 <span class=\"math inline\">\\((i,i+1,i+2)\\)</span> 时的最大组数；</p>\n<p>但是并没有想到要将二者结合起来！感觉应该是能比较快做出来的水平。能察觉到不太认真。悔过！</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int inf = 0x3f3f3f3f;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n, m;\n    std::cin &gt;&gt; n &gt;&gt; m;\n    std::vector&lt;int&gt; cnt(m + 1);\n    for (int i = 1, x; i &lt;= n; ++i)\n        std::cin &gt;&gt; x, ++cnt[x];\n    std::vector&lt;std::vector&lt;std::vector&lt;int&gt; &gt; &gt; f(m + 1, std::vector&lt;std::vector&lt;int&gt; &gt; (3, std::vector&lt;int&gt; (3, -inf)));\n    f[0][0][0] = 0ll;\n    for (int i = 1; i &lt;= m; ++i)\n        for (int a = 0; a &lt;= 2; ++a) // i - 1, i, i + 1\n            for (int b = 0; b &lt;= 2; ++b) // i, i + 1, i + 2\n                for (int c = 0; c &lt;= 2; ++c) &#123; // i - 2, i - 1, i\n                    if (a + b + c &gt; cnt[i]) continue;\n                    f[i][a][b] = std::max(f[i][a][b], f[i - 1][c][a] + b + (cnt[i] - a - b - c) / 3);\n                &#125;\n    std::cout &lt;&lt; f[m][0][0] &lt;&lt; &#39;\\n&#39;;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"e.-magic-stones\">E. Magic Stones</h2>\n<p><a href=\"https://codeforces.com/contest/1110/problem/F\" class=\"uri\">https://codeforces.com/contest/1110/problem/F</a></p>\n<p>容易想到考察差分数组，发现这个操作就是交换了差分数组的相邻两个元素。故对于 <span class=\"math inline\">\\(c\\)</span> 和 <span class=\"math inline\">\\(t\\)</span> 的差分数组分别排序，然后 check 是否相等即可。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n    const auto stime = std::chrono::steady_clock::now();\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1), b(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i];\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; b[i];\n    if (a[1] != b[1] || a[n] != b[n]) &#123;\n        std::cout &lt;&lt; &quot;No&quot; &lt;&lt; &#39;\\n&#39;;\n        return 0;\n    &#125;\n    std::vector&lt;int&gt; da(n), db(n);\n    std::adjacent_difference(a.begin() + 1, a.end(), da.begin());\n    std::adjacent_difference(b.begin() + 1, b.end(), db.begin());\n    std::sort(da.begin(), da.end());\n    std::sort(db.begin(), db.end());\n    std::cout &lt;&lt; (da == db ? &quot;Yes&quot; : &quot;No&quot;) &lt;&lt; &#39;\\n&#39;;\n#ifndef ONLINE_JUDGE\n    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &quot;s\\n&quot;;\n#endif\n    return 0;\n&#125;</code></pre>\n</details>\n",
            "tags": [
                "倍增",
                "树形 DP",
                "Kruskal 重构树"
            ]
        }
    ]
}