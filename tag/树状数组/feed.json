{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"树状数组\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20240106/",
            "url": "https://xsc062.netlify.app/20240106/",
            "title": "杂题全谈",
            "date_published": "2024-01-06T03:27:39.000Z",
            "content_html": "<p>想不到好标题了。</p>\n<span id=\"more\"></span>\n<p>有句话怎么说来着，罗马不是一天建成的，是一天天建成的。</p>\n<p>还有什么，Do in Rome as the Romans’ do，还有一句，All roads leads to Rome。</p>\n<hr />\n<h3 id=\"a.-连续的零-zero\">A. 连续的零 zero</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4647/problem/1\" class=\"uri\">http://222.180.160.110:61235/contest/4647/problem/1</a></p>\n<p>做个前缀和，看看任意一个长度为 <span class=\"math inline\">\\(k\\)</span> 的区间中有几个 <span class=\"math inline\">\\(1\\)</span>。复杂度 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 5e5 + 5;\nconst int inf = 0x3f3f3f3f;\nint n, m, res = inf;\nint a[maxn], s[maxn];\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nint main() &#123;\n    scanf(&quot;%d %d&quot;, &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        scanf(&quot;%1d&quot;, &amp;a[i]);\n        s[i] = s[i - 1] + a[i];\n        if (i &gt;= m)\n            res = min(res, s[i] - s[i - m]);\n    &#125;\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062</code></pre>\n</details>\n<hr />\n<h3 id=\"b.-反回文串-anti\">B. 反回文串 anti</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4647/problem/2\" class=\"uri\">http://222.180.160.110:61235/contest/4647/problem/2</a></p>\n<p>当 <span class=\"math inline\">\\(n\\)</span> 为奇时，中间的元素一定和自己相等，故无解。</p>\n<p>当数量最多的一个字符个数超过 <span class=\"math inline\">\\(\\dfrac n2\\)</span> 时，由鸽巢得无解。</p>\n<p>剩下的情况一定有解。</p>\n<details>\n<p><summary>证明</summary></p>\n<p>可以找到一种合法的构造方式。我们列出一个列数为 <span class=\"math inline\">\\(2\\)</span>，行数为 <span class=\"math inline\">\\(\\dfrac n2\\)</span> 的表格，将所有相同字母排列在一起，按照从左到右，从上到下的方式将字母填入表格，最后将第 <span class=\"math inline\">\\(i\\)</span> 行第一列的字母填入 <span class=\"math inline\">\\(a_i\\)</span>，第 <span class=\"math inline\">\\(i\\)</span> 行第二列的字母填入 <span class=\"math inline\">\\(a_{n-i+1}\\)</span>，即可完成构造。</p>\n<p>一种字母只在第一列或第二列出现当然合法，如果从第一列持续到第二列，因为任意字母出现次数不超过 <span class=\"math inline\">\\(\\dfrac n2\\)</span> 次，所以同一行的两列不会出现同一种字母。</p>\n<p>这叫什么，有字证明。</p>\n<p><del>感觉可以拿去出一道类似于「找到字符串字典序最小的反回文串」之类的小水题</del></p>\n</details>\n<p>然后现在我们知道有解了，怎么找到最优解呢。</p>\n<p>比如有一组 <span class=\"math inline\">\\((a_i,a_{n-i+1})=(\\texttt a, \\texttt a)\\)</span>，还有一组 <span class=\"math inline\">\\((a_j, a_{n-j+1})=(\\texttt b, \\texttt b)\\)</span>，那我们直接把 <span class=\"math inline\">\\(a_i\\)</span> 和 <span class=\"math inline\">\\(a_j\\)</span> 交换，皆大欢喜。</p>\n<p>这就说明我们需要把值不相等的非法 <span class=\"math inline\">\\(a_i\\)</span> 与 <span class=\"math inline\">\\(a_j\\)</span> 配对。</p>\n<p>然后我们就可以沿用证明中的构造方式，分组配对，一定最优，每组代价为 <span class=\"math inline\">\\(1\\)</span>。</p>\n<p>同一行两个值 <span class=\"math inline\">\\(v\\)</span> 相等，因为已经最优了，所以不能再在非法串中寻找答案。应该找合法对中某个值交换，每组代价为 <span class=\"math inline\">\\(2\\)</span>。具体和谁交换我们不用担心，只要找到一组 <span class=\"math inline\">\\((a_i,a_{n-i+1})\\)</span> 满足 <span class=\"math inline\">\\(a_i\\ne v\\)</span> 且 <span class=\"math inline\">\\(a_{n-i+1}\\ne v\\)</span> 就可以了，然后我们又知道 <span class=\"math inline\">\\(v\\)</span> 的个数 <span class=\"math inline\">\\(\\ne \\dfrac n2\\)</span>，假设 <span class=\"math inline\">\\(\\dfrac n2\\)</span> 对中每队都有至少一个 <span class=\"math inline\">\\(v\\)</span>，由于当前这一对有两个相同的 <span class=\"math inline\">\\(v\\)</span>，那么 <span class=\"math inline\">\\(v\\)</span> 的个数就会大于 <span class=\"math inline\">\\(\\dfrac n2\\)</span>，矛盾了，所以一定能找到。</p>\n<p>对于非法总对数是奇数的情况，我们要钦定一个非法对强制让其和合法对交换，贪心一下取非法对数量最多的 <span class=\"math inline\">\\(v\\)</span> 的某一对最优。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxm = 35;\nconst int maxn = 2e5 + 5;\nchar s[maxn];\nint cnt[maxm], p[maxn];\nint T, n, tot, res, now;\nint main() &#123;\n    scanf(&quot;%d&quot;, &amp;T);\n    while (T--) &#123;\n        tot = 0;\n        scanf(&quot;%d %s&quot;, &amp;n, s + 1);\n        if (n &amp; 1) &#123;\n            puts(&quot;-1&quot;);\n            continue;\n        &#125;\n        memset(cnt, 0, sizeof (cnt));\n        for (int i = 1; i &lt;= n; ++i)\n            ++cnt[s[i] - &#39;a&#39; + 1];\n        for (int i = 1; i &lt;= 26; ++i) &#123;\n            if (cnt[i] * 2 &gt; n) &#123;\n                puts(&quot;-1&quot;);\n                goto noSol;\n            &#125;\n        &#125;\n        memset(cnt, 0, sizeof (cnt));\n        for (int i = 1; i * 2 &lt;= n; ++i) &#123;\n            if (s[i] == s[n - i + 1])\n                ++cnt[s[i] - &#39;a&#39; + 1], ++tot;\n        &#125;\n        std::sort(cnt + 1, cnt + 27,\n                    std::greater&lt;int&gt;());\n        res = now = 0;\n        if (tot &amp; 1) &#123;\n            res = 1, --cnt[1];\n            std::sort(cnt + 1, cnt + 27,\n                        std::greater&lt;int&gt;());\n        &#125;\n        for (int i = 1; i &lt;= 26; ++i) &#123;\n            while (cnt[i]--) &#123;\n                if (++now &gt; tot / 2) &#123;\n                    if (i == p[now - tot / 2])\n                        res += 2;\n                    else ++res;\n                &#125;\n                else p[now] = i;\n            &#125;\n        &#125;\n        print(res, &#39;\\n&#39;);\n        noSol: ;\n    &#125;\n    return 0;\n&#125;\n&#125; // namespace XSC062</code></pre>\n</details>\n<hr />\n<h3 id=\"c.-除与减-divsub\">C. 除与减 divsub</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4647/problem/3\" class=\"uri\">http://222.180.160.110:61235/contest/4647/problem/3</a></p>\n<p>小数学，还好。</p>\n<p>假设 <span class=\"math inline\">\\(n=d\\times k^p\\)</span>，其中 <span class=\"math inline\">\\(k\\nmid d\\)</span>，那么我们分两种情况讨论。</p>\n<ol type=\"1\">\n<li><p><span class=\"math inline\">\\(p=0\\)</span>，即 <span class=\"math inline\">\\(k\\nmid n\\)</span>，那么 <span class=\"math inline\">\\(n\\bmod k=1\\)</span>，即 <span class=\"math inline\">\\(k\\mid (n-1)\\)</span>。</p>\n这个时候问 <span class=\"math inline\">\\(k\\)</span> 的个数就相当于是在问 <span class=\"math inline\">\\(n-1\\)</span> 除 <span class=\"math inline\">\\(1\\)</span> 以外的因子个数。假设 <span class=\"math inline\">\\(n-1={x_1}^{p_1}{x_2}^{p_2}\\cdots {x_m}^{p_m}\\)</span>，那么答案为 <span class=\"math inline\">\\((\\prod p_i+1)-1\\)</span>，减去的是 <span class=\"math inline\">\\(1\\)</span>。</li>\n<li><p><span class=\"math inline\">\\(p\\ne 0\\)</span>，<span class=\"math inline\">\\(k\\mid n\\)</span>。</p>\n<p>这个时候好像并没有什么好的转化。好消息是 <span class=\"math inline\">\\(n\\)</span> 的范围是 <span class=\"math inline\">\\(10^{12}\\)</span>，根号枚举因数复杂度跑得过。所以我们就可以暴力判定 <span class=\"math inline\">\\(n\\)</span> 的所有因数是否满足条件。</p></li>\n</ol>\n<p>时间复杂度，<span class=\"math inline\">\\(O(\\sqrt n\\times \\log n)\\)</span>，枚举因数是根号，算次数（也就是算 <span class=\"math inline\">\\(d\\)</span>）是 <span class=\"math inline\">\\(\\log\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nint n, m, res, cnt;\nint main() &#123;\n    read(n), m = n;\n    for (int i = 2; i * i &lt;= n; ++i) &#123;\n        if (n % i == 0) &#123;\n            m = n;\n            while (m % i == 0) m /= i;\n            if (m % i == 1) ++res;\n            if (i * i != n) &#123;\n                m = n;\n                while (m % (n / i) == 0)\n                    m /= (n / i);\n                if (m % (n / i) == 1) ++res;\n            &#125;\n        &#125;\n    &#125;\n    m = n - 1, cnt = 1;\n    for (int i = 2; i * i &lt;= m; ++i) &#123;\n        if (m % i == 0) &#123;\n            int now = 0;\n            while (m % i == 0)\n                ++now, m /= i;\n            cnt *= now + 1;\n        &#125;\n    &#125;\n    if (m != 1) cnt *= 2;\n    print(res + cnt, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"d.-图书管理员-librarian\">D. 图书管理员 librarian</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4647/problem/4\" class=\"uri\">http://222.180.160.110:61235/contest/4647/problem/4</a></p>\n<p>[SDOI2008] 郁闷的小 J。</p>\n<p>关于这个，我们发现自己不会考场现冲主席树。哎，打 CDQ 又怕写挂。</p>\n<p>我们发现这道题的修改都是单点的，询问也只关于某一种颜色，不同的颜色之间没有影响。</p>\n<p>于是我们可以把操作离线下来，初始视作将某颜色在某位置增加，修改视作将某颜色在某位置删除，将另一颜色在该位置增加，将所有操作按颜色离散化分类然后 <code>vector</code> 下来，对于所有颜色从前到后树状数组做一遍操作就能 <span class=\"math inline\">\\(O(n\\log n+q\\log n)\\)</span> 解决。</p>\n<p>树状数组清空是肯定不能 <code>memset</code> 的，复杂度不对。那么怎么办呢？把所有操作撤回去就可以了。</p>\n<p>顺带一提我是洛谷上最优解。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 2e5 + 5;\nstruct __ &#123;\n    int ty, l, r, v;\n    __() &#123;&#125;\n    __(int t1, int l1, int r1, int v1 = 0) &#123;\n        if (t1 == 0)\n            ty = 0, l = l1, v = r1;\n        else ty = 1, l = l1, r = r1, v = v1;\n    &#125;\n&#125;;\nchar ty;\nstd::map&lt;int, int&gt; tab;\nstd::vector&lt;__&gt; q[maxn];\nint n, m, tot, x, y, v, id;\nint Bit[maxn], a[maxn], res[maxn];\nint lowbit(int x) &#123; return x &amp; -x; &#125;\nvoid add(int x, int v) &#123;\n    for (; x &lt;= n; x += lowbit(x))\n        Bit[x] += v;\n    return;\n&#125;\nint ask(int x) &#123;\n    int res = 0;\n    for (; x; x -= lowbit(x)) res += Bit[x];\n    return res;\n&#125;\nint main() &#123;\n    read(n), read(m);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        read(a[i]);\n        if (!tab.count(a[i]))\n            tab[a[i]] = ++tot;\n        a[i] = tab[a[i]];\n        q[a[i]].emplace_back(0, i, 1);\n    &#125;\n    while (m--) &#123;\n        scanf(&quot;%1s&quot;, &amp;ty);\n        if (ty == &#39;C&#39;) &#123;\n            read(x), read(y);\n            if (!tab.count(y))\n                tab[y] = ++tot;\n            y = tab[y];\n            q[a[x]].emplace_back(0, x, -1);\n            q[a[x] = y].emplace_back(0, x, 1);\n        &#125;\n        else &#123;\n            ++id;\n            read(x), read(y), read(v);\n            if (!tab.count(v)) continue;\n            v = tab[v];\n            q[v].emplace_back(1, x, y, id);\n        &#125;\n    &#125;\n    for (int i = 1; i &lt;= tot; ++i) &#123;\n        for (auto &amp;j : q[i]) &#123;\n            if (j.ty == 0) add(j.l, j.v);\n            else &#123;\n                res[j.v] =\n                    ask(j.r) - ask(j.l - 1);\n            &#125;\n        &#125;\n        for (auto &amp;j : q[i])\n            if (j.ty == 0) add(j.l, -j.v);\n    &#125;\n    for (int i = 1; i &lt;= id; ++i)\n        print(res[i], &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062</code></pre>\n</details>\n<hr />\n<p>E 会单独开一篇。</p>\n<hr />\n<h3 id=\"f.-树-tree\">F. 树 tree</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4647/problem/6\" class=\"uri\">http://222.180.160.110:61235/contest/4647/problem/6</a></p>\n<p>CF916E。</p>\n<p>大分讨给我整不会了，更给我整不会的是下来过后发现这只是个小分讨。</p>\n<p>更新子树和子树查询我们都会。换根 DP 我们也都写过，都知道换根并不会对子树结构产生大的影响。所以应当是能根据已知信息推测出子树在原树上对应的点集的。</p>\n<p>记 <span class=\"math inline\">\\(r\\)</span> 为当前树根，<span class=\"math inline\">\\(\\text {LCA}(x,y)\\)</span> 为 <span class=\"math inline\">\\(x,y\\)</span> 在 <span class=\"math inline\">\\(1\\)</span> 为根时的 LCA，<span class=\"math inline\">\\(\\text {LCA}&#39;(x,y)\\)</span> 表示 <span class=\"math inline\">\\(x,y\\)</span> 在 <span class=\"math inline\">\\(r\\)</span> 为根时的 LCA。</p>\n<p>那么对于 <span class=\"math inline\">\\(\\text {LCA}&#39;(x,y)\\)</span>，肯定是要讨论 <span class=\"math inline\">\\(x,y\\)</span> 和 <span class=\"math inline\">\\(r\\)</span> 的位置关系的。</p>\n<ol type=\"1\">\n<li><span class=\"math inline\">\\(\\text {LCA}(x,y)\\)</span> 是 <span class=\"math inline\">\\(r\\)</span> 的子孙。此时 <span class=\"math inline\">\\(\\text {LCA}&#39;(x,y) = \\text {LCA}(x,y)\\)</span>。</li>\n<li><span class=\"math inline\">\\(\\text {LCA}(x,y)\\)</span> 是 <span class=\"math inline\">\\(r\\)</span> 的祖先。那么说明至少有一个点不是 <span class=\"math inline\">\\(r\\)</span> 的子孙。此时 <span class=\"math inline\">\\(\\text {LCA}(x,y)&#39;\\)</span> 的值为 <span class=\"math inline\">\\(r\\)</span> 为另一个点的 LCA。</li>\n</ol>\n<p>整理可得 <span class=\"math inline\">\\(\\text {LCA}&#39;(x,y)\\)</span> 是 <span class=\"math inline\">\\(\\text {LCA}(x,y)\\)</span>、<span class=\"math inline\">\\(\\text {LCA}(x,r)\\)</span> 和 <span class=\"math inline\">\\(\\text {LCA}(y,r)\\)</span> 中的深度最大者。</p>\n<p>对于以 <span class=\"math inline\">\\(r\\)</span> 为根时的子树 <span class=\"math inline\">\\(x\\)</span>：</p>\n<ol type=\"1\">\n<li><span class=\"math inline\">\\(x=r\\)</span>，此时子树为整棵树。</li>\n<li><span class=\"math inline\">\\(\\text {LCA}(x,r)\\ne x\\)</span>，即 <span class=\"math inline\">\\(r\\)</span> 不为 <span class=\"math inline\">\\(x\\)</span> 的子孙，此时子树就是以 <span class=\"math inline\">\\(1\\)</span> 为根是的子树 <span class=\"math inline\">\\(x\\)</span>。</li>\n<li><span class=\"math inline\">\\(\\text {LCA}(x,y)=x\\)</span>，即 <span class=\"math inline\">\\(r\\)</span> 为 <span class=\"math inline\">\\(x\\)</span> 的子孙，此时子树是整棵树除开 <span class=\"math inline\">\\(x\\)</span> 包含 <span class=\"math inline\">\\(r\\)</span> 的儿子及其子孙。修改和查询的时候容斥一下就好。这个时候的子树倍增跳一下就能找到。</li>\n</ol>\n<p>然后就是常规线段树维护了。时间复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxm = 35;\nconst int maxn = 1e5 + 5;\n#define lt (p &lt;&lt; 1)\n#define rt (lt | 1)\nstruct _ &#123; int l, r, u, d; &#125;;\n_ t[maxn &lt;&lt; 2];\nint f[maxn][maxm];\nstd::vector&lt;int&gt; g[maxn];\nint a[maxn], dfn[maxn], rfn[maxn];\nint n, q, r, ty, x, y, v, si, now;\nint top[maxn], dep[maxn], tab[maxn];\nvoid swap(int &amp;x, int &amp;y) &#123;\n    x ^= y ^= x ^= y;\n    return;\n&#125;\nvoid DFS(int x) &#123;\n    dep[x] = dep[f[x][0]] + 1;\n    dfn[x] = ++now, tab[now] = x;\n    for (auto i : g[x]) &#123;\n        if (i == f[x][0]) continue;\n        f[i][0] = x;\n        for (int j = 1; j &lt;= si; ++j)\n            f[i][j] = f[f[i][j - 1]][j - 1];\n        DFS(i);\n    &#125;\n    rfn[x] = now;\n    return;\n&#125;\nvoid pushup(int p) &#123;\n    t[p].u = t[lt].u + t[rt].u;\n    return;\n&#125;\nvoid pushdown(int p) &#123;\n    if (t[p].d) &#123;\n        t[lt].d += t[p].d;\n        t[rt].d += t[p].d;\n        t[lt].u += t[p].d *\n                (t[lt].r - t[lt].l + 1);\n        t[rt].u += t[p].d *\n                (t[rt].r - t[rt].l + 1);\n        t[p].d = 0;\n    &#125;\n    return;\n&#125;\nvoid bld(int p, int l, int r) &#123;\n    t[p].l = l, t[p].r = r;\n    if (l == r) &#123;\n        t[p].u = a[tab[l]];\n        return;\n    &#125;\n    int mid = (l + r) &gt;&gt; 1;\n    bld(lt, l, mid), bld(rt, mid + 1, r);\n    pushup(p);\n    return;\n&#125;\nvoid add(int p, int x, int v) &#123;\n    t[p].u += v;\n    if (t[p].l == t[p].r) return;\n    pushdown(p);\n    int mid = (t[p].l + t[p].r) &gt;&gt; 1;\n    if (x &lt;= mid) add(lt, x, v);\n    else add(rt, x, v);\n    return;\n&#125;\nvoid add(int p, int l, int r, int v) &#123;\n    if (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) &#123;\n        t[p].d += v;\n        t[p].u += (t[p].r - t[p].l + 1) * v;\n        return;\n    &#125;\n    pushdown(p);\n    int mid = (t[p].l + t[p].r) &gt;&gt; 1;\n    if (l &lt;= mid) add(lt, l, r, v);\n    if (r &gt; mid) add(rt, l, r, v);\n    pushup(p);\n    return;\n&#125;\nint ask(int p, int l, int r) &#123;\n    if (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r)\n        return t[p].u;\n    pushdown(p);\n    int res = 0,\n        mid = (t[p].l + t[p].r) &gt;&gt; 1;\n    if (l &lt;= mid) res = ask(lt, l, r);\n    if (r &gt; mid) res += ask(rt, l, r);\n    return res;\n&#125;\nint LCA(int x, int y) &#123;\n    if (dep[x] &lt; dep[y]) swap(x, y);\n    for (int i = si; ~i; --i) &#123;\n        if (dep[f[x][i]] &gt;= dep[y])\n            x = f[x][i];\n    &#125;\n    if (x == y) return x;\n    for (int i = si; ~i; --i) &#123;\n        if (f[x][i] != f[y][i])\n            x = f[x][i], y = f[y][i];\n    &#125;\n    return f[x][0];\n&#125;\nvoid Add(int x, int v) &#123;\n    int rlca = LCA(r, x);\n    if (x == r) add(1, 1, n, v);\n    else if (rlca != x)\n        add(1, dfn[x], rfn[x], v);\n    else &#123;\n        add(1, 1, n, v);\n        int p = r;\n        for (int i = si; ~i; --i) &#123;\n            if (dep[f[p][i]] &gt;= dep[x] + 1)\n                p = f[p][i];\n        &#125;\n        add(1, dfn[p], rfn[p], -v);\n    &#125;\n    return;\n&#125;\nvoid tAdd(int x, int y, int v) &#123;\n    int llca = LCA(r, x), rlca = LCA(r, y),\n        ulca = LCA(x, y);\n    if (dep[llca] &gt;= dep[rlca] &amp;&amp;\n        dep[llca] &gt;= dep[ulca]) Add(llca, v);\n    else if (dep[rlca] &gt;= dep[llca] &amp;&amp;\n        dep[rlca] &gt;= dep[ulca]) Add(rlca, v);\n    else Add(ulca, v);\n    return;\n&#125;\nint tAsk(int x) &#123;\n    int rlca = LCA(r, x);\n    if (x == r) return t[1].u;\n    if (rlca != x)\n        return ask(1, dfn[x], rfn[x]);\n    int p = r;\n    for (int i = si; ~i; --i) &#123;\n        if (dep[f[p][i]] &gt;= dep[x] + 1)\n            p = f[p][i];\n    &#125;\n    return t[1].u - ask(1, dfn[p], rfn[p]);\n&#125;\nvoid add(int x, int y) &#123;\n    g[x].push_back(y);\n    return;\n&#125;\nint main() &#123;\n    read(n), read(q), r = 1;\n    si = log(n) / log(2.0);\n    for (int i = 1; i &lt;= n; ++i) read(a[i]);\n    for (int i = 1; i &lt; n; ++i) &#123;\n        read(x), read(y);\n        add(x, y), add(y, x);\n    &#125;\n    dep[0] = 1, DFS(1), dep[0] = 0;\n    bld(1, 1, n);\n    while (q--) &#123;\n        read(ty);\n        if (ty == 1) read(r);\n        else if (ty == 2) &#123;\n            read(x), read(y), read(v);\n            tAdd(x, y, v);\n        &#125;\n        else &#123;\n            read(x);\n            print(tAsk(x), &#39;\\n&#39;);\n        &#125;\n    &#125;\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n",
            "tags": [
                "线段树",
                "树状数组",
                "LCA",
                "倍增",
                "鸽巢原理"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20231004-1/",
            "url": "https://xsc062.netlify.app/20231004-1/",
            "title": "杂题",
            "date_published": "2023-10-04T08:41:40.000Z",
            "content_html": "<p><a href=\"http://222.180.160.110:61235/contest/4272\">牛客普及</a>。</p>\n<span id=\"more\"></span>\n<hr />\n<h3 id=\"a.-学习求余\">A. 学习求余</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4272/problem/1\" class=\"uri\">http://222.180.160.110:61235/contest/4272/problem/1</a></p>\n<p>今天我们来学习求余！这种题放普及 T1 不合适吧！</p>\n<p>令 <span class=\"math inline\">\\(k=\\left\\lfloor \\dfrac n2 \\right\\rfloor + 1\\)</span>，直接输出 <span class=\"math inline\">\\(k\\times (n - k)\\)</span> 即可。</p>\n<details>\n<p><summary>我是不是证复杂了…</summary></p>\n<p>我们可以简单地发现一个道理，对于任意 <span class=\"math inline\">\\(\\dfrac n2&lt;x\\le n\\)</span>，<span class=\"math inline\">\\(n\\bmod x\\)</span> 的值是 <span class=\"math inline\">\\(n - x\\)</span>；</p>\n<p>根据基本不等式（<del>wjs 直接感动得哭出声来</del>）或小学知识「和不变，差小积大」，我们可以知道当 <span class=\"math inline\">\\(x=\\left\\lfloor \\dfrac n2 \\right\\rfloor + 1\\)</span> 时，<span class=\"math inline\">\\(x\\times (n-x)\\)</span> 取最大值。</p>\n<p>故有：当 <span class=\"math inline\">\\(x=\\left\\lfloor \\dfrac n2 \\right\\rfloor + 1\\)</span> 时，<span class=\"math inline\">\\(x\\times (n\\bmod x)\\)</span> 取最大值。</p>\n<p>而对于 <span class=\"math inline\">\\(y\\le \\dfrac n2\\)</span>，由余数小于除数得，<span class=\"math inline\">\\(n\\bmod y&lt;y\\le \\dfrac n2\\)</span>。由于 <span class=\"math inline\">\\(0&lt;y&lt;x=\\left\\lfloor \\dfrac n2 \\right\\rfloor + 1\\)</span> 且 <span class=\"math inline\">\\(0\\le n\\bmod y\\le \\left\\lfloor \\dfrac n2 \\right\\rfloor - 1\\le n - \\left\\lfloor \\dfrac n2 \\right\\rfloor - 1=n\\bmod x\\)</span>，由不等式的基本性质得 <span class=\"math inline\">\\(x\\times(n\\bmod x)&gt;y\\times (n\\bmod y)\\)</span>。</p>\n<p>综上，对于 <span class=\"math inline\">\\(1\\le x\\le n\\)</span>，当 <span class=\"math inline\">\\(x=\\left\\lfloor \\dfrac n2 \\right\\rfloor + 1\\)</span> 时，<span class=\"math inline\">\\(x\\times (n\\bmod x)\\)</span> 有最大值。</p>\n</details>\n<p>然后如果你要问我怎么发现这一点的呢，我当时没有思路，然后随手输出了 <span class=\"math inline\">\\(n=100\\)</span> 时 <span class=\"math inline\">\\(n\\bmod i\\)</span> 的所有值。然后发现 <span class=\"math inline\">\\(k=51\\)</span> 时余数是 <span class=\"math inline\">\\(49\\)</span>…… 然后就会了。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nint n, k;\nint main() &#123;\n    read(n), k = n / 2 + 1;\n    print(k * (n % k));\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n<p><del>头一次在题解里贴这么短的代码</del></p>\n</details>\n<hr />\n<h3 id=\"b.-提取数字\">B. 提取数字</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4272/problem/2\" class=\"uri\">http://222.180.160.110:61235/contest/4272/problem/2</a></p>\n<p>我被这道题（疑似 T1）坑到了！交了三遍才过！这合理吗？</p>\n<p>首先要开 <code>long long</code>！然后注意，你的判定条件应为「当前是否已存储数」而非「当前存数变量是否为 0」！因为数据中会有单个 0 的情况出现！</p>\n<p>然后就没有了。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 1e5 + 5;\nbool flag;\nchar s[maxn]; \nint n, ans, cnt;\nint main() &#123;\n    scanf(&quot;%*s %s&quot;, s + 1);\n    n = strlen(s + 1);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (s[i] &gt;= &#39;0&#39; &amp;&amp; s[i] &lt;= &#39;9&#39;)\n            cnt = cnt * 10 + s[i] - &#39;0&#39;, flag = 1;\n        else if (flag)\n            ans += (cnt + 5), cnt = 0, flag = 0;\n    &#125;\n    if (flag) ans += (cnt + 5);\n    print(ans, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"c.-武器选择\">C. 武器选择</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/4272/problem/3\" class=\"uri\">http://222.180.160.110:61235/contest/4272/problem/3</a></p>\n<details>\n<p><summary>首先是我想了半个小时的狂拽酷炫吊炸天的法一：离线</summary></p>\n<p>我当时一边打一边怀疑现在的普及组是什么神仙，T3 考这么神奇的离线，难道是我落后于时代了？</p>\n<p>（之所以认为这是 T3 是因为括号那道题确实是正常 T4 风格）</p>\n<p>我们预处理出对于每一个可能获得武器 <span class=\"math inline\">\\(i\\)</span> 的位置，应该从哪个位置第一次捡到武器 <span class=\"math inline\">\\(i\\)</span>，由于这一段内的所有武器 <span class=\"math inline\">\\(i\\)</span> 都需要被拾取，我们将其作为区间 <span class=\"math inline\">\\([L_i, R_i]\\)</span> 来记录。</p>\n<p>那么询问可以转化为，在 <span class=\"math inline\">\\([l, r]\\)</span> 内 <strong>不同颜色</strong> <span class=\"math inline\">\\([L_i, R_i]\\)</span> 的数量。</p>\n<p>考虑将询问离线。将询问按左端点从大到小排序，信息区间 <span class=\"math inline\">\\([L_i, R_i]\\)</span> 也按左端点从大到小排序。</p>\n<p>对于每次询问 <span class=\"math inline\">\\(l, r\\)</span>，在树状数组中将被 <span class=\"math inline\">\\([l, n]\\)</span> 完全包含的所有 <span class=\"math inline\">\\([L_i, R_i]\\)</span>（其实就是 <span class=\"math inline\">\\(l\\le L_i\\)</span> 的所有 <span class=\"math inline\">\\(L_i\\)</span>）在右端点 <span class=\"math inline\">\\(R_i\\)</span> 处加一，我们就统计到了可以捡到武器的所有位置。</p>\n<p>怎么区分颜色呢？很简单，我们让每个颜色只被算一次。算哪一次呢？就算当前已加入的 <span class=\"math inline\">\\([L_i, R_i]\\)</span> 内，比选中概率最大的一次。</p>\n<p>我们树状数组统计的是 <span class=\"math inline\">\\([1, r]\\)</span> 内的值，所以我们要让概率最大的话，就要让 <span class=\"math inline\">\\(R_i\\)</span> 尽量的小。</p>\n<p>我们记录每个颜色当前合法 <span class=\"math inline\">\\([L_i, R_i]\\)</span> 的最小右端点 <span class=\"math inline\">\\(\\min_R\\)</span>。加入一个新的 <span class=\"math inline\">\\([L_i, R_i]\\)</span> 时，如果 <span class=\"math inline\">\\(R_i\\ge \\min_R\\)</span>，那么不会产生影响，跳过；否则，当 <span class=\"math inline\">\\(R_i&lt;\\min_R\\)</span> 时，我们就要先消除当前 <span class=\"math inline\">\\(\\min_R\\)</span> 的影响（即在树状数组中将该位置加上的 1 减去），再加上 <span class=\"math inline\">\\(R_i\\)</span> 的影响（即在树状数组中加上该位置的 1）。</p>\n<p>此时我们对 <span class=\"math inline\">\\([1, r]\\)</span> 的询问就是答案。</p>\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log n + m\\log m + m\\log n)\\)</span>，其中 <span class=\"math inline\">\\(n\\log n\\)</span> 来自于对 <span class=\"math inline\">\\([L_i, R_i]\\)</span> 的排序，<span class=\"math inline\">\\(m\\log m\\)</span> 来自于对询问的排序，<span class=\"math inline\">\\(m\\log n\\)</span> 来自于离线树状数组。</p>\n</details>\n<p>接下来讲题解给的正解…… 这个是真的妙。</p>\n<p>考虑所有种类数，在 <span class=\"math inline\">\\(n\\)</span> 个数内满足条件的种类 <span class=\"math inline\">\\(x\\)</span> 最优条件下也不过 <span class=\"math inline\">\\(\\dfrac {x\\times (x+1)}2=n\\)</span>，所以满足条件武器的数量最多只有 <span class=\"math inline\">\\(\\sqrt n\\)</span> 级别。</p>\n<p>所以我们对所有合法种类做前缀和，每次询问检查所有合法种类是否在该区间内出现对应次数，然后统计答案。复杂度 <span class=\"math inline\">\\(O(m\\sqrt n + n\\sqrt n)\\)</span>。<span class=\"math inline\">\\(n\\sqrt n\\)</span> 是前面前缀和来的，<span class=\"math inline\">\\(m\\sqrt n\\)</span> 是暴力统计来的。</p>\n<p>但是根号可耻，所以我的法一更 NB！！！🤡🤡🤡</p>\n<details>\n<p><summary>狂拽酷炫吊炸天的法一代码</summary></p>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 1e5 + 5;\nstruct _ &#123;\n    int l, r, k, i;\n    bool operator&lt; (const _ &amp;q) const &#123;\n        return l &lt; q.l;\n    &#125;\n&#125;;\nstruct __ &#123;\n    int l, r, nxt, x;\n    bool operator&lt; (const __ &amp;q) const &#123;\n        return l &lt; q.l;\n    &#125;\n&#125;;\n_ q[maxn];\n__ a[maxn];\nstd::map&lt;int, int&gt; t;\nstd::vector&lt;int&gt; u[maxn];\nint ans[maxn], now[maxn];\nint mnr[maxn], Bit[maxn];\nint n, m, tot, x, cnt, pos;\nint lowbit(int x) &#123; return x &amp; -x; &#125;\nvoid add(int x, int v) &#123;\n    for (int i = x; i &lt;= n; i += lowbit(i))\n        Bit[i] += v;\n    return;\n&#125;\nint ask(int x) &#123;\n    int res = 0;\n    for (int i = x; i; i -= lowbit(i))\n        res += Bit[i];\n    return res;\n&#125;\nint calc(int x, int k) &#123;\n    int res = 1;\n    for (int i = 1; i &lt;= k; ++i)\n        res *= x--;\n    for (int i = 1; i &lt;= k; ++i)\n        res /= i;\n    return res;\n&#125;\nint main() &#123;\n    read(n);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        read(x);\n        if (!t.count(x)) t[x] = ++tot;\n        int id = t[x];\n        u[id].push_back(i);\n        if ((int)u[id].size() &gt;= x) &#123;\n            a[++cnt].l = u[id][(int)u[id].size() - x];\n            a[cnt].r = i, a[now[id]].nxt = cnt;\n            a[cnt].x = x, mnr[x] = n + 1;\n            now[id] = cnt;\n        &#125;\n    &#125;\n    read(m);\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        read(q[i].l), read(q[i].r);\n        read(q[i].k), q[i].i = i;\n    &#125;\n    std::sort(q + 1, q + m + 1);\n    std::sort(a + 1, a + cnt + 1);\n    pos = cnt;\n    for (int i = m; i; --i) &#123;\n        while (a[pos].l &gt;= q[i].l) &#123;\n            if (a[pos].r &lt; mnr[a[pos].x]) &#123;\n                if (mnr[a[pos].x] &lt;= n)\n                    add(mnr[a[pos].x], -1);\n                add(a[pos].r, 1);\n                mnr[a[pos].x] = a[pos].r;\n            &#125;\n            --pos;\n        &#125;\n        ans[q[i].i] = calc(ask(q[i].r), q[i].k);\n    &#125;\n    for (int i = 1; i &lt;= m; ++i)\n        print(ans[i], &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n<p>我甚至打完了就过了样例然后直接就 A 了，好久没有这么爽地过过这种大码量 <del>正确性还未知</del> 的题了。</p>\n</details>\n<p>而且我相信全场只有我一个 <del>小丑</del> 帅哥打离线，所以我是最强的！！！🤡🤡🤡</p>\n<details>\n<p><summary>绝对不如法一的法二代码</summary></p>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxm = 505;\nconst int maxn = 1e5 + 5;\nint a[maxn];\nint cnt[maxn];\nint sum[maxm][maxn];\nint n, tot, m, l, r, k, res;\nint calc(int x, int k) &#123;\n    int res = 1;\n    for (int i = 1; i &lt;= k; ++i)\n        res *= x--;\n    for (int i = 1; i &lt;= k; ++i)\n        res /= i;\n    return res;\n&#125;\nint main() &#123;\n    read(n);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        read(a[i]);\n        if (a[i] &lt;= n) ++cnt[a[i]];\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (cnt[i] &gt;= i) &#123;\n            sum[++tot][n + 1] = i;\n            for (int j = 1; j &lt;= n; ++j)\n                sum[tot][j] = sum[tot][j - 1] + (a[j] == i);\n        &#125;\n    &#125;\n    read(m);\n    while (m--) &#123;\n        read(l), read(r), read(k);\n        res = 0;\n        for (int i = 1; i &lt;= tot; ++i)\n            res += (sum[i][r] - sum[i][l - 1] &gt;= sum[i][n + 1]);\n        print(calc(res, k), &#39;\\n&#39;);\n    &#125;\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"d.-括号序列\">D. 括号序列</h3>\n<p>http://222.180.160.110:61235/contest/4272/problem/4</p>\n<p>呃呃呃，这，有什么好讲的吗？做过原题的应该都会吧……</p>\n<p>反正就是个比较裸的区间 DP，转移的时候注意一下究竟哪些是同一对括号，哪些是相邻括号就好。</p>\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 1e3 + 5;\nint n, res;\nchar s[maxn];\nstd::stack&lt;int&gt; t;\nint mat[maxn], c[5];\nint f[maxn][maxn][3][3];\nint max(int x, int y) &#123; return x &gt; y ? x : y; &#125;\nvoid upd(int &amp;x, int y) &#123; x = max(x, y); return; &#125;\nint main() &#123;\n    memset(f, -0x3f, sizeof (f));\n    scanf(&quot;%d %d %d&quot;, &amp;n, &amp;c[1], &amp;c[2]);\n    scanf(&quot;%s&quot;, s + 1);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (s[i] == &#39;(&#39;) t.push(i);\n        else mat[t.top()] = i, t.pop();\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (mat[i] == i + 1) &#123;\n            for (int k = 0; k &lt;= 2; ++k)\n                f[i][i + 1][k][k] = c[k];\n        &#125;\n    &#125;\n    for (int l = 4; l &lt;= n; l += 2) &#123;\n        for (int i = 1; i &lt;= n - l + 1; ++i) &#123;\n            int j = i + l - 1;\n            if (mat[i] == j) &#123;\n                // ((...))\n                // xy...zx\n                for (int x = 0; x &lt;= 2; ++x) &#123;\n                    for (int y = 0; y &lt;= 2; ++y) &#123;\n                        if (y == x) continue;\n                        for (int z = 0; z &lt;= 2; ++z) &#123;\n                            if (z == x) continue;\n                            upd(f[i][j][x][x], f[i + 1][j - 1][y][z] + c[x]);\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;\n            else &#123;\n                // ()(...)\n                // xxy...z\n                for (int x = 0; x &lt;= 2; ++x) &#123;\n                    for (int y = 0; y &lt;= 2; ++y) &#123;\n                        if (y == x) continue;\n                        for (int z = 0; z &lt;= 2; ++z)\n                            upd(f[i][j][x][z], f[i][mat[i]][x][x] + f[mat[i] + 1][j][y][z]);\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n    for (int i = 0; i &lt;= 2; ++i) &#123;\n        for (int j = 0; j &lt;= 2; ++j)\n            res = max(res, f[1][n][i][j]);\n    &#125;\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062</code></pre>\n</details>\n",
            "tags": [
                "树状数组",
                "区间 DP"
            ]
        }
    ]
}