{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"上下界网络流\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20230729/",
            "url": "https://xsc062.netlify.app/20230729/",
            "title": "矩阵",
            "date_published": "2023-07-29T07:38:36.000Z",
            "content_html": "<p>Solution to <a href=\"http://222.180.160.110:61235/contest/3825/problem/7\">BZOJ2406 矩阵</a>。</p>\n<span id=\"more\"></span>\n<hr />\n<blockquote>\n<p>赛时公告</p>\n<p>现在呢？：现在有弹窗了吗 「2023-07-19 16:45:07」</p>\n</blockquote>\n<p>此时无声胜有声。</p>\n<hr />\n<h3 id=\"f.bzoj2406矩阵\">F.「BZOJ2406」矩阵</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3825/problem/7\" class=\"uri\">http://222.180.160.110:61235/contest/3825/problem/7</a></p>\n<p>这是头一次见识到把矩阵和网络流结合在一起的题目。不过这种处理方式也是我们在学习二分图时的常客了：把行和列连边表示某一元素。</p>\n<p>我们发现 <span class=\"math inline\">\\(B_{i, j}\\)</span> 有给定的上下界，故我们考虑 <strong>上下界网络流</strong>。那怎么去表示 <span class=\"math inline\">\\(B_{i, j}\\)</span> 呢？这就要联系到我们刚刚说过的连边方式：用边 <span class=\"math inline\">\\(i\\to j\\)</span> 的流量来表示 <span class=\"math inline\">\\(B_{i, j}\\)</span>，有 <span class=\"math inline\">\\([L, R]\\)</span> 的上下界。</p>\n<p>可是我们除了 <span class=\"math inline\">\\([L,R]\\)</span> 的限制，还有最大值这个条件呀，怎么办呢？</p>\n<p>注意到题目要求最大的最小，自然想到二分答案。设答案为 <span class=\"math inline\">\\(x\\)</span>，则我们需要保证每行每列的答案都 <span class=\"math inline\">\\(\\le x\\)</span>。每行每列，这刚好是我们的建点方式。这对点本身作出了要求，这套路我们熟，让大源点向行连边、列向大汇点连边就好。</p>\n<p>那么这些边的上下界怎么办呢？我们已知 <span class=\"math inline\">\\(|S_A-S_B|\\le x\\)</span>，那么变形得：</p>\n<p><span class=\"math display\">\\[\n\\begin{cases}\nS_B\\ge S_A-x &amp;(S_B \\le S_A) \\\\\nS_B\\le S_A+x &amp;(S_B \\ge S_A)\n\\end{cases}\n\\]</span></p>\n<p>照理来说，两行的符号相反，我们现在已经得到了一个具有对称美的上下界：<span class=\"math inline\">\\(S_A-x\\le S_B\\le S_A+x\\)</span>，就应该速速连边了，可是我怎么看都觉得不舒坦：这个不等式可是带条件的，就这么直接拿来做上下界真的没问题吗？</p>\n<p><del>答案是没问题，因为我看的题解是这么写的</del> 本着探索求真精神，我们考虑尊重原不等式（因为原不等式的每一行刚好也有两个相反的符号），将这些边拆成两条，一条的上下界是 <span class=\"math inline\">\\([S_A-x, S_A]\\)</span>，另一条是 <span class=\"math inline\">\\([S_A,S_A+x]\\)</span>。6。我明白题解为什么这么写了，一个的下界就是另一个的上界，那直接合并不就行了，这个 naive trick 题解都不屑于写出来。</p>\n<p>然后跑个可行流就可以了。注意要保证边的下界为非负。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int lim = 2e5;\nconst int maxn = 405;\nconst int inf = 1e18;\nconst int maxm = 3e5 + 5;\nstruct _ &#123;\n    int v, w, n;\n    _() &#123;&#125;\n    _(int v1, int w1, int n1) &#123;\n        v = v1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nint gs, gt, tot;\nint a[maxn][maxn];\nint l, mid, r, res;\nint h[maxn], dif[maxn];\nint n, m, cnt, s, t, L, R;\nint vis[maxn], now[maxn], dep[maxn];\nint max(int x, int y) &#123; return x &gt; y ? x : y; &#125;\nint min(int x, int y) &#123; return x &lt; y ? x : y; &#125;\nbool BFS(int n) &#123;\n    std::fill(vis + 1, vis + n + 1, 0);\n    std::fill(dep + 1, dep + n + 1, 0); \n    std::queue&lt;int&gt; q;\n    dep[gs] = 1, vis[gs] = 1;\n    q.push(gs), now[gs] = h[gs];\n    while (!q.empty()) &#123;\n        int f = q.front(); q.pop();\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            int v = u[i].v, w = u[i].w;\n            if (vis[v] == 1 || w == 0) continue;\n            vis[v] = 1, now[v] = h[v];\n            dep[v] = dep[f] + 1, q.push(v);\n            if (v == gt) return 1;\n        &#125;\n    &#125;\n    return 0;\n&#125;\nint findP(int x, int flow = inf) &#123;\n    if (x == gt) return flow;\n    int rest = flow, i;\n    for (i = now[x]; rest &amp;&amp; i; i = u[i].n) &#123;\n        now[x] = i;\n        int v = u[i].v, w = u[i].w;\n        if (dep[v] != dep[x] + 1 || w == 0) continue;\n        int t = findP(v, min(rest, w));\n        if (t == 0) dep[v] = 0;\n        rest -= t, u[i].w -= t, u[i ^ 1].w += t;\n    &#125;\n    return flow - rest;\n&#125;\nint Dinic(int n) &#123;\n    int res = 0;\n    while (BFS(n)) &#123;\n        int t = findP(gs);\n        while (t) res += t, t = findP(gs);\n    &#125;\n    return res;\n&#125;\nvoid add(int x, int y, int w) &#123;\n    u[++tot] = _(y, w, h[x]), h[x] = tot;\n    return;\n&#125;\nvoid add(int x, int y, int d, int u) &#123;\n    add(x, y, u - d), add(y, x, 0);\n    dif[x] -= d, dif[y] += d;\n    return;\n&#125;\nvoid Init(void) &#123;\n    tot = 1, cnt = 0;\n    memset(h, 0, sizeof (h));\n    memset(dif, 0, sizeof (dif));\n    return;\n&#125;\nbool check(int x) &#123;\n    Init();\n    s = n + m + 1, t = s + 1;\n    add(t, s, inf), add(s, t, 0);\n    gs = t + 1, gt = t + 2;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= m; ++j)\n            add(i, j + n, L, R);\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        int sum = 0;\n        for (int j = 1; j &lt;= m; ++j)\n            sum += a[i][j];\n        add(s, i, max(0, sum - x), sum + x);\n    &#125;\n    for (int j = 1; j &lt;= m; ++j) &#123;\n        int sum = 0;\n        for (int i = 1; i &lt;= n; ++i)\n            sum += a[i][j];\n        add(j + n, t, max(sum - x, 0), sum + x);\n    &#125;\n    for (int i = 1; i &lt;= t; ++i) &#123;\n        if (dif[i] &lt; 0)\n            add(i, gt, -dif[i]), add(gt, i, 0);\n        else if (dif[i] &gt; 0) &#123;\n            add(gs, i, dif[i]);\n            add(i, gs, 0), cnt += dif[i];\n        &#125;\n    &#125;\n    return (Dinic(gt) == cnt);\n&#125;\nint main() &#123;\n    read(n), read(m);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= m; ++j)\n            read(a[i][j]);\n    &#125;\n    read(L), read(R);\n    l = 0, r = lim, res = -1;\n    while (l &lt;= r) &#123;\n        mid = (l + r) &gt;&gt; 1;\n        if (check(mid))\n            res = mid, r = mid - 1;\n        else l = mid + 1;\n    &#125;\n    print(res);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<p>你最好有要事相求.jpg</p>\n",
            "tags": [
                "网络流",
                "二分",
                "上下界网络流"
            ]
        }
    ]
}