{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"长链剖分\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20250803/",
            "url": "https://xsc062.netlify.app/20250803/",
            "title": "树 DP",
            "date_published": "2025-08-03T03:44:54.000Z",
            "content_html": "<p>树上的 DP 以及 和树有关的 DP</p>\n<span id=\"more\"></span>\n<hr />\n<h2 id=\"a---svjetlo\">A - Svjetlo</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P7163\" class=\"uri\">https://www.luogu.com.cn/problem/P7163</a></p>\n<p>很容易想到一种状态设计，即令 <span class=\"math inline\">\\(f_{x,0/1/2}\\)</span> 分别表示有 <span class=\"math inline\">\\(0/1/2\\)</span> 个端点在子树内部的情况；然后就开始思考，如何满足对于开关状态的要求？</p>\n<p>还是想少了。如果再加一维，从『状态为开或关』思考就会轻松很多，令 <span class=\"math inline\">\\(f_{x,0/1/2,0/1}\\)</span> 表示有 <span class=\"math inline\">\\(0/1/2\\)</span> 个端点再子树外部，且子树内操作完后 <span class=\"math inline\">\\(x\\)</span> 为关 / 开的最少步数。然后分类讨论转移方式即可。</p>\n<p>一个比较方便的讨论方式是，先确定某种情况下，访问 <span class=\"math inline\">\\(u\\)</span> 与 <span class=\"math inline\">\\(v\\)</span> 的次数，然后就可以得到它们原本的状态。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, rt = -1;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        char t;\n        std::cin &gt;&gt; t;\n        a[i] = t - &#39;0&#39;;\n        if (!a[i])\n            rt = i;\n    &#125;\n    if (rt == -1) &#123;\n        std::cout &lt;&lt; 0 &lt;&lt; &#39;\\n&#39;;\n        return 0;\n    &#125;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    std::vector&lt;int&gt; tag(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        tag[x] = a[x];\n        for (auto i : g[x])\n            if (i != fa)\n                DFS(i, x), tag[x] &amp;= tag[i];\n        return;\n    &#125;;\n    DFS(rt, -1);\n    std::vector&lt;std::vector&lt;std::vector&lt;int&gt; &gt; &gt; f(n + 1, std::vector&lt;std::vector&lt;int&gt; &gt; (3, std::vector&lt;int&gt; (2, 0x3f3f3f3f)));\n    DFS = [&amp;](int x, int fa) &#123;\n        f[x][0][a[x]] = 0;\n        for (auto i : g[x])\n            if (i != fa &amp;&amp; !tag[i]) &#123;\n                DFS(i, x);\n                auto g = f[x];\n                f[x][0][0] = std::min(g[0][0] + f[i][0][1] + 4, g[0][1] + f[i][0][0] + 2);\n                f[x][0][1] = std::min(g[0][1] + f[i][0][1] + 4, g[0][0] + f[i][0][0] + 2);\n                f[x][1][0] = std::min(&#123; g[1][0] + f[i][0][1] + 4, g[1][1] + f[i][0][0] + 2, g[0][0] + f[i][1][0] + 3, g[0][1] + f[i][1][1] + 1 &#125;);\n                f[x][1][1] = std::min(&#123; g[1][1] + f[i][0][1] + 4, g[1][0] + f[i][0][0] + 2, g[0][1] + f[i][1][0] + 3, g[0][0] + f[i][1][1] + 1 &#125;);\n                f[x][2][0] = std::min(&#123; g[2][0] + f[i][0][1] + 4, g[2][1] + f[i][0][0] + 2, g[1][0] + f[i][1][1], g[1][1] + f[i][1][0] + 2, g[0][0] + f[i][2][1] + 4, g[0][1] + f[i][2][0] + 2 &#125;);\n                f[x][2][1] = std::min(&#123; g[2][1] + f[i][0][1] + 4, g[2][0] + f[i][0][0] + 2, g[1][1] + f[i][1][1], g[1][0] + f[i][1][0] + 2, g[0][1] + f[i][2][1] + 4, g[0][0] + f[i][2][0] + 2 &#125;);\n            &#125;\n        f[x][1][0] = std::min(f[x][1][0], f[x][0][1] + 1);\n        f[x][1][1] = std::min(f[x][1][1], f[x][0][0] + 1);\n        f[x][2][0] = std::min(f[x][2][0], f[x][1][0]);\n        f[x][2][1] = std::min(f[x][2][1], f[x][1][1]);\n        // for (int i = 0; i &lt; 3; ++i)\n        //     for (int j = 0; j &lt; 2; ++j)\n        //         printf(&quot;f[%d][%d][%d] = %d\\n&quot;, x, i, j, f[x][i][j]);\n        return;\n    &#125;;\n    DFS(rt, -1);\n    std::cout &lt;&lt; f[rt][2][1] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"b---one-to-one\">B - One to One</h2>\n<p><a href=\"https://atcoder.jp/contests/arc140/tasks/arc140_d\" class=\"uri\">https://atcoder.jp/contests/arc140/tasks/arc140_d</a></p>\n<p>观察原图上连通块，发现要么是没有未确定边的基环树，要么是有恰好一条未确定边的树。缩点，任意为未确定边赋值，考察最后得到的连通块，发现要么是以『基环树点』为根的树，要么是不包含『基环树点』的（内向）基环树。</p>\n<p>这里要用到贡献的思想。考虑将全局划分为若干个部分，保证每部分的单步价值是可确定的。将第一步，即对树和基环树的讨论拆开，对于树，其数量确定；对于基环树，发现环的数量即为基环树的数量，进一步将所有步中的『环』这一类分开，统计成环的方案数就可以得到基环树的贡献。具体地，令 <span class=\"math inline\">\\(f_{i,j}\\)</span> 为在前 <span class=\"math inline\">\\(i\\)</span> 个点中选择 <span class=\"math inline\">\\(j\\)</span> 个成一个环的方案数，则有：</p>\n<p><span class=\"math display\">\\[\nf_{i,j}=f_{i-1,j}+f_{i-1,j-1}\\times siz_i\n\\]</span></p>\n<p>最后计算每个环的贡献即可。注意还要算上环内部的排列（注意循环位移）。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1), tag(n + 1), s(n + 1, 1), fa(n + 1), siz(n + 1);\n    std::iota(fa.begin() + 1, fa.end(), 1);\n    std::function&lt;int(int)&gt; find = [&amp;](int x) &#123;\n        return x == fa[x] ? x : fa[x] = find(fa[x]);\n    &#125;;\n    auto merge = [&amp;](int x, int y) &#123;\n        x = find(x), y = find(y);\n        if (x != y) &#123;\n            tag[y] += tag[x];\n            s[y] += s[x];\n            fa[x] = y;\n        &#125;\n        return;\n    &#125;;\n    for (int i = 1; i &lt;= n; ++i)  &#123;\n        std::cin &gt;&gt; a[i], fa[i] = i;\n        if (a[i] == -1)\n            tag[i] = 1;\n        else\n            merge(i, a[i]);\n    &#125;\n    int cnt1 = 0, cnt2 = 0;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        cnt1 += (fa[i] == i &amp;&amp; !tag[i]);\n        if (fa[i] == i &amp;&amp; tag[i])\n            siz[++cnt2] = s[i];\n    &#125;\n    auto qkp = [&amp;](long long x, int y) &#123;\n        auto res(1ll);\n        for (; y; (x *= x) %= mod, y &gt;&gt;= 1)\n            if (y &amp; 1)\n                (res *= x) %= mod;\n        return res;\n    &#125;;\n    auto res(cnt1 * qkp(n, cnt2) % mod);\n    std::vector&lt;std::vector&lt;long long&gt; &gt; f(cnt2 + 1, std::vector&lt;long long&gt; (cnt2 + 1));\n    f[0][0] = 1ll;\n    for (int i = 1; i &lt;= cnt2; ++i) &#123;\n        // printf(&quot;i = %d, siz = %d: \\n&quot;, i, siz[i]);\n        for (int j = 0; j &lt;= i; ++j) &#123;\n            f[i][j] = f[i - 1][j];\n            if (j != 0)\n                (f[i][j] += f[i - 1][j - 1] * siz[i]) %= mod;\n            // printf(&quot;  f[%d][%d] = %lld\\n&quot;, i, j, f[i][j]);\n        &#125;\n    &#125;\n    for (int i = 1; i &lt;= cnt2; ++i) &#123;\n        static auto fac(1ll);\n        (res += f[cnt2][i] * fac % mod * qkp(n, cnt2 - i) % mod) %= mod;\n        (fac *= i) %= mod;\n    &#125;\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"c---diameter-cuts\">C - Diameter Cuts</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/1499/F\" class=\"uri\">https://codeforces.com/problemset/problem/1499/F</a></p>\n<p>令 <span class=\"math inline\">\\(f_{x,i}\\)</span> 表示 <span class=\"math inline\">\\(x\\)</span> 上的最长链长为 <span class=\"math inline\">\\(i\\)</span> 的方案数，就可以用一个类似背包的过程求答案了。发现这个背包满足可以被优化的形式，故能在 <span class=\"math inline\">\\(O(nk)\\)</span> 内解决问题。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, k;\n    std::cin &gt;&gt; n &gt;&gt; k, ++k;\n    if (k == 0) &#123;\n        std::cout &lt;&lt; 1 &lt;&lt; &#39;\\n&#39;;\n        return 0;\n    &#125;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    std::vector&lt;int&gt; h(n + 1);\n    std::vector&lt;std::vector&lt;long long&gt; &gt; f(n + 1, std::vector&lt;long long&gt; (k + 1));\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        f[x][1] = 1ll, h[x] = 1;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                std::vector&lt;long long&gt; g(k + 1);\n                g.swap(f[x]);\n                for (int j = std::min(h[x], k); j; --j)\n                    for (int l = std::min(h[i], k - j); ~l; --l)\n                        (f[x][std::max(j, l + 1)] += g[j] * f[i][l] % mod) %= mod;\n                h[x] = std::max(h[x], h[i] + 1);\n            &#125;\n        for (int i = 1; i &lt;= h[x] &amp;&amp; i &lt;= k; ++i)\n            (f[x][0] += f[x][i]) %= mod;\n        // for (int i = 0; i &lt;= h[x] &amp;&amp; i &lt;= k; ++i)\n        //     printf(&quot;f[%d][%d] = %lld\\n&quot;, x, i, f[x][i]);\n        return;\n    &#125;;\n    DFS(1, -1);\n    auto res(0ll);\n    for (int i = 1; i &lt;= k; ++i)\n        (res += f[1][i]) %= mod;\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"d---leaf-partition\">D - Leaf Partition</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/1146/F\" class=\"uri\">https://codeforces.com/problemset/problem/1146/F</a></p>\n<p>假设已经完成分组，欲判定这种方式是否合法，容易想到对每一组叶子建立虚树，则该分组方式合法，当且仅当没有一个点被多个虚树占用。也即，我们需要在总的虚树上选出一些点，让它们可以覆盖所有叶子。</p>\n<p>虚树上 DP，容易发现当且仅当存在 <span class=\"math inline\">\\(\\ge 2\\)</span> 个儿子想要分进同一个虚树时，<span class=\"math inline\">\\(i\\)</span> 会被选到。故令 <span class=\"math inline\">\\(f_{i, 0/1/2}\\)</span> 表示当前有 <span class=\"math inline\">\\(0/1/\\ge 2\\)</span> 个儿子想要选择 <span class=\"math inline\">\\(i\\)</span> 时的方案数，DP 即可。</p>\n<p>在实现的过程中就会发现根本不需要求虚树，原树上 DP 就可以了。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; fa(n + 1);\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 2; i &lt;= n; ++i)\n        std::cin &gt;&gt; fa[i], g[fa[i]].push_back(i);\n    std::vector&lt;std::array&lt;long long, 3&gt; &gt; f(n + 1);\n    std::function&lt;void(int)&gt; DFS = [&amp;](int x) &#123;\n        if (g[x].empty())\n            f[x][2] = 1ll;\n        else\n            f[x][0] = 1ll;\n        for (auto i : g[x]) &#123;\n            DFS(i);\n            auto F0 = (f[i][0] + f[i][2]) % mod, F1 = (f[i][1] + f[i][2]) % mod;\n            f[x][2] = (f[x][2] * F0 % mod + f[x][2] * F1 % mod + f[x][1] * F1 % mod) % mod;\n            f[x][1] = (f[x][1] * F0 % mod + f[x][0] * F1 % mod) % mod;\n            (f[x][0] *= F0) %= mod;\n        &#125;\n        // printf(&quot;%d: %lld / %lld / %lld\\n&quot;, x, f[x][0], f[x][1], f[x][2]);\n        return;\n    &#125;;\n    DFS(1);\n    std::cout &lt;&lt; (f[1][0] + f[1][2]) % mod &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"e---uniformly-branched-trees\">E - Uniformly Branched Trees</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/724/F\" class=\"uri\">https://codeforces.com/problemset/problem/724/F</a></p>\n<p>感觉是很常见的套路，但是我不会 😱</p>\n<p>在手玩样例的时候可以感性认知到，每个树会被每种点作为根的情况统计一次。且如果固定以某种（化学环境）的点为根，可以通过按 siz 从小到大排列唯一求解出该树。</p>\n<p>发现以重心为根（即钦定根为重心）可以带来很多优美的性质。因为 siz 是好确定的，且是儿子的排序依据，所以选重心便于统计，同时满足每种树最多被统计两次（当且仅当有两个重心）。</p>\n<p>发现这就变成了多重集的组合数，设 <span class=\"math inline\">\\(f_{i,j,k}\\)</span> 表示已经花费 <span class=\"math inline\">\\(i\\)</span> 个点组成一个子树，子树的根节点当前已经确认了 <span class=\"math inline\">\\(j\\)</span> 个儿子，最靠右的一个 siz <span class=\"math inline\">\\(\\le k\\)</span> 的方案数。得到 <span class=\"math inline\">\\(f_{i,j,k}=\\sum_{x=0} f_{i-x\\cdot k,j-x,k-1}\\cdot \\binom{f_{k,d-1,k}+x-1}{x}\\)</span>（相当于将 <span class=\"math inline\">\\(x\\)</span> 个无标号的位置 / 球分配给 <span class=\"math inline\">\\(f_{k,d-1,k}\\)</span> 个有标号的选项 / 盒子，插板即可）。</p>\n<p>若 <span class=\"math inline\">\\(n\\)</span> 为奇数，则可直接输出 <span class=\"math inline\">\\(f_{n,d,\\lfloor\\frac n2\\rfloor}\\)</span>；若 <span class=\"math inline\">\\(n\\)</span> 为偶数，则可能存在两个重心，即需要统计拥有两个重心，且以两个重心分别为根时长相不同的树种类。这种情况下显然存在一条边，左右两边 siz 相同且长相不同。故数量为 <span class=\"math inline\">\\(\\binom{f_{\\lfloor \\frac n2\\rfloor, d-1,\\lfloor \\frac n2\\rfloor}}{2}\\)</span>，容斥掉即可。</p>\n<p>需要特判 <span class=\"math inline\">\\(n\\le2\\)</span> 的情况。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n, d, mod;\n    std::cin &gt;&gt; n &gt;&gt; d &gt;&gt; mod;\n    if (n &lt;= 2) &#123;\n        std::cout &lt;&lt; 1 &lt;&lt; &#39;\\n&#39;;\n        return 0;\n    &#125;\n    using arr = std::vector&lt;long long&gt;;\n    using brr = std::vector&lt;arr&gt;;\n    using crr = std::vector&lt;brr&gt;;\n    auto qkp = [&amp;](long long x, int y) &#123;\n        auto res(1ll);\n        for (; y; (x *= x) %= mod, y &gt;&gt;= 1)\n            if (y &amp; 1)\n                (res *= x) %= mod;\n        return res;\n    &#125;;\n    arr inv(d + 1);\n    inv[0] = inv[1] = 1ll;\n    auto fac = 1ll;\n    for (int i = 2; i &lt;= d; ++i) &#123;\n        (fac *= i) %= mod;\n        inv[i] = qkp(fac, mod - 2);\n    &#125;\n    auto C = [&amp;](long long n, int m) &#123;\n        if (m == 0)\n            return 1ll;\n        if (m &gt; n)\n            return 0ll;\n        auto res(1ll);\n        for (auto i = 0; i &lt; m; ++i)\n            (res *= n - i) %= mod;\n        return res * inv[m] % mod;\n    &#125;;\n    crr f(n + 1, brr(d + 1, arr(n / 2 + 1)));\n    f[1][0][0] = 1ll;\n    for (int i = 1; i &lt;= n; ++i)\n        for (int j = 0; j &lt;= d &amp;&amp; 1 + j &lt;= i; ++j) &#123;\n            for (int x = 0; x &lt;= j &amp;&amp; x &lt;= i; ++x)\n                f[i][j][1] += f[i - x][j - x][0];\n            f[i][j][1] %= mod;\n            for (int k = 2; k &lt;= n / 2; ++k) &#123;\n                // bool flag = (i == 10 &amp;&amp; j == 3 &amp;&amp; k == 3);\n                for (int x = 0; x &lt;= j &amp;&amp; x * k &lt;= i; ++x) &#123;\n                    f[i][j][k] += f[i - x * k][j - x][k - 1] * C(f[k][d - 1][k - 1] + x - 1, x);\n                    // if (flag)\n                    //     printf(&quot;x = %d, f[%d][%d][%d](%lld) * C(%lld, %d)(%lld)\\n&quot;, x, i - x * k, j - x, k - 1, f[i - x * k][j - x][k - 1], f[k][d - 1][k - 1] + x - 1, x, C(f[k][d - 1][k - 1] + x - 1, x));\n                &#125;\n                f[i][j][k] %= mod;\n            &#125;\n        &#125;\n    // for (int i = 1; i &lt;= n; ++i)\n    //     for (int j = 0; j &lt;= d &amp;&amp; j &lt;= i - 1; ++j, puts(&quot;&quot;))\n    //         for (int k = 0; k &lt;= n / 2; ++k) &#123;\n    //             printf(&quot;f[%d][%d][%d] = %lld\\n&quot;, i, j, k, f[i][j][k]);\n    //         &#125;\n    if (n &amp; 1)\n        std::cout &lt;&lt; f[n][d][n / 2] &lt;&lt; &#39;\\n&#39;;\n    else &#123;\n        auto res(f[n][d][n / 2]);\n        res = (res + mod - C(f[n / 2][d - 1][n / 2 - 1], 2)) % mod;\n        std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    &#125;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"a---dominant-indices\">A - Dominant Indices</h2>\n<p><a href=\"https://codeforces.com/problemset/problem/1009/F\" class=\"uri\">https://codeforces.com/problemset/problem/1009/F</a></p>\n<p>长剖板子；难点在于可能要复习一下长剖怎么写。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    std::vector&lt;int&gt; h(n + 1), son(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        h[x] = 1;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                h[x] = std::max(h[x], h[i] + 1);\n                if (h[i] &gt; h[son[x]])\n                    son[x] = i;\n            &#125;\n        return;\n    &#125;;\n    DFS(1, -1);\n    std::vector&lt;int&gt; _f(2 * n + 1), res(n + 1);\n    auto pos(_f.begin());\n    std::vector&lt;decltype(pos)&gt; f(n + 1);\n    DFS = [&amp;](int x, int fa) &#123;\n        ++f[x][0];\n        if (!son[x]) &#123;\n            res[x] = 0;\n            return;\n        &#125;\n        f[son[x]] = std::next(f[x]);\n        DFS(son[x], x);\n        int mx = -std::max(std::make_pair(f[x][res[son[x]] + 1], -(res[son[x]] + 1)), std::make_pair(1, 0)).second;\n        for (auto i : g[x])\n            if (i != fa &amp;&amp; i != son[x]) &#123;\n                f[i] = pos, pos = std::next(pos, h[i] + 1);\n                DFS(i, x);\n                for (int j = 0; j &lt;= h[i]; ++j) &#123;\n                    f[x][j + 1] += f[i][j];\n                    if (j + 1 != mx &amp;&amp; std::make_pair(f[x][j + 1], -(j + 1)) &gt; std::make_pair(f[x][mx], -mx))\n                        mx = j + 1;\n                &#125;\n            &#125;\n        // printf(&quot;%d: &quot;, x);\n        // for (int i = 0; i &lt;= h[x]; ++i)\n        //     printf(&quot;%d &quot;, f[x][i]);\n        // puts(&quot;&quot;);\n        res[x] = mx;\n        return;\n    &#125;;\n    f[1] = pos, pos = std::next(pos, h[1]);\n    DFS(1, -1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cout &lt;&lt; res[i] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"b---树上异或\">B - 树上异或</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P9745\" class=\"uri\">https://www.luogu.com.cn/problem/P9745</a></p>\n<p>和 <a href=\"#a---svjetlo\">Svjetlo</a> 很像，把连通块的异或和放到状态里，拆位后令 <span class=\"math inline\">\\(f_{i,j,0/1}\\)</span> 表示点 <span class=\"math inline\">\\(i\\)</span> 所在的连通块在第 <span class=\"math inline\">\\(j\\)</span> 位异或和为 <span class=\"math inline\">\\(0/1\\)</span> 的权值（<strong>不计 <span class=\"math inline\">\\(i\\)</span> 所在连通块</strong>），转移即可。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int mod = 998244353;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;long long&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i)\n        std::cin &gt;&gt; a[i];\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 2, x; i &lt;= n; ++i) &#123;\n        std::cin &gt;&gt; x;\n        g[x].push_back(i), g[i].push_back(x);\n    &#125;\n    std::vector&lt;long long&gt; dp(n + 1);\n    std::vector&lt;std::array&lt;std::array&lt;long long, 2&gt;, 60&gt; &gt; f(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        for (int i = 0; i &lt; 60; ++i)\n            f[x][i][(a[x] &gt;&gt; i) &amp; 1] = 1ll;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                for (int j = 0; j &lt; 60; ++j) &#123;\n                    auto f1 = f[x][j];\n                    f[x][j][0] = (f1[0] * dp[i] % mod + f1[0] * f[i][j][0] % mod + f1[1] * f[i][j][1] % mod) % mod;\n                    f[x][j][1] = (f1[1] * dp[i] % mod + f1[0] * f[i][j][1] % mod + f1[1] * f[i][j][0] % mod) % mod;\n                &#125;\n            &#125;\n        for (int i = 0; i &lt; 60; ++i)\n            dp[x] += (1ll &lt;&lt; i) % mod * f[x][i][1] % mod;\n        dp[x] %= mod;\n        return;\n    &#125;;\n    DFS(1, -1);\n    std::cout &lt;&lt; dp[1] &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"c---一个网的路\">C - 一个网的路</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P8595\" class=\"uri\">https://www.luogu.com.cn/problem/P8595</a></p>\n<p>首先需要意识到，树和链的边数是一样的，炸掉了多少条边，在之后就会花多少代价补回来。故炸一个点的代价为度数 +1。对于一个点 <span class=\"math inline\">\\(u\\)</span>，分为四种可能性：</p>\n<ul>\n<li>被炸了，单独作为一个连通块。</li>\n<li>没被炸，儿子全部被炸了。</li>\n<li>没被炸，有 1 个儿子没被炸。</li>\n<li>没被炸，有 2 个儿子没被炸。</li>\n</ul>\n<p>分别用 <span class=\"math inline\">\\(f_{u,0/1/2/3}\\)</span> 代表上面四种可能性，转移即可。</p>\n<p>贺了个 fread，擦边跑过了。这个不是 <span class=\"math inline\">\\(O(n)\\)</span> 的吗？</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int LEN = (1 &lt;&lt; 20);\n#ifdef ONLINE_JUDGE\nint nec(void) &#123;\n    static char buf[LEN], *p = buf, *e = buf;\n    if (p == e) &#123;\n        e = buf + fread(buf, 1, LEN, stdin);\n        if (e == buf) return EOF;\n        p = buf;\n    &#125;\n    return *p++;\n&#125;\n#else\n#define nec getchar\n\n#endif\nbool read(int &amp;x) &#123;\n    x = 0;\n    bool f = 0;\n    char ch = nec();\n    while (ch &lt; &#39;0&#39; || ch &gt; &#39;9&#39;) &#123;\n        if (ch == EOF) return 0;\n        if (ch == &#39;-&#39;) f = 1;\n        ch = nec();\n    &#125;\n    while (ch &gt;= &#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;) &#123;\n        x = x * 10 + ch - &#39;0&#39;;\n        ch = nec();\n    &#125;\n    if (f) x = -x;\n    return 1;\n&#125;\nvoid print(int x) &#123;\n    if (x &lt; 0)\n        putchar(&#39;-&#39;), x = -x;\n    if (x &gt;= 10) print(x / 10);\n    putchar(x % 10 + &#39;0&#39;);\n    return;\n&#125;\nvoid print(int x, char ch) &#123;\n    print(x), putchar(ch);\n    return;\n&#125;\nint main() &#123;\n    int n, m;\n    read(n), read(m);\n    int res = (n - 1) - m;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int x, y; m--; ) &#123;\n        read(x), read(y);\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    std::vector&lt;int&gt; tag(n + 1);\n    std::vector&lt;std::array&lt;int, 4&gt; &gt; f(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        tag[x] = 1;\n        f[x][0] = (fa != -1) + 1;\n        f[x][2] = f[x][3] = 0x3f3f3f3f;\n        for (auto i : g[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                f[x][3] = std::min(f[x][3] + f[i][0], f[x][2] + std::min(f[i][1], f[i][2]));\n                f[x][2] = std::min(f[x][2] + f[i][0], f[x][1] + std::min(f[i][1], f[i][2]));\n                f[x][1] += f[i][0];\n                f[x][0] += std::min(&#123; f[i][0] - 1, f[i][1], f[i][2], f[i][3] &#125;) + 1;\n            &#125;\n        return;\n    &#125;;\n    for (int i = 1; i &lt;= n; ++i)\n        if (!tag[i]) &#123;\n            DFS(i, -1);\n            res += *std::min_element(f[i].begin(), f[i].end());\n        &#125;\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"d---随机树\">D - 随机树</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P3830\" class=\"uri\">https://www.luogu.com.cn/problem/P3830</a></p>\n<p>对于第一问，令 <span class=\"math inline\">\\(f_x\\)</span> 表示共有 <span class=\"math inline\">\\(x\\)</span> 个叶子时的期望深度，两个新叶子的期望深度为 <span class=\"math inline\">\\(f_{x-1}+1\\)</span>，delta 为 <span class=\"math inline\">\\(f_{x-1}+2\\)</span>，故有 <span class=\"math inline\">\\(f_x=\\dfrac {(x-1)f_{x-1}+f_{x-1}+2}x\\)</span>，递推即可。</p>\n<p>对于第二问，令 <span class=\"math inline\">\\(f_{x,k}\\)</span> 表示有 <span class=\"math inline\">\\(x\\)</span> 个叶子，深度 <span class=\"math inline\">\\(\\ge k\\)</span> 的概率（一种理解是从整数概率公式的角度出发）。则考虑枚举左、右叶子数，对于左侧叶子数为 <span class=\"math inline\">\\(i\\)</span> 的情况，<strong>为了去重，只选择深度为 <span class=\"math inline\">\\(k-1\\)</span> 的叶子展开</strong>。只考虑某种组合的出现概率，为 <span class=\"math inline\">\\(f_{i,k-1}+f_{x-i,k-1}-f_{i,k-1}\\cdot f_{x-i,k-1}\\)</span>。数归可以证明，对于任意 <span class=\"math inline\">\\(i\\)</span>，深度为 <span class=\"math inline\">\\(k-1\\)</span> 的叶子被选中的概率均为 <span class=\"math inline\">\\(\\dfrac 1{x-1}\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int q, n;\n    std::cin &gt;&gt; q &gt;&gt; n;\n    std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(6);\n    if (q == 1) &#123;\n        std::vector&lt;double&gt; f(n + 1);\n        for (int i = 2; i &lt;= n; ++i)\n            f[i] = (f[i - 1] * (i - 1) + f[i - 1] + 2.) / i;\n        std::cout &lt;&lt; f[n] &lt;&lt; &#39;\\n&#39;;\n    &#125;\n    else &#123;\n        std::vector&lt;std::vector&lt;double&gt; &gt; f(n + 1, std::vector&lt;double&gt; (n + 1));\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            f[i][0] = 1.;\n            for (int j = 1; j &lt; i; ++j) &#123;\n                auto s(0.);\n                for (int k = 1; k &lt; i; ++k)\n                    s += f[k][j - 1] + f[i - k][j - 1] - f[k][j - 1] * f[i - k][j - 1];\n                f[i][j] = s / (i - 1);\n            &#125;\n        &#125;\n        auto res(0.);\n        for (int i = 1; i &lt; n; ++i)\n            res += f[n][i];\n        std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    &#125;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h2 id=\"e---complete-compress\">E - Complete Compress</h2>\n<p><a href=\"https://atcoder.jp/contests/agc034/tasks/agc034_e\" class=\"uri\">https://atcoder.jp/contests/agc034/tasks/agc034_e</a></p>\n<p>对于链，发现可以枚举最后聚集的点，答案与配对方式无关，check 是否能配对即可。</p>\n<p>如果不是链，则相比链，还可以选择同一子树中不存在祖孙关系的两个点，将它们都向 LCA 移一步。</p>\n<p>故而，可以在链的做法上打一个补丁，观察到先『内部消化』，再在子树间配对一定不劣，且答案仍然和配对方式无关。故令 <span class=\"math inline\">\\(f_x\\)</span> 表示点 <span class=\"math inline\">\\(x\\)</span> 内最多消掉多少对，就可以 check 了。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst long long inf = 1e18;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;line_02.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        char t;\n        std::cin &gt;&gt; t;\n        a[i] = t - &#39;0&#39;;\n    &#125;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y), g[y].push_back(x);\n    &#125;\n    auto res(inf);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        std::vector&lt;int&gt; s(n + 1);\n        std::vector&lt;long long&gt; f(n + 1), cnt(n + 1);\n        std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n            s[x] = a[x];\n            int son = 0;\n            auto sum(0ll);\n            for (auto i : g[x])\n                if (i != fa) &#123;\n                    DFS(i, x), s[x] += s[i];\n                    sum += cnt[i];\n                    if (cnt[i] &gt; cnt[son])\n                        son = i;\n                &#125;\n            if (son) &#123;\n                if (cnt[son] * 2 &lt;= sum)\n                    f[x] = sum / 2;\n                else\n                    f[x] = sum - cnt[son] + std::min(f[son], (cnt[son] - (sum - cnt[son])) / 2);\n            &#125;\n            cnt[x] = sum;\n            if (x != i)\n                cnt[x] += s[x];\n            return;\n        &#125;;\n        DFS(i, -1);\n        if (cnt[i] % 2 == 0 &amp;&amp; f[i] == cnt[i] / 2)\n            res = std::min(res, cnt[i] / 2);\n    &#125;\n    if (res == inf)\n        std::cout &lt;&lt; -1 &lt;&lt; &#39;\\n&#39;;\n    else\n        std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n",
            "tags": [
                "DP",
                "树形 DP",
                "长链剖分"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20241021-1/",
            "url": "https://xsc062.netlify.app/20241021-1/",
            "title": "长链剖分 学习笔记",
            "date_published": "2024-10-21T08:33:47.000Z",
            "content_html": "<p><em>半端な生命の関数を / 少々ここらでオーバーライド</em></p>\n<span id=\"more\"></span>\n<hr />\n<h2 id=\"内容-性质\">内容 &amp; 性质</h2>\n<p>把重链剖分选的 siz 最大的儿子换成高度最大的儿子就是长剖了。同样具有一些美妙的性质。</p>\n<ul>\n<li><p>任意点到根节点经过的链数最劣为 <span class=\"math inline\">\\(\\sqrt n\\)</span>。</p>\n<p>考虑构造一条经过了 <span class=\"math inline\">\\(\\sqrt n+1\\)</span> 条链的路径，发现构造不出来。得证。（？）</p>\n这点也决定了长剖和重剖走的不是一条赛道，更多的是处理一些和深度有关的场景下的问题。用法有点像 dsu on tree。</li>\n<li><p>任意点 <span class=\"math inline\">\\(x\\)</span> 的 <span class=\"math inline\">\\(k\\)</span> 级祖先 <span class=\"math inline\">\\(fa\\)</span> 所在链长 <span class=\"math inline\">\\(\\ge k\\)</span>。</p>\n<p>考虑反证。若 <span class=\"math inline\">\\(fa\\)</span> 所在链长度 <span class=\"math inline\">\\(&lt;k\\)</span>，则 <span class=\"math inline\">\\(fa\\to x\\)</span> 更优，矛盾。故原命题成立。</p></li>\n</ul>\n<hr />\n<h2 id=\"求-k-级祖先\">求 k 级祖先</h2>\n<p>长剖的一个典型应用是 <span class=\"math inline\">\\(O(n\\log n)-O(1)\\)</span> 求 <span class=\"math inline\">\\(k\\)</span> 级祖先。先考虑相对暴力的做法，可以 <span class=\"math inline\">\\(O(n\\sqrt n)\\)</span> 预处理每个点的 <span class=\"math inline\">\\(1\\sim \\sqrt n\\)</span> 级祖先然后块间块内随便跳一跳就是 <span class=\"math inline\">\\(O(\\sqrt n)\\)</span> 的单次查询了。</p>\n<p>把这个暴力结合「任意点 <span class=\"math inline\">\\(k\\)</span> 级祖先所在链长 <span class=\"math inline\">\\(\\ge k\\)</span>」的性质，令 <span class=\"math inline\">\\(r=\\dfrac k2\\)</span>，那么 <span class=\"math inline\">\\(x\\)</span> 的 <span class=\"math inline\">\\(r\\)</span> 级祖先所在链长 <span class=\"math inline\">\\(\\ge r\\)</span>。假设我们现在已经知道 <span class=\"math inline\">\\(r\\)</span> 级祖先 <span class=\"math inline\">\\(fa_r\\)</span>，预处理出链内点序列、链顶向上的链长个祖先（均摊 <span class=\"math inline\">\\(O(n)\\)</span>），就可以 <span class=\"math inline\">\\(O(1)\\)</span> 访问 <span class=\"math inline\">\\(fa_k\\)</span>。</p>\n<p>怎么找到 <span class=\"math inline\">\\(fa_r\\)</span> 呢？这看似是递归的问题，实际上发现 <span class=\"math inline\">\\(r\\)</span> 的取值只需 <span class=\"math inline\">\\(\\ge \\dfrac k2\\)</span>，对于 <span class=\"math inline\">\\(1\\sim n\\)</span> 的每一个 <span class=\"math inline\">\\(k\\)</span>，找到其最高二进制位 <span class=\"math inline\">\\(r\\)</span>（显然 <span class=\"math inline\">\\(r\\)</span> 的可能取值有 <span class=\"math inline\">\\(\\log n\\)</span> 种），对于每个点，预处理出其 <span class=\"math inline\">\\(\\log n\\)</span> 个不同的 <span class=\"math inline\">\\(r\\)</span> 级祖先。这个就是倍增了。</p>\n<details>\n<pre class=\"cpp\"><code>for (int i = 1, mx = 0; i &lt;= n; ++i) &#123;\n    if (i &gt;= (1 &lt;&lt; mx) * 2)\n        ++mx;\n    to[i] = mx;\n&#125;\nstd::vector&lt;std::array&lt;int, 21&gt; &gt; fa(n + 1);\nstd::vector&lt;int&gt; h(n + 1, 1), son(n + 1), dep(n + 1);\nh[0] = 0;\nstd::function&lt;void(int)&gt; DFS = [&amp;](int x) &#123;\n    for (auto i : g[x])\n        if (i != fa[x][0]) &#123;\n            fa[i][0] = x;\n            for (int j = 1; j &lt;= 20; ++j)\n                fa[i][j] = fa[fa[i][j - 1]][j - 1];\n            dep[i] = dep[x] + 1;\n            DFS(i);\n            if (h[i] &gt;= h[son[x]])\n                son[x] = i, h[x] = h[i] + 1;\n        &#125;\n    return;\n&#125;;\ndep[1] = 1, DFS(1);\nstd::vector&lt;int&gt; top(n + 1), id(n + 1);\nstd::vector&lt;std::vector&lt;int&gt; &gt; anc(n + 1), des(n + 1, std::vector&lt;int&gt; (1));\nstd::function&lt;void(int, int)&gt; DFS1 = [&amp;](int x, int toq) &#123;\n    top[x] = toq;\n    if (son[x])\n        DFS1(son[x], toq);\n    for (auto i : g[x])\n        if (i != fa[x][0] &amp;&amp; i != son[x])\n            DFS1(i, i);\n    des[toq].push_back(x);\n    id[x] = (int)des[toq].size() - 1;\n    if (x == toq) &#123;\n        anc[x].push_back(x);\n        for (int j = 1, now = x; j &lt;= id[x]; ++j, now = fa[now][0])\n            anc[x].push_back(fa[now][0]);\n    &#125;\n    return;\n&#125;;\nDFS1(1, 1);\nauto ask = [&amp;](int x, int k) &#123;\n    int x1 = x;\n    if (!k)\n        return x;\n    x = fa[x][to[k]];\n    if (dep[x] - dep[top[x]] &gt;= k - (1 &lt;&lt; to[k]))\n        return des[top[x]][id[x] + k - (1 &lt;&lt; to[k])];\n    return anc[top[x]][k - (1 &lt;&lt; to[k]) - (dep[x] - dep[top[x]])];\n&#125;;</code></pre>\n</details>\n<hr />\n<h2 id=\"优化-dp\">优化 DP</h2>\n<blockquote>\n<p>yly：管它这那的，只要是有关深度直接上长剖就是了。</p>\n</blockquote>\n<p>和 DSU on tree 类似，主要利用每条链只会被算一次实现 <span class=\"math inline\">\\(O(n)\\)</span> DP。具体地，尽可能地『继承』长链的信息，『短链』则暴力合并。</p>\n<p>值得注意的是，一般『深度』这一维信息会以『与 <span class=\"math inline\">\\(u\\)</span> 的距离』的形式，结合指针来维护（因为直接记录深度会更史）。</p>\n<p>具体地，用一个全局大数组容纳所有信息，为每个点分配相应的数组头指针。正常情况下需要用到的元素最多为 <span class=\"math inline\">\\(2n\\)</span>，但如果存在一些诡异的前移后移操作就另当别论了。</p>\n<hr />\n<h3 id=\"p5904-poi-2014-hot-hotels-加强版\">P5904 [POI 2014] HOT-Hotels 加强版</h3>\n<p><a href=\"https://www.luogu.com.cn/problem/P5904\" class=\"uri\">https://www.luogu.com.cn/problem/P5904</a></p>\n<p>首先 <del>不难</del> 得到 <span class=\"math inline\">\\(O(n^2)\\)</span> 做法：显然存在一个点到三个点距离相等。这个点既可能是它们的 LCA，也可能是其中一个点的子孙，另外两个点的 LCA。综上，<strong>在 LCA 处统计答案是可行的</strong>。</p>\n<p>令 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示 <span class=\"math inline\">\\(i\\)</span> 子树中距离 <span class=\"math inline\">\\(i\\)</span> 为 <span class=\"math inline\">\\(j\\)</span> 的点数；<span class=\"math inline\">\\(g_{i,j}\\)</span> 表示 <span class=\"math inline\">\\(i\\)</span> 子树中距离 <span class=\"math inline\">\\(i\\)</span> 为 <span class=\"math inline\">\\(j\\)</span>、或者距 LCA 为 <span class=\"math inline\">\\(d\\)</span> 且 LCA 距离 <span class=\"math inline\">\\(i\\)</span> 为 <span class=\"math inline\">\\(d-j\\)</span> 的点对数；随便做就可以了。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g1(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g1[x].push_back(y), g1[y].push_back(x);\n    &#125;\n    auto res(0ll);\n    std::vector&lt;int&gt; h(n + 1);\n    std::vector&lt;std::vector&lt;long long&gt; &gt; f(n + 1), g(n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        h[x] = 1;\n        for (auto i : g1[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                h[x] = std::max(h[x], h[i] + 1);\n            &#125;\n        f[x].resize(h[x] + 1), g[x].resize(h[x] + 1);\n        f[x][0] = 1ll;\n        for (auto i : g1[x])\n            if (i != fa) &#123;\n                for (int j = 0; j &lt;= h[i]; ++j) &#123;\n                    if (j &gt;= 1)\n                        res += g[x][j] * f[i][j - 1];\n                    if (j &gt;= 1 &amp;&amp; j + 1 &lt;= h[i])\n                        res += f[x][j] * g[i][j + 1];\n                    if (j &gt;= 1) &#123;\n                        g[x][j] += f[x][j] * f[i][j - 1];\n                        f[x][j] += f[i][j - 1];\n                    &#125;\n                    if (j + 1 &lt;= h[i])\n                        g[x][j] += g[i][j + 1];\n                &#125;\n                std::vector&lt;long long&gt;().swap(f[i]);\n                std::vector&lt;long long&gt;().swap(g[i]);\n            &#125;\n        res += g[x][0];\n        return;\n    &#125;;\n    DFS(1, -1);\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<p>然后对于每个 <span class=\"math inline\">\\(u\\)</span>，类似 DSU on tree，继承其长儿子的数据（整体前移 / 后移一位，使用指针实现），再把短儿子暴力合并上来。</p>\n<p>每次合并短儿子，数组长为短儿子链长；<span class=\"math inline\">\\(u\\)</span> 向上合并时，数组长为长儿子链长。故所有链被合并恰好一次，复杂度 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int n;\n    std::cin &gt;&gt; n;\n    std::vector&lt;std::vector&lt;int&gt; &gt; g1(n + 1);\n    for (int i = 1, x, y; i &lt; n; ++i) &#123;\n        std::cin &gt;&gt; x &gt;&gt; y;\n        g1[x].push_back(y), g1[y].push_back(x);\n    &#125;\n    std::vector&lt;int&gt; h(n + 1), son(n + 1);\n    std::vector&lt;long long&gt; df(5 * n + 1), dg(5 * n + 1);\n    std::function&lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &#123;\n        h[x] = 1;\n        for (auto i : g1[x])\n            if (i != fa) &#123;\n                DFS(i, x);\n                h[x] = std::max(h[x], h[i] + 1);\n                if (h[i] &gt; h[son[x]])\n                    son[x] = i;\n            &#125;\n        return;\n    &#125;;\n    DFS(1, -1);\n    auto pos(dg.begin() + 3 * n);\n    std::vector&lt;decltype(df.begin())&gt; f(n + 1), g(n + 1);\n    auto res(0ll);\n    DFS = [&amp;](int x, int fa) &#123;\n        f[x][0] = 1ll;\n        if (son[x]) &#123;\n            f[son[x]] = std::next(f[x]), g[son[x]] = std::prev(g[x]);\n            DFS(son[x], x);\n        &#125;\n        for (auto i : g1[x])\n            if (i != fa &amp;&amp; i != son[x]) &#123;\n                f[i] = std::next(f[x], h[x] + 1);\n                std::fill(f[i], f[i] + h[i] + 2, 0ll);\n                g[i] = std::next(pos, h[i]), pos = std::next(g[i], h[i]);\n                std::fill(std::prev(g[i]), g[i] + h[i] + 2, 0ll);\n                DFS(i, x);\n                for (int j = 0; j &lt;= h[i]; ++j) &#123;\n                    if (j &gt;= 1)\n                        res += g[x][j] * f[i][j - 1];\n                    if (j &gt;= 1 &amp;&amp; j + 1 &lt;= h[i])\n                        res += f[x][j] * g[i][j + 1];\n                    if (j &gt;= 1) &#123;\n                        g[x][j] += f[x][j] * f[i][j - 1];\n                        f[x][j] += f[i][j - 1];\n                    &#125;\n                    if (j + 1 &lt;= h[i])\n                        g[x][j] += g[i][j + 1];\n                &#125;\n            &#125;\n        res += g[x][0];\n        return;\n    &#125;;\n    f[1] = df.begin(), g[1] = dg.begin() + 2 * n;\n    DFS(1, -1);\n    std::cout &lt;&lt; res &lt;&lt; &#39;\\n&#39;;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n<h3 id=\"cf1585g-poachers\">CF1585G Poachers</h3>\n<p><a href=\"https://codeforces.com/problemset/problem/1585/G\" class=\"uri\">https://codeforces.com/problemset/problem/1585/G</a></p>\n<p>公平博弈。我们现在要算每个根的 SG 值。设 <span class=\"math inline\">\\(f_{u,j}\\)</span> 表示在点 <span class=\"math inline\">\\(u\\)</span>，删了距离它为 <span class=\"math inline\">\\(j\\)</span> 这一层的 SG 值，那么有：</p>\n<p><span class=\"math display\">\\[\nf_{u,j}=\n\\begin{cases}\n\\text{mex}\\{f_{v,0}\\}&amp;j=0\\\\\n\\bigoplus f_{v,j-1}&amp;\\text{otherwise}\n\\end{cases}\n\\]</span></p>\n<p>然后发现有深度维。大力长剖。</p>\n<details>\n<pre class=\"cpp\"><code>#include &lt;bits/stdc++.h&gt;\nconst int inf = 0x3f3f3f3f;\nint main() &#123;\n#ifdef ONLINE_JUDGE\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\n#else\n    std::freopen(&quot;.in&quot;, &quot;r&quot;, stdin);\n    std::freopen(&quot;.out&quot;, &quot;w&quot;, stdout);\n#endif\n    int T;\n    for (std::cin &gt;&gt; T; T--; ) &#123;\n        int n;\n        std::cin &gt;&gt; n;\n        std::vector&lt;int&gt; rt;\n        std::vector&lt;std::vector&lt;int&gt; &gt; g(n + 1);\n        for (int i = 1, x; i &lt;= n; ++i) &#123;\n            std::cin &gt;&gt; x;\n            if (x)\n                g[x].push_back(i);\n            else\n                rt.push_back(i);\n        &#125;\n        std::vector&lt;int&gt; h(n + 1), son(n + 1), to(n + 1, inf);\n        std::function&lt;void(int)&gt; DFS = [&amp;](int x) &#123;\n            h[x] = 1;\n            for (auto i : g[x]) &#123;\n                DFS(i);\n                h[x] = std::max(h[x], h[i] + 1);\n                to[x] = std::min(to[x], to[i] + 1);\n                if (h[i] &gt; h[son[x]])\n                    son[x] = i;\n            &#125;\n            to[x] = std::min(to[x], h[x]);\n            return;\n        &#125;;\n        for (auto i : rt)\n            DFS(i);\n        std::vector&lt;int&gt; _f(5 * n + 1), top(n + 1);\n        std::vector&lt;decltype(_f.begin())&gt; f(n + 1);\n        std::vector&lt;std::unordered_set&lt;int&gt; &gt; s(n + 1);\n        auto p(_f.begin());\n        DFS = [&amp;](int x) &#123;\n            if (son[x]) &#123;\n                f[son[x]] = std::next(f[x]);\n                top[son[x]] = top[x], DFS(son[x]);\n            &#125;\n            if ((int)g[x].size() == 1) &#123;\n                s[top[x]].insert(f[son[x]][0]);\n                for (int now = f[son[x]][0] + 1; ; ++now)\n                    if (!s[top[x]].count(now)) &#123;\n                        f[x][0] = now;\n                        break;\n                    &#125;\n                return;\n            &#125;\n            for (auto i : g[x])\n                if (i != son[x]) &#123;\n                    f[i] = p, p = std::next(p, h[i] + 1);\n                    top[i] = i, DFS(i);\n                    for (int j = 1; j &lt;= to[i] + 1; ++j)\n                        f[x][j] ^= f[i][j - 1];\n                &#125;\n            std::unordered_set&lt;int&gt;().swap(s[top[x]]);\n            for (int j = 1; j &lt;= to[x]; ++j)\n                s[top[x]].insert(f[x][j]);\n            for (int now = 0; ; ++now)\n                if (!s[top[x]].count(now)) &#123;\n                    f[x][0] = now;\n                    break;\n                &#125;\n            return;\n        &#125;;\n        int res = 0;\n        for (auto i : rt) &#123;\n            f[i] = p, p = std::next(p, h[i] + 1);\n            DFS(i), res ^= f[i][0];\n        &#125;\n        std::cout &lt;&lt; (res ? &quot;YES&quot; : &quot;NO&quot;) &lt;&lt; &#39;\\n&#39;;\n    &#125;\n    return 0;\n&#125;</code></pre>\n</details>\n<hr />\n",
            "tags": [
                "树链剖分",
                "长链剖分"
            ]
        }
    ]
}