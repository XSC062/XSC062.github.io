<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xsc062.netlify.app</id>
    <title> • Posts by &#34;tarjan&#34; tag</title>
    <link href="https://xsc062.netlify.app" />
    <updated>2023-11-13T07:54:34.000Z</updated>
    <category term="并查集" />
    <category term="斜率优化" />
    <category term="悬线法" />
    <category term="哈希" />
    <category term="字典树" />
    <category term="DP" />
    <category term="单调队列" />
    <category term="分治" />
    <category term="二分图" />
    <category term="CRT / exCRT" />
    <category term="排列组合" />
    <category term="网络流" />
    <category term="费用流" />
    <category term="二分" />
    <category term="上下界网络流" />
    <category term="容斥原理" />
    <category term="线段树" />
    <category term="树状数组" />
    <category term="区间 DP" />
    <category term="构造" />
    <category term="Tarjan" />
    <category term="数据结构" />
    <category term="下饭" />
    <category term="LCA" />
    <category term="倍增" />
    <category term="鸽巢原理" />
    <category term="概率期望" />
    <category term="调和级数" />
    <category term="差分" />
    <category term="思维" />
    <category term="树形 DP" />
    <category term="最小生成树" />
    <category term="SAM" />
    <category term="状压" />
    <category term="分块" />
    <category term="可持久化" />
    <category term="笛卡尔树" />
    <category term="高维前缀和" />
    <category term="闲话" />
    <category term="欧拉回路" />
    <category term="树链剖分" />
    <category term="长链剖分" />
    <category term="KMP" />
    <category term="border" />
    <category term="字符串" />
    <category term="AC 自动机" />
    <category term="SA" />
    <category term="数学" />
    <category term="树上差分" />
    <category term="FWT" />
    <category term="堆" />
    <category term="树的重心" />
    <category term="二项式定理" />
    <category term="二项式反演" />
    <category term="贪心" />
    <category term="均摊" />
    <category term="计数" />
    <category term="优化建图" />
    <category term="反悔贪心" />
    <category term="调整法" />
    <category term="背包" />
    <category term="博弈论" />
    <category term="DP 优化" />
    <category term="虚树" />
    <category term="点分治" />
    <category term="WQS 二分" />
    <category term="闵可夫斯基和" />
    <category term="slope trick" />
    <category term="四边形不等式" />
    <category term="暴力" />
    <category term="状压 DP" />
    <category term="组合数学" />
    <category term="支配对" />
    <category term="DDP" />
    <category term="平衡树" />
    <category term="容斥" />
    <category term="猫树" />
    <category term="Kruskal 重构树" />
    <category term="李超线段树" />
    <entry>
        <id>https://xsc062.netlify.app/20231113/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20231113/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4434&#34;&gt;NOIP S&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://vjudge.net/contest/594162&#34;&gt;计数杂题&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-卡门&#34;&gt;A. 卡门&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6370&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6370&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4434/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4434/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们惊讶地发现全场没多少人会做绿题。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;就是说呢，我们把它「滚动到相邻行然后落下」的过程直接变成「往左下 / 右下滚」。那么球掉下去的过程呢，就可以理解为它是一直一次往下掉一格的，然后每一次掉落呢，会根据实际情况往左 / 往右 / 直着掉。&lt;/p&gt;
&lt;p&gt;所以我们可以直接用 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的序列，记录从每 &lt;span class=&#34;math inline&#34;&gt;\(1\sim m\)&lt;/span&gt; 列扔下去的情况。然后我们很容易可以知道，如果任意两个序列发生了交汇，那么从交汇点开始至序列结束呢，这两个序列的内容都是完全一样的。因为之前序列长什么样子，完全不会对之后产生影响。所以一旦有任意一个状态是一样的，后面都会是一样的。&lt;/p&gt;
&lt;p&gt;所以呢，一旦我们跟着计划好的路线走，却发现走不动了，那就说明从走不动的位置开始，到原定路线结束，这些位置都会被封掉。所以这个时候我们直接重新计算路线就好了。&lt;/p&gt;
&lt;p&gt;对于这 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 列，就算每一列预定路线上的每个位置都被占了一次，也只会被更改 &lt;span class=&#34;math inline&#34;&gt;\(n\times m\)&lt;/span&gt; 次；总体时间复杂度只有 &lt;span class=&#34;math inline&#34;&gt;\(O(nm^2)\)&lt;/span&gt;。然后又由于不可能跑满，其实是完全没有问题，甚至跑得出溜快的。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxm = 35;
const int maxn = 3e4 + 5;
char a[maxn][maxm];
int n, m, q, u, x, y;
std::vector&amp;lt;int&amp;gt; p[maxm]; 
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    freopen(&amp;quot;kamen.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;kamen.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m);
    for (int i = 1; i &amp;lt;= n; ++i)
        scanf(&amp;quot;%s&amp;quot;, a[i] + 1);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        x = 1, y = i;
        for (;;) &amp;#123;
            p[i].push_back(y); 
            if (a[x + 1][y] == &amp;#39;.&amp;#39;) ++x;
            else &amp;#123;
                if (a[x + 1][y] == &amp;#39;X&amp;#39;) break;
                if (a[x][y - 1] == &amp;#39;.&amp;#39; &amp;amp;&amp;amp; a[x + 1][y - 1] == &amp;#39;.&amp;#39;)
                    ++x, --y;
                else if (a[x][y + 1] == &amp;#39;.&amp;#39; &amp;amp;&amp;amp; a[x + 1][y + 1] == &amp;#39;.&amp;#39;)
                    ++x, ++y;
                else break;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;q);
    while (q--) &amp;#123;
        scanf(&amp;quot;%d&amp;quot;, &amp;amp;u);
        while (a[p[u].size()][p[u].back()] != &amp;#39;.&amp;#39;)
            p[u].pop_back();
        x = p[u].size(), y = p[u].back();
        for (;;) &amp;#123;
            p[u].push_back(y); 
            if (a[x + 1][y] == &amp;#39;.&amp;#39;) ++x;
            else &amp;#123;
                if (a[x + 1][y] == &amp;#39;X&amp;#39;) break;
                if (a[x][y - 1] == &amp;#39;.&amp;#39; &amp;amp;&amp;amp; a[x + 1][y - 1] == &amp;#39;.&amp;#39;)
                    ++x, --y;
                else if (a[x][y + 1] == &amp;#39;.&amp;#39; &amp;amp;&amp;amp; a[x + 1][y + 1] == &amp;#39;.&amp;#39;)
                    ++x, ++y;
                else break;
            &amp;#125;
        &amp;#125;
        a[x][y] = &amp;#39;O&amp;#39;;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) puts(a[i] + 1);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-商人&#34;&gt;B. 商人&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4434/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4434/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先忽略图中的环带来的问题，假设 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 表示从 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 点出发的答案，不难想到 DP 式 &lt;span class=&#34;math inline&#34;&gt;\(f_u = \min\{\max(f_v-p_{(u,v)}, r_{(u,v)})\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么问题来了，图中是会有环的，不能简单地去更新 DP 值。我们首先考虑「根源」，每一个 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 一定都是由另一个 &lt;span class=&#34;math inline&#34;&gt;\(f_v\)&lt;/span&gt; 转移得到的，那么一定会存在一个已知的 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt;，不由其他任何 &lt;span class=&#34;math inline&#34;&gt;\(f_v\)&lt;/span&gt; 得到。&lt;/p&gt;
&lt;p&gt;考虑一个环中 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 最大的一条边 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;。假设图中只有这一个环，那么 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 的值一定为 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，因为 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 只能为非负。这样「根源」就被我们找到了。接下来进一步考虑转移方法。&lt;/p&gt;
&lt;p&gt;一个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 只能被其相连的点 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 更新，那么当且仅当所有 &lt;span class=&#34;math inline&#34;&gt;\(f_v\)&lt;/span&gt; 都是确定的，&lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 才能被确定，进而去更新 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的前驱。这让我们想到了拓扑排序。如果我们将所有边反向，那么上面的过程几乎就是拓扑排序。&lt;/p&gt;
&lt;p&gt;为了保证任意一个环上的「根源」都能最先被确定，我们按照按 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 从大到小遍历每一条边的方式处理问题。对于每一条边 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;，我们都假设它是「根源」并用 &lt;span class=&#34;math inline&#34;&gt;\(r_{(u,v)}\)&lt;/span&gt; 更新 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt;。我们其实并不关心 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 是否是我们刚刚定义的形式上的「根源」，毕竟，只要 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 能被 &lt;span class=&#34;math inline&#34;&gt;\(r_{(u,v)}\)&lt;/span&gt; 更新，它就能算作广义上的，&lt;strong&gt;当前时刻的&lt;/strong&gt;「根源」。&lt;/p&gt;
&lt;p&gt;我们在一开始将出度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;（反图上就是入度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;）的点全部加入队列，在每次加边的时候进行拓扑排序。每次一条边以任意形式被「使用」后，都要打标记删除并不能再访问，以保证转移的正确性和高效。如果一条边被「使用」，分两种情况：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;更新「根源」：&lt;/p&gt;
这个时候这条边已经发挥了它的所有作用了，作为 &lt;strong&gt;当前时刻的&lt;/strong&gt;「根源」，这条边的源点在未来至少不会再经由这一条边被更新。故可以删除。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拓扑排序中转移：&lt;/p&gt;
&lt;p&gt;一个点被加入队列，说明它的 DP 值是确定的，那么就不用拿一个已经确定的值多次更新另一个 DP 值。故可以删除。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以正确性是可以保证的。类拓扑排序的结构也保证了算法复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n+m)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int inf = 1e18;
const int maxn = 2e5 + 5;
const int maxm = 2e5 + 5;
struct _ &amp;#123;
    int v, r, p, i;
    _() &amp;#123;&amp;#125;
    _(int v1, int r1, int p1, int i1) &amp;#123;
        v = v1, r = r1, p = p1, i = i1;
    &amp;#125;
&amp;#125;;
struct __ &amp;#123;
    int x, y, r, p;
    bool operator&amp;lt; (const __ &amp;amp;q) const &amp;#123;
        return r &amp;gt; q.r;
    &amp;#125;
&amp;#125;;
__ a[maxm];
bool del[maxn];
std::queue&amp;lt;int&amp;gt; q;
int n, m, x, y, r, p;
std::vector&amp;lt;_&amp;gt; g[maxn];
int f[maxn], deg[maxn];
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
void add(int x, int y, int r, int p, int i) &amp;#123;
    g[x].emplace_back(y, r, p, i);
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    freopen(&amp;quot;merchant.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;merchant.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    read(n), read(m);
    std::fill(f + 1, f + n + 1, inf);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        read(a[i].x), read(a[i].y);
        read(a[i].r), read(a[i].p);
        ++deg[a[i].x];
    &amp;#125;
    std::sort(a + 1, a + m + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        if (!deg[i]) q.push(i);
    for (int i = 1; i &amp;lt;= m; ++i)
        add(a[i].y, a[i].x, a[i].r, a[i].p, i);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        while (!q.empty()) &amp;#123;
            int t = q.front(); q.pop();
            for (auto j : g[t]) &amp;#123;
                if (del[j.i]) continue;
                del[j.i] = 1;
                if (f[t] != inf)
                    f[j.v] = min(f[j.v], max(f[t] - j.p, j.r));
                if (!--deg[j.v]) q.push(j.v);
            &amp;#125;
        &amp;#125;
        if (!del[i]) &amp;#123;
            del[i] = 1, f[a[i].x] = min(f[a[i].x], a[i].r);
            if (!--deg[a[i].x]) q.push(a[i].x);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        print(f[i] == inf ? -1 : f[i], &amp;#39; &amp;#39;);
    putchar(&amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a---gerald-and-giant-chess&#34;&gt;A - Gerald and Giant Chess&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/594162#problem/A&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/594162#problem/A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个呢，一道简单的数数题，但是因为我忘了 DP 容斥怎么打了所以自行思考了很久很久很久，还差最后一点点想出来的时候放弃了去抄题解 /cf&lt;/p&gt;
&lt;p&gt;就是，这种「限制通行」的 DP 容斥（名字是我现场起的）类型的数数题有一种通法，就是首先我们只计算非法方案然后减掉。&lt;/p&gt;
&lt;p&gt;那么非法方案怎么算呢？令 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示一个非法点都不经过，到达 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 这个非法点的方案数，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_i=calc(s,i)-\sum f_j\times calc(j,i)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 是起点，&lt;span class=&#34;math inline&#34;&gt;\(calc(j,i)\)&lt;/span&gt; 是从 &lt;span class=&#34;math inline&#34;&gt;\(j\to i\)&lt;/span&gt; 的方案数。这样就能不重不漏地枚举完所有情况了。&lt;/p&gt;
&lt;p&gt;我们把 &lt;span class=&#34;math inline&#34;&gt;\((n,m)\)&lt;/span&gt; 也视作一个非法点然后代入 DP 即可得到答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int lim = 3e5;
const int mod = 1e9 + 7;
const int maxk = 2e3 + 5;
const int maxn = 3e5 + 5;
struct _ &amp;#123;
    int x, y;
    bool operator&amp;lt; (const _ &amp;amp;q) const &amp;#123;
        return x == q.x ? y &amp;lt; q.y : x &amp;lt; q.x;
    &amp;#125;
&amp;#125;;
_ a[maxk];
int n, m, k, res; 
int f[maxk], fac[maxn];
int qkp(int x, int y) &amp;#123;
    int res = 1;
    while (y) &amp;#123;
        if (y &amp;amp; 1) (res *= x) %= mod;
        (x *= x) %= mod, y &amp;gt;&amp;gt;= 1;
    &amp;#125;
    return res;
&amp;#125;
int inv(int x) &amp;#123; return qkp(x, mod - 2); &amp;#125;
int A(int n, int m) &amp;#123;
    return fac[n] * inv(fac[n - m]) % mod;
&amp;#125;
int C(int n, int m) &amp;#123;
    return A(n, m) * inv(fac[m]) % mod;
&amp;#125;
int calc(int i, int j) &amp;#123;
    int x = a[j].x - a[i].x + 1,
        y = a[j].y - a[i].y + 1;
    return C(x + y - 2, y - 1);
&amp;#125;
int main() &amp;#123;
    fac[0] = 1;
    for (int i = 1; i &amp;lt;= lim; ++i)
        fac[i] = fac[i - 1] * i % mod;
    bool flag = 0;
    read(n), read(m), read(k);
    for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
        read(a[i].x), read(a[i].y);
        flag |= (a[i].x == 1 &amp;amp;&amp;amp; a[i].y == 1);
        flag |= (a[i].x == n &amp;amp;&amp;amp; a[i].y == m);
    &amp;#125;
    a[0].x = a[0].y = 1;
    if (flag) &amp;#123; print(0, &amp;#39;\n&amp;#39;); return 0; &amp;#125;
    ++k, a[k].x = n, a[k].y = m;
    std::sort(a + 1, a + k + 1);
    for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
        f[i] = calc(0, i);
        for (int j = 1; j &amp;lt; i; ++j) &amp;#123;
            if (a[j].x &amp;gt; a[i].x || a[j].y &amp;gt; a[i].y) continue;
            (f[i] -= f[j] * calc(j, i) % mod) %= mod;
        &amp;#125;
    &amp;#125;
    f[k] = (f[k] % mod + mod) % mod;
    print(f[k], &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="Tarjan" />
        <updated>2023-11-13T07:54:34.000Z</updated>
    </entry>
</feed>
