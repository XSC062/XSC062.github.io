{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"网络流\" tag",
    "description": "",
    "home_page_url": "https://xsc062.netlify.app",
    "items": [
        {
            "id": "https://xsc062.netlify.app/20250124/",
            "url": "https://xsc062.netlify.app/20250124/",
            "title": "网络流",
            "date_published": "2025-01-24T00:35:47.000Z",
            "content_html": "<p>想当年叱诧风云左牵字符串右擎网络流，而今飘零憔悴沦落到需要学而时习之的地步 <img src=\"/em/kx.gif\" /></p>\n<span id=\"more\"></span>\n<hr />\n<h2 id=\"定义\">定义</h2>\n<p>对于有一个源点 <span class=\"math inline\">\\(s\\)</span> 和汇点 <span class=\"math inline\">\\(t\\)</span> 的有向图，每条边都有一个权值 <span class=\"math inline\">\\(c\\)</span> 作为容量，称这个有向图 <span class=\"math inline\">\\(G\\)</span> 是一个网络。</p>\n<p>假设现在有 <span class=\"math inline\">\\(f\\)</span> 升水从 <span class=\"math inline\">\\(s\\)</span> 流入，而我们可以自由分配每个点的水可以朝哪个方向流出，那么显然地：</p>\n<ul>\n<li>流出 <span class=\"math inline\">\\(t\\)</span> 的水为 <span class=\"math inline\">\\(f\\)</span> 升。</li>\n<li>对于除 <span class=\"math inline\">\\(s\\)</span> 和 <span class=\"math inline\">\\(t\\)</span> 以外的所有点，流入的水量等于流出的水量。</li>\n<li>对于任意一条边，流经的水量不超过容量。</li>\n</ul>\n<p>对于这个网络，任选出一部分点与 <span class=\"math inline\">\\(s\\)</span> 分为一组，剩下与 <span class=\"math inline\">\\(t\\)</span> 分为一组，该操作称为「割」。一个割的「容量」定义为 <span class=\"math inline\">\\(s\\)</span> 组与 <span class=\"math inline\">\\(t\\)</span> 组间连边的容量和。</p>\n<p>那么接下来就会由这个模型衍生出许多问题：</p>\n<ul>\n<li>最大流问题：找到一种分配方式最大化 <span class=\"math inline\">\\(f\\)</span>。</li>\n<li>最小割问题：找到一种割的方案最小化割的容量。</li>\n<li>最小费用最大流问题：给每条边除容量 <span class=\"math inline\">\\(c\\)</span> 外外加一个费用权值 <span class=\"math inline\">\\(w\\)</span>，需要在保证最大化 <span class=\"math inline\">\\(f\\)</span> 的前提下最小化 <span class=\"math inline\">\\(\\sum f(u, v)\\times w(u, v)\\)</span>。</li>\n</ul>\n<p>接下来会分别介绍解决这几种不同问题的方法。</p>\n<hr />\n<h2 id=\"最大流问题\">最大流问题</h2>\n<p>一个主要的思想是 <strong>贪心寻找增广路更新当前答案</strong>。</p>\n",
            "tags": [
                "网络流"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20230729/",
            "url": "https://xsc062.netlify.app/20230729/",
            "title": "矩阵",
            "date_published": "2023-07-29T07:38:36.000Z",
            "content_html": "<p>Solution to <a href=\"http://222.180.160.110:61235/contest/3825/problem/7\">BZOJ2406 矩阵</a>。</p>\n<span id=\"more\"></span>\n<hr />\n<blockquote>\n<p>赛时公告</p>\n<p>现在呢？：现在有弹窗了吗 「2023-07-19 16:45:07」</p>\n</blockquote>\n<p>此时无声胜有声。</p>\n<hr />\n<h3 id=\"f.bzoj2406矩阵\">F.「BZOJ2406」矩阵</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3825/problem/7\" class=\"uri\">http://222.180.160.110:61235/contest/3825/problem/7</a></p>\n<p>这是头一次见识到把矩阵和网络流结合在一起的题目。不过这种处理方式也是我们在学习二分图时的常客了：把行和列连边表示某一元素。</p>\n<p>我们发现 <span class=\"math inline\">\\(B_{i, j}\\)</span> 有给定的上下界，故我们考虑 <strong>上下界网络流</strong>。那怎么去表示 <span class=\"math inline\">\\(B_{i, j}\\)</span> 呢？这就要联系到我们刚刚说过的连边方式：用边 <span class=\"math inline\">\\(i\\to j\\)</span> 的流量来表示 <span class=\"math inline\">\\(B_{i, j}\\)</span>，有 <span class=\"math inline\">\\([L, R]\\)</span> 的上下界。</p>\n<p>可是我们除了 <span class=\"math inline\">\\([L,R]\\)</span> 的限制，还有最大值这个条件呀，怎么办呢？</p>\n<p>注意到题目要求最大的最小，自然想到二分答案。设答案为 <span class=\"math inline\">\\(x\\)</span>，则我们需要保证每行每列的答案都 <span class=\"math inline\">\\(\\le x\\)</span>。每行每列，这刚好是我们的建点方式。这对点本身作出了要求，这套路我们熟，让大源点向行连边、列向大汇点连边就好。</p>\n<p>那么这些边的上下界怎么办呢？我们已知 <span class=\"math inline\">\\(|S_A-S_B|\\le x\\)</span>，那么变形得：</p>\n<p><span class=\"math display\">\\[\n\\begin{cases}\nS_B\\ge S_A-x &amp;(S_B \\le S_A) \\\\\nS_B\\le S_A+x &amp;(S_B \\ge S_A)\n\\end{cases}\n\\]</span></p>\n<p>照理来说，两行的符号相反，我们现在已经得到了一个具有对称美的上下界：<span class=\"math inline\">\\(S_A-x\\le S_B\\le S_A+x\\)</span>，就应该速速连边了，可是我怎么看都觉得不舒坦：这个不等式可是带条件的，就这么直接拿来做上下界真的没问题吗？</p>\n<p><del>答案是没问题，因为我看的题解是这么写的</del> 本着探索求真精神，我们考虑尊重原不等式（因为原不等式的每一行刚好也有两个相反的符号），将这些边拆成两条，一条的上下界是 <span class=\"math inline\">\\([S_A-x, S_A]\\)</span>，另一条是 <span class=\"math inline\">\\([S_A,S_A+x]\\)</span>。6。我明白题解为什么这么写了，一个的下界就是另一个的上界，那直接合并不就行了，这个 naive trick 题解都不屑于写出来。</p>\n<p>然后跑个可行流就可以了。注意要保证边的下界为非负。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int lim = 2e5;\nconst int maxn = 405;\nconst int inf = 1e18;\nconst int maxm = 3e5 + 5;\nstruct _ &#123;\n    int v, w, n;\n    _() &#123;&#125;\n    _(int v1, int w1, int n1) &#123;\n        v = v1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nint gs, gt, tot;\nint a[maxn][maxn];\nint l, mid, r, res;\nint h[maxn], dif[maxn];\nint n, m, cnt, s, t, L, R;\nint vis[maxn], now[maxn], dep[maxn];\nint max(int x, int y) &#123; return x &gt; y ? x : y; &#125;\nint min(int x, int y) &#123; return x &lt; y ? x : y; &#125;\nbool BFS(int n) &#123;\n    std::fill(vis + 1, vis + n + 1, 0);\n    std::fill(dep + 1, dep + n + 1, 0); \n    std::queue&lt;int&gt; q;\n    dep[gs] = 1, vis[gs] = 1;\n    q.push(gs), now[gs] = h[gs];\n    while (!q.empty()) &#123;\n        int f = q.front(); q.pop();\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            int v = u[i].v, w = u[i].w;\n            if (vis[v] == 1 || w == 0) continue;\n            vis[v] = 1, now[v] = h[v];\n            dep[v] = dep[f] + 1, q.push(v);\n            if (v == gt) return 1;\n        &#125;\n    &#125;\n    return 0;\n&#125;\nint findP(int x, int flow = inf) &#123;\n    if (x == gt) return flow;\n    int rest = flow, i;\n    for (i = now[x]; rest &amp;&amp; i; i = u[i].n) &#123;\n        now[x] = i;\n        int v = u[i].v, w = u[i].w;\n        if (dep[v] != dep[x] + 1 || w == 0) continue;\n        int t = findP(v, min(rest, w));\n        if (t == 0) dep[v] = 0;\n        rest -= t, u[i].w -= t, u[i ^ 1].w += t;\n    &#125;\n    return flow - rest;\n&#125;\nint Dinic(int n) &#123;\n    int res = 0;\n    while (BFS(n)) &#123;\n        int t = findP(gs);\n        while (t) res += t, t = findP(gs);\n    &#125;\n    return res;\n&#125;\nvoid add(int x, int y, int w) &#123;\n    u[++tot] = _(y, w, h[x]), h[x] = tot;\n    return;\n&#125;\nvoid add(int x, int y, int d, int u) &#123;\n    add(x, y, u - d), add(y, x, 0);\n    dif[x] -= d, dif[y] += d;\n    return;\n&#125;\nvoid Init(void) &#123;\n    tot = 1, cnt = 0;\n    memset(h, 0, sizeof (h));\n    memset(dif, 0, sizeof (dif));\n    return;\n&#125;\nbool check(int x) &#123;\n    Init();\n    s = n + m + 1, t = s + 1;\n    add(t, s, inf), add(s, t, 0);\n    gs = t + 1, gt = t + 2;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= m; ++j)\n            add(i, j + n, L, R);\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        int sum = 0;\n        for (int j = 1; j &lt;= m; ++j)\n            sum += a[i][j];\n        add(s, i, max(0, sum - x), sum + x);\n    &#125;\n    for (int j = 1; j &lt;= m; ++j) &#123;\n        int sum = 0;\n        for (int i = 1; i &lt;= n; ++i)\n            sum += a[i][j];\n        add(j + n, t, max(sum - x, 0), sum + x);\n    &#125;\n    for (int i = 1; i &lt;= t; ++i) &#123;\n        if (dif[i] &lt; 0)\n            add(i, gt, -dif[i]), add(gt, i, 0);\n        else if (dif[i] &gt; 0) &#123;\n            add(gs, i, dif[i]);\n            add(i, gs, 0), cnt += dif[i];\n        &#125;\n    &#125;\n    return (Dinic(gt) == cnt);\n&#125;\nint main() &#123;\n    read(n), read(m);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= m; ++j)\n            read(a[i][j]);\n    &#125;\n    read(L), read(R);\n    l = 0, r = lim, res = -1;\n    while (l &lt;= r) &#123;\n        mid = (l + r) &gt;&gt; 1;\n        if (check(mid))\n            res = mid, r = mid - 1;\n        else l = mid + 1;\n    &#125;\n    print(res);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<p>你最好有要事相求.jpg</p>\n",
            "tags": [
                "网络流",
                "二分",
                "上下界网络流"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20230722/",
            "url": "https://xsc062.netlify.app/20230722/",
            "title": "网络流 24 题",
            "date_published": "2023-07-22T14:17:10.000Z",
            "content_html": "<p>Solution to <a href=\"http://222.180.160.110:61235/contest/3952/problem/1\">网络流 24 题</a>。</p>\n<span id=\"more\"></span>\n<hr />\n<h2 id=\"day-11st---6th\">Day 1：1st - 6th</h2>\n<h3 id=\"a.-星际转移问题\">A. 星际转移问题</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3952/problem/1\" class=\"uri\">http://222.180.160.110:61235/contest/3952/problem/1</a></p>\n<p>如果就按照题目给的路线图，我们显然无法考虑到飞船到达的时刻。同时 <span class=\"math inline\">\\(n\\)</span> 和 <span class=\"math inline\">\\(m\\)</span> 又很小，我们就知道了，「人不能两次踏进同一条河流」，<span class=\"math inline\">\\(1\\)</span> 时刻的站 <span class=\"math inline\">\\(p\\)</span> 和 <span class=\"math inline\">\\(2\\)</span> 时刻的站 <span class=\"math inline\">\\(p\\)</span> 也不能是同一个站 <span class=\"math inline\">\\(p\\)</span>。</p>\n<p>考虑用 <span class=\"math inline\">\\((p, t)\\)</span> 表示 <span class=\"math inline\">\\(t\\)</span> 时刻的站 <span class=\"math inline\">\\(p\\)</span>，然后对于每条路线跑个暴力连边，容量全部为 <span class=\"math inline\">\\(H_i\\)</span>。</p>\n<p>怎么控制时间最小呢？二分一下就可以了…… 然后最大流判定是不是满流的即可。</p>\n<p>以及注意到对于同一站点，前面的时刻可以留下来等后面的时刻，我们将同一站的前一时刻和后一时刻全部连边，容量为 <span class=\"math inline\">\\(k\\)</span>。以及保留节目对源点拆点以控制流量为 <span class=\"math inline\">\\(k\\)</span>。</p>\n<p><del>经实验答案最大为 29，所以把二分上界设为 30 即可</del> 理论上来说答案可能很大，比如你谷最后一组数据的答案就是 <span class=\"math inline\">\\(900\\)</span> 多，所以我掐指一算用天才般的算术技巧开了 <span class=\"math inline\">\\(10^4\\)</span>。真的，数数位天才就是我。</p>\n<details>\n<p>woc，这题居然没人做，果然我还是太强了。</p>\n<p>为什么都跑去做 T4 了，这个不是按难度顺序排列的吗？</p>\n<p>哦哦，好像不是，那（Na）没（Mei）事（Shi）了（Le）。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64be2f6e1ddac507cc0e0955.png\" /></p>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int lim = 1e4;\nconst int inf = 1e18;\nconst int maxm = 4e5 + 5;\nconst int maxn = 5e4 + 15;\nstruct _ &#123;\n    int v, w, n;\n    _() &#123;&#125;\n    _(int v1, int w1, int n1) &#123;\n        v = v1, w = w1, n = n1;\n    &#125;\n&#125;;\nstruct __ &#123;\n    int c;\n    std::vector&lt;int&gt; p;\n&#125;;\n_ u[maxm];\n__ w[maxn];\nint h[maxn];\nint l, mid, r;\nint gs, gt, tot = 1;\nint n, m, k, s, mt, x, res, y;\nint vis[maxn], now[maxn], dep[maxn];\nint min(int x, int y) &#123; return x &lt; y ? x : y; &#125;\nint fun(int p, int t) &#123; return (p - 1) * mt + t; &#125;\nbool BFS(int n) &#123;\n    std::fill(vis + 1, vis + n + 1, 0);\n    std::fill(dep + 1, dep + n + 1, 0); \n    std::queue&lt;int&gt; q;\n    dep[gs] = 1, vis[gs] = 1;\n    q.push(gs), now[gs] = h[gs];\n    while (!q.empty()) &#123;\n        int f = q.front(); q.pop();\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            int v = u[i].v, w = u[i].w;\n            if (vis[v] == 1 || w == 0) continue;\n            vis[v] = 1, now[v] = h[v];\n            dep[v] = dep[f] + 1, q.push(v);\n            if (v == gt) return 1;\n        &#125;\n    &#125;\n    return 0;\n&#125;\nint findP(int x, int flow = inf) &#123;\n    if (x == gt) return flow;\n    int rest = flow, i;\n    for (i = now[x]; rest &amp;&amp; i; i = u[i].n) &#123;\n        int v = u[i].v, w = u[i].w;\n        now[x] = i;\n        if (dep[v] != dep[x] + 1 || w == 0)\n            continue;\n        int t = findP(v, min(rest, w));\n        if (t == 0) dep[v] = 0;\n        rest -= t, u[i].w -= t, u[i ^ 1].w += t;\n    &#125;\n    return flow - rest;\n&#125;\nint Dinic(int n) &#123;\n    int res = 0;\n    while (BFS(n)) &#123;\n        int t = findP(gs);\n        while (t) res += t, t = findP(gs);\n    &#125;\n    return res;\n&#125;\nvoid add(int x, int y, int w) &#123;\n    u[++tot] = _(y, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int w) &#123;\n    add(x, y, w), add(y, x, 0);\n    return;\n&#125;\nvoid Init(void) &#123;\n    tot = 1;\n    memset(h, 0, sizeof (h));\n    return;\n&#125;\nbool check(int x) &#123;\n    Init();\n    mt = x, s = fun(n, mt) + 1;\n    gs = s + 1, gt = s + 2;\n    addf(gs, s, k);\n    for (int i = 1; i &lt;= mt; ++i) &#123;\n        addf(s, fun(n - 1, i), k);\n        addf(fun(n, i), gt, k);\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt; mt; ++j)\n            addf(fun(i, j), fun(i, j + 1), k);\n    &#125;\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        int p = 0, x = 0, la = 0;\n        while (++p &lt;= mt) &#123;\n            if (la != 0)\n                addf(fun(la, p - 1), fun(w[i].p[x], p), w[i].c);\n            la = w[i].p[x];\n            if (++x &gt;= w[i].p.size()) x = 0;\n        &#125;\n    &#125;\n    return (Dinic(gt) == k);\n&#125;\nint main() &#123;\n    read(n), read(m), read(k);\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        read(w[i].c), read(y);\n        while (y--) &#123;\n            read(x);\n            if (x == 0) x = n + 1;\n            else if (x == -1) x = n + 2;\n            w[i].p.push_back(x);\n        &#125;\n    &#125;\n    n += 2;\n    l = 1, r = lim;\n    while (l &lt;= r) &#123;\n        mid = (l + r) &gt;&gt; 1;\n        if (check(mid))\n            res = mid, r = mid - 1;\n        else l = mid + 1;\n    &#125;\n    print(res ? res - 1 : 0, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"b.-最长递增子序列\">B. 最长递增子序列</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3952/problem/2\" class=\"uri\">http://222.180.160.110:61235/contest/3952/problem/2</a></p>\n<p>就算知道不是按难度顺序排列我也要顺序开题。欸嘿，就是玩。</p>\n<p>第一问很水，跑个 DP 就行。</p>\n<p>第二问有点意思，取出就代表只能选一次，总之典中典，把每个数拆成入点和出点，容量为 <span class=\"math inline\">\\(1\\)</span>，这样就可以只选一次了。</p>\n<p>那怎么保证每次找到的流一定是 LIS 呢？其实这和我们 Dinic 的深度分层数组有异曲同工之妙，我们把 <span class=\"math inline\">\\(f_i = f_j + 1(i&gt;j,A_i\\ge A_j)\\)</span> 的 <span class=\"math inline\">\\((j, i)\\)</span> 连边，容量为 <span class=\"math inline\">\\(1\\)</span> 即可。</p>\n<p>然后源点只和满足 <span class=\"math inline\">\\(f_x = 1\\)</span> 的 <span class=\"math inline\">\\(x\\)</span> 连边，相应地，汇点之和满足 <span class=\"math inline\">\\(f_x = \\text{LIS}\\)</span> 的 <span class=\"math inline\">\\(x\\)</span> 连边。</p>\n<p>第三问很好想啊，我们把 <span class=\"math inline\">\\(1\\)</span> 到源点和 <span class=\"math inline\">\\(n\\)</span> 到汇点的容量设成无穷大就好。</p>\n<p>然后踩了半天的坑，这道题的拆点部分不知道为什么必须要连双向边。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxm = 4e5 + 5;\nconst int maxn = 5e5 + 15;\nstruct _ &#123;\n    int v, w, n;\n    _() &#123;&#125;\n    _(int v1, int w1, int n1) &#123;\n        v = v1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nint n, res;\nint gs, gt, tot = 1;\nint a[maxn], h[maxn], f[maxn];\nint vis[maxn], now[maxn], dep[maxn];\nint min(int x, int y) &#123; return x &lt; y ? x : y; &#125;\nint max(int x, int y) &#123; return x &gt; y ? x : y; &#125;\nbool BFS(int n) &#123;\n    std::fill(vis + 1, vis + n + 1, 0);\n    std::fill(dep + 1, dep + n + 1, 0); \n    std::queue&lt;int&gt; q;\n    dep[gs] = 1, vis[gs] = 1;\n    q.push(gs), now[gs] = h[gs];\n    while (!q.empty()) &#123;\n        int f = q.front(); q.pop();\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            int v = u[i].v, w = u[i].w;\n            if (vis[v] == 1 || w == 0) continue;\n            vis[v] = 1, now[v] = h[v];\n            dep[v] = dep[f] + 1, q.push(v);\n            if (v == gt) return 1;\n        &#125;\n    &#125;\n    return 0;\n&#125;\nint findP(int x, int flow = inf) &#123;\n    if (x == gt) return flow;\n    int rest = flow, i;\n    for (i = now[x]; rest &amp;&amp; i; i = u[i].n) &#123;\n        int v = u[i].v, w = u[i].w;\n        now[x] = i;\n        if (dep[v] != dep[x] + 1 || w == 0) continue;\n        int t = findP(v, min(rest, w));\n        if (t == 0) dep[v] = 0;\n        rest -= t, u[i].w -= t, u[i ^ 1].w += t;\n    &#125;\n    return flow - rest;\n&#125;\nint Dinic(int n) &#123;\n    int res = 0;\n    while (BFS(n)) &#123;\n        int t = findP(gs);\n        while (t) res += t, t = findP(gs);\n    &#125;\n    return res;\n&#125;\nvoid add(int x, int y, int w) &#123;\n    u[++tot] = _(y, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int w) &#123;\n    add(x, y, w), add(y, x, 0);\n    return;\n&#125;\nint main() &#123;\n    read(n);\n    gs = 2 * n + 1, gt = gs + 1;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        read(a[i]), f[i] = 1;\n        addf(i, i + n, 1);\n        addf(i + n, i, 1);\n        for (int j = 1; j &lt; i; ++j) &#123;\n            if (a[j] &lt;= a[i])\n                f[i] = max(f[i], f[j] + 1);\n        &#125;\n        res = max(res, f[i]);\n        for (int j = 1; j &lt; i; ++j) &#123;\n            if (a[j] &lt;= a[i] &amp;&amp; f[i] == f[j] + 1)\n                addf(j, i + n, 1);\n        &#125;\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (f[i] == 1) addf(gs, i, 1);\n        if (f[i] == res) addf(i + n, gt, 1);\n    &#125;\n    print(res, &#39;\\n&#39;);\n    print(Dinic(gt), &#39;\\n&#39;);\n    tot = 1;\n    memset(h, 0, sizeof (h));\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        addf(i, i + n, 1);\n        addf(i + n, i, 1);\n        for (int j = 1; j &lt; i; ++j) &#123;\n            if (a[j] &lt;= a[i] &amp;&amp; f[i] == f[j] + 1)\n                addf(j, i + n, 1);\n        &#125;\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        if (f[i] == 1) &#123;\n            if (i == 1) addf(gs, i, inf);\n            else addf(gs, i, 1);\n        &#125;\n        if (f[i] == res) &#123;\n            if (i == n) addf(i + n, gt, inf);\n            else addf(i + n, gt, 1);\n        &#125;\n    &#125;\n    print(Dinic(gt), &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"c.-餐巾计划问题\">C. 餐巾计划问题</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3952/problem/3\" class=\"uri\">http://222.180.160.110:61235/contest/3952/problem/3</a></p>\n<p>这个有点简单啊。就差把费用流三个大字拍你脸上了。</p>\n<p>用过和没用过的餐巾是不能混合处理的，故考虑拆点，把每一天拆出来一个点表示当天所有用过的餐巾量（注意不止是当天用过的，还可以是前几天传下来的）。</p>\n<p>首先不难想到大源点和每天的没用过连边，容量为无穷大，费用为购买费用，表示购买餐巾；用过的和下一天用过的连边，容量为无穷大，费用为 <span class=\"math inline\">\\(0\\)</span>，表示用过的餐巾的继承；用过的和快洗 / 慢洗所需时间后的没用过的连边，容量为无穷大，费用为快洗 / 慢洗费用，表示把用过的洗成没用过的（奇奇怪怪）。</p>\n<p>那么问题来了，怎么表示使用餐巾呢？这里有一个很妙的处理方式，把没用过的朝大汇点连边，容量为当天使用量，费用为 <span class=\"math inline\">\\(0\\)</span>，表示把这么多没用过的餐巾销毁；再把大源点朝用过的连边，容量也为当天使用量，费用为 <span class=\"math inline\">\\(0\\)</span>，表示凭空变出来这么多条用过的餐巾。</p>\n<p>然后跑个费用流就可以了。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 4e3 + 5;\nconst int maxm = 6e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nbool inq[maxn];\nint gs, gt, tot = 1;\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint n, m, t1, c1, t2, c2, res, x;\nint min(int x, int y) &#123; return x &lt; y ? x : y; &#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0) continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v]) inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w) &#123;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nint main() &#123;\n    read(n);\n    gs = 2 * n + 1, gt = gs + 1;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        read(x);\n        addf(i, gt, x, 0);\n        addf(gs, i + n, x, 0);\n        if (i != n)\n            addf(i + n, i + 1 + n, inf, 0);\n    &#125;\n    read(m), read(t1);\n    read(c1), read(t2), read(c2);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        addf(gs, i, inf, m);\n        if (i + t1 &lt;= n)\n            addf(i + n, i + t1, inf, c1);\n        if (i + t2 &lt;= n)\n            addf(i + n, i + t2, inf, c2);\n    &#125;\n    SSP(gs, gt);\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"d.-运输问题\">D. 运输问题</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3952/problem/4\" class=\"uri\">http://222.180.160.110:61235/contest/3952/problem/4</a></p>\n<p>不是很理解啊，这题就一个普普通通的二分图建模，有什么难点吗，，，</p>\n<p>哦，蓝的，那没事了。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 4e3 + 5;\nconst int maxm = 6e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\nbool inq[maxn];\nint gs, gt, tot = 1;\n_ u[maxm], u1[maxm];\nint fl[maxn], pre[maxn];\nint h[maxn], dis[maxn], h1[maxn];\nint n, m, t1, c1, t2, c2, res, x;\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v]) inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nbool SPFA1(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(pre + 1, pre + n + 1, 0);\n    std::fill(dis + 1, dis + n + 1, -inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0) continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &lt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid SSP1(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA1(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w) &#123;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m);\n    gs = n + m + 1, gt = gs + 1;\n    for (int i = 1; i &lt;= n; ++i)\n        read(x), addf(gs, i, x, 0);\n    for (int i = 1; i &lt;= m; ++i)\n        read(x), addf(i + n, gt, x, 0);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= m; ++j)\n            read(x), addf(i, j + n, inf, x);\n    &#125;\n    memcpy(h1, h, sizeof (h1));\n    memcpy(u1, u, sizeof (u1));\n    SSP(gs, gt);\n    print(res, &#39;\\n&#39;), res = 0;\n    memcpy(h, h1, sizeof (h));\n    memcpy(u, u1, sizeof (u));\n    SSP1(gs, gt);\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"e.-最小路径覆盖\">E. 最小路径覆盖</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3952/problem/5\" class=\"uri\">http://222.180.160.110:61235/contest/3952/problem/5</a></p>\n<p>当我们把所有点视作长度为 <span class=\"math inline\">\\(0\\)</span> 的路径时，答案为 <span class=\"math inline\">\\(n\\)</span>。怎么让这个答案减小呢？我们需要 <strong>合并路径</strong>。</p>\n<p>假设有路径 <span class=\"math inline\">\\(u \\to x\\)</span> 和 <span class=\"math inline\">\\(x \\to v\\)</span>，那么将它们合并为 <span class=\"math inline\">\\(u\\to v\\)</span> 显然可以得到更优的答案。</p>\n<p>那么这个时候就有同学要问了，我选择合并路径的方式会不会对答案产生影响呢？这个不急，我们讲完了再证明。</p>\n<p>首先开一个新图，把所有点整一个保留节目，<span class=\"math inline\">\\(S\\to x\\)</span> 建一条容量为 <span class=\"math inline\">\\(1\\)</span> 的边；<span class=\"math inline\">\\(x&#39; \\to T\\)</span> 建一条容量为 <span class=\"math inline\">\\(1\\)</span> 的边；对于边 <span class=\"math inline\">\\(u\\to v\\)</span>，在 <span class=\"math inline\">\\(u\\to v&#39;\\)</span> 建一条容量为 <span class=\"math inline\">\\(1\\)</span> 的边。</p>\n<p>这个时候我们就有了一个类二分图的模型。想想看，我们在里面跑出来的最大流是什么？</p>\n<p>在这种容量均为 <span class=\"math inline\">\\(1\\)</span> 的类二分图模型中，网络流中找到的路径其实就是二分图中的增广路，因为反向的容量为 <span class=\"math inline\">\\(0\\)</span> 的边就相当于已匹配边，会限制搜索进一步搜下去。</p>\n<p>在二分图中，每找到一条增广路，最大匹配的大小便扩大 <span class=\"math inline\">\\(1\\)</span>；在这里的网络流中也一样，每找到一条路径，最大流的大小便扩大 <span class=\"math inline\">\\(1\\)</span>。</p>\n<p>那么，这里的「路径」究竟有什么含义？</p>\n<p>一条从 <span class=\"math inline\">\\(S\\)</span> 到 <span class=\"math inline\">\\(T\\)</span> 的边，若其流量为 <span class=\"math inline\">\\(1\\)</span>，我们将它视作原图中被选中、加入路径集合的边，你会发现，找最大流（不断延长路径）的过程就相当于在合并路径，而且最后这个新图满足：点和边都不会被重复选中，且因为我们找的是最大流，所有点都会被选中。</p>\n<p>好好好，正确性就很显而易见了，来自于二分图增广路找最大匹配的正确性（被打）。</p>\n<p>那么求出最大流 <span class=\"math inline\">\\(f\\)</span>，因为每合并一次路径，路径的条数就会减少 <span class=\"math inline\">\\(1\\)</span>，所以最后的答案就是 <span class=\"math inline\">\\(N - f\\)</span>。方案呢？</p>\n<p>因为网络流特性，你会发现路径的起点一定是 <span class=\"math inline\">\\(S\\to x\\)</span>（废话），所以找出所有 <span class=\"math inline\">\\(S\\to x\\)</span> 流量为 <span class=\"math inline\">\\(1\\)</span> 的 <span class=\"math inline\">\\(x\\)</span>，它们就是每条路径的起点。</p>\n<p>因为路径没有交叉且肯定联通，所以你沿着这个起点一直找流量为 <span class=\"math inline\">\\(1\\)</span> 的边就能找到头。</p>\n<details>\n<pre class=\"cpp\"><code>namespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 4e3 + 5;\nconst int maxm = 6e5 + 5;\nstruct _ &#123;\n    int v, w, n;\n    _() &#123;&#125;\n    _(int v1, int w1, int n1) &#123;\n        v = v1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nbool vis1[maxn];\nint n, m, x, y, res;\nint gs, gt, tot = 1;\nint a[maxn], h[maxn], f[maxn];\nint vis[maxn], now[maxn], dep[maxn];\nint min(int x, int y) &#123; return x &lt; y ? x : y; &#125;\nint max(int x, int y) &#123; return x &gt; y ? x : y; &#125;\nbool BFS(int n) &#123;\n    std::fill(vis + 1, vis + n + 1, 0);\n    std::fill(dep + 1, dep + n + 1, 0); \n    std::queue&lt;int&gt; q;\n    dep[gs] = 1, vis[gs] = 1;\n    q.push(gs), now[gs] = h[gs];\n    while (!q.empty()) &#123;\n        int f = q.front(); q.pop();\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            int v = u[i].v, w = u[i].w;\n            if (vis[v] == 1 || w == 0) continue;\n            vis[v] = 1, now[v] = h[v];\n            dep[v] = dep[f] + 1, q.push(v);\n            if (v == gt) return 1;\n        &#125;\n    &#125;\n    return 0;\n&#125;\nint findP(int x, int flow = inf) &#123;\n    if (x == gt) return flow;\n    int rest = flow, i;\n    for (i = now[x]; rest &amp;&amp; i; i = u[i].n) &#123;\n        int v = u[i].v, w = u[i].w;\n        now[x] = i;\n        if (dep[v] != dep[x] + 1 || w == 0) continue;\n        int t = findP(v, min(rest, w));\n        if (t == 0) dep[v] = 0;\n        rest -= t, u[i].w -= t, u[i ^ 1].w += t;\n    &#125;\n    return flow - rest;\n&#125;\nint Dinic(int n) &#123;\n    int res = 0;\n    while (BFS(n)) &#123;\n        int t = findP(gs);\n        while (t) res += t, t = findP(gs);\n    &#125;\n    return res;\n&#125;\nvoid add(int x, int y, int w) &#123;\n    u[++tot] = _(y, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int w) &#123;\n    add(x, y, w), add(y, x, 0);\n    return;\n&#125;\nvoid output(int x) &#123;\n    if (x == gs) return;\n    print(x, &#39; &#39;), vis1[x] = 1;\n    for (int i = h[x]; i; i = u[i].n) &#123;\n        int v = u[i].v;\n        if (v &lt;= n || v &gt; 2 * n || vis1[v - n])\n            continue;\n        if (u[i].w == 0) &#123;\n            output(u[i].v - n);\n            return;\n        &#125;\n    &#125;\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m);\n    gs = 2 * n + 1, gt = gs + 1;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        addf(gs, i, 1);\n        addf(i + n, gt, 1);\n    &#125;\n    while (m--) &#123;\n        read(x), read(y);\n        addf(x, y + n, 1);\n    &#125;\n    res = n - Dinic(gt);\n    for (int i = h[gt]; i; i = u[i].n) &#123;\n        if (u[i ^ 1].w == 1) &#123;\n            output(u[i].v - n);\n            putchar(&#39;\\n&#39;);\n        &#125;\n    &#125;\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"f.-数字梯形\">F. 数字梯形</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3952/problem/6\" class=\"uri\">http://222.180.160.110:61235/contest/3952/problem/6</a></p>\n<p>在 GM 的强制要求下只能跳了，呜呜呜</p>\n<hr />\n<h2 id=\"day-27th---14th\">Day 2：7th - 14th</h2>\n<h3 id=\"a.-太空飞行计划\">A. 太空飞行计划</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3976/problem/1\" class=\"uri\">http://222.180.160.110:61235/contest/3976/problem/1</a></p>\n<p>不难想到把大源点和实验连容量为报酬的边；把仪器和大汇点连容量为消费的边；实验和仪器之间连容量为无穷大的边。</p>\n<p>这个时候我们要选择一些实验不去做，选择一些仪器不要，并且要求要和不要的实验和仪器之间不能有边关联，还要求留下的利润最大。</p>\n<p>假如我们把删去一条仪器边视作保留仪器，删去一条实验边视作跳过实验，这是什么？最小割！因为必须保证没有关联，这和最小割要求被分为两个部分是符合的。因为中间的边容量无穷大，故绝对不会选中间的边。同时，它删除了最不赚钱的实验，保留了最便宜的仪器。</p>\n<p>据说这也是个经典最小割模型，建议掌握。</p>\n<p>然后答案呢？先暂时将器材视为负权值，则：</p>\n<ol type=\"1\">\n<li>总收入 为 被选中的实验权值 加上 被选中的器材权值</li>\n<li>被选中的实验权值 为 所有实验权值和 减去 未被选择的实验权值和</li>\n<li>总收入 为 所有实验权值和 减去 未被选择的实验权值和 加上 被选中的器材权值</li>\n<li>总收入 为 所有实验权值和 减去 未被选择的实验权值和 减去 被选中的器材权值的相反数</li>\n<li>最小割 为 未被选择的实验权值和 加上 被选中的器材权值的相反数</li>\n<li>总收入 为 被选中的实验权值 减去 最小割</li>\n</ol>\n<p>那么怎么输出方案呢？</p>\n<p><a href=\"https://www.luogu.com.cn/blog/35891/solution-p2762\" class=\"uri\">https://www.luogu.com.cn/blog/35891/solution-p2762</a></p>\n<p>woc 这篇讲得太好了。最后一次 Dinic 失败了，这是为什么呢？因为 BFS 找不到汇点了，说明若干条残量为 0 的边已经堵死了从源点到汇点的路。这个时候这些残量为 0 的边其实就是最小割。</p>\n<p>那选取的实验和仪器，就是从源点出发可以到达的（已在 BFS 中为其分层作为记号），所以只需统计有层数的点即可。太妙了。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 4e3 + 5;\nconst int maxm = 6e5 + 5;\nstruct _ &#123;\n    int v, w, n;\n    _() &#123;&#125;\n    _(int v1, int w1, int n1) &#123;\n        v = v1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nbool vis1[maxn];\nint n, m, x, y, res;\nint gs, gt, tot = 1;\nint a[maxn], h[maxn], f[maxn];\nint vis[maxn], now[maxn], dep[maxn];\nint min(int x, int y) &#123; return x &lt; y ? x : y; &#125;\nint max(int x, int y) &#123; return x &gt; y ? x : y; &#125;\nbool BFS(int n) &#123;\n    std::fill(vis + 1, vis + n + 1, 0);\n    std::fill(dep + 1, dep + n + 1, 0); \n    std::queue&lt;int&gt; q;\n    dep[gs] = 1, vis[gs] = 1;\n    q.push(gs), now[gs] = h[gs];\n    while (!q.empty()) &#123;\n        int f = q.front(); q.pop();\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            int v = u[i].v, w = u[i].w;\n            if (vis[v] == 1 || w == 0) continue;\n            vis[v] = 1, now[v] = h[v];\n            dep[v] = dep[f] + 1, q.push(v);\n            if (v == gt) return 1;\n        &#125;\n    &#125;\n    return 0;\n&#125;\nint findP(int x, int flow = inf) &#123;\n    if (x == gt) return flow;\n    int rest = flow, i;\n    for (i = now[x]; rest &amp;&amp; i; i = u[i].n) &#123;\n        int v = u[i].v, w = u[i].w;\n        now[x] = i;\n        if (dep[v] != dep[x] + 1 || w == 0) continue;\n        int t = findP(v, min(rest, w));\n        if (t == 0) dep[v] = 0;\n        rest -= t, u[i].w -= t, u[i ^ 1].w += t;\n    &#125;\n    return flow - rest;\n&#125;\nint Dinic(int n) &#123;\n    int res = 0;\n    while (BFS(n)) &#123;\n        int t = findP(gs);\n        while (t) res += t, t = findP(gs);\n    &#125;\n    return res;\n&#125;\nvoid add(int x, int y, int w) &#123;\n    u[++tot] = _(y, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int w) &#123;\n    add(x, y, w), add(y, x, 0);\n    return;\n&#125;\nint main() &#123;\n    scanf(&quot;%lld %lld&quot;, &amp;n, &amp;m);\n    gs = n + m + 1, gt = gs + 1;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        scanf(&quot;%lld&quot;, &amp;x);\n        addf(gs, i, x);\n        res += x;\n        std::string tmp;\n        std::getline(std::cin, tmp);\n        std::stringstream t(tmp);\n        while (t &gt;&gt; y)\n            addf(i, y + n, inf);\n    &#125;\n    for (int i = 1; i &lt;= m; ++i)\n        read(x), addf(n + i, gt, x);\n    res -= Dinic(gt);\n    for (int i = 1; i &lt;= n; ++i)\n        if (dep[i] != 0) print(i, &#39; &#39;);\n    putchar(&#39;\\n&#39;);\n    for (int i = n + 1; i &lt;= n + m; ++i)\n        if (dep[i] != 0) print(i - n, &#39; &#39;);\n    putchar(&#39;\\n&#39;), print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n",
            "tags": [
                "网络流"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20230720/",
            "url": "https://xsc062.netlify.app/20230720/",
            "title": "费用流练习",
            "date_published": "2023-07-20T09:57:23.000Z",
            "content_html": "<p><a href=\"http://222.180.160.110:61235/contest/3820\">费用流入门练习</a>。</p>\n<span id=\"more\"></span>\n<hr />\n<h3 id=\"a.-订货\">A. 订货</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3820/problem/1\" class=\"uri\">http://222.180.160.110:61235/contest/3820/problem/1</a></p>\n<p>这个带继承关系的模型很熟悉，想到了 <a href=\"https://www.cnblogs.com/XSC062/p/17548925.html\">猪</a> 那一题。所以我们试着仿照这个方式来建图。</p>\n<p>题目提到了单位费用，这简直就是直接把边的费用拍你脸上嘲讽。</p>\n<p>我们拉一个大源点，朝每个月连一条容量为无穷大、费用为当月购买单位费用的边，表示每个月的购买。</p>\n<p>拉一个大汇点，每个月朝它连一条容量为当月需求量、费用为 <span class=\"math inline\">\\(0\\)</span> 的边，表示每个月的需求。</p>\n<p>再让每个月朝下一个月连一条容量为仓库容量、费用为贮存费用的边，表示继承。跑一个最小费用最大流即可。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 405;\nconst int inf = 1e18;\nconst int maxm = 5e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nbool inq[maxn];\nint n, m, S, x, res;\nint gs, gt, tot = 1;\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w) &#123;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m), read(S);\n    gs = n + 1, gt = gs + 1;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        read(x);\n        addf(i, gt, x, 0);\n        if (i != n)\n            addf(i, i + 1, S, m);\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        read(x);\n        addf(gs, i, inf, x);\n    &#125;    \n    SSP(gs, gt);\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int  </code></pre>\n</details>\n<hr />\n<h3 id=\"b.-网络扩容\">B. 网络扩容</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3820/problem/2\" class=\"uri\">http://222.180.160.110:61235/contest/3820/problem/2</a></p>\n<p>鉴于一道费用流不会无缘无故先让你求一遍最大流，我们先持观望态度，暂且认为最大流对题目有提示作用 <del>而不是说这道题就是个缝合怪</del></p>\n<p>其实看完题我们就悟了，这怎么这么像上下界网络流那个差量网络呀，要不我们试试这么干？</p>\n<p>我们先求得普通网络中的最大流，然后每条边减去流量，就成为了一个「差量网络 Pro」。那么我们现在就要通过扩容让该网络中的最大流变为 <span class=\"math inline\">\\(K\\)</span>。对于扩容的操作，不难想到把每条边的边权设为正无穷，然后费用设为扩容费用。</p>\n<p>现在有了一个问题：原图中未留满的边，在现在的新网络中的残余容量应该如何处理呢？很简单，我们就把它当作已经扩过了这么多容，通过拆边操作拆出来一条容量为原图中残余容量、费用为 <span class=\"math inline\">\\(0\\)</span>「会员通道」，那么算法就会优先选择这条边。</p>\n<p>怎么去控制流量为 <span class=\"math inline\">\\(K\\)</span>？联想到之前的拆边操作，我们考虑拆点。在 <span class=\"math inline\">\\(1\\)</span> 和 <span class=\"math inline\">\\(N\\)</span> 中任选一个拆开作为新的源点 / 汇点，新点和旧点之间的容量为 <span class=\"math inline\">\\(K\\)</span>、费用为 <span class=\"math inline\">\\(0\\)</span> 即可。</p>\n<p>然后跑一个最小费用最大流就行。<del>该说不说题目的正解思路引导做得还挺好的</del></p>\n<p>其实注意到在跑完最大流之后，所有正向边的残余容量已经求得，只要在跑最大流时令所有边的费用为 <span class=\"math inline\">\\(0\\)</span>（毕竟最大流不关心费用），就可以沿用原图，只加新边再跑费用流。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 1e3 + 5;\nconst int maxm = 5e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\nstruct __ &#123; int x, y, c, w; &#125;;\n_ u[maxm];\n__ w[maxm];\nbool inq[maxn];\nint n, m, k, res;\nint gs, gt, tot = 1;\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint vis[maxn], now[maxn], dep[maxn];\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool BFS(int n) &#123;\n    std::fill(vis + 1, vis + n + 1, 0);\n    std::fill(dep + 1, dep + n + 1, 0); \n    std::queue&lt;int&gt; q;\n    dep[gs] = 1, vis[gs] = 1;\n    q.push(gs), now[gs] = h[gs];\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop();\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            int v = u[i].v, w = u[i].c;\n            if (vis[v] == 1 || w == 0)\n                continue;\n            vis[v] = 1, now[v] = h[v];\n            dep[v] = dep[f] + 1, q.push(v);\n            if (v == gt)\n                return 1;\n        &#125;\n    &#125;\n    return 0;\n&#125;\nint findP(int x, int flow = inf) &#123;\n    if (x == gt)\n        return flow;\n    int rest = flow, i;\n    for (i = now[x]; rest &amp;&amp; i; i = u[i].n) &#123;\n        int v = u[i].v, w = u[i].c;\n        now[x] = i;\n        if (dep[v] != dep[x] + 1 || w == 0)\n            continue;\n        int t = findP(v, min(rest, w));\n        if (t == 0)\n            dep[v] = 0;\n        rest -= t;\n        u[i].c -= t, u[i ^ 1].c += t;\n    &#125;\n    return flow - rest;\n&#125;\nint Dinic(int n) &#123;\n    int res = 0;\n    while (BFS(n)) &#123;\n        int t = findP(gs);\n        while (t) &#123;\n            res += t;\n            t = findP(gs);\n        &#125;\n    &#125;\n    return res;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w = 0) &#123;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m), read(k);\n    gs = 1, gt = n;\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        read(w[i].x), read(w[i].y);\n        read(w[i].c), read(w[i].w);\n        addf(w[i].x, w[i].y, w[i].c);\n    &#125;\n    print(Dinic(n), &#39; &#39;);\n    gs = n + 1, addf(gs, 1, k, 0);\n    for (int i = 1; i &lt;= m; ++i)\n        addf(w[i].x, w[i].y, inf, w[i].w);\n    SSP(gs, gt);\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"c.-航班安排\">C. 航班安排</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3820/problem/3\" class=\"uri\">http://222.180.160.110:61235/contest/3820/problem/3</a></p>\n<p>很简单一个道理，时间的具体值对我们来说并不重要。能到就是能到，不能到就是不能到。</p>\n<p>边权矩阵也并不是全部有用，这条边和任务有关系吗？没有，那就当它是空气。</p>\n<p>那什么会对我们产生限制？飞机数量。故容量由飞机数量决定。什么是我们要最大化的值？收益，故我们的费用是支出。</p>\n<p>如果飞机能在一个任务结束之后，在另一个任务开始之前飞过去，那就将两个任务连边，容量为 <span class=\"math inline\">\\(1\\)</span>，费用为两点间花费。特别地，应将机场拆为大源点和大汇点，并在二者中任选其一拆点（和 T2 类似），好作出 <span class=\"math inline\">\\(K\\)</span> 的流量限制。</p>\n<p>还有一个小细节，对于一个任务的流量我们也要加以约束，不然碰到流入 <span class=\"math inline\">\\(2\\)</span> 流出 <span class=\"math inline\">\\(2\\)</span> 这种平衡但不合法的情况就不行了，所以对于任务我们也要按老套路拆点。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 405;\nconst int maxm = 4e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\nstruct __ &#123;\n    int x, y, l, r, c;\n    bool operator&lt; (const __ &amp;q) const &#123;\n        return l &lt; q.l;\n    &#125;\n&#125;;\n_ u[maxm];\n__ w[maxn];\nbool inq[maxn];\nint gs, gt, tot = 1;\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint n, m, k, T, res, fs, ft;\nint t[maxn][maxn], f[maxn][maxn];\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w) &#123;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m), read(k), read(T);\n    fs = 2 * m + 1, ft = 2 * m + 2;\n    gs = 2 * m + 3, gt = 2 * m + 4;\n    addf(gs, fs, k, 0), addf(ft, gt, k, 0);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= n; ++j)\n            read(t[i][j]);\n    &#125;\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= n; ++j)\n            read(f[i][j]);\n    &#125;\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        read(w[i].x), read(w[i].y);\n        read(w[i].l), read(w[i].r);\n        read(w[i].c), ++w[i].x, ++w[i].y;\n    &#125;\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        addf(i + m, i, 1, 0);\n        if (t[1][w[i].x] &lt;= w[i].l) &#123;\n            addf(fs, i + m, 1,\n                f[1][w[i].x] - w[i].c);\n        &#125;\n        if (w[i].r + t[w[i].y][1] &lt;= T)\n            addf(i, ft, 1, f[w[i].y][1]);\n        for (int j = 1; j &lt;= m; ++j) &#123;\n            if (i != j &amp;&amp; w[i].r +\n                t[w[i].y][w[j].x] &lt;= w[j].l) &#123;\n                addf(i, j + m, 1,\n                    f[w[i].y][w[j].x] - w[j].c);\n            &#125;\n        &#125;\n    &#125;\n    SSP(gs, gt);\n    print(-res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"d.-修车\">D. 修车</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3820/problem/4\" class=\"uri\">http://222.180.160.110:61235/contest/3820/problem/4</a></p>\n<p>顾客数一定，所谓平均等待时间不过是个幌子，只需要求得最小等待总时间。</p>\n<p>技术人员不能同时修两辆车，<span class=\"math inline\">\\(M\\)</span> 的范围又这么小，不往拆点想都难。可问题来了，怎么拆呢？</p>\n<p>我一开始的想法是，用点 <span class=\"math inline\">\\((i, j)\\)</span> 表示人 <span class=\"math inline\">\\(i\\)</span> 修车 <span class=\"math inline\">\\(j\\)</span>，但是这样建图怎样也无法达到目的。</p>\n<p>于是我添加了一个维度 <span class=\"math inline\">\\(k\\)</span>，用点 <span class=\"math inline\">\\((i, j, k)\\)</span> 表示人 <span class=\"math inline\">\\(i\\)</span> 修车 <span class=\"math inline\">\\(j\\)</span>，并且这是他修的倒数第 <span class=\"math inline\">\\(k\\)</span> 辆车，这样建图就轻而易举了。但接下来就面临了一个问题：这数据范围跑不过。于是乎审视我们的点，其实 <span class=\"math inline\">\\(j\\)</span> 这个维度是可以被合并的，只保留 <span class=\"math inline\">\\((i, k)\\)</span>，因为不可能存在两辆车同时为人 <span class=\"math inline\">\\(i\\)</span> 的倒数第 <span class=\"math inline\">\\(k\\)</span> 辆车。</p>\n<p>故将大源点和每辆车连边，容量为 <span class=\"math inline\">\\(1\\)</span>，费用为 <span class=\"math inline\">\\(0\\)</span>；将每辆车 <span class=\"math inline\">\\(j\\)</span> 和每个 <span class=\"math inline\">\\((i, k)\\)</span> 连边，容量为 <span class=\"math inline\">\\(1\\)</span>，费用为 <span class=\"math inline\">\\(T_{i, j}\\times k\\)</span>。</p>\n<p>这里有一点点费用提前计算的意思，所以就直接将每个 <span class=\"math inline\">\\((i, j)\\)</span> 和大汇点连边，容量为 <span class=\"math inline\">\\(1\\)</span>，费用为 <span class=\"math inline\">\\(0\\)</span>。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 1e4 + 5;\nconst int maxm = 1e6 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nbool inq[maxn];\nint n, m, x, res;\nint gs, gt, tot = 1;\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint fun(int i, int j) &#123;\n    return n + (i - 1) * n + j;\n&#125;\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w) &#123;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nint main() &#123;\n    read(m), read(n);\n    gs = n * m + n + 1, gt = gs + 1;\n    for (int i = 1; i &lt;= n; ++i)\n        addf(gs, i, 1, 0);\n    for (int i = 1; i &lt;= n * m; ++i)\n        addf(i + n, gt, 1, 0);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        for (int j = 1; j &lt;= m; ++j) &#123;\n            read(x);\n            for (int k = 1; k &lt;= n; ++k) &#123;\n                addf(i, fun(j, k),\n                            1, x * k);\n            &#125;\n        &#125;\n    &#125;\n    SSP(gs, gt);\n    printf(&quot;%.2lf&quot;, res * 1.0 / n);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<h3 id=\"e.-连连看\">E. 连连看</h3>\n<p><a href=\"http://222.180.160.110:61235/contest/3820/problem/5\" class=\"uri\">http://222.180.160.110:61235/contest/3820/problem/5</a></p>\n<p>样例已经告诉了我们事实：小心删数，因为会有数同时出现在多组勾股数中。</p>\n<p>还是熟悉的单点 <span class=\"math inline\">\\(1\\)</span> 流量限制，故拆点为入点和出点，入点连大源点容量为 <span class=\"math inline\">\\(1\\)</span> 费用为 <span class=\"math inline\">\\(0\\)</span>，出点连大汇点容量为 <span class=\"math inline\">\\(1\\)</span> 费用为 <span class=\"math inline\">\\(0\\)</span>，满足条件的 <span class=\"math inline\">\\(x\\)</span> 和 <span class=\"math inline\">\\(y\\)</span> 我们为了不整细节就暴力地连双向边然后跑最大费用最大流。</p>\n<p>由于双向边这个神必操作，最后的最大流和最大费用都会翻倍，输出的时候要减半。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int inf = 1e18;\nconst int maxn = 2e3 + 5;\nconst int maxm = 4e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nbool inq[maxn];\nint l, r, res, cnt;\nbool f[maxn][maxn];\nint gs, gt, tot = 1;\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint gcd(int x, int y) &#123;\n    return y ? gcd(y, x % y) : x;\n&#125;\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, -inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &lt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d, cnt += mn;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid addf(int x, int y, int c, int w) &#123;\n    if (f[x][y])\n        return;\n    f[x][y] = f[y][x] = 1;\n    add(x, y, c, w), add(y, x, 0, -w);\n    return;\n&#125;\nbool check(int x, int y) &#123;\n    int z = sqrt(x * x - y * y);\n    if (z * z + y * y == x * x)\n        return (gcd(z, y) == 1);\n    return 0;\n&#125;\nint main() &#123;\n    read(l), read(r);\n    gs = 2 * r + 1, gt = 2 * r + 2;\n    for (int i = l; i &lt;= r; ++i) &#123;\n        addf(gs, i, 1, 0);\n        addf(i + r, gt, 1, 0);\n        for (int j = l; j &lt; i; ++j) &#123;\n            if (check(i, j)) &#123;\n                addf(j, i + r, 1, i + j);\n                addf(i, j + r, 1, i + j);\n            &#125;\n        &#125;\n    &#125;\n    SSP(gs, gt);\n    print(cnt / 2, &#39; &#39;), print(res / 2, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n<hr />\n<p>依我看，队名就叫「曾总说的都队」吧 🐵</p>\n",
            "tags": [
                "网络流",
                "费用流"
            ]
        },
        {
            "id": "https://xsc062.netlify.app/20230717/",
            "url": "https://xsc062.netlify.app/20230717/",
            "title": "学习小组",
            "date_published": "2023-07-17T07:52:02.000Z",
            "content_html": "<p>Solution to <a href=\"https://codeforces.com/problemset/problem/756/D\">CF756D Bacterial Melee</a>。</p>\n<span id=\"more\"></span>\n<hr />\n<p>给我整不会了。怎么处理平方？怎么控制参与总学生最多？其中一定又有什么我不知道的奇技淫巧。</p>\n<p>一切尽在连边。</p>\n<ul>\n<li><p>处理学生与社团间的选择关系</p>\n<p>把学生向社团连边。学生只能选取某社团一次，故容量为 <span class=\"math inline\">\\(1\\)</span>。</p>\n<p>一个学生选取某个社团并不会立即对最终花费带来可计算的影响，因为最终花费由该社团参与的 <strong>所有学生平方数</strong> 决定。</p>\n故这一步我们先不慌计算社团的代价，只算参与社团本身需要的手续费 <span class=\"math inline\">\\(F_i\\)</span>。但是需要注意到手续费是财务部的收入而非支出，故实际边权为 <span class=\"math inline\">\\(-F_i\\)</span>，计算答案时视作负支出（明显不会因此而产生负环，因此可以放心加边）。</li>\n<li><p>处理学生的选择数量上限</p>\n<p>学生最多只能选择 <span class=\"math inline\">\\(K\\)</span> 个社团，为保证这一点，我们将源点向学生连边，容量为 <span class=\"math inline\">\\(K\\)</span>。</p>\n很明显，代价也不在此处计算，故令费用为 <span class=\"math inline\">\\(0\\)</span>。</li>\n<li><p>保证代价最小</p>\n<p>一开始，我认为最小费用最大流一定会找到最小费用，这个处理是无意义的，后来被打脸了。</p>\n<p>我们若欲在此图中寻得最小费用最大流，则 <strong>流一定最大</strong>。</p>\n<p>而学生的流入容量为 <span class=\"math inline\">\\(K\\)</span>，为了满流，学生一定会尽可能多地选择社团，那么费用就会噌噌上涨。回到目标，即保证学生都选取至少一个社团时，支出最小。</p>\n<p>那我们只要给机会让学生可以只选取一个社团就好了（当然也可以是两个、三个……）。</p>\n<p>故让学生向终点连边，容量为 <span class=\"math inline\">\\(K-1\\)</span>，那么学生可以在选取了所有比较赚的社团后就不再选了，选这条边达到满流。同样因为该边流量只有 <span class=\"math inline\">\\(K-1\\)</span>，学生为了满流就只能再选至少一个社团，满足题意。</p>\n不选社团明显是没有手续费和社团支出的，故费用为 <span class=\"math inline\">\\(0\\)</span>。</li>\n<li><p>处理社团本身支出</p>\n<p>问题在于如何处理 <span class=\"math inline\">\\(a\\)</span> 这个平方项。</p>\n<p>对于平方，我们可以联想到许多数学知识，譬如完全平方、平方差等，这里用到了平方差。</p>\n<p>假如原来的代价是 <span class=\"math inline\">\\(C_i\\times x^2\\)</span>，又加入了一个人，那么费用会变成 <span class=\"math inline\">\\(C_i\\times (x + 1)^2\\)</span>。由平方差得两者之差为 <span class=\"math inline\">\\(C_i\\times (2\\times x + 1)\\)</span>。当 <span class=\"math inline\">\\(x - 1\\)</span> 取为任意正整数时，<span class=\"math inline\">\\(2\\times x + 1\\)</span> 即为所有奇数。</p>\n<p>所以我们将社团向汇点连边，连很多条边，每条边表示 <strong>新增一个团员的代价</strong>，容量为 <span class=\"math inline\">\\(1\\)</span> 表示一个新增团员，费用为从 <span class=\"math inline\">\\(1\\)</span> 开始，一直到 <span class=\"math inline\">\\(2\\times (N - 1) + 1\\)</span> 的所有奇数。</p></li>\n</ul>\n<p>那么问题到这里就算处理完了。直接上费用流即可。</p>\n<p>不知道我的代码遭遇了哪家宇宙射线的侵蚀，Dinic 死活过不去，换成 EK 就过了。同学们如果发现自己的 Dinic 过不了也可以试试换 EK。</p>\n<details>\n<pre class=\"cpp\"><code>#define int long long\nnamespace XSC062 &#123;\nusing namespace fastIO;\nconst int maxn = 405;\nconst int inf = 1e18;\nconst int maxm = 5e5 + 5;\nstruct _ &#123;\n    int v, c, w, n;\n    _() &#123;&#125;\n    _(int v1, int c1, int w1, int n1) &#123;\n        v = v1, c = c1, w = w1, n = n1;\n    &#125;\n&#125;;\n_ u[maxm];\nbool inq[maxn];\nint n, m, k, x, res;\nint gs, gt, tot = 1;\nint c[maxn], f[maxn];\nint h[maxn], dis[maxn];\nint fl[maxn], pre[maxn];\nint min(int x, int y) &#123;\n    return x &lt; y ? x : y;\n&#125;\nbool SPFA(int s, int n) &#123;\n    std::queue&lt;int&gt; q;\n    std::fill(dis + 1, dis + n + 1, inf);\n    q.push(s), dis[s] = 0, inq[s] = 1;\n    pre[s] = inf, pre[gt] = 0, fl[s] = inf;\n    while (!q.empty()) &#123;\n        int f = q.front();\n        q.pop(), inq[f] = 0;\n        for (int i = h[f]; i; i = u[i].n) &#123;\n            if (u[i].c == 0)\n                continue;\n            int v = u[i].v, w = u[i].w;\n            if (dis[v] &gt; dis[f] + w) &#123;\n                pre[v] = i ^ 1;\n                dis[v] = dis[f] + w;\n                fl[v] = min(fl[f], u[i].c);\n                if (!inq[v])\n                    inq[v] = 1, q.push(v);\n            &#125;\n        &#125;\n    &#125;\n    return pre[gt];\n&#125;\nvoid SSP(int s, int n) &#123;\n    int p, mn, d;\n    while (SPFA(s, n)) &#123;\n        mn = fl[gt], d = 0;\n        for (p = gt; p != s; p = u[pre[p]].v) &#123;\n            u[pre[p]].c += mn;\n            u[pre[p] ^ 1].c -= mn;\n            d += u[pre[p] ^ 1].w;\n        &#125;\n        res += mn * d;\n    &#125;\n    return;\n&#125;\nvoid add(int x, int y, int c, int w) &#123;\n    u[++tot] = _(y, c, w, h[x]);\n    h[x] = tot;\n    return;\n&#125;\nvoid readx(int &amp;x) &#123;\n    char ch = nec();\n    while (ch != &#39;0&#39; &amp;&amp; ch != &#39;1&#39;)\n        ch = nec();\n    x = ch - &#39;0&#39;;\n    return;\n&#125;\nint main() &#123;\n    read(n), read(m), read(k);\n    gs = n + m + 1, gt = gs + 1;\n    for (int i = 1; i &lt;= m; ++i) &#123;\n        read(c[i]);\n        for (int j = 0; j &lt; n; ++j) &#123;\n            add(i + n, gt, 1,\n                    (2 * j + 1) * c[i]);\n            add(gt, i + n, 0,\n                    -(2 * j + 1) * c[i]);\n        &#125;\n    &#125;\n    for (int i = 1; i &lt;= m; ++i)\n        read(f[i]);\n    for (int i = 1; i &lt;= n; ++i) &#123;\n        add(gs, i, k, 0);\n        add(i, gs, 0, 0);\n        add(i, gt, k - 1, 0);\n        add(gt, i, 0, 0);\n        for (int j = 1; j &lt;= m; ++j) &#123;\n            readx(x);\n            if (x == 1) &#123;\n                add(i, j + n, 1, -f[j]); // 负代价\n                add(j + n, i, 0, f[j]);\n            &#125;\n        &#125;\n    &#125;\n    SSP(gs, gt);\n    print(res, &#39;\\n&#39;);\n    return 0;\n&#125;\n&#125; // namespace XSC062\n#undef int</code></pre>\n</details>\n",
            "tags": [
                "网络流",
                "费用流"
            ]
        }
    ]
}