<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xsc062.netlify.app</id>
    <title> • Posts by &#34;dp&#34; tag</title>
    <link href="https://xsc062.netlify.app" />
    <updated>2025-08-20T12:26:44.000Z</updated>
    <category term="并查集" />
    <category term="斜率优化" />
    <category term="悬线法" />
    <category term="哈希" />
    <category term="字典树" />
    <category term="DP" />
    <category term="单调队列" />
    <category term="分治" />
    <category term="二分图" />
    <category term="CRT / exCRT" />
    <category term="排列组合" />
    <category term="网络流" />
    <category term="费用流" />
    <category term="二分" />
    <category term="上下界网络流" />
    <category term="容斥原理" />
    <category term="线段树" />
    <category term="树状数组" />
    <category term="区间 DP" />
    <category term="构造" />
    <category term="Tarjan" />
    <category term="数据结构" />
    <category term="下饭" />
    <category term="LCA" />
    <category term="倍增" />
    <category term="鸽巢原理" />
    <category term="概率期望" />
    <category term="调和级数" />
    <category term="差分" />
    <category term="思维" />
    <category term="树形 DP" />
    <category term="最小生成树" />
    <category term="SAM" />
    <category term="状压" />
    <category term="分块" />
    <category term="可持久化" />
    <category term="笛卡尔树" />
    <category term="高维前缀和" />
    <category term="闲话" />
    <category term="欧拉回路" />
    <category term="树链剖分" />
    <category term="长链剖分" />
    <category term="KMP" />
    <category term="border" />
    <category term="字符串" />
    <category term="AC 自动机" />
    <category term="SA" />
    <category term="数学" />
    <category term="树上差分" />
    <category term="FWT" />
    <category term="堆" />
    <category term="树的重心" />
    <category term="二项式定理" />
    <category term="二项式反演" />
    <category term="贪心" />
    <category term="均摊" />
    <category term="计数" />
    <category term="优化建图" />
    <category term="反悔贪心" />
    <category term="调整法" />
    <category term="背包" />
    <category term="博弈论" />
    <category term="DP 优化" />
    <category term="虚树" />
    <category term="点分治" />
    <category term="WQS 二分" />
    <category term="闵可夫斯基和" />
    <category term="slope trick" />
    <category term="四边形不等式" />
    <category term="暴力" />
    <category term="状压 DP" />
    <category term="组合数学" />
    <category term="支配对" />
    <category term="DDP" />
    <category term="平衡树" />
    <category term="容斥" />
    <category term="猫树" />
    <category term="Kruskal 重构树" />
    <category term="李超线段树" />
    <entry>
        <id>https://xsc062.netlify.app/20250820/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250820/"/>
        <content type="html">&lt;p&gt;困难&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-beauty拆贡献&#34;&gt;B. beauty（拆贡献）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6513/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6513/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n,V\)&lt;/span&gt;，求出对于所有长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，值域为 &lt;span class=&#34;math inline&#34;&gt;\([1,V]\)&lt;/span&gt; 的序列 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\sum_{i=1}^n |a_i-a_{n-i+1}|\)&lt;/span&gt; 的和。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,V\le 5000\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;容易想到算贡献，会有一个 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2V)\)&lt;/span&gt; 的做法。但是想 &lt;span class=&#34;math inline&#34;&gt;\(O(nV)\)&lt;/span&gt; 做是很抽象的，和 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2V)\)&lt;/span&gt; 的思路已经很不一样了&lt;/li&gt;
&lt;li&gt;经典 trick，&lt;span class=&#34;math inline&#34;&gt;\(a_{i+n/2}-a_i=\sum\limits_{x=0}^{+\infty} [a_i\le x&amp;lt;a_{i+n/2}]\)&lt;/span&gt; 拆贡献 。故要算 &lt;span class=&#34;math inline&#34;&gt;\(a_{i}-a_{i+n/2}\)&lt;/span&gt;，只需要对于每个 &lt;span class=&#34;math inline&#34;&gt;\(x\in[a_i,a_{i+n/2})\)&lt;/span&gt; 计算贡献。&lt;/li&gt;
&lt;li&gt;枚举 &lt;span class=&#34;math inline&#34;&gt;\(x\in [1,V)\)&lt;/span&gt;，再枚举最大的 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(a_t\ge x\)&lt;/span&gt;。那么有 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\le x\)&lt;/span&gt;，同时有 &lt;span class=&#34;math inline&#34;&gt;\(n-t\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(a_i&amp;gt;x\)&lt;/span&gt;；满足 &lt;span class=&#34;math inline&#34;&gt;\(i\le n/2\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(a_{i},a_{i+n/2}\)&lt;/span&gt; 对数应该是 &lt;span class=&#34;math inline&#34;&gt;\(\min(t,n-t)\)&lt;/span&gt;。故对于一个确定的序列，&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 共有 &lt;span class=&#34;math inline&#34;&gt;\(\min(t,n-t)\)&lt;/span&gt; 的贡献。&lt;/li&gt;
&lt;li&gt;考虑计数满足 &lt;span class=&#34;math inline&#34;&gt;\(a_t\le x\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，这要求第 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 大的数 &lt;span class=&#34;math inline&#34;&gt;\(\le x\)&lt;/span&gt; 而第 &lt;span class=&#34;math inline&#34;&gt;\(t+1\)&lt;/span&gt; 大的数 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt;，也即在 &lt;span class=&#34;math inline&#34;&gt;\([1,x]\)&lt;/span&gt; 里找 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 个数再在 &lt;span class=&#34;math inline&#34;&gt;\((x,V]\)&lt;/span&gt; 里找 &lt;span class=&#34;math inline&#34;&gt;\(n-t\)&lt;/span&gt; 个数，注意还要再乘上这两种数拼起来的方案数。&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;beauty.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;beauty.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int T;
    std::vector&amp;lt;long long&amp;gt; fac(5001), inv(5001);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; pw(5001, std::vector&amp;lt;long long&amp;gt; (5001));
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= 5000; ++i) &amp;#123;
        fac[i] = fac[i - 1] * i % mod;
        pw[i][0] = 1ll;
        for (int j = 1; j &amp;lt;= 5000; ++j)
            pw[i][j] = pw[i][j - 1] * i % mod;
    &amp;#125;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[5000] = qkp(fac[5000], mod - 2);
    for (int i = 4999; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[m] % mod * inv[n - m] % mod;
    &amp;#125;;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, V;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; V;
        auto res(0ll);
        for (int x = 1; x &amp;lt; V; ++x)
            for (int t = 1; t &amp;lt; n; ++t) &amp;#123;
                int k = std::min(t, n - t);
                (res += k * pw[x][t] % mod * pw[V - x][n - t] % mod * C(n, t) % mod) %= mod;
            &amp;#125;
        std::cout &amp;lt;&amp;lt; res * 2 % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-drink-bar容斥-偏序&#34;&gt;C. Drink Bar（容斥 + 偏序）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/AT_snuke21_j&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/AT_snuke21_j&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三个属性都是排列，可以推理出只要两个三元组中，作出贡献的元素不完全相同，两个三元组就不同。讨论作出贡献的元素数量。&lt;/li&gt;
&lt;li&gt;只有一个元素作出贡献，答案为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;有两个元素作出贡献，任选的话答案为 &lt;span class=&#34;math inline&#34;&gt;\(C_n^2\)&lt;/span&gt;，要减去一个元素严格优于另一个元素的情况，三维偏序即可。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有三个元素作出贡献，是个有点复杂的容斥，不妨设三元组为 &lt;span class=&#34;math inline&#34;&gt;\((i,j,k)\)&lt;/span&gt;，其中贡献次数最多的为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 贡献了 &lt;span class=&#34;math inline&#34;&gt;\(\ge 1\)&lt;/span&gt; 次，方案数为 &lt;span class=&#34;math inline&#34;&gt;\(C_n^3\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 贡献了 &lt;span class=&#34;math inline&#34;&gt;\(\ge 2\)&lt;/span&gt; 次，枚举作出两次贡献的属性，以 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt; 为例，那么有 &lt;span class=&#34;math inline&#34;&gt;\(a_j,a_k&amp;lt;a_i\)&lt;/span&gt;，以及 &lt;span class=&#34;math inline&#34;&gt;\(b_j,b_k&amp;lt;b_i\)&lt;/span&gt;，二维偏序即可&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 贡献了 &lt;span class=&#34;math inline&#34;&gt;\(\ge 3\)&lt;/span&gt; 次，依然是三维偏序，可以用『两个元素做出贡献』中 cdq 得到的值算出答案。记得乘 2，因为被多减了 2 次。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    struct node &amp;#123; int a, b, c, res; &amp;#125;;
    std::vector&amp;lt;node&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i].a &amp;gt;&amp;gt; a[i].b &amp;gt;&amp;gt; a[i].c;
        a[i].res = 0;
    &amp;#125;
    long long res = n;
    res += (long long)n * (n - 1) / 2;
    std::vector&amp;lt;int&amp;gt; bit(n + 1);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] += v;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    std::function&amp;lt;void(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (l == r)
            return;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        calc(l, mid), calc(mid + 1, r);
        int j = l;
        for (int i = mid + 1; i &amp;lt;= r; ++i) &amp;#123;
            for (; j &amp;lt;= mid &amp;amp;&amp;amp; a[j].b &amp;lt; a[i].b; ++j)
                add(a[j].c, 1);
            a[i].res += ask(a[i].c);
        &amp;#125;
        for (int i = l; i &amp;lt; j; ++i)
            add(a[i].c, -1);
        std::inplace_merge(a.begin() + l, a.begin() + mid + 1, a.begin() + r + 1, [&amp;amp;](node x, node y) &amp;#123; return x.b &amp;lt; y.b; &amp;#125;);
        return;
    &amp;#125;;
    std::sort(a.begin() + 1, a.end(), [&amp;amp;](node x, node y) &amp;#123; return x.a &amp;lt; y.a; &amp;#125;);
    calc(1, n);
    for (int i = 1; i &amp;lt;= n; ++i)
        res -= a[i].res;
    res += (long long)n * (n - 1) * (n - 2) / 6;
    for (int k = 0; k &amp;lt; 3; ++k) &amp;#123;
        std::sort(a.begin() + 1, a.end(), [&amp;amp;](node x, node y) &amp;#123; return x.a &amp;lt; y.a; &amp;#125;);
        std::fill(bit.begin() + 1, bit.end(), 0);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int t = ask(a[i].b);
            res -= (long long)t * (t - 1) / 2;
            add(a[i].b, 1);
            std::tie(a[i].a, a[i].b, a[i].c) = std::make_tuple(a[i].b, a[i].c, a[i].a);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        res += (long long)a[i].res * (a[i].res - 1);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-星白-by-ttpandas笛卡尔树-dsu-on-tree&#34;&gt;C. 星白 by TTpandaS（笛卡尔树 + dsu on tree）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/20250819/#星白-by-ttpandas笛卡尔树-dsu-on-tree&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-isn&#34;&gt;C. isn&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hydro.ac/p/bzoj-P4361&#34; class=&#34;uri&#34;&gt;https://hydro.ac/p/bzoj-P4361&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最后一个删去的一定是连接 &lt;code&gt;&amp;gt;&lt;/code&gt; 的数，可以 DP 还剩一个数没删时可能的序列。&lt;/p&gt;
令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,0/1}\)&lt;/span&gt; 表示最后一个元素为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，序列长为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，最后一个被删去的数（未）被确定的方案数。&lt;strong&gt;注意确定最后一个被删去的数要在转移过程中进行，而不是作为一个 DP 节点&lt;/strong&gt;，很容易发现后者是错的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优化的思路就不一样了。因为要乘上 &lt;span class=&#34;math inline&#34;&gt;\((n-j)!\)&lt;/span&gt;，所以 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的这一维是省不掉的&lt;/p&gt;
考虑不管最后一个被删掉的数，直接令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示最后一个元素为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，序列长为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数。有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\sum\limits_{a_k\le a_i}f_{k,j - 1}\)&lt;/span&gt;，可以 DS 优化。但这样会产生不合法的情况。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;考察什么样的序列合法，发现&lt;strong&gt;删去的最后一个数一定是非法的，也就是包含之的序列都是非法的；反之易得被合法序列包含的序列都非法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;明白了这一点过后就会知道长度为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的合法序列系数都为 &lt;span class=&#34;math inline&#34;&gt;\((n-j)!\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;故容斥，令 &lt;span class=&#34;math inline&#34;&gt;\(g_i\)&lt;/span&gt; 表示序列长为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的方案数，&lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt; 表示序列长为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的合法方案数。从异或角度考虑，易得 &lt;span class=&#34;math inline&#34;&gt;\(h_i=g_i-\sum\limits_{j=i+1}h_j\times (j-i)!\times C_j^i\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;isn.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;isn.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), l(1);
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i], l.push_back(a[i]);
        fac[i] = fac[i - 1] * i % mod;
    &amp;#125;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[m] % mod * inv[n - m] % mod;
    &amp;#125;;
    std::sort(l.begin(), l.end());
    l.erase(std::unique(l.begin(), l.end()), l.end());
    for (int i = 0; i &amp;lt;= n; ++i)
        a[i] = std::lower_bound(l.begin(), l.end(), a[i]) - l.begin() + 1;
    int m = (int)l.size();
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; bit(n + 1, std::vector&amp;lt;long long&amp;gt; (m + 1));
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int id, int x, long long v) &amp;#123;
        for (; x &amp;lt;= m; x += lowbit(x))
            (bit[id][x] += v) %= mod;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int id, int x) &amp;#123;
        auto res(0ll);
        for (; x; x -= lowbit(x))
            (res += bit[id][x]) %= mod;
        return res;
    &amp;#125;;
    std::vector&amp;lt;long long&amp;gt; g(n + 1), h(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long long&amp;gt; (n + 1));
    add(0, a[0], 1ll), f[0][0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = n; j; --j) &amp;#123;
            f[i][j] = ask(j - 1, a[i]);
            add(j, a[i], f[i][j]);
            (g[j] += f[i][j] * fac[n - j]) %= mod;
        &amp;#125;
    auto res(0ll);
    for (int i = n; i; --i) &amp;#123;
        h[i] = g[i];
        for (int j = i + 1; j &amp;lt;= n; ++j)
            (h[i] += mod - h[j] * fac[j - i] % mod * C(j, i) % mod) %= mod;
        (res += h[i]) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-thepowers&#34;&gt;D. ThePowers&lt;/h3&gt;
&lt;p&gt;TopCoder - 12185，原题交不了故不放链接了&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6522/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6522/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(A,B\)&lt;/span&gt;，对于所有 &lt;span class=&#34;math inline&#34;&gt;\(X\le A,Y\le B\)&lt;/span&gt;，求 &lt;span class=&#34;math inline&#34;&gt;\(X^Y\)&lt;/span&gt; 的可能取值数量。&lt;span class=&#34;math inline&#34;&gt;\(A,B\le10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考虑什么时候算重。发现当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(x^a=y^b\)&lt;/span&gt;，此时记 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;#39;=a\div\gcd(a,b),b&amp;#39;=b\div \gcd(a,b)\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(t=\sqrt[a&amp;#39;]x=\sqrt[b&amp;#39;]y\)&lt;/span&gt; 为整（写成质因数乘积是易证的），则 &lt;span class=&#34;math inline&#34;&gt;\(x=t^b,y=t^a\)&lt;/span&gt;，是同一个数的不同次幂&lt;/li&gt;
&lt;li&gt;&lt;p&gt;故把 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 内所有数分组，记 &lt;span class=&#34;math inline&#34;&gt;\(S_x\)&lt;/span&gt; 表示所有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的次幂，其中 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 不是其他数的次幂&lt;/p&gt;
发现一个对于 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;\sqrt A\)&lt;/span&gt; 的数 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;，只有可能属于 &lt;span class=&#34;math inline&#34;&gt;\(S_y\)&lt;/span&gt;，或一个 &lt;span class=&#34;math inline&#34;&gt;\(x\le \sqrt A\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(S_x\)&lt;/span&gt;。每组最多有 &lt;span class=&#34;math inline&#34;&gt;\(30\)&lt;/span&gt; 个，故扫一遍 &lt;span class=&#34;math inline&#34;&gt;\(\le\sqrt A\)&lt;/span&gt; 的数即可完成分组。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这样就只用考虑同组内的计数。即对于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(p\le |S_x|,y\le B\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(x^{py}\)&lt;/span&gt; 有多少种取值，也即 &lt;span class=&#34;math inline&#34;&gt;\(py\)&lt;/span&gt; 有多少种取值&lt;/p&gt;
发现因为值域是连续的，对于一个 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，只要 &lt;span class=&#34;math inline&#34;&gt;\(pB\)&lt;/span&gt; 范围内某个数是 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的倍数就可以取到，枚举 &lt;span class=&#34;math inline&#34;&gt;\([(p-1)B+1,pB]\)&lt;/span&gt;，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 容斥，就需要计算 &lt;span class=&#34;math inline&#34;&gt;\(p\sim |S_x|\)&lt;/span&gt; 的每个子集，复杂度会爆炸。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(x,y\in[p,|S_x|]\)&lt;/span&gt;，如果 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的倍数，就可以 skip，只在剩下的元素里枚举子集，可以代码验证一下 &lt;span class=&#34;math inline&#34;&gt;\(30\)&lt;/span&gt; 以内最多剩下 &lt;span class=&#34;math inline&#34;&gt;\(15\)&lt;/span&gt; 个数，可以接受，注意子集信息类似高维前缀和地 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 求就行了&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;power.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;power.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    long long A, B, mx = 1ll;
    std::cin &amp;gt;&amp;gt; A &amp;gt;&amp;gt; B;
    if (A == 1) &amp;#123;
        std::cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    int cnt = 1;
    long long res = 1ll;
    for (; (mx + 1) * (mx + 1) &amp;lt;= A; ++mx);
    std::vector&amp;lt;int&amp;gt; tag(mx + 1);
    for (int i = 2; i &amp;lt;= mx; ++i)
        if (!tag[i]) &amp;#123;
            int siz = 1;
            for (long long j = i; j &amp;lt;= A; j *= i, ++siz)
                if (j &amp;lt;= mx)
                    tag[j] = 1;
            cnt += --siz;
            for (int j = 1; j &amp;lt;= siz; ++j) &amp;#123;
                std::vector&amp;lt;int&amp;gt; p(&amp;#123; j &amp;#125;);
                for (int k = j + 1; k &amp;lt;= siz; ++k) &amp;#123;
                    bool flag = 1;
                    for (auto l : p)
                        if (k % l == 0) &amp;#123;
                            flag = 0;
                            break;
                        &amp;#125;
                    if (flag)
                        p.push_back(k);
                &amp;#125;
                int m = (int)p.size(), s = 1 &amp;lt;&amp;lt; m;
                std::vector&amp;lt;long long&amp;gt; mul(s);
                mul[0] = 1ll;
                auto lcm = [&amp;amp;](long long x, long long y) &amp;#123;
                    return x / std::__gcd(x, y) * y;
                &amp;#125;;
                for (int k = 1; k &amp;lt; s; ++k) &amp;#123;
                    mul[k] = lcm(p[std::__lg(k ^ ((k - 1) &amp;amp; k))], mul[(k - 1) &amp;amp; k]);
                    if (__builtin_popcount(k) &amp;amp; 1)
                        res += j * B / mul[k] - (j - 1) * B / mul[k];
                    else
                        res -= j * B / mul[k] - (j - 1) * B / mul[k];
                &amp;#125;
            &amp;#125;
        &amp;#125;
    res += (A - cnt) * B;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;搜索做法本质上是一样的，就不赘述了&lt;/p&gt;
</content>
        <category term="DP" />
        <category term="容斥" />
        <updated>2025-08-20T12:26:44.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250807/</id>
        <title>学习笔记：分拆数与 Ferrers 图</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250807/"/>
        <content type="html">&lt;p&gt;需要知道概念和求法，有一定的用处&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;分拆数与互异分拆数&#34;&gt;分拆数与互异分拆数&lt;/h2&gt;
&lt;p&gt;要求：给定一个正整数 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，要求将其划分为 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个可重 / 不可重的正整数，问本质不同的方案数。（显然 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt n\)&lt;/span&gt; 同阶。）&lt;/p&gt;
&lt;p&gt;不妨令划分结果单调不降，则有两种 DP 路径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;法一：令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示把 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 分成 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个正整数的方案数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可重：考虑将这 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个数减去 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。最多一个元素由 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 变为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，组数减少 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;；其他时候还是 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 组。故云 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=f_{i-j,j-1}+f_{i-j,j}\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;可重：如果存在 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，可以删除之然后转移；否则仍整体减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 转移。故曰 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=f_{i-1,j-1}+f_{i-j,j}\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
该转移方法唯一性很显然。&lt;strong&gt;注意到第二维只和 &lt;span class=&#34;math inline&#34;&gt;\(j,j-1\)&lt;/span&gt; 有关；可以交换前后两维顺序然后滚动。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;法二：令 &lt;span class=&#34;math inline&#34;&gt;\(n=\sum a_i\)&lt;/span&gt;，建立 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的差分数组 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，则有 &lt;span class=&#34;math inline&#34;&gt;\(n=\sum\limits_{i=1}^m \sum\limits_{j=1}^i c_j=\sum\limits_{i=1}^m (n-i+1)\times a_i\)&lt;/span&gt;。发现 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 每增大 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，答案会增大 &lt;span class=&#34;math inline&#34;&gt;\(n-i+1\)&lt;/span&gt;。故转化为『第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个物品重量为 &lt;span class=&#34;math inline&#34;&gt;\(n-i+1\)&lt;/span&gt;』的完全背包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可重：要求每个物品至少选一次。&lt;/li&gt;
&lt;li&gt;可重：无限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该方法唯一性更显然。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;复杂度均为 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(O(V\sqrt V)\)&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;例sets-of-complementary-sums&#34;&gt;例：Sets of Complementary Sums&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/20250723/#e.-sets-of-complementary-sums&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ferrers-图&#34;&gt;Ferrers 图&lt;/h2&gt;
&lt;p&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个分拆出来的数用横向柱状图表示并单调不增排列，得到 Ferrers 图。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;image-1.png&#34; alt=&#34;例：12=5+4+2+1 的 Ferrers 图（图源 OI Wiki）&#34; /&gt;&lt;figcaption&gt;例：&lt;span class=&#34;math inline&#34;&gt;\(12=5+4+2+1\)&lt;/span&gt; 的 Ferrers 图（图源 OI Wiki）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;将图像斜向翻折得到一组共轭解，原图中的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 即为共轭解中的元素最值。故亦可限定分拆结果的最值为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，则结果仍为 &lt;span class=&#34;math inline&#34;&gt;\(f_{n,k}\)&lt;/span&gt;。同时适用于分拆数与互异分拆数。&lt;/p&gt;
&lt;p&gt;顺带提一嘴杨表：把点替换成 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt;，并使得一个点同时大于左侧和上方的值。&lt;/p&gt;
&lt;p&gt;似乎就不是很有用了。计数题可能会考。&lt;/p&gt;
</content>
        <category term="DP" />
        <updated>2025-08-07T08:20:45.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250805/</id>
        <title>状压 DP</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250805/"/>
        <content type="html">&lt;p&gt;没补完（1/3），动作还是太慢了&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---只不过是长的领带-2-just-long-neckties-2&#34;&gt;A - 只不过是长的领带 2 / Just Long Neckties 2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11665&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11665&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要观察到，任意时刻 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 中不存在重复元素。把 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 压出来，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,S}\)&lt;/span&gt; 表示选了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，当前 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 是否可行，能够 &lt;span class=&#34;math inline&#34;&gt;\(O(n\cdot 2^V)\)&lt;/span&gt;。对于某个 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，只关心它最远能到达哪个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，故令 &lt;span class=&#34;math inline&#34;&gt;\(f_S\)&lt;/span&gt; 记录之。对于每一个 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，都可以找到 &lt;span class=&#34;math inline&#34;&gt;\(f_S\)&lt;/span&gt; 后第一对 &lt;span class=&#34;math inline&#34;&gt;\(a_i,a_{i+1}\notin S\)&lt;/span&gt;，用其刷表。&lt;/p&gt;
&lt;p&gt;发现『找 &lt;span class=&#34;math inline&#34;&gt;\(f_S\)&lt;/span&gt; 后第一对非法元素』是很慢的，考虑优化；对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 维护 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 在其后第一次出现的位置 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(a_x=p\)&lt;/span&gt; 维护 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 后方 &lt;span class=&#34;math inline&#34;&gt;\(a_y=p,a_{y+1}=q\)&lt;/span&gt; 第一次出现的位置，相当于&lt;strong&gt;先找 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 再找 &lt;span class=&#34;math inline&#34;&gt;\((p,q)\)&lt;/span&gt;&lt;/strong&gt;，就可以做到 &lt;span class=&#34;math inline&#34;&gt;\(O(V^2\cdot 2^V+n\cdot V)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    int V = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        V = std::max(V, a[i]--);
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; tx(n + 1, std::vector&amp;lt;int&amp;gt; (V)), ty(n + 1, std::vector&amp;lt;int&amp;gt; (V));
    std::vector&amp;lt;int&amp;gt; lp(V);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; lpq(V, std::vector&amp;lt;int&amp;gt; (V));
    for (int i = n; ~i; --i) &amp;#123;
        if (i &amp;amp;&amp;amp; i != n)
            lpq[a[i]][a[i + 1]] = i;
        for (int j = 0; j &amp;lt; V; ++j) &amp;#123;
            tx[i][j] = lp[j];
            if (i != n)
                ty[i][j] = lpq[a[i]][j];
        &amp;#125;
        if (i != 0)
            lp[a[i]] = i;
    &amp;#125;
    int siz = 1 &amp;lt;&amp;lt; V, res = 21;
    std::vector&amp;lt;int&amp;gt; f(siz);
    for (int i = 0; i &amp;lt; siz; ++i) &amp;#123;
        std::vector&amp;lt;int&amp;gt; p0, p1;
        for (int j = 0; j &amp;lt; V; ++j)
            if ((i &amp;gt;&amp;gt; j) &amp;amp; 1)
                p1.push_back(j);
            else
                p0.push_back(j);
        int j = n;
        for (auto p : p0)
            if (tx[f[i]][p])
                for (auto q : p0)
                    if (ty[tx[f[i]][p]][q])
                        j = std::min(j, ty[tx[f[i]][p]][q]);
        if (j != n) &amp;#123;
            f[i ^ (1 &amp;lt;&amp;lt; a[j])] = std::max(f[i ^ (1 &amp;lt;&amp;lt; a[j])], j);
            f[i ^ (1 &amp;lt;&amp;lt; a[j + 1])] = std::max(f[i ^ (1 &amp;lt;&amp;lt; a[j + 1])], j + 1);
            for (auto k : p1) &amp;#123;
                f[i ^ (1 &amp;lt;&amp;lt; k) ^ (1 &amp;lt;&amp;lt; a[j])] = std::max(f[i ^ (1 &amp;lt;&amp;lt; k) ^ (1 &amp;lt;&amp;lt; a[j])], j);
                f[i ^ (1 &amp;lt;&amp;lt; k) ^ (1 &amp;lt;&amp;lt; a[j + 1])] = std::max(f[i ^ (1 &amp;lt;&amp;lt; k) ^ (1 &amp;lt;&amp;lt; a[j + 1])], j + 1);
            &amp;#125;
        &amp;#125;
        else
            res = std::min(res, __builtin_popcount(i));
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---cut-and-reorder&#34;&gt;B - Cut and Reorder&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc328/tasks/abc328_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc328/tasks/abc328_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不妨先重排再修改，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,S}\)&lt;/span&gt; 表示已经重排好新序列的前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个元素，对应原序列状态 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的最小代价。枚举新区间容易转移。可以发现枚举 &lt;span class=&#34;math inline&#34;&gt;\(i,S\)&lt;/span&gt; 的实际复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(2^n)\)&lt;/span&gt;（空间也可以这么优化），预处理之后总时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2\cdot 2^n)\)&lt;/span&gt;，跑不满，可以通过。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    long long c;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; c;
    std::vector&amp;lt;long long&amp;gt; a(n), b(n);
    for (int i = 0; i &amp;lt; n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 0; i &amp;lt; n; ++i)
        std::cin &amp;gt;&amp;gt; b[i];
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    brr p(n, arr(n));
    crr g(n, brr(n, arr(n)));
    for (int l = 0; l &amp;lt; n; ++l)
        for (int r = l; r &amp;lt; n; ++r) &amp;#123;
            for (int k = l; k &amp;lt;= r; ++k)
                p[l][r] ^= (1 &amp;lt;&amp;lt; k);
            for (int R = r - l; R &amp;lt; n; ++R)
                for (int L = R, j = r; j &amp;gt;= l; --L, --j)
                    g[l][r][R] += std::abs(b[L] - a[j]);
        &amp;#125;
    int siz = 1 &amp;lt;&amp;lt; n;
    std::vector&amp;lt;long long&amp;gt; f(siz, inf);
    f[0] = 0ll;
    for (int j = 1; j &amp;lt; siz; ++j) &amp;#123;
        int i = __builtin_popcount(j) - 1;
        for (int r = 0; r &amp;lt; n; ++r)
            for (int l = r; ~l &amp;amp;&amp;amp; ((j &amp;gt;&amp;gt; l) &amp;amp; 1); --l)
                f[j] = std::min(f[j], f[j ^ p[l][r]] + g[l][r][i] + c);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[siz - 1] - c &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---electric-circuit&#34;&gt;C - Electric Circuit&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc321/tasks/abc321_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc321/tasks/abc321_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很像&lt;a href=&#34;/20250430/#有标号无向图计数&#34;&gt;无向图容斥&lt;/a&gt;？令 &lt;span class=&#34;math inline&#34;&gt;\(f_S\)&lt;/span&gt; 表示让 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 内部完成配对，可以不连通的方案数，那么当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 内部点出、入度之和相等（记为 &lt;span class=&#34;math inline&#34;&gt;\(cnt\)&lt;/span&gt;）时，&lt;span class=&#34;math inline&#34;&gt;\(f_S\)&lt;/span&gt; 有值 &lt;span class=&#34;math inline&#34;&gt;\(cnt!\)&lt;/span&gt;。相似地，设 &lt;span class=&#34;math inline&#34;&gt;\(g_S\)&lt;/span&gt; 表示让 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 完成配对，成为一个连通块的方案数，得到 &lt;span class=&#34;math inline&#34;&gt;\(g_S=f_S-\sum\limits_{v\in S} f_{S\oplus v}\cdot g_v\)&lt;/span&gt;。让 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 必须包含 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中编号最小的点就可以去重。&lt;/p&gt;
&lt;p&gt;从贡献的角度出发，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 带来的贡献就是 &lt;span class=&#34;math inline&#34;&gt;\(g_S\cdot f_{U\oplus S}\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; 是全集。最后除以 &lt;span class=&#34;math inline&#34;&gt;\(M!\)&lt;/span&gt; 求出期望。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(3^n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; ci(n), co(n);
    for (int i = 1, x; i &amp;lt;= m; ++i)
        std::cin &amp;gt;&amp;gt; x, ++ci[x - 1];
    for (int i = 1, x; i &amp;lt;= m; ++i)
        std::cin &amp;gt;&amp;gt; x, ++co[x - 1];
    std::vector&amp;lt;long long&amp;gt; fac(m + 1);
    fac[0] = 1ll;
    for (int i = 1; i &amp;lt;= m; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    int siz = 1 &amp;lt;&amp;lt; n;
    std::vector&amp;lt;long long&amp;gt; f(siz), g(siz);
    for (int i = 1; i &amp;lt; siz; ++i) &amp;#123;
        int si = 0, so = 0;
        for (int j = 0; j &amp;lt; n; ++j)
            if ((i &amp;gt;&amp;gt; j) &amp;amp; 1)
                si += ci[j], so += co[j];
        if (si == so)
            f[i] = fac[si];
    &amp;#125;
    auto res(0ll);
    for (int i = 1; i &amp;lt; siz; ++i) &amp;#123;
        g[i] = f[i];
        int mn = 0;
        for (int j = 0; j &amp;lt; n; ++j)
            if ((i &amp;gt;&amp;gt; j) &amp;amp; 1) &amp;#123;
                mn = j;
                break;
            &amp;#125;
        int s = i ^ (1 &amp;lt;&amp;lt; mn);
        (g[i] += mod - g[1 &amp;lt;&amp;lt; mn] * f[s] % mod) %= mod;
        for (int j = (s - 1) &amp;amp; s; j; j = (j - 1) &amp;amp; s)
            (g[i] += mod - g[j ^ (1 &amp;lt;&amp;lt; mn)] * f[s ^ j] % mod) %= mod;
        if (i != siz - 1)
            (res += g[i] * f[(siz - 1) ^ i]) %= mod;
        else
            (res += g[i]) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res * qkp(fac[m], mod - 2) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---count-grid-3-coloring&#34;&gt;D - Count Grid 3-coloring&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc379/tasks/abc379_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc379/tasks/abc379_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;轮廓线 DP。把每一列已经确定的最靠下的元素压起来，每行逐个确定即可。&lt;/p&gt;
&lt;p&gt;发现有效状态中只能容许最多一对相邻相同元素，这样复杂度就能降下来了。注意特判 &lt;span class=&#34;math inline&#34;&gt;\(1\times 1\)&lt;/span&gt; 的情况。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::array&amp;lt;int, 15&amp;gt; p;
    p[0] = 1;
    for (int i = 1; i &amp;lt; 15; ++i)
        p[i] = p[i - 1] * 3;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; a;
    if (n &amp;gt;= m) &amp;#123;
        a.assign(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
        for (int i = 1; i &amp;lt;= n; ++i) 
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                char t;
                std::cin &amp;gt;&amp;gt; t, a[i][j] = (t == &amp;#39;?&amp;#39; ? -1 : t - &amp;#39;1&amp;#39;);
            &amp;#125;
    &amp;#125;
    else &amp;#123;
        std::swap(n, m);
        a.assign(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
        for (int i = 1; i &amp;lt;= m; ++i)
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                char t;
                std::cin &amp;gt;&amp;gt; t, a[j][i] = (t == &amp;#39;?&amp;#39; ? -1 : t - &amp;#39;1&amp;#39;);
            &amp;#125;
    &amp;#125;
    int siz = p[m];
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    std::vector&amp;lt;int&amp;gt; s, tab(siz, -1);
    auto getv_1 = [&amp;amp;](int j, int i) &amp;#123;
        return (j / p[i - 1]) % 3;
    &amp;#125;;
    auto getv = [&amp;amp;](int j, int i) &amp;#123;
        return (s[j] / p[i - 1]) % 3;
    &amp;#125;;
    auto chg = [&amp;amp;](int j, int i, int v) &amp;#123;
        return tab[s[j] - p[i - 1] * getv(j, i) + p[i - 1] * v];
    &amp;#125;;
    auto out = [&amp;amp;](int i) &amp;#123;
        std::string s;
        for (int j = 1; j &amp;lt;= m; ++j)
            s += &amp;#39;1&amp;#39; + getv_1(i, j);
        return s.c_str();
    &amp;#125;;
    for (int i = 0; i &amp;lt; siz; ++i) &amp;#123;
        s.push_back(i);
        int cnt = 0;
        for (int j = 2; j &amp;lt;= m; ++j)
            if (getv_1(i, j - 1) == getv_1(i, j) &amp;amp;&amp;amp; ++cnt &amp;gt;= 2) &amp;#123;
                s.pop_back();
                break;
            &amp;#125;
    &amp;#125;
    for (int i = 0; i &amp;lt; (int)s.size(); ++i)
        tab[s[i]] = i;
    siz = (int)s.size();
    if (n == 1) &amp;#123;
        std::cout &amp;lt;&amp;lt; (a[1][1] == -1 ? 3 : 1) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    crr f(n + 1, brr(m + 1, arr(siz)));
    for (int i = 0; i &amp;lt; siz; ++i)
        if ([&amp;amp;](int i, int s) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                if (a[i][j] != -1 &amp;amp;&amp;amp; a[i][j] != getv(s, j))
                    return false;
                if (j != 1 &amp;amp;&amp;amp; getv(s, j) == getv(s, j - 1))
                    return false;
            &amp;#125;
            return true;
        &amp;#125; (1, i)) &amp;#123;
            for (int p = 0; p &amp;lt; 3; ++p)
                if ((a[2][1] == -1 || a[2][1] == p) &amp;amp;&amp;amp; getv(i, 1) != p &amp;amp;&amp;amp; ~chg(i, 1, p))
                    (++f[2][1][chg(i, 1, p)]) %= mod;
        &amp;#125;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        for (int k = 1; k &amp;lt; m; ++k)
            for (int j = 0; j &amp;lt; siz; ++j)
                if (f[i][k][j]) &amp;#123;
                    // printf(&amp;quot;f[%d][%d][%s] = %lld\n&amp;quot;, i, k, out(s[j]), f[i][k][j]);
                    for (int p = 0; p &amp;lt; 3; ++p)
                        if ((a[i][k + 1] == -1 || a[i][k + 1] == p) &amp;amp;&amp;amp; getv(j, k) != p &amp;amp;&amp;amp; getv(j, k + 1) != p &amp;amp;&amp;amp; ~chg(j, k + 1, p))
                            (f[i][k + 1][chg(j, k + 1, p)] += f[i][k][j]) %= mod;
                &amp;#125;
        for (int j = 0; j &amp;lt; siz; ++j)
            if (i != n &amp;amp;&amp;amp; f[i][m][j])
                for (int p = 0; p &amp;lt; 3; ++p)
                    if ((a[i + 1][1] == -1 || a[i + 1][1] == p) &amp;amp;&amp;amp; getv(j, 1) != p &amp;amp;&amp;amp; ~chg(j, 1, p))
                        (f[i + 1][1][chg(j, 1, p)] += f[i][m][j]) %= mod;
    &amp;#125;
    auto res = 0ll;
    for (int i = 0; i &amp;lt; siz; ++i)
        (res += f[n][m][i]) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---pure-straight&#34;&gt;E - Pure Straight&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc126/tasks/arc126_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc126/tasks/arc126_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;手玩发现只要最终序列确定，那么移动的顺序不影响答案。故考虑确定目标位置和移动序列。考虑绝对值的几何意义，不妨令目标子序列中元素集中到被选中位置的中间元素，此时的代价可以计算。用点二进制技巧和库函数可以 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 算代价。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    int siz = 1 &amp;lt;&amp;lt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1), f(siz, 0x3f3f3f3f);
    auto out = [&amp;amp;](int j) &amp;#123;
        std::string s;
        for (int i = 0; i &amp;lt; k; ++i)
            s += (&amp;#39;0&amp;#39; + ((j &amp;gt;&amp;gt; i) &amp;amp; 1));
        return s.c_str();
    &amp;#125;;
    f[0] = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i], --a[i];
        for (int j = siz - 1; j &amp;gt;= 0; --j) &amp;#123;
            if (!((j &amp;gt;&amp;gt; a[i]) &amp;amp; 1))
                f[j | (1 &amp;lt;&amp;lt; a[i])] = std::min(f[j | (1 &amp;lt;&amp;lt; a[i])], f[j] + __builtin_popcount(j &amp;amp; (~((1 &amp;lt;&amp;lt; a[i]) - 1))));
            f[j] += std::min(__builtin_popcount(j), k - __builtin_popcount(j));
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[siz - 1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f---123-set&#34;&gt;F - 123 Set&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc184/tasks/arc184_b&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc184/tasks/arc184_b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做过 &lt;a href=&#34;https://www.luogu.com.cn/problem/P3226&#34;&gt;集合选数&lt;/a&gt;（这个 trick 见过很多次了，应该不只这一道，但我想不起来了）很容易想到画一个表格或者 DAG 出来，其实都能做&lt;/p&gt;
&lt;p&gt;对于表格左上角和 DAG 的源点，肯定是一个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，其不是 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 的倍数。如果画表，横乘 3 竖乘 2，观察一下是包含了 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 恰好一次的很多个杨表（没什么用，提一嘴而已），考虑转化目标，发现是用一个不可旋转的倒 L 形骨牌可叠放地铺满异形表格，可以考虑轮廓线 DP&lt;/p&gt;
&lt;p&gt;具体地，用 1 来表示拐角处，0 表示其他，叠放的时候 1 的优先级比 0 高，然后就可以做了。以 3 为行，悲观估计单个表格大概有 &lt;span class=&#34;math inline&#34;&gt;\(31\times 2^{19}\)&lt;/span&gt; 个状态，运算次数差不多 &lt;span class=&#34;math inline&#34;&gt;\(31\times 19\times 2^{19}\)&lt;/span&gt;；再发现长得一模一样的表格肯定方案数是一样的，如果把任意一个表格全部除以 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，就会得到 &lt;span class=&#34;math inline&#34;&gt;\(n=10^9\div x\)&lt;/span&gt; 时 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为左上角的杨表，就是说长相只和 &lt;span class=&#34;math inline&#34;&gt;\(10^9\div x\)&lt;/span&gt; 的值有关，可以整除分块 😱 可预计的跑得非常不满，实践下来是可以过的（但是很慢）&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    auto calc = [&amp;amp;](int r) &amp;#123;
        return r - r / 2 - r / 3 + r / 6;
    &amp;#125;;
    auto dp = [&amp;amp;](int lim) &amp;#123;
        if (lim == 1) &amp;#123;
            // printf(&amp;quot;lim = 1, ret 1&amp;quot;);
            return 1;
        &amp;#125;
        int n = 1, m = 1;
        for (int k = 1; k * 2 &amp;lt;= lim; ++n, k *= 2);
        for (int k = 1; k * 3 &amp;lt;= lim; ++m, k *= 3);
        int siz = 1 &amp;lt;&amp;lt; m;
        std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; &amp;gt; f(2, std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; (2, std::vector&amp;lt;int&amp;gt; (siz))), p(n + 1, std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; (m));
        std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; &amp;gt; t(2, std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; (2, std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; (siz))); // sb
        auto upd = [&amp;amp;](int i, int k, int j, int v) &amp;#123;
            if (t[i &amp;amp; 1][k &amp;amp; 1][j] != std::make_pair(i, k)) &amp;#123;
                p[i][k].push_back(j);
                t[i &amp;amp; 1][k &amp;amp; 1][j] = &amp;#123; i, k &amp;#125;, f[i &amp;amp; 1][k &amp;amp; 1][j] = v;
            &amp;#125;
            else
                f[i &amp;amp; 1][k &amp;amp; 1][j] = std::min(f[i &amp;amp; 1][k &amp;amp; 1][j], v);
            return;
        &amp;#125;;
        auto chg = [&amp;amp;](int i, int j, int v) &amp;#123;
            return i ^ (((i &amp;gt;&amp;gt; j) &amp;amp; 1) &amp;lt;&amp;lt; j) ^ (v &amp;lt;&amp;lt; j);
        &amp;#125;;
        for (int i = 0; i &amp;lt; siz; ++i) &amp;#123;
            bool flag = 0;
            for (int j = 0; j &amp;lt; m; ++j)
                if (((i &amp;gt;&amp;gt; j) &amp;amp; 1) || (j &amp;amp;&amp;amp; ((i &amp;gt;&amp;gt; (j - 1)) &amp;amp; 1)));
                else &amp;#123;
                    flag = 1;
                    break;
                &amp;#125;
            if (!flag)
                upd(1, m - 1, i, __builtin_popcount(i));
        &amp;#125;
        for (int i = 2; i &amp;lt;= n; i++) &amp;#123;
            int m1 = 1;
            for (int x = (1 &amp;lt;&amp;lt; (i - 1)); x * 3ll &amp;lt;= lim; ++m1, x *= 3);
            int siz1 = 1 &amp;lt;&amp;lt; m1;
            for (auto j : p[i - 1][m - 1]) &amp;#123;
                if (j &amp;amp; 1)
                    upd(i, 0, chg(j &amp;amp; (siz1 - 1), 0, 0), f[(i - 1) &amp;amp; 1][(m - 1) &amp;amp; 1][j]);
                upd(i, 0, chg(j &amp;amp; (siz1 - 1), 0, 1), f[(i - 1) &amp;amp; 1][(m - 1) &amp;amp; 1][j] + 1);
            &amp;#125;
            m = m1, siz = siz1;
            for (int k = 0; k &amp;lt; m - 1; ++k)
                for (auto j : p[i][k]) &amp;#123;
                    if (((j &amp;gt;&amp;gt; k) &amp;amp; 1) || ((j &amp;gt;&amp;gt; (k + 1)) &amp;amp; 1))
                        upd(i, k + 1, chg(j, k + 1, 0), f[i &amp;amp; 1][k &amp;amp; 1][j]);
                    upd(i, k + 1, chg(j, k + 1, 1), f[i &amp;amp; 1][k &amp;amp; 1][j] + 1);
                &amp;#125;
        &amp;#125;
        int res = 0x3f3f3f3f;
        for (auto i : p[n][m - 1])
            res = std::min(res, f[n &amp;amp; 1][(m - 1) &amp;amp; 1][i]);
        return res;
    &amp;#125;;
    int res = 0;
    for (int l = 1, r; l &amp;lt;= n; l = r + 1) &amp;#123;
        r = n / (n / l);
        if (calc(r) - calc(l - 1))
            res += (calc(r) - calc(l - 1)) * dp(n / l);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="状压 DP" />
        <updated>2025-08-05T06:33:55.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250803/</id>
        <title>树 DP</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250803/"/>
        <content type="html">&lt;p&gt;树上的 DP 以及 和树有关的 DP&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---svjetlo&#34;&gt;A - Svjetlo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7163&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7163&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很容易想到一种状态设计，即令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,0/1/2}\)&lt;/span&gt; 分别表示有 &lt;span class=&#34;math inline&#34;&gt;\(0/1/2\)&lt;/span&gt; 个端点在子树内部的情况；然后就开始思考，如何满足对于开关状态的要求？&lt;/p&gt;
&lt;p&gt;还是想少了。如果再加一维，从『状态为开或关』思考就会轻松很多，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,0/1/2,0/1}\)&lt;/span&gt; 表示有 &lt;span class=&#34;math inline&#34;&gt;\(0/1/2\)&lt;/span&gt; 个端点再子树外部，且子树内操作完后 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为关 / 开的最少步数。然后分类讨论转移方式即可。&lt;/p&gt;
&lt;p&gt;一个比较方便的讨论方式是，先确定某种情况下，访问 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的次数，然后就可以得到它们原本的状态。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, rt = -1;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        a[i] = t - &amp;#39;0&amp;#39;;
        if (!a[i])
            rt = i;
    &amp;#125;
    if (rt == -1) &amp;#123;
        std::cout &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tag(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        tag[x] = a[x];
        for (auto i : g[x])
            if (i != fa)
                DFS(i, x), tag[x] &amp;amp;= tag[i];
        return;
    &amp;#125;;
    DFS(rt, -1);
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; (3, std::vector&amp;lt;int&amp;gt; (2, 0x3f3f3f3f)));
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        f[x][0][a[x]] = 0;
        for (auto i : g[x])
            if (i != fa &amp;amp;&amp;amp; !tag[i]) &amp;#123;
                DFS(i, x);
                auto g = f[x];
                f[x][0][0] = std::min(g[0][0] + f[i][0][1] + 4, g[0][1] + f[i][0][0] + 2);
                f[x][0][1] = std::min(g[0][1] + f[i][0][1] + 4, g[0][0] + f[i][0][0] + 2);
                f[x][1][0] = std::min(&amp;#123; g[1][0] + f[i][0][1] + 4, g[1][1] + f[i][0][0] + 2, g[0][0] + f[i][1][0] + 3, g[0][1] + f[i][1][1] + 1 &amp;#125;);
                f[x][1][1] = std::min(&amp;#123; g[1][1] + f[i][0][1] + 4, g[1][0] + f[i][0][0] + 2, g[0][1] + f[i][1][0] + 3, g[0][0] + f[i][1][1] + 1 &amp;#125;);
                f[x][2][0] = std::min(&amp;#123; g[2][0] + f[i][0][1] + 4, g[2][1] + f[i][0][0] + 2, g[1][0] + f[i][1][1], g[1][1] + f[i][1][0] + 2, g[0][0] + f[i][2][1] + 4, g[0][1] + f[i][2][0] + 2 &amp;#125;);
                f[x][2][1] = std::min(&amp;#123; g[2][1] + f[i][0][1] + 4, g[2][0] + f[i][0][0] + 2, g[1][1] + f[i][1][1], g[1][0] + f[i][1][0] + 2, g[0][1] + f[i][2][1] + 4, g[0][0] + f[i][2][0] + 2 &amp;#125;);
            &amp;#125;
        f[x][1][0] = std::min(f[x][1][0], f[x][0][1] + 1);
        f[x][1][1] = std::min(f[x][1][1], f[x][0][0] + 1);
        f[x][2][0] = std::min(f[x][2][0], f[x][1][0]);
        f[x][2][1] = std::min(f[x][2][1], f[x][1][1]);
        // for (int i = 0; i &amp;lt; 3; ++i)
        //     for (int j = 0; j &amp;lt; 2; ++j)
        //         printf(&amp;quot;f[%d][%d][%d] = %d\n&amp;quot;, x, i, j, f[x][i][j]);
        return;
    &amp;#125;;
    DFS(rt, -1);
    std::cout &amp;lt;&amp;lt; f[rt][2][1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---one-to-one&#34;&gt;B - One to One&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc140/tasks/arc140_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc140/tasks/arc140_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;观察原图上连通块，发现要么是没有未确定边的基环树，要么是有恰好一条未确定边的树。缩点，任意为未确定边赋值，考察最后得到的连通块，发现要么是以『基环树点』为根的树，要么是不包含『基环树点』的（内向）基环树。&lt;/p&gt;
&lt;p&gt;这里要用到贡献的思想。考虑将全局划分为若干个部分，保证每部分的单步价值是可确定的。将第一步，即对树和基环树的讨论拆开，对于树，其数量确定；对于基环树，发现环的数量即为基环树的数量，进一步将所有步中的『环』这一类分开，统计成环的方案数就可以得到基环树的贡献。具体地，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 为在前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个点中选择 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个成一个环的方案数，则有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,j}=f_{i-1,j}+f_{i-1,j-1}\times siz_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后计算每个环的贡献即可。注意还要算上环内部的排列（注意循环位移）。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), tag(n + 1), s(n + 1, 1), fa(n + 1), siz(n + 1);
    std::iota(fa.begin() + 1, fa.end(), 1);
    std::function&amp;lt;int(int)&amp;gt; find = [&amp;amp;](int x) &amp;#123;
        return x == fa[x] ? x : fa[x] = find(fa[x]);
    &amp;#125;;
    auto merge = [&amp;amp;](int x, int y) &amp;#123;
        x = find(x), y = find(y);
        if (x != y) &amp;#123;
            tag[y] += tag[x];
            s[y] += s[x];
            fa[x] = y;
        &amp;#125;
        return;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)  &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i], fa[i] = i;
        if (a[i] == -1)
            tag[i] = 1;
        else
            merge(i, a[i]);
    &amp;#125;
    int cnt1 = 0, cnt2 = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        cnt1 += (fa[i] == i &amp;amp;&amp;amp; !tag[i]);
        if (fa[i] == i &amp;amp;&amp;amp; tag[i])
            siz[++cnt2] = s[i];
    &amp;#125;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto res(cnt1 * qkp(n, cnt2) % mod);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(cnt2 + 1, std::vector&amp;lt;long long&amp;gt; (cnt2 + 1));
    f[0][0] = 1ll;
    for (int i = 1; i &amp;lt;= cnt2; ++i) &amp;#123;
        // printf(&amp;quot;i = %d, siz = %d: \n&amp;quot;, i, siz[i]);
        for (int j = 0; j &amp;lt;= i; ++j) &amp;#123;
            f[i][j] = f[i - 1][j];
            if (j != 0)
                (f[i][j] += f[i - 1][j - 1] * siz[i]) %= mod;
            // printf(&amp;quot;  f[%d][%d] = %lld\n&amp;quot;, i, j, f[i][j]);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= cnt2; ++i) &amp;#123;
        static auto fac(1ll);
        (res += f[cnt2][i] * fac % mod * qkp(n, cnt2 - i) % mod) %= mod;
        (fac *= i) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---diameter-cuts&#34;&gt;C - Diameter Cuts&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1499/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1499/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,i}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 上的最长链长为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的方案数，就可以用一个类似背包的过程求答案了。发现这个背包满足可以被优化的形式，故能在 &lt;span class=&#34;math inline&#34;&gt;\(O(nk)\)&lt;/span&gt; 内解决问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k, ++k;
    if (k == 0) &amp;#123;
        std::cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; h(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long long&amp;gt; (k + 1));
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        f[x][1] = 1ll, h[x] = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                std::vector&amp;lt;long long&amp;gt; g(k + 1);
                g.swap(f[x]);
                for (int j = std::min(h[x], k); j; --j)
                    for (int l = std::min(h[i], k - j); ~l; --l)
                        (f[x][std::max(j, l + 1)] += g[j] * f[i][l] % mod) %= mod;
                h[x] = std::max(h[x], h[i] + 1);
            &amp;#125;
        for (int i = 1; i &amp;lt;= h[x] &amp;amp;&amp;amp; i &amp;lt;= k; ++i)
            (f[x][0] += f[x][i]) %= mod;
        // for (int i = 0; i &amp;lt;= h[x] &amp;amp;&amp;amp; i &amp;lt;= k; ++i)
        //     printf(&amp;quot;f[%d][%d] = %lld\n&amp;quot;, x, i, f[x][i]);
        return;
    &amp;#125;;
    DFS(1, -1);
    auto res(0ll);
    for (int i = 1; i &amp;lt;= k; ++i)
        (res += f[1][i]) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---leaf-partition&#34;&gt;D - Leaf Partition&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1146/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1146/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设已经完成分组，欲判定这种方式是否合法，容易想到对每一组叶子建立虚树，则该分组方式合法，当且仅当没有一个点被多个虚树占用。也即，我们需要在总的虚树上选出一些点，让它们可以覆盖所有叶子。&lt;/p&gt;
&lt;p&gt;虚树上 DP，容易发现当且仅当存在 &lt;span class=&#34;math inline&#34;&gt;\(\ge 2\)&lt;/span&gt; 个儿子想要分进同一个虚树时，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 会被选到。故令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, 0/1/2}\)&lt;/span&gt; 表示当前有 &lt;span class=&#34;math inline&#34;&gt;\(0/1/\ge 2\)&lt;/span&gt; 个儿子想要选择 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时的方案数，DP 即可。&lt;/p&gt;
&lt;p&gt;在实现的过程中就会发现根本不需要求虚树，原树上 DP 就可以了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; fa(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 2; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; fa[i], g[fa[i]].push_back(i);
    std::vector&amp;lt;std::array&amp;lt;long long, 3&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        if (g[x].empty())
            f[x][2] = 1ll;
        else
            f[x][0] = 1ll;
        for (auto i : g[x]) &amp;#123;
            DFS(i);
            auto F0 = (f[i][0] + f[i][2]) % mod, F1 = (f[i][1] + f[i][2]) % mod;
            f[x][2] = (f[x][2] * F0 % mod + f[x][2] * F1 % mod + f[x][1] * F1 % mod) % mod;
            f[x][1] = (f[x][1] * F0 % mod + f[x][0] * F1 % mod) % mod;
            (f[x][0] *= F0) %= mod;
        &amp;#125;
        // printf(&amp;quot;%d: %lld / %lld / %lld\n&amp;quot;, x, f[x][0], f[x][1], f[x][2]);
        return;
    &amp;#125;;
    DFS(1);
    std::cout &amp;lt;&amp;lt; (f[1][0] + f[1][2]) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---uniformly-branched-trees&#34;&gt;E - Uniformly Branched Trees&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/724/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/724/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感觉是很常见的套路，但是我不会 😱&lt;/p&gt;
&lt;p&gt;在手玩样例的时候可以感性认知到，每个树会被每种点作为根的情况统计一次。且如果固定以某种（化学环境）的点为根，可以通过按 siz 从小到大排列唯一求解出该树。&lt;/p&gt;
&lt;p&gt;发现以重心为根（即钦定根为重心）可以带来很多优美的性质。因为 siz 是好确定的，且是儿子的排序依据，所以选重心便于统计，同时满足每种树最多被统计两次（当且仅当有两个重心）。&lt;/p&gt;
&lt;p&gt;发现这就变成了多重集的组合数，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k}\)&lt;/span&gt; 表示已经花费 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个点组成一个子树，子树的根节点当前已经确认了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个儿子，最靠右的一个 siz &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt; 的方案数。得到 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k}=\sum_{x=0} f_{i-x\cdot k,j-x,k-1}\cdot \binom{f_{k,d-1,k}+x-1}{x}\)&lt;/span&gt;（相当于将 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个无标号的位置 / 球分配给 &lt;span class=&#34;math inline&#34;&gt;\(f_{k,d-1,k}\)&lt;/span&gt; 个有标号的选项 / 盒子，插板即可）。&lt;/p&gt;
&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 为奇数，则可直接输出 &lt;span class=&#34;math inline&#34;&gt;\(f_{n,d,\lfloor\frac n2\rfloor}\)&lt;/span&gt;；若 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 为偶数，则可能存在两个重心，即需要统计拥有两个重心，且以两个重心分别为根时长相不同的树种类。这种情况下显然存在一条边，左右两边 siz 相同且长相不同。故数量为 &lt;span class=&#34;math inline&#34;&gt;\(\binom{f_{\lfloor \frac n2\rfloor, d-1,\lfloor \frac n2\rfloor}}{2}\)&lt;/span&gt;，容斥掉即可。&lt;/p&gt;
&lt;p&gt;需要特判 &lt;span class=&#34;math inline&#34;&gt;\(n\le2\)&lt;/span&gt; 的情况。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, d, mod;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; d &amp;gt;&amp;gt; mod;
    if (n &amp;lt;= 2) &amp;#123;
        std::cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    arr inv(d + 1);
    inv[0] = inv[1] = 1ll;
    auto fac = 1ll;
    for (int i = 2; i &amp;lt;= d; ++i) &amp;#123;
        (fac *= i) %= mod;
        inv[i] = qkp(fac, mod - 2);
    &amp;#125;
    auto C = [&amp;amp;](long long n, int m) &amp;#123;
        if (m == 0)
            return 1ll;
        if (m &amp;gt; n)
            return 0ll;
        auto res(1ll);
        for (auto i = 0; i &amp;lt; m; ++i)
            (res *= n - i) %= mod;
        return res * inv[m] % mod;
    &amp;#125;;
    crr f(n + 1, brr(d + 1, arr(n / 2 + 1)));
    f[1][0][0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 0; j &amp;lt;= d &amp;amp;&amp;amp; 1 + j &amp;lt;= i; ++j) &amp;#123;
            for (int x = 0; x &amp;lt;= j &amp;amp;&amp;amp; x &amp;lt;= i; ++x)
                f[i][j][1] += f[i - x][j - x][0];
            f[i][j][1] %= mod;
            for (int k = 2; k &amp;lt;= n / 2; ++k) &amp;#123;
                // bool flag = (i == 10 &amp;amp;&amp;amp; j == 3 &amp;amp;&amp;amp; k == 3);
                for (int x = 0; x &amp;lt;= j &amp;amp;&amp;amp; x * k &amp;lt;= i; ++x) &amp;#123;
                    f[i][j][k] += f[i - x * k][j - x][k - 1] * C(f[k][d - 1][k - 1] + x - 1, x);
                    // if (flag)
                    //     printf(&amp;quot;x = %d, f[%d][%d][%d](%lld) * C(%lld, %d)(%lld)\n&amp;quot;, x, i - x * k, j - x, k - 1, f[i - x * k][j - x][k - 1], f[k][d - 1][k - 1] + x - 1, x, C(f[k][d - 1][k - 1] + x - 1, x));
                &amp;#125;
                f[i][j][k] %= mod;
            &amp;#125;
        &amp;#125;
    // for (int i = 1; i &amp;lt;= n; ++i)
    //     for (int j = 0; j &amp;lt;= d &amp;amp;&amp;amp; j &amp;lt;= i - 1; ++j, puts(&amp;quot;&amp;quot;))
    //         for (int k = 0; k &amp;lt;= n / 2; ++k) &amp;#123;
    //             printf(&amp;quot;f[%d][%d][%d] = %lld\n&amp;quot;, i, j, k, f[i][j][k]);
    //         &amp;#125;
    if (n &amp;amp; 1)
        std::cout &amp;lt;&amp;lt; f[n][d][n / 2] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    else &amp;#123;
        auto res(f[n][d][n / 2]);
        res = (res + mod - C(f[n / 2][d - 1][n / 2 - 1], 2)) % mod;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---dominant-indices&#34;&gt;A - Dominant Indices&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1009/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1009/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;长剖板子；难点在于可能要复习一下长剖怎么写。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; h(n + 1), son(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        h[x] = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                h[x] = std::max(h[x], h[i] + 1);
                if (h[i] &amp;gt; h[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::vector&amp;lt;int&amp;gt; _f(2 * n + 1), res(n + 1);
    auto pos(_f.begin());
    std::vector&amp;lt;decltype(pos)&amp;gt; f(n + 1);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        ++f[x][0];
        if (!son[x]) &amp;#123;
            res[x] = 0;
            return;
        &amp;#125;
        f[son[x]] = std::next(f[x]);
        DFS(son[x], x);
        int mx = -std::max(std::make_pair(f[x][res[son[x]] + 1], -(res[son[x]] + 1)), std::make_pair(1, 0)).second;
        for (auto i : g[x])
            if (i != fa &amp;amp;&amp;amp; i != son[x]) &amp;#123;
                f[i] = pos, pos = std::next(pos, h[i] + 1);
                DFS(i, x);
                for (int j = 0; j &amp;lt;= h[i]; ++j) &amp;#123;
                    f[x][j + 1] += f[i][j];
                    if (j + 1 != mx &amp;amp;&amp;amp; std::make_pair(f[x][j + 1], -(j + 1)) &amp;gt; std::make_pair(f[x][mx], -mx))
                        mx = j + 1;
                &amp;#125;
            &amp;#125;
        // printf(&amp;quot;%d: &amp;quot;, x);
        // for (int i = 0; i &amp;lt;= h[x]; ++i)
        //     printf(&amp;quot;%d &amp;quot;, f[x][i]);
        // puts(&amp;quot;&amp;quot;);
        res[x] = mx;
        return;
    &amp;#125;;
    f[1] = pos, pos = std::next(pos, h[1]);
    DFS(1, -1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---树上异或&#34;&gt;B - 树上异或&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9745&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9745&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和 &lt;a href=&#34;#a---svjetlo&#34;&gt;Svjetlo&lt;/a&gt; 很像，把连通块的异或和放到状态里，拆位后令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,0/1}\)&lt;/span&gt; 表示点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 所在的连通块在第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 位异或和为 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt; 的权值（&lt;strong&gt;不计 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 所在连通块&lt;/strong&gt;），转移即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 2, x; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x;
        g[x].push_back(i), g[i].push_back(x);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; dp(n + 1);
    std::vector&amp;lt;std::array&amp;lt;std::array&amp;lt;long long, 2&amp;gt;, 60&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        for (int i = 0; i &amp;lt; 60; ++i)
            f[x][i][(a[x] &amp;gt;&amp;gt; i) &amp;amp; 1] = 1ll;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                for (int j = 0; j &amp;lt; 60; ++j) &amp;#123;
                    auto f1 = f[x][j];
                    f[x][j][0] = (f1[0] * dp[i] % mod + f1[0] * f[i][j][0] % mod + f1[1] * f[i][j][1] % mod) % mod;
                    f[x][j][1] = (f1[1] * dp[i] % mod + f1[0] * f[i][j][1] % mod + f1[1] * f[i][j][0] % mod) % mod;
                &amp;#125;
            &amp;#125;
        for (int i = 0; i &amp;lt; 60; ++i)
            dp[x] += (1ll &amp;lt;&amp;lt; i) % mod * f[x][i][1] % mod;
        dp[x] %= mod;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; dp[1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---一个网的路&#34;&gt;C - 一个网的路&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P8595&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P8595&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先需要意识到，树和链的边数是一样的，炸掉了多少条边，在之后就会花多少代价补回来。故炸一个点的代价为度数 +1。对于一个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，分为四种可能性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被炸了，单独作为一个连通块。&lt;/li&gt;
&lt;li&gt;没被炸，儿子全部被炸了。&lt;/li&gt;
&lt;li&gt;没被炸，有 1 个儿子没被炸。&lt;/li&gt;
&lt;li&gt;没被炸，有 2 个儿子没被炸。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分别用 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1/2/3}\)&lt;/span&gt; 代表上面四种可能性，转移即可。&lt;/p&gt;
&lt;p&gt;贺了个 fread，擦边跑过了。这个不是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的吗？&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int LEN = (1 &amp;lt;&amp;lt; 20);
#ifdef ONLINE_JUDGE
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar

#endif
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
int main() &amp;#123;
    int n, m;
    read(n), read(m);
    int res = (n - 1) - m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int x, y; m--; ) &amp;#123;
        read(x), read(y);
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tag(n + 1);
    std::vector&amp;lt;std::array&amp;lt;int, 4&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        tag[x] = 1;
        f[x][0] = (fa != -1) + 1;
        f[x][2] = f[x][3] = 0x3f3f3f3f;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                f[x][3] = std::min(f[x][3] + f[i][0], f[x][2] + std::min(f[i][1], f[i][2]));
                f[x][2] = std::min(f[x][2] + f[i][0], f[x][1] + std::min(f[i][1], f[i][2]));
                f[x][1] += f[i][0];
                f[x][0] += std::min(&amp;#123; f[i][0] - 1, f[i][1], f[i][2], f[i][3] &amp;#125;) + 1;
            &amp;#125;
        return;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (!tag[i]) &amp;#123;
            DFS(i, -1);
            res += *std::min_element(f[i].begin(), f[i].end());
        &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---随机树&#34;&gt;D - 随机树&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3830&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3830&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于第一问，令 &lt;span class=&#34;math inline&#34;&gt;\(f_x\)&lt;/span&gt; 表示共有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个叶子时的期望深度，两个新叶子的期望深度为 &lt;span class=&#34;math inline&#34;&gt;\(f_{x-1}+1\)&lt;/span&gt;，delta 为 &lt;span class=&#34;math inline&#34;&gt;\(f_{x-1}+2\)&lt;/span&gt;，故有 &lt;span class=&#34;math inline&#34;&gt;\(f_x=\dfrac {(x-1)f_{x-1}+f_{x-1}+2}x\)&lt;/span&gt;，递推即可。&lt;/p&gt;
&lt;p&gt;对于第二问，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,k}\)&lt;/span&gt; 表示有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个叶子，深度 &lt;span class=&#34;math inline&#34;&gt;\(\ge k\)&lt;/span&gt; 的概率（一种理解是从整数概率公式的角度出发）。则考虑枚举左、右叶子数，对于左侧叶子数为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的情况，&lt;strong&gt;为了去重，只选择深度为 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 的叶子展开&lt;/strong&gt;。只考虑某种组合的出现概率，为 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,k-1}+f_{x-i,k-1}-f_{i,k-1}\cdot f_{x-i,k-1}\)&lt;/span&gt;。数归可以证明，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，深度为 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 的叶子被选中的概率均为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac 1{x-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int q, n;
    std::cin &amp;gt;&amp;gt; q &amp;gt;&amp;gt; n;
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6);
    if (q == 1) &amp;#123;
        std::vector&amp;lt;double&amp;gt; f(n + 1);
        for (int i = 2; i &amp;lt;= n; ++i)
            f[i] = (f[i - 1] * (i - 1) + f[i - 1] + 2.) / i;
        std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    else &amp;#123;
        std::vector&amp;lt;std::vector&amp;lt;double&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;double&amp;gt; (n + 1));
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            f[i][0] = 1.;
            for (int j = 1; j &amp;lt; i; ++j) &amp;#123;
                auto s(0.);
                for (int k = 1; k &amp;lt; i; ++k)
                    s += f[k][j - 1] + f[i - k][j - 1] - f[k][j - 1] * f[i - k][j - 1];
                f[i][j] = s / (i - 1);
            &amp;#125;
        &amp;#125;
        auto res(0.);
        for (int i = 1; i &amp;lt; n; ++i)
            res += f[n][i];
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---complete-compress&#34;&gt;E - Complete Compress&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/agc034/tasks/agc034_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/agc034/tasks/agc034_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于链，发现可以枚举最后聚集的点，答案与配对方式无关，check 是否能配对即可。&lt;/p&gt;
&lt;p&gt;如果不是链，则相比链，还可以选择同一子树中不存在祖孙关系的两个点，将它们都向 LCA 移一步。&lt;/p&gt;
&lt;p&gt;故而，可以在链的做法上打一个补丁，观察到先『内部消化』，再在子树间配对一定不劣，且答案仍然和配对方式无关。故令 &lt;span class=&#34;math inline&#34;&gt;\(f_x\)&lt;/span&gt; 表示点 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 内最多消掉多少对，就可以 check 了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;line_02.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        a[i] = t - &amp;#39;0&amp;#39;;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    auto res(inf);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::vector&amp;lt;int&amp;gt; s(n + 1);
        std::vector&amp;lt;long long&amp;gt; f(n + 1), cnt(n + 1);
        std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
            s[x] = a[x];
            int son = 0;
            auto sum(0ll);
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    DFS(i, x), s[x] += s[i];
                    sum += cnt[i];
                    if (cnt[i] &amp;gt; cnt[son])
                        son = i;
                &amp;#125;
            if (son) &amp;#123;
                if (cnt[son] * 2 &amp;lt;= sum)
                    f[x] = sum / 2;
                else
                    f[x] = sum - cnt[son] + std::min(f[son], (cnt[son] - (sum - cnt[son])) / 2);
            &amp;#125;
            cnt[x] = sum;
            if (x != i)
                cnt[x] += s[x];
            return;
        &amp;#125;;
        DFS(i, -1);
        if (cnt[i] % 2 == 0 &amp;amp;&amp;amp; f[i] == cnt[i] / 2)
            res = std::min(res, cnt[i] / 2);
    &amp;#125;
    if (res == inf)
        std::cout &amp;lt;&amp;lt; -1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    else
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="树形 DP" />
        <category term="长链剖分" />
        <updated>2025-08-03T03:44:54.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250720/</id>
        <title>【通知】区间最值不满足四边形不等式</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250720/"/>
        <content type="html">&lt;p&gt;花费两天，特此通告。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;以上。&lt;/p&gt;
</content>
        <category term="DP" />
        <category term="DP 优化" />
        <updated>2025-07-20T11:30:21.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250715/</id>
        <title>练习 决策单调性</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250715/"/>
        <content type="html">&lt;p&gt;『心静自然凉』大抵是因为情绪平和时副交感神经兴奋，体温略有降低导致的。吗？&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;其实是因为心脏停跳后血液循环终止、代谢中断，导致产热低于散热（？）&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---征途&#34;&gt;A - 征途&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4072&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4072&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用完全平方公式展开得到 &lt;span class=&#34;math inline&#34;&gt;\(m^2\sigma^2=m\left(\sum {x_i}^2\right)-S^2\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 为求和。&lt;/p&gt;
&lt;p&gt;所以目标是最小化 &lt;span class=&#34;math inline&#34;&gt;\(\sum {x_i}^2\)&lt;/span&gt; 这个东西。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 天走到 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，得到：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j}&amp;amp;=\min\{f_{i-1,k}+(s_j-s_k)^2\}\\
&amp;amp;=\min\{f_{i-1,k}-2\times s_j\times s_k+{s_k}^2\}+{s_j}^2
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后得到的斜率式子是 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_{i - 1, a}-f_{i - 1, b}+{s_a}^2-{s_b}^2}{2(s_a-s_b)}&amp;lt;s_j\)&lt;/span&gt;，由于 &lt;span class=&#34;math inline&#34;&gt;\(s_j\)&lt;/span&gt; 单增，&lt;del&gt;单调队列维护递减斜率即可&lt;/del&gt; &lt;strong&gt;更正：是递增斜率。原因是 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;\)&lt;/span&gt; 是弹出条件，而非保留条件……&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e9;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;long long&amp;gt; s(n + 1);
    auto sum(0ll);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        s[i] = s[i - 1] + a[i];
        sum += a[i];
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf));
    f[0][0] = 0ll;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        auto f1 = [&amp;amp;](int a, int b) &amp;#123;
            return f[i - 1][a] - f[i - 1][b] + s[a] * s[a] - s[b] * s[b];
        &amp;#125;;
        auto f2 = [&amp;amp;](int a, int b) &amp;#123;
            return 2 * (s[a] - s[b]);
        &amp;#125;;
        std::vector&amp;lt;int&amp;gt; q(n + 1);
        int h = 0, t = -1;
        q[++t] = i - 1;
        for (int j = i; j &amp;lt;= n; ++j) &amp;#123;
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(q[h + 1], q[h]) &amp;lt; s[j] * f2(q[h + 1], q[h]); ++h);
            f[i][j] = f[i - 1][q[h]] + (s[j] - s[q[h]]) * (s[j] - s[q[h]]);
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(j, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(j, q[t]); --t);
            q[++t] = j;
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; m * f[m][n] - sum * sum &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---刷野-iii&#34;&gt;B - 刷野 III&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10074&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10074&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现最坏情况就是每次『试探』都不中的情况，再试探中最坏的那一个。为啥呢，相当于我们每次攻击的一定是未知元素中血最多的一个。既然已经试探出了比阈值大的所有元素，那么下一个攻击的就一定是阈值本身，如果这次跳过它，它就会成为下一次试探失败的元素。这显然不如一开始就直接用新阈值试探。&lt;/p&gt;
&lt;p&gt;从大到小排序。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{j, i}\)&lt;/span&gt; 表示只确定了前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 大的数，已经杀了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个人的最坏情况最小代价。那么显然这一次的阈值是 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;。随便选出上一次的阈值 &lt;span class=&#34;math inline&#34;&gt;\(a_k\)&lt;/span&gt;，那么中间这一段待确定的元素数量为 &lt;span class=&#34;math inline&#34;&gt;\(i-k\)&lt;/span&gt;。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{j, i}&amp;amp;=\min\limits_{k&amp;lt;i}\{f_{j-1,k}+(i-k)\times a_i\}\\
&amp;amp;=\min\limits_{k&amp;lt;i}\{f_{j-1,k}-k\times a_i\}+i\times a_i
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;经过验证，虽然这个式子和题解长得不一样，但是是对的 &lt;del&gt;因为我 n^3 暴力 A 了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;推出斜优形式 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_{j-1,A}-f_{j-1,B}}{A-B}&amp;lt;a_i\)&lt;/span&gt;，但我的朋友，&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 是递减的。所以用单调栈维护递增斜率即可。&lt;del&gt;或者你也可以学习 grisses 打一个单调队列上二分&lt;/del&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e12;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P10074_4.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::sort(a.begin() + 1, a.end(), std::greater&amp;lt;long long&amp;gt; ());
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf));
    f[0][0] = 0ll;
    for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
        std::vector&amp;lt;int&amp;gt; q(n + 1);
        int t = -1;
        q[++t] = j - 1;
        auto f1 = [&amp;amp;](int A, int B) &amp;#123;
            return f[j - 1][A] - f[j - 1][B];
        &amp;#125;;
        auto f2 =[&amp;amp;](int A, int B) &amp;#123;
            return A - B;
        &amp;#125;;
        for (int i = j; i &amp;lt;= n; ++i) &amp;#123;
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(q[t], q[t - 1]) &amp;gt; a[i] * f2(q[t], q[t - 1]); --t);
            f[j][i] = f[j - 1][q[t]] + (i - q[t]) * a[i];
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(i, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(i, q[t]); --t);
            q[++t] = i;
        &amp;#125;
    &amp;#125;
    auto res(inf);
    for (int i = m; i &amp;lt;= n; ++i)
        res = std::min(res, f[m][i]);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---traka&#34;&gt;C - TRAKA&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7747&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7747&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;稍微手玩一下就可以发现，假如第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个人在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 次的工作时间为 &lt;span class=&#34;math inline&#34;&gt;\([L_{j,i},R_{j,i}]\)&lt;/span&gt;，第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 次为 &lt;span class=&#34;math inline&#34;&gt;\([L_{j,i-1},R_{j,i-1}]\)&lt;/span&gt;，那么要求 &lt;span class=&#34;math inline&#34;&gt;\(L_{j,i}\ge R_{j,i-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(s_j\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的前缀和。假设第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 次加工于 &lt;span class=&#34;math inline&#34;&gt;\(x_{i-1}\)&lt;/span&gt; 开始，那么我们可以把上式转写为 &lt;span class=&#34;math inline&#34;&gt;\(x_{i}+s_{j-1}\times f_{i}\ge x_{i-1}+s_j\times f_{i-1}\)&lt;/span&gt;。也即 &lt;span class=&#34;math inline&#34;&gt;\(x_i-x_{i-1}\ge s_j\times f_{i-1}-s_{j-1}\times f_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;显然需要找到一个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 使得 RSH 取得最大值；现在就可以考虑斜率优化了。由于所有项都和 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 有关，想到两边同除 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}\)&lt;/span&gt; 消掉一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 有关的系数，最后化出来的斜优形式是 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {s_A-s_B}{s_{A-1}-s_{B-1}}&amp;gt;\dfrac {f_{i-1}}{f_i}\)&lt;/span&gt;。由于 RSH 不单调，把所有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 塞到队列里维护递减斜率，打二分即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; a(n + 1), w(m + 1), s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], s[i] = s[i - 1] + a[i];
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cin &amp;gt;&amp;gt; w[i];
    std::vector&amp;lt;long long&amp;gt; f(m + 1);
    std::vector&amp;lt;int&amp;gt; q(n + 1);
    int h = 0, t = -1;
    q[++t] = 1;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        for (; h &amp;lt; t &amp;amp;&amp;amp; (s[i] - s[q[t]]) * (s[q[t] - 1] - s[q[t - 1] - 1]) &amp;gt; (s[q[t]] - s[q[t - 1]]) * (s[i - 1] - s[q[t] - 1]); --t);
        q[++t] = i;
    &amp;#125;
    for (int i = 2; i &amp;lt;= m; ++i) &amp;#123;
        int to = q[h];
        for (int l = h + 1, r = t, mid; l &amp;lt;= r; ) &amp;#123;
            mid = (l + r) &amp;gt;&amp;gt; 1;
            if ((s[q[mid]] - s[q[mid - 1]]) * w[i - 1] &amp;gt; w[i] * (s[q[mid] - 1] - s[q[mid - 1] - 1]))
                to = q[mid], l = mid + 1;
            else
                r = mid - 1;
        &amp;#125;
        f[i] = f[i - 1] + s[to] * w[i - 1] - s[to - 1] * w[i];
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[m] + w[m] * s[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---柠檬&#34;&gt;D - 柠檬&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5504&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5504&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察零：原问题『从两端取』可以转化为分段问题，故从其中一端考虑即可。&lt;/li&gt;
&lt;li&gt;观察一：若有一段连续的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，完整的比拆开的更优。&lt;/li&gt;
&lt;li&gt;观察二：如果一段 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 中夹杂了一些其他元素，那么在哪里分段是说不准的。&lt;/li&gt;
&lt;li&gt;观察三：如果选取的区间是 &lt;span class=&#34;math inline&#34;&gt;\([1,r]\)&lt;/span&gt;，那么贪心地想，&lt;span class=&#34;math inline&#34;&gt;\(a_r\)&lt;/span&gt; 一定是关键值，不然取 &lt;span class=&#34;math inline&#34;&gt;\(a_r\)&lt;/span&gt; 就浪费了。&lt;/li&gt;
&lt;li&gt;观察四：如果选取的区间是 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，那么由观察四，&lt;span class=&#34;math inline&#34;&gt;\(a_l=a_r\)&lt;/span&gt;，且该值为关键值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这几个观察，令 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\([1,i]\)&lt;/span&gt; 中出现次数，&lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示这一段以 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 结尾的最大价值：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\max\limits_{j&amp;lt;i,a_{j+1}=a_i}\{f_j+a_i\times (c_i-c_{j + 1} + 1)^2\}\\
&amp;amp;=\max\limits_{j&amp;lt;i,a_{j+1}=a_i}\{f_j+a_{j+1}\times {c_{j+1}}^2-2\times c_i\times a_{j+1}\times c_{j+1}-2\times c_{j+1}\times a_{j+1}\}+a_i\times(c_i-1)^2
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（怎么这么大一堆。）最后可以化出 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_A-f_B+a_{A+1}\cdot c_{A+1}\cdot (c_{A+1}-2)-a_{B+1}\cdot c_{B+1}\cdot (c_{B+1}-2)}{2(c_{A+1} - c_{B+1})}&amp;gt;c_i\times a_i\)&lt;/span&gt;。发现对于每一种 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(c_i\times a_i\)&lt;/span&gt; 是单增的。单调栈维护即可。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这其实提醒我们关于代换的问题——显然，当与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的项、与 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 有关的项之间存在代换关系时，应该尽量往 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方向靠。&lt;/em&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;7.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n + 1), c(n + 1), la(10001);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        c[i] = c[la[a[i]]] + 1, la[a[i]] = i;
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; _t(10001, -1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; _q(10001);
    auto f1 = [&amp;amp;](int A, int B) &amp;#123;
        return f[A] - f[B] + a[A + 1] * c[A + 1] * (c[A + 1] - 2) - a[B + 1] * c[B + 1] * (c[B + 1] - 2);
    &amp;#125;;
    auto f2 = [&amp;amp;](int A, int B) &amp;#123;
        return 2 * (c[A + 1] - c[B + 1]);
    &amp;#125;;
    ++_t[a[1]], _q[a[1]].push_back(0);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        &amp;#123;
            auto &amp;amp;t = _t[a[i]];
            auto &amp;amp;q = _q[a[i]];
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(q[t], q[t - 1]) &amp;lt; c[i] * a[i] * f2(q[t], q[t - 1]); --t);
            f[i] = f[q[t]] + a[i] * (c[i] - c[q[t] + 1] + 1) * (c[i] - c[q[t] + 1] + 1);
        &amp;#125;
        if (i &amp;lt; n) &amp;#123;
            auto &amp;amp;t = _t[a[i + 1]];
            auto &amp;amp;q = _q[a[i + 1]];
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(i, q[t]) * f2(q[t], q[t - 1]) &amp;gt; f1(q[t], q[t - 1]) * f2(i, q[t]); --t);
            q.resize(++t + 1), q[t] = i;
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---knapsack-with-diminishing-values&#34;&gt;E - Knapsack with Diminishing Values&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc373/tasks/abc373_f&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc373/tasks/abc373_f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现和 &lt;a href=&#34;/20250707-1/#例单调队列优化多重背包&#34;&gt;单调队列优化多重背包&lt;/a&gt; 有异曲同工之妙。&lt;/p&gt;
&lt;p&gt;不妨令 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 表示体积，&lt;span class=&#34;math inline&#34;&gt;\(w_i\)&lt;/span&gt; 表示价值。对于每一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，把所有体积按模 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 的余数分类，设为 &lt;span class=&#34;math inline&#34;&gt;\(j\cdot v_i+x\)&lt;/span&gt;。对于 &lt;span class=&#34;math inline&#34;&gt;\(k\cdot v_i+x\)&lt;/span&gt;，有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j\cdot v_i+x}&amp;amp;=\max\limits_{k&amp;lt;j}\{f_{i-1,k\cdot v_i+x}+(j-k)\cdot w_i-(j-k)^2\}\\
&amp;amp;=\max\limits_{k&amp;lt;j}\{f_{i-1,k\cdot v_i+x}-k\cdot w_i-k^2+2\times j\times k\}-j^2+j\cdot w_i
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;则得到 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_{i-1,A\cdot v_i+x}-f_{i-1,B\cdot v_i+x}+(B-A)\cdot w_i - A^2+B^2}{2(B-A)}&amp;lt;j\)&lt;/span&gt;。注意分母为负。总之单调队列维护递增斜率即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; v(n + 1), w(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long long&amp;gt; (m + 1));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; v[i] &amp;gt;&amp;gt; w[i];
        for (int x = 0; x &amp;lt; v[i]; ++x) &amp;#123;
            int h = 0, t = -1;
            std::vector&amp;lt;int&amp;gt; q;
            auto f1 = [&amp;amp;](int A, int B) &amp;#123;
                return f[i - 1][A * v[i] + x] - f[i - 1][B * v[i] + x] + (B - A) * w[i] - A * A + B * B;
            &amp;#125;;
            auto f2 = [&amp;amp;](int A, int B) &amp;#123;
                return 2 * (B - A);
            &amp;#125;;
            for (int j = 0, J = x; J &amp;lt;= m; ++j, J += v[i]) &amp;#123;
                for (; h &amp;lt; t &amp;amp;&amp;amp; f1(q[h + 1], q[h]) &amp;gt; j * f2(q[h + 1], q[h]); ++h);
                f[i][J] = f[i - 1][J];
                if (h &amp;lt;= t)
                    f[i][J] = std::max(f[i][J], f[i - 1][q[h] * v[i] + x] + (j - q[h]) * w[i] - (j - q[h]) * (j - q[h]));
                for (; h &amp;lt; t &amp;amp;&amp;amp; f1(j, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(j, q[t]); --t);
                q.resize(++t + 1), q[t] = j;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n][m] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f---managing-telephone-poles&#34;&gt;F - Managing Telephone Poles&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1575/M&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1575/M&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;？观察到性质然后被自己忽略了。非常值得批评。&lt;/p&gt;
&lt;p&gt;不难写出类似斜率优化的式子 &lt;span class=&#34;math inline&#34;&gt;\(S(i,j)=\min\{ {x_k}^2-2\times i\times x_k+{y_k}^2-2\times j \times y_k\}+i^2+j^2\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;会下意识尝试固定 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2m)\)&lt;/span&gt; 完成任务，似乎不太行。顺着这个想法会观察到，固定 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 之后，每一列的 poles 中只有和第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行最近的才会有贡献。&lt;/p&gt;
&lt;p&gt;这个是好做的，且这样的相邻点数量是 &lt;span class=&#34;math inline&#34;&gt;\(O(m)\)&lt;/span&gt; 的；于是将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 视为常数进行变形，若将所有 poles 按 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 从小到大排序就能得到斜率形式 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac { {x_A}^2-{x_B}^2+{y_A}^2-{y_B}^2-2\times i\times(x_A-x_B)}{2(y_A-y_B)}&amp;lt;j\)&lt;/span&gt;。维护递增斜率就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 完成问题。&lt;/p&gt;
&lt;p&gt;那么找相邻点这一步大可以摆烂写二分。所以总共是 &lt;span class=&#34;math inline&#34;&gt;\(O(nm\log m)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;不要像我一样把两边最近的都加进队列，不然你会有分母为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的斜率 &lt;img src=&#34;/em/hsh.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m, ++n, ++m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; tag(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(m + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            char t;
            std::cin &amp;gt;&amp;gt; t;
            if (t == &amp;#39;1&amp;#39;)
                g[j].push_back(i), tag[i][j] = 1;
        &amp;#125;
    struct node &amp;#123; long long x, y; &amp;#125;;
    auto res(0ll);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::vector&amp;lt;node&amp;gt; p;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            int to = std::lower_bound(g[j].begin(), g[j].end(), i) - g[j].begin();
            if (to &amp;lt; (int)g[j].size()) &amp;#123;
                p.push_back(&amp;#123; g[j][to], j &amp;#125;);
                if (g[j][to] != i &amp;amp;&amp;amp; to != 0 &amp;amp;&amp;amp; g[j][to] - i &amp;gt; i - g[j][to - 1])
                    p.back() = &amp;#123; g[j][to - 1], j &amp;#125;;
            &amp;#125;
            else if (to != 0)
                p.push_back(&amp;#123; g[j][to - 1], j &amp;#125;);
        &amp;#125;
        std::vector&amp;lt;int&amp;gt; q(m + 1);
        int h = 0, t = -1;
        auto f1 = [&amp;amp;](node A, node B) &amp;#123;
            return A.x * A.x - B.x * B.x + A.y * A.y - B.y * B.y - 2 * i * (A.x - B.x);
        &amp;#125;;
        auto f2 = [&amp;amp;](node A, node B) &amp;#123;
            return 2 * (A.y - B.y);
        &amp;#125;;
        for (int j = 0; j &amp;lt; (int)p.size(); ++j) &amp;#123;
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(p[j], p[q[t]]) * f2(p[q[t]], p[q[t - 1]]) &amp;lt; f1(p[q[t]], p[q[t - 1]]) * f2(p[j], p[q[t]]); --t);
            q[++t] = j;
        &amp;#125;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;  
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(p[q[h + 1]], p[q[h]]) &amp;lt; j * f2(p[q[h + 1]], p[q[h]]); ++h);
            res += (p[q[h]].x - i) * (p[q[h]].x - i) + (p[q[h]].y - j) * (p[q[h]].y - j);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;g---partition-game&#34;&gt;G - Partition Game&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1527/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1527/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现不太斜优，终于给我浸泡了两天斜优内容的大脑加了勺新的底物。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 段以 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 结尾的最小代价；对 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 套用四边形不等式变式 &lt;span class=&#34;math inline&#34;&gt;\(w(l-1,r+1)+w(l,r)\ge w(l-1,r)+w(l,r+1)\)&lt;/span&gt; 发现成立（其中大多数时候能取等；部分特殊情况取到大于号）。&lt;/p&gt;
&lt;p&gt;那么发现可以用分治优化。发现 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 不那么能快速求；还是套用 &lt;a href=&#34;/20250707-1/#例yet-another-minimization-problem&#34;&gt;Yet Another Minimization Problem&lt;/a&gt; 中的方法，用类似莫队的方式求解。&lt;/p&gt;
&lt;p&gt;发现这个莫队套路也很熟悉了，直接用双端队列维护即可。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(nk\log n)\)&lt;/span&gt;，看着不太安全。但注意到我们在 20 个月前的提交中使用了 &lt;span class=&#34;math inline&#34;&gt;\(O(nk\log n)\)&lt;/span&gt; 的线段树，所以能过的兄弟。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;鉴于 deque 的时空常数都大得吓人，所以我用静态 vector 模拟 deque 了。&lt;/p&gt;
&lt;p&gt;跑得比我之前线段树的一半还快，兄弟。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; pos(n + 1);
    std::vector&amp;lt;int&amp;gt; a(n + 1), _h(n + 1), _t(n + 1, -1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], pos[a[i]].push_back(i);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf));
    f[0][0] = 0ll;
    auto w = [&amp;amp;](int ql, int qr) &amp;#123;
        static int l = 1, r = 0;
        static auto res(0ll);
        for (; l &amp;gt; ql; ) &amp;#123;
            --l;
            auto &amp;amp;h = _h[a[l]], &amp;amp;t = _t[a[l]];
            auto &amp;amp;q = pos[a[l]];
            if (h &amp;lt;= t)
                res -= q[t] - q[h];
            res += q[t] - q[--h];
        &amp;#125;
        for (; r &amp;gt; qr; ) &amp;#123;
            auto &amp;amp;h = _h[a[r]], &amp;amp;t = _t[a[r]];
            auto &amp;amp;q = pos[a[r]];
            res -= q[t--] - q[h];
            if (h &amp;lt;= t)
                res += q[t] - q[h];
            --r;
        &amp;#125;
        for (; r &amp;lt; qr; ) &amp;#123;
            ++r;
            auto &amp;amp;h = _h[a[r]], &amp;amp;t = _t[a[r]];
            auto &amp;amp;q = pos[a[r]];
            if (h &amp;lt;= t)
                res -= q[t] - q[h];
            res += q[++t] - q[h];
        &amp;#125;
        for (; l &amp;lt; ql; ) &amp;#123;
            auto &amp;amp;h = _h[a[l]], &amp;amp;t = _t[a[l]];
            auto &amp;amp;q = pos[a[l]];
            res -= q[t] - q[h++];
            if (h &amp;lt;= t)
                res += q[t] - q[h];
            ++l;
        &amp;#125;
        return res;
    &amp;#125;;
    for (int t = 1; t &amp;lt;= m; ++t) &amp;#123;
        std::function&amp;lt;void(int, int, int, int)&amp;gt; calc = [&amp;amp;](int l, int r, int lp, int rp) &amp;#123;
            if (l &amp;gt; r)
                return;
            if (l == r) &amp;#123;
                for (int i = lp; i &amp;lt;= rp &amp;amp;&amp;amp; i &amp;lt; l; ++i)
                    f[t][l] = std::min(f[t][l], f[t - 1][i] + w(i + 1, l));
                return;
            &amp;#125;
            int mid = (l + r) &amp;gt;&amp;gt; 1, p = -1;
            for (int i = lp; i &amp;lt;= rp &amp;amp;&amp;amp; i &amp;lt; mid; ++i)
                if (f[t - 1][i] + w(i + 1, mid) &amp;lt; f[t][mid])
                    f[t][mid] = f[t - 1][i] + w(i + 1, mid), p = i;
            calc(l, mid - 1, lp, p), calc(mid + 1, r, p, rp);
            return;
        &amp;#125;;
        calc(t, n, t - 1, n - 1);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[m][n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;h---battle-lemmings&#34;&gt;H - Battle Lemmings&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1420/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1420/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易发现 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的数目不变，答案就是 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的对数 - 连续 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的对数。&lt;/p&gt;
&lt;p&gt;然后有一个我们很熟悉的 trick，随便找一个目标序列，那么花费的操作次数就是每个对应的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的位置差。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k}\)&lt;/span&gt; 表示用了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 次操作、&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;、最后一个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的最小连续 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 对数。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j,k}&amp;amp;=\min\limits_{p&amp;lt;k}\left\{f_{i-|k-pos_j|,j-1,p}+\dfrac {(k-p-1)(k-p-2)}2\right\}\\
&amp;amp;=\min\left\{f_{i-|k-pos_j|,j-1,p}-k\cdot p+\dfrac {p(p + 2)}2\right\}+\dfrac {k^2-3k+2}2
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;发现这个式子是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^5)\)&lt;/span&gt; 的，而且看起来很斜优，化为斜率形式 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{2\times f_A-2\times f_B+A(A+2)-B(B+2)}{2(A-B)}&amp;lt;k\)&lt;/span&gt;。维护递增斜率就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n^4)\)&lt;/span&gt; 做了。&lt;/p&gt;
&lt;p&gt;Tip：当时写着写着愣住了，比如这个 &lt;span class=&#34;math inline&#34;&gt;\(i-|k-pos_j|\)&lt;/span&gt; 不是一直在动吗。解决方案？同时维护很多个队列即可。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;注意还要把最后一个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 之后连续 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的代价算上。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e9;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;long long&amp;gt; pos(1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        if (a[i] == 1)
            pos.push_back(i);
    &amp;#125;
    int m = n * (n - 1) / 2;
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; &amp;gt; f(pos.size(), std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; (m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf)));
    f[0][0][0] = 0ll;
    for (int j = 1; j &amp;lt; (int)pos.size(); ++j) &amp;#123;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; _q(m + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
        std::vector&amp;lt;int&amp;gt; _h(m + 1), _t(m + 1, -1);
        for (int k = 0; k &amp;lt;= n; ++k)
            for (int i = m; i &amp;gt;= 0; --i) &amp;#123;
                if (i &amp;gt;= std::abs(k - pos[j])) &amp;#123;
                    auto f1 = [&amp;amp;](long long A, long long B) &amp;#123;
                        return 2 * f[j - 1][i - std::abs(k - pos[j])][A] - 2 * f[j - 1][i - std::abs(k - pos[j])][B] + A * (A + 2) - B * (B + 2);
                    &amp;#125;;
                    auto f2 = [&amp;amp;](long long A, long long B) &amp;#123;
                        return 2 * (A - B);
                    &amp;#125;;
                    auto &amp;amp;h = _h[i - std::abs(k - pos[j])], &amp;amp;t = _t[i - std::abs(k - pos[j])];
                    auto &amp;amp;q = _q[i - std::abs(k - pos[j])];
                    for (; h &amp;lt; t &amp;amp;&amp;amp; f1(q[h + 1], q[h]) &amp;lt; k * f2(q[h + 1], q[h]); ++h) &amp;#123;&amp;#125;
                    if (h &amp;lt;= t)
                        f[j][i][k] = std::min(inf, f[j - 1][i - std::abs(k - pos[j])][q[h]] + (k - q[h] - 1) * (k - q[h] - 2) / 2);
                &amp;#125;
                auto f1 = [&amp;amp;](long long A, long long B) &amp;#123;
                    return 2 * f[j - 1][i][A] - 2 * f[j - 1][i][B] + A * (A + 2) - B * (B + 2);
                &amp;#125;;
                auto f2 = [&amp;amp;](long long A, long long B) &amp;#123;
                    return 2 * (A - B);
                &amp;#125;;
                auto &amp;amp;h = _h[i], &amp;amp;t = _t[i];
                auto &amp;amp;q = _q[i];
                for (; h &amp;lt; t &amp;amp;&amp;amp; f1(k, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(k, q[t]); --t);
                q[++t] = k;
            &amp;#125;
    &amp;#125;
    auto res(-inf);
    int cnt = n - (int)pos.size() + 1;
    cnt = cnt * (cnt - 1) / 2;
    for (int i = 0; i &amp;lt;= m; ++i) &amp;#123;
        for (int k = 0; k &amp;lt;= n; ++k)
            res = std::max(res, cnt - f.back()[i][k] - (n - k) * (n - k - 1) / 2);
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---yakiniku-restaurants&#34;&gt;A - Yakiniku Restaurants&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc067/tasks/arc067_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc067/tasks/arc067_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现固定左右端点后，收益是可以贪心算的；下意识想到只固定左端点，那么右端点应该就可以用单调队列之类的搞一搞。&lt;/p&gt;
&lt;p&gt;先提前把所有东西塞到队列里。左端点一开始在最右边；往左边动一下之后，就可以更新每种菜的队列；发现在所有元素中作决策点的不总是队头；这个地方用 &lt;strong&gt;单调递减的单调栈&lt;/strong&gt; 是极好的。这里的单调栈其实就类似 &lt;a href=&#34;/20250707-1/#优化-dp单调数据结构&#34;&gt;四边形不等式中的单调数据结构&lt;/a&gt; 了。&lt;/p&gt;
&lt;p&gt;维护单调栈中每个决策点的影响区间；显然每个右端点的答案变化量相同；用个类似于差分的东西记录一下就好了。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; s(n + 1), f(n + 1);
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; s[i], s[i] += s[i - 1];
        f[i] = -s[i];
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; a(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= m; ++j)
            std::cin &amp;gt;&amp;gt; a[i][j];
    struct node &amp;#123; int j, l, r; &amp;#125;;
    std::vector&amp;lt;std::stack&amp;lt;node&amp;gt; &amp;gt; _q(m + 1);
    auto res(-inf);
    for (int l = n; l; --l) &amp;#123;
        std::vector&amp;lt;long long&amp;gt; d(n + 1);
        auto add = [&amp;amp;](int l, int r, long long v) &amp;#123;
            d[l] += v;
            if (r != n)
                d[r + 1] -= v;
            return;
        &amp;#125;;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            auto &amp;amp;q = _q[j];
            node now = &amp;#123; j, l, l &amp;#125;;
            add(l, l, a[l][j]);
            for (; !q.empty() &amp;amp;&amp;amp; a[l][j] &amp;gt;= a[q.top().l][q.top().j]; q.pop()) &amp;#123;
                now.r = q.top().r;
                add(q.top().l, q.top().r, a[l][j] - a[q.top().l][q.top().j]);
            &amp;#125;
            q.push(now);
        &amp;#125;
        std::partial_sum(d.begin() + 1, d.end(), d.begin() + 1);
        for (int r = l; r &amp;lt;= n; ++r) &amp;#123;
            f[r] += d[r];
            res = std::max(res, f[r] + s[l]);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---jellyfish-and-miku&#34;&gt;B - Jellyfish and Miku&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1874/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1874/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;唉数列。唉概统。在数学讲义上折磨了我一遍之后还要到这儿来折磨我。&lt;/p&gt;
&lt;p&gt;假设已经知道了 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，考虑求期望步数。设 &lt;span class=&#34;math inline&#34;&gt;\(E_i\)&lt;/span&gt; 为从 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 出发走到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的期望步数。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
E_i=\begin{cases}
E_1+1&amp;amp;i=0\\
0&amp;amp;i=n\\
E_i=(E_{i-1}+1)\cdot \dfrac {a_i}{a_{i+1}+a_i}+(E_{i+1}+1)\cdot \dfrac {a_{i+1}}{a_{i+1}+a_{i}}&amp;amp;\text{otherwise}
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（提示：从『&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 下一步会走哪个方向』考虑。）&lt;/p&gt;
&lt;p&gt;接下来就可以利用你的高中数学知识进行一个 &lt;span class=&#34;math inline&#34;&gt;\(f_0\)&lt;/span&gt; 的求，（一堆过程），得到 &lt;span class=&#34;math inline&#34;&gt;\(E_0=n+2\times \sum\limits_{i=1}^n\dfrac {\sum_{j\le i}a_j}{a_i}\)&lt;/span&gt;，然后想要最小化这个东西。&lt;/p&gt;
&lt;p&gt;不妨令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时已经分配走了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 体积，&lt;span class=&#34;math inline&#34;&gt;\(\sum_{k=1}^i \dfrac {\sum_{l\le k}a_l}{a_k}\)&lt;/span&gt; 的最小值，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\min\limits_{k&amp;lt;j}\left\{f_{i-1,k}+\dfrac {k}{j - k}\right\}\)&lt;/span&gt;。发现它大抵是满足四边形不等式的，按照 &lt;a href=&#34;/20250707-1/#d1d-dp-优化&#34;&gt;2D/1D DP 优化的结论&lt;/a&gt;，代入 &lt;span class=&#34;math inline&#34;&gt;\(p_{i,j-1}&amp;lt;p_{i,j}&amp;lt;p_{i+1,j}\)&lt;/span&gt; 可以 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt; 解决问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; p(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
    std::vector&amp;lt;std::vector&amp;lt;long double&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long double&amp;gt; (m + 1, 1e18));
    f[0][0] = 0ll;
    for (int j = 1; j &amp;lt;= m; ++j)
        for (int i = std::min(j, n); i; --i) &amp;#123;
            int to = ((i == std::min(j, n)) ? j : std::min(p[i + 1][j], j));
            for (int k = p[i][j - 1]; k &amp;lt;= to; ++k)
                if (f[i - 1][k] + k * 1. / (j - k) &amp;lt; f[i][j])
                    f[i][j] = f[i - 1][k] + k * 1. / (j - k), p[i][j] = k;
            // printf(&amp;quot;f[%d][%d] = %Lf, p = %d\n&amp;quot;, i, j, f[i][j], p[i][j]);
        &amp;#125;
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(10) &amp;lt;&amp;lt; n + 2 * f[n][m] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cut-the-sequence&#34;&gt;Cut the Sequence&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10977&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10977&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;通知区间最值-不满足-四边形不等式&#34;&gt;&lt;mark&gt;通知：区间最值 不满足 四边形不等式。&lt;/mark&gt;&lt;/h1&gt;
&lt;p&gt;其实在猜的时候是举了反例的，但是大脑萎缩了推着推着忘记符号了 😅&lt;/p&gt;
&lt;p&gt;看到 &lt;span class=&#34;math inline&#34;&gt;\(f_i=\min\limits_{g(i)\le j&amp;lt;i}\{f_j+\max\{a_{j+1\sim i}\}\}\)&lt;/span&gt; 这个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的范围其实是有点单调队列优化的感觉的，但这个最大值传统的单调队列不是很可做。可以注意到最大值这一项有点 &lt;strong&gt;单调队列&lt;/strong&gt; 后缀最大值的感觉（实际上就是）；一个很自然的想法是利用这个最大值影响的区间，维护 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的线段树来暴力做。&lt;/p&gt;
&lt;p&gt;另一个比较牛的做法是发现同一个下标的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的关系。首先需要注意到 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 单调不降；对于同一个 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，能取到的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 就是最靠前的；维护一个 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的单减队列，那么共用同一个 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的就是相邻两个下标之间的部分，其最优决策在能取到的最前端取得；需要注意到队列里的贡献并不单调，需要用一个 multiset 来存储所有贡献并查找、更新。&lt;/p&gt;
&lt;p&gt;需要注意单调队列里某个元素 &lt;span class=&#34;math inline&#34;&gt;\(f_{q_i}\)&lt;/span&gt; 结合的其实是 &lt;span class=&#34;math inline&#34;&gt;\(a_{q_{i+1}}\)&lt;/span&gt;。还需要注意队头的维护，可能需要一些小巧思。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;1.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;long long&amp;gt; s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], s[i] = s[i - 1] + a[i];
    int h = 0, t = -1;
    std::multiset&amp;lt;long long&amp;gt; st;
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; q(n + 1);
    q[++t] = &amp;#123; 0, 0 &amp;#125;, a[0] = 0x3f3f3f3f;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (; s[i] - s[q[h].second] &amp;gt; m; ) &amp;#123;
            st.erase(st.find(f[q[h].second] + a[q[h + 1].first]));
            if (++q[h].second &amp;gt;= q[h + 1].first)
                a[q[++h].first] = 0x3f3f3f3f;
            else
                st.insert(f[q[h].second] + a[q[h + 1].first]);
        &amp;#125;
        for (; h &amp;lt; t &amp;amp;&amp;amp; a[q[t].first] &amp;lt;= a[i]; --t)
            st.erase(st.find(f[q[t - 1].second] + a[q[t].first]));
        st.insert(f[q[t].second] + a[i]), q[++t] = &amp;#123; i, i &amp;#125;;
        f[i] = *st.begin();
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="斜率优化" />
        <category term="DP" />
        <category term="四边形不等式" />
        <updated>2025-07-15T06:13:24.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250709/</id>
        <title>练习 - DP 凸优化</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250709/"/>
        <content type="html">&lt;p&gt;Stewart’s theorem：在线段 &lt;span class=&#34;math inline&#34;&gt;\(AB\)&lt;/span&gt; 上取一点 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(\vec{AB}=\lambda \vec{AM}\)&lt;/span&gt;。在 &lt;span class=&#34;math inline&#34;&gt;\(AB\)&lt;/span&gt; 上方任取一点 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt;，则有 &lt;span class=&#34;math inline&#34;&gt;\(PM^2=(1-\lambda) PA^2+\lambda PB^2-\lambda(1-\lambda) AB^2\)&lt;/span&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-akvizna&#34;&gt;D. Akvizna&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6393/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6393/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实到这里应该发现了，WQS 的奖励都以一次项系数出现，原因也很显然，奖励的对象是一次项系数嘛。此外，WQS 内层 DP 数组的维度都应和操作次数无关，而 DP 值应为最大收益。这个也很显然。&lt;/p&gt;
&lt;p&gt;令一轮比赛的惩罚是 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 然后二分。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{j}\)&lt;/span&gt; 表示剩余人数为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 时的最大收益，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{j}=\max\limits_{k\ge j}\left\{f_k+\frac {k-j}k\right\}-mid\)&lt;/span&gt;。最后在 &lt;span class=&#34;math inline&#34;&gt;\(f_0\)&lt;/span&gt; 处找答案即可。&lt;/p&gt;
&lt;p&gt;然后就发现一个很可怕的问题，内层 DP 咋写。发现把 &lt;span class=&#34;math inline&#34;&gt;\(\frac {k-j}k\)&lt;/span&gt; 改写成 &lt;span class=&#34;math inline&#34;&gt;\(1-\frac jk\)&lt;/span&gt; 后出现交叉项，考虑斜优。令 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;lt;b\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_a-f_b}{\frac 1a - \frac 1b} &amp;gt; j\)&lt;/span&gt;。维护单减的斜率即可。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;笑话：二分 50 次不够，需要 60 次。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    double l = 0., r = 1e5, mid;
    auto calc = [&amp;amp;](double mid) &amp;#123;
        std::vector&amp;lt;double&amp;gt; f(n + 1, -1e18);
        f[n] = 0.;
        int h = 1, t = 0;
        std::vector&amp;lt;int&amp;gt; q(n + 1), p(n + 1);
        q[++t] = n;
        // printf(&amp;quot;mid = %.3lf: \n&amp;quot;, mid);
        for (int i = n - 1; ~i; --i) &amp;#123;
            for (; h &amp;lt; t &amp;amp;&amp;amp; (f[q[h + 1]] - f[q[h]]) / (1. / q[h + 1] - 1. / q[h]) &amp;gt;= i; ++h);
            f[i] = f[q[h]] + 1. - i * 1.0 / q[h] - mid, p[i] = p[q[h]] + 1;
            // printf(&amp;quot;  %d: f = %.3lf, p = %d, q[h] = %d(%.3lf / %d)\n&amp;quot;, i, f[i], p[i], q[h], f[q[h]], p[q[h]]);
            if (i) &amp;#123;
                for (; h &amp;lt; t &amp;amp;&amp;amp; (f[i] - f[q[t]]) / (1. / i - 1. / q[t]) &amp;gt;= (f[q[t]] - f[q[t - 1]]) / (1. / q[t] - 1. / q[t - 1]); --t);
                q[++t] = i;
            &amp;#125;
        &amp;#125;
        // printf(&amp;quot;res = %.3lf\n&amp;quot;, f[0] + p[0] * mid);
        return std::make_pair(f[0], p[0]);
    &amp;#125;;
    // calc(0.);
    // return 0;
    double res(0.);
    for (int i = 1; i &amp;lt;= 60; ++i) &amp;#123;
        mid = (l + r) / 2.;
        auto t(calc(mid));
        if (t.second &amp;gt;= k)
            l = mid, res = t.first + k * mid;
        else
            r = mid;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(8) &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e.-poborcy-podatkowi&#34;&gt;E. Poborcy podatkowi&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6393/problem/5&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6393/problem/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先令 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,l}(i),l=0,1,2,3\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 上挂了长度为 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 的半条链，共有 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 条整链的最大收益。&lt;/p&gt;
&lt;p&gt;可以观察到是凸的。那么不难发现需要闵可夫斯基和，考虑 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 位置上的合并。&lt;strong&gt;首先需要注意到儿子上长度为 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 的链到父亲上会变成 &lt;span class=&#34;math inline&#34;&gt;\(l+1\)&lt;/span&gt;&lt;/strong&gt;。显然每条可以不选；如果选了 &lt;span class=&#34;math inline&#34;&gt;\(cnt_a\)&lt;/span&gt; 条长度为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的半链，那么合并出来的结果是 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1-cnt_3\)&lt;/span&gt; 条长度为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 的链、&lt;span class=&#34;math inline&#34;&gt;\(cnt_2\bmod 2\)&lt;/span&gt; 条长度为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的链，并且要求两者不同时出现。发现这个东西基本上处理不了。&lt;/p&gt;
&lt;p&gt;接着注意到这个形式有点像背包。但怎么处理 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt; 配对的这个要求呢？有个非常精妙的在物品体积上做文章的方法：&lt;/p&gt;
&lt;p&gt;首先注意到我们最后的查询的答案肯定要求把所有儿子用完。那么不妨设体积之和为儿子总数 &lt;span class=&#34;math inline&#34;&gt;\(tot\)&lt;/span&gt;。接着，对 &lt;span class=&#34;math inline&#34;&gt;\(cnt_0\)&lt;/span&gt;（同时也是 &lt;span class=&#34;math inline&#34;&gt;\(cnt_4\)&lt;/span&gt;）没有限制，直接令其体积为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(cnt_2\)&lt;/span&gt; 单独处理（等会儿会说），为了不对现在的问题产生影响也令其体积为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。对于 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt;，显然两者平均体积需要为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;；你可以令 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt; 体积为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt; 体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;接下来就有个很好的性质：&lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt; 必须和 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt; 配对才能让平均体积为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。在 &lt;span class=&#34;math inline&#34;&gt;\(tot\)&lt;/span&gt; 处查找的答案，由 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个体积不为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的物品和 &lt;span class=&#34;math inline&#34;&gt;\(tot-x\)&lt;/span&gt; 个体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的物品（&lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt;）组成，原因是背包会贪心地在所有『剩余』的分组中选择体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的一项。再计算一下 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt;，发现显然为 &lt;span class=&#34;math inline&#34;&gt;\(tot-x\)&lt;/span&gt;。符合目的。&lt;/p&gt;
&lt;p&gt;在 &lt;span class=&#34;math inline&#34;&gt;\(dp_{tot}\)&lt;/span&gt; 处查找可以找到 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1=cnt_3\)&lt;/span&gt; 时的答案；同理，在 &lt;span class=&#34;math inline&#34;&gt;\(dp_{tot-1},dp_{tot1+1}\)&lt;/span&gt; 处可以查找到 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1=cnt_3\pm 1\)&lt;/span&gt; 的答案。&lt;/p&gt;
&lt;p&gt;接下来再考虑 &lt;span class=&#34;math inline&#34;&gt;\(cnt_2\)&lt;/span&gt;，解决『&lt;span class=&#34;math inline&#34;&gt;\(cnt\bmod2=1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1\ne cnt_3\)&lt;/span&gt; 不能同时成立』的限制。那太好了，直接多开一维记录 &lt;span class=&#34;math inline&#34;&gt;\(cnt_2\bmod 2\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;啊啊太妙了。像利用体积为 &lt;span class=&#34;math inline&#34;&gt;\(-1,1\)&lt;/span&gt; 的随机数据背包期望最大体积不超过 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt V\)&lt;/span&gt; 的那个方法，显然就没有办法利用凸性了。所以这或许是闵可夫斯基和做法的唯一解？&lt;/p&gt;
&lt;p&gt;需要知道，如果设 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 而 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，始终会出一些问题。这个我和 yly 讨论了一下没啥结果。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e12;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;1.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y, w; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; w;
        g[x].emplace_back(y, w), g[y].emplace_back(x, w);
    &amp;#125;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    std::vector&amp;lt;arr&amp;gt; f(n + 1, arr(4));
    struct node &amp;#123;
        std::vector&amp;lt;arr&amp;gt; f;
        node(): f(2) &amp;#123;&amp;#125;
        node(std::vector&amp;lt;arr&amp;gt; f1): f(f1) &amp;#123;&amp;#125;
        arr&amp;amp; operator[](int q) &amp;#123;
            return f[q];
        &amp;#125;
    &amp;#125;;
    auto getmax = [&amp;amp;](arr p, arr q) &amp;#123;
        arr res(p);
        if (q.size() &amp;gt; p.size())
            res.resize(q.size());
        for (int i = 0; i &amp;lt; (int)q.size(); ++i)
            res[i] = std::max(res[i], q[i]);
        return res;
    &amp;#125;;
    auto merge = [&amp;amp;](arr &amp;amp;p, arr &amp;amp;q) &amp;#123;
        arr res(p.size() + q.size() - 1), dp(p.size()), dq(q.size());
        std::adjacent_difference(p.begin(), p.end(), dp.begin());
        std::adjacent_difference(q.begin(), q.end(), dq.begin());
        std::merge(dp.begin() + 1, dp.end(), dq.begin() + 1, dq.end(), res.begin() + 1, std::greater&amp;lt;long long&amp;gt; ());
        res[0] = p[0] + q[0];
        std::partial_sum(res.begin(), res.end(), res.begin());
        return res;
    &amp;#125;; 
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        if ((int)g[x].size() == 1 &amp;amp;&amp;amp; x != 1) &amp;#123;
            f[x][1] = f[x][2] = f[x][3] = -inf;
            return;
        &amp;#125;
        int tot = (int)g[x].size() - (x != 1);
        std::vector&amp;lt;arr&amp;gt; w1(1), w2(1);
        for (auto [i, w] : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                w1.push_back(&amp;#123; f[i][0] + w, std::max(f[i][0], f[i][3] + w), f[i][2] + w &amp;#125;);
                w2.push_back(&amp;#123; -inf, f[i][1] + w &amp;#125;);
            &amp;#125;
        auto fun = [&amp;amp;](arr &amp;amp;p, arr &amp;amp;q) &amp;#123;
            arr res(p.size() + q.size() - 1, -inf);
            for (int ip = 0; ip &amp;lt; 2; ++ip)
                for (int iq = 0; iq &amp;lt; 2; ++iq) &amp;#123;
                    arr tp, tq;
                    for (int i = ip; i &amp;lt; (int)p.size(); i += 2)
                        tp.push_back(p[i]);
                    for (int i = iq; i &amp;lt; (int)q.size(); i += 2)
                        tq.push_back(q[i]);
                    auto t = merge(tp, tq);
                    for (int i = 0; i &amp;lt; (int)t.size(); ++i)
                        if (i * 2 + ip + iq &amp;lt; (int)res.size())
                            res[i * 2 + ip + iq] = std::max(res[i * 2 + ip + iq], t[i]);
                &amp;#125;
            return res;
        &amp;#125;; 
        std::function&amp;lt;node(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
            if (l == r)
                return node(&amp;#123; w1[l], w2[l] &amp;#125;);
            int mid = (l + r) &amp;gt;&amp;gt; 1;
            node t1(calc(l, mid)), t2(calc(mid + 1, r));
            return node(&amp;#123; getmax(fun(t1[0], t2[0]), fun(t1[1], t2[1])),
                          getmax(fun(t1[0], t2[1]), fun(t1[1], t2[0])) &amp;#125;);
        &amp;#125;;
        auto t(calc(1, tot));
        f[x][0] = t[0][tot], f[x][1] = t[0][tot - 1], f[x][2] = t[1][tot], f[x][3] = t[0][tot + 1];
        return;
    &amp;#125;;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; f[1][0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="DP 优化" />
        <updated>2025-07-09T13:59:41.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250707-1/</id>
        <title>决策单调性</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250707-1/"/>
        <content type="html">&lt;p&gt;等和线：在线段 &lt;span class=&#34;math inline&#34;&gt;\(AB\)&lt;/span&gt; 上取一点 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(\vec{AB}=\lambda \vec{AM}\)&lt;/span&gt;。在 &lt;span class=&#34;math inline&#34;&gt;\(AB\)&lt;/span&gt; 上方任取一点 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt;，则有 &lt;span class=&#34;math inline&#34;&gt;\(\vec{PM}=(1-\lambda) \vec{PA}+\lambda \vec{PB}\)&lt;/span&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;什么是-xdyd-dp&#34;&gt;什么是 xD/yD DP&lt;/h2&gt;
&lt;p&gt;即 DP 数组共有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 维，一次转移复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^y)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;为什么要给一句话单开一个标题&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;下面设通式 &lt;span class=&#34;math inline&#34;&gt;\(f_i=\max\left\{f_j+w(i,j)\right\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;单调队列优化-dp&#34;&gt;单调队列优化 DP&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 仅包含 &lt;span class=&#34;math inline&#34;&gt;\(i,j\)&lt;/span&gt; 的最高一次项。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果要求 &lt;span class=&#34;math inline&#34;&gt;\(j\in [1,i]\)&lt;/span&gt;，前缀最小值即可。&lt;/li&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的取值范围在到处乱动，可以写 DS =_=&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的取值范围 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 随着 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 增大而 &lt;span class=&#34;math inline&#34;&gt;\(l,r\)&lt;/span&gt; 都不减小，那么可以使用单调队列。&lt;/p&gt;
&lt;p&gt;顺带一提，和这种的单调队列用法相似的『单调栈』主要在斜优里出现。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体过程被 grizzly bear 吃掉了 &lt;img src=&#34;/em/eat.gif&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;例单调队列优化多重背包&#34;&gt;例：单调队列优化多重背包&lt;/h3&gt;
&lt;p&gt;朴素的多重背包式子是 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\max\left\{f_{i-1,j-k\times v_i}+k\times w_i\right\}\)&lt;/span&gt;，因为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 和整个式子无关，所以是关于 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的 1D/1D。&lt;/p&gt;
&lt;p&gt;为了套用单调队列，需要把查询的项变成连续的。发现 &lt;span class=&#34;math inline&#34;&gt;\(j-k\times v_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 关于 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 同余；且随着 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的增大，查询的位置不断移动 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt;。那么不妨把所有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 按照模 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 的余数分开做。具体地，不妨设 &lt;span class=&#34;math inline&#34;&gt;\(j=a\times v_i+b\)&lt;/span&gt;，将 &lt;span class=&#34;math inline&#34;&gt;\(j-k\times v_i\)&lt;/span&gt; 替换为余数写法，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j}&amp;amp;=\max\{f_{i-1,x\times v_i+b}+(a-x)\times v_i\}\\
&amp;amp;=\max\{f_{i-1,x\times v_i+b}-x\times v_i\}+a\times v_i
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;限制 &lt;span class=&#34;math inline&#34;&gt;\((a-x)\)&lt;/span&gt; 的取值不超过物品数，在不同模数下按 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 从小到大将 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 这一维进行单调队列优化即可。容易发现会不重不漏枚举所有体积；复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(nV)\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;斜率优化-dp&#34;&gt;斜率优化 DP&lt;/h2&gt;
&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 种含有 &lt;span class=&#34;math inline&#34;&gt;\(i,j\)&lt;/span&gt; 的交叉项，可以考虑斜优。&lt;/p&gt;
&lt;p&gt;具体过程，（如果你愿意），可以看这篇 &lt;a href=&#34;/20210214/&#34;&gt;四年半前的博客&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于符号等问题，分享一下我的做法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单调队列维护：适用于符号和右侧斜率要求单调性相反的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，讨论队头维护。不妨假设 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 为队头第二个元素，&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 为队头第一个元素。&lt;/li&gt;
&lt;li&gt;如果队头 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 需要被弹出，说明 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;；假设式子要求 max，则用 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 转移得到的答案 &amp;gt; 用 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 转移得到的答案。&lt;/li&gt;
&lt;li&gt;化式子，注意 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;gt;b\)&lt;/span&gt;；且负数乘除要变号。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后得到的式子中间的不等号就决定了需要维护的斜率单调情况。以此决定队尾维护方式即可。&lt;/p&gt;
&lt;strong&gt;注意这个式子的不等号体现的是弹出条件；保留条件和其相反&lt;/strong&gt; &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单调栈维护：适用于符号和右侧斜率要求单调性相同的情况；需要清楚，维护合法性、维护单调和取答案都在栈顶进行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，都知道要用单调栈了，说明斜优形式已经被化出来了；以此维护合法性即可。&lt;/li&gt;
&lt;li&gt;维护一个从底到顶，『优』得越来越小的斜率序列。找到从更优到更劣的临界点，更新答案。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;啊，果然高中文化学科是非常有用的。算是明白为什么我小学 / 初中基本没弄懂过斜优，而旁边的大佬已经在乱杀了 &lt;img src=&#34;/em/hsh.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;现在假设正在维护一个上凸包，可以进行一些思考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果查询区间不单增？&lt;/p&gt;
搞不了啊这个。废了。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询的斜率不单增？&lt;/p&gt;
写个二分 + 单调栈。参见 &lt;a href=&#34;https://www.luogu.com.cn/problem/P5785&#34;&gt;任务安排&lt;/a&gt;、&lt;a href=&#34;#例traka&#34;&gt;TRAKA&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加入斜率的位置不单增？&lt;/p&gt;
&lt;p&gt;李超 / CDQ / 平衡树。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;四边形不等式优化-dp&#34;&gt;四边形不等式优化 DP&lt;/h2&gt;
&lt;h3 id=&#34;关于四边形不等式&#34;&gt;关于四边形不等式&lt;/h3&gt;
&lt;p&gt;对于代价矩阵 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 和定义域内 &lt;span class=&#34;math inline&#34;&gt;\(\forall\,a\le b\le c\le d\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(w(a,d)+w(b,c)\ge w(a,c)+w(b,d)\)&lt;/span&gt;，认为 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 满足四边形不等式。简记为重叠大于交叉。&lt;/p&gt;
&lt;p&gt;命名来源是四边形对角线之和大于对边之和；将恒大于改为恒小于也能得到相似的性质。&lt;/p&gt;
&lt;p&gt;就会发现单调队列优化和斜优其实是四边形不等式的特化，导致它们可以少一个 log。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;性质&#34;&gt;性质&lt;/h3&gt;
&lt;p&gt;用于证明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于任意 &lt;span class=&#34;math inline&#34;&gt;\(c\le l\le r\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(w(l-c,r+c) + w(l,r)\le w(l-c,r)+ w(l,r+c)\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 满足四边形不等式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用于题目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性质一&lt;/strong&gt;：若 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 满足四边形不等式（或其反式），那么最优决策点 &lt;span class=&#34;math inline&#34;&gt;\(p_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 有单调关系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性质二&lt;/strong&gt;：当 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 变化时，每个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 带来贡献的相对大小 rank 不变。亦作：若 &lt;span class=&#34;math inline&#34;&gt;\(j_1\)&lt;/span&gt; 相对于 &lt;span class=&#34;math inline&#34;&gt;\(j_2\)&lt;/span&gt; 对 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 更优，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(j_1\)&lt;/span&gt; 相对于 &lt;span class=&#34;math inline&#34;&gt;\(j_2\)&lt;/span&gt; 对 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;\)&lt;/span&gt; 更优。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;在优化-dp-之前&#34;&gt;在优化 DP 之前&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先我必须要提一嘴。由于我第一次接触『四边形不等式』是在四年前，看到『石子合并的 &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 做法』时。然而，这一题的 DP 本身有一个特殊性质，即贡献是一个以决策点为极值的凸函数；这直接导致我误以为这是四边形不等式本身带来的性质，导致我在理解上浪费了很多时间。&lt;strong&gt;四边形不等式带来的性质，只有上述两条！&lt;/strong&gt;&lt;/p&gt;
当然这也告诉我们，如果你发现『贡献是一个以决策点为极值的凸函数』，你就可以用类似石子合并中的线性转移完成问题。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;『满足四边形不等式』并不能等价于『决策单调性』。决策单调性并不具备性质二。&lt;/p&gt;
&lt;p&gt;也就是说，如果只满足决策单调性，只有最优决策点是单调的，但贡献函数随着 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的变化，其形状会有很大的变动。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;优化-dp分治&#34;&gt;优化 DP：分治&lt;/h3&gt;
&lt;p&gt;主要适用于 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}=g_j+w(j,i)\)&lt;/span&gt; 的场景，其中 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 是与 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 无关的函数。&lt;/p&gt;
&lt;p&gt;对于分治范围 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 和其决策点范围 &lt;span class=&#34;math inline&#34;&gt;\([L_p,R_p]\)&lt;/span&gt;，首先把暴力 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 的决策点 &lt;span class=&#34;math inline&#34;&gt;\(p_{mid}\)&lt;/span&gt; 找出来。&lt;/p&gt;
&lt;p&gt;接着对于 &lt;span class=&#34;math inline&#34;&gt;\([l,mid)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((mid,R]\)&lt;/span&gt;，分别在 &lt;span class=&#34;math inline&#34;&gt;\([L_p,p_{mid}]\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\([p_{mid},R_p]\)&lt;/span&gt; 里找决策点（注意两边都是闭的）。递归地做。&lt;/p&gt;
&lt;p&gt;这时候你肯定就会怀疑了，主播主播，虽然你的区间每次在减半，但决策点范围并不是均分的，还会被共用，复杂度真的对吗？&lt;/p&gt;
&lt;p&gt;对的兄弟，对的。观察搜索树，你会发现虽然 &lt;span class=&#34;math inline&#34;&gt;\(p_{mid}\)&lt;/span&gt; 会被给两个儿子共用，但是在任何一层中，被重复经过的点只会出现在两个区间的交界处。也就是说每整层大概遍历 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt; 次。是不是很对了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;例yet-another-minimization-problem&#34;&gt;例：Yet Another Minimization Problem&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/868/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/868/F&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;我的天哪！是罕见的四级标题！&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;笑点解析：这个人因为懒得写 CSS 所以只写了经常用的 h2 和 h3 的样式，现在迫不得已用 h4 被倒逼去写了 h4 的 CSS。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;发现 &lt;span class=&#34;math inline&#34;&gt;\(k\le 20\)&lt;/span&gt;，所以可以不用写 WQS 二分。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 段分在 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 处的代价，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\min\{f_{i-1,l}+w(l+1,j)\}\)&lt;/span&gt;，分治解决。&lt;/p&gt;
&lt;p&gt;接着发现问题：&lt;span class=&#34;math inline&#34;&gt;\(w(l+1,j)\)&lt;/span&gt; 并不能很快地求出来；然后注意到这个代价的形式很莫队（其实在看到这个题的时候就会有莫队的想法），考虑使用莫队移动端点的方式解决问题。由于分治中查询的区间两端单增，每层的总移动次数是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的，总复杂度就是 &lt;span class=&#34;math inline&#34;&gt;\(O(nk\log n)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e12;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;long long&amp;gt; cnt(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; p(k + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(k + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf));
    auto w = [&amp;amp;](int l, int r) &amp;#123;
        static int L = 1, R = 0;
        static long long res = 0ll;
        for (; L &amp;gt; l; --L, res -= cnt[a[L]] * (cnt[a[L]] - 1) / 2, ++cnt[a[L]], res += cnt[a[L]] * (cnt[a[L]] - 1) / 2);
        for (; R &amp;gt; r; res -= cnt[a[R]] * (cnt[a[R]] - 1) / 2, --cnt[a[R]], res += cnt[a[R]] * (cnt[a[R]] - 1) / 2, --R);
        for (; R &amp;lt; r; ++R, res -= cnt[a[R]] * (cnt[a[R]] - 1) / 2, ++cnt[a[R]], res += cnt[a[R]] * (cnt[a[R]] - 1) / 2);
        for (; L &amp;lt; l; res -= cnt[a[L]] * (cnt[a[L]] - 1) / 2, --cnt[a[L]], res += cnt[a[L]] * (cnt[a[L]] - 1) / 2, ++L);
        return res;
    &amp;#125;;
    f[0][0] = 0ll;
    for (int t = 1; t &amp;lt;= k; ++t) &amp;#123;
        std::function&amp;lt;void(int, int, int, int)&amp;gt; calc = [&amp;amp;](int l, int r, int lp, int rp) &amp;#123;
            if (l &amp;gt; r)
                return;
            if (l == r) &amp;#123;
                for (int i = lp; i &amp;lt;= rp &amp;amp;&amp;amp; i &amp;lt; l; ++i)
                    if (f[t - 1][i] + w(i + 1, l) &amp;lt; f[t][l])
                        f[t][l] = f[t - 1][i] + w(i + 1, l), p[t][l] = i;
                return;
            &amp;#125;
            int mid = (l + r) &amp;gt;&amp;gt; 1;
            for (int i = lp; i &amp;lt;= rp &amp;amp;&amp;amp; i &amp;lt; mid; ++i)
                if (f[t - 1][i] + w(i + 1, mid) &amp;lt; f[t][mid])
                    f[t][mid] = f[t - 1][i] + w(i + 1, mid), p[t][mid] = i;
            calc(l, mid - 1, lp, p[t][mid]), calc(mid + 1, r, p[t][mid], rp);
            return;
        &amp;#125;;
        calc(1, n, 0, n - 1);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[k][n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;优化-dp单调数据结构&#34;&gt;优化 DP：单调数据结构&lt;/h3&gt;
&lt;p&gt;有的时候会出现 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}=f_{j}+w(j,i)\)&lt;/span&gt; 的结构，也就是 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的取值与自己有关。&lt;/p&gt;
&lt;p&gt;这种情况我们通常选择填表法，求出 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 后找到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 是哪些点的最优决策（那么显然这些点是一段连续区间）。用 &lt;span class=&#34;math inline&#34;&gt;\((i,l_i,r_i)\)&lt;/span&gt; 这个三元组表示当前算出来的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 管辖的范围。&lt;/p&gt;
&lt;p&gt;这是什么意思呢？结合性质二，每当我们手上拿到一个新的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，那么推出来其管辖范围右端点就会是 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;。接着想办法找到左端点，同样利用性质二，二分出最靠左的一个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，满足之前算出来的决策点没有 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 优，那么 &lt;span class=&#34;math inline&#34;&gt;\([j,n]\)&lt;/span&gt; 就是当前条件下 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的管辖范围。&lt;/p&gt;
&lt;p&gt;在队列里加入当前版本的整个三元组序列就可以方便地完成这个过程。为寻找当前元素的答案，需要将队头上，管辖范围完全早于当前元素的弹出去。由于维护的过程和单调队列很像，所以也有人直接把这里的队列叫单调队列。&lt;/p&gt;
&lt;p&gt;视题目不同，也可能用到单调栈，也有可能不用二分（例如满足前两种特化的情况）。goto &lt;a href=&#34;/20250715/#a---yakiniku-restaurants&#34;&gt;Yakiniku Restaurants&lt;/a&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;例诗人小g&#34;&gt;例：诗人小G&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1912&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1912&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;我觉得给出字符串内容的唯一价值是让出题人欣赏白日依山尽&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{j}\)&lt;/span&gt; 为某一行分在第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 句处的代价，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{j}=\min\limits_{k&amp;lt;j}\left\{f_{k}+|(s_j-s_k+j-k-1)-L|^P\right\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么就可以考虑单调队列 + 二分了。需要注意无穷大之间的大小比较，我写这个写红温了，直接用指数项相对大小来代替了，似乎可以过。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1000000000000000001ll;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P1912_2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, l, p;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; l &amp;gt;&amp;gt; p;
        long long to;
        switch (p) &amp;#123; // 会有精度问题
        case 1:
            to = 1e18;
            break;
        case 2:
            to = 1e9;
            break;
        case 3:
            to = 1e6;
            break;
        case 4:
            to = 31622;
            break;
        case 5:
            to = 3981;
            break;
        case 6:
            to = 1e3;
            break;
        case 7:
            to = 372;
            break;
        case 8:
            to = 177;
            break;
        case 9:
            to = 100;
            break;
        default:
            to = 63;
            break;
        &amp;#125;
        std::vector&amp;lt;int&amp;gt; s(n + 1);
        std::vector&amp;lt;std::string&amp;gt; a(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; a[i], s[i] = (int)a[i].length();
        std::partial_sum(s.begin() + 1, s.end(), s.begin() + 1);
        struct node &amp;#123; int i, l, r; &amp;#125;;
        std::vector&amp;lt;node&amp;gt; q(n + 1);
        int h = 0, t = -1;
        q[++t] = &amp;#123; 0, 1, n &amp;#125;;
        auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
            if (x &amp;gt; to)
                return inf;
            auto res(1ll);
            for (; y--; res *= x);
            return res;
        &amp;#125;;
        std::vector&amp;lt;int&amp;gt; pre(n + 1);
        std::vector&amp;lt;long long&amp;gt; f(n + 1);
        auto calc = [&amp;amp;](int k, int j) &amp;#123;
            return std::min(inf, f[k] + qkp(std::abs(s[j] - s[k] + j - k - 1 - l), p));
        &amp;#125;;
        auto less = [&amp;amp;](int k1, int j1, int k2, int j2) &amp;#123;
            auto t1(calc(k1, j1)), t2(calc(k2, j2));
            if (t1 == inf &amp;amp;&amp;amp; t2 == inf)
                return std::abs(s[j1] - s[k1] + j1 - k1 - 1 - l) &amp;lt; std::abs(s[j2] - s[k2] + j2 - k2 - 1 - l);
            return t1 &amp;lt; t2;
        &amp;#125;;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (; h &amp;lt;= t &amp;amp;&amp;amp; q[h].r &amp;lt; i; ++h);
            f[i] = calc(q[h].i, i), pre[i] = q[h].i;
            for (; h &amp;lt;= t &amp;amp;&amp;amp; q[t].l &amp;gt; i &amp;amp;&amp;amp; less(i, q[t].l, q[t].i, q[t].l); --t)
                q[t - 1].r = q[t].r;
            for (int l = std::max(q[t].l, i + 1), r = q[t].r, mid; l &amp;lt;= r; ) &amp;#123;
                mid = (l + r) &amp;gt;&amp;gt; 1;
                if (less(i, mid, q[t].i, mid))
                    r = q[t].r = mid - 1, q[t + 1] = &amp;#123; i, mid, n &amp;#125;;
                else
                    l = mid + 1;
            &amp;#125;
            if (q[t + 1].i == i)
                ++t;
        &amp;#125;
        if (f[n] &amp;gt;= inf)
            std::cout &amp;lt;&amp;lt; &amp;quot;Too hard to arrange&amp;quot; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        else &amp;#123;
            std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            std::function&amp;lt;void(int)&amp;gt; print = [&amp;amp;](int x) &amp;#123;
                if (x == 0)
                    return;
                print(pre[x]);
                for (int i = pre[x] + 1; i &amp;lt;= x; ++i) &amp;#123;
                    std::cout &amp;lt;&amp;lt; a[i];
                    if (i != x)
                        std::cout &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
                &amp;#125;
                std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
                return;
            &amp;#125;;
            print(n);
        &amp;#125;
        std::cout &amp;lt;&amp;lt; &amp;quot;--------------------&amp;quot;;
        if (T)
            std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;需要注意，本题也可以再加一个『恰好分 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 段』的限制，直接在外层套一个 WQS 二分就好了，参见 &lt;a href=&#34;https://www.luogu.com.cn/problem/P6246&#34;&gt;邮局 加强版 加强版&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;d1d-dp-优化&#34;&gt;2D/1D DP 优化&lt;/h3&gt;
&lt;p&gt;若存在 &lt;span class=&#34;math inline&#34;&gt;\(f(i,j)=\min\limits_{k&amp;lt;j} f(i-1,k)+w(k+1,j)\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 满足四边形不等式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(p(i,j)\)&lt;/span&gt; 为最优决策点，那么有 &lt;span class=&#34;math inline&#34;&gt;\(p(i,j)\le p(i,j+1)\le p(i+1,j+1)\)&lt;/span&gt;，亦作 &lt;span class=&#34;math inline&#34;&gt;\(p(i,j-1)\le p(i,j)\le p(i+1,j)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;此时可以 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt; 解决问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image.png&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 固定，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)\)&lt;/span&gt; 为凸函数。（例：邮局 加强版 加强版）&lt;/p&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250707/&#34;&gt;DP 凸优化&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="DP" />
        <category term="DP 优化" />
        <updated>2025-07-07T13:23:01.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250707/</id>
        <title>DP 凸优化</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250707/"/>
        <content type="html">&lt;p&gt;袜，这篇文章一下子创建了三个新 tag。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;什么是凸函数&#34;&gt;什么是凸函数&lt;/h2&gt;
&lt;h3 id=&#34;定义&#34;&gt;定义&lt;/h3&gt;
&lt;p&gt;在信息学中研究的凸函数大抵是只在正整数域上有定义的，所以只能直接摒弃导函数的概念了。&lt;/p&gt;
&lt;p&gt;若斜率递增，换言之，差分数组递增，认为函数是凸的（好反直觉）。&lt;/p&gt;
&lt;p&gt;或者看看符号化的定义：若对于任意 &lt;span class=&#34;math inline&#34;&gt;\(\lambda\in[0,1]\)&lt;/span&gt;，函数 &lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; 均满足：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(\lambda x+(1-\lambda) y)\le \lambda f(x)+(1-\lambda) f(y).
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;或等价地：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(x)-f(x - 1)\le f(x + 1) - f(x)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;那么认为 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 是凸函数。&lt;/p&gt;
&lt;p&gt;因为凹凸在性质上没区别，所以 &lt;strong&gt;下文施行暴政，将凹函数和凸函数统称为凸函数&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;判定&#34;&gt;判定&lt;/h3&gt;
&lt;p&gt;对于具体情境下的问题，怎么判断 DP 数组是否关于其某一维为凸函数？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相信相信的力量（最常用）。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于分段问题，证明分出来的每一段满足四边形不等式。&lt;/p&gt;
&lt;em&gt;值得一提的是，数学上不认为满足四边形不等式能够推出函数为凸。但这是信息学.jpg&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其由两个凸函数线性相加得到：&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(\forall\, \lambda,\mu\ge 0\)&lt;/span&gt; 和凸函数 &lt;span class=&#34;math inline&#34;&gt;\(f,g\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(h=\lambda f+\mu g\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 为凸函数。&lt;/p&gt;
此外，此时 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 的差分数组和 &lt;span class=&#34;math inline&#34;&gt;\(f,g\)&lt;/span&gt; 差分数组也满足上述关系。&lt;/li&gt;
&lt;li&gt;其是两个凸函数的 &lt;a href=&#34;#闵可夫斯基和&#34;&gt;闵可夫斯基和&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其由两个凸函数线性 max 得到。&lt;/p&gt;
&lt;p&gt;对于两个凸函数的线性 min，一般不是凸函数，甚至可能是凹的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;性质&#34;&gt;性质&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最值为唯一极值。&lt;/li&gt;
&lt;li&gt;斜率 / 差分数组具有单调性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在解题中主要用到的大概就是上面两条。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;wqs-二分&#34;&gt;WQS 二分&lt;/h2&gt;
&lt;h3 id=&#34;主要任务&#34;&gt;主要任务&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;例：把 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 分为恰好 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 段，每段的代价为 &lt;span class=&#34;math inline&#34;&gt;\(sum^2+c\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 为给定的常数），问最小代价。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^5,a_i\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果对段数没有要求，可以用斜优 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 做。&lt;/p&gt;
&lt;p&gt;加上了 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的限制，DP 变成二维的，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处分第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 段，可以在第一维斜率优化，做到 &lt;span class=&#34;math inline&#34;&gt;\(O(nk)\)&lt;/span&gt;；亦或发现 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 有决策单调性，然后四边形不等式优化到 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们发现 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 关于 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 这一维是凸的（而非上文的 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt;），故将 &lt;span class=&#34;math inline&#34;&gt;\(f(n,j)\)&lt;/span&gt; 关于 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的函数提取出来（记为 &lt;span class=&#34;math inline&#34;&gt;\(f_n(j)\)&lt;/span&gt;）。发现只有最高点是可以一次斜优快速求出来的，故可以认为在当前复杂度限制下，整个函数除了最高点以外都是未知的（注意可以在 DP 时记录极值点的横坐标，即分了几段）。&lt;/p&gt;
&lt;p&gt;我们给每个 &lt;span class=&#34;math inline&#34;&gt;\(f_n(j)\)&lt;/span&gt; 加上 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\cdot j\)&lt;/span&gt;（在本题中即将 &lt;span class=&#34;math inline&#34;&gt;\(c\gets c+k\)&lt;/span&gt;），勉强可以认为 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\cdot j\)&lt;/span&gt; 是凸的，所以新函数 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;_n(j)\)&lt;/span&gt; 也是凸的。若 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;gt;0\)&lt;/span&gt;，可以感受到极值点向左偏移，且随着 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的增大，极值点不会右移；&lt;span class=&#34;math inline&#34;&gt;\(k&amp;lt;0\)&lt;/span&gt; 时同理。&lt;/p&gt;
&lt;p&gt;结合几何观点，在 &lt;span class=&#34;math inline&#34;&gt;\(f_n\)&lt;/span&gt; 上的极值点可以用斜率为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的直线切到；而加上 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\cdot j\)&lt;/span&gt; 的过程，其实就是切线斜率减去 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; 的过程。相当于令切线斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-\alpha\)&lt;/span&gt;，看看能切到哪里。&lt;/p&gt;
&lt;p&gt;故可以二分一个合适的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，使得极值点的横坐标为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。此时 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;_n(k)-\alpha\cdot k\)&lt;/span&gt; 即为待求。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;WQS 二分参与的问题一般以如下形式呈现：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定序列，将其恰好分为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 段 / 恰好选 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个，求最大 / 最小代价。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;题目要求最大 / 最小值一般能够反映函数的凹凸性，可以根据这一点来猜。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;细节处理&#34;&gt;细节处理&lt;/h3&gt;
&lt;p&gt;考虑如下凸函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显然对于『凸出来』的点（即图中除了 &lt;span class=&#34;math inline&#34;&gt;\(E,H\)&lt;/span&gt; 以外的点），能切到的直线斜率为一个范围；而位于直线上的点（途中 &lt;span class=&#34;math inline&#34;&gt;\(E,H\)&lt;/span&gt;），能切到的直线斜率更是定死了。所以这要求你的二分精度需要略高一点。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(E\)&lt;/span&gt;（或 &lt;span class=&#34;math inline&#34;&gt;\(H\)&lt;/span&gt;），不能找到只过它一点的切线。根据 DP 的写法，记录的横坐标可能是最小的 &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt;，也可能是最大的 &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt;，此时你可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同时记录最小和最大的横坐标，看看 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 在不在中间。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题目要求最大代价时，记录最大横坐标，二分到一个极值点 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;#39;\ge k\)&lt;/span&gt; 时，显然 &lt;span class=&#34;math inline&#34;&gt;\(\alpha&amp;#39;\ge \alpha\)&lt;/span&gt;，用 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;_n(k&amp;#39;)-\alpha&amp;#39;\cdot k\)&lt;/span&gt; 更新答案（是赋值而不是取最值）；求最小代价时同理。&lt;/p&gt;
&lt;p&gt;主要是需要记住斜率是 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; 的相反数，&lt;del&gt;实在搞不清对应关系可以都试一试&lt;/del&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例种树&#34;&gt;例：种树&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1484&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1484&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，函数是凸的——感性理解即可。&lt;/p&gt;
&lt;p&gt;接着，要求的是 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt; 时的最值。分为两种情况：&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 是否右于原函数极值点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 右于原函数极值点，则原函数极值点为答案。&lt;/li&gt;
&lt;li&gt;否则，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 为答案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好消息是整数域上一定有解（最后答案为整、倒推即可），所以不用打浮点数二分了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 1e6;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    auto calc = [&amp;amp;](int c) &amp;#123;
        std::vector&amp;lt;std::pair&amp;lt;long long, int&amp;gt; &amp;gt; f(n + 1);
        auto mx = f.front();
        auto upd = [&amp;amp;](auto &amp;amp;x, auto y) &amp;#123;
            if (y.first &amp;gt; x.first || (y.first == x.first &amp;amp;&amp;amp; y.second &amp;lt; x.second))
                x = y;
            return;
        &amp;#125;;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            f[i].first = mx.first + a[i] + c;
            f[i].second = mx.second + 1;
            upd(mx, f[i - 1]);
        &amp;#125;
        upd(mx, f[n]);
        return mx;
    &amp;#125;;
    auto t(calc(0));
    if (t.second &amp;lt;= k) &amp;#123;
        std::cout &amp;lt;&amp;lt; t.first &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    auto res(-inf);
    for (int l = -lim, r = lim, mid; l &amp;lt;= r; ) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        auto t = calc(mid);
        if (t.second &amp;lt;= k)
            res = t.first - (long long)mid * k, l = mid + 1;
        else
            r = mid - 1;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例raper&#34;&gt;例：Raper&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4694&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4694&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给所有光盘附一个奖励 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt;，进行 WQS 二分。&lt;/p&gt;
&lt;p&gt;然后内层就和 &lt;a href=&#34;#例序列-sequence&#34;&gt;sequence&lt;/a&gt; 差得不是特别多，所以考虑反悔贪心。（？）&lt;/p&gt;
&lt;p&gt;把路过的 &lt;span class=&#34;math inline&#34;&gt;\(-a_j\)&lt;/span&gt; 丢到大根堆里，尝试和 &lt;span class=&#34;math inline&#34;&gt;\(b_i\)&lt;/span&gt; 配对。如果 &lt;span class=&#34;math inline&#34;&gt;\(mid-a_i-b_i\ge 0\)&lt;/span&gt; 那么暂时配对，顺便把 &lt;span class=&#34;math inline&#34;&gt;\(b_i-mid\)&lt;/span&gt; 丢进去用于反悔，若 &lt;span class=&#34;math inline&#34;&gt;\(b_{i&amp;#39;}\)&lt;/span&gt; 选中了 &lt;span class=&#34;math inline&#34;&gt;\(b_i-mid\)&lt;/span&gt; 说明反悔，将 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(b_{i&amp;#39;}\)&lt;/span&gt; 配对。&lt;/p&gt;
&lt;p&gt;贪心的时候需要记录已经配的对数，优先队列中需要对 &lt;span class=&#34;math inline&#34;&gt;\(-a_j\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b_i-mid\)&lt;/span&gt; 打标记进行区分，匹配到前者时才增加成功对数。&lt;/p&gt;
&lt;p&gt;发现整数域上仍然必有解（答案为整，倒推），不用打浮点数二分 neiher.&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 2e9 + 5;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; b[i];
    auto calc = [&amp;amp;](long long mid) &amp;#123;
        std::priority_queue&amp;lt;std::pair&amp;lt;long long, int&amp;gt; &amp;gt; q;
        int cnt = 0;
        auto res(0ll);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            q.emplace(-a[i], 1);
            auto [v, ty] = q.top();
            if (mid + v - b[i] &amp;gt;= 0) &amp;#123;
                q.pop(), cnt += ty;
                res += mid + v - b[i], q.emplace(b[i] - mid, 0);
            &amp;#125;
        &amp;#125;
        return std::make_pair(cnt, res);
    &amp;#125;;
    auto res(inf);
    for (long long l = 1ll, r = inf, mid; l &amp;lt;= r; ) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        auto t(calc(mid));
        if (t.first &amp;gt;= k)
            r = mid - 1, res = -(t.second - k * mid);
        else
            l = mid + 1;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;区间分拆问题&#34;&gt;区间分拆问题&lt;/h3&gt;
&lt;p&gt;目标：尝试将 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 分割成恰好 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 段，定义 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 为将 &lt;span class=&#34;math inline&#34;&gt;\([i,j]\)&lt;/span&gt; 作为一段的代价，求代价最值。其中 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 满足四边形不等式。&lt;/p&gt;
&lt;p&gt;不妨设求最小代价。定义 &lt;span class=&#34;math inline&#34;&gt;\(f(i,j)\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处分第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 段，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(i,j)=\min(f(i-1,p-1)+w(p,j)).
\]&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有定理：若 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 满足四边形不等式，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f(i-1,j)\le f(i,j)\le f(i,j+1)\)&lt;/span&gt;，从 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 定义出发很好感性理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么可以从这一点出发，&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 这一维就可以被摊掉，做到 &lt;span class=&#34;math inline&#34;&gt;\(O(n(n+m))\)&lt;/span&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有定理：若 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 满足四边形不等式，那么 &lt;span class=&#34;math inline&#34;&gt;\(f_i(j)\)&lt;/span&gt; 是凸函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那很好了。直接冲刺 WQS 即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;闵可夫斯基和&#34;&gt;闵可夫斯基和&lt;/h2&gt;
&lt;p&gt;给定两个凸函数（当然是指 OI 中那种长得很直的函数），将它们的『边』拆下来过后，以某种方式拼在一起，使得最后得到一个新的凸函数。&lt;/p&gt;
&lt;p&gt;按每条『边』的斜率归并一下就可以得到，显然答案存在且唯一，这个过程被称为闵可夫斯基和。可以发现这是一种最值 - 加卷积。&lt;/p&gt;
&lt;p&gt;假设我们要求的 DP 数组是两个已知的子数组以类似的方法卷起来的，最后要求完整的 DP 数组（而非 WQS 中的单点值），就可以考虑闵可夫斯基和。&lt;/p&gt;
&lt;p&gt;发现这个结构是很适合归并的，使用归并要求状态中含有版本维、因变量维。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例its-mooin-time-p&#34;&gt;例：It&#39;s Mooin&#39; Time P&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11459&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11459&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义 &lt;span class=&#34;math inline&#34;&gt;\(w_i\)&lt;/span&gt; 为将 &lt;span class=&#34;math inline&#34;&gt;\([i,i+L)\)&lt;/span&gt; 改为 &lt;code&gt;MOO&lt;/code&gt; 的代价，问题转化为选取 &lt;span class=&#34;math inline&#34;&gt;\(1\sim \frac nL\)&lt;/span&gt; 个不重区间的最小代价和。&lt;/p&gt;
&lt;p&gt;尝试归并，每次将 &lt;span class=&#34;math inline&#34;&gt;\([l,mid]\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((mid, r]\)&lt;/span&gt; 卷起来。但是会有一点问题：如果恰好有区间卡在中间呢？&lt;/p&gt;
&lt;p&gt;可以令 &lt;span class=&#34;math inline&#34;&gt;\(f_{l,r,0/1/2,0/1/2}(i)\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 内选了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个 &lt;code&gt;MOO&lt;/code&gt;，且两侧最远的被选点距离端点为 &lt;span class=&#34;math inline&#34;&gt;\(0/1/\ge 2\)&lt;/span&gt; 的 DP 值。然后可以进行相应的讨论、平移、闵可夫斯基和，最后将所有情况线性取 max 得到这一层的答案，容易发现得到的答案也是凸的。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int L;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; L &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;char&amp;gt; t(n + 1);
    std::vector&amp;lt;long long&amp;gt; w(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 1; i &amp;lt;= n - L + 1; ++i) &amp;#123;
        w[i] = a[i] * (t[i] != &amp;#39;M&amp;#39;);
        for (int j = i + 1; j &amp;lt; i + L; ++j)
            w[i] += a[j] * (t[j] != &amp;#39;O&amp;#39;);
        // printf(&amp;quot;[%d, %d]: %lld\n&amp;quot;, i, i + L - 1, w[i]);
    &amp;#125;
    if (L == 1) &amp;#123;
        std::sort(w.begin() + 1, w.end());
        auto s(0ll);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            s += w[i];
            std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
        return 0;
    &amp;#125;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    struct node &amp;#123;
        crr f;
        node(int len): f(L, brr(L, arr(len, inf))) &amp;#123;
            for (int i = 0; i &amp;lt; L; ++i)
                for (int j = 0; j &amp;lt; L; ++j)
                    f[i][j][0] = 0ll;
            return;
        &amp;#125;
        brr&amp;amp; operator[] (int q) &amp;#123; return f[q]; &amp;#125;
    &amp;#125;;
    auto upd = [&amp;amp;](arr &amp;amp;x, arr y) &amp;#123;
        if (x.size() &amp;lt; y.size())
            x.resize(y.size(), inf);
        for (int i = 0; i &amp;lt; (int)y.size(); ++i)
            x[i] = std::min(x[i], y[i]);
        return;
    &amp;#125;;
    auto merge = [&amp;amp;](arr l, arr r) &amp;#123;
        arr out((int)(l.size() + r.size()) - 1), dl(l.size()), dr(r.size());
        for (int i = 1; i &amp;lt; (int)l.size(); ++i)
            dl[i] = l[i] - l[i - 1];
        for (int i = 1; i &amp;lt; (int)r.size(); ++i)
            dr[i] = r[i] - r[i - 1];
        std::merge(dl.begin() + 1, dl.end(), dr.begin() + 1, dr.end(), out.begin() + 1);
        out[0] = l[0] + r[0];
        std::partial_sum(out.begin(), out.end(), out.begin());
        return out;
    &amp;#125;;
    std::function&amp;lt;node(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (r - l + 1 &amp;lt; 2 * L) &amp;#123;
            node res(1);
            for (int ll = 0; ll &amp;lt; L; ++ll)
                for (int rr = 0; rr &amp;lt; L; ++rr)
                    if (l + ll &amp;lt;= r - rr - L + 1) &amp;#123;
                        res[ll][rr].resize(2, inf);
                        for (int i = l + ll; i &amp;lt;= r - rr - L + 1; ++i)
                            res[ll][rr][1] = std::min(res[ll][rr][1], w[i]);
                        // printf(&amp;quot;[%d, %d]: (%d, %d) = %lld\n&amp;quot;, l, r, ll, rr, res[ll][rr][1]);
                    &amp;#125;
            // for (int i = 0; i &amp;lt; L; ++i)
            //     if (l + i + L - 1 &amp;lt;= r) &amp;#123;
            //         printf(&amp;quot;[%d, %d]: (%d, %d) = %lld\n&amp;quot;, l, r, i, r - (l + i + L - 1), w[l + i]);
            //         res[i][r - (l + i + L - 1)].emplace_back(w[l + i]);
            //     &amp;#125;
            return res;
        &amp;#125;   
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        node tl(calc(l, mid)), tr(calc(mid + 1, r)), res((r - l + 1) / L + 1);
        for (int ll = 0; ll &amp;lt; L; ++ll)
            for (int rr = 0; rr &amp;lt; L; ++rr)
                res[ll][rr] = merge(tl[ll][0], tr[0][rr]);
        for (int ll = 0; ll &amp;lt; L; ++ll)
            for (int rr = 0; rr &amp;lt; L; ++rr)
                for (int i = 1; i &amp;lt; L &amp;amp;&amp;amp; i &amp;lt; mid; ++i)
                    upd(res[ll][rr], merge(merge(tl[ll][i], tr[L - i][rr]), &amp;#123; 0, w[mid - i + 1] &amp;#125;));
        for (int ll = 0; ll &amp;lt; L; ++ll)
            for (int rr = L - 1; rr; --rr)
                upd(res[ll][rr - 1], res[ll][rr]);
        for (int rr = 0; rr &amp;lt; L; ++rr)
            for (int ll = L - 1; ll; --ll)
                upd(res[ll - 1][rr], res[ll][rr]);
        // for (int i = 0; i &amp;lt; L; ++i)
        //     for (int j = 0; j &amp;lt; L; ++j) &amp;#123;
        //         printf(&amp;quot;  (%d, %d): &amp;quot;, i, j);
        //         for (auto p : res[i][j])
        //             printf(&amp;quot;%lld &amp;quot;, p);
        //         puts(&amp;quot;&amp;quot;);
        //     &amp;#125;
        return res;
    &amp;#125;;
    auto res(calc(1, n));
    for (int i = 1; i &amp;lt;= n / L; ++i)
        std::cout &amp;lt;&amp;lt; res[0][0][i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例假人&#34;&gt;例：假人&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/problem/47728&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/problem/47728&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 组选完占了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 体积的最大价值。那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\max\{f_{i-1,k}+a_{i,j-k}\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;袜，这个东西好凸的样子！啊？居然不是凸的？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;事实上，有结论：若干个体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim 4\)&lt;/span&gt; 的物品做背包，可以凑出值域内任意 &lt;span class=&#34;math inline&#34;&gt;\(24\)&lt;/span&gt; 的倍数。所以先把体积全部 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，然后就可以得到体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim 4\)&lt;/span&gt; 的物品。然后会发现他们按照模 &lt;span class=&#34;math inline&#34;&gt;\(12\)&lt;/span&gt; 的余数分别是凸的。&lt;/p&gt;
&lt;p&gt;能感受到恶意了。然后就可以枚举体积，再闵可夫斯基和了。同样需要在状态中引入作为版本号的 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 维，显然因变量是体积、版本号是组数。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;fake2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; siz(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; siz[i], m += siz[i];
        a[i].resize(siz[i] + 1);
        for (int j = 1; j &amp;lt;= siz[i]; ++j)
            std::cin &amp;gt;&amp;gt; a[i][j];
    &amp;#125;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    struct node &amp;#123;
        std::vector&amp;lt;arr&amp;gt; f;
        node(): f(12) &amp;#123;&amp;#125;
        arr &amp;amp;operator[] (int q) &amp;#123;
            return f[q];
        &amp;#125;
    &amp;#125;;
    auto merge = [&amp;amp;](arr &amp;amp;p, arr &amp;amp;q) &amp;#123;
        arr res((int)(p.size() + q.size()) - 1), dp(p.size()), dq(q.size());
        std::adjacent_difference(p.begin(), p.end(), dp.begin());
        std::adjacent_difference(q.begin(), q.end(), dq.begin());
        std::merge(dp.begin() + 1, dp.end(), dq.begin() + 1, dq.end(), res.begin() + 1, std::greater&amp;lt;long long&amp;gt; ());
        res[0] = p[0] + q[0];
        std::partial_sum(res.begin(), res.end(), res.begin());
        return res;
    &amp;#125;;
    auto upd = [&amp;amp;](arr y, arr &amp;amp;x, int tag) &amp;#123;
        if (tag)
            y.insert(y.begin(), -inf);
        if (y.size() &amp;gt; x.size())
            x.resize(y.size(), -inf);
        for (int i = 0; i &amp;lt; (int)y.size(); ++i)
            x[i] = std::max(x[i], y[i]);
        return;
    &amp;#125;;
    std::function&amp;lt;node(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (l == r) &amp;#123;
            node res;
            for (int i = 1; i &amp;lt;= siz[l]; ++i)
                res[i - 1].push_back(a[l][i]);
            return res;
        &amp;#125;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        node tl(calc(l, mid)), tr(calc(mid + 1, r)), res;
        for (int p = 0; p &amp;lt; 12; ++p)
            for (int q = 0; q &amp;lt; 12; ++q)
                if (!tl[p].empty() &amp;amp;&amp;amp; !tr[q].empty())
                    upd(merge(tl[p], tr[q]), res[(p + q) % 12], p + q &amp;gt;= 12);
        return res;
    &amp;#125;;
    auto res(calc(1, n));
    for (int i = 0; i &amp;lt;= m - n; ++i)
        std::cout &amp;lt;&amp;lt; res[i % 12][i / 12] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;slope-trick&#34;&gt;slope trick&lt;/h2&gt;
&lt;p&gt;对于一个 OI 中的凸函数，它是由一些斜率单调的线段拼接成的图形。&lt;/p&gt;
&lt;p&gt;在这个前提下，发现可以用整个函数的左 / 右端点值（截距）和 &lt;span class=&#34;math inline&#34;&gt;\((n-1)\)&lt;/span&gt; 个斜率 / 差分信息描述函数。而这有时比直接维护 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点值有着更优美的性质，唤其为 slope trick。&lt;/p&gt;
&lt;p&gt;例如，关于斜率序列，如果定义域不大，可以直接维护；如果它的变化次数不多，可以利用它的单调性质，用单调数据结构维护；如果它的值域很小，可以直接维护拐点。&lt;/p&gt;
&lt;p&gt;注意前两种方法一般关注横坐标对应的函数值，所以自变量一般是和操作次数一类有关的；而这里关注函数最值而弱化了具体横坐标，操作次数一般会作为待最优化的因变量，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我想要将数列通过若干次单点修改使序列单调，但不关心序列最终形态，问最小操作次数。&lt;/li&gt;
&lt;li&gt;我想要让树上所有叶子到根的路径边权和相等，但不关心这个值是多少，问最小操作次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面依次解决上述问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例序列-sequence&#34;&gt;例：序列 sequence&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4597&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4597&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暴力地，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 最终被修改为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，容易写出 DP 式子 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\min\limits_{k\le j}\{f_{i-1,k}\}+|a_i-j|\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后就会发现它的定义域实在是太大了！那如果关注斜率的变化情况呢？&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1}(k)\)&lt;/span&gt; 的极值点为 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt;，分类讨论拆绝对值和 min：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j\le a_i\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=\min\limits_{k\le j}\{f_{i-1}(k)\}+a_i - j\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j &amp;lt; k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=f_{i-1}(j)+a_i-j\)&lt;/span&gt;，斜率相对于 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1}(j)\)&lt;/span&gt; 整体减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;del&gt;我就说导数没白学吧&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j \ge k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=f_{i-1}(k_m)+a_i-j\)&lt;/span&gt;，斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j &amp;gt; a_i\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=\min\limits_{k\le j}\{f_{i-1}(k)\}+j-a_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j &amp;lt; k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=f_{i-1}(j)+j-a_i\)&lt;/span&gt;，斜率相对于 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1}(j)\)&lt;/span&gt; 整体加 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j\ge k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j) = f_{i-1}(k_m)+j-a_i\)&lt;/span&gt;，斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果现在我们掏一个支持区间加斜率、区间推平斜率且维护区间函数最值点的数据结构，那就太逆天了。一个经典的解决方案是用堆维护线段斜率的差分（也就是差分的差分）。&lt;/p&gt;
&lt;p&gt;发现整体修改次数是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的，且如果只看比 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 更左的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;（更靠右的已经与极值无关所以不用维护），那么就只需要维护区间减法。&lt;/p&gt;
&lt;p&gt;如果将一次区间前缀减法看作一次前缀右端点入队，显然左侧某点 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的实际被减次数为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 入队的次数 + 所有右于 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 点的元素的入队次数。用大根堆维护这些元素，就可以快速维护整个斜率序列。例如 &lt;code&gt;3 2 2 1&lt;/code&gt;，代表 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 处斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 处斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-3\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 处斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-4\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(a_i\ge k_m\)&lt;/span&gt; 时（容易发现它会成为新的 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt;），直接把 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 加入大根堆，就可以把 &lt;span class=&#34;math inline&#34;&gt;\(\le a_i\)&lt;/span&gt; 的所有位置斜率减去 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
什么你问在 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 之间的推平怎么办？由于唯一右于它们的拐点 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 入了一次队，所以中间的元素斜率自然是 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 啊。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(a_i&amp;lt;k_m\)&lt;/span&gt; 时，我们需要：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 以左的位置斜率减去 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，直接将 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 入队即可。&lt;/li&gt;
&lt;li&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 之间的位置斜率加上 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，把 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 弹出（太好了就在队首）再把 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 加入即可。由于 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 显然是一个拐点，所以删除 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 并非虚空索敌，但注意 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 可能会变化成其后继。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实就会发现还有一些有趣的小性质，比如 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 与队首等价（用于实现）；&lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 右侧斜率全部为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，也是唯一可以取到的正斜率。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;袜写起来好简单。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    long long res = 0ll;
    std::priority_queue&amp;lt;int&amp;gt; q;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        if (i == 1 || a[i] &amp;gt;= q.top())
            q.push(a[i]);
        else &amp;#123;
            res += q.top() - a[i];
            q.pop(), q.push(a[i]), q.push(a[i]);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例烟花表演&#34;&gt;例：烟花表演&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3642&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3642&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,d}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 子树中所有叶子距根均为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的最小代价。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{u,d}=\sum\limits_{(v, w)\in u}\min\limits_{0\le w&amp;#39;\le d}\{f_{v,d-w&amp;#39;}+|w-w&amp;#39;|\}.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以归纳证明 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,d}\)&lt;/span&gt; 为凸；和上一题相似地，考虑用 &lt;span class=&#34;math inline&#34;&gt;\(f_v\)&lt;/span&gt; 的堆得到 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 的堆。&lt;/p&gt;
&lt;p&gt;首先最外层是一个线性加，这其实就是把差分数组 / 斜率加起来，放到我们这个堆里面就是合并两个堆。虽然你可能和我一样不认识可并堆，但是你可以和我一样不会 pd_ds。&lt;/p&gt;
&lt;p&gt;再看内层，发现和上一题长得像但其实不一样，呜呜呜。发现 &lt;span class=&#34;math inline&#34;&gt;\(|w-w&amp;#39;|\)&lt;/span&gt; 是一个左右斜率分别为 &lt;span class=&#34;math inline&#34;&gt;\(-1,1\)&lt;/span&gt; 的分段函数，而左边类比可得斜率最大为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;由闵可夫斯基和，内层函数斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;-1\)&lt;/span&gt; 的部分来自 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt;；&lt;span class=&#34;math inline&#34;&gt;\(=-1\)&lt;/span&gt; 的部分来自 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(|w-w&amp;#39;|\)&lt;/span&gt; 的左半边（感谢 &lt;span class=&#34;math inline&#34;&gt;\(w&amp;#39;\)&lt;/span&gt; 是有下确界的）；&lt;span class=&#34;math inline&#34;&gt;\(=0\)&lt;/span&gt; 的部分来自 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt;；&lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;0\)&lt;/span&gt; 的部分我们不关心。&lt;/p&gt;
&lt;p&gt;最终函数图像的变化：水平部分的左端点右移了 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;。找到 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d}\)&lt;/span&gt; 中的水平线段和斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的线段，令其在堆中的值 &lt;span class=&#34;math inline&#34;&gt;\(+w\)&lt;/span&gt; 就能达到平移的目的。&lt;/p&gt;
&lt;p&gt;但需要注意，此时仍然需要 &lt;strong&gt;保留内层函数中斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的部分，但斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;1\)&lt;/span&gt; 的部分被删除&lt;/strong&gt;。原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绝对值函数与内层函数定义域相同，作闵可夫斯基和后，斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的右侧线段会将 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt; 中原有的 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;1\)&lt;/span&gt; 的部分『挤』出定义域，故可以将其直接删除。&lt;/li&gt;
&lt;li&gt;斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的部分，虽然对内层函数中极值点无贡献，但在外层函数中极值点可能向右偏移，此时会对其产生影响，需要维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容易发现由于 &lt;span class=&#34;math inline&#34;&gt;\(w&amp;#39;\)&lt;/span&gt; 的取值上限是 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，但 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 没有上界，所以每个内层函数的右侧都一定是一条斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的射线；也就是说，每个外层函数一定有（儿子个数）个拐点（堆中元素），弹出这么多个就可以删除外层函数中斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;1\)&lt;/span&gt; 的线段，顺便找到斜率为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的线段。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
#include &amp;lt;ext/pb_ds/priority_queue.hpp&amp;gt;
const int inf= 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m, n += m;
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(n + 1);
    auto res(0ll);
    for (int i = 2, fa, w; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; fa &amp;gt;&amp;gt; w, res += w;
        g[fa].emplace_back(i, w);
    &amp;#125;
    std::vector&amp;lt;__gnu_pbds::priority_queue&amp;lt;long long&amp;gt; &amp;gt; q(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        if (g[x].empty())
            q[x].push(0), q[x].push(0);
        else
            for (auto [i, w] : g[x]) &amp;#123;
                DFS(i);
                for (int j = 1; j &amp;lt; (int)g[i].size(); ++j)
                    q[i].pop();
                long long t1 = q[i].top(), t0;
                q[i].pop(), t0 = q[i].top(), q[i].pop();
                q[i].push(t1 + w), q[i].push(t0 + w);
                q[x].join(q[i]);
            &amp;#125;
        // fprintf(stderr, &amp;quot;size(%d) = %d\n&amp;quot;, x, (int)q[x].size());
        return;
    &amp;#125;;
    DFS(1);
    for (int i = 1; i &amp;lt;= (int)g[1].size(); ++i)
        q[1].pop();
    for (; !q[1].empty(); q[1].pop())
        res -= q[1].top();
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例buy-low-sell-high&#34;&gt;例：Buy Low Sell High&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/865/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/865/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 天结束后持有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 支股票的最大收益。则 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\max\{f_{i-1,j},f_{i-1,j-1}-a_i,f_{i-1,j+1}+a_i\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;（由于这里和 max 有关所以需要精细描述凹凸了）发现就是把三个（可能）经过平移的（可能）凹的函数做线性 max。虽然实际上的结论『函数在整点上是凹的』不算太显然，但是可以猜是凹的。&lt;/p&gt;
&lt;p&gt;线性 max 在 slope trick 中是不太能体现的，但我们发现这里是同一个凹函数向左上、右下平移同一个向量，希望得到新的凹函数不管是从差分角度还是图象，都能得到新函数由左上部分斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;-a_i\)&lt;/span&gt; 的线段、两段斜率 &lt;span class=&#34;math inline&#34;&gt;\(=-a_i\)&lt;/span&gt; 的线段、右下部分斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;-a_i\)&lt;/span&gt; 的线段组成。此外，由于向左上平移的函数有一处离开了定义域，还需将其剔除。&lt;/p&gt;
&lt;p&gt;值得注意的是，当 &lt;span class=&#34;math inline&#34;&gt;\(-a_i\)&lt;/span&gt; 比最小斜率还要小时会有变化，可以画图看一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现定义域是相对小的（&lt;span class=&#34;math inline&#34;&gt;\(0\le j\le n\)&lt;/span&gt;），故用优先队列维护整个斜率序列就可以快速插入两个 &lt;span class=&#34;math inline&#34;&gt;\(k=-a_i\)&lt;/span&gt; 的线段。容易发现顶点在 &lt;span class=&#34;math inline&#34;&gt;\(j=0\)&lt;/span&gt; 处取得（从图象和定义都易知），最右侧是只买不卖的最劣方案，可以倒推。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    auto res = 0ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], res -= a[i];
    std::priority_queue&amp;lt;int&amp;gt; q;
    q.push(-a[1]);
    for (int i = 2; i &amp;lt;= n; ++i)
        if (a[i] &amp;lt; -q.top())
            q.push(-a[i]);
        else
            q.pop(), q.push(-a[i]), q.push(-a[i]);
    for (; !q.empty(); res -= q.top(), q.pop());
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="反悔贪心" />
        <category term="DP 优化" />
        <category term="WQS 二分" />
        <category term="闵可夫斯基和" />
        <category term="slope trick" />
        <updated>2025-07-07T06:10:02.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250526/</id>
        <title>多维 DP</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250526/"/>
        <content type="html">&lt;p&gt;上楼听到有人在哼 &lt;em&gt;Climbing on the Trees&lt;/em&gt;，上来听到隔壁班在放 &lt;em&gt;Burn the House Down&lt;/em&gt;，果然春天是 AJR 的季节（）&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;主要是多维 DP 特有的优化！&lt;/p&gt;
&lt;h2 id=&#34;分步转移&#34;&gt;分步转移&lt;/h2&gt;
&lt;p&gt;如果状态的若干维之间只存在很弱的联系，可以分步转移每一维。&lt;/p&gt;
&lt;p&gt;假设有二维状态转移 &lt;span class=&#34;math inline&#34;&gt;\((a,b)\to (a&amp;#39;,b&amp;#39;)\)&lt;/span&gt;，『很弱的联系』举例：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;DP 值中包含 &lt;span class=&#34;math inline&#34;&gt;\(w(a&amp;#39;,b&amp;#39;)\)&lt;/span&gt;，但不包含诸如 &lt;span class=&#34;math inline&#34;&gt;\(w(a&amp;#39;,b),w(a,b&amp;#39;)\)&lt;/span&gt; 之类。也即该值的求解不依赖于上一个状态、不依赖于转移。&lt;/li&gt;
&lt;li&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\((a&amp;#39;,b&amp;#39;)\)&lt;/span&gt; 的取值有限制，比如 &lt;span class=&#34;math inline&#34;&gt;\((114,514)\)&lt;/span&gt; 不能取到之类。显然这也不依赖于上一个状态、不依赖于转移。&lt;/li&gt;
&lt;li&gt;符号限制（如转移间为 &lt;span class=&#34;math inline&#34;&gt;\(+\)&lt;/span&gt;，状态间为 &lt;span class=&#34;math inline&#34;&gt;\(\times\)&lt;/span&gt; 之类），在计数中常出现。&lt;/li&gt;
&lt;li&gt;一个变动的时候另一个必须也一起动。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意！有的时候一个状态也可以拆成两个状态，然后分步转移。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题经典题&#34;&gt;例题：经典题&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(w_{N\times M}\)&lt;/span&gt;，求 &lt;span class=&#34;math inline&#34;&gt;\((A,B)_{1\sim K}\)&lt;/span&gt;，最大化 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=1}^K w_{A_i,B_i}+w_{A_{i-1},A_i}+w_{B_{i-1},B_i}\)&lt;/span&gt; 的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现如果设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,a,b}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\((A,B)_i=(a,b)\)&lt;/span&gt; 的话，转移就会达到可观的 &lt;span class=&#34;math inline&#34;&gt;\(O(N\times M)\)&lt;/span&gt;；但发现里面的 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 其实没什么有机联系；唯一的联系 &lt;span class=&#34;math inline&#34;&gt;\(w_{A_i,B_i}\)&lt;/span&gt;（上面『很弱的联系』中的第一、四种情况）。因此分布转移：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f&amp;#39;_{a&amp;#39;,b}\gets \max\limits_a f_{a,b}+w_{a&amp;#39;,a}\\
f_{a&amp;#39;,b&amp;#39;}\gets \max\limits_b f&amp;#39;_{a&amp;#39;, b} + w_{b,b&amp;#39;}+w_{a&amp;#39;,b&amp;#39;}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;由此便优化转移复杂度到 &lt;span class=&#34;math inline&#34;&gt;\(O(N+M)\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题彩灯晚会&#34;&gt;例题：彩灯晚会&lt;/h3&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250407/#e---kdoi-11彩灯晚会&#34;&gt;link&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Tips：发现 &lt;span class=&#34;math inline&#34;&gt;\(l_1,l_2\)&lt;/span&gt; 之间也没啥有机联系（上面『很弱的联系』中的第三、四种情况），故分步转移。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题序列妙妙值&#34;&gt;例题：序列妙妙值&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://uoj.ac/problem/549&#34; class=&#34;uri&#34;&gt;https://uoj.ac/problem/549&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;朴素地，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个处分第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 段的最大价值，显然有 &lt;span class=&#34;math inline&#34;&gt;\(O(k\times n^2)\)&lt;/span&gt;，且并没有优化的空间。&lt;/p&gt;
&lt;p&gt;考虑利用 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 很小这一条件，发现上一条无法优化是因为要获取 &lt;span class=&#34;math inline&#34;&gt;\(sum_{i}\)&lt;/span&gt; 的值；那么把 &lt;span class=&#34;math inline&#34;&gt;\(sum_i\)&lt;/span&gt; 塞到状态里。设 &lt;span class=&#34;math inline&#34;&gt;\(f_{s&amp;#39;,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(sum=s&amp;#39;\)&lt;/span&gt; 时，分了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 段的最大价值。同样可以 &lt;span class=&#34;math inline&#34;&gt;\(O(k\cdot n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;接下来有两个理解这个优化的角度：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;从平衡角度，原问题等价于 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 更新 &lt;span class=&#34;math inline&#34;&gt;\((s,j)\)&lt;/span&gt; 处的最大值，&lt;span class=&#34;math inline&#34;&gt;\(O(v)\)&lt;/span&gt; 查找 &lt;span class=&#34;math inline&#34;&gt;\(j-1\)&lt;/span&gt; 处的最大值；把 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 拆成前 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位、后 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位两个 part，当更新&lt;/p&gt;
&lt;p&gt;对于修改：相当于固定前 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，枚举后 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，并更新 &lt;span class=&#34;math inline&#34;&gt;\((s,x)\)&lt;/span&gt;。&lt;/p&gt;
对于查询：相当于固定后 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，枚举前 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，并查询 &lt;span class=&#34;math inline&#34;&gt;\((s,x)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从分步转移角度，由于『现时刻』的贡献是按位的，二进制状态的前 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位和后 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位没啥有机联系，故直接拆开，先转移前 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位，再转移后 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样就被优化为 &lt;span class=&#34;math inline&#34;&gt;\(O(k\cdot n\times \sqrt v)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxv = 1 &amp;lt;&amp;lt; 8;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    using arr = std::vector&amp;lt;int&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    arr s(n + 1), tag0(maxv), d0;
    crr f(maxv, brr(maxv, arr(k + 1, inf))), g(maxv, brr(maxv, arr(k + 1, inf)));
    f[0][0][0] = 0;
    for (int j = 0; j &amp;lt; maxv; ++j)
        g[0][j][1] = j;
    tag0[0] = 1, d0.push_back(0);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; s[i], s[i] ^= s[i - 1];
        int p0 = s[i] &amp;gt;&amp;gt; 8, p1 = s[i] &amp;amp; ((1 &amp;lt;&amp;lt; 8) - 1);
        for (int j = k; j; --j) &amp;#123;
            for (auto a : d0)
                f[p0][p1][j] = std::min(f[p0][p1][j], g[a][p1][j] + ((a ^ p0) &amp;lt;&amp;lt; 8));
            // printf(&amp;quot;f[%d][%d][%d] = %d\n&amp;quot;, p0, p1, j, f[p0][p1][j]);
            if (j != k)
                for (int a = 0; a &amp;lt; maxv; ++a)
                    g[p0][a][j + 1] = std::min(g[p0][a][j + 1], f[p0][p1][j] + (a ^ p1));
        &amp;#125;
        if (i &amp;gt;= k)
            std::cout &amp;lt;&amp;lt; f[p0][p1][k] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
        if (!tag0[p0])
            tag0[p0] = 1, d0.push_back(p0);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;割裂&#34;&gt;割裂&lt;/h2&gt;
&lt;p&gt;如果状态的若干维之间连无机联系都没了，可以直接把 DP 数组拆开，各自转移各自的。&lt;/p&gt;
&lt;p&gt;最后答案的拼接，可能是枚举、直接拼、用一个转移另一个之类。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题经典题-1&#34;&gt;例题：经典题&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(w_{N\times M}\)&lt;/span&gt;，求 &lt;span class=&#34;math inline&#34;&gt;\((A,B)_{1\sim K}\)&lt;/span&gt;，最大化 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=1}^K w_{A_{i-1},A_i}+w_{B_{i-1},B_i}\)&lt;/span&gt; 的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先 DP 出来 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;，再 DP 出来 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;，直接相加即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题mnogomet&#34;&gt;例题：MNOGOMET&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7648&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7648&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;想到设 &lt;span class=&#34;math inline&#34;&gt;\(f_{t,i,a,b}\)&lt;/span&gt; 表示『过去了 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 秒，且球在球员 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 手上，且两个队伍得分分别为 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt;』的概率。那么枚举球上一次在谁手上，有美观的 &lt;span class=&#34;math inline&#34;&gt;\(O(T\cdot N^2R^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;发现比分变动时（上半个时刻完成射门并传球）球一定在某个队的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 号手上；&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 这一维和 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt; 也没有相互的干扰；故可以将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 提取出来（作为对比，射门和夺球、传球都会影响 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，所以分裂出来的状态中必须包含 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;）。具体地：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(g_{t,0/1,i}\)&lt;/span&gt; 表示『一开始球在哪个球队的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 号，花费 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 秒，且没人射门，且球在球员 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 手上』的概率。发现可以 &lt;span class=&#34;math inline&#34;&gt;\(O(T\times N^2)\)&lt;/span&gt; 计算。&lt;/p&gt;
&lt;p&gt;当然这里就是条件概率了。其中『一开始球在哪个球队的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 号』就是条件。&lt;/p&gt;
再预处理可以得到 &lt;span class=&#34;math inline&#34;&gt;\(G_{t,0/1,0/1,0/1}\)&lt;/span&gt; 表示『一开始球在哪个球队的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 号，花费 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 秒，哪个球队射门，（没）射进』的概率。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{t,0/1,a,b}\)&lt;/span&gt; 表示『过去了 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 秒，球在哪个队的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 号，且得分为 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt;』的概率。枚举距离上一次射门的时间，可以 &lt;span class=&#34;math inline&#34;&gt;\(O(T^2\times R^2)\)&lt;/span&gt; 完成转移。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, r, T;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; r &amp;gt;&amp;gt; T;
    using arr = std::vector&amp;lt;double&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    brr p(2 * n + 1, arr(2)), pp(2 * n + 1, arr(2 * n + 1));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; p[i][1], p[i][0] = 1. - p[i][1];
        int ss, sd;
        std::cin &amp;gt;&amp;gt; ss &amp;gt;&amp;gt; sd;
        double P = 1. / (ss + sd + 1);
        p[i][0] *= P, p[i][1] *= P;
        for (int x; ss--; pp[i][x] = P)
            std::cin &amp;gt;&amp;gt; x;
        for (int x; sd--; pp[i][x + n] = P)
            std::cin &amp;gt;&amp;gt; x;
    &amp;#125;
    for (int i = n + 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; p[i][1], p[i][0] = 1. - p[i][1];
        int ss, sd;
        std::cin &amp;gt;&amp;gt; ss &amp;gt;&amp;gt; sd;
        double P = 1. / (ss + sd + 1);
        p[i][0] *= P, p[i][1] *= P;
        for (int x; ss--; pp[i][x + n] = P)
            std::cin &amp;gt;&amp;gt; x;
        for (int x; sd--; pp[i][x] = P)
            std::cin &amp;gt;&amp;gt; x;
    &amp;#125;
    brr s(T + 1, arr(2));
    crr g(T + 1, brr(2, arr(2 * n + 1)));
    std::vector&amp;lt;crr&amp;gt; G(T + 1, crr(2, brr(2, arr(2)))), f(T + 1, crr(2, brr(r + 1, arr(r + 1))));
    g[0][0][1] = g[0][1][n + 1] = 1.;
    for (int t = 1; t &amp;lt;= T; ++t) &amp;#123;
        for (int f1 = 0; f1 &amp;lt;= 1; ++f1)
            for (int i = 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
                G[t][f1][i &amp;gt; n][0] += g[t - 1][f1][i] * p[i][0];
                G[t][f1][i &amp;gt; n][1] += g[t - 1][f1][i] * p[i][1];
                for (int j = 1; j &amp;lt;= 2 * n; ++j)
                    if (j != i)
                        g[t][f1][i] += pp[j][i] * g[t - 1][f1][j];
                // printf(&amp;quot;spend %ds, start from %d, now at %d: %.10lf\n&amp;quot;, t, 1 + f1 * n, i, g[t][f1][i]);
                s[t][f1] += g[t][f1][i];
            &amp;#125;
    &amp;#125;
    // puts(&amp;quot;------------------------------------&amp;quot;);
    // for (int t = 1; t &amp;lt;= T; ++t) &amp;#123;
    //     for (int f1 = 0; f1 &amp;lt;= 1; ++f1)
    //         for (int f2 = 0; f2 &amp;lt;= 1; ++f2)
    //             for (int f3 = 0; f3 &amp;lt;= 1; ++f3)
    //                 printf(&amp;quot;spend %ds, start from %d, %d shoots, STATUS: %d, P = %.10lf\n&amp;quot;, t, 1 + f1 * n, 1 + f2, f3, G[t][f1][f2][f3]);
    // &amp;#125;
    // puts(&amp;quot;------------------------------------&amp;quot;);
    f[0][0][0][0] = 1.;
    for (int t = 0; t &amp;lt; T; ++t)
        for (int f1 = 0; f1 &amp;lt;= 1; ++f1)
            for (int a = 0; a &amp;lt; r; ++a)
                for (int b = 0; b &amp;lt; r; ++b) &amp;#123;
                    for (int t1 = 1; t + t1 &amp;lt;= T; ++t1) &amp;#123;
                        f[t + t1][0][a][b] += f[t][f1][a][b] * G[t1][f1][1][0];
                        f[t + t1][0][a][b + 1] += f[t][f1][a][b] * G[t1][f1][1][1];
                        f[t + t1][1][a][b] += f[t][f1][a][b] * G[t1][f1][0][0];
                        f[t + t1][1][a + 1][b] += f[t][f1][a][b] * G[t1][f1][0][1];
                        if (t + t1 == T)
                            f[T][0][a][b] += f[t][f1][a][b] * s[t1][f1];
                    &amp;#125;
                &amp;#125;
    // for (int t = 0; t &amp;lt;= T; ++t)
    //     for (int f1 = 0; f1 &amp;lt;= 1; ++f1)
    //         for (int a = 0; a &amp;lt;= r; ++a)
    //             for (int b = 0; b &amp;lt;= r; ++b)
    //                 if (f[t][f1][a][b] &amp;gt; 1e-10)
    //                     printf(&amp;quot;%ds later, %d shoots, %d : %d, P = %.10lf\n&amp;quot;, t, 1 + !f1 * n, a, b, f[t][f1][a][b]);
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(10);
    for (int a = 0; a &amp;lt;= r; ++a) &amp;#123;
        for (int b = 0; b &amp;lt;= r; ++b) &amp;#123;
            if (a == r &amp;amp;&amp;amp; b == r)
                continue;
            double res(0.);
            if (a == r)
                for (int t = r; t &amp;lt;= T; ++t)
                    res += f[t][1][r][b];
            else if (b == r)
                for (int t = r; t &amp;lt;= T; ++t)
                    res += f[t][0][a][r];
            else
                res = f[T][0][a][b] + f[T][1][a][b];
            std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="DP 优化" />
        <updated>2025-05-26T07:05:53.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250510/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250510/"/>
        <content type="html">&lt;p&gt;啊啊。小封条。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---pass-to-next&#34;&gt;A - Pass to Next&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc124/tasks/arc124_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc124/tasks/arc124_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感觉其他一些题解讲得不是特别清楚，这里参考了 &lt;a href=&#34;https://blog.csdn.net/weixin_43960287/article/details/119140590&#34;&gt;XJX 的文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;要求的答案是 &lt;span class=&#34;math inline&#34;&gt;\(\prod a&amp;#39;_i\)&lt;/span&gt;，&lt;mark&gt;发现运算是乘法，比较怪；由此考虑转化为方案数，也就是假设每个人有 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;#39;_i\)&lt;/span&gt; 个互不相同的球，每个人在其中选出恰好一个的方案数&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;考虑 DP。发现每个人手上的球分为『自己的』和『左边的人传过来的』两种类型；&lt;mark&gt;显然第二种会有来自上一个人的限制，考虑把第二种在上一个人就完成求解&lt;/mark&gt;。具体地，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,0}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个人选取自己的球，但只记录 &lt;span class=&#34;math inline&#34;&gt;\(1\sim i-1\)&lt;/span&gt; 的方案；&lt;span class=&#34;math inline&#34;&gt;\(f_{i,1}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个人选取第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 个人的球，并记入答案的方案。&lt;em&gt;你可能需要注意到：最后一个被记入方案的球来自第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 个人&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;但这样会有个小问题。我们让所有人多往右边传一个球，那么在我们的这种分割方法看来是不一样的局面；但实际上它们是等价的。从每个人传出了多少个球（设为 &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt;）的角度来看，对于 &lt;span class=&#34;math inline&#34;&gt;\(\min\{x_n\}\ne 0\)&lt;/span&gt;，只需要不断执行 &lt;span class=&#34;math inline&#34;&gt;\(\forall\, x_i\gets x_i-1\)&lt;/span&gt; 就可以在局面不变的情况下使 &lt;span class=&#34;math inline&#34;&gt;\(\min\{x_n\}\ne 0\)&lt;/span&gt;。这是在说，可以让 &lt;span class=&#34;math inline&#34;&gt;\(\min\{x_n\}\ne 0\)&lt;/span&gt; 的方案和终局一一对应。&lt;/p&gt;
&lt;p&gt;发现可以容斥：钦定 &lt;span class=&#34;math inline&#34;&gt;\(x_i\ge 1\)&lt;/span&gt;，也就是每个人必须往右传至少一个，相似地算一遍就能得到非法方案。&lt;/p&gt;
&lt;p&gt;考虑转移，令 &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt; 可选最小值为 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt;，有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{i+1,0}\gets f_{i,0}\)&lt;/span&gt;：将第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个人未被记入的自己的球记入，球数可能为 &lt;span class=&#34;math inline&#34;&gt;\([0,a_i-l]\)&lt;/span&gt;。等差数列求和即可。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{i+1,0}\gets f_{i,1}\)&lt;/span&gt;：没有球需要被记入，但是这种情况对应多种 &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt;。具体地，&lt;span class=&#34;math inline&#34;&gt;\(x_i\in [l,a_i]\)&lt;/span&gt;。共有 &lt;span class=&#34;math inline&#34;&gt;\(a_i-l+1\)&lt;/span&gt; 种方案。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{i+1,1}\gets f_{i,0}\)&lt;/span&gt;：将第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个人的 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 个球分给 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt;。共有 &lt;span class=&#34;math inline&#34;&gt;\(x_i\cdot (a_i-x_i)\)&lt;/span&gt; 种可能，也就是 &lt;span class=&#34;math inline&#34;&gt;\(\left(a_i\cdot \sum_{x_i=l}^{a_i} x_i\right)-\left(\sum_{x_i=l}^{a_i}{x_i}^2\right)\)&lt;/span&gt; 种方案。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{i+1,1}\gets f_{i,1}\)&lt;/span&gt;：将第 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 个人得到的第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个人的球记入，同第一条。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;破环为链，分别钦定第一个人是用自己的球还是上一个人的球来解决问题（必须对于两种可能性分开计算；否则就不知道答案应该取 &lt;span class=&#34;math inline&#34;&gt;\(f_{n,0}\)&lt;/span&gt; 还是 &lt;span class=&#34;math inline&#34;&gt;\(f_{n,1}\)&lt;/span&gt;）。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353, inv2 = (mod + 1) &amp;gt;&amp;gt; 1, inv6 = 166374059;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i % n];
    auto sum = [&amp;amp;](long long r) &amp;#123;
        return r * (r + 1) % mod * inv2 % mod;
    &amp;#125;;
    auto sum2 = [&amp;amp;](long long r) &amp;#123;
        return r * (r + 1) % mod * (2 * r % mod + 1) % mod * inv6 % mod;
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f0(n, std::vector&amp;lt;long long&amp;gt; (2)), f1(n, std::vector&amp;lt;long long&amp;gt; (2));
    auto calc = [&amp;amp;](long long l, std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; &amp;amp;f) &amp;#123;
        f[0][0] = 1ll;
        for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
            int j = (i + 1) % n;
            f[j][0] = f[i][0] * sum(a[i] - l) % mod;
            (f[j][0] += f[i][1] * (a[i] - l + 1)) %= mod;
            f[j][1] = f[i][0] * (a[i] * sum(a[i]) % mod - sum2(a[i])) % mod;
            (f[j][1] += f[i][1] * sum(a[i]) % mod) %= mod;
            // printf(&amp;quot;0, l = %lld, f[%d]: %lld / %lld\n&amp;quot;, l, j, f[j][0], f[j][1]);
        &amp;#125;
        auto res(f[0][0]);
        f.assign(n, std::vector&amp;lt;long long&amp;gt; (2));
        f[0][1] = 1ll;
        for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
            int j = (i + 1) % n;
            f[j][0] = f[i][0] * sum(a[i] - l) % mod;
            (f[j][0] += f[i][1] * (a[i] - l + 1)) %= mod;
            f[j][1] = f[i][0] * (a[i] * sum(a[i]) % mod - sum2(a[i])) % mod;
            (f[j][1] += f[i][1] * sum(a[i]) % mod) %= mod;
            // printf(&amp;quot;1, l = %lld, f[%d]: %lld / %lld\n&amp;quot;, l, j, f[j][0], f[j][1]);
        &amp;#125;
        return (res + f[0][1]) % mod;
    &amp;#125;;
    std::cout &amp;lt;&amp;lt; (calc(0, f0) + mod - calc(1, f1)) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---绿宝石之岛&#34;&gt;B - 绿宝石之岛&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/6406&#34; class=&#34;uri&#34;&gt;https://loj.ac/p/6406&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为只关心最终状态，原题可以转化为：将 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 分成 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个非负整数，前 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 大数之和的期望（当然你需要加上初始的 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 个）。&lt;/p&gt;
&lt;p&gt;关于非负整数拆分：设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 分成 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个 &lt;strong&gt;非负整数&lt;/strong&gt; 的方案，钦定其中恰有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个 &lt;strong&gt;正整数&lt;/strong&gt; 进行转移，给这 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个数先分一个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\sum\limits_{k=0}^{\min(i,j)} C_j^k\cdot f_{i-k,k}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;再设 &lt;span class=&#34;math inline&#34;&gt;\(g_{i,j}\)&lt;/span&gt; 表示将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 分成 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个非负整数的所有方案中、前 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 大的数之和。类似地，有 &lt;span class=&#34;math inline&#34;&gt;\(g_{i,j}=\sum\limits_{k=0}^{\min(i,j)} C_j^k\cdot (g_{i-k,k}+\min(k,r)\cdot f_{i-k,k})\)&lt;/span&gt;。其中，&lt;span class=&#34;math inline&#34;&gt;\(\min(k,r)\)&lt;/span&gt; 的来源是，只有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个数有值，前 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 大的数一定在这 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个数里面。&lt;/p&gt;
&lt;p&gt;答案为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {g_{d,n}}{f_{d,n}}+r\)&lt;/span&gt;，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, d, r;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; d &amp;gt;&amp;gt; r;
    using arr = std::vector&amp;lt;double&amp;gt;;
    std::vector&amp;lt;arr&amp;gt; f(d + 1, arr(n + 1)), g(d + 1, arr(n + 1)), C(n + 1, arr(n + 1));
    for (int i = 0; i &amp;lt;= n; ++i) &amp;#123;
        C[i][0] = 1.;
        for (int j = 1; j &amp;lt;= i; ++j)
            C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
    &amp;#125;
    f[0].assign(n + 1, 1.);
    for (int i = 1; i &amp;lt;= d; ++i)
        for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
            for (int k = 1; k &amp;lt;= i &amp;amp;&amp;amp; k &amp;lt;= j; ++k) &amp;#123;
                f[i][j] += C[j][k] * f[i - k][k];
                g[i][j] += C[j][k] * (g[i - k][k] + std::min(k, r) * f[i - k][k]);
                // printf(&amp;quot;  k = %d, %.0lf + %.0lf\n&amp;quot;, k, C[j][k] * g[i - k][k], std::min(k, r) * f[i - k][k]);
            &amp;#125;
            // printf(&amp;quot;f[%d][%d] = %.0lf, g[%d][%d] = %.0lf\n&amp;quot;, i, j, f[i][j], i, j, g[i][j]);
        &amp;#125;
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(8) &amp;lt;&amp;lt; g[d][n] / f[d][n] + r &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---uddered-but-not-herd-g&#34;&gt;C - Uddered but not Herd G&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7296&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7296&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给每个字母分配一个标号 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，那么最小段数就是 &lt;span class=&#34;math inline&#34;&gt;\(\sum \left[x_i\ge x_{i+1}\right]\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑状压完成映射操作，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{s}\)&lt;/span&gt; 表示给标号 &lt;span class=&#34;math inline&#34;&gt;\(1\sim |s|\)&lt;/span&gt; 分配字母后，占用字符集 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的方案数，那么就能 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 得到贡献——只需预处理出 &lt;span class=&#34;math inline&#34;&gt;\(f_{c, s}\)&lt;/span&gt; 表示分配到字母 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 时，已经先给 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 中字母分配了更小标号时的贡献。&lt;/p&gt;
&lt;p&gt;注意字符集大小只有 &lt;span class=&#34;math inline&#34;&gt;\(20\)&lt;/span&gt;，可以 &lt;span class=&#34;math inline&#34;&gt;\(O(|S|\cdot 2^{|S|})\)&lt;/span&gt; 解决问题，&lt;mark&gt;注意到预处理的内容是类高维前缀最值的形式，可以递推降低复杂度&lt;/mark&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre data-line=&#34;26-28&#34; class=&#34;cpp language-cpp&#34;&gt;&lt;code data-line=&#34;26-28&#34; class=&#34;cpp language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&#34;.in&#34;, &#34;r&#34;, stdin);
    std::freopen(&#34;.out&#34;, &#34;w&#34;, stdout);
#endif
    int n;
    std::string t;
    std::cin &gt;&gt; t, n = (int)t.length(), t = &#34;#&#34; + t;
    std::vector&amp;lt;int&gt; a, tag(26, -1), s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (tag[t[i] - &#39;a&#39;] == -1)
            tag[t[i] - &#39;a&#39;] = (int)a.size(), a.push_back(t[i] - &#39;a&#39;);
        s[i] = tag[t[i] - &#39;a&#39;];
    &amp;#125;
    int m = (int)a.size(), siz = 1 &amp;lt;&amp;lt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; cnt(m, std::vector&amp;lt;int&gt; (m));
    for (int i = 1; i &amp;lt; n; ++i)
        ++cnt[s[i]][s[i + 1]];
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; g(m, std::vector&amp;lt;int&gt; (siz));
    for (int i = 0; i &amp;lt; m; ++i)
        for (int k = 0; k &amp;lt; m; ++k) // 注意这里相当于是钦定从 k 处转移
            for (int j = (1 &amp;lt;&amp;lt; k); j &amp;lt; (2 &amp;lt;&amp;lt; k); ++j) // 枚举的是 k 位为 1 的所有数；这两层循环的复杂度为 O(siz)
                g[i][j] = g[i][j ^ (1 &amp;lt;&amp;lt; k)] + cnt[i][k]; // 目的是此处的内存连续访问优化，把 ^ 看作 - 应该就能理解为什么第二维是连续的
    std::vector&amp;lt;int&gt; f(siz, inf);
    f[0] = 1;
    for (int i = 1; i &amp;lt; siz; ++i)
        for (int j = 0; j &amp;lt; m; ++j)
            if ((i &gt;&gt; j) &amp; 1)
                f[i] = std::min(f[i], f[i ^ (1 &amp;lt;&amp;lt; j)] + g[j][i]);
    std::cout &amp;lt;&amp;lt; f[siz - 1] &amp;lt;&amp;lt; &#39;\n&#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---min-max-subarrays-p&#34;&gt;D - Min Max Subarrays P&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11845&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11845&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先考虑 &lt;span class=&#34;math inline&#34;&gt;\(01\)&lt;/span&gt; 序列的答案：如果序列中存在相邻的 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，总能保证最后的一个是 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;如果序列中存在 &lt;span class=&#34;math inline&#34;&gt;\(\ge 3\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，可以牺牲其中的一些使得 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 相邻。&lt;/p&gt;
&lt;p&gt;当序列中只有 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 时，只有因为剩下的 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 不太够，导致我们无法随意『上下其手』时不能将 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 挪到一起。&lt;/p&gt;
&lt;p&gt;令两个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为序列最大值与次大值，暴搜处理序列长度较小的情况，剩下的直接用奇偶性判断两个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 取哪个。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---mst-on-line&#34;&gt;A - MST on Line++&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc167/tasks/arc167_c&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc167/tasks/arc167_c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相当于把 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 打乱然后处理原问题。考虑每个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 的贡献次数。模拟 Kruskal 连边，从小到大把点 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 加入图，&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 可以向 &lt;span class=&#34;math inline&#34;&gt;\(a_{[i-K,i+K]}\)&lt;/span&gt; 内所有连通块连边。&lt;/p&gt;
&lt;p&gt;连通块数量当且仅当 &lt;span class=&#34;math inline&#34;&gt;\([i-K,i)\)&lt;/span&gt; 内最靠右的点和 &lt;span class=&#34;math inline&#34;&gt;\((i, i+K]\)&lt;/span&gt; 内最靠左的点距离 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;K\)&lt;/span&gt; 时为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;，其余情况为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但要是从这个角度想这个题就不太好做了。正确的想法应该是&lt;mark&gt;拆分为『若 &lt;span class=&#34;math inline&#34;&gt;\([i-K,i)\)&lt;/span&gt; 中有点，贡献次数 &lt;span class=&#34;math inline&#34;&gt;\(+1\)&lt;/span&gt;』和『若 &lt;span class=&#34;math inline&#34;&gt;\((i,i+K]\)&lt;/span&gt; 中有点 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\([j-K,j)\)&lt;/span&gt; 中无点，贡献次数 &lt;span class=&#34;math inline&#34;&gt;\(+1\)&lt;/span&gt;』&lt;/mark&gt;。对于第一个问题，贡献次数将前 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 大的数分配至少一个到 &lt;span class=&#34;math inline&#34;&gt;\([i-K,i)\)&lt;/span&gt; 中的方案数；对于第二个问题，枚举 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，贡献次数为将前 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 大的数分配到 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\([1,j-K)\cup (j, n]\)&lt;/span&gt; 中的方案数。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;实现的时候千万注意循环变量枚举的是位置还是值！不然你会调得很痛苦。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;03-max-01.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::sort(a.begin() + 1, a.end());
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto A = [&amp;amp;](int n, int m) &amp;#123;
        if (n &amp;lt; m)
            return 0ll;
        return fac[n] * inv[n - m] % mod;
    &amp;#125;;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return A(n, m) * inv[m] % mod;
    &amp;#125;;
    long long res = 0ll;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j)
            (res += a[i] * (fac[n - 1] + mod - A(n - 1 - (j - std::max(1, j - k)), i - 1) * fac[n - i] % mod) % mod) %= mod;
        for (int j = 2; j &amp;lt;= n; ++j)
            (res += a[i] * C(i - 1, i - 2) % mod * C(j - std::max(1, j - k), 1) % mod * A(n - (j - std::max(1, j - k) + 1), i - 2) % mod * fac[n - i] % mod) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---existence-counting&#34;&gt;B - Existence Counting&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc174/tasks/arc174_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc174/tasks/arc174_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现可以分类讨论。假设 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;#39;\)&lt;/span&gt; 中第一个异于 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的位置为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 中位置为 &lt;span class=&#34;math inline&#34;&gt;\(pos_x\)&lt;/span&gt;（不存在则 &lt;span class=&#34;math inline&#34;&gt;\(pos_x=k+1\)&lt;/span&gt;）。令 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 为若 &lt;span class=&#34;math inline&#34;&gt;\(1\sim i-1\)&lt;/span&gt; 均相同，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 位置可选的选项数。则 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 出现的次数：&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(pos_x&amp;lt;i\)&lt;/span&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(pos_x=i\)&lt;/span&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(pos_x&amp;gt;i,i&amp;lt;k\)&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\le a_i\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(1+f_i\cdot A_{n-i}^{k-i}\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_i\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\((f_i-1)\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}+A_{n-i}^{k-i}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x&amp;gt;a_i\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_i\cdot A_{n-i}^{k-i}\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_i\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;故，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，答案为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
&amp;amp;1+\left(\sum_{i=pos_x+1}^k f_i\cdot A_{n-i}^{k-i}\right)
+\sum_{i=1}^{pos_x} (f_i-[x&amp;lt; a_i])\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}+[x&amp;lt; a_i]\cdot A_{n-i}^{k-i}\\
=&amp;amp;1+\left(\sum_{i=pos_x+1}^k f_i\cdot A_{n-i}^{k-i}\right)
+\left(\sum_{i=1}^{pos_x} f_i\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}\right)+\sum_{i=1,a_i&amp;gt; x}^{pos_x}A_{n-i}^{k-i}-C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}\\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;预处理出 &lt;span class=&#34;math inline&#34;&gt;\(f_i=\sum\limits_{j=i+1}^k [a_j&amp;lt; a_i]\)&lt;/span&gt;（需要数据结构）、&lt;span class=&#34;math inline&#34;&gt;\(g_i=\sum\limits_{j=1}^i f_j\cdot A_{n-j}^{k-j}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(h_j=\sum\limits_{j=1}^i f_i\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}\)&lt;/span&gt;，再用数据结构计算 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=1,a_i&amp;gt;x}^{pos_x}C_{k-i}^1\cdot A_{n-i-1}^{k-i-1} - A_{n-i}^{k-i}\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(k + 1), p(n + 1, k + 1);
    for (int i = 1; i &amp;lt;= k; ++i)
        std::cin &amp;gt;&amp;gt; a[i], p[a[i]] = i;
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    &amp;#123;
        fac[0] = inv[0] = 1ll;
        for (int i = 1; i &amp;lt;= n; ++i)
            fac[i] = fac[i - 1] * i % mod;
        auto qkp = [](long long x, int y) &amp;#123;
            auto res(1ll);
            for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
                if (y &amp;amp; 1)
                    (res *= x) %= mod;
            return res;
        &amp;#125;;
        inv[n] = qkp(fac[n], mod - 2);
        for (int i = n - 1; i; --i)
            inv[i] = inv[i + 1] * (i + 1) % mod;
    &amp;#125;
    auto A = [&amp;amp;](int n, int m) &amp;#123;
        if (n &amp;lt; m || m &amp;lt; 0)
            return 0ll;
        return fac[n] * inv[n - m] % mod;
    &amp;#125;;
    std::vector&amp;lt;long long&amp;gt; f(k + 1), g(k + 1), h(k + 1);
    std::vector&amp;lt;long long&amp;gt; bit(n + 1);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            (bit[x] += v) %= mod;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        auto res(0ll);
        for (; x; x -= lowbit(x))
            (res += bit[x]) %= mod;
        return res;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (p[i] == k + 1)
            add(i, 1);
    for (int i = k; i; --i)
        f[i] = ask(a[i]), add(a[i], 1);
    for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
        g[i] = (g[i - 1] + f[i] * A(n - i, k - i)) % mod;
        h[i] = (h[i - 1] + f[i] * (k - i) % mod * A(n - i - 1, k - i - 1)) % mod;
        // printf(&amp;quot;%d: f = %lld, g = %lld, h = %lld\n&amp;quot;, i, f[i], g[i], h[i]);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; res(n + 1);
    bit.assign(n + 1, 0ll);
    auto s(0ll);
    for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
        // printf(&amp;quot;%d: %lld + %lld + %lld\n&amp;quot;, a[i], 1 + g[k] - g[i], h[i], s - ask(a[i]));
        res[a[i]] = (1 + g[k] - g[i] + h[i] + (s - ask(a[i]))) % mod;
        res[a[i]] = (res[a[i]] + mod) % mod;
        (s += A(n - i, k - i) - (k - i) * A(n - i - 1, k - i - 1)) %= mod;
        add(a[i], (A(n - i, k - i) - (k - i) * A(n - i - 1, k - i - 1)) % mod);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (p[i] == k + 1) &amp;#123;
            res[i] = (h[k] + (s - ask(i))) % mod;
            res[i] = (res[i] + mod) % mod;
        &amp;#125;
    for (int x = 1; x &amp;lt;= n; ++x)
        std::cout &amp;lt;&amp;lt; res[x] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---1-loop-bubble-sort&#34;&gt;C - 1 Loop Bubble Sort&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc187/tasks/arc187_c&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc187/tasks/arc187_c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先是被考烂了的：对序列进行一次冒泡排序，等价于将序列在前缀最大值处分段，并将其从段首移到段尾；且满足排序前为前缀最大值的元素，排序后仍为前缀最大值。&lt;/p&gt;
&lt;p&gt;考虑用 DP 解决问题。注意状态要从 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 的角度出发——假如 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 中不存在 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，发现也需要 DP。此时再设计有关 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 的状态就很扯淡了，考虑令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 中直到第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 位的前缀最大值为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数。为什么把前缀最大值作为状态呢？因为它可以表示分段；同时限制段间数的取值。具体地，考虑转移：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;若令 &lt;span class=&#34;math inline&#34;&gt;\(P_i=j\)&lt;/span&gt;，则在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处分段。对应到 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 中，&lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 位是上一个前缀最大值，那么这要求 &lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}&amp;lt;j\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}\)&lt;/span&gt; 是一个前缀最大值。也即：当 &lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}\ne -1\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\gets f_{i-1, Q_{i-1}}\)&lt;/span&gt;；否则，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\gets \sum\limits_{k&amp;lt;j} f_{i-1,k}\)&lt;/span&gt;。其中，二式都要求转移来源为前缀最大值。&lt;/li&gt;
&lt;li&gt;若令 &lt;span class=&#34;math inline&#34;&gt;\(P_i&amp;lt;j\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 中恰好前移一位，即 &lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}=P_i&amp;lt;j\)&lt;/span&gt;。则当 &lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}\ne -1\)&lt;/span&gt; 时，该位确定，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\gets f_{i-1,j}\)&lt;/span&gt;；否则，&lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}\)&lt;/span&gt; 可选的值为 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;j\)&lt;/span&gt; 的所有未选数（定值，可预处理）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于初值，可以在 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 前加一个 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 作为排列的一部分（那么按照冒泡排序的规则 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 的第一位也一定是 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;）来处理就好了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; q(n + 1), t(n + 1), c(n + 1), pos(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; q[i], c[i] = c[i - 1];
        if (q[i] == -1)
            ++c[i];
        else
            pos[q[i]] = i;
    &amp;#125;
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        // printf(&amp;quot;t[%d] = %d\n&amp;quot;, i, t[i]);
        if (!pos[i])
            for (int j = i + 1; j &amp;lt;= n; ++j)
                ++t[j];
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long long&amp;gt; (n + 1)), s(n + 1, std::vector&amp;lt;long long&amp;gt; (n + 1));
    f[0][0] = 1ll;
    s[0].assign(n + 1, 1ll);
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
            if (q[i - 1] == -1)
                f[i][j] = (s[i - 1][j - 1] + f[i - 1][j] * std::max(0, 1 + t[j] - c[i - 1])) % mod;
            else if (q[i - 1] &amp;lt; j)
                f[i][j] = (f[i - 1][q[i - 1]] + f[i - 1][j]) % mod;
            s[i][j] = s[i][j - 1];
            if (q[i] == j || !pos[j]) // 满足前缀最大值
                (s[i][j] += f[i][j]) %= mod;
            // printf(&amp;quot;f[%d][%d] = %lld\n&amp;quot;, i, j, f[i][j]);
        &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n][n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f---1.-intro&#34;&gt;(F - 1). Intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个大小为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的树，点有点权。给定 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次操作，分为两种：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;1 x&lt;/code&gt;：查询 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的点权。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 x d v&lt;/code&gt; 对于所有距 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 不超过 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的点，将它们的权值加上 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le 10^5,d\le 20\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 很小，我们可能需要枚举与 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 距离 &lt;span class=&#34;math inline&#34;&gt;\(0\sim d\)&lt;/span&gt; 的点进行修改；那么对距离 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的点的更改存储在 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,i}\)&lt;/span&gt;，查询 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 时就可以从 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_i f_{fa(v,i),i}\)&lt;/span&gt; 求得答案。&lt;/p&gt;
&lt;p&gt;考虑修改。记 &lt;span class=&#34;math inline&#34;&gt;\(S_{x,d}\)&lt;/span&gt; 为距 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的点集。&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 子树内是好处理的，但子树外的呢？发现 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa,d-1}\)&lt;/span&gt; 中 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 子树外的点，就是 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 子树下、&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 子树外距离 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的所有点。&lt;/p&gt;
&lt;p&gt;由于所有 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa(x,i),d-i}\)&lt;/span&gt; 无交，这可能满足我们每个待操作点被不重不漏加一次的要求。考虑将所有 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa(x,i),d-i}\)&lt;/span&gt; 标记出来：&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;1.png&#34; alt=&#34;粉色虚线框是待操作点集&#34; /&gt;&lt;figcaption&gt;粉色虚线框是待操作点集&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;然后我们可以一眼发现被叉的点和未被叉的待操作点是交错的！这意味着我们只需要再补充上所有 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa(x,i),d-i-1}\)&lt;/span&gt; 即可（显然它们之间、它们和所有 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa(x,i),d-i}\)&lt;/span&gt; 之间都不交）。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;2.png&#34; alt=&#34;虚线叉为 S_{fa(x,i),d-i-1}&#34; /&gt;&lt;figcaption&gt;虚线叉为 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa(x,i),d-i-1}\)&lt;/span&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;此时就可以不重不漏。当然，也会存在一些细节：比如说 &lt;span class=&#34;math inline&#34;&gt;\(fa(x,i)\)&lt;/span&gt; 不存在之类。只需要在根节点 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 处将剩余的 &lt;span class=&#34;math inline&#34;&gt;\(S_{1,i\to 0}\)&lt;/span&gt; 全部更新即可。&lt;/p&gt;
&lt;p&gt;故每次修改操作只需要修改 &lt;span class=&#34;math inline&#34;&gt;\(O(d)\)&lt;/span&gt; 坨点。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(qd)\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f.-distance-to-the-path&#34;&gt;F. Distance to the Path&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1749/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1749/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本例中将单点修改替换为路径修改；考虑树剖解决问题。&lt;/p&gt;
&lt;p&gt;对于路径上的所有点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，容易发现只需要修改所有的 &lt;span class=&#34;math inline&#34;&gt;\(S_{u,d}\)&lt;/span&gt; 就可以完成对『&lt;strong&gt;一部分路径内侧的点&lt;/strong&gt;』的修改。这『一部分』，是因为不包括距离 LCA &lt;span class=&#34;math inline&#34;&gt;\(\le d\)&lt;/span&gt; 的点。&lt;/p&gt;
&lt;p&gt;而『&lt;strong&gt;另一部分路径内侧的点&lt;/strong&gt;（距 LCA &lt;span class=&#34;math inline&#34;&gt;\(\le d\)&lt;/span&gt;：见上一行说明）』及『&lt;strong&gt;路径外侧的点&lt;/strong&gt;（距 LCA &lt;span class=&#34;math inline&#34;&gt;\(\le d\)&lt;/span&gt;：因为路径在 LCA 子树内，LCA 能够到最远的外侧点）』，等价于『&lt;strong&gt;距 LCA &lt;span class=&#34;math inline&#34;&gt;\(\le d\)&lt;/span&gt; 的点&lt;/strong&gt;』，只需要把 LCA 代入上例中方式修改即可。&lt;/p&gt;
&lt;p&gt;修改路径上所有点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(S_{u,d}\)&lt;/span&gt; 时，可以对所有 &lt;span class=&#34;math inline&#34;&gt;\(f_{*,i}\)&lt;/span&gt; 建立数据结构，由于只需要区间修改、单点查询，使用差分树状数组即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt; 
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), dep(n + 1), fa(n + 1), son(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int faa) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != faa) &amp;#123;
                fa[i] = x, dep[i] = dep[x] + 1;
                DFS(i, x);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::vector&amp;lt;int&amp;gt; dfn(n + 1), top(n + 1);
    DFS = [&amp;amp;](int x, int toop) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, top[x] = toop;
        if (son[x])
            DFS(son[x], toop);
        for (auto i : g[x])
            if (i != fa[x] &amp;amp;&amp;amp; i != son[x])
                DFS(i, i);
        return;
    &amp;#125;;
    DFS(1, 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; bit(21, std::vector&amp;lt;long long&amp;gt; (n + 1));
    auto lowbit = [&amp;amp;](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](auto &amp;amp;bit, int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] += v;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](auto &amp;amp;bit, int x) &amp;#123;
        auto res(0ll);
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    std::cin &amp;gt;&amp;gt; m;
    for (int op; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            int x;
            std::cin &amp;gt;&amp;gt; x;
            auto res(0ll);
            for (int i = 0; i &amp;lt;= 20 &amp;amp;&amp;amp; x; ++i, x = fa[x])
                res += ask(bit[i], dfn[x]);
            std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
        else &amp;#123;
            int x, y, v, d;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; v &amp;gt;&amp;gt; d;
            for (; top[x] != top[y]; x = fa[top[x]]) &amp;#123;
                if (dep[top[x]] &amp;lt; dep[top[y]])
                    std::swap(x, y);
                add(bit[d], dfn[top[x]], v);
                add(bit[d], dfn[x] + 1, -v);
            &amp;#125;
            if (dep[x] &amp;gt; dep[y])
                std::swap(x, y);
            add(bit[d], dfn[x] + 1, v), add(bit[d], dfn[y] + 1, -v);
            for (x = x, y = d; ~y &amp;amp;&amp;amp; x; x = fa[x], --y) &amp;#123;
                add(bit[y], dfn[x], v), add(bit[y], dfn[x] + 1, -v);
                if (y &amp;amp;&amp;amp; fa[x])
                    add(bit[y - 1], dfn[x], v), add(bit[y - 1], dfn[x] + 1, -v);
            &amp;#125;
            if (x == 0)
                for (; ~y; --y)
                    add(bit[y], dfn[1], v), add(bit[y], dfn[1] + 1, -v);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---ina-of-the-mountain&#34;&gt;A - Ina of the Mountain&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1852/C&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1852/C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑这么一个简化版的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(\{a_n\}\)&lt;/span&gt;，每次可以进行区间 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，问操作多少次才能将所有元素变为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;会想到差分；对原数组进行差分，一次操作相当于令 &lt;span class=&#34;math inline&#34;&gt;\(d_l\gets d_l-1\)&lt;/span&gt; 而 &lt;span class=&#34;math inline&#34;&gt;\(d_{r+1}\gets d_{r+1}+1\)&lt;/span&gt;，最后要让 &lt;span class=&#34;math inline&#34;&gt;\(\forall \,d_i=0\)&lt;/span&gt;。那么答案就是差分数组中正数之和嘛。&lt;/p&gt;
&lt;p&gt;回到原问题。原问题等价于把上述问题变为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(\{a_n\}\)&lt;/span&gt;，每次可以进行区间 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，每个数的总操作次数对 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 取模，问操作多少次才能将所有元素变为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;怎么套回到刚刚的问题上呢？还原被取模掉的操作即可。具体来说，提前在 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 上进行若干次操作（记为操作 1），形如令 &lt;span class=&#34;math inline&#34;&gt;\(d_i\gets d_i+k\)&lt;/span&gt;，同时 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\gets d_{i+1}-k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;会发现相邻的操作 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 对一个数加加减减影响判断；发现可以合并一段连续的操作 1，表现在 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 上也就是区间 &lt;span class=&#34;math inline&#34;&gt;\(+k\)&lt;/span&gt;。此时可以发现，一个位置上只会剩下若干次 &lt;span class=&#34;math inline&#34;&gt;\(+k\)&lt;/span&gt; 或若干次 &lt;span class=&#34;math inline&#34;&gt;\(-k\)&lt;/span&gt; （否则可以把 &lt;span class=&#34;math inline&#34;&gt;\(+k\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(-k\)&lt;/span&gt; 代表的不同操作合并），就不会有互相影响一说了。这也是有的题解说可以提前在 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 上区间 &lt;span class=&#34;math inline&#34;&gt;\(+k\)&lt;/span&gt; 的原因。&lt;/p&gt;
&lt;p&gt;此时问题变为在 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 进行任意次前加 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 后减 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的操作，使得 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{d_i&amp;gt;0}d_i\)&lt;/span&gt; 最大化。那么显然如果要使代价更小，只可能在原本 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;0\)&lt;/span&gt; 的位置做加法、&lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;0\)&lt;/span&gt; 的位置做减法（其他情况会发现一定不优）。考虑两个数 &lt;span class=&#34;math inline&#34;&gt;\(d_l,d_r\)&lt;/span&gt;，可以感受到对于一个 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，选最小的 &lt;span class=&#34;math inline&#34;&gt;\(d_l\)&lt;/span&gt; 是最优的，但什么时候应该选呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(d_l\le -k,d_r\ge k\)&lt;/span&gt;：当然可选，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 被完全利用，答案减少 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(d_l&amp;gt;-k,d_r\ge k\)&lt;/span&gt;：此时 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 未被完全利用，但必须选：选择其他更大的数，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的利用率只会更低；如果不选，答案也无法减少。&lt;/p&gt;
&lt;p&gt;Q：此时是否需要尝试找到一个 &lt;span class=&#34;math inline&#34;&gt;\(l&amp;#39;&amp;lt;l\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 做操作，使得 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 重新变为负数呢？&lt;/p&gt;
A：否。因为你可以将这两次操作合并，发现相当于是直接对 &lt;span class=&#34;math inline&#34;&gt;\((l&amp;#39;,r)\)&lt;/span&gt; 做操作，是更劣的。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(d_l\le -k,d_r&amp;lt;k\)&lt;/span&gt;：此时 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 未被完全利用，&lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 成为负数。这意味着 &lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 将会成为某个 &lt;span class=&#34;math inline&#34;&gt;\(r&amp;#39;\)&lt;/span&gt; 的可选项。考察 &lt;span class=&#34;math inline&#34;&gt;\(d_{r&amp;#39;}\)&lt;/span&gt; 可用的最小值。如果 &lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 在当前不应该作为右端点，它就一定会被 &lt;span class=&#34;math inline&#34;&gt;\(d_{r&amp;#39;}\)&lt;/span&gt; 选择。具体的有点抽象，但是你可以理解为 &lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 选了 &lt;span class=&#34;math inline&#34;&gt;\(d_l\)&lt;/span&gt; 的贡献是被整合到 &lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 里的；如果 &lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 被选了就说明 &lt;span class=&#34;math inline&#34;&gt;\(d_{r&amp;#39;}\)&lt;/span&gt; 选 &lt;span class=&#34;math inline&#34;&gt;\(d_l\)&lt;/span&gt; 会拥有更大的优势。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(d_l&amp;gt;-k,d_r&amp;lt;k\)&lt;/span&gt;：和上面的情况相似；但这种情况下答案可能反而变得更大，因为没有后效性，所以至少要保证单步最优。此时不能选。&lt;/p&gt;
&lt;p&gt;说到单步最优，就会发现这里就是反悔贪心；单步最优一定是全局最优，但更靠前的局部最优可能被否定掉。而『否定』的方法表现为一次操作。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，从前往后扫，优先队列实时维护负数最小值，对于每个正数，check 选最小值是否优于当前答案，有就选。如果正数被减为负，加入队列。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, k;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
        std::vector&amp;lt;int&amp;gt; a(n + 1), d(n + 1);
        long long res(0ll);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            std::cin &amp;gt;&amp;gt; a[i], a[i] %= k;
            d[i] = a[i] - a[i - 1];
            if (d[i] &amp;gt; 0)
                (res += d[i]);
        &amp;#125;
        std::priority_queue&amp;lt;int&amp;gt; q;
        for (int i = 1; i &amp;lt;= n; ++i)
            if (d[i] &amp;lt; 0)
                q.push(-d[i]);
            else &amp;#123;
                for (; !q.empty() &amp;amp;&amp;amp; d[i] &amp;gt; 0; ) &amp;#123;
                    int x = -q.top(), y = d[i];
                    auto t(res - y);
                    x += k, y -= k;
                    if (x &amp;gt; 0)
                        t += x;
                    if (y &amp;gt; 0)
                        t += y;
                    if (t &amp;gt;= res)
                        break;
                    q.pop();
                    res = t, d[i] = y;
                    if (d[i] &amp;lt; 0)
                        q.push(-d[i]);
                &amp;#125;
            &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---miriany-and-matchstick&#34;&gt;B - Miriany and Matchstick&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1852/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1852/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从构造的角度出发，看到『恰好为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;』，会想到找到上界和下界并证明中间每一个数都能取到。&lt;/p&gt;
&lt;p&gt;但似乎很容易证伪：例如对于 &lt;code&gt;AAAA&lt;/code&gt;，下界为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，上界为 &lt;span class=&#34;math inline&#34;&gt;\(4\)&lt;/span&gt;，但有且仅有 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 取不到。但该想法并未破产——可以感受到这样的位置很少。进一步地，你 &lt;a href=&#34;https://www.luogu.com.cn/article/2mmg5rjd&#34;&gt;可以证明只有一个这样的位置&lt;/a&gt;，也可以 &lt;a href=&#34;https://www.luogu.com.cn/article/679cwjgl&#34;&gt;大胆猜想这样的位置一定出现在 &lt;span class=&#34;math inline&#34;&gt;\(l+1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(r-1\)&lt;/span&gt;&lt;/a&gt;。总之现在我们的状态就减少了（或者说状态变成 DP 值了）。预处理出这个东西之后大力搜索找方案即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, k;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
        std::vector&amp;lt;int&amp;gt; a(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            char t;
            std::cin &amp;gt;&amp;gt; t, a[i] = (t == &amp;#39;A&amp;#39;);
            if (i &amp;gt;= 2)
                k -= (a[i] ^ a[i - 1]);
        &amp;#125;
        std::vector&amp;lt;std::array&amp;lt;std::tuple&amp;lt;int, int, int&amp;gt;, 2&amp;gt; &amp;gt; f(n + 1);
        f[n][0] = &amp;#123; a[n], a[n], 0 &amp;#125;, f[n][1] = &amp;#123; !a[n], !a[n], 0 &amp;#125;;
        auto merge = [&amp;amp;](int i, int l0, int r0, int p0, int l1, int r1, int p1) &amp;#123;
            if (l0 &amp;gt; l1)
                std::swap(l0, l1), std::swap(r0, r1), std::swap(p0, p1);
            int l = l0, r = std::max(r0, r1), p = 0;
            if (!p0 &amp;amp;&amp;amp; !p1) &amp;#123;
                if (r0 &amp;lt; l1 - 1)
                    assert(r0 == l1 - 2), p = r0 + 1;
                else;
            &amp;#125;
            else if (p0 &amp;amp;&amp;amp; p1) &amp;#123;
                if (p0 == p1)
                    p = p0;
                else &amp;#123;
                    int tag0 = (l1 &amp;lt;= p0 &amp;amp;&amp;amp; p0 &amp;lt;= r1), tag1 = (l0 &amp;lt;= p1 &amp;amp;&amp;amp; p1 &amp;lt;= r0);
                    if (!tag0 &amp;amp;&amp;amp; !tag1);
                    else if (!tag0)
                        p = p0;
                    else if (!tag1)
                        p = p1;
                    else;
                &amp;#125;
            &amp;#125;
            else if (p0) &amp;#123;
                if (l1 &amp;lt;= p0 &amp;amp;&amp;amp; p0 &amp;lt;= r1);
                else
                    p = p0;
            &amp;#125;
            else &amp;#123;
                if (l0 &amp;lt;= p1 &amp;amp;&amp;amp; p1 &amp;lt;= r0);
                else
                    p = p1;
            &amp;#125;
            assert(p != l &amp;amp;&amp;amp; p != r &amp;amp;&amp;amp; l &amp;lt;= r);
            return std::make_tuple(l, r, p);
        &amp;#125;;
        for (int i = n - 1; i; --i) &amp;#123;
            &amp;#123;
                auto [l0, r0, p0] = f[i + 1][0];
                auto [l1, r1, p1] = f[i + 1][1];
                if (a[i]) &amp;#123;
                    ++l0, ++r0, ++l1, ++r1;
                    if (p0) ++p0;
                    if (p1) ++p1;
                &amp;#125;
                ++l1, ++r1;
                if (p1) ++p1;
                f[i][0] = merge(i, l0, r0, p0, l1, r1, p1);
            &amp;#125;
            &amp;#123;
                auto [l0, r0, p0] = f[i + 1][0];
                auto [l1, r1, p1] = f[i + 1][1];
                if (!a[i]) &amp;#123;
                    ++l0, ++r0, ++l1, ++r1;
                    if (p0) ++p0;
                    if (p1) ++p1;
                &amp;#125;
                ++l0, ++r0;
                if (p0) ++p0;
                f[i][1] = merge(i, l0, r0, p0, l1, r1, p1);
            &amp;#125;
        &amp;#125;
        std::vector&amp;lt;int&amp;gt; res(n + 1);
        std::function&amp;lt;bool(int, int, int)&amp;gt; DFS = [&amp;amp;](int x, int cnt, int la) &amp;#123;
            if (x == n + 1)
                return cnt == k;
            auto [l0, r0, p0] = f[x][0];
            auto [l1, r1, p1] = f[x][1];
            if (cnt + (la == 1) + l0 &amp;lt;= k &amp;amp;&amp;amp; cnt + (la == 1) + r0 &amp;gt;= k &amp;amp;&amp;amp; (!p0 || cnt + (la == 1) + p0 != k) &amp;amp;&amp;amp; DFS(x + 1, cnt + (la == 1) + a[x], 0))
                res[x] = 0;
            else if (cnt + !la + l1 &amp;lt;= k &amp;amp;&amp;amp; cnt + !la + r1 &amp;gt;= k &amp;amp;&amp;amp; (!p1 || cnt + !la + p1 != k) &amp;amp;&amp;amp; DFS(x + 1, cnt + !la + !a[x], 1))
                res[x] = 1;
            else
                return false;
            return true;
        &amp;#125;;
        if (DFS(1, 0, -1)) &amp;#123;
            std::cout &amp;lt;&amp;lt; &amp;quot;YES\n&amp;quot;;
            for (int i = 1; i &amp;lt;= n; ++i)
                std::cout &amp;lt;&amp;lt; (res[i] ? &amp;#39;A&amp;#39; : &amp;#39;B&amp;#39;);
            std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
        else
            std::cout &amp;lt;&amp;lt; &amp;quot;NO\n&amp;quot;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="容斥原理" />
        <category term="树链剖分" />
        <category term="反悔贪心" />
        <updated>2025-05-10T02:18:21.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250421/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250421/"/>
        <content type="html">&lt;figure&gt;
&lt;img src=&#34;/20250421/neko.png&#34; alt=&#34;猫&#34; style=&#34;width: 75px&#34;&gt;
&lt;figcaption&gt;
猫
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---t-shirt&#34;&gt;A - T-shirt&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/183/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/183/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果知道一个衣服序列，怎么算出期望呢？&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---two-melodies&#34;&gt;B - Two Melodies&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/813/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/813/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示第一个以 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 结尾，第二个以 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 结尾的方案数，就会有一个弊端——假设现在有 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;gt;j\)&lt;/span&gt;，又假设有 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;lt;j&amp;#39;&amp;lt;i\)&lt;/span&gt;，那么就不可以直接把 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 转移到 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j&amp;#39;}\)&lt;/span&gt;，因为 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt; 可能已经被第一个选过了。但如果从 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 转移就没有这样的问题（不管 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;\)&lt;/span&gt; 是比 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 大还是比 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 小）。&lt;/p&gt;
&lt;p&gt;那就可以固定从较大的一维转移，也可以枚举所有情况。但是这样就会有一个问题，这是一个 &lt;span class=&#34;math inline&#34;&gt;\(n^3\)&lt;/span&gt; 的过程，而且对于不单调的内层 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，维护它的数值只能用带 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 的数据结构优化，似乎不太过得了；但 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 却可以前缀优化。&lt;/p&gt;
&lt;p&gt;其实，两个组是无序的，这意味着可以强制 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;gt;j\)&lt;/span&gt; 再从 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 转移；这个时候转移就和 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 没有太大的关系了，可以把 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 放到外层，对 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 前缀优化。可能需要注意边界的处理。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, res = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
    for (int j = 0; j &amp;lt; n; ++j) &amp;#123;
        std::vector&amp;lt;int&amp;gt; mx(100002), mmx(7);
        for (int i = 1; i &amp;lt; j; ++i) &amp;#123;
            mx[a[i]] = std::max(mx[a[i]], f[j][i]);
            mmx[a[i] % 7] = std::max(mmx[a[i] % 7], f[j][i]);
        &amp;#125;
        for (int i = j + 1; i &amp;lt;= n; ++i) &amp;#123;
            f[i][j] = std::max(&amp;#123; !!i + !!j, mx[a[i] - 1] + 1, mx[a[i] + 1] + 1, mmx[a[i] % 7] + 1, f[j][0] + 1 &amp;#125;);
            mx[a[i]] = std::max(mx[a[i]], f[i][j]);
            mmx[a[i] % 7] = std::max(mmx[a[i] % 7], f[i][j]);
            // printf(&amp;quot;f[%d][%d] = %d\n&amp;quot;, i, j, f[i][j]);
            res = std::max(res, f[i][j]);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cf633f-the-chocolate-spree&#34;&gt;CF633F The Chocolate Spree&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/633/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/633/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;树形 DP 求直径的时候，有一种方法是找到每个点下面的最大两条不交链。&lt;/p&gt;
&lt;p&gt;这里也可以有类似的求法。假设答案出现在子树 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 中（下面的 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 都是 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的直接儿子），可以讨论 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 参与构成两条路径的情况：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;不参与构成任何一条路径，答案是 &lt;span class=&#34;math inline&#34;&gt;\(v_1,v_2\)&lt;/span&gt; 子树中的最长路径之和。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参与构成其中一条：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;这一条与子树 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 完全相离，答案是 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 中最长路径，和 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下面不经过 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的最大两条不交链。&lt;/li&gt;
&lt;li&gt;这一条有一支来自 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 子树，但和 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 中最长路径没有重合的点。答案是 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的点权、&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下面不经过 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的最大链、&lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 中一条路径（不经过 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;）和 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 下面一条链之和的最大值；&lt;/li&gt;
&lt;li&gt;这一条两支都来自 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 子树：有重合，不可能发生。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参与构成其中两条，答案是 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下面最长的四条链：路径重复经过 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，不可能发生。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以记录 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下方最大的四条不交链、&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 中选取一条不经过 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的路径和 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下方一条链之和的最大值、&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 中最长路径求解。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp language-cpp&#34; data-line=&#34;42-44&#34;&gt;&lt;code class=&#34;cpp langauage-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&#34;.in&#34;, &#34;r&#34;, stdin);
    std::freopen(&#34;.out&#34;, &#34;w&#34;, stdout);
#endif
    int n;
    std::cin &gt;&gt; n;
    std::vector&amp;lt;int&gt; a(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; g(n + 1);
    for (int i = 1; i &lt;= n; ++i)
        std::cin &gt;&gt; a[i];
    for (int i = 1, x, y; i &lt; n; ++i) &amp;#123;
        std::cin &gt;&gt; x &gt;&gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    auto res(0ll);
    std::vector&amp;lt;long long&gt; s(n + 1), w(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;long long, int&gt; &gt; &gt; f(n + 1, std::vector&amp;lt;std::pair&amp;lt;long long, int&gt; &gt; (4));
    std::function&amp;lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &amp;#123;
        f[x][0] = &amp;#123; 0, x &amp;#125;;
        w[x] = s[x] = a[x];
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                &amp;#123;
                    if (f[i][0].first + a[i] &gt; f[x][3].first)
                        f[x][3].first = f[i][0].first + a[i], f[x][3].second = i;
                    std::sort(f[x].begin(), f[x].end(), std::greater&amp;lt;std::pair&amp;lt;long long, int&gt; &gt; ());
                &amp;#125;
                w[x] = std::max(w[x], w[i] + a[x]);
            &amp;#125;
        auto mx(0ll);
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                s[x] = std::max(&amp;#123; s[x], s[i], f[x][0].first + f[x][1].first + a[x] &amp;#125;);
                w[x] = std::max(w[x], (f[x][0].second != i ? f[x][0] : f[x][1]).first + s[i] + a[x]);
                res = std::max(&amp;#123; res,
                    mx + s[i], // 情况 1
                    (f[x][0].second == i ? f[x][1].first + f[x][2].first : (f[x][1].second == i ? f[x][0].first + f[x][2].first : f[x][0].first + f[x][1].first)) + s[i] + a[x], // 情况 2.1
                    (f[x][0].second == i ? f[x][1].first : f[x][0].first) + w[i] + a[x], // 情况 2.2
                &amp;#125;);
                mx = std::max(mx, s[i]);
            &amp;#125;
    //     printf(&#34;%d: res = %lld\n  f: \n&#34;, a[x], res);
    //     for (int i = 0; i &lt; 4; ++i)
    //         printf(&#34;    [%d] %lld\n&#34;, f[x][i].second, f[x][i].first);
    //     printf(&#34;  s: %lld\n  w: %lld\n&#34;, s[x], w[x]);
    &amp;#125;;
    DFS(1, -1);
    std::cout &lt;&lt; res &lt;&lt; &#39;\n&#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---巡逻&#34;&gt;C - 巡逻&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3629&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3629&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可能需要注意：目的是遍历所有边而非所有点。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(K=1\)&lt;/span&gt; 的时候，环上除了关键边的所有边经过次数会减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。所以选树的直径就可以最优。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(K=2\)&lt;/span&gt; 的时候，答案是 &lt;span class=&#34;math inline&#34;&gt;\(2\times (m + 2)\)&lt;/span&gt; 减去两个边构成的环的 &lt;em&gt;并集减交集&lt;/em&gt; 大小 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;。环实际上是不存在的，&lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 其实是两条路径 &lt;em&gt;并集减交集&lt;/em&gt; 再加上两条新边的值。&lt;/p&gt;
&lt;p&gt;两条路径有交的时候，可以等效成无交的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;就化归成上一个问题了。注意此时情况 3 可能发生；同时情况 2.2 可以选取经过 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的路径。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp language-cpp&#34; data-line=&#34;55-56,64-67&#34;&gt;&lt;code class=&#34;cpp langauage-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&#34;.in&#34;, &#34;r&#34;, stdin);
    std::freopen(&#34;.out&#34;, &#34;w&#34;, stdout);
#endif
    int n, k;
    std::cin &gt;&gt; n &gt;&gt; k;
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; g(n + 1);
    for (int i = 1, x, y; i &lt; n; ++i) &amp;#123;
        std::cin &gt;&gt; x &gt;&gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    int res = 0;
    if (k == 1) &amp;#123;
        std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&gt; &gt; &gt; f(n + 1, std::vector&amp;lt;std::pair&amp;lt;int, int&gt; &gt; (2));
        std::function&amp;lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &amp;#123;
            f[x][0] = &amp;#123; 0, x &amp;#125;;
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    DFS(i, x);
                    &amp;#123;
                        if (f[i][0].first + 1 &gt; f[x][1].first)
                            f[x][1].first = f[i][0].first + 1, f[x][1].second = i;
                        std::sort(f[x].begin(), f[x].end(), std::greater&amp;lt;std::pair&amp;lt;int, int&gt; &gt; ());
                    &amp;#125;
                &amp;#125;
            res = std::max(res, f[x][0].first + f[x][1].first);
        &amp;#125;;
        DFS(1, -1);
        std::cout &lt;&lt; 2 * n - res - 1 &lt;&lt; &#39;\n&#39;;
    &amp;#125;
    else &amp;#123;
        std::vector&amp;lt;int&gt; s(n + 1), w(n + 1);
        std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&gt; &gt; &gt; f(n + 1, std::vector&amp;lt;std::pair&amp;lt;int, int&gt; &gt; (4));
        std::function&amp;lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &amp;#123;
            f[x][0] = &amp;#123; 0, x &amp;#125;;
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    DFS(i, x);
                    &amp;#123;
                        if (f[i][0].first + 1 &gt; f[x][3].first)
                            f[x][3].first = f[i][0].first + 1, f[x][3].second = i;
                        std::sort(f[x].begin(), f[x].end(), std::greater&amp;lt;std::pair&amp;lt;int, int&gt; &gt; ());
                    &amp;#125;
                    w[x] = std::max(w[x], w[i] + 1);
                &amp;#125;
            &amp;#123;
                int t = 0;
                for (auto [v, id] : f[x])
                    t += v;
                res = std::max(res, t); // 情况 3
                w[x] = std::max(w[x], t - f[x][3].first); // 路径可经过 u
            &amp;#125;
            int mx = 0;
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    s[x] = std::max(&amp;#123; s[x], s[i], f[x][0].first + f[x][1].first &amp;#125;);
                    w[x] = std::max(w[x], (f[x][0].second != i ? f[x][0] : f[x][1]).first + std::max(s[i], f[i][0].first + 1));
                    res = std::max(&amp;#123; res,
                        mx + s[i], // 情况 1
                        (f[x][0].second == i ? f[x][1].first + f[x][2].first : (f[x][1].second == i ? f[x][0].first + f[x][2].first : f[x][0].first + f[x][1].first)) + s[i], // 情况 2.1
                        (f[x][0].second == i ? f[x][1].first : f[x][0].first) + w[i] + 1, // 情况 2.2
                    &amp;#125;);
                    mx = std::max(mx, s[i]);
                &amp;#125;
        &amp;#125;;
        DFS(1, -1);
        std::cout &lt;&lt; 2 * (n + 1) - res - 2 &lt;&lt; &#39;\n&#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---瞬间传送-teleport&#34;&gt;D - 瞬间传送 / Teleport&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11915&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11915&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要观察到一个很厉害的贪心策略：如果钦定所有点的距离不大于 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，且存在 &lt;span class=&#34;math inline&#34;&gt;\(d(i,j)&amp;gt;r\)&lt;/span&gt;。&lt;strong&gt;假设&lt;/strong&gt; 一种满足条件的新边是 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;（由于两者无序，不妨钦定 &lt;span class=&#34;math inline&#34;&gt;\(d(i,u)&amp;lt;d(i,v)\)&lt;/span&gt;），可以进行讨论：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(d(j,v)&amp;lt;d(j,u)\)&lt;/span&gt;：&lt;/p&gt;
此时最优路径为 &lt;span class=&#34;math inline&#34;&gt;\(i\to u\to v\to j\)&lt;/span&gt;，判断一下这种方案是否不大于 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 就可以了。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(d(j,v)\ge d(j, u)\)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;此时不管是走 &lt;span class=&#34;math inline&#34;&gt;\(i\to u\to v\to j\)&lt;/span&gt; 还是 &lt;span class=&#34;math inline&#34;&gt;\(i\to v\to u\to j\)&lt;/span&gt; 都不如走已经存在的 &lt;span class=&#34;math inline&#34;&gt;\(i\to u\to j\)&lt;/span&gt; 这条路径，也就是说如果要走新边，代价是一定比原距离大，更是比 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 大的；也就是说，&lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt; 不能解决 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 之间的问题，假设就不成立了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上，只需要判断 &lt;span class=&#34;math inline&#34;&gt;\(i\to u\to v\to j\le r\)&lt;/span&gt; 是否成立，就可以判断 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt; 是否合法。从大到小枚举 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，同时维护当前依然合法的 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;（显然是有单调性的），对于不合法的 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt;，枚举每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，维护 &lt;span class=&#34;math inline&#34;&gt;\(\max\{d(v,j)\}\)&lt;/span&gt;，精细实现（主要是利用各种均摊）一下就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这里具体提一下需要摊的几个点：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;枚举到 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的时候用所有 &lt;span class=&#34;math inline&#34;&gt;\(d(i,j)=r+1\)&lt;/span&gt; 把 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处的最大 &lt;span class=&#34;math inline&#34;&gt;\(d(v,j)\)&lt;/span&gt; 更新，方便后面 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 地 check。摊出来是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt; 的。&lt;/li&gt;
&lt;li&gt;枚举仍然处在合法队列里的 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;，如果 check 合法，就说明对于当前 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 至少存在一个合法解，就可以 &lt;code&gt;break&lt;/code&gt; 了；否则，把 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt; 弹出，继续 check 下一条边。这样每条边只会被弹出一次，而未弹出边的 check 次数最多是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;；加上 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的 check，摊出来是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt; 的。&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1, inf));
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                char t;
                std::cin &amp;gt;&amp;gt; t;
                if (t == &amp;#39;1&amp;#39; || i == j)
                    g[i][j] = t - &amp;#39;0&amp;#39;;
            &amp;#125;
        for (int k = 1; k &amp;lt;= n; ++k)
            for (int i = 1; i &amp;lt;= n; ++i)
                if (i != k)
                    for (int j = 1; j &amp;lt;= n; ++j)
                        if (j != i &amp;amp;&amp;amp; j != k)
                            g[i][j] = std::min(g[i][j], g[i][k] + g[k][j]);
        std::queue&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; q;
        std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; p(n + 1);
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; mx(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
        for (int i = 1; i &amp;lt; n; ++i)
            for (int j = i + 1; j &amp;lt;= n; ++j) &amp;#123;
                q.emplace(i, j);
                p[g[i][j] - 1].emplace_back(i, j);
            &amp;#125;
        auto check = [&amp;amp;](int u, int v, int r) &amp;#123;
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                if (g[u][i] &amp;gt; g[v][i])
                    std::swap(u, v);
                if (g[u][i] + mx[v][i] &amp;gt; r)
                    return false;
            &amp;#125;
            return true;
        &amp;#125;;
        for (int r = n; r &amp;gt;= -1; --r) &amp;#123;
            for (auto [i, j] : p[r])
                for (int v = 1; v &amp;lt;= n; ++v) &amp;#123;
                    mx[v][i] = std::max(mx[v][i], g[v][j]);
                    mx[v][j] = std::max(mx[v][j], g[v][i]);
                &amp;#125;
            for (; !q.empty(); ) &amp;#123;
                auto [u, v] = q.front();
                if (!check(u, v, r))
                    q.pop();
                else
                    break;
            &amp;#125;
            if (q.empty()) &amp;#123;
                std::cout &amp;lt;&amp;lt; r + 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
                break;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e.-two-tanks&#34;&gt;E. Two Tanks&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1809/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1809/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;果然还是不会简单 DP &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以观察到如果总水量相同，且某个时刻两种初始状态当前是相同状态，那么以后它们也会是相同状态。但光凭这个好像还是不太能做出来的样子 &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里大概算一个定式，对于类似这种两个元素总和不变的问题，可以把两个元素的容量画到数轴上，原点表示分界，当前水为一条定长线段，倒水就相当于左右平移这条线段：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;需要意识到，&lt;mark&gt;&lt;/mark&gt;&lt;/p&gt;
</content>
        <category term="DP" />
        <category term="贪心" />
        <category term="均摊" />
        <updated>2025-04-21T06:42:31.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250120/</id>
        <title>学习笔记：AC 自动机</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250120/"/>
        <content type="html">&lt;p&gt;耳机声音疑似有点小了，用心旷神怡的话来说大致会是「比果蝇↑嗡嗡声还小」。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;？卧槽耳机上居然可以调音量 &lt;img src=&#34;/em/oh.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;前置知识&#34;&gt;前置知识&lt;/h2&gt;
&lt;p&gt;首先可能需要知道专有名词「自动机」的含义。&lt;/p&gt;
&lt;p&gt;大致可以简单理解为，一个 DAG，其中点表示状态，边表示转移。给进去一个字符串之类，就可以在 DAG 上游走，根据最后所处结点，可以得到字符串相关特征。&lt;/p&gt;
&lt;p&gt;这个定义让我们想到了 Trie。事实上，Trie 就是一种相当基础的自动机。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;接下来，让我们复习 KMP 相关概念。&lt;/p&gt;
&lt;p&gt;假想一个场景：你需要求得 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中的出现次数。&lt;/p&gt;
&lt;p&gt;拥有一定题目经验的你，会使用 KMP 求出 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的 &lt;code&gt;next&lt;/code&gt; 数组，令 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 上进行匹配，失配或完全匹配时回到 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 在该处的 &lt;code&gt;next&lt;/code&gt;，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 上的指针始终向右，&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 上的指针如果向右，每次只能移动一位；如果向左，最左移到开头，均摊下来复杂度即为 &lt;span class=&#34;math inline&#34;&gt;\(O(|S| + |T|)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;假如场景变得更复杂：给定 &lt;span class=&#34;math inline&#34;&gt;\(\{T_m\}\)&lt;/span&gt;，你需要求出每个 &lt;span class=&#34;math inline&#34;&gt;\(T_j\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中的出现次数。&lt;/p&gt;
&lt;p&gt;那么如果我们对每个 &lt;span class=&#34;math inline&#34;&gt;\(T_j\)&lt;/span&gt; 进行一次 KMP，复杂度将会上升到 &lt;span class=&#34;math inline&#34;&gt;\(O(m|S|)\)&lt;/span&gt;，难以承受。有没有优化的方法呢？&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ac-自动机的建立&#34;&gt;AC 自动机的建立&lt;/h2&gt;
&lt;p&gt;结合上面的知识，我们下意识想到，能不能将 &lt;span class=&#34;math inline&#34;&gt;\(\{T_m\}\)&lt;/span&gt; 建成一个树状结构，令 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 在其上进行 KMP 呢？&lt;/p&gt;
&lt;p&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(\{T_m\}\)&lt;/span&gt; 全部加入 Trie，由于 &lt;code&gt;next&lt;/code&gt; 只会由更深的点指向更浅的点，似乎从直觉上是有规则的。但随之而来的是一个问题：点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;next&lt;/code&gt; 不一定在 &lt;span class=&#34;math inline&#34;&gt;\(\text{root}\to u\)&lt;/span&gt; 的链上（由于 Trie 的性质，可知指向的点是唯一的）。鉴于这一点不同，我们结合其「失配指针」的定义，将 &lt;code&gt;next&lt;/code&gt; 在 Trie 上的同分异构体唤为 &lt;code&gt;fail&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;考察 Trie 上该 &lt;code&gt;fail&lt;/code&gt; 边的性质。现欲求解 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 指向的 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;，结合 KMP 中 &lt;code&gt;next&lt;/code&gt; 的性质，假设 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的父节点的 &lt;code&gt;fail&lt;/code&gt; 边指向 &lt;span class=&#34;math inline&#34;&gt;\(v&amp;#39;\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的值为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(v&amp;#39;\)&lt;/span&gt; 上有边权相同的边，那么 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 就是该边指向的点。&lt;/li&gt;
&lt;li&gt;否则，前往 &lt;span class=&#34;math inline&#34;&gt;\(v&amp;#39;\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt;，重复以上判定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么就完成了失配的处理。相应地，完全匹配时的跳转应如何处理？直接将 &lt;code&gt;fail&lt;/code&gt; 的儿子全部接到 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下面即可。如果 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 和 &lt;code&gt;fail&lt;/code&gt; 具有同一个边权的边时，保留 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的这条边 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt;，因为 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 必定指向 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 的对应儿子。&lt;/p&gt;
&lt;p&gt;两点结合，我们发现从实现上，可以直接令 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 指向 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 的对应儿子（那么时间复杂度显而易见是 &lt;span class=&#34;math inline&#34;&gt;\(O(26\sum |T|)\)&lt;/span&gt; 的）。&lt;/p&gt;
&lt;p&gt;匹配时，对于每个点和其返回到根的 &lt;code&gt;fail&lt;/code&gt; 链，全部标记。则一个模式串匹配的次数即为被打标记的次数。&lt;/p&gt;
&lt;p&gt;那么可以发现 AC 自动机的本质就是添加了 &lt;code&gt;fail&lt;/code&gt; 边的 Trie。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;那么根据上述要求，我们需要按照深度顺序求得 &lt;code&gt;fail&lt;/code&gt;，考虑 BFS。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;哦哦好神奇复活之后记得啥是 KMP 但忘了啥是 C++ 了。甚至花了一点时间学习怎么创建一个函数？？？&lt;/p&gt;
&lt;p&gt;大家写 AC 自动机 Trie 根节点下标一定要设成 0 啊 &lt;img src=&#34;/em/ll.gif&#34; /&gt; 设成 1 被各种细节坑惨了 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
int T[maxn][26], tot, cnt[maxn], fail[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i], tail[i] = ins(t[i]);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    &amp;#123;
        int p = 0;
        for (auto i : s) &amp;#123;
            p = T[p][i - &amp;#39;a&amp;#39;];
            for (int fa = p; fa; fa = fail[fa])
                ++cnt[fa];
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; cnt[tail[i]] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;肉眼可见该查询方式是极其低效的，故考虑优化跳 &lt;code&gt;fail&lt;/code&gt; 打标记的过程。&lt;/p&gt;
&lt;p&gt;既然自动机结构不变，不如将跳 &lt;code&gt;fail&lt;/code&gt; 的步骤放在最后统一进行。容易在发现 &lt;code&gt;fail&lt;/code&gt; 树上进行拓扑排序转移即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
int T[maxn][26], tot, cnt[maxn], fail[maxn], deg[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i], tail[i] = ins(t[i]);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i], ++deg[T[fail[u]][i]];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    &amp;#123;
        int p = 0;
        for (auto i : s)
            p = T[p][i - &amp;#39;a&amp;#39;], ++cnt[p];
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 1; i &amp;lt;= tot; ++i)
            if (!deg[i])
                q.push(i);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            cnt[fail[u]] += cnt[u];
            if (!--deg[fail[u]])
                q.push(fail[u]);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; cnt[tail[i]] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ac-自动机的应用与识别&#34;&gt;AC 自动机的应用与识别&lt;/h2&gt;
&lt;p&gt;我们知道其最典型的特征是 &lt;strong&gt;多模式串&lt;/strong&gt;、&lt;strong&gt;静态 / 离线&lt;/strong&gt;。当碰到类似特点时，大概率就是 AC 自动机。&lt;/p&gt;
&lt;p&gt;其中，可以设置的难点有：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;字符串难点，和其他字符串题可设置的难点相同。&lt;/li&gt;
&lt;li&gt;fail 树维护，可能结合数据结构、拓扑排序、树形 DP 等考察。&lt;/li&gt;
&lt;li&gt;DP 的设计。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;字符串难点设计&#34;&gt;字符串难点设计&lt;/h2&gt;
&lt;h3 id=&#34;eg.-indie-album&#34;&gt;eg. Indie Album&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1207/G&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1207/G&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目的「可持久化」试图误导我们用操作串建立自动机，但这样就会有一个比较严重的问题，我们没办法求 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的出现次数。&lt;/p&gt;
&lt;p&gt;为了保证答案可求我们仍然在 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 上建立 ACAM。容易发现操作串以 Trie 形式给出，我们可以在遍历 Trie 时同时完成游走，通过回溯完成询问。&lt;/p&gt;
&lt;p&gt;假设当前 DFS 中，遍历到 Trie 树中的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 点和自动机中的 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 状态，那么对于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 点所对应的一个询问串 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，相当于询问经过的所有状态有多少个在 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 引导的 fail 树子树中。我们求出 fail 树的 dfn，用树状数组简单统计即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 4e5 + 5;
std::vector&amp;lt;int&amp;gt; g[maxn], q[maxn];
int fail[maxn], T[maxn][26], tot, bit[maxn], to[maxn][26], cnt[maxn];
int ins(std::string s) &amp;#123;
    int p = 0;
    for (auto i : s) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int lowbit(int x) &amp;#123;
    return x &amp;amp; -x;
&amp;#125;
void add(int x, int v) &amp;#123;
    for (; x &amp;lt;= tot + 1; x += lowbit(x))
        bit[x] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0;
    for (; x; x -= lowbit(x))
        res += bit[x];
    return res;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, now = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; id(n + 1);
    for (int i = 1, op; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            std::cin &amp;gt;&amp;gt; t;
            if (!to[0][t - &amp;#39;a&amp;#39;])
                to[0][t - &amp;#39;a&amp;#39;] = ++now;
            ++cnt[to[0][t - &amp;#39;a&amp;#39;]], id[i] = to[0][t - &amp;#39;a&amp;#39;];
        &amp;#125;
        else &amp;#123;
            int j; 
            std::cin &amp;gt;&amp;gt; j &amp;gt;&amp;gt; t;
            if (!to[id[j]][t - &amp;#39;a&amp;#39;])
                to[id[j]][t - &amp;#39;a&amp;#39;] = ++now;
            ++cnt[to[id[j]][t - &amp;#39;a&amp;#39;]], id[i] = to[id[j]][t - &amp;#39;a&amp;#39;];
        &amp;#125;
    &amp;#125;
    int m;
    std::cin &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; tail(m + 1), res(m + 1);
    for (int i = 1, x; i &amp;lt;= m; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; t, tail[i] = ins(t);
        q[id[x]].push_back(i);
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]), g[0].push_back(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v), g[fail[v]].push_back(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; dfn(tot + 1), rfn(tot + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now;
        // printf(&amp;quot;%d &amp;quot;, x);
        for (auto i : g[x])
            DFS(i);
        rfn[x] = now;
        return;
    &amp;#125;;
    DFS(0);
    std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int u) &amp;#123;
        add(dfn[u], 1);
        for (auto i : q[x])
            res[i] += ask(rfn[tail[i]]) - ask(dfn[tail[i]] - 1);
        for (int i = 0; i &amp;lt; 26; ++i)
            if (to[x][i])
                DFS1(to[x][i], T[u][i]);
        add(dfn[u], -1);
        return;
    &amp;#125;;
    DFS1(0, 0);
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;fail-树的维护&#34;&gt;fail 树的维护&lt;/h2&gt;
&lt;h3 id=&#34;eg.-divljak&#34;&gt;eg. Divljak&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5840&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5840&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;法一把动态问题离线&#34;&gt;法一：把动态问题离线&lt;/h4&gt;
&lt;p&gt;问题相当于将模式串 &lt;span class=&#34;math inline&#34;&gt;\(T:\{P\}\)&lt;/span&gt; 动态化，但我们仍可以无脑离线下来解决问题。&lt;/p&gt;
&lt;p&gt;考虑原本的答案计算过程，即在经过的所有状态及其 fail 链上打标记。现在我们需要离线并区分标记的来源（并且标记类型为布尔值），下意识想到使用线段树维护。&lt;/p&gt;
&lt;p&gt;我们对每个状态建立动态开点线段树，最后拓扑排序时使用线段树合并处理信息。容易证明时间复杂度相较原来多了一个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;理论可行，开始实践&lt;/del&gt; 出题人似乎不是很喜欢线段树选手所以决定剥夺你的 Memory Limit。想要用这种做法通过本题可见 &lt;a href=&#34;https://www.luogu.com.cn/article/jaxk3sno&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/article/jaxk3sno&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;法二转而处理静态问题&#34;&gt;法二：转而处理静态问题&lt;/h4&gt;
&lt;p&gt;注意到题目中的静态的 &lt;span class=&#34;math inline&#34;&gt;\(S_x\)&lt;/span&gt; 比起 &lt;span class=&#34;math inline&#34;&gt;\(T:\{P\}\)&lt;/span&gt; 更适合用来做模式串，我们在 &lt;span class=&#34;math inline&#34;&gt;\(S_x\)&lt;/span&gt; 上构建 AC 自动机，考虑在线解决问题。&lt;/p&gt;
&lt;p&gt;在每次 &lt;code&gt;1&lt;/code&gt; 操作时，更新模式串信息。对于途径的所有状态 &lt;span class=&#34;math inline&#34;&gt;\(\{u\}\)&lt;/span&gt;，考虑更新其所在 fail 链上的信息。&lt;/p&gt;
&lt;p&gt;注意到我们需要修改整条 fail 链上的信息，询问则是询问单点。这个时候可以考虑使用树上差分。&lt;/p&gt;
&lt;p&gt;但是 here comes a problem，我们对于这一整个串只能在整个树上每个点上更新一次。怎么消去相同的影响呢？&lt;/p&gt;
&lt;p&gt;这里实现上我们将经过的点按 fail 树上 dfn 排序，并且对于序列中相邻的两点在其 LCA 上减去一次标记。为什么这是正确的呢？参考虚树，我们只需要让序列中相邻的两个点尽量近就可以保证重复的被删除完毕。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e6 + 5;
int tot, bit[maxn], T[maxn][26], fail[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int lowbit(int x) &amp;#123;
    return x &amp;amp; -x;
&amp;#125;
void add(int x, int v) &amp;#123;
    // printf(&amp;quot;add (%d, %d)\n&amp;quot;, x, v);
    for (; x &amp;lt;= tot + 1; x += lowbit(x))
        bit[x] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0, to = x;
    for (; x; x -= lowbit(x))
        res += bit[x];
    // printf(&amp;quot;ask(%d) = %d\n&amp;quot;, to, res);
    return res;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, q;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t, tail[i] = ins(t);
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(tot + 2);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
        for (int i = 1; i &amp;lt;= tot; ++i)
            g[fail[i] + 1].push_back(i + 1);
    &amp;#125;
    std::vector&amp;lt;std::array&amp;lt;int, 22&amp;gt; &amp;gt; f(tot + 2);
    std::vector&amp;lt;int&amp;gt; dep(tot + 2), dfn(tot + 2), siz(tot + 2);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        siz[x] = 1, dfn[x] = ++now;
        // printf(&amp;quot;%d\n&amp;quot;, x);
        for (auto i : g[x]) &amp;#123;
            dep[i] = dep[x] + 1;
            f[i][0] = x;
            for (int j = 1; j &amp;lt;= 21; ++j)
                f[i][j] = f[f[i][j - 1]][j - 1];
            DFS(i), siz[x] += siz[i];
        &amp;#125;
        return;
    &amp;#125;;
    dep[1] = 1, DFS(1);
    auto askLCA = [&amp;amp;](int x, int y) &amp;#123;
        if (x == y)
            return x;
        if (dep[x] &amp;lt; dep[y])
            std::swap(x, y);
        for (int i = 21; ~i; --i)
            if (dep[f[x][i]] &amp;gt;= dep[y])
                x = f[x][i];
        if (x == y)
            return x;
        for (int i = 21; ~i; --i)
            if (f[x][i] != f[y][i])
                x = f[x][i], y = f[y][i];
        return f[x][0];
    &amp;#125;;
    std::cin &amp;gt;&amp;gt; q;
    for (; q--; ) &amp;#123;
        int op;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            std::string s;
            std::cin &amp;gt;&amp;gt; s;
            int p = 0, len = (int)s.length();
            std::vector&amp;lt;int&amp;gt; id(len + 1);
            for (int i = 1; i &amp;lt;= len; ++i)
                p = T[p][s[i - 1] - &amp;#39;a&amp;#39;], id[i] = p + 1;
            std::sort(id.begin() + 1, id.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
            // for (int i = 1; i &amp;lt;= len; ++i)
            //     printf(&amp;quot;%d &amp;quot;, id[i]);
            // puts(&amp;quot;&amp;quot;);
            for (int i = 1; i &amp;lt;= len; ++i) &amp;#123;
                // printf(&amp;quot;%d %d %d\n&amp;quot;, i, id[i], dfn[id[i]]);
                // assert(0);
                add(dfn[id[i]], 1);
                if (i != 1)
                    add(dfn[askLCA(id[i], id[i - 1])], -1);
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            int x;
            std::cin &amp;gt;&amp;gt; x;
            x = tail[x] + 1;
            std::cout &amp;lt;&amp;lt; ask(dfn[x] + siz[x] - 1) - ask(dfn[x] - 1) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ac-自动机上的-dp&#34;&gt;AC 自动机上的 DP&lt;/h2&gt;
&lt;p&gt;鉴于 AC 自动机的优秀结构与性质，并不经常作为字符串匹配工具出现，其一个应用是作为 DP 的载体。&lt;/p&gt;
&lt;h3 id=&#34;eg1.-l-语言&#34;&gt;eg1. L 语言&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2292&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2292&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们想到要在自动机上匹配，但此时 &lt;code&gt;fail&lt;/code&gt; 作为「断句」的唯一手段（断句的位置在链上当前点深度 - &lt;code&gt;fail&lt;/code&gt; 深度处），不再仅当失配时才能经过。我们考虑朴素的 DP：在经过的每个状态考虑断句，那么这要求断句处是一个单词的结尾，那么此时 &lt;code&gt;fail&lt;/code&gt; 最长匹配长度即可被更新。最后遍历所有单词的末结点，取最大答案。这里的 &lt;code&gt;fail&lt;/code&gt; 其实是 &lt;code&gt;fail&lt;/code&gt; 链上任意一点。&lt;/p&gt;
&lt;p&gt;考虑复杂度。容易发现对于每一个点我们跳了其整条 fail 链，那么复杂度就是最劣 &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 的。考虑优化这个过程至 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;题目里有一个很重要的条件还没有用到：单个单词长度 &lt;span class=&#34;math inline&#34;&gt;\(\le 20\)&lt;/span&gt;，这让我们想到状态压缩。对于每一个状态，记录其断出来单词的可能长度。&lt;/p&gt;
&lt;p&gt;我们在 DAG 上游走的时候记录目前可以断的所有位置，如果其和当前可断出来的长度之交不为空，就可以将此处加入「可以断的所有位置」并更新答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
int T[maxn][26], tot, fail[maxn], len[maxn], dep[maxn], tag[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot, dep[tot] = dep[p] + 1;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    ++tag[p];
    return p;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i], tail[i] = ins(t[i]);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            len[u] = len[fail[u]];
            if (tag[u])
                len[u] |= (1 &amp;lt;&amp;lt; dep[u]);
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    for (; m--; ) &amp;#123;
        std::string s;
        std::cin &amp;gt;&amp;gt; s;
        int p = 0, q = 1, res = 0;
        for (int i = 0; i &amp;lt; (int)s.length(); ++i) &amp;#123;
            p = T[p][s[i] - &amp;#39;a&amp;#39;], q &amp;lt;&amp;lt;= 1;
            if (len[p] &amp;amp; q)
                q |= 1, res = i + 1;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;eg2.-popcount-words&#34;&gt;eg2. Popcount Words&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/gym/103409/problem/H&#34; class=&#34;uri&#34;&gt;https://codeforces.com/gym/103409/problem/H&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;咋上强度了啊。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;先把整个序列写出来，即 &lt;span class=&#34;math inline&#34;&gt;\(w=\texttt{01101001100101}\cdots\)&lt;/span&gt;，尝试进一步探究形式化的规律，可以得到：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_{[0, 2^n), 0}=w_{[0, 2^{n-1}),0}+w_{[0, 2^n), 1}\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(w_{[l, r], 0/1}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 内，原串 / 取反的值。&lt;/li&gt;
&lt;li&gt;对于不以 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 开头的整段，可以从上述规则转化为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 开头的整段。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接着不难想到一种类似线段树的方式，将待求的 &lt;span class=&#34;math inline&#34;&gt;\(w_{[l, r], 0}\)&lt;/span&gt; 分到 &lt;span class=&#34;math inline&#34;&gt;\(O(\log V)\)&lt;/span&gt; 个整段上，那么 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 就可以被 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log V)\)&lt;/span&gt; 个整段（也是 &lt;span class=&#34;math inline&#34;&gt;\(\log V\)&lt;/span&gt; 个本质不同整段）描述。&lt;/p&gt;
&lt;p&gt;我们对 &lt;span class=&#34;math inline&#34;&gt;\({p_m}\)&lt;/span&gt; 建立 AC 自动机，需要知道这 &lt;span class=&#34;math inline&#34;&gt;\(\log V\)&lt;/span&gt; 个整段在每个点上的出现次数。对于自动机上任意状态 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，设 &lt;span class=&#34;math inline&#34;&gt;\(to_{u, n, 0/1}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 经过 &lt;span class=&#34;math inline&#34;&gt;\(w_{[0, 2^n), 0/1}\)&lt;/span&gt; 后到达的点，则可倍增（嘶，这里是不是应该反过来叫分治啊）简单解决。&lt;/p&gt;
&lt;p&gt;那么接下来我们就可以用 &lt;span class=&#34;math inline&#34;&gt;\(to\)&lt;/span&gt; 来进行快速游走了。顺便打个 &lt;span class=&#34;math inline&#34;&gt;\(cnt\)&lt;/span&gt; 记录一下每个 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 作为不同整段的开头被经过的次数。然后做一个 DP，类似于线段树上 &lt;code&gt;pushdown&lt;/code&gt; 的操作把所有整段下放到单点上的单个字符。&lt;/p&gt;
&lt;p&gt;有一说一用 DP 来处理这个东西还挺难想的。可能也是基于前面的倍增吧。最后拓扑排序就行了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;大家数组一定要用 C-style array 啊，&lt;code&gt;std::vector&amp;lt;&amp;gt;&lt;/code&gt; 计算的是申请空间包 MLE 的 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;大家大数组一定要内存连续访问优化啊，TLE &lt;span class=&#34;math inline&#34;&gt;\(\to\)&lt;/span&gt; 100ms 泪目了 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 5e5 + 5;
long long sum[maxn], f[2][30][maxn];
int cnt[2][30][maxn], to[2][30][maxn];
int T[maxn][2], tot, fail[maxn], deg[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;0&amp;#39;])
            T[p][i - &amp;#39;0&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;0&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
void ask(std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;amp;s, int ql, int qr, int l = 0, int r = (1 &amp;lt;&amp;lt; 30) - 1, int len = 30, int v = 0) &amp;#123;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr) &amp;#123;
        s.emplace_back(len, v);
        return;
    &amp;#125;
    int mid = l + (r - l) / 2;
    if (ql &amp;lt;= mid)
        ask(s, ql, qr, l, mid, len - 1, v);
    if (qr &amp;gt; mid)
        ask(s, ql, qr, mid + 1, r, len - 1, v ^ 1);
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; s;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        int l, r;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        ask(s, l, r);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tail(m + 1);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t;
        tail[i] = ins(t);
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 2; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 2; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i], ++deg[T[fail[u]][i]];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    for (int i = 0; i &amp;lt;= tot; ++i)
        to[0][0][i] = T[i][0], to[1][0][i] = T[i][1];
    for (int j = 1; j &amp;lt; 30; ++j)
        for (int i = 0; i &amp;lt;= tot; ++i) &amp;#123;
            to[0][j][i] = to[1][j - 1][to[0][j - 1][i]];
            to[1][j][i] = to[0][j - 1][to[1][j - 1][i]];
        &amp;#125;
    &amp;#123;
        int p = 0;
        for (auto [n, i] : s) &amp;#123;
            // printf(&amp;quot;# %d %d\n&amp;quot;, n, i);
            ++cnt[i][n][p], p = to[i][n][p];
        &amp;#125;
    &amp;#125;
    for (int j = 29; ~j; --j)
        for (int i = 0; i &amp;lt;= tot; ++i) &amp;#123;
            if (j != 29) &amp;#123;
                f[0][j][i] += f[0][j + 1][i];
                f[1][j][i] += f[1][j + 1][i];
                f[0][j][to[1][j][i]] += f[1][j + 1][i];
                f[1][j][to[0][j][i]] += f[0][j + 1][i];
            &amp;#125;
            f[1][j][i] += cnt[1][j][i];
            f[0][j][i] += cnt[0][j][i];
        &amp;#125;
    for (int i = 0; i &amp;lt;= tot; ++i) &amp;#123;
        sum[T[i][0]] += f[0][0][i], sum[T[i][1]] += f[1][0][i];
        // printf(&amp;quot;%d %d\n&amp;quot;, f[i][0][0], f[i][0][1]);
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt;= tot; ++i)
            if (!deg[i])
                q.push(i);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            sum[fail[u]] += sum[u];
            if (!--deg[fail[u]])
                q.push(fail[u]);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; sum[tail[i]] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;eg3.-legen&#34;&gt;eg3. Legen…&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/696/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/696/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先在 fail 树上把每个状态的实际价值计算出来。我们发现匹配串是未知的，也就是我们需要主动决定游走路径。注意到 &lt;span class=&#34;math inline&#34;&gt;\(l=10^{14}\)&lt;/span&gt;，考虑矩阵。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{u, i}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 状态时已经走了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 步，可以得到的最大价值。那么显然有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{v,i+1}=f_{u,i}+s_v.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 是自动机上 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的任意出边。图的大小为 &lt;span class=&#34;math inline&#34;&gt;\(200\)&lt;/span&gt;，可以放到 &lt;span class=&#34;math inline&#34;&gt;\(+\max\)&lt;/span&gt; 矩阵里加速转移。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
const long long inf = 1e18;
int fail[maxn], T[maxn][26], tot;
int ins(std::string s) &amp;#123;
    int p = 0;
    for (auto i : s) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
struct matrix &amp;#123;
    int n, m;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; a;
    matrix(int n1, int m1, long long v = -inf, bool op = 0): n(n1), m(m1), a(n + 1, std::vector&amp;lt;long long&amp;gt; (m + 1, v)) &amp;#123;
        if (op)
            for (int i = 0; i &amp;lt;= n; ++i)
                a[i][i] = 0;
        return;
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; &amp;amp;operator[] (int i) &amp;#123;
        return a[i];
    &amp;#125;
    matrix operator* (matrix &amp;amp;q) const &amp;#123;
        matrix res(n, q.m);
        for (int k = 0; k &amp;lt;= m; ++k)
            for (int i = 0; i &amp;lt;= n; ++i)
                for (int j = 0; j &amp;lt;= q.m; ++j)
                    res[i][j] = std::max(res[i][j], a[i][k] + q[k][j]);
        return res;
    &amp;#125;
    matrix&amp;amp; operator*= (matrix q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
    matrix operator^ (long long q) &amp;#123;
        matrix res(n, n, -inf, 1), x(*this);
        for (; q; q &amp;gt;&amp;gt;= 1, x *= x)
            if (q &amp;amp; 1)
                res *= x;
        return res;
    &amp;#125;
&amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    long long m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; t[i];
        tail[i] = ins(t[i]);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; s(tot + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        s[tail[i]] += a[i];
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]); 
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i], s[v] += s[fail[v]];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    matrix f(0, tot), op(tot, tot);
    f[0][0] = 0;
    for (int i = 0; i &amp;lt;= tot; ++i)
        for (int j = 0; j &amp;lt; 26; ++j)
            op[i][T[i][j]] = s[T[i][j]];
    f *= (op * m);
    std::cout &amp;lt;&amp;lt; *std::max_element(f[0].begin(), f[0].end()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;eg4.-you-are-given-some-strings&#34;&gt;eg4. You Are Given Some Strings…&lt;/h3&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250121/#%E4%B8%80%E4%B8%AA%E6%A8%A1%E6%9D%BFcf1202e-you-are-given-some-strings...&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;
</content>
        <category term="DP" />
        <category term="字符串" />
        <category term="AC 自动机" />
        <updated>2025-01-20T03:21:15.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240906/</id>
        <title>动态规划 10 题 - I</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240906/"/>
        <content type="html">&lt;p&gt;现在是 10 题。虽然看着很掉价，但是写够了 10 就改成 20 题。以此类推，免得我摆烂（）&lt;/p&gt;
&lt;p&gt;自用向，不写太详细，把破题点写出来就差不多了。哦哦这里的破题是动词不是名词。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;字符合并&#34;&gt;1. 字符合并&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3736&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3736&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(01\)&lt;/span&gt; 串和 &lt;span class=&#34;math inline&#34;&gt;\(2^k\)&lt;/span&gt; 条规则，第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 条规则形如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于序列中的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位二进制数 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，可以将它合并为 &lt;span class=&#34;math inline&#34;&gt;\(c(c\in\{0,1\})\)&lt;/span&gt;，并产生 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的价值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进行任意次合并，求出能取得的最大总价值。&lt;span class=&#34;math inline&#34;&gt;\(n\le 300,k\le 8\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;状压&lt;/strong&gt;，&lt;strong&gt;区间 DP&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;注意到 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 只有 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt;，独特的输入方式也引导我们注意到状态数为 &lt;span class=&#34;math inline&#34;&gt;\(10^2\)&lt;/span&gt; 级别。合并的背景又让我们本能想到区间 DP，所以刚好盲猜这题是个 &lt;span class=&#34;math inline&#34;&gt;\(O(2^k\times n^2)\)&lt;/span&gt; 的区间状压 DP。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;然后我觉得最神的一个地方是什么呢？最后的答案一定是一个长度小于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的串，&lt;mark&gt;每位展开还原，可以知道，每个合并操作选取的区间可能包含但不相交。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;看起来很蠢很显然，但这是我们 &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 区间 DP 的基础啊（（（&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后我们区间 DP 套路，枚举对于 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 最左边一位，然后就可以开始大力转移了。&lt;/p&gt;
&lt;p&gt;但是这里我们会发现，这一位原本的样子有点多，可以是任何一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(1 + d\times (k-1)\)&lt;/span&gt; 的数，所以只能再来一层 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac nk\)&lt;/span&gt; 的枚举，极限情况是个有点难绷的 3e9，作为正解只能说这个数据范围的提示性有点令人难评了。&lt;/p&gt;
&lt;p&gt;实现着实现着把自己整懵了：&lt;code&gt;00000&lt;/code&gt; 和 &lt;code&gt;0&lt;/code&gt; 压出来都是 &lt;code&gt;0&lt;/code&gt;，但二者代表的含义显然不同，又无法简单区别。但其实&lt;mark&gt;长度为 &lt;span class=&#34;math inline&#34;&gt;\(1+d\times (k-1)\)&lt;/span&gt; 的区间和长度为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的最终结果是一一对应的，所以在我们设计的包含了区间作右端点的状态中，压出来的就是我们想要的那个。&lt;/mark&gt;&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;这里的实现比&lt;strong&gt;所有&lt;/strong&gt;我找到的题解都更像人打出来的。导致我想对比疗法都找不到合适的代码 &lt;img src=&#34;/em/lh.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;换言之，这最像是一份通常的区间 DP 代码，不存在其他题解中乱七八糟的填表啊相互影响啊之类的恶心 feature。&lt;/p&gt;
&lt;p&gt;sto rybp orz&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 305;
const int maxm = (1 &amp;lt;&amp;lt; 8) + 5;
char a[maxn];
int c[maxm], w[maxm];
long long f[maxn][maxn][maxm];
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#else
    freopen(&amp;quot;in.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;out.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    int siz = (1 &amp;lt;&amp;lt; k), si = (1 &amp;lt;&amp;lt; (k - 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 0; i &amp;lt; siz; ++i)
        std::cin &amp;gt;&amp;gt; c[i] &amp;gt;&amp;gt; w[i];
    memset(f, -0x3f, sizeof(f));
    for (int l = 1; l &amp;lt; k; ++l)
        for (int i = 1; i &amp;lt;= n - l + 1; ++i) &amp;#123;
            int j = i + l - 1, now = 0;
            for (int p = i; p &amp;lt;= j; ++p)
                now = now * 2 + a[p] - &amp;#39;0&amp;#39;;
            f[i][j][now] = 0;
        &amp;#125;
    for (int i = 1; i &amp;lt;= n - k + 1; ++i) &amp;#123;
        int now = 0;
        for (int j = i; j &amp;lt;= i + k - 1; ++j)
            now = now * 2 + a[j] - &amp;#39;0&amp;#39;;
        f[i][i + k - 1][c[now]] = w[now];
    &amp;#125;
    for (int l = k + 1; l &amp;lt;= n; ++l)
        for (int i = 1; i &amp;lt;= n - l + 1; ++i) &amp;#123;
            int j = i + l - 1;
            for (int p = i; p &amp;lt; j; p += k - 1) &amp;#123;
                for (int q = 0; q &amp;lt; si; ++q)
                    if (!(q &amp;gt;&amp;gt; ((l - 1) % (k - 1) + 1)))
                        f[i][j][q] = std::max(f[i][j][q], f[i][p][q &amp;gt;&amp;gt; ((l - 1) % (k - 1))] + f[p + 1][j][q &amp;amp; ((1 &amp;lt;&amp;lt; ((l - 1) % (k - 1))) - 1)]);
                if (l % (k - 1) == 1 || k == 2)
                    for (int q = 0; q &amp;lt; siz; ++q)
                        f[i][j][c[q]] = std::max(f[i][j][c[q]], f[i][p][q &amp;gt;&amp;gt; (k - 1)] + f[p + 1][j][q &amp;amp; ((1 &amp;lt;&amp;lt; (k - 1)) - 1)] + w[q]);
            &amp;#125;
        &amp;#125;
    std::cout &amp;lt;&amp;lt; *std::max_element(f[1][n], f[1][n] + si) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;其实一开始挺担心会不会因为写博客影响做题时间之类的。&lt;/p&gt;
&lt;p&gt;直到发现我可以看知乎看一个上午然后代码动都不动一下 &lt;img src=&#34;/em/lh.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;mod-mod-mod&#34;&gt;2. Mod Mod Mod&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/889/problem/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/889/problem/E&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，对于所有非负整数 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 定义 &lt;span class=&#34;math inline&#34;&gt;\(f(x,n)=x\bmod a_n\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(f(x,i)=x\bmod a_i+f(x\bmod a_i,i+1)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;求 &lt;span class=&#34;math inline&#34;&gt;\(f(x,1)\)&lt;/span&gt; 最大值。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;技巧 / 特殊性质类 DP&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;小神题。注意到题意可以转化为，找到一个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，最大化：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
x\bmod a_1 + x\bmod a_1\bmod a_2 + \cdots + x\bmod a_1\bmod a_2\bmod\cdots\bmod a_n.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;简称 &lt;span class=&#34;math inline&#34;&gt;\(x\bmod a_1\bmod a_2\bmod \cdots\bmod a_i\)&lt;/span&gt; 的值为 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这个时候我们不难注意到，&lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 肯定是&lt;mark&gt;单调不升&lt;/mark&gt;的。形象化地，整个 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 序列肯定是由若干个单调下降的段组成的。并且，&lt;mark&gt;必定存在至少一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(f_i = a_i-1\)&lt;/span&gt;，否则可以将所有 &lt;span class=&#34;math inline&#34;&gt;\(f_i\gets f_i+1\)&lt;/span&gt;，同时 &lt;span class=&#34;math inline&#34;&gt;\(\sum f\gets (\sum f) + n\)&lt;/span&gt;&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;这启示我们关注 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 的值域。假设已经确定了 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 序列的一个前缀 &lt;span class=&#34;math inline&#34;&gt;\(f_1\sim i\)&lt;/span&gt;，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(0\le k\le f_{\min}\)&lt;/span&gt;（注意由于单调不降，&lt;span class=&#34;math inline&#34;&gt;\(f_{\min} = f_i\)&lt;/span&gt;），我们可以将所有 &lt;span class=&#34;math inline&#34;&gt;\(f_j\gets f_j-k\)&lt;/span&gt;，得到一个新的合法的 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;_{1\sim i}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;形象化地，将 &lt;span class=&#34;math inline&#34;&gt;\(f_{1\sim i}\)&lt;/span&gt; 想象为一个逐渐降低的柱状图，任意切去了一个高度的底部，并且这个高度不高于最矮的元素（即第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个元素）。&lt;/p&gt;
&lt;p&gt;这时候有一个很美妙的性质，就是我们&lt;mark&gt;对于切之前和切之后的柱状图，其 &lt;strong&gt;最矮元素以上的部分&lt;/strong&gt; 长得完全相同&lt;/mark&gt;。然后就是神中神之 DP 状态设计。很难想象是在什么样的精神状态下凑出来这种神奇状态的，可能是某种我不了解的 trick？&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i, j}\)&lt;/span&gt; 表示对于前缀 &lt;span class=&#34;math inline&#34;&gt;\(f_{1, i}\)&lt;/span&gt;，当切去的高度为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim j\)&lt;/span&gt; 时，&lt;strong&gt;最矮元素以上的部分&lt;/strong&gt; 的和都为 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i, j}\)&lt;/span&gt;。那么易得 &lt;span class=&#34;math inline&#34;&gt;\(\sum f_{1\sim i}=j\times i + dp_{i, j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑转移。假设已知所有 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i - 1, j}\)&lt;/span&gt;，需转移到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，我们有三种转移路径：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(j &amp;lt; a_i\)&lt;/span&gt;：&lt;/p&gt;
对 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 取模取不动，不会产生任何影响。&lt;span class=&#34;math inline&#34;&gt;\(dp_{i, j}\gets dp_{i - 1, j}\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(j\ge a_i\)&lt;/span&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;让 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 承担 &lt;span class=&#34;math inline&#34;&gt;\(f_i=a_i-1\)&lt;/span&gt; 的责任。我们从 &lt;span class=&#34;math inline&#34;&gt;\(0\sim j\)&lt;/span&gt; 中找到一个满足 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\bmod a_i=a_i-1\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt; 肯定是越大越好，故 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;=(\left\lfloor \dfrac {j}{a_i}\right\rfloor-1)\times a_i+(a_i-1)\)&lt;/span&gt;。&lt;/p&gt;
此时便有 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i, a_i-1}\gets dp_{i - 1, j&amp;#39;} + [j&amp;#39; - (a_i-1)]\times (i-1)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;盲猜 &lt;span class=&#34;math inline&#34;&gt;\(0\sim i - 1\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(i+1\sim n\)&lt;/span&gt; 中会出现承担 &lt;span class=&#34;math inline&#34;&gt;\(f_{i&amp;#39;}=a_{i&amp;#39;-1}\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;\)&lt;/span&gt;，故按照 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 取最大来转移。&lt;/p&gt;
&lt;p&gt;此时有 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i, j\bmod a_i}=dp_{i-1,j}+(j-j\bmod a_i)\times (i-1)\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;答案即为 &lt;span class=&#34;math inline&#34;&gt;\(\max\{j\times n+dp_{n, j}\}\)&lt;/span&gt;。由于不存在 &lt;span class=&#34;math inline&#34;&gt;\(f_i=a_i-1\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 肯定比存在的要劣，所以我们肯定选到的是正确的答案。&lt;/p&gt;
&lt;p&gt;注意到每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 只会新增 &lt;span class=&#34;math inline&#34;&gt;\(a_i-1\)&lt;/span&gt; 一个状态，故状态总数为 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。把 &lt;span class=&#34;math inline&#34;&gt;\(dp\)&lt;/span&gt; 开成 map 就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 地解决问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#else
    freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    std::map&amp;lt;long long, long long&amp;gt; t;
    std::cin &amp;gt;&amp;gt; a[1];
    t[a[1] - 1] = 0;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        for (;;) &amp;#123;
            auto p = t.lower_bound(a[i]);
            if (p == t.end())
                break;
            long long j = p-&amp;gt;first, f = p-&amp;gt;second;
            t[j % a[i]] = std::max(t[j % a[i]], f + (j - j % a[i]) * (i - 1));
            if (j &amp;gt;= a[i]) &amp;#123;
                j = (j / a[i] - 1) * a[i] + a[i] - 1;
                t[a[i] - 1] = std::max(t[a[i] - 1], f + (j - (a[i] - 1)) * (i - 1));
            &amp;#125;
            t.erase(p);
        &amp;#125;
    &amp;#125;
    long long res = 0;
    for (auto i : t)
        res = std::max(res, i.first * n + i.second);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;stalinsort-algorithm&#34;&gt;3. StalinSort Algorithm&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://qoj.ac/problem/1456&#34; class=&#34;uri&#34;&gt;https://qoj.ac/problem/1456&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定排列 &lt;span class=&#34;math inline&#34;&gt;\(A_{1\sim n}\)&lt;/span&gt;。从 &lt;span class=&#34;math inline&#34;&gt;\(i=2\)&lt;/span&gt; 开始往右扫，每一步执行以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(A_i&amp;gt; A_{i-1}\)&lt;/span&gt;，什么也不做。&lt;/li&gt;
&lt;li&gt;否则，你可以删除 &lt;span class=&#34;math inline&#34;&gt;\(A_{i-1}\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt;，但要求删除后，该前缀必须单调递增。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问最少可以删除多少个数。&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你会发现&lt;mark&gt;删最少 = 留最多&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;考虑 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 能够转移到的 &lt;span class=&#34;math inline&#34;&gt;\(j(j&amp;gt;i)\)&lt;/span&gt; 需满足的条件。若令 &lt;span class=&#34;math inline&#34;&gt;\(nex_p\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 之后第一个值比 &lt;span class=&#34;math inline&#34;&gt;\(a_p\)&lt;/span&gt; 大的元素，则 &lt;span class=&#34;math inline&#34;&gt;\(j\in [nex_i, nex_{nex_i})\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(a_j&amp;gt;a_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;赛时误认为右端点为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 之后第二个值比 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 大的元素，导致完全寄掉。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;，考虑优化。&lt;mark&gt;注意到如果只有 &lt;span class=&#34;math inline&#34;&gt;\(j\in [nex_i, nex_{nex_i})\)&lt;/span&gt; 这个条件很容易用线段树维护，考虑消去 &lt;span class=&#34;math inline&#34;&gt;\(a_j&amp;gt;a_i\)&lt;/span&gt; 的影响。故考虑按 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; &lt;strong&gt;从小到大&lt;/strong&gt; 的顺序选取 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，因为当前最小的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 一定已经被刷完表了&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 5e5 + 5;
const int inf = 0x3f3f3f3f;
struct _ &amp;#123; int u, d; &amp;#125; t1[maxn &amp;lt;&amp;lt; 2];
int n, t[maxn &amp;lt;&amp;lt; 2];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void upd(int p, int l, int r, int x, int v) &amp;#123;
    t[p] = std::min(t[p], v);
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, l, mid, x, v);
    else
        upd(rt, mid + 1, r, x, v);
    return;
&amp;#125;
int ask(int p, int l, int r, int ql, int qr) &amp;#123;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr)
        return t[p];
    int mid = (l + r) &amp;gt;&amp;gt; 1, res = n + 1;
    if (ql &amp;lt;= mid)
        res = ask(lt, l, mid, ql, qr);
    if (qr &amp;gt; mid)
        res = std::min(res, ask(rt, mid + 1, r, ql, qr));
    return res;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t1[p].d) &amp;#123;
        t1[lt].u = std::max(t1[lt].u, t1[p].d);
        t1[lt].d = std::max(t1[lt].d, t1[p].d);       
        t1[rt].u = std::max(t1[rt].u, t1[p].d);
        t1[rt].d = std::max(t1[rt].d, t1[p].d);       
        t1[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void upd(int p, int l, int r, int ql, int qr, int v) &amp;#123;
    t1[p].u = std::max(t1[p].u, v);
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr) &amp;#123;
        t1[p].d = std::max(t1[p].d, v);
        return;
    &amp;#125;
    pushdown(p);
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (ql &amp;lt;= mid)
        upd(lt, l, mid, ql, qr, v);
    if (qr &amp;gt; mid)
        upd(rt, mid + 1, r, ql, qr, v);
    return;
&amp;#125;
int ask(int p, int l, int r, int x) &amp;#123;
    if (l == r)
        return t1[p].u;
    pushdown(p);
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        return ask(lt, l, mid, x);
    return ask(rt, mid + 1, r, x);
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#else
    freopen(&amp;quot;sort3.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    // freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int res = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), ne(n + 1), f(n + 1);
    std::fill(t + 1, t + 4 * n + 1, n + 1);
    std::fill(t1 + 1, t1 + 4 * n + 1, (_)&amp;#123; -inf, 0 &amp;#125;);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = n; ~i; --i) &amp;#123;
        ne[i] = ask(1, 0, n, a[i] + 1, n);
        upd(1, 0, n, a[i], i);   
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; id(n + 1);
    std::iota(id.begin(), id.end(), 0);
    std::sort(id.begin(), id.end(), [&amp;amp;](int x, int y) &amp;#123; return a[x] &amp;lt; a[y]; &amp;#125;);
    f[0] = 0;
    for (int i = 0; i &amp;lt;= n; ++i) &amp;#123;
        if (i) &amp;#123;
            f[id[i]] = ask(1, 0, n, id[i]);
            res = std::max(res, f[id[i]]);
        &amp;#125;
        if (ne[id[i]] &amp;lt;= n)
            upd(1, 0, n, ne[id[i]], ne[ne[id[i]]] - 1, f[id[i]] + 1);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; n - res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;merge-triplets&#34;&gt;4. Merge Triplets&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/agc043/tasks/agc043_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/agc043/tasks/agc043_d&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(A_{1\sim 3N}=\{1, 2, \dots, 3N\}\)&lt;/span&gt;，从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 开始每 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 个数分为一组，每一组初始有一个指针指向第一个元素。执行若干次以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在所有指针指向的数中选择一个最小的，把它放到序列末（不会加入末端的组）；将原本指向它的指针后移一位，如果移出原本的组就删除这个指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问任意次操作后，可能得到多少种序列。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^3\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于要对合法的最终序列进行计数，考虑最终序列的性质。&lt;/p&gt;
&lt;p&gt;若序列中 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}&amp;lt;a_i\)&lt;/span&gt;，则说明在某一组中，值为 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 的元素下一个就是 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}\)&lt;/span&gt;。否则，因 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}\)&lt;/span&gt; 可选且比 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 小，&lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}\)&lt;/span&gt; 应排在 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 前面。&lt;/p&gt;
&lt;p&gt;否则，&lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}\)&lt;/span&gt; 既可以与 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 不在同一组，也可以是 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 的下一个元素。&lt;/p&gt;
&lt;p&gt;一组最多三个元素，也就是说，不能出现 &lt;span class=&#34;math inline&#34;&gt;\(a_i&amp;gt;a_{i+1},a_{i+2},a_{i+3}\)&lt;/span&gt; 的情况。而 &lt;span class=&#34;math inline&#34;&gt;\(N=1\)&lt;/span&gt; 时序列长度只有 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt;，这就是为什么样例一的答案为 &lt;span class=&#34;math inline&#34;&gt;\(3!\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但这个限制并不能排除所有非法情况。&lt;span class=&#34;math inline&#34;&gt;\(N=2\)&lt;/span&gt; 时暴搜我们目前限制下的解，共有 276 个，比答案中的 261 个要多，说明包含了其他非法解。&lt;/p&gt;
&lt;p&gt;暴搜输出并观察，易得这 15 个非法序列即为满足目前限制且存在 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(a_i&amp;gt;a_{i+1}\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(a_i&amp;lt;a_{i+2}\)&lt;/span&gt; 的所有序列，&lt;mark&gt;由前面的推导，必须分为三个长度为 2 的组，而我们要求的是长度为 3 的组。显然无法用前者组合得到后者&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;在我们第一个条件的限制下，必须被分到同一组的数的连续长度，只有 &lt;span class=&#34;math inline&#34;&gt;\(1,2,3\)&lt;/span&gt; 三种。而：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长度为 3 的对答案合法性无影响；&lt;/li&gt;
&lt;li&gt;而长度为 1 的既可以和 2 组为一组，也可以和其他两个 1 组为一组；&lt;/li&gt;
&lt;li&gt;长度为 2 的只能和 1 组成一组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;mark&gt;这时，我们发现所有限制都指向长度为 2 的段，其总个数不能比长度为 1 的段多。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;于是乎，上述限制可总结为两点：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;若令所有满足 &lt;span class=&#34;math inline&#34;&gt;\(a_l&amp;gt;\max\{a_{l\sim r}\}\)&lt;/span&gt; 的极大区间为一段（易证每段互不重合且覆盖全序列），那么其长度不能超过 3。&lt;/li&gt;
&lt;li&gt;其中，长度为 2 的个数不能比长度为 1 的个数多。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;mark&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, j}\)&lt;/span&gt; 表示若当前枚举的最后一段右端点为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，长度为 1 的段比长度为 2 的段多 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;最后答案即为 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j=0}^n f_{i, j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#else
    freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, mod;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; mod;
    n *= 3;
    std::vector&amp;lt;std::unordered_map&amp;lt;int, long long&amp;gt; &amp;gt; f(n + 1);
    f[0][0] = 1;
    for (int i = 0; i &amp;lt; n; ++i)
        for (auto [j, k] : f[i]) &amp;#123;
            (f[i + 1][j + 1] += k) %= mod;
            if (i + 2 &amp;lt;= n)
                (f[i + 2][j - 1] += k * (i + 1) % mod) %= mod;
            if (i + 3 &amp;lt;= n)
                (f[i + 3][j] += k * (i + 1) % mod * (i + 2) % mod) %= mod;
        &amp;#125;
    long long res = 0;
    for (int i = 0; i &amp;lt;= n; ++i)
        (res += f[n][i]) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;runaway-quail&#34;&gt;5. Runaway Quail&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://qoj.ac/problem/5978&#34; class=&#34;uri&#34;&gt;https://qoj.ac/problem/5978&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数轴上有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 只鸡，初始位置为非 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 整数 &lt;span class=&#34;math inline&#34;&gt;\(p_i\)&lt;/span&gt;，奔跑速度为 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt;。你初始在 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 位置，奔跑速度为 &lt;span class=&#34;math inline&#34;&gt;\(Y(Y&amp;gt;s_i)\)&lt;/span&gt;。你要抓到所有鸡。&lt;/p&gt;
&lt;p&gt;你可以在任意时刻调转方向；鸡总会朝着远离你的方向奔跑；当你的坐标和鸡重合时，你抓到鸡。&lt;/p&gt;
&lt;p&gt;问抓到所有鸡的最短时间（显然是个实数）。&lt;span class=&#34;math inline&#34;&gt;\(n\le 500\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;容易发现鸡的奔跑方向从始至终不会变，如果我们要从往左追变成往右追，显而易见地我们会&lt;mark&gt;在追上右边第一只鸡前经过原点&lt;/mark&gt;，反之同理。&lt;/p&gt;
&lt;p&gt;那么有一个很神奇的状态设计，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 为追上了左边速度第 &lt;span class=&#34;math inline&#34;&gt;\(1\sim i - 1\)&lt;/span&gt; 大的所有鸡和右边速度第 &lt;span class=&#34;math inline&#34;&gt;\(1\sim j - 1\)&lt;/span&gt; 大的所有鸡，然后跑回原点的最小时间，这样我们就不用记录这个非常难记录的当前位置信息，对于速度排名 &lt;span class=&#34;math inline&#34;&gt;\(\ge i,j\)&lt;/span&gt; 的所有鸡，当前是否追上我们并不关心——&lt;mark&gt;如果其位置比较远，那么我们会在后续转移中再考虑；如果其位置比较近，在解决速度排名 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;i,j\)&lt;/span&gt; 的鸡时就已经抓住&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;我们 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n)\)&lt;/span&gt; 枚举上一次反向是在抓住哪一只鸡时，然后让中间全部同向跑即可&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;也就是说，假设我们要用 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 更新 &lt;span class=&#34;math inline&#34;&gt;\(f_{k,j}\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(k&amp;lt;i\)&lt;/span&gt;），那么只需要更新抓住速度排名 &lt;span class=&#34;math inline&#34;&gt;\(i\sim k+1\)&lt;/span&gt; 中跑得最远的一只鸡所需额外时间。按速度排序后可以线性算代价。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long double eps = 1e-12;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int v, n;
        std::cin &amp;gt;&amp;gt; v &amp;gt;&amp;gt; n;
        std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; a(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; a[i].first;
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; a[i].second;
        a.emplace_back(0, 0), ++n;
        std::sort(a.begin() + 1, a.end());
        int p = std::lower_bound(a.begin() + 1, a.end(), std::make_pair(0, 0)) - a.begin();
        std::sort(a.begin() + 1, a.begin() + p, [](std::pair&amp;lt;int, int&amp;gt; x, std::pair&amp;lt;int, int&amp;gt; y) &amp;#123; return x.second == y.second ? x.first &amp;lt; y.first : x.second &amp;gt; y.second; &amp;#125;);
        std::sort(a.begin() + p + 1, a.end(), [](std::pair&amp;lt;int, int&amp;gt; x, std::pair&amp;lt;int, int&amp;gt; y) &amp;#123; return x.second == y.second ? x.first &amp;lt; y.first : x.second &amp;lt; y.second; &amp;#125;);
        std::vector&amp;lt;std::vector&amp;lt;long double&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long double&amp;gt; (n + 1, 1e18));
        f[1][n] = 0.;
        auto at = [&amp;amp;](int i, long double t) &amp;#123;
            return std::fabs(a[i].first + t * a[i].second * (i &amp;lt; p ? -1 : 1));
        &amp;#125;;
        auto calc = [&amp;amp;](int i, long double t) &amp;#123;
            return at(i, t) / (v - a[i].second);
        &amp;#125;;
        // for (int i = 1; i &amp;lt;= n; ++i)
        //     printf(&amp;quot;%d: (%d, %d)\n&amp;quot;, i, a[i].first, a[i].second);
        for (int i = 1; i &amp;lt;= p; ++i)
            for (int j = n; j &amp;gt;= p; --j) &amp;#123;
                if (i == p &amp;amp;&amp;amp; j == p)
                    break;
                long double d = 0.;
                // printf(&amp;quot;[%d, %d]: %lf\n&amp;quot;, i, j, f[i][j]);
                for (int k = i; k &amp;lt; p; ++k) &amp;#123;
                    if (at(k, f[i][j]) &amp;gt;= at(i, f[i][j]) - eps)
                        d = std::max(d, calc(k, f[i][j]));
                    // printf(&amp;quot;  k1 = %d, d = %lf\n&amp;quot;, k, d);
                    f[k + 1][j] = std::min(f[k + 1][j], f[i][j] + d + (k != j - 1) * d);
                &amp;#125;
                d = 0.;
                for (int k = j; k &amp;gt; p; --k) &amp;#123;
                    if (at(k, f[i][j]) &amp;gt;= at(j, f[i][j]) - eps)
                        d = std::max(d, calc(k, f[i][j]));
                    // printf(&amp;quot;  k2 = %d, d = %lf\n&amp;quot;, k, d);
                    f[i][k - 1] = std::min(f[i][k - 1], f[i][j] + d + (k != i + 1) * d);
                &amp;#125;
            &amp;#125;
        &amp;#123;
            static int casetot = 0;
            std::cout &amp;lt;&amp;lt; &amp;quot;Case #&amp;quot; &amp;lt;&amp;lt; ++casetot &amp;lt;&amp;lt; &amp;quot;: &amp;quot;;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(9) &amp;lt;&amp;lt; f[p][p] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;the-great-marathon&#34;&gt;6. The Great Marathon&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/38/H&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/38/H&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条边的无向连通图，点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 上初始有选手 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。为每个选手任意指定终点（可重复），那么最后的排名按照最短路为第一关键字、编号为第二关键字排序。&lt;/p&gt;
&lt;p&gt;现按照排名序列分成前中后三段，记为金银铜牌；满足金牌数在 &lt;span class=&#34;math inline&#34;&gt;\([g_1,g_2]\)&lt;/span&gt; 之间，银牌数在 &lt;span class=&#34;math inline&#34;&gt;\([s_1,s_2]\)&lt;/span&gt; 之间。任意指定发牌数量和每个人的终点，问最后有多少种方案数；两个方案不同当且仅当有至少一个人拿的牌不一样。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 50,m\le 1000\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;mark&gt;&lt;span class=&#34;math inline&#34;&gt;\(n=50\)&lt;/span&gt;：可能需要考虑 &lt;span class=&#34;math inline&#34;&gt;\(n^5\)&lt;/span&gt; 做法。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;发现是 &lt;mark&gt;需要确定顺序的 DP&lt;/mark&gt;。关键位置自然在于『金银、银铜界处』。考虑钦定金牌最后一名、铜牌第一名的人选（不考虑中间的银牌是因为会出现这样那样的问题），还需要枚举他们的路程吗？并不。甚而至于，这样做会算重。&lt;/p&gt;
&lt;p&gt;考虑&lt;mark&gt;『最小化』左右两侧的金牌、铜牌可选集合&lt;/mark&gt;。强行让金牌最后一名 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的路程为 &lt;span class=&#34;math inline&#34;&gt;\(\min\{dis_{u,i}\}\)&lt;/span&gt;，最小路程小于这个值的所有元素都可以成为金牌；同时让铜牌第一名 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的路程为 &lt;span class=&#34;math inline&#34;&gt;\(\max\{dis_{v,i}\}\)&lt;/span&gt;，最大路程大于这个值的所有数都可以成为铜牌。&lt;/p&gt;
&lt;p&gt;Q1: 如果存在一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，它最小的距离也比 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的最小距离大，但实际上当 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 更大一点儿的时候，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 可以成为金牌呢？&lt;/p&gt;
&lt;p&gt;A1：这种情况在钦定 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 为最后一名的时候讨论过了。&lt;/p&gt;
&lt;p&gt;Q2：是否会算重？&lt;/p&gt;
&lt;p&gt;A2：如上所述，假如在钦定 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的时候统计了 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，那么在钦定 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的时候就不会统计 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑转移。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,u,v,j,k}\)&lt;/span&gt; 为考虑到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，金牌倒一为 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，铜牌第一为 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;，选了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个金、&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个铜的方案数。转移是 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;注意 &lt;code&gt;vector&lt;/code&gt; 要开在循环外面，不然申请空间很耗时间 /ll&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1, inf));
    for (int x, y; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        std::cin &amp;gt;&amp;gt; g[x][y], g[y][x] = g[x][y];
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        g[i][i] = 0;
    for (int k = 1; k &amp;lt;= n; ++k)
        for (int i = 1; i &amp;lt;= n; ++i)
            if (k != i)
                for (int j = 1; j &amp;lt;= n; ++j)
                    if (i != k &amp;amp;&amp;amp; j != k)
                        g[i][j] = std::min(g[i][j], g[i][k] + g[k][j]);
    int g1, g2, s1, s2;
    std::cin &amp;gt;&amp;gt; g1 &amp;gt;&amp;gt; g2 &amp;gt;&amp;gt; s1 &amp;gt;&amp;gt; s2;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= n; ++j)
            if (g[i][j] != inf)
                g[i][j] = g[i][j] * n + i;
    std::vector&amp;lt;int&amp;gt; mx(n + 1), mn(n + 1, inf);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j)
            if (j != i)
                mn[i] = std::min(mn[i], g[i][j]);
        mx[i] = *std::max_element(g[i].begin() + 1, g[i].end());
    &amp;#125;
    auto res(0ll);
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; (n + 1, std::vector&amp;lt;long long&amp;gt; (n + 1)));
    for (int u = 1; u &amp;lt;= n; ++u)
        for (int v = 1; v &amp;lt;= n; ++v)
            if (v != u) &amp;#123;
                f[0][1][1] = 1ll;
                for (int i = 1; i &amp;lt;= n; ++i)
                    if (i == u || i == v)
                        f[i] = f[i - 1];
                    else &amp;#123;
                        bool flag = 0;
                        for (int j = 1; j &amp;lt;= n; ++j)
                            if (mn[u] &amp;lt; g[i][j] &amp;amp;&amp;amp; g[i][j] &amp;lt; mx[v]) &amp;#123;
                                flag = 1;
                                break;
                            &amp;#125;
                        for (int j = 1; j &amp;lt;= g2; ++j)
                            for (int k = 1; k &amp;lt;= n - g1 - s1; ++k) &amp;#123;
                                f[i][j][k] = 0ll;
                                if (mx[i] &amp;lt; mn[u])
                                    f[i][j][k] = f[i - 1][j - 1][k];
                                else if (mn[i] &amp;gt; mx[v])
                                    f[i][j][k] = f[i - 1][j][k - 1];
                                else &amp;#123;
                                    if (flag)
                                        f[i][j][k] = f[i - 1][j][k];
                                    if (mn[i] &amp;lt; mn[u])
                                        f[i][j][k] += f[i - 1][j - 1][k];
                                    if (mx[i] &amp;gt; mx[v])
                                        f[i][j][k] += f[i - 1][j][k - 1];
                                &amp;#125;
                            &amp;#125;
                    &amp;#125;
                for (int g = g1; g &amp;lt;= g2; ++g)
                    for (int s = s1; s &amp;lt;= s2; ++s)
                        res += f[n][g][n - g - s];
            &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;sorting-pancakes&#34;&gt;7. Sorting Pancakes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1675/problem/G&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/1675/problem/G&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定盒子 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 和每个盒子 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 里的初始球数 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，每次可以选择一个球移动到相邻盒子，最后欲使盒子内球数单调不升,求最小移球次数。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,\sum a_i\le 250\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单题！这种『移动元素的题』，会考虑&lt;mark&gt;钦定每个元素最终的值，把前面的元素富余的 / 欠下来的存储起来&lt;/mark&gt;。&lt;em&gt;当然也有例外，比如添加了『时间』这一维的限制，goto &lt;a href=&#34;http://localhost:4000/20250510/#a---pass-to-next&#34;&gt;solu to Pass to Next&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在如果在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处富余了 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，那么在移动到 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 的过程中就会产生 &lt;span class=&#34;math inline&#34;&gt;\(|x|\)&lt;/span&gt; 的代价。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,k,j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个元素处，钦定它最终为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，富余 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,k,j}\gets \min\limits_{j&amp;#39;\ge j}\{f_{i-1, k-(j-a_i),j&amp;#39;}\}\)&lt;/span&gt;。显而易见后缀 min 优化就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n\cdot m^2)\)&lt;/span&gt; 地做了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;DP 数组和后缀 min 数组要合起来，不然会 MLE /ll&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    using arr = std::vector&amp;lt;int&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    crr f(n + 1, brr(2 * m + 1, arr(m + 1, inf)));
    std::fill(f[0][m].begin(), f[0][m].begin() + m + 1, 0);
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int k = 0; k &amp;lt;= 2 * m; ++k)
            for (int j = std::min(m, k + a[i]); j &amp;gt;= std::max(0, k + a[i] - 2 * m); --j) &amp;#123;
                f[i][k][j] = f[i - 1][k - (j - a[i])][j] + std::abs(k - m);
                if (j != m)
                    f[i][k][j] = std::min(f[i][k][j], f[i][k][j + 1]);
            &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n][m][0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;complexity&#34;&gt;8. Complexity&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/agc033/tasks/agc033_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/agc033/tasks/agc033_d&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\times m\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(01\)&lt;/span&gt; 矩阵。定义其子矩阵的凌乱度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若该矩阵中只有一种值，凌乱度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;否则，任意竖直 / 水平切一刀，得到两个小矩阵；若它们的凌乱度分别为 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt;，则大矩阵的凌乱度为 &lt;span class=&#34;math inline&#34;&gt;\(\max(a,b)+1\)&lt;/span&gt; 的最小值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;求给定矩阵的凌乱度。&lt;span class=&#34;math inline&#34;&gt;\(n,m\le 185\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果暴力枚举 DP，很不幸是 &lt;span class=&#34;math inline&#34;&gt;\(n^5\)&lt;/span&gt; 的。考虑优化。发现矩阵的凌乱度大致在 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 级别，考虑用&lt;mark&gt;状态交换答案&lt;/mark&gt;减小复杂度。具体地，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{k,u,d,l}\)&lt;/span&gt; 表示凌乱度 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 可取到的最大值，那么有转移：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;竖着切一刀，枚举切点 &lt;span class=&#34;math inline&#34;&gt;\(i\le f_{k-1,u,d,l}\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{k,u,d,l}\gets f_{k-1,u,d,i+1}\)&lt;/span&gt;。发现显然 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 取 &lt;span class=&#34;math inline&#34;&gt;\(f_{k-1,u,d,l}\)&lt;/span&gt; 的时候最优，这个是 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 的。&lt;/li&gt;
&lt;li&gt;横着切一刀，枚举切点 &lt;span class=&#34;math inline&#34;&gt;\(i\in[u,d)\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{k,u,d,l}\gets \min(f_{k-1,u,i,l},f_{k-1,i+1,d,l})\)&lt;/span&gt;。发现随 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 增大左边单调不增，右边单调不降。随着 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的增大，左边不变，右边下移，交出来的交点一直右移。然后就可以优化到均摊 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;char&amp;gt; &amp;gt; a(n + 1, std::vector&amp;lt;char&amp;gt; (m + 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= m; ++j)
            std::cin &amp;gt;&amp;gt; a[i][j];
    using arr = std::vector&amp;lt;int&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    std::vector&amp;lt;std::string&amp;gt; res;
    std::vector&amp;lt;crr&amp;gt; _f(2, crr(n + 1, brr(m + 1, arr(n + 1))));
    for (int k = 0; ; ++k) &amp;#123;
        auto &amp;amp;f = _f[k &amp;amp; 1], &amp;amp;f1 = _f[(k &amp;amp; 1) ^ 1];
        if (k == 0) &amp;#123;
            crr tag(m + 1, brr(n + 1, arr(n + 1, -1)));
            for (int l = 1; l &amp;lt;= m; ++l)
                for (int u = 1; u &amp;lt;= n; ++u)
                    for (int d = u; d &amp;lt;= n &amp;amp;&amp;amp; a[d][l] == a[u][l]; ++d)
                        tag[l][u][d] = a[u][l];
            for (int u = 1; u &amp;lt;= n; ++u)
                for (int d = u; d &amp;lt;= n; ++d)
                    for (int l = m; l; --l) &amp;#123;
                        f[u][l][d] = l - 1;
                        if (~tag[l][u][d]) &amp;#123;
                            if (l != m &amp;amp;&amp;amp; tag[l][u][d] == tag[l + 1][u][d])
                                f[u][l][d] = f[u][l + 1][d];
                            else
                                f[u][l][d] = l;
                        &amp;#125;
                    &amp;#125;
        &amp;#125;
        else
            for (int u = 1; u &amp;lt;= n; ++u)
                for (int l = 1; l &amp;lt;= m; ++l)
                    for (int d = u, pos = 1; d &amp;lt;= n; ++d) &amp;#123;
                        f[u][l][d] = f1[u][l][d];
                        if (f[u][l][d] != m) &amp;#123;
                            f[u][l][d] = std::max(f[u][l][d], f1[u][f1[u][l][d] + 1][d]);
                            int mx = 0;
                            for (int i = pos; i &amp;lt; d; ++i) &amp;#123;
                                if (std::min(f1[u][l][i], f1[i + 1][l][d]) &amp;gt;= mx)
                                    mx = std::min(f1[u][l][i], f1[i + 1][l][d]), pos = i;
                                else
                                    break;
                            &amp;#125;
                            f[u][l][d] = std::max(f[u][l][d], mx);
                        &amp;#125;
                    &amp;#125;
        if (f[1][1][n] == m) &amp;#123;
            std::cout &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            return 0;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;boxes-and-balls&#34;&gt;9. Boxes and Balls&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1845E&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1845E&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(01\)&lt;/span&gt; 序列 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;。你可以进行恰好 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次如下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择序列中一对相邻且值不同的元素，将它们交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问有多少种最终序列。&lt;span class=&#34;math inline&#34;&gt;\(n,k\le 1500\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沿用 &lt;a href=&#34;#sorting-pancakes&#34;&gt;7. Sorting Pancakes&lt;/a&gt; 的思路，考虑令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,l}\)&lt;/span&gt; 表示最终序列的前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个里有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，代价已经有 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 的方案数；那么令 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的前缀和，显然有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i+1,j+1,k+|j-s_i|}\gets f_{i,j,k}\\
f_{i+1,j,k+|j-s_i|}\gets f_{i,j,k}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后在比 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 小且奇偶性和 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 相同的 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 里找答案。然后想怎么优化。&lt;/p&gt;
&lt;p&gt;答案是不用优化。考虑&lt;mark&gt;有效状态数&lt;/mark&gt;，&lt;del&gt;打个表发现每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(O(n\sqrt n)\)&lt;/span&gt; 左右&lt;/del&gt;，但有另一种方法是发现有效的 &lt;span class=&#34;math inline&#34;&gt;\(|j-s_i|\)&lt;/span&gt; 不会超过 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt n)\)&lt;/span&gt;（原因：为了消除 &lt;span class=&#34;math inline&#34;&gt;\(|j-s_i|\)&lt;/span&gt; 的欠账，需要 &lt;span class=&#34;math inline&#34;&gt;\(|j-s_i|\)&lt;/span&gt; 个位置；每个位置都会有差不多 &lt;span class=&#34;math inline&#34;&gt;\(|j-s_i|\)&lt;/span&gt; 的代价），所以枚举时只用枚举 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt n)\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;总之只用存有效状态会发现跑不满 &lt;img src=&#34;/em/bb.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1), s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::partial_sum(a.begin() + 1, a.end(), s.begin() + 1);
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    brr tag(n + 1, arr(n + 1));
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; stt(2);
    stt[0].emplace_back(0, 0);
    crr _f(2, brr(n + 1, arr(k + 1)));
    _f[0][0][0] = 1;
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        auto &amp;amp;f = _f[i &amp;amp; 1], &amp;amp;f1 = _f[(i &amp;amp; 1) ^ 1];
        std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt;().swap(stt[(i &amp;amp; 1) ^ 1]);
        for (auto [j, l] : stt[i &amp;amp; 1]) &amp;#123;
                if (j + 1 &amp;lt;= s[n] &amp;amp;&amp;amp; l + std::abs(j - s[i]) &amp;lt;= k) &amp;#123;
                    if (tag[j + 1][l + std::abs(j - s[i])] != i + 1)
                        tag[j + 1][l + std::abs(j - s[i])] = i + 1, stt[(i &amp;amp; 1) ^ 1].emplace_back(j + 1, l + std::abs(j - s[i])), f1[j + 1][l + std::abs(j - s[i])] = 0ll;
                    (f1[j + 1][l + std::abs(j - s[i])] += f[j][l]) %= mod;
                &amp;#125;
                if (l + std::abs(j - s[i]) &amp;lt;= k) &amp;#123;
                    if (tag[j][l + std::abs(j - s[i])] != i + 1)
                        tag[j][l + std::abs(j - s[i])] = i + 1, stt[(i &amp;amp; 1) ^ 1].emplace_back(j, l + std::abs(j - s[i])), f1[j][l + std::abs(j - s[i])] = 0ll;
                    (f1[j][l + std::abs(j - s[i])] += f[j][l]) %= mod;
                &amp;#125;
            &amp;#125;
        std::cout &amp;lt;&amp;lt; (int)stt[i &amp;amp; 1].size() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    auto res(0ll);
    for (int i = k &amp;amp; 1; i &amp;lt;= k; i += 2)
        if (tag[s[n]][i] == n)
            (res += _f[n &amp;amp; 1][s[n]][i]) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;legondary-grandmaster&#34;&gt;10. LEGOndary Grandmaster&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1615/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1615/F&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定两个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(0/1/?\)&lt;/span&gt; 串 &lt;span class=&#34;math inline&#34;&gt;\(s,t\)&lt;/span&gt;，你可以对 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 进行若干次如下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择序列中一对相邻且值相同的元素，将它们取反。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现任意将 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 中的 &lt;code&gt;?&lt;/code&gt; 填为 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt;，问所有情况中 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 转化为 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 所需最小操作次数和（规定无解的操作次数为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;）。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2000\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们之前做过某些令人心（咬）旷（牙）神（切）怡（齿）的题目，会发现这个操作等价于交换任意两个相邻数，再让他们取反。&lt;/p&gt;
&lt;p&gt;进一步地，可以交换运算顺序，先取反某个位置，再交换，再取反这个位置——把这个操作平均分配到 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 上，&lt;mark&gt;结合『相邻两数位置必一奇一偶』这个美妙的性质，想到把 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的奇数位都提前取反，这样就可以转化成直接交换了&lt;/mark&gt;，&lt;/p&gt;
&lt;p&gt;接下来就和上一题有点不一样了。这里我们直接算一个位置的贡献——这意味着不需要统计一个序列的代价（此时失去了 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的限制，代价来到 &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 级别）。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示从前往后到了第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个位置，欠债为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数；同样地，令 &lt;span class=&#34;math inline&#34;&gt;\(g_{i,j}\)&lt;/span&gt; 表示从后到前到了第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个位置，欠债为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数。则贡献为 &lt;span class=&#34;math inline&#34;&gt;\(\sum_i \sum_j f_{i, j}\times g_{i + 1, -j}\times j\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::string s, t;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; s &amp;gt;&amp;gt; t, s = &amp;#39;#&amp;#39; + s, t = &amp;#39;#&amp;#39; + t;
        for (int i = 1; i &amp;lt;= n; ++i)
            if (i &amp;amp; 1) &amp;#123;
                if (s[i] != &amp;#39;?&amp;#39;)
                    s[i] = &amp;#39;0&amp;#39; + &amp;#39;1&amp;#39; - s[i];
                if (t[i] != &amp;#39;?&amp;#39;)
                    t[i] = &amp;#39;0&amp;#39; + &amp;#39;1&amp;#39; - t[i];
            &amp;#125;
        using arr = std::vector&amp;lt;long long&amp;gt;;
        using brr = std::vector&amp;lt;arr&amp;gt;;
        brr f(n + 1, arr(2 * n + 1)), g(n + 2, arr(2 * n + 1));
        f[0][n] = 1ll;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int S = 0; S &amp;lt;= 1; ++S)
                if ((S == 0 &amp;amp;&amp;amp; s[i] == &amp;#39;1&amp;#39;) || (S == 1 &amp;amp;&amp;amp; s[i] == &amp;#39;0&amp;#39;));
                else
                    for (int T = 0; T &amp;lt;= 1; ++T) &amp;#123;
                        if ((T == 0 &amp;amp;&amp;amp; t[i] == &amp;#39;1&amp;#39;) || (T == 1 &amp;amp;&amp;amp; t[i] == &amp;#39;0&amp;#39;));
                        else
                            for (int j = 0; j &amp;lt;= 2 * n; ++j)
                                if (j - (T - S) &amp;gt;= 0 &amp;amp;&amp;amp; j - (T - S) &amp;lt;= 2 * n)
                                    (f[i][j] += f[i - 1][j - (T - S)]) %= mod;
                    &amp;#125;
        &amp;#125;
        g[n + 1][n] = 1ll;
        for (int i = n; i; --i) &amp;#123;
            for (int S = 0; S &amp;lt;= 1; ++S)
                if ((S == 0 &amp;amp;&amp;amp; s[i] == &amp;#39;1&amp;#39;) || (S == 1 &amp;amp;&amp;amp; s[i] == &amp;#39;0&amp;#39;));
                else
                    for (int T = 0; T &amp;lt;= 1; ++T) &amp;#123;
                        if ((T == 0 &amp;amp;&amp;amp; t[i] == &amp;#39;1&amp;#39;) || (T == 1 &amp;amp;&amp;amp; t[i] == &amp;#39;0&amp;#39;));
                        else
                            for (int j = 0; j &amp;lt;= 2 * n; ++j)
                                if (j - (T - S) &amp;gt;= 0 &amp;amp;&amp;amp; j - (T - S) &amp;lt;= 2 * n)
                                    (g[i][j] += g[i + 1][j - (T - S)]) %= mod;
                    &amp;#125;
        &amp;#125;
        auto res(0ll);
        for (int i = 1; i &amp;lt; n; ++i)
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                (res += j * f[i][n + j] % mod * g[i + 1][n - j] % mod) %= mod;
                (res += j * f[i][n - j] % mod * g[i + 1][n + j] % mod) %= mod;
            &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <updated>2024-09-06T07:30:38.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240501/</id>
        <title>五一杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240501/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5169&#34;&gt;SAM 杂题&lt;/a&gt; + &lt;a href=&#34;http://222.180.160.110:61235/contest/5170&#34;&gt;NOIPS8&lt;/a&gt; + &lt;a href=&#34;http://222.180.160.110:61235/contest/5175&#34;&gt;周考&lt;/a&gt; 选讲。&lt;/p&gt;
&lt;p&gt;看看这个标签列表长度就知道这三天做的题有多杂。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-字符串&#34;&gt;D. 字符串&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5169/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5169/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和 SA 的做法一样，先二分 &lt;span class=&#34;math inline&#34;&gt;\(s_{c\sim d}\)&lt;/span&gt; 的前缀长度 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt;，只需 check &lt;span class=&#34;math inline&#34;&gt;\(s_{c \sim c + mid - 1}\)&lt;/span&gt; 是否在 &lt;span class=&#34;math inline&#34;&gt;\(s_{a\sim b}\)&lt;/span&gt; 中出现过。&lt;/p&gt;
&lt;p&gt;考虑怎么快速 check。从 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 一步一步跳到 &lt;span class=&#34;math inline&#34;&gt;\(c+mid-1\)&lt;/span&gt; 显然会起飞，考虑到查询是静态的，我们事先预处理一下然后倍增地跳即可。&lt;/p&gt;
&lt;p&gt;此时只需看当前状态的 &lt;span class=&#34;math inline&#34;&gt;\(\text {endpos}\)&lt;/span&gt; 是否在 &lt;span class=&#34;math inline&#34;&gt;\([a + mid - 1, b]\)&lt;/span&gt; 出现过。&lt;/p&gt;
&lt;p&gt;因为这个不能用最大最小简单代替，所以就到了我们喜闻乐见的线段树合并环节。将插入后的每个单点 &lt;span class=&#34;math inline&#34;&gt;\(\text {endpos}\)&lt;/span&gt; 在权值线段树上更新，在 parent tree 上暴力线段树合并即可。&lt;/p&gt;
&lt;p&gt;之前一直有一个误区，就是觉得线段树合并是一次性的，比如用 A 树和 B 树并出来了 C 树之后，A 树和 B 树的数据就无效了。&lt;/p&gt;
&lt;p&gt;但这显然是很荒谬的，同样因为我们的查询是静态的，所以完全可以用一种类似于可持久化的方式，建立一些新的点表示合并后的信息状态点，一些可以保留的点就保留作儿子。&lt;/p&gt;
&lt;p&gt;在对应的状态上查询即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxm = 35;
const int maxn = 6e5 + 5;
const int maxk = 8e7 + 5;
struct _ &amp;#123;
    int l, f;
    int ne[maxm]; 
    _() &amp;#123;&amp;#125;
    _(int l1, int f1): l(l1), f(f1) &amp;#123;&amp;#125;
&amp;#125;;
_ t[maxn &amp;lt;&amp;lt; 1];
int vis[maxn &amp;lt;&amp;lt; 1];
int fa[maxn][maxm];
int n, la, tot, siz;
struct &amp;#123; int l, r, u; &amp;#125; t1[maxk];
int tab[maxn &amp;lt;&amp;lt; 1], cnt[maxn &amp;lt;&amp;lt; 1];
void Init(void) &amp;#123;
    la = tot = 1;
    t[1] = _(0, 0);
    return;
&amp;#125;
void ext(int c) &amp;#123;
    int p = la, np = ++tot;
    la = tot;
    t[np] = _(t[p].l + 1, 0);
    while (p &amp;amp;&amp;amp; !t[p].ne[c])
        t[p].ne[c] = np, p = t[p].f;
    if (!p)
        t[np].f = 1;
    else &amp;#123;
        int q = t[p].ne[c];
        if (t[q].l == t[p].l + 1)
            t[np].f = q;
        else &amp;#123;
            int nq = ++tot;
            t[nq] = _(t[p].l + 1, t[q].f);
            std::copy(t[q].ne, t[q].ne + 26, t[nq].ne);
            while (p &amp;amp;&amp;amp; t[p].ne[c] == q)
                t[p].ne[c] = nq, p = t[p].f;
            t[q].f = nq;
            t[np].f = nq;
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
int now = 0;
void ins(int &amp;amp;p, int l, int r, int v) &amp;#123;
    if (!p)
        p = ++now;
    ++t1[p].u;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (v &amp;lt;= mid)
        ins(t1[p].l, l, mid, v);
    else
        ins(t1[p].r, mid + 1, r, v);
    return;
&amp;#125;
int ask(int p, int l, int r, int ql, int qr) &amp;#123;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr)
        return t1[p].u;
    int mid = (l + r) &amp;gt;&amp;gt; 1, res = 0;
    if (ql &amp;lt;= mid)
        res = ask(t1[p].l, l, mid, ql, qr);
    if (qr &amp;gt; mid)
        res += ask(t1[p].r, mid + 1, r, ql, qr);
    return res;
&amp;#125;
int merge(int p, int q, int l, int r) &amp;#123;
    if (!p || !q)
        return p + q;
    int np = ++now, mid = (l + r) &amp;gt;&amp;gt; 1;
    t1[np].u = t1[p].u + t1[q].u;
    if (l == r) return np;
    t1[np].l = merge(t1[p].l, t1[q].l, l, mid);
    t1[np].r = merge(t1[p].r, t1[q].r, mid + 1, r);
    return np;
&amp;#125;
int pos[maxn], rt[maxn &amp;lt;&amp;lt; 1];
bool check(int x, int a, int b, int c, int d) &amp;#123;
    assert(c + x - 1 &amp;gt;= 0);
    int p = pos[c + x - 1];
    for (int i = siz; ~i; --i)
        if (fa[p][i] &amp;amp;&amp;amp; t[fa[p][i]].l &amp;gt;= x)
            p = fa[p][i];
    return ask(rt[p], 0, n - 1, a + x - 1, b) &amp;gt; 0;
&amp;#125;
int solve(int a, int b, int c, int d) &amp;#123;
    int l = 1, r = std::min(d - c + 1, b - a + 1), res = 0;
    while (l &amp;lt;= r) &amp;#123;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        if (check(mid, a, b, c, d))
            l = mid + 1, res = mid;
        else
            r = mid - 1;
    &amp;#125;
    return res;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    int m;
    std::string s;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; s;
    Init();
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        ext(s[i] - &amp;#39;a&amp;#39;);
        pos[i] = la;
        ins(rt[la], 0, n - 1, i);
    &amp;#125;
    siz = log(tot) / log(2.0);
    for (int i = 1; i &amp;lt;= tot; ++i)
        ++cnt[t[i].l];
    std::partial_sum(cnt + 1, cnt + tot + 1, cnt + 1);
    for (int i = 1; i &amp;lt;= tot; ++i)
        tab[cnt[t[i].l]--] = i;
    for (int i = 1; i &amp;lt;= tot; ++i) &amp;#123;
        int u = tab[i];
        fa[u][0] = t[u].f;
        for (int j = 1; j &amp;lt;= siz; ++j)
            fa[u][j] = fa[fa[u][j - 1]][j - 1];
    &amp;#125;
    for (int i = tot; i; --i) &amp;#123;
        int u = tab[i];
        if (t[u].f)
            rt[t[u].f] = merge(rt[t[u].f], rt[u], 0, n - 1);
    &amp;#125;
    while (m--) &amp;#123;
        int a, b, c, d;
        std::cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt; c &amp;gt;&amp;gt; d;
        std::cout &amp;lt;&amp;lt; solve(a - 1, b - 1, c - 1, d - 1) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-security&#34;&gt;F. Security&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5169/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5169/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对我们来说应该是会 D 就会 F 的。所以只打了 10min。&lt;/p&gt;
&lt;p&gt;首先考虑一个大家喜闻乐见的 DFS 求最小字典序。显然地，如果存在和当前位相等的字符，那么优先跳相等字符，进入下一层深搜；否则找到最小的更大字符，然后直接 out。&lt;/p&gt;
&lt;p&gt;此时 SAM 就是我们用来判断 &lt;span class=&#34;math inline&#34;&gt;\(S_{l, r}\)&lt;/span&gt; 中是否存在某状态的工具了。甚至比上一题简单，因为不用写二分和倍增。&lt;/p&gt;
&lt;p&gt;值得注意的是如果 &lt;span class=&#34;math inline&#34;&gt;\(S_{l, r}\)&lt;/span&gt; 包含 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 那么还要在后面随便加一个字符以字典序保证严格大于 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;值得注意的是因为我写的太丑了以至于在 CF 上会光荣 MLE #46。然后分屏左半边看我代码右半边写的 zwb 却没有。啧。为什么呢。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxm = 35;
const int maxn = 6e5 + 5;
const int maxk = 8e7 + 5;
struct _ &amp;#123;
    int l, f;
    int ne[maxm]; 
    _() &amp;#123;&amp;#125;
    _(int l1, int f1): l(l1), f(f1) &amp;#123;&amp;#125;
&amp;#125;;
_ t[maxn &amp;lt;&amp;lt; 1];
int vis[maxn &amp;lt;&amp;lt; 1];
int fa[maxn][maxm];
int n, la, tot, siz;
struct &amp;#123; int l, r, u; &amp;#125; t1[maxk];
int tab[maxn &amp;lt;&amp;lt; 1], cnt[maxn &amp;lt;&amp;lt; 1];
void Init(void) &amp;#123;
    la = tot = 1;
    t[1] = _(0, 0);
    return;
&amp;#125;
void ext(int c) &amp;#123;
    int p = la, np = ++tot;
    la = tot;
    t[np] = _(t[p].l + 1, 0);
    while (p &amp;amp;&amp;amp; !t[p].ne[c])
        t[p].ne[c] = np, p = t[p].f;
    if (!p)
        t[np].f = 1;
    else &amp;#123;
        int q = t[p].ne[c];
        if (t[q].l == t[p].l + 1)
            t[np].f = q;
        else &amp;#123;
            int nq = ++tot;
            t[nq] = _(t[p].l + 1, t[q].f);
            std::copy(t[q].ne, t[q].ne + 26, t[nq].ne);
            while (p &amp;amp;&amp;amp; t[p].ne[c] == q)
                t[p].ne[c] = nq, p = t[p].f;
            t[q].f = nq;
            t[np].f = nq;
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
int now = 0;
void ins(int &amp;amp;p, int l, int r, int v) &amp;#123;
    if (!p)
        p = ++now;
    ++t1[p].u;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (v &amp;lt;= mid)
        ins(t1[p].l, l, mid, v);
    else
        ins(t1[p].r, mid + 1, r, v);
    return;
&amp;#125;
int ask(int p, int l, int r, int ql, int qr) &amp;#123;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr)
        return t1[p].u;
    int mid = (l + r) &amp;gt;&amp;gt; 1, res = 0;
    if (ql &amp;lt;= mid)
        res = ask(t1[p].l, l, mid, ql, qr);
    if (qr &amp;gt; mid)
        res += ask(t1[p].r, mid + 1, r, ql, qr);
    return res;
&amp;#125;
int merge(int p, int q, int l, int r) &amp;#123;
    if (!p || !q)
        return p + q;
    int np = ++now, mid = (l + r) &amp;gt;&amp;gt; 1;
    t1[np].u = t1[p].u + t1[q].u;
    if (l == r) return np;
    t1[np].l = merge(t1[p].l, t1[q].l, l, mid);
    t1[np].r = merge(t1[p].r, t1[q].r, mid + 1, r);
    return np;
&amp;#125;
int pos[maxn], rt[maxn &amp;lt;&amp;lt; 1];
bool check(int p, int ch, int l, int r) &amp;#123;
    return ask(rt[t[p].ne[ch]], 0, n - 1, l, r) &amp;gt; 0;
&amp;#125;
bool fun(std::string &amp;amp;res, std::string now, std::string &amp;amp;t, int x, int p, int l, int r) &amp;#123;
    // std::cout &amp;lt;&amp;lt; &amp;quot;x = &amp;quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;quot;, now = \&amp;quot;&amp;quot; &amp;lt;&amp;lt; now &amp;lt;&amp;lt; &amp;quot;\&amp;quot;;\n&amp;quot;;
    if (x != (int)t.length() &amp;amp;&amp;amp; check(p, t[x] - &amp;#39;a&amp;#39;, l + x, r) &amp;amp;&amp;amp; fun(res, now + t[x], t, x + 1, ::t[p].ne[t[x] - &amp;#39;a&amp;#39;], l, r))
        return 1;
    for (int i = (x == (int)t.length()) ? 0 : t[x] - &amp;#39;a&amp;#39; + 1; i &amp;lt; 26; ++i) &amp;#123;
        if (check(p, i, l + x, r)) &amp;#123;
            now += i + &amp;#39;a&amp;#39;;
            res = now;
            return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
std::string solve(std::string &amp;amp;t, int l, int r) &amp;#123;
    std::string res;
    return fun(res, &amp;quot;&amp;quot;, t, 0, 1, l, r) ? res : &amp;quot;-1&amp;quot;;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    int q;
    std::string s;
    std::cin &amp;gt;&amp;gt; s &amp;gt;&amp;gt; q;
    n = (int)s.length();
    Init();
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        ext(s[i] - &amp;#39;a&amp;#39;);
        pos[i] = la;
        ins(rt[la], 0, n - 1, i);
    &amp;#125;
    siz = log(tot) / log(2.0);
    for (int i = 1; i &amp;lt;= tot; ++i)
        ++cnt[t[i].l];
    std::partial_sum(cnt + 1, cnt + tot + 1, cnt + 1);
    for (int i = 1; i &amp;lt;= tot; ++i)
        tab[cnt[t[i].l]--] = i;
    for (int i = 1; i &amp;lt;= tot; ++i) &amp;#123;
        int u = tab[i];
        fa[u][0] = t[u].f;
        for (int j = 1; j &amp;lt;= siz; ++j)
            fa[u][j] = fa[fa[u][j - 1]][j - 1];
    &amp;#125;
    for (int i = tot; i; --i) &amp;#123;
        int u = tab[i];
        if (t[u].f)
            rt[t[u].f] = merge(rt[t[u].f], rt[u], 0, n - 1);
    &amp;#125;
    while (q--) &amp;#123;
        int l, r;
        std::string t;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r &amp;gt;&amp;gt; t;
        std::cout &amp;lt;&amp;lt; solve(t, l - 1, r - 1) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-六出祁山&#34;&gt;A. 六出祁山&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5170/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5170/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是能用贪心拿 60pts 的 DP 题 /tuu&lt;/p&gt;
&lt;p&gt;需要先把暴力的式子写出来。设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, j}\)&lt;/span&gt; 为将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 山修改高度为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的代价，则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i, j} = \min\limits_{k\in [j-d, j+d]}\left\{f_{i-1, k}\right\} + |h_i - j|
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注意到可以单调队列优化。但是这样做复杂度还是 &lt;span class=&#34;math inline&#34;&gt;\(O(nV)\)&lt;/span&gt; 的，根本原因在于第二维这个 &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; 的状态数太多了。&lt;/p&gt;
&lt;p&gt;根据直觉，最后 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的值应为 &lt;span class=&#34;math inline&#34;&gt;\(k+d\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(k-d\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;。也就是说，我们可以认为，合法的状态数为所有的 &lt;span class=&#34;math inline&#34;&gt;\(a_i+x\times d, x\in[-n, n]\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;正确性证明……&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;考虑全部更改完后的结束状态，即最后的最优状态。&lt;/p&gt;
&lt;p&gt;考虑所有山中最矮的山 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，此山的高度要么为 &lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt;，要么为前一座山的高度 &lt;span class=&#34;math inline&#34;&gt;\(-d\)&lt;/span&gt;，要么为后一座山的高度 &lt;span class=&#34;math inline&#34;&gt;\(-d\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑第二矮的山，以此类推即可。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;将第二维的状态集大小减少为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;，总时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;需注意到因为 &lt;span class=&#34;math inline&#34;&gt;\(a_i+x\times d\)&lt;/span&gt; 中的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 范围为 &lt;span class=&#34;math inline&#34;&gt;\([-n, n]\)&lt;/span&gt; 共 &lt;span class=&#34;math inline&#34;&gt;\(2\times n\)&lt;/span&gt;，所以 DP 数组第二维大小一定要开 &lt;span class=&#34;math inline&#34;&gt;\(2\times n^2\)&lt;/span&gt; 呀！！！&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
using ll = long long;
const int maxn = 305;
const int maxm = 18e4 + 5;
const ll inf = 0x3f3f3f3f3f3f3f3f;
ll d;
int n;
ll h[maxn];
ll f[maxn][maxm];
int main() &amp;#123;
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    memset(f, 0x3f, sizeof (f));
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; d;
    std::vector&amp;lt;ll&amp;gt; st;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; h[i];
        for (ll j = -n; j &amp;lt;= n; ++j)
            st.push_back(h[i] + j * d);
    &amp;#125;
    std::sort(st.begin(), st.end());
    st.erase(std::unique(st.begin(), st.end()), st.end());
    auto abs = [&amp;amp;](ll x) -&amp;gt; ll &amp;#123; return x &amp;gt;= 0 ? x : -x; &amp;#125;;
    f[1][lower_bound(st.begin(), st.end(), h[1]) - st.begin()] = 0;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        int h(1), t(0), p(-1);
        static int q[maxm];
        for (int j = 0; j &amp;lt; (int)st.size(); ++j) &amp;#123;
            while (p &amp;lt; (int)st.size() &amp;amp;&amp;amp; st[p + 1] &amp;lt;= st[j] + d) &amp;#123;
                ++p;
                while (h &amp;lt;= t &amp;amp;&amp;amp; f[i - 1][p] &amp;lt;= f[i - 1][q[t]])
                    --t;
                q[++t] = p;
            &amp;#125;
            while (h &amp;lt;= t &amp;amp;&amp;amp; st[q[h]] &amp;lt; st[j] - d)
                ++h;
            if (h &amp;lt;= t)
                f[i][j] = std::min(inf, f[i - 1][q[h]] + abs(st[j] - ::h[i]));
        &amp;#125;
    &amp;#125;
    ll res = f[n][std::lower_bound(st.begin(), st.end(), h[n]) - st.begin()];
    std::cout &amp;lt;&amp;lt; (res == inf ? -1 : res) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-水淹七军&#34;&gt;B. 水淹七军&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5170/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5170/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易发现最后连出来一定是没有环的。所以一定是一个 DAG。&lt;/p&gt;
&lt;p&gt;我们知道状态压缩是会遍历到每一种情况的，所以我们可以假设当前的 DAG 就是该状态下的最优。&lt;/p&gt;
&lt;p&gt;至于这个「最优」如何定义就要交给我们了。我们不妨强制认为这个 DAG 是按层序遍历得到的，也就是说连续遍历到的点属于同一层（这里的层是指某点到任意源点的最长路长度）。&lt;/p&gt;
&lt;p&gt;显然只有一组相互之间没有任何连边的点才能组成同一层。不妨枚举点集然后暴力转移，转移时记录路径即可。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;注意到在写这玩意儿的时候我还不会 &lt;a href=&#34;/2024/05/17/20240517/&#34;&gt;状压枚举子集&lt;/a&gt;，所以枚举子集的部分可能打得比较抽象。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 25;
const int inf = 0x3f3f3f3f;
const int maxm = (1 &amp;lt;&amp;lt; 16) + 5;
int n, res;
int tag[maxn][maxn];
int f[maxn], g[maxn];
int solve(std::vector&amp;lt;int&amp;gt;&amp;amp; a) &amp;#123;
    static int g[maxn];
    static int f[maxm], p[maxm];
    int n(a.size()), siz(1 &amp;lt;&amp;lt; n);
    std::fill(g, g + n, 0);
    std::fill(p, p + siz + 1, 0);
    std::fill(f, f + siz + 1, inf);
    std::vector&amp;lt;int&amp;gt; st;
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        for (int j = 0; j &amp;lt; n; ++j) &amp;#123;
            if (::g[a[i]] &amp;amp; (1 &amp;lt;&amp;lt; a[j]))
                g[i] |= 1 &amp;lt;&amp;lt; j;
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt; siz; ++i) &amp;#123;
        int now = 0;
        for (int j = 0; j &amp;lt; n; ++j) &amp;#123;
            if (i &amp;amp; (1 &amp;lt;&amp;lt; j))
                now |= g[j];
        &amp;#125;
        if (!(now &amp;amp; i))
            st.push_back(i), f[i] = 0, p[i] = i;
        for (auto j : st) &amp;#123;
            if (!(i &amp;amp; j)) &amp;#123;
                if (f[i | j] &amp;gt; f[i] + 1)
                    f[i | j] = f[i] + 1, p[i | j] = j;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    int now = siz - 1;
    while (now) &amp;#123;
        int fa = now ^ p[now];
        for (int i = 0; i &amp;lt; n; ++i)
            if (p[now] &amp;amp; (1 &amp;lt;&amp;lt; i))
                for (int j = 0; j &amp;lt; n; ++j)
                    if ((fa &amp;amp; (1 &amp;lt;&amp;lt; j)) &amp;amp;&amp;amp; tag[a[j]][a[i]] == 2)
                        tag[a[j]][a[i]] = 1, tag[a[i]][a[j]] = -1;
        now = fa;
    &amp;#125;
    return f[siz - 1];
&amp;#125;
int find(int x) &amp;#123;
    return x == f[x] ? x : f[x] = find(f[x]);
&amp;#125;
int main() &amp;#123;
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    int m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; edge;
    for (int i = 0; i &amp;lt; n; ++i)
        f[i] = i;
    while (m--) &amp;#123;
        int x, y;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        edge.emplace_back(--x, --y);
        f[find(x)] = find(y);
        g[x] |= 1 &amp;lt;&amp;lt; y;
        g[y] |= 1 &amp;lt;&amp;lt; x;
        tag[x][y] = tag[y][x] = 2;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; ver[maxn];
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        ver[find(i)].push_back(i);
    &amp;#125;
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        if (f[i] == i)
            res = std::max(res, solve(ver[i]));
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    for (auto i : edge) &amp;#123;
        if (tag[i.first][i.second] == 1)
            std::cout &amp;lt;&amp;lt; i.first + 1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; i.second + 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        else std::cout &amp;lt;&amp;lt; i.second + 1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; i.first + 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-煮酒论英雄&#34;&gt;C. 煮酒论英雄&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5170/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5170/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意到如果存在串被其他串包含那么直接将其毙掉就可以了。&lt;/p&gt;
&lt;p&gt;对于相互不完全包含的串，我们令 &lt;span class=&#34;math inline&#34;&gt;\(mx_{i, j, 0/1, 0/1}\)&lt;/span&gt; 表示将正序 / 逆序的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 串拼到正序 / 逆序的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 串之前，两者共用相接公共部分的串长。这个可以用字符串哈希暴力求。&lt;/p&gt;
&lt;p&gt;用状压枚举拼接顺序，求得最小总串长即可。&lt;/p&gt;
&lt;p&gt;注意如果去掉被包含串后 &lt;span class=&#34;math inline&#34;&gt;\(n=1\)&lt;/span&gt; 时需直接输出串的 border；以及答案需和 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 取 &lt;span class=&#34;math inline&#34;&gt;\(\max\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;实现起来又臭又长，但实际上思路确实非常简单。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
using ll = long long;
const int p = 131;
const int maxn = 25;
const int lim = 2e4;
const int maxl = 2e4 + 5;
const int mod = 998244353;
const int inf = 0x3f3f3f3f;
const int maxm = (1 &amp;lt;&amp;lt; 16) + 5;
int n;
std::vector&amp;lt;std::string&amp;gt; s;
std::vector&amp;lt;std::vector&amp;lt;ll&amp;gt; &amp;gt; h[2];
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    std::cin &amp;gt;&amp;gt; n;
    s.resize(n);
    h[0].resize(n);
    h[1].resize(n);
    static ll base[maxl];
    static bool del[maxn];
    base[0] = 1;
    for (int i = 1; i &amp;lt;= lim; ++i)
        base[i] = base[i - 1] * p % mod;

    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; s[i];
        h[0][i].resize((int)s[i].length());
        h[1][i].resize((int)s[i].length());
        ll x = 0;
        for (int j = 0; j &amp;lt; (int)s[i].length(); ++j, (x *= p) %= mod)
            h[0][i][j] = ((x += s[i][j]) %= mod);
        std::reverse(s[i].begin(), s[i].end());
        x = 0;
        for (int j = 0; j &amp;lt; (int)s[i].length(); ++j, (x *= p) %= mod)
            h[1][i][j] = ((x += s[i][j]) %= mod);
        std::reverse(s[i].begin(), s[i].end());
    &amp;#125;

    std::vector&amp;lt;int&amp;gt; tab;
    auto gethash = [&amp;amp;](int i, int l, int r, bool t) -&amp;gt; ll &amp;#123;
        if (l &amp;gt; r) return 0;
        ll res = (h[t][i][r] - (l ? h[t][i][l - 1] : 0) * base[r - l + 1] % mod);
        return (res % mod + mod) % mod;
    &amp;#125;;
    // ll now = 0;
    // for (int i = 0; i &amp;lt;= 4; ++i)
    //     now = (now * p + s[1][i]) % mod;
    // printf(&amp;quot;now = %lld\n&amp;quot;, now);
    // now = 0;
    // for (int i = 3; i &amp;lt;= 7; ++i)
    //     now = (now * p + s[0][i]) % mod;
    // printf(&amp;quot;now = %lld\n&amp;quot;, now);
    // printf(&amp;quot;# %lld\n&amp;quot;, h[0][0].back());
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        tab.push_back(i);
        for (int j = 0; j &amp;lt; n; ++j)
            if (!del[j] &amp;amp;&amp;amp; i != j)
                for (int k = 0; k &amp;lt;= ((int)s[j].length()) - ((int)s[i].length()); ++k) &amp;#123;
                    // printf(&amp;quot;i = %d, j = %d, k = %d, %lld / %lld\n&amp;quot;, i, j, k,
                    //         gethash(i, 0, ((int)s[i].length()) - 1, 0), gethash(j, k, k + ((int)s[i].length()) - 1, 0));
                    if (h[0][i].back() == gethash(j, k, k + ((int)s[i].length()) - 1, 0)) &amp;#123;
                        tab.pop_back();
                        del[i] = 1;
                        goto outo;
                    &amp;#125;
                &amp;#125;
        outo: ;
    &amp;#125;
    n = (int)tab.size();
    if (n == 1) &amp;#123;
        int border;
        for (border = ((int)s[tab[0]].length()) - 1; ~border; --border) &amp;#123;
            if (gethash(tab[0], 0, border - 1, 0) == gethash(tab[0], ((int)s[tab[0]].length()) - border, ((int)s[tab[0]].length()) - 1, 0))
                break;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; std::max(2, ((int)s[tab[0]].length()) - border) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    else &amp;#123;
        static int mx[maxn][maxn][2][2];
        for (int i = 0; i &amp;lt; n; ++i)
            for (int j = 0; j &amp;lt; n; ++j)
                for (int a = 0; a &amp;lt; 2; ++a)
                    for (int b = 0; b &amp;lt; 2; ++b)
                        for (int k = std::min((int)s[tab[i]].length(), (int)s[tab[j]].length()); ~k; --k) &amp;#123;
                            if (gethash(tab[i], ((int)s[tab[i]].length()) - k, ((int)s[tab[i]].length()) - 1, a) ==
                                                                                            gethash(tab[j], 0, k - 1, b)) &amp;#123;
                                mx[i][j][a][b] = (int)s[tab[j]].length() - k;
                                // printf(&amp;quot;%d(%d) + %d(%d) = %d, k = %d\n&amp;quot;, i, a, j, b, mx[i][j][a][b], k);
                                break;
                            &amp;#125;
                        &amp;#125;
        static int f[maxm][maxn][2];
        memset(f, 0x3f, sizeof (f));

        int siz = 1 &amp;lt;&amp;lt; n, res = inf;
        f[1][0][0] = (int)s[tab[0]].length();
        for (int i = 1; i &amp;lt; siz; ++i)
            for (int j = 0; j &amp;lt; n; ++j)
                if (i &amp;amp; (1 &amp;lt;&amp;lt; j))
                    for (int a = 0; a &amp;lt; 2; ++a) &amp;#123;
                        // printf(&amp;quot;f[%d][%d][%d] = %d\n&amp;quot;, i, j, a, f[i][j][a]);
                        for (int k = 0; k &amp;lt; n; ++k)
                            if (!(i &amp;amp; (1 &amp;lt;&amp;lt; k)))
                                for (int b = 0; b &amp;lt; 2; ++b)
                                    f[i | (1 &amp;lt;&amp;lt; k)][k][b] = std::min(f[i | (1 &amp;lt;&amp;lt; k)][k][b], f[i][j][a] + mx[j][k][a][b]);
                        if (i == siz - 1)
                            res = std::min(res, f[i][j][a] - (int)s[tab[0]].length() + mx[j][0][a][0]);
                    &amp;#125;
        
        std::cout &amp;lt;&amp;lt; std::max(2, res) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-捏斑马&#34;&gt;A. 捏斑马&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5175/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5175/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我甚至不会（）&lt;/p&gt;
&lt;p&gt;翻转 + 拼接本质上就是首尾相接。我们把字符串整个拼到自己后边儿，然后任取一段长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的串就可以得到一个倒过来的操作后的字符串。&lt;/p&gt;
&lt;p&gt;注意到可以操作很多次。但是既然我们操作后的串也可以在这个拼接后的串中找到了，那么其实多次操作后的也行。&lt;/p&gt;
&lt;p&gt;所以呢我们在拼接后的串种枚举每一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的串计算答案即可。&lt;/p&gt;
&lt;p&gt;具体怎么算呢？注意到只看开头，也就是在新串中只看离我们当前枚举的右端点最近的那一段，所以我们打一个双指针，看这一段是否在右移后仍然合法，如果非法就把答案区间左端点更新为右端点自己。以及注意到左右端点的距离不能超过 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int res;
std::string s;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    std::cin &amp;gt;&amp;gt; s;
    int l = 0, r = -1, n = (int)s.length();
    char la = 0;
    s += s;
    while (++r &amp;lt; (int)s.length()) &amp;#123;
        if (s[r] == la)
            l = r;
        while (r - l + 1 &amp;gt; n) ++l;
        la = s[r];
        res = std::max(res, r - l + 1);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-链状闪电&#34;&gt;D. 链状闪电&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5175/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5175/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;莫名其妙且又臭又长的根号做法。&lt;/p&gt;
&lt;p&gt;容易发现一个怪被杀掉了序列就会裂开成两段连续子序列，以及最先被杀掉的怪物一定血量最少。在裂开来的两段连续子序列中也满足此规律，以此类推。&lt;/p&gt;
&lt;p&gt;考虑对序列建立笛卡尔树。令树根为 &lt;span class=&#34;math inline&#34;&gt;\(rt\)&lt;/span&gt;，当前攻击力为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，记 &lt;span class=&#34;math inline&#34;&gt;\(t_{x, k}=\left\lceil \dfrac {h_x}k \right\rceil\)&lt;/span&gt;，即不考虑其他条件时击倒 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 所需次数。&lt;/p&gt;
&lt;p&gt;那么对于 &lt;span class=&#34;math inline&#34;&gt;\(rt\)&lt;/span&gt; 的左、右儿子 &lt;span class=&#34;math inline&#34;&gt;\(l,r\)&lt;/span&gt;，单考虑这三个怪物所需的总击倒次数，容易发现为 &lt;span class=&#34;math inline&#34;&gt;\(t_{rt,k}+(t_{l,k}-t_{rt,k})+(t_{r,k}-t_{rt,k})\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 引导的子树，此时的实际已攻击次数为 &lt;span class=&#34;math inline&#34;&gt;\(t_{l,k}\)&lt;/span&gt;；所以对于 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 的左右儿子 &lt;span class=&#34;math inline&#34;&gt;\(l&amp;#39;,r&amp;#39;\)&lt;/span&gt;，击倒这两个怪物的所需次数为 &lt;span class=&#34;math inline&#34;&gt;\((t_{l&amp;#39;,k} - t_{l,k})+(t_{r&amp;#39;,k}-t_{l,k})\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 引导的子树同理。&lt;/p&gt;
&lt;p&gt;所以我们就可以知道，如果存在树边 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt;，那么击倒 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的所需次数为 &lt;span class=&#34;math inline&#34;&gt;\(t_{v,k}-t_{u,k}\)&lt;/span&gt;；特别地，击倒 &lt;span class=&#34;math inline&#34;&gt;\(rt\)&lt;/span&gt; 的所需次数为 &lt;span class=&#34;math inline&#34;&gt;\(t_{rt,k}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么我们就可以通过一次 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的树上 DFS 对于一个 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 找到答案了。&lt;/p&gt;
&lt;p&gt;那么对于 &lt;span class=&#34;math inline&#34;&gt;\(2\times 10^4\)&lt;/span&gt; 范围内的所有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，应该怎么办呢？这个时候就要利用 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的性质进行根号分治了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(k\le \sqrt {2\times 10^4}\)&lt;/span&gt;，我们大可以直接做这么多次 DFS 得到答案；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;gt;\sqrt {2\times 10^4}\)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;我们容易发现最终的结果是若干个 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的值相加减得到的，而每个 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的权值 &lt;span class=&#34;math inline&#34;&gt;\(cnt\)&lt;/span&gt; 取决于其在笛卡尔树上的儿子个数，有多少就在 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的基础上减去多少。&lt;/p&gt;
&lt;p&gt;由于 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 实在过于特殊，考虑整除分块 / 数论分块。对于每个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;#39;\in (\sqrt {2\times 10^4}, 2\times 10^4]\)&lt;/span&gt;，可能的 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 值只有 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt {2\times 10^4 }\)&lt;/span&gt; 种。计算出对于每个 &lt;span class=&#34;math inline&#34;&gt;\(t&amp;#39;\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(\left\lceil \dfrac {h_x}{k&amp;#39;} \right\rceil=t&amp;#39;\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;#39;\)&lt;/span&gt; 范围，对该范围 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;#39;\)&lt;/span&gt; 的答案区间加上 &lt;span class=&#34;math inline&#34;&gt;\(t&amp;#39;\times cnt\)&lt;/span&gt; 即可，可以使用差分。&lt;/p&gt;
&lt;p&gt;至此，就可以在一次 DFS 内解决这种情况下的问题。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n\sqrt {2\times 10^4})\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;值得注意的是，我在做这道题的时候并没有意识到自己用到了笛卡尔树，&lt;/p&gt;
&lt;p&gt;所以代码中笛卡尔树的建树部分可能长得特别抽象（&lt;/p&gt;
&lt;p&gt;这里是使用了下标上的 ST 表带 log 地求解了左右儿子。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxm = 35;
const int maxn = 1e5 + 5;
using ll = long long;
ll res;
int n, k, l;
int g[maxn][2];
int f[maxn][maxm];
int a[maxn], t[maxn];
ll dif[maxn], cnt[maxn];
int ask(int l, int r) &amp;#123;
    if (l &amp;gt; r) return 0;
    int k = log(r - l + 1) / log(2.0);
    return (a[f[l][k]] &amp;lt; a[f[r - (1 &amp;lt;&amp;lt; k) + 1][k]]) ? f[l][k] : f[r - (1 &amp;lt;&amp;lt; k) + 1][k];
&amp;#125;
void bld(int rt, int l, int r) &amp;#123;
    if (rt != l) &amp;#123;
        g[rt][0] = ask(l, rt - 1);
        bld(g[rt][0], l, rt - 1);
    &amp;#125;
    if (rt != r) &amp;#123;
        g[rt][1] = ask(rt + 1, r);
        bld(g[rt][1], rt + 1, r);
    &amp;#125;
    return;
&amp;#125;
// k &amp;lt;= sqrt(lim)
void DFS(int x, int k, int fa) &amp;#123;
    t[x] = (a[x] + k - 1) / k;
    res += t[x] - t[fa];
    for (int i = 0; i &amp;lt; 2; ++i) &amp;#123;
        if (g[x][i])
            DFS(g[x][i], k, x);
    &amp;#125;
    return;
&amp;#125;
// k &amp;gt; sqrt(lim)
void DFS(int x, int fa) &amp;#123;
    ++cnt[x];
    --cnt[fa];
    for (int i = 0; i &amp;lt; 2; ++i) &amp;#123;
        if (g[x][i])
            DFS(g[x][i], x);
    &amp;#125;
    int l = k + 1, r;
    // 注意这里 i 的范围判定，如果直接写成 i * i &amp;lt;= k 会少计算一些情况
    for (int i = 1; (i - 1) * (i - 1) &amp;lt; k; ++i) &amp;#123;
        r = l - 1;
        l = (a[x] + i - 1) / i;
        // fprintf(stderr, &amp;quot;%d: [%d, %d] += %d * %d\n&amp;quot;, a[x], l, r, cnt[x], i);
        dif[l] += i * cnt[x], dif[r + 1] -= i * cnt[x];
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    std::cin &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        f[i][0] = i;
        k = std::max(k, a[i]);
    &amp;#125;
    for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
        for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
            f[i][j] = (a[f[i][j - 1]] &amp;lt; a[f[i + (1 &amp;lt;&amp;lt; (j - 1))][j - 1]]) ? f[i][j - 1] : f[i + (1 &amp;lt;&amp;lt; (j - 1))][j - 1];
    int rt = ask(1, n);
    bld(rt, 1, n);
    for (int i = 1; i * i &amp;lt;= k; ++i) &amp;#123;
        res = 0;
        DFS(rt, i, 0);
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
        l = i + 1;
    &amp;#125;
    // fputs(&amp;quot;\n&amp;quot;, stderr);
    DFS(rt, 0);
    std::partial_sum(dif + 1, dif + k + 1, dif + 1);
    for (int i = l; i &amp;lt;= k; ++i)
        std::cout &amp;lt;&amp;lt; dif[i] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-弹飞绵羊&#34;&gt;F. 弹飞绵羊&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5175/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5175/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很棒可持久化分块，使我 lxl 旋转。&lt;/p&gt;
&lt;p&gt;笑话：赛后 5s 才交上去。然后 A 了。&lt;/p&gt;
&lt;p&gt;我们猜大家都会普通的弹飞绵羊这道题。就是块间暴力跳嘛。&lt;/p&gt;
&lt;p&gt;这里给一个我自己整的简单实现方法。&lt;/p&gt;
&lt;p&gt;我们把分出来的块视作若干个无关联的散块并纳入块集合；对于每一个版本，用一个大小为 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt n\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(id\)&lt;/span&gt; 数组记录每一位置的块在块集合中对应的位置。&lt;/p&gt;
&lt;p&gt;然后该怎么搞怎么搞即可。&lt;/p&gt;
&lt;p&gt;P.S. zwb 坚定不移信仰 lxl 神教于是决定用可持久化平衡树实现可持久化分块，结果当然是因为多了个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 被卡飞了，最后气急败坏慌不择路恼羞成怒抄起了我的代码。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxk = 320;
const int maxn = 2e5 + 5;
class devicer &amp;#123;
public:
    int l, r;
    std::vector&amp;lt;int&amp;gt; ne, u, a;
    int &amp;amp;nex(int x);
    int &amp;amp;val(int x);
&amp;#125;;
int id[maxn][maxk];
std::vector&amp;lt;devicer&amp;gt; b;
int n, q, ty, siz, k, la;
int a[maxn], tab[maxn], blk[maxn];
void upd(int x, int a, devicer &amp;amp;p) &amp;#123;
    if (x + a &amp;gt; n)
        p.nex(x) = -1, p.val(x) = 1;
    else if (x + a &amp;gt; p.r)
        p.nex(x) = x + a, p.val(x) = 1;
    else
        p.nex(x) = p.nex(x + a), p.val(x) = p.val(x + a) + 1;
    // printf(&amp;quot;x = %d, a = %d, r = %d, upd ne[%d] to %d\n&amp;quot;, x, a, p.r, x, p.nex(x));
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q &amp;gt;&amp;gt; ty;
    siz = sqrt(n);
    k = (n + siz - 1) / siz;
    b.resize(k);
    int la = 0, now = k - 1;
    for (auto &amp;amp;i : b)
        i.l = la + 1, la = i.r = i.l + siz - 1;
    b.back().r = n;
    for (int i = 0; i &amp;lt; k; ++i) &amp;#123;
        id[0][i] = i;
        b[i].a.resize(b[i].r - b[i].l + 1);
        b[i].u.resize(b[i].r - b[i].l + 1);
        b[i].ne.resize(b[i].r - b[i].l + 1);
        for (int j = b[i].l; j &amp;lt;= b[i].r; ++j)
            tab[j] = j - b[i].l, blk[j] = i;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; b[blk[i]].a[tab[i]];
    for (int i = n; i; --i)
        upd(i, b[blk[i]].a[tab[i]], b[blk[i]]);
    int ver = 0;
    while (q--) &amp;#123;
        int op, pr, x;
        static int res = 0;
        std::cin &amp;gt;&amp;gt; op &amp;gt;&amp;gt; pr &amp;gt;&amp;gt; x;
        if (!ty)
            res = 0;
        x ^= res;
        if (op == 1) &amp;#123;
            std::copy(id[pr], id[pr] + k, id[++ver]);
            b.push_back(b[id[ver][blk[x]]]);
            id[ver][blk[x]] = ++now;
            std::cin &amp;gt;&amp;gt; b.back().a[tab[x]];
            b.back().a[tab[x]] ^= res;
            for (int i = x; i &amp;gt;= b.back().l; --i)
                upd(i, b.back().a[tab[i]], b.back());
        &amp;#125;
        else &amp;#123;
            int p = x;
            res = 0;
            while (~p) &amp;#123;
                // printf(&amp;quot;p = %d\n&amp;quot;, p);
                res += b[id[pr][blk[p]]].u[tab[p]];
                p = b[id[pr][blk[p]]].ne[tab[p]];
            &amp;#125;
            std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int&amp;amp; devicer::nex(int x) &amp;#123;
    return ne[tab[x]];
&amp;#125;
int&amp;amp; devicer::val(int x) &amp;#123;
    return u[tab[x]];
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="SAM" />
        <category term="状压" />
        <category term="分块" />
        <category term="可持久化" />
        <category term="笛卡尔树" />
        <updated>2024-05-01T07:44:48.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240125/</id>
        <title>我超！雀！</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240125/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;http://222.180.160.110:61235/contest/4813/problem/1&#34;&gt;PKUSC2022 Mahjong&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1JB4y1R7AP/&#34; class=&#34;uri&#34;&gt;https://www.bilibili.com/video/BV1JB4y1R7AP/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里是 PKUSC 当时的讲解视频。听说可以证明本题一定有 &lt;span class=&#34;math inline&#34;&gt;\(\le 5\)&lt;/span&gt; 的解。好神奇。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;就比如说我们爆搜，&lt;span class=&#34;math inline&#34;&gt;\(9^4\times 13^4\)&lt;/span&gt; 这个显然干不动对吧，所以我们考虑反过来 DP。&lt;/p&gt;
&lt;p&gt;我们先把字符串转化成计数数组，就是每种牌有多少片。不妨将 &lt;code&gt;1m ~ 9s&lt;/code&gt; 编号为 &lt;span class=&#34;math inline&#34;&gt;\(1\sim 27\)&lt;/span&gt;，记 &lt;span class=&#34;math inline&#34;&gt;\(g_i\)&lt;/span&gt; 为编号为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的牌的数量。&lt;/p&gt;
&lt;p&gt;为什么我们觉得 DP 不好打呢？因为换牌操作可以将两个毫不相干的牌的数量更改，不好记录状态。我们不妨直接将换牌拆成 &lt;em&gt;丢弃一张牌&lt;/em&gt; 和 &lt;em&gt;借取令一张牌&lt;/em&gt; 两个操作。很显然这两个操作数量是一样的，因为我们的牌数量自始至终不变。&lt;/p&gt;
&lt;p&gt;对于比较简单的对子作为终局的情况，我们只关心对数是否为 &lt;span class=&#34;math inline&#34;&gt;\(7\)&lt;/span&gt;，所以设计状态：&lt;span class=&#34;math inline&#34;&gt;\(dp_{i,j}\)&lt;/span&gt; 表示前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 张牌中凑出 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个对子的最小代价。&lt;/p&gt;
&lt;p&gt;那么就分 &lt;em&gt;把当前牌丢一些 / 借一些拿去组对子&lt;/em&gt; 和 &lt;em&gt;直接丢弃当前牌&lt;/em&gt; 两种方案。因为丢 / 借的数量是不确定的，直接 &lt;code&gt;abs&lt;/code&gt; 一下就好。刷表，有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
dp_{i+1,j}=dp_{i,j}+g_{i+1}\\
dp_{i+1,j+1}=dp_{i,j}+|g_{i+1}-2|
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后我们的答案就来自 &lt;span class=&#34;math inline&#34;&gt;\(dp_{27,7}\)&lt;/span&gt;。然后注意这里我们的终局是 14 张牌 &lt;del&gt;你能秒我&lt;/del&gt;，但起手只有 13 张牌，所以其实会有一个额外的借牌操作，假设答案为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，那么其实 &lt;span class=&#34;math inline&#34;&gt;\(dp_{27,7}=2\times x+1\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;有了对子的铺垫，面子手其实也还好。我们需要考虑的是对子和面子的个数。&lt;/p&gt;
&lt;p&gt;但是有个问题，对子只用借 / 丢当前花色，但面子可能是会借 / 丢下一个 / 下下一个花色的。&lt;/p&gt;
&lt;p&gt;所以干脆全部记录到状态里，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k,a,b}\)&lt;/span&gt; 表示当前在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个花色，凑成了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个面子，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个对子，需要 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(i+2\)&lt;/span&gt;。注意因为表示丢借有负数不太容易，不如就直接设成需要的数量了。&lt;/p&gt;
&lt;p&gt;因为这个需要数量只是前面的花色对当前花色的需要 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，我们还要满足当前花色 &lt;strong&gt;自身&lt;/strong&gt; 的需要 &lt;span class=&#34;math inline&#34;&gt;\(now\)&lt;/span&gt;（也就是说当前花色一共需要 &lt;span class=&#34;math inline&#34;&gt;\(a+now\)&lt;/span&gt; 张）。注意这里 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 张全部都是拿去借给前面的花色用的，自己不能用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(k=0\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(now\ge 2\)&lt;/span&gt;，此时可以从 &lt;span class=&#34;math inline&#34;&gt;\(now\)&lt;/span&gt; 里拿两张出来凑对子，剩下的 &lt;span class=&#34;math inline&#34;&gt;\(now - 2\)&lt;/span&gt; 因为肯定 &lt;span class=&#34;math inline&#34;&gt;\(\le 2\)&lt;/span&gt;，所以只能全部拿去凑顺子。所以有：&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[
f_{i+1,j+now-2,1,b+now-2, now-2}=f_{i,j,0,a,b}+|g_{i+1}-(a+now)|
\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(now\ge 3\)&lt;/span&gt;，拿三张凑一面。有：&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[
f_{i+1,j+now-2,k,b+now-3,now-3}=f_{i,j,0,a,b}+|g_{i+1}-(a+now)|
\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(now\ne 0\)&lt;/span&gt;，可以凑顺子，有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i+1,j+now,k,b+now,now}=f_{i,j,0,a,b}+|g_{i+1}-(a+now)|
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注意不能跨花色借牌，也就是不能让 &lt;span class=&#34;math inline&#34;&gt;\(i=8/9/17/18/26/27\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;答案就是 &lt;span class=&#34;math inline&#34;&gt;\(f_{27,4,1,0,0}\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;然后这两个情况取一个 &lt;span class=&#34;math inline&#34;&gt;\(\min\)&lt;/span&gt; 就是答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
using std::cin;
using std::getline;
using str = std::string;
int g[30];
int dp[30][15];
str sm, sp, ss;
int f[30][7][2][7][7];
int abs(int x) &amp;#123; return x &amp;gt;= 0 ? x : -x; &amp;#125;
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
void upd(int &amp;amp;x, int y) &amp;#123; x = min(x, y); return; &amp;#125;
int main() &amp;#123;
    getline(cin, sm, &amp;#39;m&amp;#39;);
    getline(cin, sp, &amp;#39;p&amp;#39;);
    getline(cin, ss, &amp;#39;s&amp;#39;);
    for (auto i : sm) ++g[i - &amp;#39;0&amp;#39;];
    for (auto i : sp) ++g[i - &amp;#39;0&amp;#39; + 9];
    for (auto i : ss) ++g[i - &amp;#39;0&amp;#39; + 18];
    // 打对子
    memset(dp, 0x3f, sizeof (dp));
    dp[0][0] = 0;
    for (int i = 0; i &amp;lt; 27; ++i) &amp;#123;
        for (int j = 0; j &amp;lt;= 7; ++j) &amp;#123;
            if (dp[i][j] == 0x3f3f3f3f) continue;
            upd(dp[i + 1][j], dp[i][j] + g[i + 1]);
            upd(dp[i + 1][j + 1], dp[i][j] + abs(g[i + 1] - 2));
        &amp;#125;
    &amp;#125;
    // 打飞机
    memset(f, 0x3f, sizeof (f));
    f[0][0][0][0][0] = 0;
    for (int i = 0; i &amp;lt; 27; ++i)
    for (int j = 0; j &amp;lt;= 4; ++j)
    for (int k = 0; k &amp;lt;= 1; ++k)
    for (int a = 0; a &amp;lt;= 4; ++a)
    for (int b = 0; b &amp;lt;= 4; ++b) &amp;#123;
        if (i % 9 == 8 &amp;amp;&amp;amp; b) continue;
        if (i % 9 == 0 &amp;amp;&amp;amp; a + b) continue;
        for (int now = 0; now &amp;lt;= 4; ++now) &amp;#123; // 对当前的额外需求 
            if (a + now &amp;gt; 4) continue;
            int v = f[i][j][k][a][b] + abs(g[i + 1] - (a + now));
            if (j + now &amp;lt;= 4 &amp;amp;&amp;amp; b + now &amp;lt;= 4) // 直接硬配顺子 
                upd(f[i + 1][j + now][k][b + now][now], v);
            if (now &amp;gt;= 2 &amp;amp;&amp;amp; !k &amp;amp;&amp;amp; j + now - 2 &amp;lt;= 4 &amp;amp;&amp;amp; b + now - 2 &amp;lt;= 4) // 借两个去凑对子 
                upd(f[i + 1][j + now - 2][1][b + now - 2][now - 2], v);
            if (now &amp;gt;= 3 &amp;amp;&amp;amp; j + now - 2 &amp;lt;= 4 &amp;amp;&amp;amp; b + now - 3 &amp;lt;= 4) // 借两个去凑三不带 
                upd(f[i + 1][j + now - 2][k][b + now - 3][now - 3], v);
        &amp;#125;
    &amp;#125;
    // 拿来借走会算两次 
    print(min(dp[27][7], f[27][4][1][0][0]) / 2, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <updated>2024-01-25T03:20:57.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240111/</id>
        <title>杂题别选谈了</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240111/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;http://222.180.160.110:61235/contest/4665/problem/2&#34;&gt;SP4060 Game with Probability Problem&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_i,g_i\)&lt;/span&gt; 分别表示还剩 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个的时候轮到 Alice 和 Bob 时 &lt;strong&gt;Alice&lt;/strong&gt; 分别的胜率。&lt;/p&gt;
&lt;p&gt;概率经典倒推。那么显然有 &lt;span class=&#34;math inline&#34;&gt;\(f_0=0,g_0=1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后就是一个分讨，讨论这个人想要正面还是反面。很显然，对于同样的剩余棋子数，两个人先手的情况对于这颗棋子的喜爱程度是一样的。也就是说，要么都想要，要么都不想要。&lt;/p&gt;
&lt;p&gt;什么时候想要呢？拿掉过后自己胜率更大，也就是 &lt;span class=&#34;math inline&#34;&gt;\(g_{i-1}&amp;gt;f_{i-1}\)&lt;/span&gt;。此时有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_i=(1-p)\times g_i+p\times g_{i-1}\\
g_i=(1-q)\times f_i+q\times f_{i-1}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;发现是互相影响的，这个时候先不要着急怀疑自己推错了，因为我们这里有两个未知数，又刚好有两个方程，暴解一下就有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_i=\dfrac {(1-p)\times q\times f_{i-1}+p\times g_{i-1}}{1-(1-p)(1-q)}\\
g_i=\dfrac {(1-q)\times p\times g_{i-1}+q\times f_{i-1}}{1-(1-p)(1-q)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后 &lt;span class=&#34;math inline&#34;&gt;\(g_{i-1}&amp;lt;f_{i-1}\)&lt;/span&gt; 的情况也差不多，把拿的概率和不拿的概率换一下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_i=p\times g_i+(1-p)\times g_{i-1}\\
g_i=q\times f_i+(1-q)\times f_{i-1}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;解方程组有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_i=\dfrac {(1-q)\times p\times f_{i-1}+(1-p)\times g_{i-1}}{1-p\times q}\\
g_i=\dfrac {(1-p)\times q\times g_{i-1}+(1-q)\times f_{i-1}}{1-p\times q}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后就可以开始 DP 了。最后的答案就是 &lt;span class=&#34;math inline&#34;&gt;\(f_{\min(n,1000)}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;还有个问题就是 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 特别大然后这个看起来也不太能矩乘，但是这个 DP 式有个好处是它的增长趋势是指数级的，所以我们 DP 到 &lt;span class=&#34;math inline&#34;&gt;\(1000\)&lt;/span&gt; 就可以了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
namespace XSC062 &amp;#123;
const int maxn = 1e3 + 5;
using db = double;
db p, q;
int T, n;
db f[maxn], g[maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;T);
    while (T--) &amp;#123;
        scanf(&amp;quot;%d %lf %lf&amp;quot;, &amp;amp;n, &amp;amp;p, &amp;amp;q);
        f[0] = .0, g[0] = 1.0;
        for (int i = 1; i &amp;lt;= n &amp;amp;&amp;amp; i &amp;lt;= 1000; ++i) &amp;#123;
            if (g[i - 1] &amp;gt; f[i - 1]) &amp;#123;
                f[i] = ((1 - p) * q * f[i - 1] + p * g[i - 1]) / (1 - (1 - p) * (1 - q));
                g[i] = ((1 - q) * p * g[i - 1] + q * f[i - 1]) / (1 - (1 - p) * (1 - q));
            &amp;#125;
            else &amp;#123;
                f[i] = ((1 - q) * p * f[i - 1] + (1 - p) * g[i - 1]) / (1 - p * q);
                g[i] = ((1 - p) * q * g[i - 1] + (1 - q) * f[i - 1]) / (1 - p * q);
            &amp;#125;
        &amp;#125;
        printf(&amp;quot;%.6lf\n&amp;quot;, f[min(n, 1000)]);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
int main() &amp;#123;
    XSC062::main();
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="概率期望" />
        <updated>2024-01-11T03:25:19.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20231003/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20231003/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268&#34;&gt;周考 14&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;医生问我对药有什么要求吗，我说我宁死不喝冲剂。&lt;/p&gt;
&lt;p&gt;然后医生给我开了五盒胶囊，告诉我说一天三次，一次六个。&lt;/p&gt;
&lt;p&gt;哈哈哈，我自找的。以此为证，A 一道题磕一片！！！&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-修改序列&#34;&gt;A. 修改序列&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意到一增一减，全数列的和 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 不变，考虑这一点带来的提示。&lt;/p&gt;
&lt;p&gt;假设最后要求一部分数为 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，另一部分为 &lt;span class=&#34;math inline&#34;&gt;\(p+1\)&lt;/span&gt;，那么有 &lt;span class=&#34;math inline&#34;&gt;\(p = \lfloor \dfrac sn \rfloor\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(p+1\)&lt;/span&gt; 的数量 &lt;span class=&#34;math inline&#34;&gt;\(c_r=s\bmod n\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的数量 &lt;span class=&#34;math inline&#34;&gt;\(c_l=n-c_r\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么我们让 &lt;span class=&#34;math inline&#34;&gt;\(\le p\)&lt;/span&gt; 的变成 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\ge p + 1\)&lt;/span&gt; 的变成 &lt;span class=&#34;math inline&#34;&gt;\(p + 1\)&lt;/span&gt;。直接求两数距离，最后将总和除以二即为答案、&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;正确性证明…&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;这样做的最优性毫无疑问，问题无非就在于这么做的正确性，换言之，为什么一定能找到合法的操作序列还原我们的求解过程。&lt;/p&gt;
&lt;p&gt;将原数列分为两部分，数值 &lt;span class=&#34;math inline&#34;&gt;\(\le p\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;）和数值 &lt;span class=&#34;math inline&#34;&gt;\(\ge p + 1\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;）。&lt;/p&gt;
&lt;p&gt;再把我们的目标状态分为两部分，数值 &lt;span class=&#34;math inline&#34;&gt;\(= p\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;）和 数值 &lt;span class=&#34;math inline&#34;&gt;\(=p + 1\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;）。&lt;/p&gt;
&lt;p&gt;那么有 &lt;span class=&#34;math inline&#34;&gt;\(\begin{cases}X+Y=s\\A+B=s\end{cases}\)&lt;/span&gt;，由等式的基本性质得 &lt;span class=&#34;math inline&#34;&gt;\(X-A+Y-B = 0\)&lt;/span&gt;，移项得 &lt;span class=&#34;math inline&#34;&gt;\(Y-B=A-X\)&lt;/span&gt;。也就是说，&lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; 部分与 &lt;span class=&#34;math inline&#34;&gt;\(p+1\)&lt;/span&gt; 的差的总和正好等于 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 部分与 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的差的总和。&lt;/p&gt;
&lt;p&gt;这个时候我们的正确性就有了保证。&lt;/p&gt;
&lt;p&gt;这个时候你可能就有疑问了，&lt;span class=&#34;math inline&#34;&gt;\(X,Y\)&lt;/span&gt; 中的元素个数和 &lt;span class=&#34;math inline&#34;&gt;\(A,B\)&lt;/span&gt; 中的元素个数并不对应，怎么办呢？&lt;/p&gt;
&lt;p&gt;我们发现上面的原理式并不会随元素个数的变化而变化，所以依然可以用它来解答这个问题。没有人规定 &lt;span class=&#34;math inline&#34;&gt;\(Y-B\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(A-X\)&lt;/span&gt; 不能为负，为负时我们把 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 中塞不下的 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 拿到 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 里面去即可，反之同理。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;那么代码还是很好写的。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e5 + 5;
int a[maxn];
int n, s, p, cl, cg, res;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]), s += a[i];
    p = s / n, cg = s - p * n, cl = n - cg;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (a[i] &amp;lt;= p) &amp;#123;
            if (cl) res += p - a[i], --cl;
            else res += p - a[i] + 1, --cg;
        &amp;#125;
        else &amp;#123;
            if (cg) res += a[i] - p - 1, --cg;
            else res += a[i] - p, --cl;
        &amp;#125;
    &amp;#125;
    print(res / 2, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-knuth-表示法&#34;&gt;B. Knuth 表示法&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模拟。输入的数用 &lt;code&gt;map&lt;/code&gt; 转化为 &lt;span class=&#34;math inline&#34;&gt;\(10\)&lt;/span&gt; 的次幂形式，然后幂次直接相加即表示指数相乘。&lt;/p&gt;
&lt;p&gt;最后按位数从大到小将次幂形式转化为字符串、再按位数从小到大输出。&lt;/p&gt;
&lt;p&gt;注意到开头的字符串不是 &lt;code&gt;one&lt;/code&gt; 就是 &lt;code&gt;ten&lt;/code&gt;，需要在没有抽出来 &lt;code&gt;ten&lt;/code&gt; 的时候补 &lt;code&gt;one&lt;/code&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
using str = std::string;
const str u[] = &amp;#123; &amp;quot;one&amp;quot;, &amp;quot;ten&amp;quot;, &amp;quot;hundred&amp;quot;, &amp;quot;myriad&amp;quot;, &amp;quot;myllion&amp;quot;, &amp;quot;byllion&amp;quot;, &amp;quot;tryllion&amp;quot;,
                  &amp;quot;quadryllion&amp;quot;, &amp;quot;quintyllion&amp;quot;, &amp;quot;sextyllion&amp;quot;, &amp;quot;septyllion&amp;quot;, &amp;quot;octyllion&amp;quot;,
                  &amp;quot;nonyllion&amp;quot;, &amp;quot;decyllion&amp;quot; &amp;#125;;
str x;
int res = 0;
std::stack&amp;lt;str&amp;gt; s;
std::map&amp;lt;str, int&amp;gt; t;
void get(str &amp;amp;x) &amp;#123;
    str y;
    std::stringstream p(x);
    while (p &amp;gt;&amp;gt; y) &amp;#123;
        if (y == &amp;quot;one&amp;quot;) continue;
        res += 1 &amp;lt;&amp;lt; (t[y] - 1);
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    for (int i = 0; i &amp;lt;= 13; ++i) t[u[i]] = i;
    std::getline(std::cin, x), get(x);
    std::getline(std::cin, x), get(x);
    for (int i = 13; i; --i) &amp;#123;
        if (res &amp;amp; (1 &amp;lt;&amp;lt; (i - 1)))
            s.push(u[i]), res ^= (1 &amp;lt;&amp;lt; (i - 1));
    &amp;#125;
    if (s.top() != &amp;quot;ten&amp;quot;) s.push(&amp;quot;one&amp;quot;);
    while (!s.empty())
        std::cout &amp;lt;&amp;lt; s.top() &amp;lt;&amp;lt; &amp;#39; &amp;#39;, s.pop();
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-魔力塔&#34;&gt;C. 魔力塔&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;神奇的线段树优化建图。这拿来放 T3？不合适吧。&lt;/p&gt;
&lt;p&gt;很好想到对于 &lt;span class=&#34;math inline&#34;&gt;\(a_i\ne -1\)&lt;/span&gt;，连边 &lt;span class=&#34;math inline&#34;&gt;\(i\to a_i\)&lt;/span&gt;；否则，连边 &lt;span class=&#34;math inline&#34;&gt;\(i\to x(x\in [i+1,\min(i + k,n+1)])\)&lt;/span&gt;。BFS 遍历，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\times k)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;问题在于无用边太多，例如 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 共同可达的点有整整 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 个，造成大量浪费。&lt;/p&gt;
&lt;p&gt;考虑到实际进入 BFS 的点只有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个，及由传送门构成的连通块均呈棒棒糖状（即链套环），我们直接优化掉 &lt;span class=&#34;math inline&#34;&gt;\(a_i=-1\)&lt;/span&gt; 时的连边。使用线段树查询 &lt;span class=&#34;math inline&#34;&gt;\([i+1,\min(i + k,n+1)]\)&lt;/span&gt; 内的所有剩余点，连边入队并从线段树中删除。&lt;/p&gt;
&lt;p&gt;这样，每个点只会入队一次（忽视无用环），时间复杂度控制在 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 来源于线段树，写得不好就是 &lt;span class=&#34;math inline&#34;&gt;\(\log^2\)&lt;/span&gt;，写得好一点就只有一个。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;然而…&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;会 T，因为常数太大了。&lt;/p&gt;
&lt;p&gt;所以我们需要另一种 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 的做法，并且短小精悍。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;set&lt;/code&gt; 存储所有未入队的点，每次 &lt;code&gt;lower_bound&lt;/code&gt; 并依次弹出、入队。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;用迭代器的话代码很短，美汁汁。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;，但等我先磕片药先。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 5e5 + 5;
int a[maxn];
int n, k, res;
bool vis[maxn];
std::set&amp;lt;int&amp;gt; t;
std::vector&amp;lt;int&amp;gt; g[maxn]; 
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
void DFS(int x) &amp;#123;
    res = max(res, x);
    if (a[x] == -1) &amp;#123;
        auto p = t.lower_bound(x + 1);
        while (p != t.end() &amp;amp;&amp;amp; *p &amp;lt;= x + k) &amp;#123;
            g[x].push_back(*p);
            t.erase(*p++);
        &amp;#125;
    &amp;#125;
    for (auto i : g[x]) &amp;#123;
        if (vis[i]) continue;
        vis[i] = 1, DFS(i);
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(k);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]), t.insert(i + 1);
        if (~a[i]) g[i].push_back(a[i]);
    &amp;#125;
    DFS(1), print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-卡牌游戏&#34;&gt;D. 卡牌游戏&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;怎么说呢，爆搜可以拿 80pts！！！然而正解是区间 DP，哭唧唧。他这个数据范围给得很神奇，让人只会往搜索上面想。&lt;/p&gt;
&lt;p&gt;摧毁操作是一换一，不会更改串长，而入栈操作会增加初始串的长度。&lt;/p&gt;
&lt;p&gt;所以我们考虑 &lt;strong&gt;逆序 DP&lt;/strong&gt;，从最终状态入手，用 &lt;span class=&#34;math inline&#34;&gt;\(f_{x, i, j}\)&lt;/span&gt; 表示是否可以使用一个字符 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 经过一系列操作消掉 &lt;span class=&#34;math inline&#34;&gt;\(w_{i\sim j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么明显若一条摧毁操作为可用字符 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 摧毁 &lt;span class=&#34;math inline&#34;&gt;\(w_i\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{a, i, i} = 1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;若一条入栈操作为用字符 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 换字符 &lt;span class=&#34;math inline&#34;&gt;\(b,c\)&lt;/span&gt;，枚举区间断点 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{a, i, j} = f_{b, i, k} \times f_{c, k + 1, j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;最后答案为 &lt;span class=&#34;math inline&#34;&gt;\(f_{\texttt S,i,|w_i|}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;注意循环顺序，区间的枚举应在字符的枚举之外。最终时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(T\times |w_i|^3\times N_2)\)&lt;/span&gt;，注意到字母的枚举属于常数。胶囊好吃滴捏。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 25;
const int maxm = 1e3 + 5;
int n, m, l;
char w[maxn];
bool r1[maxm][maxm];
bool f[maxm][maxn][maxn];
struct &amp;#123; int u, a, b; &amp;#125; r2[maxn];
int main() &amp;#123;
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        scanf(&amp;quot;%s&amp;quot;, w + 1);
        r1[(int)w[1]][(int)w[4]] = 1;
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        scanf(&amp;quot;%s&amp;quot;, w + 1);
        r2[i].u = w[1];
        r2[i].a = w[4], r2[i].b = w[5];
    &amp;#125;
    while (~scanf(&amp;quot;%s&amp;quot;, w + 1)) &amp;#123;
        memset(f, 0, sizeof (f));
        l = strlen(w + 1);
        for (int i = &amp;#39;A&amp;#39;; i &amp;lt;= &amp;#39;Z&amp;#39;; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= l; ++j) &amp;#123;
                if (r1[i][(int)w[j]])
                    f[i][j][j] = 1;
            &amp;#125;
        &amp;#125;
        for (int len = 1; len &amp;lt;= l; ++len) &amp;#123;
            for (int i = 1; i &amp;lt;= l - len + 1; ++i) &amp;#123;
                int j = i + len - 1;
                for (int t = &amp;#39;A&amp;#39;; t &amp;lt;= &amp;#39;Z&amp;#39;; ++t) &amp;#123;
                    for (int k = i; k &amp;lt; j; ++k) &amp;#123;
                        for (int p = 1; p &amp;lt;= m; ++p) &amp;#123;
                            if (r2[p].u != t) continue;
                            f[t][i][j] |= f[r2[p].a][i][k] &amp;amp;&amp;amp; f[r2[p].b][k + 1][j];
                        &amp;#125;
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        puts(f[&amp;#39;S&amp;#39;][1][l] ? &amp;quot;YES&amp;quot; : &amp;quot;NO&amp;quot;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e.-生长树&#34;&gt;E. 生长树&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/5&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一道很菜的题。我们发现有子树操作，第一时间想到树剖，那么接下来要考虑的内容就是线段树如何维护。&lt;/p&gt;
&lt;p&gt;题意换句话说就是往下数 0 代是加，数 1 代是减，数 2 代是加，以此类推。那么不难想到奇偶性。&lt;/p&gt;
&lt;p&gt;如果起点的深度是奇数，那么子树中所有奇数深度权值增加，偶数深度权值减少，反之同理。&lt;/p&gt;
&lt;p&gt;但是我们操作线段树的时候怎么知道点在树中的深度奇偶性呢？我们只能在线段树外才知道呀。&lt;/p&gt;
&lt;p&gt;所以观察询问，询问是单点的，所以我们知道了，可以只在线段树外对奇偶性进行处理。简单来说，假设更改起点深度为奇数，那么增加整个子树的「奇加偶减计数器」；反之，增加整个子树的「奇减偶加计数器」。&lt;/p&gt;
&lt;p&gt;最后查询的时候，如果该点深度为奇，那么答案为对应的「奇加偶减计数器」减去「奇减偶加计数器」的值，反之同理。&lt;/p&gt;
&lt;p&gt;做到最后发现根本不用树剖，就是一个 DFN 上线段树。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(m\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;胶囊真好吃！！！&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
const int maxn = 2e5 + 5;
struct _ &amp;#123;
    int l, r;
    int u1, u2, d1, d2;
&amp;#125;; 
_ t[maxn &amp;lt;&amp;lt; 2];
int a[maxn], dep[maxn];
std::vector&amp;lt;int&amp;gt; g[maxn];
int n, m, x, y, tot, typ;
int end[maxn], dfn[maxn], tab[maxn];
// u 只用维护最底层信息
// 所以不用打 pushup 
// 但维护起来好看一些 所以还是打了
void pushup(int p) &amp;#123;
    t[p].u1 = t[lt].u1 + t[rt].u1;
    t[p].u2 = t[lt].u2 + t[rt].u2;
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d1) &amp;#123;
        t[lt].d1 += t[p].d1;
        t[rt].d1 += t[p].d1;
        t[lt].u1 += t[p].d1 * (t[lt].r - t[lt].l + 1);
        t[rt].u1 += t[p].d1 * (t[rt].r - t[rt].l + 1);
        t[p].d1 = 0;
    &amp;#125;
    if (t[p].d2) &amp;#123;
        t[lt].d2 += t[p].d2;
        t[rt].d2 += t[p].d2;
        t[lt].u2 += t[p].d2 * (t[lt].r - t[lt].l + 1);
        t[rt].u2 += t[p].d2 * (t[rt].r - t[rt].l + 1);
        t[p].d2 = 0;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        if (dep[tab[l]] &amp;amp; 1)
            t[p].u1 = a[tab[l]];
        else t[p].u2 = a[tab[l]];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void add1(int p, int l, int r, int x) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d1 += x;
        t[p].u1 += (t[p].r - t[p].l + 1) * x;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (l &amp;lt;= mid) add1(lt, l, r, x);
    if (r &amp;gt; mid) add1(rt, l, r, x);
    pushup(p);
    return;
&amp;#125;
void add2(int p, int l, int r, int x) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d2 += x;
        t[p].u2 += (t[p].r - t[p].l + 1) * x;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (l &amp;lt;= mid) add2(lt, l, r, x);
    if (r &amp;gt; mid) add2(rt, l, r, x);
    pushup(p);
    return;
&amp;#125;
int ask(int p, int x) &amp;#123;
    if (t[p].l == t[p].r)
        return t[p].u1 - t[p].u2;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (x &amp;lt;= mid) return ask(lt, x);
    return ask(rt, x);
&amp;#125;
void DFS(int x, int fa) &amp;#123;
    dfn[x] = ++tot, tab[tot] = x;
    for (auto i : g[x]) &amp;#123;
        if (i == fa) continue;
        dep[i] = dep[x] + 1;
        DFS(i, x);
    &amp;#125;
    end[x] = tot;
    return;
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        add(x, y), add(y, x);
    &amp;#125;
    dep[1] = 1, DFS(1, -1);
    bld(1, 1, n);
    while (m--) &amp;#123;
        read(typ), read(x);
        if (typ == 1) &amp;#123;
            read(y);
            if (dep[x] &amp;amp; 1)
                add1(1, dfn[x], end[x], y);
            else add2(1, dfn[x], end[x], y);
        &amp;#125;
        else &amp;#123;
            int res = ask(1, dfn[x]);
            if (dep[x] &amp;amp; 1)
                print(res, &amp;#39;\n&amp;#39;);
            else print(-res, &amp;#39;\n&amp;#39;);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-单词&#34;&gt;F. 单词&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n \le 20\)&lt;/span&gt;，考虑状压。用 &lt;span class=&#34;math inline&#34;&gt;\(f_x\)&lt;/span&gt; 表示状态为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 时的最小代价，其中 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 是字符串合法情况的状态压缩。&lt;/p&gt;
&lt;p&gt;对于每一个待满足的串，枚举去满足它的哪一位，那么满足方式分两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把它变成一个新的值&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把和它重合的变成新的值&lt;/p&gt;
&lt;p&gt;我们注意到 &lt;span class=&#34;math inline&#34;&gt;\(n \le 20 \le 26\)&lt;/span&gt;，所以一定能找到一种方法让每个串的这一位都不一样。&lt;/p&gt;
&lt;p&gt;接着，反正我们都要改这一位了，那就贪心地把要改的全部改成完全不一样的。那么这些要改的串也在这一位上满足了条件。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，假设对于状态 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，有串 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 未满足，枚举位置 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，有：&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;f[i | (1 &amp;lt;&amp;lt; (j - 1))] = min(f[i | (1 &amp;lt;&amp;lt; (j - 1))], f[i] + a[j][k]); 
f[i | lac[j][k]] = min(f[i | lac[j][k]], f[i] + mx[j][k]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 &lt;code&gt;lac[j][k]&lt;/code&gt; 和 &lt;code&gt;mx[j][k]&lt;/code&gt; 都是预处理出来的值。&lt;code&gt;lac[j][k]&lt;/code&gt; 表示与第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个串的第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位相同串的状态压缩；&lt;code&gt;mx[j][k]&lt;/code&gt; 表示通过第二种方式将 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 串的第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位变得合法的最小费用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lac[j][k]&lt;/code&gt; 的求法没有任何疑问，主要是在 &lt;code&gt;mx[j][k]&lt;/code&gt; 上。注意到假设这一位上有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个串与 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 串的第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位相同（包括其本身），而我们只需要将这当中的 &lt;span class=&#34;math inline&#34;&gt;\(x-1\)&lt;/span&gt; 个变成两两不同的全新字符就可以同时满足这 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 串的条件，那我们为什么不把不动的这一个串设置为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个串中改这一位代价最大的那个呢？&lt;/p&gt;
&lt;p&gt;那么问题来了。我们枚举状态、枚举状态中的每一个 &lt;code&gt;0&lt;/code&gt;，枚举每一个串的每一位，实际上是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\times m\times 2^n)\)&lt;/span&gt; 的。虽然跑不满，但这个时间复杂度仍然是有问题的。我们需要优化。&lt;/p&gt;
&lt;p&gt;我们枚举的是状态中的每一个 &lt;code&gt;0&lt;/code&gt;，假设我们的状态是 &lt;code&gt;000&lt;/code&gt;，我们的解决方案是将三个 &lt;code&gt;0&lt;/code&gt; 位置的方案共同处理，表示为 &lt;code&gt;&#39;0--&#39;&lt;/code&gt; + &lt;code&gt;&#39;-0-&#39;&lt;/code&gt; + &lt;code&gt;&#39;--0&#39;&lt;/code&gt;。但实际上，我们只用实际求解一个 &lt;code&gt;0&lt;/code&gt; 位置的答案，表示为 &lt;code&gt;&#39;0--&#39;&lt;/code&gt; + &lt;code&gt;&#39;-00&#39;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;也就是说，我们原本需要枚举每一个状态为 &lt;code&gt;0&lt;/code&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 并用 &lt;span class=&#34;math inline&#34;&gt;\(O(m)\)&lt;/span&gt; 的时间进行计算，现在我们碰到一个状态为 &lt;code&gt;0&lt;/code&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 就开始计算，得到完全相同的答案。&lt;/p&gt;
&lt;p&gt;很 NB 并且很实用的优化，已加入 &lt;a href=&#34;/20231117/&#34;&gt;下饭操作合集&lt;/a&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 205;
const int maxm = (1 &amp;lt;&amp;lt; 25) + 5;
int f[maxm];
int n, m, siz;
char s[maxn][maxn];
int lac[maxn][maxn];
int a[maxn][maxn], mx[maxn][maxn];
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int main() &amp;#123;
    while(~scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m)) &amp;#123;
        memset(f, 0x3f, sizeof (f));
        f[0] = 0, siz = 1 &amp;lt;&amp;lt; n;
        for (int i = 1; i &amp;lt;= n; ++i)
            scanf(&amp;quot;%s&amp;quot;, s[i] + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j)
                scanf(&amp;quot;%d&amp;quot;, &amp;amp;a[i][j]);
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                int sum = 0;
                lac[i][j] = mx[i][j] = 0;
                for (int k = 1; k &amp;lt;= n; ++k) &amp;#123;
                    if (s[k][j] == s[i][j]) &amp;#123;
                        lac[i][j] |= 1 &amp;lt;&amp;lt; (k - 1);
                        sum += a[k][j];
                        mx[i][j] = max(mx[i][j], a[k][j]);
                    &amp;#125;
                &amp;#125;
                mx[i][j] = sum - mx[i][j];
            &amp;#125;
        &amp;#125;
        for (int i = 0, j; i &amp;lt; siz - 1; ++i) &amp;#123;
            for (j = 1; j &amp;lt;= n; ++j) &amp;#123;
                if (!(i &amp;amp; (1 &amp;lt;&amp;lt; (j - 1))))
                    break;
            &amp;#125;
            for (int k = 1; k &amp;lt;= m; ++k) &amp;#123;
                f[i | (1 &amp;lt;&amp;lt; (j - 1))] =
                    min(f[i | (1 &amp;lt;&amp;lt; (j - 1))], f[i] + a[j][k]); 
                f[i | lac[j][k]] =
                    min(f[i | lac[j][k]], f[i] + mx[j][k]);
            &amp;#125;
        &amp;#125;
        print(f[siz - 1], &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;这次暴露出的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深度乱求，打代码的时候考虑过要放在递归之前，但是由于精力不集中最后还是放在了递归后面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;没了。这次主要问题出在 T5。T3 估计真的想不到，先不强求自己。&lt;/p&gt;
&lt;p&gt;这次学到的新知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于子集合并最优性的问题，可以用单点 + 集合代替集合 + 集合枚举。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="DP" />
        <category term="线段树" />
        <updated>2023-10-03T08:42:43.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230716-1/</id>
        <title>解题报告 匹配数</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230716-1/"/>
        <content type="html">&lt;p&gt;老题解批量补档。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3887/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3887/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;求出最小的、不含前导零的 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 位数 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 条限制，第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 条限制规定 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 位和 &lt;span class=&#34;math inline&#34;&gt;\(i + 1\)&lt;/span&gt; 位的关系（小于、大于、等于、不等于）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果正着 DP，也就是说先确定前面的数位再向后 DP，后面的数位就没办法决定选择哪个已有状态进行转移，因为我们没有办法仅凭上一位就得到哪个状态拥有最小的字典序。&lt;/p&gt;
&lt;p&gt;但是题解很风轻云淡地给出了一个我一辈子想不出来的 fix：倒着 DP。我们只要保证每次选取最小的可行的下一位即可，这恰好符合字典序的定义。&lt;/p&gt;
&lt;p&gt;记录前驱（or 后继？）后输出即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxm = 15;
const int maxn = 2e3 + 5;
int n;
char s[maxn];
int f[maxn][maxm];
void output(int i, int j) &amp;#123;
    print(j);
    if (i != n)
        output(i + 1, f[i][j]);
    return;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%s&amp;quot;, s + 1);
    n = strlen(s + 1) + 1;
    memset(f, -1, sizeof (f));
    for (int i = 0; i &amp;lt;= 9; ++i)
        f[n][i] = 0x3f3f3f3f;
    for (int i = n - 1; i; --i) &amp;#123;
        for (int j = 0; j &amp;lt;= 9; ++j) &amp;#123;
            if (s[i] == &amp;#39;&amp;gt;&amp;#39;) &amp;#123;
                for (int k = j - 1; k &amp;gt;= 0; --k) &amp;#123;
                    if (~f[i + 1][k])
                        f[i][j] = k;
                &amp;#125;
            &amp;#125;
            else if (s[i] == &amp;#39;&amp;lt;&amp;#39;) &amp;#123;
                for (int k = 9; k &amp;gt; j; --k) &amp;#123;
                    if (~f[i + 1][k])
                        f[i][j] = k;
                &amp;#125;
            &amp;#125;
            else if (s[i] == &amp;#39;=&amp;#39;) &amp;#123;
                if (~f[i + 1][j])
                    f[i][j] = j;
            &amp;#125;
            else &amp;#123;
                for (int k = 9; ~k; --k) &amp;#123;
                    if (k == j)
                        continue;
                    if (~f[i + 1][k])
                        f[i][j] = k;
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= 9; ++i)
        if (~f[1][i]) &amp;#123;
            output(1, i);
            break;
        &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <updated>2023-07-16T14:18:06.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230203/</id>
        <title>美丽的柠檬花！</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230203/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;https://codeforces.com/problemset/problem/1733/D2&#34;&gt;CF1733D2 Zero-One (Hard Version)&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;没做过简单版本，模拟赛上遇到，乍一看是个贪心，但贪心思维太弱想不到怎么贪。所以思考其他方法。&lt;/p&gt;
&lt;p&gt;下文称同时取反 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 的一次操作为「取反 &lt;span class=&#34;math inline&#34;&gt;\((a_i, a_j)\)&lt;/span&gt;」，称 &lt;span class=&#34;math inline&#34;&gt;\(a_i=b_i\)&lt;/span&gt; 的状态为「匹配」。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;思维关键点&#34;&gt;思维关键点&lt;/h3&gt;
&lt;p&gt;若我们想要将 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_j)\)&lt;/span&gt; 取反，我们可以怎么做？&lt;/p&gt;
&lt;p&gt;不难发现，分 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 相邻和不相邻两种情况：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 相邻：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;直接取反，代价为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;寻找到一个与 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 都不相邻的 &lt;span class=&#34;math inline&#34;&gt;\(a_k\)&lt;/span&gt;，先将 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_k)\)&lt;/span&gt; 取反，再将 &lt;span class=&#34;math inline&#34;&gt;\((a_j,a_k)\)&lt;/span&gt; 取反，代价为 &lt;span class=&#34;math inline&#34;&gt;\(2\times y\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 不相邻：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;直接取反，代价为 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;将 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_{i + 1}),(a_{i + 1}, a_{i + 2}),\cdots,(a_{j - 1}, a_{j})\)&lt;/span&gt; 取反，代价为 &lt;span class=&#34;math inline&#34;&gt;\((j - i)\times x\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来考虑另一个问题：我们要取反哪些 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_j)\)&lt;/span&gt; 呢？&lt;/p&gt;
&lt;p&gt;假设现在有 &lt;span class=&#34;math inline&#34;&gt;\(a_p\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(b_p\)&lt;/span&gt; 不匹配，&lt;span class=&#34;math inline&#34;&gt;\(a_q\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(b_q\)&lt;/span&gt; 不匹配，那么我们肯定选择将 &lt;span class=&#34;math inline&#34;&gt;\((a_p,a_q)\)&lt;/span&gt; 取反。&lt;/p&gt;
&lt;p&gt;原因很简单，假设有 &lt;span class=&#34;math inline&#34;&gt;\(a_k=b_k\)&lt;/span&gt;，如果我们将 &lt;span class=&#34;math inline&#34;&gt;\((a_p,a_k)\)&lt;/span&gt; 取反，那么 &lt;span class=&#34;math inline&#34;&gt;\(a_k\ne b_k\)&lt;/span&gt;，我们需要额外的一次与 &lt;span class=&#34;math inline&#34;&gt;\(a_k\)&lt;/span&gt; 有关的操作将其复原。如果我们挑选一个 &lt;span class=&#34;math inline&#34;&gt;\(a_l=b_l\)&lt;/span&gt;，并将 &lt;span class=&#34;math inline&#34;&gt;\((a_k,a_l)\)&lt;/span&gt; 取反，那么 &lt;span class=&#34;math inline&#34;&gt;\(a_l\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(b_l\)&lt;/span&gt; 又会不匹配，又需要一次操作；如果挑选一个 &lt;span class=&#34;math inline&#34;&gt;\(a_l\ne b_l\)&lt;/span&gt;，并将 &lt;span class=&#34;math inline&#34;&gt;\((a_k,a_l)\)&lt;/span&gt; 取反，那么为什么不能在一开始就将 &lt;span class=&#34;math inline&#34;&gt;\((a_p,a_l)\)&lt;/span&gt; 取反呢？此时的 &lt;span class=&#34;math inline&#34;&gt;\(a_k\)&lt;/span&gt; 相当于一个中继，而这种情况我们已经在取反 &lt;span class=&#34;math inline&#34;&gt;\((a_p,a_l)\)&lt;/span&gt; 时考虑到了。&lt;/p&gt;
&lt;p&gt;也就是说，我们每次取反 &lt;strong&gt;只&lt;/strong&gt; 选择两个无法与 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 匹配的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么，有没有一种情况，让我们无法选择两个无法匹配的值呢？&lt;/p&gt;
&lt;p&gt;那就是不匹配的值的数量有奇数个，才会让我们两个两个选的时候有元素落单。&lt;/p&gt;
&lt;p&gt;不妨思考一次取反操作所有可能的情况（假设不受上面的结论限制）：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;取反一个匹配值和一个不匹配值&lt;/p&gt;
此时匹配值变为非匹配，不匹配值变为匹配，不匹配的元素总数不变。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取反两个不匹配值&lt;/p&gt;
两个不匹配值都变为匹配，不匹配元素的总数量增加 &lt;span class=&#34;math inline&#34;&gt;\(-2\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取反两个匹配值&lt;/p&gt;
&lt;p&gt;两个匹配值都变为非匹配，不匹配元素的总数量增加 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上，一次操作对不匹配元素总数带来的更改只可能为 &lt;span class=&#34;math inline&#34;&gt;\(0,2,-2\)&lt;/span&gt;，均为偶数。当不匹配元素为奇数时，必定无法将其更改至刚好为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。此时输出 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们上面结论的可实现性也得到了保障：只取反两个不匹配的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，不会有元素落单。&lt;/p&gt;
&lt;p&gt;下文记从前往后第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个与 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 不匹配的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的下标为 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;确定实现方法&#34;&gt;确定实现方法&lt;/h3&gt;
&lt;p&gt;发现 &lt;span class=&#34;math inline&#34;&gt;\(\sum n\le 5\times 10^3\)&lt;/span&gt;，确定算法复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;首先不难想到暴力搜索，每次枚举将哪一对 &lt;span class=&#34;math inline&#34;&gt;\((d_i, d_j)\)&lt;/span&gt; 取反。&lt;/p&gt;
&lt;p&gt;亦或是使用 &lt;code&gt;bitset&lt;/code&gt; 记录哪些非匹配值已被取反（被取反为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，否则为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;），枚举数对暴力 DP 更新最小值。&lt;/p&gt;
&lt;p&gt;但以上两种方法铁定超时。&lt;/p&gt;
&lt;p&gt;受到上面两种方法的启发，扩展思维，我们发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;取反操作的顺序不会影响最终答案。&lt;/p&gt;
因为每个数被取反的次数一定，最终结果也就一定。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们可以通过 DP 的方式寻找最小值。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设计状态。&lt;/p&gt;
&lt;p&gt;不妨考虑让问题麻烦起来的是什么，对于 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(d_j\)&lt;/span&gt; 不相邻时的取反，我们无法得知 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; 需要哪一个 &lt;span class=&#34;math inline&#34;&gt;\(d_j\)&lt;/span&gt;（而对于 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(d_j\)&lt;/span&gt; 相邻的情况，&lt;span class=&#34;math inline&#34;&gt;\(d_j\)&lt;/span&gt; 就是 &lt;span class=&#34;math inline&#34;&gt;\(d_{i + 1}\)&lt;/span&gt;，位置是确定的）。&lt;/p&gt;
&lt;p&gt;但我们同时也发现，与相邻时的代价不同，不相邻时的操作代价与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的具体值无关。&lt;/p&gt;
&lt;p&gt;所以不妨用 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示，已枚举到 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt;，前面有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个数需要后面 &lt;strong&gt;与它们不相邻的数&lt;/strong&gt; 用以和它们配对取反。&lt;/p&gt;
&lt;p&gt;假设已枚举到 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt;，当前面有 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 个数需要配对时，有以下的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(s = 1\)&lt;/span&gt;，即只有一个数需要配对时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果这个数是 &lt;span class=&#34;math inline&#34;&gt;\(d_{i - 1}\)&lt;/span&gt;，那么代价为 &lt;span class=&#34;math inline&#34;&gt;\(2\times y\)&lt;/span&gt;。&lt;/p&gt;
注意，这里只枚举了需要不相邻的数来配对的情况，相邻的情况将会另外计算，所以代价不能为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;否则，代价为 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;gt;1\)&lt;/span&gt; 时，即有多个数需要配对时：&lt;/p&gt;
&lt;p&gt;不管 &lt;span class=&#34;math inline&#34;&gt;\(d_{i-1}\)&lt;/span&gt; 是否需要配对，我们都不选它。因为选它的代价是 &lt;span class=&#34;math inline&#34;&gt;\(2\times y\)&lt;/span&gt;，而随便选另一个待配对数的代价都只有 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么问题来了，我咋知道它们相不相邻？&lt;/p&gt;
&lt;p&gt;再多开一维 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt; 状态，记录最后一个需要与其他后面的元素配对值是否是 &lt;span class=&#34;math inline&#34;&gt;\(a_{i-1}\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;假设现在已经枚举到 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,0/1}\)&lt;/span&gt;，即已枚举完 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个元素需要配对。&lt;/p&gt;
&lt;p&gt;则更新 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 的状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;若我们想要让 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 与后面的元素配对，则代价至少为 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。至于是否会因为待配对元素相邻而额外增加 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 的代价，我们在待配对元素处计算。&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[
 f_{i+1,j+1,1}\gets\min(f_{i,j,0},f_{i,j,1}) + y
 \]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若我们想要让 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 与其相邻的 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+2}\)&lt;/span&gt; 匹配，那么 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+2}\)&lt;/span&gt; 就不需要再与后面的元素配对了，故最后一维为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[
 f_{i+2,j,0}\gets\min(f_{i,j,0},f_{i,j,1})+(d_{i+2}-d_{i+1})\times x
 \]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果我们想让 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 与前面的待配对元素配对：&lt;/p&gt;
&lt;p&gt;在此种大前提下，&lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 一定不需要与后面的元素配对，故最后一维为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j=1\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(d_i+1=d_{i+1}\)&lt;/span&gt; 时，即存在其相邻元素，且只有一个配对可选项时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果这个数是 &lt;span class=&#34;math inline&#34;&gt;\(d_{i}\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 必须与相邻元素配对。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
 f_{i+1,j-1,0}\gets f_{i,j,1}+y
 \]&lt;/span&gt;&lt;/p&gt;
因为在计算 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,1}\)&lt;/span&gt; 时已计算了一个 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;，所以此处只用加一个 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;否则，该元素完成配对，不产生任何代价。&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[
 f_{i+1,j-1,0}\gets f_{i,j,0}
 \]&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;否则，随意选择前面的一个数。&lt;/p&gt;
&lt;p&gt;因为此时，要么前面有除了相邻元素的其他数可选，要么根本没有相邻元素，所以该数完成配对不会产生任何代价（因为 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 已经加过了）。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
 f_{i+1,j-1,0}\gets \min(f_{i,j,0},f_{i,j,1})
 \]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，全部情况讨论完毕。因为不能让最后一个元素再去与后面的元素配对，最终答案为 &lt;span class=&#34;math inline&#34;&gt;\(f_{tot,0,0}\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(tot\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 数组长度。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;，空间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;因为 &lt;span class=&#34;math inline&#34;&gt;\(x,y\le 10^9\)&lt;/span&gt;，最坏情况下需要加 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 次，故需要为 DP 数组开 &lt;code&gt;long long&lt;/code&gt;。尽管热心人士 @&lt;a href=&#34;/user/428358&#34;&gt;cqbztzl&lt;/a&gt; 帮助我计算得出使用空间约为 300 兆，但仍然会 MLE。&lt;/p&gt;
&lt;p&gt;不难发现，第一维枚举到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时，只需要更新第一维为 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(i+2\)&lt;/span&gt; 状态的值，而不需要其他任何 DP 值，故将第一维模 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt;，滚动为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim 2\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;// 代码里可能有一些赛时的神秘注释 hhh
namespace XSC062 &amp;#123;
using namespace fastIO;
const ll inf = 1e18;
const int maxn = 5e3 + 5;
ll x, y;
int T, n, tot;
ll f[3][maxn][2];
int diff[maxn], a[maxn], b[maxn];
ll min(ll x, ll y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
void upd(int i, int j, int k, ll y) &amp;#123;
    f[i % 3][j][k] = min(f[i % 3][j][k], y);
    return;
&amp;#125;
int main() &amp;#123;
    read(T);
    while (T--) &amp;#123;
        read(n), read(x), read(y);
        tot = 0;
        for (int i = 1; i &amp;lt;= n; ++i)
            getnum(a[i]);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            getnum(b[i]);
            if (a[i] != b[i])
                diff[++tot] = i;
        &amp;#125;
        if (tot &amp;amp; 1) &amp;#123;
            puts(&amp;quot;-1&amp;quot;);
            continue;
        &amp;#125;
        memset(f, 0x3f, sizeof (f));
        f[0][0][0] = 0;
        for (int i = 0; i &amp;lt;= tot; ++i) &amp;#123;
            for (int j = 0; j &amp;lt;= i; ++j) &amp;#123;
                // 新增起点
                if (i + 1 &amp;lt;= tot) &amp;#123;
                    upd(i + 1, j + 1, 1,
                        min(f[i % 3][j][0],
                            f[i % 3][j][1]) + y);
                &amp;#125;
                // 碾过去 
                if (i + 2 &amp;lt;= tot) &amp;#123;
                    upd(i + 2, j, 0,
                        min(f[i % 3][j][0],
                            f[i % 3][j][1]) +
                            (diff[i + 2] -
                            diff[i + 1]) * x);
                &amp;#125;
                // 使用起点
                if (j &amp;gt; 0 &amp;amp;&amp;amp; i + 1 &amp;lt;= tot) &amp;#123;
                    if (j == 1 &amp;amp;&amp;amp; diff[i] + 1 ==
                                        diff[i + 1]) &amp;#123;
                        upd(i + 1, j - 1, 0,
                                f[i % 3][j][1] + y);
                        upd(i + 1, j - 1, 0,
                                f[i % 3][j][0]);
                    &amp;#125;
                    else &amp;#123;
                        upd(i + 1, j - 1, 0,
                            min(f[i % 3][j][0],
                                f[i % 3][j][1]));
                    &amp;#125;
                &amp;#125;
                if (i != tot) &amp;#123;
                    f[i % 3][j][0] =
                        f[i % 3][j][1] = inf;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        print(f[tot % 3][0][0], &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="DP" />
        <updated>2023-02-03T08:00:59.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230111/</id>
        <title>瑰丽华尔兹</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230111/"/>
        <content type="html">&lt;p&gt;Solution to&lt;a href=&#34;http://222.180.160.110:61235/problem/8965&#34;&gt;「NOI2005」瑰丽华尔兹&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;单调队列优化 DP。&lt;/p&gt;
&lt;p&gt;不难发现，题意可转化为：&lt;/p&gt;
&lt;p&gt;从 &lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt; 出发，按顺序向 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; 方向移动 &lt;span class=&#34;math inline&#34;&gt;\([0,t_i−s_i+1]\)&lt;/span&gt; 距离，问最大移动距离。&lt;/p&gt;
&lt;p&gt;为了方便描述，我们把一次「向 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; 方向移动 &lt;span class=&#34;math inline&#34;&gt;\([0,t_i−s_i+1]\)&lt;/span&gt; 距离」的操作称为「一步」。&lt;/p&gt;
&lt;p&gt;设计状态。不难发现位置信息必须出现在 DP 的维度中（因为当前位置会影响下一步滑动的距离），而其他信息均不会对下一步滑动产生影响。&lt;/p&gt;
&lt;p&gt;故可令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示完成当前次滑动后，从起点滑动到 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 可得到的最大滑动距离。&lt;/p&gt;
&lt;p&gt;以方向上为例，可列 DP 式：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,j}=\max_{i&amp;lt;k≤i+(ti−si+1)}\{f_{k,j}+k−i\}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此时可枚举每一列的所有状态，使用单调队列优化。&lt;/p&gt;
&lt;p&gt;但实际操作中会出现问题。因为单调队列从下向上更新状态时，&lt;span class=&#34;math inline&#34;&gt;\(f_{k,j}\)&lt;/span&gt; 会比 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 先更新（参考 01 背包倒序枚举容量），导致每一「步」会重复被走很多次。但单调队列的特性限制了我们只能从下向上枚举，此时可新开一个数组记录 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 当次被更新之前的值。&lt;/p&gt;
&lt;p&gt;障碍物如何处理呢？我们知道，如果 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 下面某一位置有障碍物，那么障碍物下面所有的 &lt;span class=&#34;math inline&#34;&gt;\((k,j)\)&lt;/span&gt; 都不能用于更新 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt;（因为被挡住了滑不上来）。所以我们在从下往上枚举时，遇到障碍物就清空单调队列即可。&lt;/p&gt;
&lt;p&gt;下、左、右方向的处理方式类似。&lt;/p&gt;
&lt;p&gt;只需顺序执行操作，根据当前操作方向对应处理即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 205;
const int inf = 1e18;
int q[maxn];
char a[maxn][maxn];
int f[maxn][maxn], d[maxn][maxn];
int n, m, x, y, k, u, h, t, res;
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
int main() &amp;#123;
    memset(f, -0x3f, sizeof (f));
    read(n), read(m);
    read(x), read(y), read(k);
    f[x][y] = 0;
    for (int i = 1; i &amp;lt;= n; ++i)
        scanf(&amp;quot;%s&amp;quot;, a[i] + 1);
    while (k--) &amp;#123;
        read(x), read(y), read(u);
        y = y - x + 1;
        if (u == 1) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                h = 1, t = 0;
                for (int i = n; i; --i) &amp;#123;
                    if (a[i][j] == &amp;#39;x&amp;#39;) &amp;#123;
                        h = 1, t = 0;
                        continue;
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; q[h] - i &amp;gt; y)
                        ++h;
                    d[i][j] = f[i][j];
                    if (h &amp;lt;= t) &amp;#123;
                        f[i][j] = max(f[i][j],
                                    d[q[h]][j] + q[h] - i);
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; d[i][j] + i
                                    &amp;gt;= d[q[t]][j] + q[t])
                        --t;
                    q[++t] = i;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        else if (u == 2) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                h = 1, t = 0;
                for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                    if (a[i][j] == &amp;#39;x&amp;#39;) &amp;#123;
                        h = 1, t = 0;
                        continue;
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; i - q[h] &amp;gt; y)
                        ++h;
                    d[i][j] = f[i][j];
                    if (h &amp;lt;= t) &amp;#123;
                        f[i][j] = max(f[i][j],
                                    d[q[h]][j] + i - q[h]);
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; d[i][j] - i
                                &amp;gt;= d[q[t]][j] - q[t])
                        --t;
                    q[++t] = i;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        else if (u == 3) &amp;#123;
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                h = 1, t = 0;
                for (int j = m; j; --j) &amp;#123;
                    if (a[i][j] == &amp;#39;x&amp;#39;) &amp;#123;
                        h = 1, t = 0;
                        continue;
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; q[h] - j &amp;gt; y)
                        ++h;
                    d[i][j] = f[i][j];
                    if (h &amp;lt;= t) &amp;#123;
                        f[i][j] = max(f[i][j],
                                    d[i][q[h]] + q[h] - j);
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; d[i][j] + j
                                &amp;gt;= d[i][q[t]] + q[t])
                        --t;
                    q[++t] = j;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                h = 1, t = 0;
                for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                    if (a[i][j] == &amp;#39;x&amp;#39;) &amp;#123;
                        h = 1, t = 0;
                        continue;
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; j - q[h] &amp;gt; y)
                        ++h;
                    d[i][j] = f[i][j];
                    if (h &amp;lt;= t) &amp;#123;
                        f[i][j] = max(f[i][j],
                                    d[i][q[h]] + j - q[h]);
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; d[i][j] - j
                                &amp;gt;= d[i][q[t]] - q[t])
                        --t;
                    q[++t] = j;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j)
                res = max(res, f[i][j]);
        &amp;#125;
    &amp;#125;
    print(res);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="单调队列" />
        <updated>2023-01-10T18:21:35.000Z</updated>
    </entry>
</feed>
