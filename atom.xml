<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xsc062.netlify.app</id>
    <title></title>
    <link href="https://xsc062.netlify.app" />
    <updated>2025-09-03T13:28:00.000Z</updated>
    <category term="并查集" />
    <category term="斜率优化" />
    <category term="悬线法" />
    <category term="哈希" />
    <category term="字典树" />
    <category term="DP" />
    <category term="单调队列" />
    <category term="分治" />
    <category term="二分图" />
    <category term="CRT / exCRT" />
    <category term="排列组合" />
    <category term="网络流" />
    <category term="费用流" />
    <category term="二分" />
    <category term="上下界网络流" />
    <category term="容斥原理" />
    <category term="线段树" />
    <category term="树状数组" />
    <category term="区间 DP" />
    <category term="构造" />
    <category term="Tarjan" />
    <category term="数据结构" />
    <category term="下饭" />
    <category term="LCA" />
    <category term="倍增" />
    <category term="鸽巢原理" />
    <category term="概率期望" />
    <category term="调和级数" />
    <category term="差分" />
    <category term="思维" />
    <category term="树形 DP" />
    <category term="最小生成树" />
    <category term="SAM" />
    <category term="状压" />
    <category term="分块" />
    <category term="可持久化" />
    <category term="笛卡尔树" />
    <category term="高维前缀和" />
    <category term="闲话" />
    <category term="欧拉回路" />
    <category term="树链剖分" />
    <category term="长链剖分" />
    <category term="KMP" />
    <category term="border" />
    <category term="字符串" />
    <category term="AC 自动机" />
    <category term="SA" />
    <category term="数学" />
    <category term="树上差分" />
    <category term="FWT" />
    <category term="堆" />
    <category term="树的重心" />
    <category term="二项式定理" />
    <category term="二项式反演" />
    <category term="贪心" />
    <category term="均摊" />
    <category term="计数" />
    <category term="优化建图" />
    <category term="反悔贪心" />
    <category term="调整法" />
    <category term="背包" />
    <category term="博弈论" />
    <category term="DP 优化" />
    <category term="虚树" />
    <category term="点分治" />
    <category term="WQS 二分" />
    <category term="闵可夫斯基和" />
    <category term="slope trick" />
    <category term="四边形不等式" />
    <category term="暴力" />
    <category term="状压 DP" />
    <category term="组合数学" />
    <category term="支配对" />
    <category term="DDP" />
    <category term="平衡树" />
    <category term="容斥" />
    <category term="猫树" />
    <category term="Kruskal 重构树" />
    <category term="李超线段树" />
    <entry>
        <id>https://xsc062.netlify.app/20250903/</id>
        <title>多校杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250903/"/>
        <content type="html">&lt;p&gt;还算能做&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-itinerary&#34;&gt;A. Itinerary&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P12195&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P12195&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;画个图可以发现当前仅当同时满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定的欧拉序子序列合法，即按照给定的顺序，任意一条边不被经过超过两次；为路径上的边按照经过时的方向打上标记。可以用暴力爬山之类的方法验证，这个过程是线性的。&lt;/li&gt;
&lt;li&gt;选定的起点可以到达 &lt;span class=&#34;math inline&#34;&gt;\(s_1\)&lt;/span&gt;，且经过的边要么没有标记，要么标记方向和经过的方向相反。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所以可以从 &lt;span class=&#34;math inline&#34;&gt;\(s_1\)&lt;/span&gt; 做一遍 DFS，要求不能经过拥有相同方向标记的边即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    struct edge &amp;#123; int v, id, ix; &amp;#125;;
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; tag(n);
    std::vector&amp;lt;std::vector&amp;lt;edge&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(&amp;#123; y, i, 0 &amp;#125;);
        g[y].push_back(&amp;#123; x, i, 1 &amp;#125;);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; dep(n + 1);
    std::vector&amp;lt;edge&amp;gt; fa(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int faa) &amp;#123;
        for (auto [i, id, ix] : g[x])
            if (i != faa) &amp;#123;
                dep[i] = dep[x] + 1;
                fa[i] = &amp;#123; x, id, !ix &amp;#125;;
                DFS(i, x);
            &amp;#125;
        return;
    &amp;#125;;
    dep[1] = 1, DFS(1, -1);
    std::vector&amp;lt;int&amp;gt; s(m + 1);
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cin &amp;gt;&amp;gt; s[i];
    for (int i = 2; i &amp;lt;= m; ++i) &amp;#123;
        int x = s[i - 1], y = s[i];
        if (dep[x] &amp;gt; dep[y])
            for (; dep[x] &amp;gt; dep[y]; x = fa[x].v) &amp;#123;
                if (tag[fa[x].id][fa[x].ix])
                    goto outo;
                tag[fa[x].id][fa[x].ix] = 1;
            &amp;#125;
        else
            for (; dep[y] &amp;gt; dep[x]; y = fa[y].v) &amp;#123;
                if (tag[fa[y].id][!fa[y].ix])
                    goto outo;
                tag[fa[y].id][!fa[y].ix] = 1;
            &amp;#125;
        for (; x != y; x = fa[x].v, y = fa[y].v) &amp;#123;
            if (tag[fa[x].id][fa[x].ix] || tag[fa[y].id][!fa[y].ix])
                goto outo;
            tag[fa[x].id][fa[x].ix] = 1;
            tag[fa[y].id][!fa[y].ix] = 1;
        &amp;#125;
        continue;
    outo:
        for (int j = 1; j &amp;lt;= n; ++j)
            std::cout &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; res(n + 1);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        res[x] = 1;
        for (auto [i, id, ix] : g[x])
            if (i != fa &amp;amp;&amp;amp; !tag[id][!ix])
                DFS(i, x);
        return;
    &amp;#125;;
    DFS(s[1], -1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-2d-conveyer-belt-s&#34;&gt;B. 2D Conveyer Belt S&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11454&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11454&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注意到每个点的出度最多为 1。容易发现一个点是不可用的，当且仅当：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在至少一个环内部；&lt;/li&gt;
&lt;li&gt;或者，会到达一个环上的点。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;难点在于如何快速找到每次操作后环内部的点。但发现由于每个点出度为 1，不会出现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image.png&#34; /&gt;&lt;/p&gt;
之类让人摸不着头脑的情况。可以考虑找到外层合法的点，倒放 + floodfill 来保证复杂度；不知道有没有更简单的做法。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体 floodfill 的方式是，&lt;strong&gt;对于一个合法的格子，如果其上方有一个方向为 &lt;code&gt;D&lt;/code&gt; 的格子，那么上方也是合法的&lt;/strong&gt;。这个转化是比较重要的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int dir[][3] = &amp;#123; &amp;#123; 0, -1, 1 &amp;#125;, &amp;#123; 0, 1, 2 &amp;#125;, &amp;#123; -1, 0, 3 &amp;#125;, &amp;#123; 1, 0, 4 &amp;#125; &amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q, n += 2;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; tag(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1)), a(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; g(q + 1);
    int tot = 0;
    for (int i = 1, x, y; i &amp;lt;= q; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; t, ++x, ++y;
        g[i] = &amp;#123; x, y &amp;#125;;
        if (t == &amp;#39;L&amp;#39;)
            a[x][y] = 2;
        else if (t == &amp;#39;R&amp;#39;)
            a[x][y] = 1;
        else if (t == &amp;#39;U&amp;#39;)
            a[x][y] = 4;
        else
            a[x][y] = 3;
    &amp;#125;
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int y) &amp;#123;
        tag[x][y] = 1, ++tot;
        for (auto [fx, fy, fi] : dir) &amp;#123;
            int nx = x + fx, ny = y + fy;
            if (nx &amp;gt;= 1 &amp;amp;&amp;amp; nx &amp;lt;= n &amp;amp;&amp;amp; ny &amp;gt;= 1 &amp;amp;&amp;amp; ny &amp;lt;= n &amp;amp;&amp;amp; !tag[nx][ny] &amp;amp;&amp;amp; (!a[nx][ny] || a[nx][ny] == fi))
                DFS(nx, ny);
        &amp;#125;
        return;
    &amp;#125;;
    DFS(1, 1);
    std::vector&amp;lt;int&amp;gt; res(q + 1);
    res[q] = n * n - tot;
    for (int i = q; i &amp;gt; 1; --i) &amp;#123;
        auto [x, y] = g[i];
        if (!tag[x][y] &amp;amp;&amp;amp; (tag[x][y - 1] || tag[x][y + 1] || tag[x - 1][y] || tag[x + 1][y]))
            DFS(x, y);
        a[x][y] = 0;
        res[i - 1] = n * n - tot;
    &amp;#125;
    for (int i = 1; i &amp;lt;= q; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c.-机器人&#34;&gt;C. 机器人&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P12018&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P12018&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考察题意，&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2025-09-03T13:28:00.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250830/</id>
        <title>学习笔记 支配对</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250830/"/>
        <content type="html">&lt;p&gt;一种贪心思想，很符合直觉，又有点像乱搞&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;考虑一类点对统计问题，形如给定 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，对于 &lt;span class=&#34;math inline&#34;&gt;\([l\le x\le y\le r]\)&lt;/span&gt;，你需要寻找满足某个限制的 &lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt; 数量，或者是所有 &lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt; 的最大权值&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果存在 &lt;span class=&#34;math inline&#34;&gt;\([x_1,y_1]\subset [x_2,y_2]\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\([x_1,y_1]\)&lt;/span&gt; 满足限制 / 贡献更大，就可以只保留 &lt;span class=&#34;math inline&#34;&gt;\([x_1,y_1]\)&lt;/span&gt;&lt;/p&gt;
因为统计了 &lt;span class=&#34;math inline&#34;&gt;\([x_2,y_2]\)&lt;/span&gt; 就必须要统计 &lt;span class=&#34;math inline&#34;&gt;\([x_1,y_1]\)&lt;/span&gt;，反之则不一定成立。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题目会给出一些性质使得最终保留下来的 &lt;span class=&#34;math inline&#34;&gt;\([x_1,y_1]\)&lt;/span&gt; 的数量不多&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;树上支配对-第一类支配对&#34;&gt;树上支配对 / 第一类支配对&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这类问题的特征很明显，多次询问，给定一个编号区间，统计树上点对相关信息。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;会想到点分治、dsu on tree 这两个工具，其中点分治处理距离问题更方便，dsu on tree 更常用来处理 LCA 问题&lt;/p&gt;
固定当前的根之后，钦定支配对来自两个不同子树（注意根自身参与形成支配对的情况），那么共有 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 对支配对&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先用这两种方法在树上找到支配对，就可以把询问离线下来做扫描线之类的了&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本质是利用 LCA 的树上性质，以及点分、dsu on tree 只用统计 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 个单侧点，同时对于每个单侧点只存在 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 个相应的前驱、后继点达到 LCA 找到 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 个支配对&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d---rldcot&#34;&gt;D - rldcot&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7880&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7880&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若存在 &lt;span class=&#34;math inline&#34;&gt;\((x_1,y_1)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((x_2,y_2)\)&lt;/span&gt; 拥有相同的 LCA，那么认为 &lt;span class=&#34;math inline&#34;&gt;\((x_1,y_1)\)&lt;/span&gt; 支配了 &lt;span class=&#34;math inline&#34;&gt;\((x_2,y_2)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;树有根，故需要 dsu on tree&lt;/li&gt;
&lt;li&gt;用一个 set 处理前驱、后继的查询，然后就是正常的 dsu on tree 了&lt;/li&gt;
&lt;li&gt;离线下来扫描线，树状数组实时维护每个颜色（离散化一下）最靠右的区间即可&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    using ll = long long;
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y, w; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; w;
        g[x].emplace_back(y, w);
        g[y].emplace_back(x, w);
    &amp;#125;
    int tot = 0;
    std::vector&amp;lt;ll&amp;gt; dep(n + 1);
    std::unordered_map&amp;lt;ll, int&amp;gt; tab;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), col(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        siz[x] = 1;
        if (!tab.count(dep[x]))
            tab[dep[x]] = ++tot;
        col[x] = tab[dep[x]];
        for (auto [i, w] : g[x])
            if (i != fa) &amp;#123;
                dep[i] = dep[x] + w;
                DFS(i, x);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; u(n + 1);
    std::function&amp;lt;void(int, int, int, std::set&amp;lt;int&amp;gt; &amp;amp;)&amp;gt; DFS2 = [&amp;amp;](int col, int x, int fa, std::set&amp;lt;int&amp;gt; &amp;amp;t) &amp;#123;
        auto p = t.lower_bound(x);
        if (col == -1)
            t.insert(x);
        else &amp;#123;
            if (p != t.begin())
                u[x].emplace_back(*std::prev(p), col );
            if (p != t.end())
                u[*p].emplace_back(x, col);
        &amp;#125;
        for (auto [i, w] : g[x])
            if (i != fa)
                DFS2(col, i, x, t);
        return;
    &amp;#125;;
    std::function&amp;lt;void(int, int, std::set&amp;lt;int&amp;gt; &amp;amp;)&amp;gt; DFS1 = [&amp;amp;](int x, int fa, std::set&amp;lt;int&amp;gt; &amp;amp;t) &amp;#123;
        if (son[x])
            DFS1(son[x], x, t);
        for (auto [i, w] : g[x])
            if (i != fa &amp;amp;&amp;amp; i != son[x]) &amp;#123;
                std::set&amp;lt;int&amp;gt; nt;
                DFS1(i, x, nt);
            &amp;#125;
        t.insert(x);
        u[x].emplace_back(x, col[x]);
        for (auto [i, w] : g[x])
            if (i != fa &amp;amp;&amp;amp; i != son[x])
                DFS2(col[x], i, x, t), DFS2(-1, i, x, t);
        return;
    &amp;#125;;
    &amp;#123;
        std::set&amp;lt;int&amp;gt; t;
        DFS1(1, -1, t);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; res(m + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; t(n + 1);
    for (int i = 1, l, r; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        t[r].emplace_back(l, i);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; bit(n + 1), la(tot + 1);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] += v;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    for (int r = 1; r &amp;lt;= n; ++r) &amp;#123;
        for (auto [l, c] : u[r])
            if (l &amp;gt; la[c]) &amp;#123;
                if (la[c])
                    add(la[c], -1);
                add(l, 1), la[c] = l;
            &amp;#125;
        for (auto [l, id] : t[r])
            res[id] = ask(r) - ask(l - 1);
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e---铃原露露&#34;&gt;E - 铃原露露&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P8528&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P8528&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;考虑一下支配关系在哪里，固定一个 LCA &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt;，讨论 &lt;span class=&#34;math inline&#34;&gt;\(a_z\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(a_x,a_y\)&lt;/span&gt; 的大小关系给 &lt;span class=&#34;math inline&#34;&gt;\([1,a_x]\)&lt;/span&gt; 间的 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 带来的限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_z\in[a_x,a_y]\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt; 总是合法，无限制。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_z&amp;lt;a_x\)&lt;/span&gt;，对于 &lt;span class=&#34;math inline&#34;&gt;\(r\ge a_y\)&lt;/span&gt;，当 &lt;span class=&#34;math inline&#34;&gt;\(l\in(a_z,a_x]\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt; 非法。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_z&amp;gt;a_y\)&lt;/span&gt;，当 &lt;span class=&#34;math inline&#34;&gt;\(r\in[a_y,a_z)\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt; 总是非法。此时所有 &lt;span class=&#34;math inline&#34;&gt;\(l\in[1,a_x]\)&lt;/span&gt; 不可选。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;发现固定 &lt;span class=&#34;math inline&#34;&gt;\(a_z,a_x\)&lt;/span&gt;，那么当 &lt;span class=&#34;math inline&#34;&gt;\(a_y\)&lt;/span&gt; 越靠近 &lt;span class=&#34;math inline&#34;&gt;\(a_x\)&lt;/span&gt; 时给出的限制越紧，反之亦然，就可以得到这样的支配关系&lt;/li&gt;
&lt;li&gt;容易发现当 &lt;span class=&#34;math inline&#34;&gt;\(a_z\notin [a_x,a_y]\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt; 不合法；故只需要在 dsu on tree 上找到 &lt;span class=&#34;math inline&#34;&gt;\(a_x\)&lt;/span&gt; 的前驱、后继并统计支配对即可&lt;/li&gt;
&lt;li&gt;&lt;p&gt;考虑询问，发现需要维护区间加、区间历史 0 个数，后者是经典 trick，是好做的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;历史标记的下传需要格外注意一下，应该只保证标记期间存在 0 的区间拥有懒标记；具体地，&lt;strong&gt;只应将其下传到和当前区间最小值相同的子区间&lt;/strong&gt;（具体可以看代码），容易证明是对的。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
struct node &amp;#123;
    long long s;
    int l, r, u, c, d, d1;
    node operator+ (const node q) const &amp;#123;
        node res;
        res.s = s + q.s;
        res.l = l, res.r = q.r;
        res.u = std::min(u, q.u);
        res.d = res.d1 = res.c = 0;
        if (u == res.u)
            res.c = c;
        if (q.u == res.u)
            res.c += q.c;
        return res;
    &amp;#125;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void bld(int p, int l, int r) &amp;#123;
    t[p].c = r - l + 1;
    t[p].l = l, t[p].r = r;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d += t[p].d, t[lt].u += t[p].d;
        t[rt].d += t[p].d, t[rt].u += t[p].d;
        t[p].d = 0;
    &amp;#125;
    if (t[p].d1) &amp;#123;
        if (t[lt].u == t[p].u) &amp;#123;
            t[lt].s += (long long)t[lt].c * t[p].d1;
            t[lt].d1 += t[p].d1;
        &amp;#125;
        if (t[rt].u == t[p].u) &amp;#123;
            t[rt].s += (long long)t[rt].c * t[p].d1;
            t[rt].d1 += t[p].d1;
        &amp;#125;
        t[p].d1 = 0;
    &amp;#125;
    return;
&amp;#125;
void add(int p, int l, int r, int v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d += v, t[p].u += v;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        add(lt, l, r, v);
    if (r &amp;gt; mid)
        add(rt, l, r, v);
    t[p] = t[lt] + t[rt];
    return;
&amp;#125;
void upd(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        if (!t[p].u)
            t[p].s += t[p].c, ++t[p].d1;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        upd(lt, l, r);
    if (r &amp;gt; mid)
        upd(rt, l, r);
    t[p] = t[lt] + t[rt];
    return;
&amp;#125;
long long ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].s;
    pushdown(p);
    auto res(0ll);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        res = ask(lt, l, r);
    if (r &amp;gt; mid)
        res += ask(rt, l, r);
    return res;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1); 
    for (int i = 2, x; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; x, g[x].push_back(i);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x]) &amp;#123;
            DFS(i);
            siz[x] += siz[i];
            if (siz[i] &amp;gt; siz[son[x]])
                son[x] = i;
        &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; u1(n + 1), u2(n + 1);
    std::function&amp;lt;void(int, int, std::set&amp;lt;int&amp;gt; &amp;amp;)&amp;gt; DFS2 = [&amp;amp;](int col, int x, std::set&amp;lt;int&amp;gt; &amp;amp;t) &amp;#123;
        auto p = t.lower_bound(a[x]);
        if (col == -1)
            t.insert(a[x]);
        else &amp;#123;
            if (p != t.begin()) &amp;#123;
                int y = *std::prev(p);
                if (col &amp;lt; y)
                    u1[a[x]].emplace_back(col + 1, y);
                else if (col &amp;gt; a[x]) &amp;#123;
                    u1[a[x]].emplace_back(1, y);
                    u2[col].emplace_back(1, y);
                &amp;#125;
            &amp;#125;
            if (p != t.end()) &amp;#123;
                int y = *p;
                if (col &amp;lt; a[x])
                    u1[y].emplace_back(col + 1, a[x]);
                else if (col &amp;gt; y) &amp;#123;
                    u1[y].emplace_back(1, a[x]);
                    u2[col].emplace_back(1, a[x]);
                &amp;#125;
            &amp;#125;
        &amp;#125;
        for (auto i : g[x])
            DFS2(col, i, t);
        return;
    &amp;#125;;
    std::function&amp;lt;void(int, std::set&amp;lt;int&amp;gt; &amp;amp;)&amp;gt; DFS1 = [&amp;amp;](int x, std::set&amp;lt;int&amp;gt; &amp;amp;t) &amp;#123;
        if (son[x])
            DFS1(son[x], t);
        for (auto i : g[x])
            if (i != son[x]) &amp;#123;
                std::set&amp;lt;int&amp;gt; nt;
                DFS1(i, nt);
            &amp;#125;
        t.insert(a[x]);
        for (auto i : g[x])
            if (i != son[x])
                DFS2(a[x], i, t), DFS2(-1, i, t);
        return;
    &amp;#125;;
    &amp;#123;
        std::set&amp;lt;int&amp;gt; t;
        DFS1(1, t);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; res(m + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; t(n + 1);
    for (int i = 1, l, r; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        t[r].emplace_back(l, i);
    &amp;#125;
    bld(1, 1, n);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (auto [l, r] : u1[i])
            add(1, l, r, 1);
        for (auto [l, r] : u2[i])
            add(1, l, r, -1);
        upd(1, 1, i);
        for (auto [l, id] : t[i])
            res[id] = ask(1, l, i);
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="支配对" />
        <updated>2025-08-30T03:47:08.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250826/</id>
        <title>学习笔记 Kruskal 重构树</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250826/"/>
        <content type="html">&lt;p&gt;有很多优秀性质的东西，应用场景比较明显&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;把 Kruskal 过程中，一次合并连通块的操作看作，建立一个边的虚点，把这个虚点和两侧连通块的根连起来，并成为新连通块的根&lt;/p&gt;
&lt;p&gt;这样就可以把图变成一个二叉树，并且点权从浅到深是单增的，也就是&lt;strong&gt;大根堆&lt;/strong&gt;，而且有且仅有实点是叶子&lt;/p&gt;
&lt;p&gt;原图中『两个点路径上最大边权』的最小值，就是重构树上路径边权的最大值，&lt;strong&gt;即两点 LCA 的点权&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;反过来，如果要找到 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的最大边权最小值 &lt;span class=&#34;math inline&#34;&gt;\(\le w\)&lt;/span&gt; 的所有 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;，会发现是某个子树的所有实点（叶子）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;实际应用起来不只跟边权有关系，很多时候需要想办法把点权转化成边权，再在重构树上研究原本的点权问题，标志是『找树 / 图上两点间的编号 / 点权最值』&lt;/p&gt;
</content>
        <category term="Kruskal 重构树" />
        <updated>2025-08-26T07:21:09.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250825/</id>
        <title>学习笔记 DP 套 DP</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250825/"/>
        <content type="html">
</content>
        <updated>2025-08-25T12:20:48.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250824/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250824/"/>
        <content type="html">&lt;p&gt;不会的东西越来越多了&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-k-set-tree&#34;&gt;B. K-Set Tree&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1691F&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1691F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(F_i\)&lt;/span&gt; 表示以 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为根时，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 子树内的答案。则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
F_u=\left(C_{siz_u}^k-\sum C_{siz_v}^k\right)\cdot siz_u+\sum F_v\\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;直接换根是很复杂的；把 &lt;span class=&#34;math inline&#34;&gt;\(\sum C_{siz_v}^k\)&lt;/span&gt; 记作 &lt;span class=&#34;math inline&#34;&gt;\(dp_u\)&lt;/span&gt;，把 &lt;span class=&#34;math inline&#34;&gt;\(\sum F_v\)&lt;/span&gt; 记作 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt;，那么：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
res=\sum(C_n^k-dp_u)\cdot n+f_u\\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样做是为了把两个和 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 有关的乘项拆开来换根&lt;/strong&gt;，实际换根的时候就只用分别换 &lt;span class=&#34;math inline&#34;&gt;\(f,dp\)&lt;/span&gt; 两个值，不用考虑二次项等问题，计算量会少很多&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        if (m &amp;gt; n)
            return 0ll;
        return fac[n] * inv[m] % mod * inv[n - m] % mod;
    &amp;#125;;
    auto res(0ll);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), ss(n + 1);
    std::vector&amp;lt;long long&amp;gt; f(n + 1), dp(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                (f[x] += (C(siz[i], k) - dp[i]) * siz[i] + f[i]) %= mod;
                (dp[x] += C(siz[i], k)) %= mod;
                siz[x] += siz[i];
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        (res += (C(n, k) - dp[x]) * n + f[x]) %= mod;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                (f[i] += (C(n - siz[i], k) - (dp[x] - C(siz[i], k))) * (n - siz[i]) + f[x] - f[i] - (C(siz[i], k) - dp[i]) * siz[i]) %= mod;
                (dp[i] += C(n - siz[i], k)) %= mod;
                DFS(i, x);
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; (res + mod) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c.-li-hua-and-path&#34;&gt;C. Li Hua and Path&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1797F&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1797F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑&lt;strong&gt;容斥&lt;/strong&gt;，分别求解满足 1、满足 2、满足 12（注意要减两倍）就能计算答案&lt;/p&gt;
&lt;p&gt;发现题目所求点对形式很符合 Kruskal 重构树的要求，考虑以对应点权为边权，分别建立 min，max Kruskal 点权多叉重构树。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;点权多叉重构树？&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;在点权上做 Kruskal 重构树时，发现边的虚点是不必要的，可以直接将更优点作为父亲。&lt;/p&gt;
&lt;p&gt;写的时候有点难想清楚…… 可以画画图，仔细确定一下 Kruskal 重构树的具体性质&lt;/p&gt;
&lt;p&gt;这样做的优势是没有虚点，一些问题会方便一些；但同时放弃了二叉树的结构，一些题可能没那么好做。&lt;/p&gt;
&lt;p&gt;这道题只用经典 Kruskal 重构树也可以解决。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;发现 1 2 均可以转化成两棵树在两棵树上的祖孙关系要求，可以轻松地分别统计满足 1、满足 2 的点对数量&lt;/p&gt;
&lt;p&gt;考虑怎么处理同时满足 12 的，发现要求在两棵树上二者应该都具有祖孙关系，且是相反的。&lt;del&gt;可以考虑在一棵树上 DFS 的同时用主席树存储祖先，在另一颗树上 ask&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;考虑从更容易用 dfn 表示的子树问题思考，在 min 树上分配 dfn 后，在 max 树上用 DFS + 回溯得到每个点实时祖先序列，存在树状数组里；ask 该点被分配的 dfn 子树区间就能得到答案。&lt;/p&gt;
&lt;p&gt;考虑询问，由于每次加入的都是编号最大的点，对于满足 1、满足 2 的贡献是显然的，而同时满足 12 的点就是在 min 树上的祖先，都是好做的。&lt;/p&gt;
&lt;p&gt;实现的时候一定要把 min / max 树对应的性质思考清楚，不然会很麻烦&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; f1(n + 1), f2(n + 1);
    std::iota(f1.begin() + 1, f1.end(), 1);
    std::iota(f2.begin() + 1, f2.end(), 1);
    std::function&amp;lt;int(int)&amp;gt; find1 = [&amp;amp;](int x) &amp;#123;
        return x == f1[x] ? x : f1[x] = find1(f1[x]);
    &amp;#125;;
    std::function&amp;lt;int(int)&amp;gt; find2 = [&amp;amp;](int x) &amp;#123;
        return x == f2[x] ? x : f2[x] = find2(f2[x]);
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1), g2(n + 1), adj1(n + 1), adj2(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        if (x &amp;gt; y)
            std::swap(x, y);
        adj1[y].push_back(x);
        adj2[x].push_back(y);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (auto j : adj1[i]) &amp;#123;
            int fi = find1(i), fj = find1(j);
            g1[fi].push_back(fj), f1[fj] = fi;
        &amp;#125;
    for (int i = n; i; --i)
        for (auto j : adj2[i]) &amp;#123;
            int fi = find2(i), fj = find2(j);
            g2[fi].push_back(fj), f2[fj] = fi;
        &amp;#125;
    std::vector&amp;lt;int&amp;gt; bit(n + 1), dfn(n + 1), rfn(n + 1);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] += v;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    int rt1 = 0, rt2 = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (f1[i] == i)
            rt1 = i;
        if (f2[i] == i)
            rt2 = i;
    &amp;#125;
    int q;
    std::cin &amp;gt;&amp;gt; q;
    std::vector&amp;lt;int&amp;gt; dep1(n + 1), dep2(n + q + 1);
    long long res = 0ll;
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now;
        res += dep1[x];
        for (auto i : g1[x]) &amp;#123;
            dep1[i] = dep1[x] + 1;
            DFS(i);
        &amp;#125;
        rfn[x] = now;
        return;
    &amp;#125;;
    DFS(rt1);
    DFS = [&amp;amp;](int x) &amp;#123;
        res += dep2[x];
        res -= 2 * (ask(rfn[x]) - ask(dfn[x] - 1));
        add(dfn[x], 1);
        for (auto i : g2[x]) &amp;#123;
            dep2[i] = dep2[x] + 1;
            DFS(i);
        &amp;#125;
        add(dfn[x], -1);
        return;
    &amp;#125;;
    DFS(rt2);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    for (int fa; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; fa;
        dep2[++n] = dep2[fa] + 1;
        res += (n - 1) - dep2[n];
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-团队选拔&#34;&gt;D. 团队选拔&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6534/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6534/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，从中任选一些互不相交的区间，满足每个区间内元素的 gcd 相同。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^5,V\le 10^7\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意到固定一个左端点后，移动右端点，gcd 每次至多减小到原来的一半；也就是说，其种类有 &lt;span class=&#34;math inline&#34;&gt;\(\log V\)&lt;/span&gt; 种。故全序列的 gcd 总数是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log V)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;很容易想到与此原理类似的全局答案求法：对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，向左处理出每一段 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(\gcd(a_{l\cdots i})=\gcd(a_r\cdots i)\)&lt;/span&gt;，并记录该 &lt;span class=&#34;math inline&#34;&gt;\(\gcd\)&lt;/span&gt;。这样求出来的 &lt;span class=&#34;math inline&#34;&gt;\((i,l,r)\)&lt;/span&gt; 共有 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log V)\)&lt;/span&gt; 段。&lt;/p&gt;
&lt;p&gt;对于每个 gcd 有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}=f_{i-1}+\sum\limits_{j=l_i}^{r_i} f_{j - 1}\)&lt;/span&gt;，可以做一个扫描线，得到全局答案；向前向后分别做到 &lt;span class=&#34;math inline&#34;&gt;\(i-1,i+1\)&lt;/span&gt;，相乘就能得到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 未被选取时的答案&lt;/p&gt;
&lt;p&gt;考虑怎么完成『相乘』这个动作：最后的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 在每个右端点处发生变化，可以转化成若干段 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;；反过来的 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;\)&lt;/span&gt; 亦可以这样转化。将 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 整体后移一位、&lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;\)&lt;/span&gt; 整体前移一位，就可以对齐。二者的端点总数是均摊单 log 的，区间总数也就是均摊单 log 的（归并就能快速寻找到区间），用差分做一个区间加即可。&lt;/p&gt;
&lt;p&gt;用二分勉强单 log 解决了转移；还看到 &lt;span class=&#34;citation&#34; data-cites=&#34;spdarkle&#34;&gt;@spdarkle&lt;/span&gt; 疑似在 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 上直接做的&lt;a href=&#34;http://222.180.160.110:61235/submission/3108272&#34;&gt;做法&lt;/a&gt;，和 &lt;span class=&#34;citation&#34; data-cites=&#34;Rosmist&#34;&gt;@Rosmist&lt;/span&gt; 疑似直接在每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 上做的&lt;a href=&#34;http://222.180.160.110:61235/submission/3108581&#34;&gt;做法&lt;/a&gt;。官解是个看不懂的做法&lt;/p&gt;
&lt;p&gt;呃，好像一不小心拿了最优解。而且优势很明显（怎么总用时比别人一个点还少？），这是为什么？&lt;/p&gt;
&lt;p&gt;可能因为大家都看不懂官解，做法比较多样？除了我之外比较快的 lwz 和 &lt;span class=&#34;citation&#34; data-cites=&#34;GoldSpade&#34;&gt;@GoldSpade&lt;/span&gt; 都用归并完成最后一步；我较他们的额外优势大概是用二分换掉了树状数组？迷惑&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;selection.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;selection.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;ex_selection2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; st(20, std::vector&amp;lt;int&amp;gt; (n + 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], st[0][i] = a[i];
    for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
        for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
            st[j][i] = std::__gcd(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
    auto askgcd = [&amp;amp;](int l, int r) &amp;#123;
        int k = std::__lg(r - l + 1);
        return std::__gcd(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
    &amp;#125;;
    std::unordered_map&amp;lt;int, int&amp;gt; tab;
    struct node &amp;#123;
        int i, l, r;
        bool operator&amp;lt; (const int q) const &amp;#123;
            return i &amp;lt; q;
        &amp;#125;
        bool operator&amp;lt;= (const int q) const &amp;#123;
            return i &amp;lt;= q;
        &amp;#125;
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;node&amp;gt; &amp;gt; p1, p2;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int to = i; to &amp;gt;= 1; ) &amp;#123;
            int at = i, g = askgcd(to, i);
            for (int l = 1, r = to, mid; l &amp;lt;= r; ) &amp;#123;
                mid = (l + r) &amp;gt;&amp;gt; 1;
                if (askgcd(mid, i) == g)
                    at = mid, r = mid - 1;
                else
                    l = mid + 1;
            &amp;#125;
            if (!tab.count(g)) &amp;#123;
                tab[g] = (int)p1.size();
                p1.emplace_back(), p2.emplace_back();
            &amp;#125;
            p1[tab[g]].push_back(&amp;#123; i, at, to &amp;#125;);
            to = at - 1;
        &amp;#125;
        for (int to = i; to &amp;lt;= n; ) &amp;#123;
            int at = i, g = askgcd(i, to);
            for (int l = to, r = n, mid; l &amp;lt;= r; ) &amp;#123;
                mid = (l + r) &amp;gt;&amp;gt; 1;
                if (askgcd(i, mid) == g)
                    at = mid, l = mid + 1;
                else
                    r = mid - 1;
            &amp;#125;
            if (!tab.count(g)) &amp;#123;
                tab[g] = (int)p2.size();
                p1.emplace_back(), p2.emplace_back();
            &amp;#125;
            p2[tab[g]].push_back(&amp;#123; i, to, at &amp;#125;);
            to = at + 1;
        &amp;#125;
    &amp;#125;
    auto s(0ll);
    std::vector&amp;lt;int&amp;gt; x1(n + 1), x2(n + 2), pos(2 * n + 3);
    std::vector&amp;lt;long long&amp;gt; f1(n + 1), f2(n + 2), s1(n + 1), s2(n + 2), diff(n + 1);
    for (auto [g, id] : tab) &amp;#123;
        // printf(&amp;quot;g = %d: \n&amp;quot;, g);
        int n1 = (int)p1[id].size();
        x1[0] = 0, f1[0] = s1[0] = 1ll;
        for (int i = 1; i &amp;lt;= n1; ++i) &amp;#123;
            auto [x, L, R] = p1[id][i - 1];
            --L, --R;
            x1[i] = x, f1[i] = f1[i - 1];
            int l = std::upper_bound(x1.begin() + 1, x1.begin() + i + 1, L) - x1.begin() - 1,
                r = std::upper_bound(x1.begin() + 1, x1.begin() + i + 1, R) - x1.begin() - 1;
            if (l == r)
                (f1[i] += f1[l] * (R - L + 1)) %= mod;
            else &amp;#123;
                f1[i] += s1[r - 1] + mod - s1[l];
                f1[i] += f1[r] * (R - x1[r] + 1);
                f1[i] += f1[l] * (x1[l + 1] - L);
                f1[i] %= mod;
            &amp;#125;
            // printf(&amp;quot;  r = %d, l = [%d, %d]: %lld\n&amp;quot;, x, L, R, f1[i]);
            if (i != n1)
                s1[i] = (s1[i - 1] + f1[i] * (p1[id][i].i - x)) % mod;
        &amp;#125;
        (s += f1[n1] - 1) %= mod;
        int n2 = (int)p2[id].size();
        x2[n2 + 1] = n + 1, f2[n2 + 1] = s2[n2 + 1] = 1ll;
        for (int i = n2; i; --i) &amp;#123;
            auto [x, L, R] = p2[id][i - 1];
            ++L, ++R;
            x2[i] = x, f2[i] = f2[i + 1];
            int l = std::lower_bound(x2.begin() + i, x2.begin() + n2 + 1, L) - x2.begin(),
                r = std::lower_bound(x2.begin() + i, x2.begin() + n2 + 1, R) - x2.begin();
            if (l == r)
                (f2[i] += f2[l] * (R - L + 1)) %= mod;
            else&amp;#123;
                f2[i] += s2[l + 1] + mod - s2[r];
                f2[i] += f2[r] * (R - x2[r - 1]);
                f2[i] += f2[l] * (x2[l] - L + 1);
                f2[i] %= mod;
            &amp;#125;
            // printf(&amp;quot;  l = %d, r = [%d, %d]: %lld\n&amp;quot;, x, L, R, f2[i]);
            if (i != 1)
                s2[i] = (s2[i + 1] + f2[i] * (x - p2[id][i - 2].i)) % mod;
        &amp;#125;
        for (int i = 0; i &amp;lt; n1; ++i)
            x1[i] = x1[i + 1];
        x1[n1] = n;
        int t = (x2[1] == 1) + 1;
        for (int i = 1; i &amp;lt;= n2 + 1; ++i)
            --x2[i];
        std::merge(x1.begin(), x1.begin() + n1 + 1, x2.begin() + t, x2.begin() + n2 + 2, pos.begin() + 1);
        int m = std::unique(pos.begin() + 1, pos.begin() + n1 + n2 + 4 - t) - pos.begin() - 1;
        for (int i = 1, p1 = 0, p2 = t, la = 0; i &amp;lt;= m; ++i) &amp;#123;
            for (; p1 + 1 &amp;lt;= n1 &amp;amp;&amp;amp; x1[p1] &amp;lt; pos[i]; ++p1);
            for (; p2 + 1 &amp;lt;= n2 + 1 &amp;amp;&amp;amp; x2[p2] &amp;lt; pos[i]; ++p2);
            (diff[la + 1] += f1[p1] * f2[p2] + mod - 1) %= mod;
            // printf(&amp;quot;  [%d, %d]: %lld, %lld\n&amp;quot;, la + 1, pos[i], f1[p1], f2[p2]);
            if (pos[i] + 1 &amp;lt;= n)
                (diff[pos[i] + 1] += mod - f1[p1] * f2[p2] + 1) %= mod;
            la = pos[i];
        &amp;#125;
    &amp;#125;
    // std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        (diff[i] += diff[i - 1]) %= mod;
        std::cout &amp;lt;&amp;lt; (s + mod - diff[i]) % mod &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;我一开始将 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 定义为单点答案而非前缀和，会导致需要线段树维护等差序列，还丢失了答案段数不多这个性质，非常麻烦。将 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的意义替换为前缀和后，就可以很轻松地做了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-宇宙&#34;&gt;A. 宇宙&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6535/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6535/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，对于 &lt;span class=&#34;math inline&#34;&gt;\(k=1,2,\cdots,n-1\)&lt;/span&gt;，回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 开始自增，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，都可以选取 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个互不相同的下标，并使它们对应的元素增加 1。此时，若存在元素不大于 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，停止。输出停止时 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 可能的最大值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6,V\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现不大于这个 condition 有些反人类，先将 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 全部减 1，转化成小于来考虑&lt;/p&gt;
&lt;p&gt;考虑能坚持到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的一个必要条件，即 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{a_j&amp;lt;i} i-a_j\le k\cdot i\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;容易发现该条件同时是充分的，同样从线段覆盖的角度出发，是一个 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的扩展&lt;/p&gt;
&lt;p&gt;对 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 排序，停止时参与运算的 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 是越来越多的，故记录最后一个参与运算的下标，逐步挪动（当发现解出来的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 比下一个更大时就需要挪动），同时解不等式即可。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;Quack&#34;&gt;@Quack&lt;/span&gt; 云我在场上能想出官解对我来说是非常了不起的（其实场上写正解的人少得出奇），我也不得不承认我能做出来确实有一定运气成分，也能从中一窥我令人眼前一黑的数学素养！&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
    std::freopen(&amp;quot;universe.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;universe.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    int n;
    std::cin &amp;gt;&amp;gt; n, std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], --a[i];
    std::sort(a.begin() + 1, a.end());
    int id = 1;
    long long s = a[1];
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        if (id &amp;lt; i + 1)
            s += a[++id];
        long long x = s / (id - i);
        for (; id != n &amp;amp;&amp;amp; x &amp;gt; a[id + 1]; s += a[++id], x = s / (id - i));
        std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-跳跃&#34;&gt;B. 跳跃&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6535/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6535/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的 01 序列和跳跃上限 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。给定 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 个询问，回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 跳到 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;，保证 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt; 的颜色均为 1，每次不能跳超过 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 格或跳出去，在最小化踩到 0 数量的前提下，最小化跳跃次数，输出这两个值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le5\times10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;容易发现只能往一个方向跳，那么不妨令 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;lt;b\)&lt;/span&gt;。有一个贪心的想法是能往右就往右，手玩发现&lt;strong&gt;是对的&lt;/strong&gt;（我场上手玩过后坚定地认为是错的；可能和没时间了兵荒马乱有关）。这样就很好想到第二问需要倍增；但把两个问结合起来考虑是有点困难的，赛时就意识到这两问的联系没有看起来那么大，甚至很可能是割裂的。&lt;/p&gt;
&lt;p&gt;单独考虑第一问，发现对于一段长度为 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 的 0，需要踩到恰好 &lt;span class=&#34;math inline&#34;&gt;\(\left\lfloor\dfrac {len}k\right\rfloor\)&lt;/span&gt; 个 0。答案容易计算。&lt;/p&gt;
&lt;p&gt;单独考虑第二问，考虑一个第一问答案固定为 0 的情况，也即每个 len 都比 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 小。则问题转化成在不踩 0 的情况下最小的步数。容易用倍增解决。&lt;/p&gt;
&lt;p&gt;本题最令人印象深刻的点在于二者的结合，发现这 &lt;span class=&#34;math inline&#34;&gt;\(\left\lfloor\dfrac {len}k\right\rfloor\cdot k\)&lt;/span&gt; 个 0 是无论如何都会被经过的，所以可以在原始数组里删掉它们，转化成只考虑第二问的情况&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;？？？&lt;/p&gt;
&lt;p&gt;我对于自己莫名其妙跑得比别人块一大截这件事情已经快要见怪不怪了，这次又是什么原理，我预处理写得比较漂亮吗？？&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;jump.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;jump.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, k, q, op;
    std::cin &amp;gt;&amp;gt; n, std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q &amp;gt;&amp;gt; k &amp;gt;&amp;gt; op;
    std::vector&amp;lt;int&amp;gt; tmp(n + 1), a(1), s(1), to(n + 2);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        tmp[i] = t - &amp;#39;0&amp;#39;;
    &amp;#125;
    tmp.push_back(1), ++n;
    int cnt = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (tmp[i] == 1) &amp;#123;
            a.push_back(1), to[i] = (int)a.size() - 1;
            s.push_back(s.back() + cnt), cnt = 0;
        &amp;#125;
        else &amp;#123;
            ++cnt;
            if (i == n || tmp[i + 1] == 1) &amp;#123;
                for (int j = 1; j &amp;lt;= cnt % k; ++j)
                    a.push_back(0), s.push_back(s.back());
                cnt /= k;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    n = (int)a.size() - 1;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(20, std::vector&amp;lt;int&amp;gt; (n + 1));
    for (int i = 0; i &amp;lt; 20; ++i)
        f[i][n] = n;
    for (int i = n - 1; i; --i) &amp;#123;
        f[0][i] = std::min(&amp;#123; n, i + k, f[0][i + 1] &amp;#125;);
        for (; !a[f[0][i]]; --f[0][i]);
        if (a[i] == 1) &amp;#123;
            for (int j = 1; j &amp;lt; 20; ++j)
                f[j][i] = f[j - 1][f[j - 1][i]];
        &amp;#125;
    &amp;#125;
    for (int a, b; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        if (a &amp;gt; b)
            std::swap(a, b);
        a = to[a], b = to[b];
        std::cout &amp;lt;&amp;lt; s[b] - s[a];
        if (op == 1) &amp;#123;
            int res = s[b] - s[a];
            for (int i = 19; ~i; --i)
                if (f[i][a] &amp;lt; b)
                    a = f[i][a], res += (1 &amp;lt;&amp;lt; i);
            std::cout &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; res + 1;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-jongmah&#34;&gt;D. Jongmah&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1110/problem/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/1110/problem/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易发现当连续出现三次 &lt;span class=&#34;math inline&#34;&gt;\((i-1,i,i+1)\)&lt;/span&gt; 时，可以被三次相同代替；&lt;/p&gt;
&lt;p&gt;容易发现需要使用 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,a,b}\)&lt;/span&gt; 来代表 DP 到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时，用了 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 组 &lt;span class=&#34;math inline&#34;&gt;\((i-1,i,i+1)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 组 &lt;span class=&#34;math inline&#34;&gt;\((i,i+1,i+2)\)&lt;/span&gt; 时的最大组数；&lt;/p&gt;
&lt;p&gt;但是并没有想到要将二者结合起来！感觉应该是能比较快做出来的水平。能察觉到不太认真。悔过！&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; cnt(m + 1);
    for (int i = 1, x; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; x, ++cnt[x];
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; (3, std::vector&amp;lt;int&amp;gt; (3, -inf)));
    f[0][0][0] = 0ll;
    for (int i = 1; i &amp;lt;= m; ++i)
        for (int a = 0; a &amp;lt;= 2; ++a) // i - 1, i, i + 1
            for (int b = 0; b &amp;lt;= 2; ++b) // i, i + 1, i + 2
                for (int c = 0; c &amp;lt;= 2; ++c) &amp;#123; // i - 2, i - 1, i
                    if (a + b + c &amp;gt; cnt[i]) continue;
                    f[i][a][b] = std::max(f[i][a][b], f[i - 1][c][a] + b + (cnt[i] - a - b - c) / 3);
                &amp;#125;
    std::cout &amp;lt;&amp;lt; f[m][0][0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e.-magic-stones&#34;&gt;E. Magic Stones&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1110/problem/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/1110/problem/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易想到考察差分数组，发现这个操作就是交换了差分数组的相邻两个元素。故对于 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的差分数组分别排序，然后 check 是否相等即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; b[i];
    if (a[1] != b[1] || a[n] != b[n]) &amp;#123;
        std::cout &amp;lt;&amp;lt; &amp;quot;No&amp;quot; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; da(n), db(n);
    std::adjacent_difference(a.begin() + 1, a.end(), da.begin());
    std::adjacent_difference(b.begin() + 1, b.end(), db.begin());
    std::sort(da.begin(), da.end());
    std::sort(db.begin(), db.end());
    std::cout &amp;lt;&amp;lt; (da == db ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="倍增" />
        <category term="树形 DP" />
        <category term="Kruskal 重构树" />
        <updated>2025-08-24T07:37:55.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250822/</id>
        <title>猫树 学习笔记</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250822/"/>
        <content type="html">&lt;p&gt;分治树&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;线段树不能维护背包的原因是 pushup 复杂度太高（单次 &lt;span class=&#34;math inline&#34;&gt;\(O(V^2)\)&lt;/span&gt;）。如果确定了要询问的体积（单点 / 区间），能否降低单次合并的复杂度？&lt;/li&gt;
&lt;li&gt;想到 &lt;a href=&#34;/20250520/#贪玩蓝月&#34;&gt;贪玩蓝月&lt;/a&gt; 这个题，如果存在一个 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 在询问区间内，从 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 往两侧预处理对应的单侧前后缀答案，最后询问的时候复杂度就比较低&lt;/li&gt;
&lt;li&gt;&lt;p&gt;考虑分治，这样就可以使得对于任意一个询问，总存在一段分治区间将其包含，且分治区间的 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 在询问内。&lt;/p&gt;
&lt;p&gt;这样就可以单 log 预处理之后，比较快地查询。&lt;/p&gt;
&lt;p&gt;基于这样的预处理形式，所以只能支持静态问题。&lt;/p&gt;
空间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;，有一些降空间的实现技巧，这里不赘述&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实现起来会发现很像链上的点分，也会联想到 &lt;a href=&#34;/20250819/#星白-by-ttpandas笛卡尔树-dsu-on-tree&#34;&gt;星白&lt;/a&gt;，只是这个题更像是 dsu on tree。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;对于树上问题，在 uoj 上翻到一个 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 预处理，&lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 单次查询的做法 &lt;a href=&#34;https://return20071007.blog.uoj.ac/blog/7500&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实际上并不用猫树，只需要点分树预处理，欧拉序求 LCA 即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---好吃的题目&#34;&gt;A - 好吃的题目&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6240&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6240&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;背包合并的 单点询问 和 前缀询问 都是 &lt;span class=&#34;math inline&#34;&gt;\(O(V)\)&lt;/span&gt; 的，任意区间 是 &lt;span class=&#34;math inline&#34;&gt;\(O(V\log V)\)&lt;/span&gt; 的，也支持取模，像贪玩蓝月那样的&lt;/p&gt;
&lt;p&gt;然后就比较板了&lt;/p&gt;
&lt;p&gt;发现空间不太对，需要把询问离线下来，其实就是经典分治&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q;
    std::vector&amp;lt;int&amp;gt; v(n + 1), w(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; v[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; w[i];
    n = 1 &amp;lt;&amp;lt; (std::__lg(n) + 1);
    v.resize(n), w.resize(n);
    struct node &amp;#123; int i, l, m; &amp;#125;;
    std::vector&amp;lt;int&amp;gt; res(q + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;node&amp;gt; &amp;gt; &amp;gt; t(17, std::vector&amp;lt;std::vector&amp;lt;node&amp;gt; &amp;gt; (n + 1));
    for (int i = 1, l, r, m; i &amp;lt;= q; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r &amp;gt;&amp;gt; m;
        if (l == r)
            res[i] = (m &amp;gt;= v[l] ? w[l] : 0);
        else &amp;#123;
            int d = std::__lg(l ^ r);
            t[d][r].push_back(&amp;#123; i, l, m &amp;#125;);
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;std::array&amp;lt;int, 201&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        int d = std::__lg(r - l + 1) - 1;
        if (l == r)
            return;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        calc(l, mid), calc(mid + 1, r);
        for (int i = 0; i &amp;lt;= 200; ++i)
            f[mid][i] = (i &amp;gt;= v[mid] ? w[mid] : 0);
        for (int i = mid - 1; i &amp;gt;= l; --i)
            for (int j = 0; j &amp;lt;= 200; ++j) &amp;#123;
                f[i][j] = f[i + 1][j];
                if (v[i] &amp;lt;= j)
                    f[i][j] = std::max(f[i][j], f[i + 1][j - v[i]] + w[i]);
            &amp;#125;
        for (int i = 0; i &amp;lt;= 200; ++i) &amp;#123;
            f[mid + 1][i] = (i &amp;gt;= v[mid + 1] ? w[mid + 1] : 0);
            for (auto [id, l, m] : t[d][mid + 1])
                if (i &amp;lt;= m)
                    res[id] = std::max(res[id], f[mid + 1][i] + f[l][m - i]);
        &amp;#125;
        for (int i = mid + 2; i &amp;lt;= r; ++i)
            for (int j = 0; j &amp;lt;= 200; ++j) &amp;#123;
                f[i][j] = f[i - 1][j];
                if (v[i] &amp;lt;= j)
                    f[i][j] = std::max(f[i][j], f[i - 1][j - v[i]] + w[i]);
                for (auto [id, l, m] : t[d][i])
                    if (j &amp;lt;= m)
                        res[id] = std::max(res[id], f[i][j] + f[l][m - j]);
            &amp;#125;
        return;
    &amp;#125;;
    calc(0, n - 1);
    for (int i = 1; i &amp;lt;= q; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---子序列&#34;&gt;B - 子序列&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P8885&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P8885&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;规范称呼：&lt;strong&gt;好子序列&lt;/strong&gt;、&lt;strong&gt;好子串&lt;/strong&gt;、&lt;strong&gt;好整串&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;考虑不含 &lt;code&gt;?&lt;/code&gt; 的&lt;strong&gt;好子串&lt;/strong&gt;判定，朴素 DP，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,0/1}\)&lt;/span&gt; 表示 DP 到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，子序列末尾为 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt; 时的子序列数量奇偶性。有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,0}=\begin{cases}
f_{i-1,0}+f_{i-1,1}+1&amp;amp;a_i=0\\
f_{i-1,0}&amp;amp;a_i=1
\end{cases},\\f_{i,1}=\begin{cases}
f_{i-1,1}&amp;amp;a_i=0\\
f_{i-1,0}+f_{i-1,1}+1&amp;amp;a_i=1
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;观察发现 &lt;span class=&#34;math inline&#34;&gt;\(f_{0},f_{1}\)&lt;/span&gt; 中只有至多一个为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。令 &lt;span class=&#34;math inline&#34;&gt;\(f_2\)&lt;/span&gt; 为一当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(f_0,f_1\)&lt;/span&gt; 均不为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。考虑 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在位置，建立 DFA：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如需加入 &lt;code&gt;?&lt;/code&gt;，转化为 NFA。注意到只关心每个点上指针数量的奇偶性，故压缩为 &lt;span class=&#34;math inline&#34;&gt;\({c_0,c_1,c_2}\)&lt;/span&gt; 记录。考虑对&lt;strong&gt;好子串&lt;/strong&gt;计数。每次在 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 处加入一个新的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 表示空串，再令所有指针移动一步，并对当前点结尾的子串数量计数，也即 &lt;span class=&#34;math inline&#34;&gt;\(f_{a_i}\)&lt;/span&gt;。即完成对好子串的计数。&lt;/p&gt;
&lt;p&gt;考虑进一步 DP of DP，将计数变量 &lt;span class=&#34;math inline&#34;&gt;\(tot\)&lt;/span&gt; 的奇偶性放入状态。初始为 &lt;span class=&#34;math inline&#34;&gt;\(0,0,0,0\)&lt;/span&gt;，转移 &lt;span class=&#34;math inline&#34;&gt;\(dp_{f0,f1,f2,tot}\to dp_{f2\oplus1,f1,f0,tot\oplus f0}\)&lt;/span&gt;，最后在 &lt;span class=&#34;math inline&#34;&gt;\(*,*,*,1\)&lt;/span&gt; 查答案。状态数共为 &lt;span class=&#34;math inline&#34;&gt;\(2^4=16\)&lt;/span&gt;，使用 DDP 维护动态询问即可。由于矩阵略大，需要用猫树替换线段树。然后就可以得到一个会 TLE 80 的做法（注意 &lt;code&gt;?&lt;/code&gt; 的转移矩阵系数可能为 2）。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
struct mat &amp;#123;
    long long a[16][16];
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat() &amp;#123;
        return;
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        for (int i = 0; i &amp;lt; 16; ++i)
            for (int k = 0; k &amp;lt; 16; ++k) &amp;#123;
                auto s = 0ll;
                for (int j = 0; j &amp;lt; 16; ++j)
                    s += a[i][j] * q[j][k];
                res[i][k] = s % mod;
            &amp;#125;
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125; m0, m1, ma;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    for (int f0 = 0; f0 &amp;lt;= 1; ++f0)
        for (int f1 = 0; f1 &amp;lt;= 1; ++f1)
            for (int f2 = 0; f2 &amp;lt;= 1; ++f2)
                for (int tot = 0; tot &amp;lt;= 1; ++tot) &amp;#123;
                    m0[(f0 &amp;lt;&amp;lt; 3) + (f1 &amp;lt;&amp;lt; 2) + (f2 &amp;lt;&amp;lt; 1) + tot][((f2 ^ 1) &amp;lt;&amp;lt; 3) + (f1 &amp;lt;&amp;lt; 2) + (f0 &amp;lt;&amp;lt; 1) + (tot ^ f0)] = 1ll;
                    ma[(f0 &amp;lt;&amp;lt; 3) + (f1 &amp;lt;&amp;lt; 2) + (f2 &amp;lt;&amp;lt; 1) + tot][((f2 ^ 1) &amp;lt;&amp;lt; 3) + (f1 &amp;lt;&amp;lt; 2) + (f0 &amp;lt;&amp;lt; 1) + (tot ^ f0)] = 1LL;
                    m1[(f0 &amp;lt;&amp;lt; 3) + (f1 &amp;lt;&amp;lt; 2) + (f2 &amp;lt;&amp;lt; 1) + tot][(f0 &amp;lt;&amp;lt; 3) + ((f2 ^ 1) &amp;lt;&amp;lt; 2) + (f1 &amp;lt;&amp;lt; 1) + (tot ^ f1)] = 1ll;
                    ++ma[(f0 &amp;lt;&amp;lt; 3) + (f1 &amp;lt;&amp;lt; 2) + (f2 &amp;lt;&amp;lt; 1) + tot][(f0 &amp;lt;&amp;lt; 3) + ((f2 ^ 1) &amp;lt;&amp;lt; 2) + (f1 &amp;lt;&amp;lt; 1) + (tot ^ f1)];
                &amp;#125;
    int n, n1;
    std::cin &amp;gt;&amp;gt; n;
    n1 = 1 &amp;lt;&amp;lt; (std::__lg(n + 1) + 1);
    std::vector&amp;lt;char&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;mat&amp;gt; f(std::vector&amp;lt;mat&amp;gt; (n + 1));
    auto askmat = [&amp;amp;](char t) -&amp;gt; mat&amp;amp; &amp;#123;
        if (t == &amp;#39;0&amp;#39;)
            return m0;
        if (t == &amp;#39;1&amp;#39;)
            return m1;
        return ma;
    &amp;#125;;
    int m;
    std::cin &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; res(m + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; &amp;gt; u(std::__lg(n1), std::vector&amp;lt;std::vector&amp;lt; std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; (n + 1));
    for (int i = 1, l, r; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        mat k;
        if (l == r) &amp;#123;
            k = askmat(a[l]);
            auto sum(0ll);
            for (int s = 0; s &amp;lt; 8; ++s)
                sum += k[0][(s &amp;lt;&amp;lt; 1) + 1];
            res[i] = sum % mod;
        &amp;#125;
        else &amp;#123;
            int d = std::__lg(l ^ r);
            u[d][r].emplace_back(l, i);
        &amp;#125;
    &amp;#125;
    std::function&amp;lt;void(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (l == r)
            return;
        int d = std::__lg(r - l + 1) - 1, mid = (l + r) &amp;gt;&amp;gt; 1;
        calc(l, mid), calc(mid + 1, r);
        if (mid &amp;lt;= n &amp;amp;&amp;amp; mid) &amp;#123;
            f[mid] = askmat(a[mid]);
            for (int i = mid - 1; i &amp;gt;= l &amp;amp;&amp;amp; i; --i)
                f[i] = askmat(a[i]) * f[i + 1];
        &amp;#125;
        if (mid + 1 &amp;lt;= n) &amp;#123;
            f[mid + 1] = askmat(a[mid + 1]);
            for (auto [l, id] : u[d][mid + 1]) &amp;#123;
                auto sum(0ll);
                auto k(f[l] * f[mid + 1]);
                for (int s = 0; s &amp;lt; 8; ++s)
                    sum += k[0][(s &amp;lt;&amp;lt; 1) + 1];
                res[id] = sum % mod;
            &amp;#125;
            for (int i = mid + 2; i &amp;lt;= r &amp;amp;&amp;amp; i &amp;lt;= n; ++i) &amp;#123;
                f[i] = f[i - 1] * askmat(a[i]);
                for (auto [l, id] : u[d][i]) &amp;#123;
                    auto sum(0ll);
                    auto k(f[l] * f[i]);
                    for (int s = 0; s &amp;lt; 8; ++s)
                        sum += k[0][(s &amp;lt;&amp;lt; 1) + 1];
                    res[id] = sum % mod;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return;
    &amp;#125;;
    calc(0, n1 - 1);
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;观察 &lt;code&gt;?&lt;/code&gt; 的转移矩阵，发现其实很稀疏，有效边只有 28 条&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;那么完全可以抛弃矩阵这个概念，返璞归真用线性 DP 解决；枚举中间相接的位就可以合并。&lt;/p&gt;
&lt;p&gt;实际上另一种更数学的理解方式是在左侧乘一个 &lt;span class=&#34;math inline&#34;&gt;\([1,0,0,\cdots,0]\)&lt;/span&gt; 就可以把左边的矩阵转化成向量；通过枚举中间相接的位，相当于在 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 处乘一个 &lt;span class=&#34;math inline&#34;&gt;\([0,0,\cdots,0,1,0,\cdots,0]\)&lt;/span&gt; 的向量，右边的矩阵就也转化成了向量。接着，由于矩阵很稀疏，只有 28 个位置有值，故可以手动转移。&lt;/p&gt;
&lt;p&gt;这样就可以少一个 &lt;span class=&#34;math inline&#34;&gt;\(O(s)\)&lt;/span&gt;，可以通过。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;贺了 &lt;span class=&#34;citation&#34; data-cites=&#34;spdarkle&#34;&gt;@spdarkle&lt;/span&gt; 的代码，但跑得没他快&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;Rosmist&#34;&gt;@Rosmist&lt;/span&gt; 又在表演卡常技能了，勇夺最优解&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    std::vector&amp;lt;int&amp;gt; m0(16), m1(16);
    for (int f0 = 0; f0 &amp;lt;= 1; ++f0)
        for (int f1 = 0; f1 &amp;lt;= 1; ++f1)
            for (int f2 = 0; f2 &amp;lt;= 1; ++f2)
                for (int tot = 0; tot &amp;lt;= 1; ++tot) &amp;#123;
                    m0[(f0 &amp;lt;&amp;lt; 3) + (f1 &amp;lt;&amp;lt; 2) + (f2 &amp;lt;&amp;lt; 1) + tot] = ((f2 ^ 1) &amp;lt;&amp;lt; 3) + (f1 &amp;lt;&amp;lt; 2) + (f0 &amp;lt;&amp;lt; 1) + (tot ^ f0);
                    m1[(f0 &amp;lt;&amp;lt; 3) + (f1 &amp;lt;&amp;lt; 2) + (f2 &amp;lt;&amp;lt; 1) + tot] = (f0 &amp;lt;&amp;lt; 3) + ((f2 ^ 1) &amp;lt;&amp;lt; 2) + (f1 &amp;lt;&amp;lt; 1) + (tot ^ f1);
                &amp;#125;
    int n, n1;
    std::cin &amp;gt;&amp;gt; n;
    n1 = 1 &amp;lt;&amp;lt; (std::__lg(n + 1) + 1);
    std::vector&amp;lt;char&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;int&amp;gt; dp(n + 1);
    std::vector&amp;lt;std::array&amp;lt;int, 16&amp;gt; &amp;gt; f(n + 1);
    int m;
    std::cin &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; res(m + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; &amp;gt; u(std::__lg(n1), std::vector&amp;lt;std::vector&amp;lt; std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; (n + 1));
    for (int i = 1, l, r; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        if (l != r) &amp;#123;
            int d = std::__lg(l ^ r);
            u[d][r].emplace_back(l, i);
        &amp;#125;
    &amp;#125;
    std::function&amp;lt;void(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (l == r)
            return;
        int d = std::__lg(r - l + 1) - 1, mid = (l + r) &amp;gt;&amp;gt; 1;
        calc(l, mid), calc(mid + 1, r);
        for (int t = 0; t &amp;lt; 16; ++t) &amp;#123;
            std::array&amp;lt;int, 16&amp;gt; la;
            if (mid &amp;lt;= n &amp;amp;&amp;amp; mid) &amp;#123;
                std::fill(la.begin(), la.end(), 0);
                la[t] = 1ll;
                for (int i = mid; i &amp;gt;= l &amp;amp;&amp;amp; i; --i) &amp;#123;
                    std::fill(f[i].begin(), f[i].end(), 0);
                    if (a[i] != &amp;#39;1&amp;#39;)
                        for (int j = 0; j &amp;lt; 16; ++j)
                            f[i][j] = la[m0[j]];
                    if (a[i] != &amp;#39;0&amp;#39;)
                        for (int j = 0; j &amp;lt; 16; ++j) &amp;#123;
                            f[i][j] += la[m1[j]];
                            if (f[i][j] &amp;gt;= mod)
                                f[i][j] -= mod;
                        &amp;#125;
                    dp[i] = f[i][0];
                    la = f[i];
                &amp;#125;
            &amp;#125;
            if (mid + 1 &amp;lt;= n) &amp;#123;
                std::fill(la.begin(), la.end(), 0);
                la[t] = 1ll;
                for (int i = mid + 1; i &amp;lt;= r &amp;amp;&amp;amp; i &amp;lt;= n; ++i) &amp;#123;
                    std::fill(f[i].begin(), f[i].end(), 0);
                    if (a[i] != &amp;#39;1&amp;#39;)
                        for (int j = 0; j &amp;lt; 16; ++j)
                            f[i][m0[j]] = la[j];
                    if (a[i] != &amp;#39;0&amp;#39;)
                        for (int j = 0; j &amp;lt; 16; ++j) &amp;#123;
                            f[i][m1[j]] += la[j];
                            if (f[i][m1[j]] &amp;gt;= mod)
                                f[i][m1[j]] -= mod;
                        &amp;#125;
                    dp[i] = 0ll;
                    for (int s = 0; s &amp;lt; 8; ++s) &amp;#123;
                        dp[i] += f[i][(s &amp;lt;&amp;lt; 1) + 1];
                        if (dp[i] &amp;gt;= mod)
                            dp[i] -= mod;
                    &amp;#125;
                    for (auto [l, id] : u[d][i])
                        (res[id] += (long long)dp[l] * dp[i]) %= mod;
                    la = f[i];
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return;
    &amp;#125;;
    calc(0, n1 - 1);
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="猫树" />
        <updated>2025-08-22T01:13:46.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250821/</id>
        <title>带根号的一些题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250821/"/>
        <content type="html">&lt;p&gt;和上上一篇独立开&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;分块&#34;&gt;分块&lt;/h2&gt;
&lt;h3 id=&#34;minecraft-series平衡复杂度&#34;&gt;Minecraft Series（平衡复杂度）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1753F&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1753F&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;莫队&#34;&gt;莫队&lt;/h2&gt;
&lt;h3 id=&#34;参数要吉祥莫队-队列&#34;&gt;参数要吉祥（莫队 + 队列）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P12598&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P12598&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(\{a\}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 个询问，每次问 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 中 &lt;span class=&#34;math inline&#34;&gt;\(c(x)\times a_x\)&lt;/span&gt; 的最大值。其中 &lt;span class=&#34;math inline&#34;&gt;\(c(x)\)&lt;/span&gt; 为『出现次数为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的数』的种类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;莫队结合队列&lt;/strong&gt;，每次更新一个数的 &lt;span class=&#34;math inline&#34;&gt;\(cnt\)&lt;/span&gt; 时，如果这个数没出现过就加入队列。查询的时候把队列过一遍，删除非最新版本的数据。&lt;strong&gt;队列长度和移动次数是一样的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;考虑询问的复杂度，对于长度为 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 的区间，&lt;span class=&#34;math inline&#34;&gt;\(\ge \sqrt{len}\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(cnt\)&lt;/span&gt; 出现次数不超过 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt {len}\)&lt;/span&gt;；&lt;span class=&#34;math inline&#34;&gt;\(\le \sqrt{len}\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(cnt\)&lt;/span&gt; 出现次数更不会超过 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt;。过一遍队列就是 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt {len})\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;h3 id=&#34;八云蓝自动机-ⅰ&#34;&gt;# 八云蓝自动机 Ⅰ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7708&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7708&lt;/a&gt;&lt;/p&gt;
</content>
        <updated>2025-08-21T06:11:06.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250820/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250820/"/>
        <content type="html">&lt;p&gt;困难&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-beauty拆贡献&#34;&gt;B. beauty（拆贡献）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6513/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6513/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n,V\)&lt;/span&gt;，求出对于所有长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，值域为 &lt;span class=&#34;math inline&#34;&gt;\([1,V]\)&lt;/span&gt; 的序列 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\sum_{i=1}^n |a_i-a_{n-i+1}|\)&lt;/span&gt; 的和。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,V\le 5000\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;容易想到算贡献，会有一个 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2V)\)&lt;/span&gt; 的做法。但是想 &lt;span class=&#34;math inline&#34;&gt;\(O(nV)\)&lt;/span&gt; 做是很抽象的，和 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2V)\)&lt;/span&gt; 的思路已经很不一样了&lt;/li&gt;
&lt;li&gt;经典 trick，&lt;span class=&#34;math inline&#34;&gt;\(a_{i+n/2}-a_i=\sum\limits_{x=0}^{+\infty} [a_i\le x&amp;lt;a_{i+n/2}]\)&lt;/span&gt; 拆贡献 。故要算 &lt;span class=&#34;math inline&#34;&gt;\(a_{i}-a_{i+n/2}\)&lt;/span&gt;，只需要对于每个 &lt;span class=&#34;math inline&#34;&gt;\(x\in[a_i,a_{i+n/2})\)&lt;/span&gt; 计算贡献。&lt;/li&gt;
&lt;li&gt;枚举 &lt;span class=&#34;math inline&#34;&gt;\(x\in [1,V)\)&lt;/span&gt;，再枚举最大的 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(a_t\ge x\)&lt;/span&gt;。那么有 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\le x\)&lt;/span&gt;，同时有 &lt;span class=&#34;math inline&#34;&gt;\(n-t\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(a_i&amp;gt;x\)&lt;/span&gt;；满足 &lt;span class=&#34;math inline&#34;&gt;\(i\le n/2\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(a_{i},a_{i+n/2}\)&lt;/span&gt; 对数应该是 &lt;span class=&#34;math inline&#34;&gt;\(\min(t,n-t)\)&lt;/span&gt;。故对于一个确定的序列，&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 共有 &lt;span class=&#34;math inline&#34;&gt;\(\min(t,n-t)\)&lt;/span&gt; 的贡献。&lt;/li&gt;
&lt;li&gt;考虑计数满足 &lt;span class=&#34;math inline&#34;&gt;\(a_t\le x\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，这要求第 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 大的数 &lt;span class=&#34;math inline&#34;&gt;\(\le x\)&lt;/span&gt; 而第 &lt;span class=&#34;math inline&#34;&gt;\(t+1\)&lt;/span&gt; 大的数 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt;，也即在 &lt;span class=&#34;math inline&#34;&gt;\([1,x]\)&lt;/span&gt; 里找 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 个数再在 &lt;span class=&#34;math inline&#34;&gt;\((x,V]\)&lt;/span&gt; 里找 &lt;span class=&#34;math inline&#34;&gt;\(n-t\)&lt;/span&gt; 个数，注意还要再乘上这两种数拼起来的方案数。&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;beauty.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;beauty.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int T;
    std::vector&amp;lt;long long&amp;gt; fac(5001), inv(5001);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; pw(5001, std::vector&amp;lt;long long&amp;gt; (5001));
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= 5000; ++i) &amp;#123;
        fac[i] = fac[i - 1] * i % mod;
        pw[i][0] = 1ll;
        for (int j = 1; j &amp;lt;= 5000; ++j)
            pw[i][j] = pw[i][j - 1] * i % mod;
    &amp;#125;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[5000] = qkp(fac[5000], mod - 2);
    for (int i = 4999; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[m] % mod * inv[n - m] % mod;
    &amp;#125;;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, V;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; V;
        auto res(0ll);
        for (int x = 1; x &amp;lt; V; ++x)
            for (int t = 1; t &amp;lt; n; ++t) &amp;#123;
                int k = std::min(t, n - t);
                (res += k * pw[x][t] % mod * pw[V - x][n - t] % mod * C(n, t) % mod) %= mod;
            &amp;#125;
        std::cout &amp;lt;&amp;lt; res * 2 % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-drink-bar容斥-偏序&#34;&gt;C. Drink Bar（容斥 + 偏序）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/AT_snuke21_j&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/AT_snuke21_j&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三个属性都是排列，可以推理出只要两个三元组中，作出贡献的元素不完全相同，两个三元组就不同。讨论作出贡献的元素数量。&lt;/li&gt;
&lt;li&gt;只有一个元素作出贡献，答案为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;有两个元素作出贡献，任选的话答案为 &lt;span class=&#34;math inline&#34;&gt;\(C_n^2\)&lt;/span&gt;，要减去一个元素严格优于另一个元素的情况，三维偏序即可。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有三个元素作出贡献，是个有点复杂的容斥，不妨设三元组为 &lt;span class=&#34;math inline&#34;&gt;\((i,j,k)\)&lt;/span&gt;，其中贡献次数最多的为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 贡献了 &lt;span class=&#34;math inline&#34;&gt;\(\ge 1\)&lt;/span&gt; 次，方案数为 &lt;span class=&#34;math inline&#34;&gt;\(C_n^3\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 贡献了 &lt;span class=&#34;math inline&#34;&gt;\(\ge 2\)&lt;/span&gt; 次，枚举作出两次贡献的属性，以 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt; 为例，那么有 &lt;span class=&#34;math inline&#34;&gt;\(a_j,a_k&amp;lt;a_i\)&lt;/span&gt;，以及 &lt;span class=&#34;math inline&#34;&gt;\(b_j,b_k&amp;lt;b_i\)&lt;/span&gt;，二维偏序即可&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 贡献了 &lt;span class=&#34;math inline&#34;&gt;\(\ge 3\)&lt;/span&gt; 次，依然是三维偏序，可以用『两个元素做出贡献』中 cdq 得到的值算出答案。记得乘 2，因为被多减了 2 次。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    struct node &amp;#123; int a, b, c, res; &amp;#125;;
    std::vector&amp;lt;node&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i].a &amp;gt;&amp;gt; a[i].b &amp;gt;&amp;gt; a[i].c;
        a[i].res = 0;
    &amp;#125;
    long long res = n;
    res += (long long)n * (n - 1) / 2;
    std::vector&amp;lt;int&amp;gt; bit(n + 1);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] += v;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    std::function&amp;lt;void(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (l == r)
            return;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        calc(l, mid), calc(mid + 1, r);
        int j = l;
        for (int i = mid + 1; i &amp;lt;= r; ++i) &amp;#123;
            for (; j &amp;lt;= mid &amp;amp;&amp;amp; a[j].b &amp;lt; a[i].b; ++j)
                add(a[j].c, 1);
            a[i].res += ask(a[i].c);
        &amp;#125;
        for (int i = l; i &amp;lt; j; ++i)
            add(a[i].c, -1);
        std::inplace_merge(a.begin() + l, a.begin() + mid + 1, a.begin() + r + 1, [&amp;amp;](node x, node y) &amp;#123; return x.b &amp;lt; y.b; &amp;#125;);
        return;
    &amp;#125;;
    std::sort(a.begin() + 1, a.end(), [&amp;amp;](node x, node y) &amp;#123; return x.a &amp;lt; y.a; &amp;#125;);
    calc(1, n);
    for (int i = 1; i &amp;lt;= n; ++i)
        res -= a[i].res;
    res += (long long)n * (n - 1) * (n - 2) / 6;
    for (int k = 0; k &amp;lt; 3; ++k) &amp;#123;
        std::sort(a.begin() + 1, a.end(), [&amp;amp;](node x, node y) &amp;#123; return x.a &amp;lt; y.a; &amp;#125;);
        std::fill(bit.begin() + 1, bit.end(), 0);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int t = ask(a[i].b);
            res -= (long long)t * (t - 1) / 2;
            add(a[i].b, 1);
            std::tie(a[i].a, a[i].b, a[i].c) = std::make_tuple(a[i].b, a[i].c, a[i].a);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        res += (long long)a[i].res * (a[i].res - 1);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-星白-by-ttpandas笛卡尔树-dsu-on-tree&#34;&gt;C. 星白 by TTpandaS（笛卡尔树 + dsu on tree）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/20250819/#星白-by-ttpandas笛卡尔树-dsu-on-tree&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-isn&#34;&gt;C. isn&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hydro.ac/p/bzoj-P4361&#34; class=&#34;uri&#34;&gt;https://hydro.ac/p/bzoj-P4361&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最后一个删去的一定是连接 &lt;code&gt;&amp;gt;&lt;/code&gt; 的数，可以 DP 还剩一个数没删时可能的序列。&lt;/p&gt;
令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,0/1}\)&lt;/span&gt; 表示最后一个元素为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，序列长为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，最后一个被删去的数（未）被确定的方案数。&lt;strong&gt;注意确定最后一个被删去的数要在转移过程中进行，而不是作为一个 DP 节点&lt;/strong&gt;，很容易发现后者是错的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优化的思路就不一样了。因为要乘上 &lt;span class=&#34;math inline&#34;&gt;\((n-j)!\)&lt;/span&gt;，所以 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的这一维是省不掉的&lt;/p&gt;
考虑不管最后一个被删掉的数，直接令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示最后一个元素为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，序列长为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数。有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\sum\limits_{a_k\le a_i}f_{k,j - 1}\)&lt;/span&gt;，可以 DS 优化。但这样会产生不合法的情况。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;考察什么样的序列合法，发现&lt;strong&gt;删去的最后一个数一定是非法的，也就是包含之的序列都是非法的；反之易得被合法序列包含的序列都非法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;明白了这一点过后就会知道长度为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的合法序列系数都为 &lt;span class=&#34;math inline&#34;&gt;\((n-j)!\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;故容斥，令 &lt;span class=&#34;math inline&#34;&gt;\(g_i\)&lt;/span&gt; 表示序列长为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的方案数，&lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt; 表示序列长为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的合法方案数。从异或角度考虑，易得 &lt;span class=&#34;math inline&#34;&gt;\(h_i=g_i-\sum\limits_{j=i+1}h_j\times (j-i)!\times C_j^i\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;isn.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;isn.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), l(1);
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i], l.push_back(a[i]);
        fac[i] = fac[i - 1] * i % mod;
    &amp;#125;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[m] % mod * inv[n - m] % mod;
    &amp;#125;;
    std::sort(l.begin(), l.end());
    l.erase(std::unique(l.begin(), l.end()), l.end());
    for (int i = 0; i &amp;lt;= n; ++i)
        a[i] = std::lower_bound(l.begin(), l.end(), a[i]) - l.begin() + 1;
    int m = (int)l.size();
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; bit(n + 1, std::vector&amp;lt;long long&amp;gt; (m + 1));
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int id, int x, long long v) &amp;#123;
        for (; x &amp;lt;= m; x += lowbit(x))
            (bit[id][x] += v) %= mod;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int id, int x) &amp;#123;
        auto res(0ll);
        for (; x; x -= lowbit(x))
            (res += bit[id][x]) %= mod;
        return res;
    &amp;#125;;
    std::vector&amp;lt;long long&amp;gt; g(n + 1), h(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long long&amp;gt; (n + 1));
    add(0, a[0], 1ll), f[0][0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = n; j; --j) &amp;#123;
            f[i][j] = ask(j - 1, a[i]);
            add(j, a[i], f[i][j]);
            (g[j] += f[i][j] * fac[n - j]) %= mod;
        &amp;#125;
    auto res(0ll);
    for (int i = n; i; --i) &amp;#123;
        h[i] = g[i];
        for (int j = i + 1; j &amp;lt;= n; ++j)
            (h[i] += mod - h[j] * fac[j - i] % mod * C(j, i) % mod) %= mod;
        (res += h[i]) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-thepowers&#34;&gt;D. ThePowers&lt;/h3&gt;
&lt;p&gt;TopCoder - 12185，原题交不了故不放链接了&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6522/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6522/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(A,B\)&lt;/span&gt;，对于所有 &lt;span class=&#34;math inline&#34;&gt;\(X\le A,Y\le B\)&lt;/span&gt;，求 &lt;span class=&#34;math inline&#34;&gt;\(X^Y\)&lt;/span&gt; 的可能取值数量。&lt;span class=&#34;math inline&#34;&gt;\(A,B\le10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考虑什么时候算重。发现当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(x^a=y^b\)&lt;/span&gt;，此时记 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;#39;=a\div\gcd(a,b),b&amp;#39;=b\div \gcd(a,b)\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(t=\sqrt[a&amp;#39;]x=\sqrt[b&amp;#39;]y\)&lt;/span&gt; 为整（写成质因数乘积是易证的），则 &lt;span class=&#34;math inline&#34;&gt;\(x=t^b,y=t^a\)&lt;/span&gt;，是同一个数的不同次幂&lt;/li&gt;
&lt;li&gt;&lt;p&gt;故把 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 内所有数分组，记 &lt;span class=&#34;math inline&#34;&gt;\(S_x\)&lt;/span&gt; 表示所有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的次幂，其中 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 不是其他数的次幂&lt;/p&gt;
发现一个对于 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;\sqrt A\)&lt;/span&gt; 的数 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;，只有可能属于 &lt;span class=&#34;math inline&#34;&gt;\(S_y\)&lt;/span&gt;，或一个 &lt;span class=&#34;math inline&#34;&gt;\(x\le \sqrt A\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(S_x\)&lt;/span&gt;。每组最多有 &lt;span class=&#34;math inline&#34;&gt;\(30\)&lt;/span&gt; 个，故扫一遍 &lt;span class=&#34;math inline&#34;&gt;\(\le\sqrt A\)&lt;/span&gt; 的数即可完成分组。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这样就只用考虑同组内的计数。即对于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(p\le |S_x|,y\le B\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(x^{py}\)&lt;/span&gt; 有多少种取值，也即 &lt;span class=&#34;math inline&#34;&gt;\(py\)&lt;/span&gt; 有多少种取值&lt;/p&gt;
发现因为值域是连续的，对于一个 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，只要 &lt;span class=&#34;math inline&#34;&gt;\(pB\)&lt;/span&gt; 范围内某个数是 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的倍数就可以取到，枚举 &lt;span class=&#34;math inline&#34;&gt;\([(p-1)B+1,pB]\)&lt;/span&gt;，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 容斥，就需要计算 &lt;span class=&#34;math inline&#34;&gt;\(p\sim |S_x|\)&lt;/span&gt; 的每个子集，复杂度会爆炸。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(x,y\in[p,|S_x|]\)&lt;/span&gt;，如果 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的倍数，就可以 skip，只在剩下的元素里枚举子集，可以代码验证一下 &lt;span class=&#34;math inline&#34;&gt;\(30\)&lt;/span&gt; 以内最多剩下 &lt;span class=&#34;math inline&#34;&gt;\(15\)&lt;/span&gt; 个数，可以接受，注意子集信息类似高维前缀和地 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 求就行了&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;power.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;power.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    long long A, B, mx = 1ll;
    std::cin &amp;gt;&amp;gt; A &amp;gt;&amp;gt; B;
    if (A == 1) &amp;#123;
        std::cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    int cnt = 1;
    long long res = 1ll;
    for (; (mx + 1) * (mx + 1) &amp;lt;= A; ++mx);
    std::vector&amp;lt;int&amp;gt; tag(mx + 1);
    for (int i = 2; i &amp;lt;= mx; ++i)
        if (!tag[i]) &amp;#123;
            int siz = 1;
            for (long long j = i; j &amp;lt;= A; j *= i, ++siz)
                if (j &amp;lt;= mx)
                    tag[j] = 1;
            cnt += --siz;
            for (int j = 1; j &amp;lt;= siz; ++j) &amp;#123;
                std::vector&amp;lt;int&amp;gt; p(&amp;#123; j &amp;#125;);
                for (int k = j + 1; k &amp;lt;= siz; ++k) &amp;#123;
                    bool flag = 1;
                    for (auto l : p)
                        if (k % l == 0) &amp;#123;
                            flag = 0;
                            break;
                        &amp;#125;
                    if (flag)
                        p.push_back(k);
                &amp;#125;
                int m = (int)p.size(), s = 1 &amp;lt;&amp;lt; m;
                std::vector&amp;lt;long long&amp;gt; mul(s);
                mul[0] = 1ll;
                auto lcm = [&amp;amp;](long long x, long long y) &amp;#123;
                    return x / std::__gcd(x, y) * y;
                &amp;#125;;
                for (int k = 1; k &amp;lt; s; ++k) &amp;#123;
                    mul[k] = lcm(p[std::__lg(k ^ ((k - 1) &amp;amp; k))], mul[(k - 1) &amp;amp; k]);
                    if (__builtin_popcount(k) &amp;amp; 1)
                        res += j * B / mul[k] - (j - 1) * B / mul[k];
                    else
                        res -= j * B / mul[k] - (j - 1) * B / mul[k];
                &amp;#125;
            &amp;#125;
        &amp;#125;
    res += (A - cnt) * B;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;搜索做法本质上是一样的，就不赘述了&lt;/p&gt;
</content>
        <category term="DP" />
        <category term="容斥" />
        <updated>2025-08-20T12:26:44.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250819/</id>
        <title>log 数据结构的一些题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250819/"/>
        <content type="html">&lt;p&gt;线段树、树状数组、倍增、分治（朴素分治 / CDQ / 整体二分）、平衡树、字典树、笛卡尔树&lt;/p&gt;
&lt;p&gt;多乎哉？不多也。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;题目来源：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;llsw’s pdf&lt;/li&gt;
&lt;li&gt;洛谷文章广场题解区搜索对应算法&lt;/li&gt;
&lt;li&gt;自己以前的一些零散题解&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找了一些有数据结构方面思维难点的题，实现难度通常不会很大，也有少许粑粑夹杂其中&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;#&lt;/code&gt; 是缺题解，&lt;code&gt;*&lt;/code&gt; 是缺代码&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;线段树&#34;&gt;线段树&lt;/h2&gt;
&lt;h3 id=&#34;维护特殊信息&#34;&gt;维护特殊信息&lt;/h3&gt;
&lt;h4 id=&#34;金鱼草区间覆盖信息&#34;&gt;金鱼草（区间覆盖信息）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6051/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6051/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个区间 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，给出 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 个询问，每次询问 &lt;span class=&#34;math inline&#34;&gt;\([L,R]\)&lt;/span&gt; 是否能被表示为若干 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 的并集。注意不能覆盖到 &lt;span class=&#34;math inline&#34;&gt;\([L,R]\)&lt;/span&gt; 之外的点。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le 5\times 10^5,|V|\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;题目所求等价于 check 满足 &lt;span class=&#34;math inline&#34;&gt;\(l\ge L\land r\le R\)&lt;/span&gt; 的所有区间是否能够覆盖 &lt;span class=&#34;math inline&#34;&gt;\([L,R]\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;这个很简单，需要区间修改的做法就不提了。可以想一下有没有只需要单点修改的做法&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发现权值线段树可以维护「一段连续左端点对应区间的并」是否是连续的：&lt;/p&gt;
维护位于区间内的左端点最后一个覆盖到的点 &lt;span class=&#34;math inline&#34;&gt;\(rv\)&lt;/span&gt;（可以在区间外；发现从区间左端点到 &lt;span class=&#34;math inline&#34;&gt;\(rv\)&lt;/span&gt; 会被连续覆盖），&lt;strong&gt;区间内&lt;/strong&gt;最后一个没有被覆盖到的点 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，和表示区间是否能被完整覆盖的标记 &lt;span class=&#34;math inline&#34;&gt;\(flag\)&lt;/span&gt;。pushup 是容易的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;容易发现如果我们在树上询问 &lt;span class=&#34;math inline&#34;&gt;\([L,R]\)&lt;/span&gt; 中所有左端点的 &lt;span class=&#34;math inline&#34;&gt;\(flag\)&lt;/span&gt;，无法保证参与覆盖的 &lt;span class=&#34;math inline&#34;&gt;\(r\le R\)&lt;/span&gt;。故离线下来扫描线即可。&lt;/p&gt;
&lt;p&gt;实际上由于未知原因跑得很可能不如区间修改的方法快 TAT&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 5e5 + 5;
struct _ &amp;#123;
    bool flag;
    int l, r, rv, p;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void pushup(int p) &amp;#123;
    t[p].rv = std::max(t[lt].rv, t[rt].rv);
    if (!t[lt].flag) &amp;#123;
        t[p].flag = 0;
        if (!t[rt].flag &amp;amp;&amp;amp; t[lt].rv &amp;lt; t[rt].p)
            t[p].p = t[rt].p;
        else
            t[p].p = t[lt].p;
    &amp;#125;
    else if (!t[rt].flag &amp;amp;&amp;amp; t[lt].rv &amp;lt; t[rt].p)
        t[p].flag = 0, t[p].p = t[rt].p;
    else
        t[p].flag = 1, t[p].p = 0;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = t[p].p = r;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    if(t[p].l == t[p].r) &amp;#123;
        t[p].flag = 1, t[p].p = 0;
        t[p].rv = std::max(t[p].rv, v);
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x, v);
    else
        add(rt, x, v);
    pushup(p);
    return;
&amp;#125;
_ ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p];
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    auto ls(ask(lt, l, r)), rs(ask(rt, l, r));
    if (!ls.flag) &amp;#123;
        if (!rs.flag &amp;amp;&amp;amp; ls.rv &amp;lt; rs.p)
            ls.p = rs.p;
    &amp;#125;
    else if (!rs.flag &amp;amp;&amp;amp; ls.rv &amp;lt; rs.p)
        ls.flag = 0, ls.p = rs.p;
    ls.rv = std::max(ls.rv, rs.rv);
    return ls;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;snapdragon.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;snapdragon.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, q;
    std::cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q;
    bld(1, 1, m);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; t(m + 1);
    for (int i = 1, l, r; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        t[r].push_back(l);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; res(q + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; tq(m + 1);
    for (int i = 1, l, r; i &amp;lt;= q; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        tq[r].emplace_back(l, i);
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        for (auto l : t[i])
            add(1, l, i);
        for (auto [l, id] : tq[i])
            res[id] = ask(1, l, i).flag;
    &amp;#125;
    for (int i = 1; i &amp;lt;= q; ++i)
        std::cout &amp;lt;&amp;lt; (res[i] ? &amp;quot;YES&amp;quot; : &amp;quot;NO&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&#34;题日-zapatak哈希&#34;&gt;# 题日 Zapatak（哈希）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11262&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11262&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;简单数据结构带一点递推性质&#34;&gt;简单数据结构（带一点递推性质）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://pjudge.ac/problem/21636&#34; class=&#34;uri&#34;&gt;https://pjudge.ac/problem/21636&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定初始为空的多重集 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt;，这两个多重集中的元素都有 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt; 两种属性。需要需要维护 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 的加点和删点操作，询问 &lt;span class=&#34;math inline&#34;&gt;\(\forall \,i\in p,j\in q\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\max(i_x + j_x, i_y + j_y)\)&lt;/span&gt; 的最小值。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(m\le 10^6,V\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考虑&lt;strong&gt;对不等式恒等变形，转化为偏序问题&lt;/strong&gt;。若 &lt;span class=&#34;math inline&#34;&gt;\(a_{i,0}+b_{j,0}\ge a_{i,1}+b_{j,1}\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(a_{i,0}-a_{i,1}\ge b_{j,1}-b_{j,0}\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 按照 &lt;span class=&#34;math inline&#34;&gt;\(a_{i,0}-a_{i,1}\)&lt;/span&gt; 排序、把 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 按照 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,1}-b_{j,0}\)&lt;/span&gt; 排序。&lt;/p&gt;
&lt;p&gt;要求某个时刻的答案，需要对于每一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 找到最小的 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,0}\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,1}-b_{j,0}\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\([-\infty, a_{i,0}-a_{i,1}]\)&lt;/span&gt; 中，同时找到最小的 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,1}\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,1}-b_{j,0}\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\([a_{i, 0}-a_{i,1},+\infty]\)&lt;/span&gt; 中。&lt;/p&gt;
&lt;p&gt;这个带有一点递推的性质，在线段树 pushup 的时候，用左边的 &lt;span class=&#34;math inline&#34;&gt;\(b_{j,0}\)&lt;/span&gt; 结合右边的答案得到父亲的答案。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;听说我之前赛时切了这题？怎么没印象。llsw 讲题的时候说要离线，但是没想到离线做法 orz&lt;/em&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 2e9 + 1;
struct _ &amp;#123; long long aa, ab, ba, bb, u; int l, r, id; &amp;#125;;
std::vector&amp;lt;_&amp;gt; t(1);
std::vector&amp;lt;std::multiset&amp;lt;long long&amp;gt; &amp;gt; aa(1), ab(1), ba(1), bb(1);
int tot, cnt;
#define lt t[p].l
#define rt t[p].r
void pushup(int p) &amp;#123;
    t[p].aa = t[p].ab = t[p].ba = t[p].bb = t[p].u = inf;
    if (lt) &amp;#123;
        t[p].u = t[lt].u;
        t[p].aa = t[lt].aa, t[p].ab = t[lt].ab, t[p].ba = t[lt].ba, t[p].bb = t[lt].bb;
    &amp;#125;
    if (rt) &amp;#123;
        t[p].u = std::min(t[p].u, t[rt].u);
        t[p].aa = std::min(t[p].aa, t[rt].aa);
        t[p].ab = std::min(t[p].ab, t[rt].ab);
        t[p].ba = std::min(t[p].ba, t[rt].ba);
        t[p].bb = std::min(t[p].bb, t[rt].bb);
    &amp;#125;
    if (lt &amp;amp;&amp;amp; rt)
        t[p].u = std::min(&amp;#123; t[p].u, t[lt].ba + t[rt].aa, t[lt].ab + t[rt].bb &amp;#125;);
    return;
&amp;#125;
int adda(int p, long long l, long long r, int x, int a, int b) &amp;#123;
    if (!p)
        p = ++tot, t.emplace_back(), t[p].aa = t[p].ab = t[p].ba = t[p].bb = t[p].u = inf;
    if (l == r) &amp;#123;
        if (!t[p].id)
            t[p].id = ++cnt, aa.emplace_back(), ab.emplace_back(), ba.emplace_back(), bb.emplace_back();
        int id = t[p].id;
        aa[id].insert(a), ab[id].insert(b);
        t[p].aa = *aa[id].begin(), t[p].ab = *ab[id].begin();
        if (!aa[id].empty() &amp;amp;&amp;amp; !ba[id].empty())
            t[p].u = std::min(*aa[id].begin() + *ba[id].begin(), *ab[id].begin() + *bb[id].begin());
        else
            t[p].u = inf;
        return p;
    &amp;#125;
    long long mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid) &amp;#123;
        auto s(adda(lt, l, mid, x, a, b));
        lt = s;
    &amp;#125;
    else &amp;#123;
        auto s(adda(rt, mid + 1, r, x, a, b));
        rt = s;
    &amp;#125;
    pushup(p);
    return p;
&amp;#125;
int addb(int p, long long l, long long r, int x, int a, int b) &amp;#123;
    if (!p)
        p = ++tot, t.emplace_back(), t[p].aa = t[p].ab = t[p].ba = t[p].bb = t[p].u = inf;
    if (l == r) &amp;#123;
        if (!t[p].id)
            t[p].id = ++cnt, aa.emplace_back(), ab.emplace_back(), ba.emplace_back(), bb.emplace_back();
        int id = t[p].id;
        ba[id].insert(a), bb[id].insert(b);
        t[p].ba = *ba[id].begin(), t[p].bb = *bb[id].begin();
        if (!aa[id].empty() &amp;amp;&amp;amp; !ba[id].empty())
            t[p].u = std::min(*aa[id].begin() + *ba[id].begin(), *ab[id].begin() + *bb[id].begin());
        else
            t[p].u = inf;
        return p;
    &amp;#125;
    long long mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid) &amp;#123;
        auto s(addb(lt, l, mid, x, a, b));
        lt = s;
    &amp;#125;
    else &amp;#123;
        auto s(addb(rt, mid + 1, r, x, a, b));
        rt = s;
    &amp;#125;
    pushup(p);
    return p;
&amp;#125;
void dela(int p, long long l, long long r, int x, int a, int b) &amp;#123;
    if (l == r) &amp;#123;
        int id = t[p].id;
        aa[id].erase(aa[id].find(a)), ab[id].erase(ab[id].find(b));
        t[p].aa = (aa[id].empty() ? inf : *aa[id].begin());
        t[p].ab = (ab[id].empty() ? inf : *ab[id].begin());
        if (!aa[id].empty() &amp;amp;&amp;amp; !ba[id].empty())
            t[p].u = std::min(*aa[id].begin() + *ba[id].begin(), *ab[id].begin() + *bb[id].begin());
        else
            t[p].u = inf;
        return;
    &amp;#125;
    long long mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        dela(lt, l, mid, x, a, b);
    else
        dela(rt, mid + 1, r, x, a, b);
    pushup(p);
    return;
&amp;#125;
void delb(int p, long long l, long long r, int x, int a, int b) &amp;#123;
    if (l == r) &amp;#123;
        int id = t[p].id;
        ba[id].erase(ba[id].find(a)), bb[id].erase(bb[id].find(b));
        t[p].ba = (ba[id].empty() ? inf : *ba[id].begin());
        t[p].bb = (bb[id].empty() ? inf : *bb[id].begin());
        if (!aa[id].empty() &amp;amp;&amp;amp; !ba[id].empty())
            t[p].u = std::min(*aa[id].begin() + *ba[id].begin(), *ab[id].begin() + *bb[id].begin());
        else
            t[p].u = inf;
        return;
    &amp;#125;
    long long mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        delb(lt, l, mid, x, a, b);
    else
        delb(rt, mid + 1, r, x, a, b);
    pushup(p);
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;set.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;set.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int q, rt = 0;
    std::cin &amp;gt;&amp;gt; q;
    for (int i = 1; i &amp;lt;= q; ++i) &amp;#123;
        int op, d, a, b;
        std::cin &amp;gt;&amp;gt; op &amp;gt;&amp;gt; d &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        if (op == 0 &amp;amp;&amp;amp; d == 0)
            dela(rt, -inf, inf, a - b, a, b);
        else if (op == 0)
            delb(rt, -inf, inf, b - a, a, b);
        else if (d == 0)
            rt = adda(rt, -inf, inf, a - b, a, b);
        else
            rt = addb(rt, -inf, inf, b - a, a, b);
        std::cout &amp;lt;&amp;lt; (t[1].u == inf ? -1 : t[1].u) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;命运利用线段树的分治结构递推&#34;&gt;# 命运（利用线段树的分治结构递推）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6773&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6773&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;对数据结构的爱维护函数&#34;&gt;* 对数据结构的爱（维护函数）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5609&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5609&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的数组 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 和模数 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 初始可能比 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 大很多，还有可能为负），给定 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 次询问，每次问区间 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，进行这样的操作：&lt;/p&gt;
&lt;p&gt;初始 &lt;span class=&#34;math inline&#34;&gt;\(sum=0\)&lt;/span&gt;，从 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，依次令 &lt;span class=&#34;math inline&#34;&gt;\(sum\gets sum+a_i\)&lt;/span&gt;，当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(sum\ge p\)&lt;/span&gt; 时令 &lt;span class=&#34;math inline&#34;&gt;\(sum\gets sum-p\)&lt;/span&gt;（注意这不是取模，减完之后还是可能 &lt;span class=&#34;math inline&#34;&gt;\(\ge p\)&lt;/span&gt;）。&lt;/p&gt;
&lt;p&gt;问最终 &lt;span class=&#34;math inline&#34;&gt;\(sum\)&lt;/span&gt; 的值。&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6,m\le 2\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;考虑线段树维护函数。定义 &lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; 表示区间上想要减去 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 次 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 需要的最小初始值（这样才能让定义域和区间长有关），查询时直接二分即可；考虑初始化时如何合并。&lt;/p&gt;
&lt;p&gt;首先思考较为暴力的做法，对于左侧点 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 和右侧点 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(f(a+1)-1+s_l-a\cdot p\ge f(b)\)&lt;/span&gt;，也即可以减去 &lt;span class=&#34;math inline&#34;&gt;\(a+b\)&lt;/span&gt; 次，就可以用 &lt;span class=&#34;math inline&#34;&gt;\(\max(f(a),f(b)-s_l+a\cdot p)\)&lt;/span&gt; 来更新 &lt;span class=&#34;math inline&#34;&gt;\(f(a+b)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;发现 &lt;span class=&#34;math inline&#34;&gt;\((a,b)\)&lt;/span&gt; 的贡献一定小于 &lt;span class=&#34;math inline&#34;&gt;\((a+1,b-1)\)&lt;/span&gt; 的贡献；具体地，发现 &lt;span class=&#34;math inline&#34;&gt;\(f(x+1)-f(x)\ge p\)&lt;/span&gt; 后就很显然了。采用双指针，优先移动 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;，就能把最短区间扫一遍。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;关于线段树维护函数&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;维护一个函数，形如 &lt;span class=&#34;math inline&#34;&gt;\(f_{[l,r]}(x)\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 区间上，&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的一个映射&lt;/p&gt;
&lt;p&gt;如果相邻区间的函数可以用某种方式合并，就可以用线段树来维护&lt;/p&gt;
&lt;p&gt;把树建在值域上，就可以在节点内把这段区间每个点对应的函数值存下来。一般来说是静态的，因为这是一个类前缀和的形式，没办法修改&lt;/p&gt;
&lt;p&gt;每个点的点值数组会在当前层被扫一遍，上一层被扫一遍，如果合并能够做到线性，总复杂度就是单 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;实际情形下函数本身可能很隐秘、很抽象，怎么优化到线性合并也不太好想&lt;/p&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;compounds模意义下问题&#34;&gt;* COmPoUNdS（模意义下问题）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P12389&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P12389&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定常数模数，维护模意义下的区间加、区间哈希。&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;线段树哈希是可以维护区间加的&lt;/strong&gt;，但是没办法维护区间取模&lt;/p&gt;
&lt;p&gt;类似 &lt;a href=&#34;/20250816/#e---subarray-sum-divisibility&#34;&gt;ABC419E&lt;/a&gt; 里面用到的，模意义下序列全等可以转化成差分全等，区间修改就可以简化成单点修改了&lt;/p&gt;
&lt;p&gt;额外判一下开头的元素（维护原数组或者是差分数组之和）是否相等就可以了&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;改进代码模意义下问题&#34;&gt;* 改进代码（模意义下问题）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4635&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4635&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定序列 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 和常数 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，维护:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改：模 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 意义下区间加；&lt;/li&gt;
&lt;li&gt;询问：区间中 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=l}^{r-1}[a_i&amp;gt;a_{i+1}]\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^5,p\le 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;询问也和模意义差分有关系，假如 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 为当前差分数组前缀和模 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的值（也就是原数），发现&lt;strong&gt;前一个数 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;\)&lt;/span&gt; 后一个数当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 加爆了&lt;/strong&gt;。维护原数组用来确定 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的初值。再维护区间内差分数组之和（不取模），&lt;strong&gt;在这个和里有多少个 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 就会爆多少次&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;黑白树很新的东西&#34;&gt;黑白树（很新的东西）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/problem/46907&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/problem/46907&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;以楼房重建为代表的-log2-一类前缀信息维护&#34;&gt;以楼房重建为代表的 &lt;span class=&#34;math inline&#34;&gt;\(\log^2\)&lt;/span&gt; 一类前缀信息维护&lt;/h3&gt;
&lt;p&gt;特点：pushup 时需要先获得一边的信息，在另一边进行线段树上二分，单次操作是 &lt;span class=&#34;math inline&#34;&gt;\(O(\log^2)\)&lt;/span&gt; 的&lt;/p&gt;
&lt;p&gt;本质是一类具有&lt;strong&gt;单调性&lt;/strong&gt;的前 / 后缀信息，&lt;strong&gt;区间对全局的贡献&lt;/strong&gt;和&lt;strong&gt;区间外的信息&lt;/strong&gt;有关，故不能直接维护对全局的贡献，只能维护区间内的答案。但由于两个子区间答案可以合并出大区间答案（通过线段树上二分得到需要的信息），所以只需要逐层向上合并就可以得到全局答案&lt;/p&gt;
&lt;p&gt;一个名字是『线段树维护前缀信息』，感觉不很精确。log 方线段树又是什么鬼名字？更多还是叫的楼房重建线段树吧&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;楼房重建&#34;&gt;楼房重建&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4198&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4198&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，维护 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单点修改；&lt;/li&gt;
&lt;li&gt;查询 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{a_i}i\)&lt;/span&gt; 的前缀最大值序列长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fractures 说当年（初一）是他力荐 gm 给我们拉这个题的。dashena！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线段树维护单调栈，或者说前缀最值，维护方式过于经典，使得『楼房重建』成为该 trick 称呼之一&lt;/li&gt;
&lt;li&gt;&lt;p&gt;考虑 pushup。保留左边整段区间，对于左区间序列末的元素 &lt;code&gt;l.rv&lt;/code&gt;，我们在右区间内找到第一个大于之的元素 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，从它开始的序列就是答案。&lt;/p&gt;
反证法易得 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 一定在右区间答案序列内：若 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 不在答案序列内，则右区间内存在一个 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt; 且位于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 之前的元素，那么 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 就不是第一个 &lt;code&gt;&amp;gt; l.rv&lt;/code&gt; 的元素，矛盾。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;故在右区间中二分能够接上去的区间长度，加起来即可。&lt;/p&gt;
&lt;p&gt;题目只要求总区间答案，故不需要查询。动态开点可能需要小心处理一下。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
struct &amp;#123;
    int l, r, u;
    double lv, rv, mv;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int tot;
#define lt t[p].l
#define rt t[p].r
int askt(int p, int l, int r, double v) &amp;#123;
    if (l == r)
        return t[p].u;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (lt &amp;amp;&amp;amp; t[p].mv &amp;gt; v)
        return t[p].u - t[lt].u + askt(lt, l, mid, v);
    return askt(rt, mid + 1, r, v);
&amp;#125;
void pushup(int p, int l, int r) &amp;#123;
    t[p].mv = t[lt].rv;
    if (lt &amp;amp;&amp;amp; rt) &amp;#123;
        t[p].lv = t[lt].lv;
        t[p].rv = std::max(t[lt].rv, t[rt].rv);
        if (t[lt].rv &amp;lt; t[rt].lv)
            t[p].u = t[lt].u + t[rt].u;
        else if (t[lt].rv &amp;gt;= t[rt].rv)
            t[p].u = t[lt].u;
        else &amp;#123;
            int mid = (l + r) &amp;gt;&amp;gt; 1;
            t[p].u = t[lt].u + askt(rt, mid + 1, r, t[lt].rv);
        &amp;#125;
    &amp;#125;
    else &amp;#123;
        t[p].u = t[lt + rt].u;
        t[p].lv = t[lt + rt].lv, t[p].rv = t[lt + rt].rv;
    &amp;#125;
    return;
&amp;#125;
void upd(int &amp;amp;p, int l, int r, int x, double v) &amp;#123;
    if (!p)
        p = ++tot;
    if (l == r) &amp;#123;
        t[p].lv = t[p].rv = v, t[p].u = 1;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, l, mid, x, v);
    else
        upd(rt, mid + 1, r, x, v);
    pushup(p, l, r);
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P4198_2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, rt = 0;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;double&amp;gt; a(n + 1);
    for (int x; m--; ) &amp;#123;
        double y;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        a[x] = y / x;
        upd(rt, 1, n, x, y / x);
        std::cout &amp;lt;&amp;lt; t[1].u &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;二叉搜索树&#34;&gt;二叉搜索树&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://pjudge.ac/problem/21889&#34; class=&#34;uri&#34;&gt;https://pjudge.ac/problem/21889&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个大小为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的树，树上每个元素是一个 BST，你需要维护 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次操作：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;对于树上的一条路径 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;，在经过的所有节点上的 BST 插入 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，保证任意时刻 BST 中无相同值&lt;/li&gt;
&lt;li&gt;在点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 查找 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，如果 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 存在则返回其到 BST 根的元素和，否则返回查找时最远走到的那个点，到 BST 根的元素和。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le 2\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考虑链上问题。差分，把更新 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 看作在差分数组 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 处插入，在 &lt;span class=&#34;math inline&#34;&gt;\(r+1\)&lt;/span&gt; 处删除，离线下来再从左到右扫一遍操作就能更新。&lt;/li&gt;
&lt;li&gt;考虑查询。&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 树上存在过的所有元素是已知的，考虑如何基于此获取 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 树上 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 时刻，&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的所有祖先。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于比 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 大的元素，考虑祖先 &lt;span class=&#34;math inline&#34;&gt;\(p_a\)&lt;/span&gt; 和非祖先 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的区别：&lt;/p&gt;
&lt;p&gt;根据 BST 的性质易得，对于最低的右侧祖先 &lt;span class=&#34;math inline&#34;&gt;\({p_a}_0\)&lt;/span&gt;，其是 &lt;span class=&#34;math inline&#34;&gt;\(\ge x\)&lt;/span&gt; 的最小的元素（加入时刻 &lt;span class=&#34;math inline&#34;&gt;\(t_a&amp;lt;t_0\)&lt;/span&gt;）；&lt;/p&gt;
同理可以找到 &lt;span class=&#34;math inline&#34;&gt;\({p_a}_0\)&lt;/span&gt; 右侧最低的祖先（其左侧的祖先显然也在 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 左侧），该祖先满足 &lt;span class=&#34;math inline&#34;&gt;\(t&amp;lt;t_a\)&lt;/span&gt;。从左右两边分别得到 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的所有祖先。容易证明该过程对于不在树上的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 也是正确的。&lt;/li&gt;
&lt;li&gt;具体地，需要能够求出 &lt;span class=&#34;math inline&#34;&gt;\(\ge x\)&lt;/span&gt; 的元素中，以 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 为起点的前缀最小值序列的区间和。线段树维护单调栈容易解决不带 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 限制的答案；再次利用性质就能满足限制。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于树的情况，把差分放到树上，线段树合并即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 2e5;
const int maxn = 2e7 + 5;
const int inf = 0x3f3f3f3f;
struct &amp;#123;
    int l, r, rv;
    long long u;
&amp;#125; t[maxn];
std::vector&amp;lt;int&amp;gt; tr;
#define lt t[p].l
#define rt t[p].r
int newnode(void) &amp;#123;
    static int tot = 0;
    if (tr.empty())
        return ++tot;
    auto p(tr.back());
    t[p].l = t[p].r = 0;
    tr.pop_back();
    return p;
&amp;#125;
long long askv(int p, int l, int r, int v) &amp;#123;
    if (l == r)
        return t[p].rv &amp;lt; v ? t[p].u : 0;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (v &amp;gt; t[lt].rv)
        return t[p].u - t[lt].u + askv(lt, l, mid, v);
    return askv(rt, mid + 1, r, v);
&amp;#125;
void pushup(int p, int l, int r) &amp;#123;
    t[p].rv = std::min(t[lt].rv, t[rt].rv);
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    t[p].u = t[lt].u + askv(rt, mid + 1, r, t[lt].rv);
    return;
&amp;#125;
void upd(int &amp;amp;p, int l, int r, int x, int v, int u) &amp;#123;
    if (!p)
        p = newnode();
    if (l == r) &amp;#123;
        t[p].rv = v, t[p].u = u;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, l, mid, x, v, u);
    else
        upd(rt, mid + 1, r, x, v, u);
    pushup(p, l, r);
    return;
&amp;#125;
void merge(int &amp;amp;p, int q, int l, int r) &amp;#123;
    if (!p || !q) &amp;#123;
        p += q;
        return;
    &amp;#125;
    if (l == r) &amp;#123;
        t[p].rv = std::min(t[p].rv, t[q].rv);
        t[p].u = std::max(t[p].u, t[q].u);
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    merge(t[p].l, t[q].l, l, mid), merge(t[p].r, t[q].r, mid + 1, r);
    pushup(p, l, r), tr.push_back(q);
    return;
&amp;#125;
int qv = inf;
long long ask(int p, int l, int r, int ql, int qr) &amp;#123;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr) &amp;#123;
        auto s(askv(p, l, r, qv));
        qv = std::min(qv, t[p].rv);
        return s;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    long long res = 0ll;
    if (ql &amp;lt;= mid)
        res = ask(lt, l, mid, ql, qr);
    if (qr &amp;gt; mid)
        res += ask(rt, mid + 1, r, ql, qr);
    return res;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;ex_problem4.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; top(n + 1), fa(n + 1), siz(n + 1), son(n + 1), dep(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int faa) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != faa) &amp;#123;
                fa[i] = x, dep[i] = dep[x] + 1;
                DFS(i, x), siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    DFS = [&amp;amp;](int x, int topp) &amp;#123;
        top[x] = topp;
        if (son[x])
            DFS(son[x], topp);
        for (auto i : g[x])
            if (i != fa[x] &amp;amp;&amp;amp; i != son[x])
                DFS(i, i);
        return;
    &amp;#125;;
    DFS(1, 1);
    auto getLCA = [&amp;amp;](int x, int y) &amp;#123;
        for (; top[x] != top[y]; x = fa[top[x]])
            if (dep[top[y]] &amp;gt; dep[top[x]])
                std::swap(x, y);
        return (dep[x] &amp;lt; dep[y] ? x : y);
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; d(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; u(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::tuple&amp;lt;int, int, int&amp;gt; &amp;gt; &amp;gt; q(n + 1);
    int cnt = 0;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        int op;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 0) &amp;#123;
            int x, v;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v;
            q[x].emplace_back(++cnt, i, v);
        &amp;#125; else &amp;#123;
            int x, y, v;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; v;
            int faa = getLCA(x, y);
            u[x].emplace_back(i, v), u[y].emplace_back(i, v);
            if (fa[faa])
                d[fa[faa]].emplace_back(v);
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; res(cnt + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; rt(2, std::vector&amp;lt;int&amp;gt; (n + 1));
    t[0].rv = inf;
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                merge(rt[0][x], rt[0][i], 1, lim);
                merge(rt[1][x], rt[1][i], 1, lim);
            &amp;#125;
        for (auto [t, v] : u[x]) &amp;#123;
            upd(rt[0][x], 1, lim, v, t, v);
            upd(rt[1][x], 1, lim, lim - v + 1, t, v);
        &amp;#125;
        for (auto v : d[x]) &amp;#123;
            upd(rt[0][x], 1, lim, v, inf, 0);
            upd(rt[1][x], 1, lim, lim - v + 1, inf, 0);
        &amp;#125;
        for (auto [id, t, v] : q[x]) &amp;#123;
            qv = t, res[id] = ask(rt[0][x], 1, lim, v, lim);
            qv = t, res[id] += ask(rt[1][x], 1, lim, lim - v + 1, lim);
            qv = t, res[id] -= ask(rt[0][x], 1, lim, v, v);
        &amp;#125;
    &amp;#125;;
    DFS(1, -1);
    for (int i = 1; i &amp;lt;= cnt; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;nastya-and-cbs&#34;&gt;Nastya and CBS&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1340F&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1340F&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的括号序列，由 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 种括号对（&lt;span class=&#34;math inline&#34;&gt;\(-i,i\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 种左、右括号）组成，你需要维护单点修改元素、区间查询是否为合法括号序列。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(1\le k\le n\le 10^5,q\le 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考虑不带修且允许 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 询问的情景，经典题，扫一遍，用栈维护即可；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(k=1\)&lt;/span&gt; 时是线段树经典题，可以类比这个经典题，从刻画合法的条件入手。&lt;/p&gt;
如果存在相邻且可以匹配的可以直接消掉，一直重复这样的操作，此时要么包含不能匹配的子串，如 &lt;code&gt;&amp;#123;[)&amp;#125;&lt;/code&gt;，要么是 &lt;code&gt;)]&amp;#125; (&amp;#123;[&amp;#123;&amp;#123;&lt;/code&gt; 的形式。&lt;/li&gt;
&lt;li&gt;考虑怎么 pushup，发现中间生成的一段 &lt;code&gt;([()])&lt;/code&gt; 必须完全匹配，消掉它们之后，大区间又变成 &lt;code&gt;)]&amp;#125; (&amp;#123;[&amp;#123;&amp;#123;&lt;/code&gt; 的形式。&lt;/li&gt;
&lt;li&gt;每次 pushup 要合并的区间很长，考虑怎么快速地做『消除相邻匹配括号』这一步。容易想到记录一段括号（例：&lt;code&gt;([&amp;#123;&lt;/code&gt;）及其对应反括号（例：&lt;code&gt;&amp;#125;])&lt;/code&gt;）的哈希值，check 是否相等，然后就可以不管它们了，并不是真的要删去。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线段树不能维护每个前后缀的哈希值，但需要的只是在&lt;strong&gt;删除连续匹配括号后&lt;/strong&gt;长度为 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 的哈希值，可以线段树上二分。&lt;/p&gt;
这个过程有点困难，需要在询问的同时匹配、消除；但发现所谓消除就是对位相减，注意一下什么时候移位，还是好写的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;询问看似不太可做，因为中途的答案不是线段树的节点；如果把询问看成一次修改，就可以用类似可持久化的方式实现。&lt;/p&gt;
&lt;p&gt;由于并不是真的要可持久化，询问新建的点可以重复利用。如果不重复利用，每次询问最多新建 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 个点，空间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(q\log n)\)&lt;/span&gt;，在 CF 上有点卡，也是能过的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;p&gt;Hint：有卡 998244353 的 Hack，故可以用 1e9 + 7 当模数；WA on 7 是正确性有巨大问题，WA on 8 可能是 long long 没开完 / 数组开小了 / 哈希方向有问题 / 线段树上二分写挂了（通常是消括号消错了）。前人踩坑后人嘲笑。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
const int base = 1e5 + 3;
const int maxn = 7e5 + 5;
struct Node &amp;#123;
    bool flag;
    long long hr0, hl1;
    int l, r, lc, rc, ll, rl;
    Node&amp;amp; operator= (const Node &amp;amp;q) &amp;#123;
        flag = q.flag, hr0 = q.hr0, hl1 = q.hl1;
        l = q.l, r = q.r, ll = q.ll, rl = q.rl;
        return *this;
    &amp;#125;
    Node operator+ (const Node &amp;amp;q) const;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int tot;
int a[maxn];
long long bpow[maxn], inv[maxn];
long long askhl1(const Node &amp;amp;p, int k) &amp;#123;
    if (k == 0)
        return 0ll;
    if (k &amp;gt; p.ll)
        return -1ll;
    if (p.ll == k)
        return p.hl1;
    int ll = t[p.lc].ll, rl = t[p.lc].rl;
    if (ll &amp;gt;= k)
        return askhl1(t[p.lc], k);
    k -= ll, k += rl;
    auto hl1 = askhl1(t[p.rc], k);
    hl1 = ((hl1 + mod - t[p.lc].hr0) * inv[rl] % mod * bpow[ll] % mod + t[p.lc].hl1) % mod;
    return hl1;
&amp;#125;
long long askhr0(const Node &amp;amp;p, int k) &amp;#123;
    if (k == 0)
        return 0ll;
    if (k &amp;gt; p.rl)
        return -1ll;
    if (p.rl == k)
        return p.hr0;
    int rl = t[p.rc].rl, ll = t[p.rc].ll;
    if (rl &amp;gt;= k)
        return askhr0(t[p.rc], k);
    k -= rl, k += ll;
    auto hr0 = askhr0(t[p.lc], k);
    hr0 = ((hr0 + mod - t[p.rc].hl1) * inv[ll] % mod * bpow[rl] % mod + t[p.rc].hr0) % mod;
    return hr0;
&amp;#125;
Node Node::operator+ (const Node &amp;amp;q) const  &amp;#123;
    Node res;
    res.l = l, res.r = q.r;
    if (flag || q.flag)
        res.flag = 1;
    else &amp;#123;
        if (rl == q.ll) &amp;#123;
            if (hr0 == q.hl1) &amp;#123;
                res.flag = 0;
                res.ll = ll, res.rl = q.rl;
                res.hl1 = hl1, res.hr0 = q.hr0;
            &amp;#125;
            else
                res.flag = 1;
        &amp;#125;
        else if (rl &amp;lt; q.ll) &amp;#123;
            auto qhl1 = askhl1(q, rl);
            if (hr0 == qhl1) &amp;#123;
                res.flag = 0;
                res.ll = ll + q.ll - rl, res.rl = q.rl;
                res.hl1 = ((q.hl1 + mod - qhl1) % mod * inv[rl] % mod * bpow[ll] % mod + hl1) % mod;
                res.hr0 = q.hr0;
            &amp;#125;
            else
                res.flag = 1;
        &amp;#125;
        else &amp;#123;
            auto phr0 = askhr0(*this, q.ll);
            if (phr0 == q.hl1) &amp;#123;
                res.flag = 0;
                res.ll = ll, res.rl = rl - q.ll + q.rl;
                res.hl1 = hl1;
                res.hr0 = ((hr0 + mod - phr0) % mod * inv[q.ll] % mod * bpow[q.rl] % mod + q.hr0) % mod;
            &amp;#125;
            else
                res.flag = 1;
        &amp;#125;
    &amp;#125;
    return res;
&amp;#125;
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    p = ++tot;
    if (l == r) &amp;#123;
        t[p].l = t[p].r = l;
        if (a[l] &amp;lt; 0)
            t[p].ll = 1, t[p].hl1 = -a[l];
        else
            t[p].rl = 1, t[p].hr0 = a[l];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(t[p].lc, l, mid), bld(t[p].rc, mid + 1, r);
    t[p] = t[t[p].lc] + t[t[p].rc];
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        if (v &amp;lt; 0) &amp;#123;
            t[p].rl = 0, t[p].hr0 = 0ll;
            t[p].ll = 1, t[p].hl1 = -v;
        &amp;#125;
        else &amp;#123;
            t[p].ll = 0, t[p].hl1 = 0ll;
            t[p].rl = 1, t[p].hr0 = v;
        &amp;#125;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(t[p].lc, x, v);
    else
        add(t[p].rc, x, v);
    t[p] = t[t[p].lc] + t[t[p].rc];
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return p;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(t[p].lc, l, r);
    if (l &amp;gt; mid)
        return ask(t[p].rc, l, r);
    int q = ++tot;
    t[q].lc = ask(t[p].lc, l, r);
    t[q].rc = ask(t[p].rc, l, r);
    t[q] = t[t[q].lc] + t[t[q].rc];
    return q;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, k, rt = 0;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    bpow[0] = inv[0] = 1ll;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[1] = qkp(base, mod - 2);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        bpow[i] = bpow[i - 1] * base % mod;
        if (i &amp;gt;= 2)
            inv[i] = inv[i - 1] * inv[1] % mod;
    &amp;#125;
    bld(rt, 1, n);
    int q;
    std::cin &amp;gt;&amp;gt; q;
    for (int op; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            int x, v;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v;
            add(1, x, v);
        &amp;#125;
        else &amp;#123;
            int l, r;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
            if ((r - l + 1) &amp;amp; 1)
                std::cout &amp;lt;&amp;lt; &amp;quot;No&amp;quot; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            else &amp;#123;
                auto s(ask(1, l, r));
                std::cout &amp;lt;&amp;lt; ((!t[s].flag &amp;amp;&amp;amp; !t[s].ll &amp;amp;&amp;amp; !t[s].rl) ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            &amp;#125;
        &amp;#125;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;hungry-cow-p&#34;&gt;# Hungry Cow P&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9130&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9130&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;牛半仙的妹子序列&#34;&gt;# 牛半仙的妹子序列&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/problem/29550&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/problem/29550&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;organizing-a-race&#34;&gt;# Organizing a Race&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF671E&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF671E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个题不太应该放在这里的，因为存在只用一只 log 的纯线段树上二分做法，用楼房重建显得有点唐了&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;转盘&#34;&gt;# 转盘&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4425&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4425&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;前进四楼房重建-ver&#34;&gt;# 前进四（楼房重建 ver）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://uoj.ac/problem/515&#34; class=&#34;uri&#34;&gt;https://uoj.ac/problem/515&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另见 &lt;a href=&#34;#-前进四segment-tree-beats-ver&#34;&gt;segment tree beats ver&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;可持久化线段树&#34;&gt;可持久化线段树&lt;/h3&gt;
&lt;h4 id=&#34;card-game&#34;&gt;# Card Game&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://qoj.ac/problem/8240&#34; class=&#34;uri&#34;&gt;https://qoj.ac/problem/8240&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;历史信息&#34;&gt;历史信息&lt;/h3&gt;
&lt;h4 id=&#34;比赛&#34;&gt;# 比赛&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P8868&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P8868&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;v&#34;&gt;# V&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://uoj.ac/problem/164&#34; class=&#34;uri&#34;&gt;https://uoj.ac/problem/164&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;cartesian-tree&#34;&gt;# Cartesian Tree&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1290E&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1290E&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;rprmq1&#34;&gt;# rprmq1&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6109&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6109&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;rpfrdtzls&#34;&gt;# rpfrdtzls&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9057&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9057&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;test_90&#34;&gt;# TEST_90&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9990&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9990&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;线段树合并&#34;&gt;线段树合并&lt;/h3&gt;
&lt;p&gt;树上的线段树合并都很熟悉了，利用了线段树合并是线性的，以及 dsu on tree&lt;/p&gt;
&lt;p&gt;不如说绝大多数线段树合并都有树上背景，因为自带合并顺序和复杂度保证&lt;/p&gt;
&lt;p&gt;Tip：树上合并的背景下，线段树合并的表现会比主席树优秀很多，因为前者跑不满&lt;/p&gt;
&lt;p&gt;不在树上的问题，题目可能会通过各种方式保证复杂度，比如保证每个点只会被合并一次之类&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;迁移计划-migration-plan&#34;&gt;# 迁移计划 / Migration Plan&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11993&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11993&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;永无乡&#34;&gt;# 永无乡&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3224&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3224&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;语言&#34;&gt;# 语言&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5327&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5327&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;梦幻布丁&#34;&gt;# 梦幻布丁&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3201&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3201&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;还有两个比较屎的 P7563 和 P7963&lt;/p&gt;
&lt;h3 id=&#34;扫描线&#34;&gt;扫描线&lt;/h3&gt;
&lt;p&gt;离线，按照下标排序，扫一遍处理询问，就可以利用『所有更靠前的下标都以被计算过』来处理问题&lt;/p&gt;
&lt;p&gt;不只局限于区间询问，单点的可能反而更难一点，需要发现和下标大小有关的性质&lt;/p&gt;
&lt;h4 id=&#34;等差子序列&#34;&gt;等差子序列&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2757&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2757&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的排列，问是否能找到 &lt;span class=&#34;math inline&#34;&gt;\(len\ge 3\)&lt;/span&gt; 的子序列，使得其是等差的。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 5\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据单调性，可以简化为 &lt;span class=&#34;math inline&#34;&gt;\(len=3\)&lt;/span&gt; 时的答案&lt;/p&gt;
&lt;p&gt;也就是对于中项 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，能不能找到 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;lt;j&amp;lt;k\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(a_j-a_i=a_k-a_j\)&lt;/span&gt;。从下标出发，差值是不好维护的；注意到是排列，可以从值出发，转化成是否存在一个 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(a_j-d\)&lt;/span&gt; 在之前出现，&lt;span class=&#34;math inline&#34;&gt;\(a_j+d\)&lt;/span&gt; 在之后出现。&lt;/p&gt;
&lt;p&gt;利用下标『之前』和『之后』的限制，做扫描线，查看是否存在 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 使 &lt;span class=&#34;math inline&#34;&gt;\(a_j-d\)&lt;/span&gt; 出现过但是 &lt;span class=&#34;math inline&#34;&gt;\(a_j+d\)&lt;/span&gt; 没有出现过；还是因为是排列，数量只会为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，如果非法说明 &lt;span class=&#34;math inline&#34;&gt;\(a_j-d\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_j+d\)&lt;/span&gt; 都是 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 或者都是 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，发现是关于 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 的回文，故权值线段树维护哈希，如果 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 两侧全部回文，说明 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 不是合法中项。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
namespace fastIO &amp;#123;
const int LEN = (1 &amp;lt;&amp;lt; 20);
#ifdef ONLINE_JUDGE
inline int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf)
            return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
inline bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF)
            return 0;
        if (ch == &amp;#39;-&amp;#39;)
            f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f)
        x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0) &amp;#123;
        putchar(&amp;#39;-&amp;#39;);
        x = -x;
    &amp;#125;
    if (x &amp;gt;= 10)
        print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x);
    putchar(ch);
    return;
&amp;#125;
&amp;#125; // namespace fastIO
namespace XSC062 &amp;#123;
using namespace fastIO;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
using sc = unsigned long long;
const int p = 13331; // 0103 ¿É°®µÎÄó 
const int lim = 5e5;
const int maxn = 5e5 + 5;
struct _ &amp;#123;
    int l, r;
    sc lh, rh;
&amp;#125;;
int T, n;
int a[maxn];
sc base[maxn];
_ t[maxn &amp;lt;&amp;lt; 2];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
void pushup(int p) &amp;#123;
    int ll = t[lt].r - t[lt].l + 1;
    int rl = t[rt].r - t[rt].l + 1;
    t[p].lh = t[lt].lh * base[rl] + t[rt].lh;
    t[p].rh = t[rt].rh * base[ll] + t[lt].rh;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].lh = t[p].rh = 0;
    t[p].l = l, t[p].r = r;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid);
    bld(rt, mid + 1, r);
    return;
&amp;#125;
void upd(int p, int x, int v) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        t[p].lh = t[p].rh = v;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, x, v);
    else upd(rt, x, v);
    pushup(p);
    return;
&amp;#125;
sc qryl(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].lh;
    sc ans = 0;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        ans = qryl(lt, l, r);
    if (r &amp;gt; mid) &amp;#123;
        ans *= base[min(r, t[p].r) - mid];
        ans += qryl(rt, l, r);
    &amp;#125;
    return ans;
&amp;#125;
sc qryr(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].rh;
    sc ans = 0;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;gt; mid)
        ans = qryr(rt, l, r);
    if (l &amp;lt;= mid) &amp;#123;
        ans *= base[mid - max(l, t[p].l) + 1];
        ans += qryr(lt, l, r);
    &amp;#125;
    return ans;
&amp;#125;
int main() &amp;#123;
    read(T);
    base[0] = 1;
    for (int i = 1; i &amp;lt;= lim; ++i)
        base[i] = base[i - 1] * p;
    while (T--) &amp;#123;
        read(n);
        bld(1, 1, n);
        for (int i = 1; i &amp;lt;= n; ++i)
            read(a[i]);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int len = min(n - a[i], a[i] - 1);
            if (i &amp;gt; 1) &amp;#123;
                upd(1, a[i - 1], 1);
            &amp;#125;
            if (len == 0)
                continue;
            int l = a[i] - len;
            int r = a[i] + len;
            if (qryl(1, l, a[i] - 1) !=
                qryr(1, a[i] + 1, r)) &amp;#123;
                puts(&amp;quot;Y&amp;quot;);
                goto isSol;
            &amp;#125;
        &amp;#125;
        puts(&amp;quot;N&amp;quot;);
        isSol: ;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
int main() &amp;#123;
    XSC062::main();
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&#34;小奇的糖果&#34;&gt;小奇的糖果&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://hydro.ac/p/bzoj-P4548&#34; class=&#34;uri&#34;&gt;https://hydro.ac/p/bzoj-P4548&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个有颜色（&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 种）的点在平面上，在平面上取一条水平的线段，可以选择线段上方的所有点，也可以选择下方的所有点。找出一条线段和选取的方向，使得在选取的点不包含所有颜色的前提下，最大化选到点的数量。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(N,M\le 10^6,|x|,|y|\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先离散化 + 按 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 排序降一维，贪心地枚举某种颜色 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 不选。考虑线段在平面最底部时的答案，取出所有颜色为 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 的点的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 坐标，只能选择相邻的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 之间的所有点。枚举每一对相邻的点计算答案。把线段上移，如果碰到了一个颜色为 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 的点，就说明这个点不再参与限制，删去即可，该点原前驱和后继围出来的区间就能够更新答案。用链表 / 单调栈就能很快地维护。&lt;/p&gt;
&lt;p&gt;先枚举颜色再跑扫描线是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2\log n)\)&lt;/span&gt; 的，考虑优化。注意到数据结构里存在当前颜色没有影响，因为一定不在询问区间内。整体做扫描线，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e5 + 5;
struct _ &amp;#123;
    int x, y, c;
    bool operator&amp;lt; (const _ &amp;amp;q) const &amp;#123;
        return y &amp;lt; q.y;
    &amp;#125;
&amp;#125;;
_ a[maxn];
int s[maxn], t[maxn];
int ls[maxn], rs[maxn];
int cp[maxn], cn[maxn];
int pre[maxn], nex[maxn];
std::vector&amp;lt;int&amp;gt; g[maxn];
int div[maxn], Bit[maxn];
int T, n, k, tot, cnt, now, res;
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int lowbit(int x) &amp;#123; return x &amp;amp; -x; &amp;#125;
void add(int x, int v) &amp;#123;
    for (; x &amp;lt;= n; x += lowbit(x)) Bit[x] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0;
    for (; x; x -= lowbit(x)) res += Bit[x];
    return res;
&amp;#125;
int ask(int l, int r) &amp;#123;
    if (l &amp;gt; r) return 0;
    return ask(r) - ask(l - 1);
&amp;#125;
int main() &amp;#123;
//  freopen(&amp;quot;1.in&amp;quot;, &amp;quot;r&amp;quot;, stdin); 
    read(T);
    while (T--) &amp;#123;
        read(n), read(k), now = res = 0;
        for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
            s[i] = ++now, t[i] = ++now;
            div[s[i]] = 0, div[t[i]] = n + 1;
            nex[s[i]] = t[i], pre[t[i]] = s[i];
            pre[s[i]] = nex[t[i]] = 0;
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            read(a[i].x), read(a[i].y), read(a[i].c);
            ls[i] = a[i].x, rs[i] = a[i].y;
        &amp;#125;
        std::sort(a + 1, a + n + 1, [&amp;amp;](_ x, _ y) &amp;#123; return x.x &amp;lt; y.x; &amp;#125;);
        std::sort(ls + 1, ls + n + 1);
        std::sort(rs + 1, rs + n + 1);
        tot = std::unique(ls + 1, ls + n + 1) - ls - 1;
        cnt = std::unique(rs + 1, rs + n + 1) - rs - 1;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            a[i].x = std::lower_bound(ls + 1, ls + tot + 1, a[i].x) - ls;
            a[i].y = std::lower_bound(rs + 1, rs + cnt + 1, a[i].y) - rs;
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            div[++now] = a[i].x;
            add(a[i].x, 1), g[a[i].y].push_back(now);
            pre[now] = pre[t[a[i].c]], nex[pre[t[a[i].c]]] = now;
            pre[t[a[i].c]] = now, nex[now] = t[a[i].c];
        &amp;#125;
        memcpy(cp, pre, sizeof (cp));
        memcpy(cn, nex, sizeof (cn));
        for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
            for (int j = s[i]; j != t[i]; j = nex[j])
                res = max(res, ask(div[j] + 1, div[nex[j]] - 1));
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (auto j : g[i]) add(div[j], -1);
            for (auto j : g[i]) &amp;#123;
                res = max(res, ask(div[pre[j]] + 1, div[nex[j]] - 1));
                nex[pre[j]] = nex[j], pre[nex[j]] = pre[j];
            &amp;#125;
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) add(a[i].x, 1);
        for (int i = n; i; --i) &amp;#123;
            for (auto j : g[i]) add(div[j], -1);
            for (auto j : g[i]) &amp;#123;
                res = max(res, ask(div[cp[j]] + 1, div[cn[j]] - 1));
                cn[cp[j]] = cn[j], cp[cn[j]] = cp[j];
            &amp;#125;
        &amp;#125;
        print(res, &amp;#39;\n&amp;#39;);
        for (int i = 1; i &amp;lt;= n; ++i)
            g[i].clear(), g[i].shrink_to_fit();
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;rmscne&#34;&gt;rmscne&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7907&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7907&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的序列，&lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次询问 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 中的最短子区间 &lt;span class=&#34;math inline&#34;&gt;\([l&amp;#39;,r&amp;#39;]\)&lt;/span&gt;，使得其包含 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 中出现的全部值。输出长度即可。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q,V\le 2\times 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;区间里面找子区间也是扫描线经典问题。&lt;/p&gt;
&lt;p&gt;区间种类数会有几种思路：集合哈希、前驱后继、莫队之类。PS：这个题用 ODT 可以拿到最优解&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(i=1\sim n\)&lt;/span&gt;，依次考虑 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 作为右端点的情况。线段树维护每个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 作为左端点时的 &lt;span class=&#34;math inline&#34;&gt;\(i-r_j\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\([j, r_j]\)&lt;/span&gt; 是与 &lt;span class=&#34;math inline&#34;&gt;\([j,i]\)&lt;/span&gt; 种类相同的最小区间。&lt;/p&gt;
&lt;p&gt;询问的时候，只需要找到最大的 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\([j, r]\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 种类相同，求 &lt;span class=&#34;math inline&#34;&gt;\([l, j&amp;#39;]\)&lt;/span&gt; 的区间和即可。找 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt; 可以记录前驱后继，初始每个 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 对应的 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt; 就是自己。若加入了一个与 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 相同的新元素，那么 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 就不再有贡献，此时 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt; 就会继承 &lt;span class=&#34;math inline&#34;&gt;\(l+1\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt;，这个过程用并查集即可简单维护。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 2e6;
const int maxn = 2e6 + 5;
const int maxm = 5e7 + 5;
const int inf = 0x3f3f3f3f;
struct &amp;#123; int l, r, u, d; &amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int tot;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void pushdown(int p) &amp;#123;
    if (~t[p].d) &amp;#123;
        t[lt].d = t[rt].d = t[p].d;
        t[lt].u = t[p].d - t[lt].r + 1;
        t[rt].u = t[p].d - t[rt].r + 1;
        t[p].d = -1;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r, t[p].d = -1;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void upd(int p, int l, int r, int v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d = v, t[p].u = v - t[p].r + 1;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        upd(lt, l, r, v);
    if (r &amp;gt; mid)
        upd(rt, l, r, v);
    t[p].u = std::min(t[lt].u, t[rt].u);
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1, res = inf;
    if (l &amp;lt;= mid)
        res = ask(lt, l, r);
    if (r &amp;gt; mid)
        res = std::min(res, ask(rt, l, r));
    return res;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, q;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), la(lim + 1), pre(n + 1), f(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        pre[i] = la[a[i]], la[a[i]] = i, f[i] = i;
    &amp;#125;
    std::cin &amp;gt;&amp;gt; q;
    std::vector&amp;lt;int&amp;gt; res(q + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; t(n + 1);
    for (int i = 1, l, r; i &amp;lt;= q; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        t[r].emplace_back(l, i);
    &amp;#125;
    bld(1, 1, n);
    std::function&amp;lt;int(int)&amp;gt; find = [&amp;amp;](int x) &amp;#123;
        return x == f[x] ? x : f[x] = find(f[x]);
    &amp;#125;;
    auto merge = [&amp;amp;](int x, int y) &amp;#123;
        x = find(x), y = find(y);
        f[std::min(x, y)] = std::max(x, y);
        return;
    &amp;#125;;
    for (int r = 1; r &amp;lt;= n; ++r) &amp;#123;
        if (pre[r])
            merge(pre[r], pre[r] + 1);
        upd(1, pre[r] + 1, r, r);
        for (auto [l, i] : t[r])
            res[i] = ask(1, l, find(l));
    &amp;#125;
    for (int i = 1; i &amp;lt;= q; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;颜色&#34;&gt;# 颜色&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4065&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4065&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个元素，每个元素有一个颜色。选择若干颜色（不能全选或全不选），问有多少种选取方案使得拥有这些颜色的点是一段连续的区间。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 3\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;势能线段树&#34;&gt;势能线段树&lt;/h3&gt;
&lt;h4 id=&#34;市场&#34;&gt;# 市场&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/6029&#34; class=&#34;uri&#34;&gt;https://loj.ac/p/6029&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;segment-tree-beats&#34;&gt;# Segment Tree Beats!&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;维护区间取 min，区间求和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pdf P57&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;segment-tree-beats-plus&#34;&gt;# Segment Tree Beats! Plus&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;维护区间加，区间取 min，区间求和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pdf P60&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;最假女选手&#34;&gt;# 最假女选手&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/6565&#34; class=&#34;uri&#34;&gt;https://loj.ac/p/6565&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;mzl-loves-segment-tree&#34;&gt;# Mzl loves segment tree&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/problem/10203&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/problem/10203&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pdf P66&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;ctsn-loves-segment-tree&#34;&gt;# CTSN loves segment tree&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/U180387&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/U180387&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;前进四segment-tree-beats-ver&#34;&gt;# 前进四（segment tree beats ver）&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://uoj.ac/problem/515&#34; class=&#34;uri&#34;&gt;https://uoj.ac/problem/515&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另见 &lt;a href=&#34;#-前进四楼房重建-ver&#34;&gt;楼房重建 ver&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;基础数据结构练习题&#34;&gt;# 基础数据结构练习题&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://uoj.ac/problem/228&#34; class=&#34;uri&#34;&gt;https://uoj.ac/problem/228&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;线段树-3&#34;&gt;# 线段树 3&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6242&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6242&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;赛格蒙特彼茨&#34;&gt;# 赛格蒙特彼茨&lt;/h4&gt;
&lt;p&gt;pdf P70&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;堕天作战-test_98&#34;&gt;# 堕天作战 TEST_98&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9069&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9069&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;线段树分治&#34;&gt;线段树分治&lt;/h3&gt;
&lt;h4 id=&#34;八纵八横&#34;&gt;# 八纵八横&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3733&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3733&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;笛卡尔树&#34;&gt;笛卡尔树&lt;/h2&gt;
&lt;p&gt;一些思考方式和 trick 吧&lt;/p&gt;
&lt;h3 id=&#34;由乃救爷爷&#34;&gt;* 由乃救爷爷&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3793&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3793&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;尽可能快地维护随机序列区间最值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随机序列笛卡尔树期望深度是 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;。就可以做了。&lt;/p&gt;
&lt;p&gt;来自 &lt;a href=&#34;https://www.luogu.com/article/hj9ci08q&#34;&gt;UnyieldingTrilobite 的文章&lt;/a&gt;：同样可以用悬线！&lt;a href=&#34;/20231117/#随机序列悬线结合分块&#34;&gt;悬线 + 分块&lt;/a&gt; 就可以做了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;情景剧最值的性质维护方式的取舍&#34;&gt;* 情景剧（最值的性质，维护方式的取舍）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4273/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4273/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的序列 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，找到一个区间，使得 区间长度 &lt;span class=&#34;math inline&#34;&gt;\(\times\)&lt;/span&gt; 区间最大值 &lt;span class=&#34;math inline&#34;&gt;\(\times\)&lt;/span&gt; 区间最小值 最大。输出最大值。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6,V\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;容易想到建笛卡尔树。这里的 最大值 和 最小值 地位相等吗？为什么？&lt;/li&gt;
&lt;li&gt;如果我们是钦定最大值，再去最大化『最小值 &lt;span class=&#34;math inline&#34;&gt;\(\times\)&lt;/span&gt; 区间长』，好像没办法做，因为这个最大贡献没什么性质&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但如果钦定最小值，能取到的最长区间就是在小根笛卡尔树上的管辖区间，显然区间越长取到的最大值也越大，直接取这里的最大值即可&lt;/p&gt;
所以最大值和最小值地位不等是因为，区间长和最大值大小是正相关的，所以只需要最大化区间长，最大值也就最大化了&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所以在小根笛卡尔树上维护区间最大值即可&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;小蓝的好友&#34;&gt;# 小蓝的好友&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2611&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2611&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;星白-by-ttpandas笛卡尔树-dsu-on-tree&#34;&gt;星白 by TTpandaS（笛卡尔树 + dsu on tree）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6517/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6517/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的排列 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，回答 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 个询问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，是否存在 &lt;span class=&#34;math inline&#34;&gt;\(l\le x&amp;lt;y\le r\)&lt;/span&gt;，使得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_x&amp;lt;a_y\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(a_x\)&lt;/span&gt; 不为 &lt;span class=&#34;math inline&#34;&gt;\([x,y]\)&lt;/span&gt; 中最小值；&lt;/li&gt;
&lt;li&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\([x, y]\)&lt;/span&gt; 中最小值，则 &lt;span class=&#34;math inline&#34;&gt;\(a_i\mid (a_x\cdot a_y)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 3\times 10^5,q\le10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;容易想到对于 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 反过来找 &lt;span class=&#34;math inline&#34;&gt;\([x,y]\)&lt;/span&gt;。如果建立小根笛卡尔树，在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的左边找 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;、右边找 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个自然的想法是对于左侧的每个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，维护最近的合法 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;；或是对于右侧的每个 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;，维护最近的合法 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/p&gt;
做一个 DSU on Tree，哪边区间短就维护哪边，是单 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要解决点内预处理，以 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为例，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 和当前点 &lt;span class=&#34;math inline&#34;&gt;\((p,l,r)\)&lt;/span&gt;，需要查询 &lt;span class=&#34;math inline&#34;&gt;\((p, r]\)&lt;/span&gt; 中最小的 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(a_y\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {a_p}{\gcd(a_x,a_p)}\)&lt;/span&gt; 的倍数。离线下来扫描线，&lt;del&gt;开 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 棵线段树&lt;/del&gt;，跑 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 次树状数组，用 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 更新所有 &lt;span class=&#34;math inline&#34;&gt;\(a_y\)&lt;/span&gt; 因数在 &lt;span class=&#34;math inline&#34;&gt;\(a_y\)&lt;/span&gt; 处的 min / max，可以在两个 log 内获得支配对类似物。&lt;/p&gt;
不是很理解为什么题目要再加一个偏序限制，除了增加代码量和用时外似乎并没有什么作用？&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询时直接 rmq（这里唐了写了 st 表，实际上只需要前后缀）即可。整体复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2 n)\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int LEN = (1 &amp;lt;&amp;lt; 20);
#ifdef ONLINE_JUDGE
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    read(n);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; mul(n + 1);
    std::vector&amp;lt;int&amp;gt; a(n + 1), l(n + 1), r(n + 1), pos(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]), pos[a[i]] = i;
        for (l[i] = i; l[i] != 1 &amp;amp;&amp;amp; a[i] &amp;lt; a[l[i] - 1]; l[i] = l[l[i] - 1]);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = i; j &amp;lt;= n; j += i)
            mul[i].push_back(pos[j]);
        std::sort(mul[i].begin(), mul[i].end());
    &amp;#125;
    for (int i = n; i; --i)
        for (r[i] = i; r[i] != n &amp;amp;&amp;amp; a[i] &amp;lt; a[r[i] + 1]; r[i] = r[r[i] + 1]);
    struct query &amp;#123; int id, l, r; &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;query&amp;gt; &amp;gt; ql(n + 1), qr(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        if (i - l[i] &amp;lt; r[i] - i)
            for (int j = l[i]; j &amp;lt; i; ++j)
                qr[a[i] / std::__gcd(a[i], a[j])].push_back(&amp;#123; j, i + 1, r[i] &amp;#125;);
        else
            for (int j = i + 1; j &amp;lt;= r[i]; ++j)
                ql[a[i] / std::__gcd(a[i], a[j])].push_back(&amp;#123; j, l[i], i - 1 &amp;#125;);
    std::vector&amp;lt;int&amp;gt; u(n + 1), rt(n + 1), bit(n + 1);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] = v;
        return;
    &amp;#125;;
    std::function&amp;lt;int(int)&amp;gt; ask = [&amp;amp;](int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res = std::max(res, bit[x]);
        return res;
    &amp;#125;;
    for (int fac = 1; fac &amp;lt;= n; ++fac) &amp;#123;
        std::sort(ql[fac].begin(), ql[fac].end(), [&amp;amp;](query x, query y) &amp;#123; return x.r &amp;lt; y.r; &amp;#125;);
        auto i = mul[fac].begin();
        for (auto [id, l, r] : ql[fac]) &amp;#123;
            for (; i != mul[fac].end() &amp;amp;&amp;amp; *i &amp;lt;= r; ++i)
                add(a[*i], *i);
            auto mx(ask(a[id]));
            if (mx &amp;gt;= l)
                u[id] = std::max(u[id], mx);
        &amp;#125;
        for (auto i : mul[fac])
            add(a[i], 0);
    &amp;#125;
    bit.assign(n + 1, 0x3f3f3f3f);
    ask = [&amp;amp;](int x) &amp;#123;
        int res = 0x3f3f3f3f;
        for (; x; x -= lowbit(x))
            res = std::min(res, bit[x]);
        return res;
    &amp;#125;;
    for (int fac = 1; fac &amp;lt;= n; ++fac) &amp;#123;
        std::sort(qr[fac].begin(), qr[fac].end(), [&amp;amp;](query x, query y) &amp;#123; return x.l &amp;gt; y.l; &amp;#125;);
        std::reverse(mul[fac].begin(), mul[fac].end());
        auto i = mul[fac].begin();
        for (auto [id, l, r] : qr[fac]) &amp;#123;
            for (; i != mul[fac].end() &amp;amp;&amp;amp; *i &amp;gt;= l; ++i)
                add(n - a[*i] + 1, *i);
            auto mn(ask(n - a[id] + 1));
            if (mn &amp;lt;= r)
                u[mn] = std::max(u[mn], id);
        &amp;#125;
        for (auto i : mul[fac])
            add(n - a[i] + 1, 0x3f3f3f3f);
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; st(20, std::vector&amp;lt;int&amp;gt; (n + 1));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        // if (u[i] != 0)
        //     printf(&amp;quot;%d %d\n&amp;quot;, u[i], i);
        st[0][i] = u[i];
    &amp;#125;
    for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
        for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
            st[j][i] = std::max(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
    auto askmx = [&amp;amp;](int l, int r) &amp;#123;
        int k = std::__lg(r - l + 1);
        return std::max(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
    &amp;#125;;
    int q;
    read(q);
    for (int l, r; q--; ) &amp;#123;
        read(l), read(r);
        std::cout &amp;lt;&amp;lt; (askmx(l, r) &amp;gt;= l ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;periodni&#34;&gt;# PERIODNI&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6453&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6453&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cdq-分治&#34;&gt;CDQ 分治&lt;/h2&gt;
&lt;h3 id=&#34;coloring-nodes偏序很隐秘&#34;&gt;# Coloring Nodes（偏序很隐秘）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P12423&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P12423&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;字典树&#34;&gt;字典树&lt;/h2&gt;
&lt;p&gt;字典树作为 log 数据结构的时候，等价权值线段树，而且支持合并、分裂（权值线段树 also OK，强调一下而已）&lt;/p&gt;
&lt;p&gt;有些情景 Trie 写起来会比权值线段树舒服一些，比如值域操作、二进制操作之类&lt;/p&gt;
&lt;h3 id=&#34;异或粽子&#34;&gt;# 异或粽子&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5283&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5283&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;friends&#34;&gt;# Friends&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF241B&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF241B&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="线段树" />
        <updated>2025-08-19T01:44:25.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250818/</id>
        <title>学习笔记 平衡树</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250818/"/>
        <content type="html">&lt;p&gt;线段树 plus&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;概览&#34;&gt;概览&lt;/h2&gt;
&lt;p&gt;定义：BST，且对于任意点，其左右子树树高差不超过 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，这样所有 &lt;span class=&#34;math inline&#34;&gt;\(O(h)\)&lt;/span&gt; 复杂度的 BST 操作都能在 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 内解决。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;维护值：&lt;code&gt;__gnu_pbds::tree&amp;lt;&amp;gt;&lt;/code&gt; / 权值线段树&lt;/p&gt;
&lt;p&gt;需要意识到线段树就是 leafy 的平衡树，且是静态的，不支持对树结构的操作；&lt;/p&gt;
这也是为什么树上的 GBT 总是可以用线段树代替 BST 做 DDP，因为树是静态的，重链也是静态的，不可能有结构变化的需求。但序列上的 DDP 不一定是静态的，比如 &lt;a href=&#34;&#34;&gt;密码箱&lt;/a&gt; 就只能用平衡树做。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;维护序列：fhq treap&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例普通平衡树&#34;&gt;例：普通平衡树&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3369&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3369&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pbds / 权值线段树。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;fhq-treap&#34;&gt;FHQ Treap&lt;/h2&gt;
&lt;p&gt;把 Treap 的旋转操作改成了好想好写的 split 和 merge，其余不变；额外带来了维护序列结构的功能。&lt;/p&gt;
&lt;p&gt;这里就只探讨维护序列了，维护的是对于序列结构上的操作（也可以维护值的操作，方式和线段树类似），这里的点值就和线段树维护的值一样，对于操作是没有影响的；点的 id 和对应的下标并没有关系；点的 rank（可以 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 维护）才对应下标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;split&lt;/code&gt;：把树在某个值下标处分为两个 Treap。考虑怎么解决这种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image.png&#34; /&gt;&lt;/p&gt;
自底向上递归处理，考虑到处理 &lt;span class=&#34;math inline&#34;&gt;\(4\)&lt;/span&gt; 的时候 &lt;span class=&#34;math inline&#34;&gt;\(4\)&lt;/span&gt; 接了完整的一个 BST，直接把 &lt;span class=&#34;math inline&#34;&gt;\(4\)&lt;/span&gt; 接到 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 的右儿子即可。显然是不会影响 priority 的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;merge&lt;/code&gt;：是为了配合 split 而产生的操作，将树 split 出去并操作后需要 merge 回来。难点在于需要考虑 priority。相似地，考虑这种情况：&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;image-2.png&#34; alt=&#34;蓝色数字是 priority&#34; /&gt;&lt;figcaption&gt;蓝色数字是 priority&lt;/figcaption&gt;
&lt;/figure&gt;
从最右边一条链向下走到可以插入的位置（显然是唯一的），将点插入，该处原本的子树和新点的左子树递归合并。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;结构操作（以区间 reverse 为例）：两次 split 得到操作区间的 Treap，打一个懒标记，再合并回去。&lt;/p&gt;
类似线段树，递归经过一个点时，如果存在 lazy，就可以交换左右儿子然后下传标记。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 建树：Treap 是笛卡尔树，然后就可以用悬线或者单调栈建树了。&lt;/p&gt;
&lt;p&gt;反过来可以得到在随机数据下笛卡尔树是平衡的，参考 &lt;a href=&#34;https://www.luogu.com.cn/problem/P2611&#34;&gt;ZJOI2011 小蓝的好友&lt;/a&gt;，利用了这个性质。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例文艺平衡树&#34;&gt;例：文艺平衡树&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3391&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3391&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;区间 reverse 乍看会带来可以用线段树做的错觉&lt;/p&gt;
&lt;p&gt;实际上考虑一下 reverse 区间有交的情况，就会发现线段树确实做不了，只能真正地去实现 reverse 这个过程，就只有平衡树了能做了。&lt;/p&gt;
&lt;details&gt;
&lt;pre data-line=&#34;37&#34; class=&#34;cpp language-cpp&#34;&gt;&lt;code data-line=&#34;37&#34; class=&#34;cpp language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&gt;
const int maxn = 1e5 + 5;
unsigned pr[maxn];
int lc[maxn], rc[maxn], d[maxn], siz[maxn];
void pushup(int p) &amp;#123;
    if (p)
        siz[p] = siz[lc[p]] + 1 + siz[rc[p]];
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (p &amp;&amp; d[p]) &amp;#123;
        std::swap(lc[p], rc[p]);
        d[lc[p]] ^= 1, d[rc[p]] ^= 1;
        d[p] = 0;
    &amp;#125;
    return;
&amp;#125;
void init(int p) &amp;#123;
    if (lc[p])
        init(lc[p]);
    if (rc[p])
        init(rc[p]);
    pushup(p);
    return;
&amp;#125;
int split(int &amp;p, int rk) &amp;#123;
    if (!p)
        return 0;
    pushdown(p);
    int q = 0;
    if (siz[lc[p]] + 1 == rk)
        q = rc[p], rc[p] = 0;
    else if (rk &lt;= siz[lc[p]])
        q = p, p = lc[p], lc[q] = split(p, rk);
    else
        q = split(rc[p], rk - siz[lc[p]] - 1);
    pushdown(q);  // 易错：这里要 pushdown
    pushup(p), pushup(q);
    return q;
&amp;#125;
void merge(int &amp;p, int q) &amp;#123;
    pushdown(p), pushdown(q);
    if (!p || !q) &amp;#123;
        p += q;
        return;
    &amp;#125;
    if (pr[p] &gt; pr[q])
        merge(p, lc[q]), lc[q] = p, p = q;
    else
        merge(rc[p], q);
    pushup(p);
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&#34;.in&#34;, &#34;r&#34;, stdin);
    std::freopen(&#34;.out&#34;, &#34;w&#34;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, m;
    std::cin &gt;&gt; n &gt;&gt; m;
    std::vector&amp;lt;int&gt; l(n + 1), r(n + 1);
    std::mt19937 rand(time(nullptr));
    for (int i = 1; i &lt;= n; ++i) &amp;#123;
        pr[i] = rand();
        for (l[i] = i; l[i] != 1 &amp;&amp; pr[l[i] - 1] &gt; pr[i]; l[i] = l[l[i] - 1]);
        if (l[i] != 1)
            rc[l[i] - 1] = i;
    &amp;#125;
    for (int i = n; i; --i) &amp;#123;
        for (r[i] = i; r[i] != n &amp;&amp; pr[r[i] + 1] &gt; pr[i]; r[i] = r[r[i] + 1]);
        if (r[i] != n)
            lc[r[i] + 1] = i;
    &amp;#125;
    std::function&amp;lt;void(int)&gt; print = [&amp;](int p) &amp;#123;
        pushdown(p);
        if (lc[p])
            print(lc[p]);
        std::cout &lt;&lt; p &lt;&lt; &#39; &#39;;
        if (rc[p])
            print(rc[p]);
        return;
    &amp;#125;;
    int rt = std::min_element(pr + 1, pr + n + 1) - pr;
    init(rt);
    for (int l, r, i = 1; i &lt;= m; ++i) &amp;#123;
        std::cin &gt;&gt; l &gt;&gt; r;
        int rt1 = split(rt, l - 1), rt2 = split(rt1, r - l + 1);
        d[rt1] ^= 1;
        merge(rt1, rt2), merge(rt, rt1);
    &amp;#125;
    print(rt), std::cout &lt;&lt; &#39;\n&#39;;
#ifndef ONLINE_JUDGE
    std::cerr &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; std::chrono::duration&amp;lt;double&gt; (std::chrono::steady_clock::now() - stime).count() &lt;&lt; &#34;s\n&#34;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;习题&#34;&gt;习题&lt;/h2&gt;
&lt;p&gt;有点难，难点不在平衡树&lt;/p&gt;
&lt;p&gt;平衡树反而是简单的，只需要发现序列和序列操作就可以了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c---密码箱&#34;&gt;C - 密码箱&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7739&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7739&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;经过思考后，发现比较合理的转化方式是&lt;strong&gt;跳过具体数值，直接用对应操作表示函数值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;将数列转化为最终函数值，用矩阵很好操作（右乘）；考虑将操作转化为数值，利用结合律，容易发现只需要把操作对应的矩阵加在末端（前端）即可，这样就可以只用操作来表示函数值。&lt;/p&gt;
&lt;p&gt;要做的话最好只让矩阵维护最后一项，&lt;code&gt;W&lt;/code&gt; 显然，&lt;code&gt;E&lt;/code&gt; 的第二种亦显然（加两个矩阵），考虑乘起来方便维护，乘起来之后发现和 &lt;code&gt;E&lt;/code&gt; 的第一种是等价的，平衡树维护四个矩阵即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
const int mod = 998244353;
using ll = long long;
struct mat &amp;#123;
    ll a[2][2];
    ll* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    bool operator== (mat &amp;amp;q) const &amp;#123;
        return a[0][0] == q[0][0] &amp;amp;&amp;amp; a[0][1] == q[0][1] &amp;amp;&amp;amp; a[1][0] == q[1][0] &amp;amp;&amp;amp; a[1][1] == q[1][1];
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        res[0][0] = (a[0][0] * q[0][0] + a[0][1] * q[1][0]) % mod;
        res[0][1] = (a[0][0] * q[0][1] + a[0][1] * q[1][1]) % mod;
        res[1][0] = (a[1][0] * q[0][0] + a[1][1] * q[1][0]) % mod;
        res[1][1] = (a[1][0] * q[0][1] + a[1][1] * q[1][1]) % mod;
        return res;
    &amp;#125;
&amp;#125; u[maxn][2], s[maxn][4], W, E, A, B, C;
unsigned pr[maxn];
int siz[maxn], d1[maxn], d2[maxn], lc[maxn], rc[maxn];
#define lt lc[p]
#define rt rc[p]
void pushup(int p) &amp;#123;
    if (p) &amp;#123;
        siz[p] = siz[lc[p]] + 1 + siz[rc[p]];
        s[p][0b00] = s[lc[p]][0b00] * u[p][0] * s[rc[p]][0b00];
        s[p][0b01] = s[lc[p]][0b01] * u[p][1] * s[rc[p]][0b01];
        s[p][0b10] = s[rc[p]][0b10] * u[p][0] * s[lc[p]][0b10];
        s[p][0b11] = s[rc[p]][0b11] * u[p][1] * s[lc[p]][0b11];
    &amp;#125;
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (p &amp;amp;&amp;amp; d1[p]) &amp;#123;
        d1[lt] ^= 1, d1[rt] ^= 1;
        std::swap(u[lt][0], u[lt][1]);
        std::swap(s[lt][0b00], s[lt][0b01]);
        std::swap(s[lt][0b10], s[lt][0b11]);
        std::swap(u[rt][0], u[rt][1]);
        std::swap(s[rt][0b00], s[rt][0b01]);
        std::swap(s[rt][0b10], s[rt][0b11]);
        d1[p] = 0;
    &amp;#125;
    if (p &amp;amp;&amp;amp; d2[p]) &amp;#123;
        d2[lt] ^= 1, d2[rt] ^= 1;
        std::swap(lc[lt], rc[lt]);
        std::swap(s[lt][0b00], s[lt][0b10]);
        std::swap(s[lt][0b01], s[lt][0b11]);
        std::swap(lc[rt], rc[rt]);
        std::swap(s[rt][0b00], s[rt][0b10]);
        std::swap(s[rt][0b01], s[rt][0b11]);
        d2[p] = 0;
    &amp;#125;
    return;
&amp;#125;
int split(int &amp;amp;p, int rk) &amp;#123;
    if (!p)
        return 0;
    pushdown(p);
    int q = 0;
    if (siz[lc[p]] + 1 == rk)
        q = rc[p], rc[p] = 0;
    else if (rk &amp;lt;= siz[lc[p]])
        q = p, p = lc[p], lc[q] = split(p, rk);
    else
        q = split(rc[p], rk - siz[lc[p]] - 1);
    pushdown(q);
    pushup(p), pushup(q);
    return q;
&amp;#125;
void merge(int &amp;amp;p, int q) &amp;#123;
    if (!p || !q) &amp;#123;
        p += q;
        return;
    &amp;#125;
    pushdown(p), pushdown(q);
    if (pr[p] &amp;gt; pr[q])
        merge(p, lc[q]), lc[q] = p, p = q;
    else
        merge(rc[p], q);
    pushup(p);
    return;
&amp;#125;
void init(int p) &amp;#123;
    if (lc[p])
        init(lc[p]);
    if (rc[p])
        init(rc[p]);
    pushup(p);
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;code3.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    s[0][0][0][0] = s[0][0][1][1] = s[0][1][0][0] = s[0][1][1][1] = s[0][2][0][0] = s[0][2][1][1] = s[0][3][0][0] = s[0][3][1][1] = 1ll;
    W[0][0] = W[0][1] = W[1][1] = 1ll;
    E[0][1] = mod - 1ll, E[1][0] = 1ll, E[1][1] = 2ll;
    A[0][1] = A[1][0] = 1ll, B[0][1] = B[1][0] = B[1][1] = 1ll;
    int n, q, rt;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q;
    std::mt19937 rand(time(nullptr));
    for (int i = 1; i &amp;lt;= n + q; ++i)
        pr[i] = rand();
    std::vector&amp;lt;char&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        if (a[i] == &amp;#39;W&amp;#39;)
            u[i][0] = W, u[i][1] = E;
        else
            u[i][0] = E, u[i][1] = W;
    &amp;#125;
    &amp;#123;
        std::vector&amp;lt;int&amp;gt; l(n + 1), r(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (l[i] = i; l[i] != 1 &amp;amp;&amp;amp; pr[l[i] - 1] &amp;gt; pr[i]; l[i] = l[l[i] - 1]);
            if (l[i] != 1)
                rc[l[i] - 1] = i;
        &amp;#125;
        for (int i = n; i; --i) &amp;#123;
            for (r[i] = i; r[i] != n &amp;amp;&amp;amp; pr[r[i] + 1] &amp;gt; pr[i]; r[i] = r[r[i] + 1]);
            if (r[i] != n)
                lc[r[i] + 1] = i;
        &amp;#125;
        rt = std::min_element(pr + 1, pr + n + 1) - pr;
        init(rt);
    &amp;#125;
    auto print = [&amp;amp;](int rt) &amp;#123;
        auto res = A * B * s[rt][0];
        ll p = res[0][1], q = res[1][1];
        std::cout &amp;lt;&amp;lt; q &amp;lt;&amp;lt; &amp;#39; &amp;#39;  &amp;lt;&amp;lt; p &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return;
    &amp;#125;;
    print(rt);
    for (std::string op; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; op;
        if (op == &amp;quot;APPEND&amp;quot;) &amp;#123;
            char t;
            std::cin &amp;gt;&amp;gt; t, ++n;
            if (t == &amp;#39;W&amp;#39;)
                u[n][0] = W, u[n][1] = E;
            else
                u[n][0] = E, u[n][1] = W;
            pushup(n), merge(rt, n);
        &amp;#125;
        else if (op == &amp;quot;FLIP&amp;quot;) &amp;#123;
            int l, r;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
            int rt1 = split(rt, l - 1), rt2 = split(rt1, r - l + 1);
            d1[rt1] ^= 1;
            std::swap(u[rt1][0], u[rt1][1]);
            std::swap(s[rt1][0b00], s[rt1][0b01]);
            std::swap(s[rt1][0b10], s[rt1][0b11]);
            merge(rt1, rt2), merge(rt, rt1);
        &amp;#125;
        else &amp;#123;
            int l, r;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
            int rt1 = split(rt, l - 1), rt2 = split(rt1, r - l + 1);
            d2[rt1] ^= 1;
            std::swap(lc[rt1], rc[rt1]);
            std::swap(s[rt1][0b00], s[rt1][0b10]);
            std::swap(s[rt1][0b01], s[rt1][0b11]);
            merge(rt1, rt2), merge(rt, rt1);
        &amp;#125;
        print(rt);
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a---bridge&#34;&gt;A - Bridge&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9358&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9358&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果把桥视作元素，假设对于下面的情形：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;容易发现如果 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 不存在，那么 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的后继都是 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，但只保留 &lt;span class=&#34;math inline&#34;&gt;\(y\to a\)&lt;/span&gt; 的路径是不劣的&lt;/p&gt;
&lt;p&gt;如果 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 存在，就要连 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，也就说每个点连到当前行和下一行中最近的后继点就可以了，每个点只对应两条边，最后会形成若干个链，看成序列就可以用平衡树维护。查询&lt;strong&gt;跳到树顶再跳到最右的儿子就可以了，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt;&lt;/strong&gt;。连边则可以直接用 set 维护。&lt;/p&gt;
</content>
        <category term="平衡树" />
        <updated>2025-08-18T00:18:48.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250816/</id>
        <title>近期杂题 II</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250816/"/>
        <content type="html">&lt;p&gt;和 Aug 9th 的杂题不太能合并，所以分开了&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-gas-fire-extinguishers&#34;&gt;B. GAS-Fire Extinguishers&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3479&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3479&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显然可以贪心，不妨从下到上，记录当前遍历过的、空余出来的灭火器（其实算的是可以供给的房间数）和还未分配灭火器的房间，按距离为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim k\)&lt;/span&gt; 分组。&lt;/p&gt;
&lt;p&gt;不难发现如果在某个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 处存在距离为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的空闲灭火器，可以贪心地分配给 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;；如果存在距离为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的未分配房间，也可以在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 处放置灭火器并分配给这些房间。类似地，进行两两配对一定是不劣的。&lt;/p&gt;
&lt;p&gt;发现同子树内距离为 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 的点对留到 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 再匹配是不行的，因为这时距离会变成 &lt;span class=&#34;math inline&#34;&gt;\(k+1\)&lt;/span&gt;，不能匹配上；可以感受到这样是更劣的。&lt;/p&gt;
&lt;p&gt;然后就可以做了，根节点特殊乱贪心一下就行了。记得开 long long。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
#define int long long
signed main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, s, k, res = 0;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; s &amp;gt;&amp;gt; k;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1), p(n + 1, std::vector&amp;lt;int&amp;gt; (k + 1)), q(n + 1, std::vector&amp;lt;int&amp;gt; (k + 1));
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        for (auto i : g[x])
            if (i != fa)  &amp;#123;
                DFS(i, x);
                for (int j = 0; j &amp;lt; k; ++j)
                    p[x][j + 1] += p[i][j], q[x][j + 1] += q[i][j];
            &amp;#125;
        ++q[x][0];
        if (x != 1) &amp;#123;
            int v = (q[x][k] + s - 1) / s;
            p[x][0] = v * s, res += v;
            for (int i = 0; i &amp;lt;= k; ++i) &amp;#123;
                int v = std::min(p[x][i], q[x][k - i]);
                p[x][i] -= v, q[x][k - i] -= v;
            &amp;#125;
            for (int i = 0; i &amp;lt; k; ++i) &amp;#123;
                int v = std::min(p[x][i], q[x][k - 1 - i]);
                p[x][i] -= v, q[x][k - 1 - i] -= v;
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            // std::cerr &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            int sum = 0ll, r = 0;
            for (int i = k; ~i; --i) &amp;#123;
                sum += p[x][k - i];
                // std::cerr &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
                int v = std::min(sum, q[x][i]);
                sum -= v, q[x][i] -= v;
                r += q[x][i];
            &amp;#125;
            res += (r + s - 1) / s;
        &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c.-扫地机器人&#34;&gt;C. 扫地机器人&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6502/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6502/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题意：给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 堆货物，每堆货物有重量 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 和一个参数 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;。有一个初始负载为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;、负载上限为 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 的机器人，从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 遍历这些货物，对每一处货物执行以下操作，直到清空这堆货物：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前负载未满：可以选择进行装载直到达到负载上限，或货物清空。花费 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 的代价。&lt;/li&gt;
&lt;li&gt;不管当前负载满没满：可以选择清空当前负载，花费 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 的代价。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一处可以任意操作，要求遍历完之后机器人负载为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，问最小代价。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^5,c\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;题面是重构过的，原来的题面太有歧义了。绝大多数人没做出来就是因为没看懂题吧！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;考虑暴力，可以想到令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示处理完 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 过后负载为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的最小代价（显然 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,c}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,0}\)&lt;/span&gt; 是等效的，故舍弃前者）。记 &lt;span class=&#34;math inline&#34;&gt;\(k=\left\lceil\dfrac {v_i}c\right\rceil,w=(v_i\bmod c - 1)\bmod c+1\)&lt;/span&gt;，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,(j+v_i)\bmod c}\gets f_{i-1,j}+k\cdot a_i+(k-1)\cdot b +
\begin{cases}
b&amp;amp;j+w=c\\
a_i+b&amp;amp;j+w&amp;gt; c\\
0&amp;amp;\text{otherwise}
\end{cases}\\
f_{i,0}\gets f_{i,j}+b
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;发现 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 之间是存在对应关系的，所以考虑直接继承（真实的 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 应该位于 &lt;span class=&#34;math inline&#34;&gt;\(-s_i\)&lt;/span&gt; 的位置），再做全局加、区间加，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,0}\)&lt;/span&gt; 的转移是全局 min，线段树维护即可；每次只会新增一个状态，动态开点即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 5e6 + 5;
const __int128 inf = 1e18;
struct &amp;#123;
    int l, r;
    __int128 u, d;
&amp;#125; t[maxn];
#define lt t[p].l
#define rt t[p].r
int tot;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d += t[p].d, t[lt].u += t[p].d;
        t[rt].d += t[p].d, t[rt].u += t[p].d;
        t[p].d = 0ll;
    &amp;#125;
    return;
&amp;#125;
void upd(int &amp;amp;p, int l, int r, int x, __int128 v) &amp;#123;
    if (!p)
        p = ++tot, t[p].u = v;
    else
        t[p].u = std::min(t[p].u, v);
    if (l == r)
        return;
    pushdown(p);
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, l, mid, x, v);
    else
        upd(rt, mid + 1, r, x, v);
    return;
&amp;#125;
void add(int p, int l, int r, int ql, int qr, __int128 v) &amp;#123;
    if (!p)
        return;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr) &amp;#123;
        t[p].d += v, t[p].u += v;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (ql &amp;lt;= mid)
        add(lt, l, mid, ql, qr, v);
    if (qr &amp;gt; mid)
        add(rt, mid + 1, r, ql, qr, v);
    t[p].u = std::min(t[lt].u, t[rt].u);
    return;
&amp;#125;
__int128 ask(int p, int l, int r, int x) &amp;#123;
    if (l == r)
        return t[p].u;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (x &amp;lt;= mid)
        return ask(lt, l, mid, x);
    return ask(rt, mid + 1, r, x);
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;robot.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;robot.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;ex_robot4.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    t[0].u = inf;
    int n, b, c, p0 = 0, rt = 0;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; c &amp;gt;&amp;gt; b;
    std::vector&amp;lt;int&amp;gt; a(n + 1), v(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; v[i];
    upd(rt, 0, c - 1, 0, 0ll);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        __int128 k = (v[i] + c - 1) / c, w = (v[i] % c == 0 ? c : v[i] % c);
        t[rt].d += k * a[i] + (k - 1) * b;
        t[rt].u += k * a[i] + (k - 1) * b;
        if (w &amp;lt;= c)
            add(rt, 0, c - 1, (c - w + p0) % c, (c - w + p0) % c, b);
        if (w != 1) &amp;#123;
            int l = (c - w + p0 + 1) % c, r = (p0 + c - 1) % c;
            if (l &amp;lt;= r)
                add(rt, 0, c - 1, l, r, a[i] + b);
            else &amp;#123;
                add(rt, 0, c - 1, 0, r, a[i] + b);
                add(rt, 0, c - 1, l, c - 1, a[i] + b);
            &amp;#125;
        &amp;#125;
        p0 = (p0 + c - v[i] % c) % c;
        upd(rt, 0, c - 1, p0, t[rt].u + b);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; (long long)ask(rt, 0, c - 1, p0) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-套娃&#34;&gt;D. 套娃&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6502/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6502/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题意：给定初始为全 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的数组 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n + 1}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 次单点 +1 操作，每次操作后，求解：&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的前缀和数组为 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，找到一个最小的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，使得对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，均有 &lt;span class=&#34;math inline&#34;&gt;\(k\cdot i\ge s_i\)&lt;/span&gt; 成立。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6\)&lt;/span&gt;，时限 0.5s。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;趣事一则&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;考场上最后 10min 拿到题，憋了一个能拿到 96pts 的假做法：注意到前缀和是单增的，需要维护最大的 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {s_i}i\)&lt;/span&gt;，由于后缀 +1 带来的影响很小，所以可以猜测在大多数情况下最大的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 只会在原来的和修改的点之间变化。只用 10 行的核心代码就能拿到很多分。但是居然有这么多，可能出题人都没有想到真有人敢交这种做法吧。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
    std::freopen(&amp;quot;doll.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;doll.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    auto stime = std::chrono::steady_clock::now();
    int n, res = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; bit(n + 2);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x) &amp;#123;
        for (; x &amp;lt;= n + 1; x += lowbit(x))
            ++bit[x];
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    int p = 1;
    for (int i = 1, x; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x, add(++x);
        long long s = ask(x), t = ask(p);
        if (s * p == t * x ? x &amp;gt; p : s * p &amp;gt; t * x)
            p = x;
        else
            s = t;
        if (s &amp;gt; p * res)
            ++res;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    std::cerr &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt;(std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;很容易写出暴力，观察样例就能发现每次修改后答案最多增加 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。记当前答案为 &lt;span class=&#34;math inline&#34;&gt;\(res\)&lt;/span&gt;，线段树维护 &lt;span class=&#34;math inline&#34;&gt;\(s_i-res\cdot i\)&lt;/span&gt; 的最小值，若其为负则 res++，然后重构线段树（等差数列和 min 不兼容）。&lt;/p&gt;
&lt;p&gt;怎么又有不等式 😱&lt;/p&gt;
&lt;p&gt;目的是在本来合法的范围里找到新的不合法值。考虑合法范围：&lt;span class=&#34;math inline&#34;&gt;\(s_i-res\cdot i\ge 0\)&lt;/span&gt;，解一下得到 &lt;span class=&#34;math inline&#34;&gt;\(i\le \dfrac {s_i}{res}\)&lt;/span&gt;，放缩得到 &lt;span class=&#34;math inline&#34;&gt;\(i\le\dfrac {n}{res}\)&lt;/span&gt;，每次 &lt;span class=&#34;math inline&#34;&gt;\(res\)&lt;/span&gt; 变化时只重构 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {n}{res}\)&lt;/span&gt; 以前的位置，重构的总长是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\ln n)\)&lt;/span&gt; 的。（线段树建树是线性的）&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e6 + 5;
const int inf = 0x3f3f3f3f;
struct &amp;#123;
    int l, r, u, d;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void bld(int p, int l, int r) &amp;#123;
    t[p].u = t[p].l = l, t[p].r = r;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d += t[p].d, t[rt].d += t[p].d;
        t[lt].u -= t[p].d, t[rt].u -= t[p].d;
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (x &amp;lt;= t[p].l) &amp;#123;
        ++t[p].d, --t[p].u;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x);
    add(rt, x);
    t[p].u = std::min(t[lt].u, t[rt].u);
    // printf(&amp;quot;[%d, %d]: %d, [%d, %d]: %d\n&amp;quot;, t[p].l, mid, t[lt].u, mid + 1, t[p].r, t[rt].u);
    return;
&amp;#125;
void rem(int p, int r) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        t[p].u += t[p].l;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        rem(lt, r), t[rt].u = inf;
    else
        rem(lt, r), rem(rt, r);
    t[p].u = std::min(t[lt].u, t[rt].u);
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;doll.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;doll.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    bld(1, 1, n + 1);
    for (int i = 1, x, res = 1, now = n; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x;
        if (x &amp;lt;= now)
            add(1, ++x);
        if (t[1].u &amp;lt; 0) &amp;#123;
            std::cout &amp;lt;&amp;lt; ++res &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
            rem(1, now = n / res);
        &amp;#125;
        else
            std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
        // puts(&amp;quot;&amp;quot;);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---subarray-sum-divisibility&#34;&gt;E - Subarray Sum Divisibility&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc419/tasks/abc419_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc419/tasks/abc419_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模意义下的数列全等，可以对应原数组全等、差分全等、前缀和全等（都是模意义下的，还有其他的一些线性和非线性的变换也可以）&lt;/p&gt;
&lt;p&gt;本着修改的点尽量少的想法，如果题目给定单点修改就可以在原数组上做文章，给定区间修改可以考虑差分数组，前缀和对于一些区间查询有优势&lt;/p&gt;
&lt;p&gt;其他两种用得也很多，像这题只需要用原数组全等就可以做了&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, m, l;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; l;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; u(l + 1, std::vector&amp;lt;int&amp;gt; (m));
    for (int i = 1; i &amp;lt;= l; ++i)
        for (int j = 0; j &amp;lt; m; ++j)
            for (int k = i; k &amp;lt;= n; k += l)
                u[i][j] += (j + m - a[k]) % m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(l + 1, std::vector&amp;lt;int&amp;gt; (m, inf));
    f[0][0] = 0;
    for (int i = 1; i &amp;lt;= l; ++i)
        for (int j = 0; j &amp;lt; m; ++j)
            for (int k = 0; k &amp;lt; m; ++k)
                f[i][(j + k) % m] = std::min(f[i][(j + k) % m], f[i - 1][j] + u[i][k]);
    std::cout &amp;lt;&amp;lt; f[l][0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f---all-included&#34;&gt;F - All Included&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc419/tasks/abc419_f&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc419/tasks/abc419_f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原题意转化为在 AC 自动机上走 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 步，要求经过 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个叶子的方案数。不太可做，转化成容斥（令字符串终点不可达）。在外层枚举步数暴力游走。&lt;/p&gt;
&lt;p&gt;要求恰好走 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 步，也可以用矩阵；但原图很稀疏，所以矩阵并没有优势。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int tot = 1, T[805][26], fail[805];
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, l;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; l;
    std::vector&amp;lt;std::string&amp;gt; a;
    &amp;#123;
        std::vector&amp;lt;std::string&amp;gt; s(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; s[i];
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            bool flag = 1;
            for (int j = 1; j &amp;lt;= n; ++j)
                if (j != i)
                    if (s[j].find(s[i]) != std::string::npos) &amp;#123;
                        flag = 0;
                        break;
                    &amp;#125;
            if (flag)
                a.push_back(s[i]);
        &amp;#125;
        n = (int)a.size();
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; pos(n);
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        int &amp;amp;p = pos[i];
        for (auto j : a[i]) &amp;#123;
            if (!T[p][j - &amp;#39;a&amp;#39;])
                T[p][j - &amp;#39;a&amp;#39;] = tot++;
            p = T[p][j - &amp;#39;a&amp;#39;];
        &amp;#125;
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    auto res = 0ll;
    int siz = 1 &amp;lt;&amp;lt; n;
    for (int i = 0; i &amp;lt; siz; ++i) &amp;#123;
        std::vector&amp;lt;int&amp;gt; tag(tot);
        for (int j = 0; j &amp;lt; n; ++j)
            if ((i &amp;gt;&amp;gt; j) &amp;amp; 1)
                tag[pos[j]] = 1;
        std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(l + 1, std::vector&amp;lt;long long&amp;gt; (tot));
        f[0][0] = 1ll;
        for (int j = 0; j &amp;lt; l; ++j)
            for (int k = 0; k &amp;lt; tot; ++k)
                for (int a = 0; a &amp;lt; 26; ++a) &amp;#123;
                    if (!tag[T[k][a]])
                        (f[j + 1][T[k][a]] += f[j][k]) %= mod;
                &amp;#125;
        int k = (__builtin_popcount(i) &amp;amp; 1 ? mod - 1 : 1);
        auto s = 0ll;
        for (int j = 0; j &amp;lt; tot; ++j)
            if (!tag[j])
                (s += f[l][j]) %= mod;
        (res += k * s) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;g---count-simple-paths-2&#34;&gt;G - Count Simple Paths 2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc419/tasks/abc419_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc419/tasks/abc419_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很新的性质。考虑『以 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为起点的简单路径数』和反祖边数量的关系：选定一条反祖边必须被经过时（显然只有一种可能的经过方向），树的形态发生变化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;也就是说，一种反祖边的选取方案对应一种树，遍历其从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 开始的简单路径复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。设反祖边数量为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，那么合法的方案数不超过 &lt;span class=&#34;math inline&#34;&gt;\(2^k\)&lt;/span&gt;，暴力 DFS 的整个图复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(2^k\cdot n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;发现很多跟反祖边无关的遍历是不必要的（只有一种走法，可以设成边权），考虑对所有连接反祖边的点建立虚树，并把原树上的反祖边也移到虚树上，就能 &lt;span class=&#34;math inline&#34;&gt;\(O(2^k\cdot k)\)&lt;/span&gt; 解决问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1), g1(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g2(n + 1);
    for (int x, y; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tag(n + 1), vis(n + 1);
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; be;
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        static int now = 0;
        tag[x] = 1, vis[x] = ++now;
        for (auto i : g[x])
            if (!tag[i]) &amp;#123;
                // fprintf(stderr, &amp;quot;%d -&amp;gt; %d\n&amp;quot;, x, i);
                g1[x].push_back(i), DFS(i, x);
            &amp;#125;
            else if (i != fa &amp;amp;&amp;amp; vis[i] &amp;lt; vis[x])
                be.emplace_back(i, x);
        return;
    &amp;#125;;
    DFS(1, -1);
    &amp;#123; // 求虚树
        std::vector&amp;lt;int&amp;gt; dep(n + 1), fa(n + 1), top(n + 1), siz(n + 1), son(n + 1), dfn(n + 1), rfn(n + 1);
        std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
            siz[x] = 1;
            for (auto i : g1[x]) &amp;#123;
                dep[i] = dep[x] + 1;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
            return;
        &amp;#125;;
        DFS(1);
        DFS = [&amp;amp;](int x) &amp;#123;
            static int now = 0;
            dfn[x] = ++now;
            if (son[x])
                top[son[x]] = top[x], DFS(son[x]);
            for (auto i : g1[x])
                if (i != son[x])
                    top[i] = i, DFS(i);
            rfn[x] = now;
            // printf(&amp;quot;%d: [%d, %d]\n&amp;quot;, x, dfn[x], rfn[x]);
            return;
        &amp;#125;;
        top[1] = 1, DFS(1);
        auto getLCA = [&amp;amp;](int x, int y) &amp;#123;
            for (; top[x] != top[y]; x = fa[top[x]])
                if (dep[top[x]] &amp;lt; dep[top[y]])
                    std::swap(x, y);
            return dep[x] &amp;lt; dep[y] ? x : y;
        &amp;#125;;
        tag.assign(n + 1, 0);
        tag[1] = tag[n] = 1;
        for (auto [u, v] : be)
            tag[u] = 1, tag[v] = 1;
        std::vector&amp;lt;int&amp;gt; p;
        for (int i = 1; i &amp;lt;= n; ++i)
            if (tag[i])
                p.push_back(i);
        std::sort(p.begin(), p.end(), [&amp;amp;](int i, int j) &amp;#123; return dfn[i] &amp;lt; dfn[j]; &amp;#125;);
        for (int i = 1; i &amp;lt; (int)p.size(); ++i) &amp;#123;
            int fa = getLCA(p[i], p[i - 1]);
            if (!tag[fa])
                tag[fa] = 1;
        &amp;#125;
        p.clear();
        for (int i = 1; i &amp;lt;= n; ++i)
            if (tag[i])
                p.push_back(i);
        std::sort(p.begin(), p.end(), [&amp;amp;](int i, int j) &amp;#123; return dfn[i] &amp;lt; dfn[j]; &amp;#125;);
        std::vector&amp;lt;int&amp;gt; st;
        for (auto i : p) &amp;#123;
            if (st.empty())
                st.push_back(i);
            else &amp;#123;
                for (; rfn[st.back()] &amp;lt; dfn[i]; st.pop_back());
                g2[st.back()].emplace_back(i, dep[i] - dep[st.back()]);
                g2[i].emplace_back(st.back(), dep[i] - dep[st.back()]);
                // printf(&amp;quot;add (%d, %d): %d\n&amp;quot;, st.back(), i, dep[i] - dep[st.back()]);
                st.push_back(i);
            &amp;#125;
        &amp;#125;
        for (auto [u, v] : be) &amp;#123;
            g2[u].emplace_back(v, 1), g2[v].emplace_back(u, 1);
            // printf(&amp;quot;# add(%d, %d): 1\n&amp;quot;, u, v);
        &amp;#125;
    &amp;#125;
    tag.assign(n + 1, 0);
    std::vector&amp;lt;int&amp;gt; res(n + 1);
    DFS = [&amp;amp;](int x, int s) &amp;#123;
        if (x == n)
            ++res[s];
        tag[x] = 1;
        for (auto [i, w] : g2[x])
            if (!tag[i])
                DFS(i, s + w);
        tag[x] = 0;
        return;
    &amp;#125;;
    DFS(1, 0);
    for (int i = 1; i &amp;lt; n; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <category term="AC 自动机" />
        <category term="贪心" />
        <category term="DP 优化" />
        <category term="虚树" />
        <updated>2025-08-16T08:14:12.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250814/</id>
        <title>DDP 与 GBT 练习</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250814/"/>
        <content type="html">&lt;p&gt;线段树是对的（存疑）&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---数据传输&#34;&gt;A - 数据传输&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P8820&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P8820&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我在上一篇文章中提到了 &lt;a href=&#34;/20250812/#树上路径查询&#34;&gt;DDP &amp;amp; 路径查询问题&lt;/a&gt;，在这个题中就有体现。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1/2}\)&lt;/span&gt; 表示数据保存在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 往下数 &lt;span class=&#34;math inline&#34;&gt;\(0/1/2\)&lt;/span&gt; 个点处的最小代价，手玩容易发现 &lt;span class=&#34;math inline&#34;&gt;\(k=3\)&lt;/span&gt; 时&lt;strong&gt;最优路径可能会往某个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 处的最小代价儿子处绕一圈来避免这个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 的代价&lt;/strong&gt;。但该值是定值，问题还是纯路径问题，就可以 DDP 了。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;image.png&#34; alt=&#34;共两种可能性（任意一个箭头长度不为 3 时绕一圈一定不比直接走更优）&#34; /&gt;&lt;figcaption&gt;共两种可能性（任意一个箭头长度不为 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 时绕一圈一定不比直接走更优）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
struct mat &amp;#123;
    long long a[3][3];
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat() &amp;#123;
        memset(a, 0x3f, sizeof (a));
        return;
    &amp;#125;
    mat(int flag) &amp;#123;
        memset(a, 0x3f, sizeof (a));
        a[0][0] = a[1][1] = a[2][2] = 0ll;
        return;
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        for (int i = 0; i &amp;lt; 3; ++i)
            for (int k = 0; k &amp;lt; 3; ++k)
                for (int j = 0; j &amp;lt; 3; ++j)
                    res[i][k] = std::min(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;int&amp;gt; mx(n + 1, 0x3f3f3f3f);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        mx[x] = std::min(mx[x], a[y]);
        mx[y] = std::min(mx[y], a[x]);
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; dep(n + 1);
    std::vector&amp;lt;std::array&amp;lt;int, 18&amp;gt; &amp;gt; f(n + 1);
    std::vector&amp;lt;std::array&amp;lt;mat, 18&amp;gt; &amp;gt; u(n + 1), d(n + 1);
    u[0][0] = d[0][0] = mat(1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        for (auto i : g1[x])
            if (i != f[x][0]) &amp;#123;
                f[i][0] = x;
                &amp;#123;
                    mat s;
                    s[0][0] = a[x];
                    if (k &amp;gt;= 2) &amp;#123;
                        s[0][1] = 0;
                        s[1][0] = a[x];
                    &amp;#125;
                    if (k &amp;gt;= 3) &amp;#123;
                        s[1][2] = 0;
                        s[2][0] = a[x];
                        s[1][1] = mx[x];
                        s[2][2] = mx[i];
                    &amp;#125;
                    u[i][0] = s; 
                    s[0][0] = a[i];
                    if (k &amp;gt;= 2)
                        s[1][0] = a[i];
                    if (k &amp;gt;= 3) &amp;#123;
                        s[2][0] = a[i];
                        s[1][1] = mx[i];
                        s[2][2] = mx[x];
                    &amp;#125;
                    d[i][0] = s; 
                &amp;#125;
                for (int j = 1; j &amp;lt; 18; ++j) &amp;#123;
                    f[i][j] = f[f[i][j - 1]][j - 1];
                    u[i][j] = u[i][j - 1] * u[f[i][j - 1]][j - 1];
                    d[i][j] = d[f[i][j - 1]][j - 1] * d[i][j - 1];
                &amp;#125;
                dep[i] = dep[x] + 1;
                DFS(i);
            &amp;#125;
        return;
    &amp;#125;;
    dep[1] = 1, DFS(1);
    for (int x, y; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        long long res = a[x];
        mat r1(1), r2(1);
        if (dep[x] &amp;gt; dep[y]) &amp;#123;
            for (int i = 17; ~i; --i)
                if (dep[f[x][i]] &amp;gt;= dep[y]) &amp;#123;
                    r1 = r1 * u[x][i];
                    x = f[x][i];
                &amp;#125;
        &amp;#125;
        else if (dep[y] &amp;gt; dep[x]) &amp;#123;
            for (int i = 17; ~i; --i)
                if (dep[f[y][i]] &amp;gt;= dep[x]) &amp;#123;
                    r2 = d[y][i] * r2;
                    y = f[y][i];
                &amp;#125;
        &amp;#125;
        if (x != y) &amp;#123;
            for (int i = 17; ~i; --i)
                if (f[x][i] != f[y][i]) &amp;#123;
                    r1 = r1 * u[x][i];
                    r2 = d[y][i] * r2;
                    x = f[x][i], y = f[y][i];
                &amp;#125;
            r1 = r1 * u[x][0], r2 = d[y][0] * r2;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res + (r1 * r2)[0][0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---the-silk-road-with-robots&#34;&gt;B - The Silk Road … with Robots!&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://qoj.ac/problem/10410&#34; class=&#34;uri&#34;&gt;https://qoj.ac/problem/10410&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题意：初始有一个长为 &lt;span class=&#34;math inline&#34;&gt;\(10^8\)&lt;/span&gt; 的空数轴，给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 次操作，每次操作在数轴上的一个空位放一个 A 类点或 B 类点。每个 A 类点有其&lt;strong&gt;价值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;任意在数轴上移动这些 B 类点，&lt;strong&gt;总价值&lt;/strong&gt;为所有被经过的 A 类点的&lt;strong&gt;价值&lt;/strong&gt; - B 类点移动总路程。每次操作后输出最大&lt;strong&gt;总价值&lt;/strong&gt;，重复经过的 A 类点只计一次。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个题确实可以带来很多启发，我一开始直接设 &lt;span class=&#34;math inline&#34;&gt;\(f_j\)&lt;/span&gt; 为状态，这样对于暴力是可做的，但是会出现一些需要被区间修改的系数，比如&lt;strong&gt;前缀和&lt;/strong&gt;。最好设计状态，让转移的时候只需要用到常数、差分值等修改次数很少的系数。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,0/1/2/3}\)&lt;/span&gt; 分别表示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;那么可以写出转移式：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,0}=\max(mx+a_i+x_i,f_{i-1,0}+a_i)\\
f_{i,1}=\max(mx+a_i+2x_i,f_{i-1,1}+a_i)\\
f_{i,2}=f_{i-1,2}-(x_i-x_{i-1}) + a_i\\
f_{i,3}=f_{i-1,3}-2(x_i-x_{i-1})+a_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;span class=&#34;math inline&#34;&gt;\(mx\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,2/3}\)&lt;/span&gt; 的前缀最大值。在 B 类点处可以让 &lt;span class=&#34;math inline&#34;&gt;\(f_{2/3}\)&lt;/span&gt; 继承对应的 &lt;span class=&#34;math inline&#34;&gt;\(f_{0/1}\)&lt;/span&gt;，新开一维记录 &lt;span class=&#34;math inline&#34;&gt;\(mx\)&lt;/span&gt; 就可以维护矩乘了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 1e8;
const int maxn = 5e6 + 5;
const long long inf = 1e12;
struct mat &amp;#123;
    long long a[5][5];
    mat() &amp;#123;&amp;#125;
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        for (int i = 0; i &amp;lt; 5; ++i)
            for (int k = 0; k &amp;lt; 5; ++k) &amp;#123;
                auto u(-inf);
                for (int j = 0; j &amp;lt; 5; ++j)
                    u = std::max(u, a[i][j] + q[j][k]);
                res[i][k] = u;
            &amp;#125;
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int l, r; mat u; &amp;#125; t[maxn];
#define lt t[p].l
#define rt t[p].r
void add(int &amp;amp;p, int l, int r, int x, mat &amp;amp;v) &amp;#123;
    static int tot = 0;
    if (!p)
        p = ++tot;
    if (l == r) &amp;#123;
        t[p].u = v;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, l, mid, x, v);
    else
        add(rt, mid + 1, r, x, v);
    t[p].u = t[lt].u * t[rt].u;
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    &amp;#123;
        mat &amp;amp;u = t[0].u;
        for (int i = 0; i &amp;lt; 5; ++i)
            for (int j = 0; j &amp;lt; 5; ++j)
                u[i][j] = -inf;
        u[0][0] = u[1][1] = u[2][2] = u[3][3] = u[4][4] = 0ll;
    &amp;#125;
    int m, rt = 0;
    std::cin &amp;gt;&amp;gt; m;
    std::vector&amp;lt;mat&amp;gt; a(m + 1);
    std::vector&amp;lt;int&amp;gt; ty(m + 1);
    std::set&amp;lt;std::pair&amp;lt;long long, int&amp;gt; &amp;gt; s;
    s.emplace(-inf, 0);
    for (int op, x, i = 1; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; op &amp;gt;&amp;gt; x;
        auto &amp;amp;u = a[i];
        for (int i = 0; i &amp;lt; 5; ++i)
            for (int j = 0; j &amp;lt; 5; ++j)
                u[i][j] = -inf;
        auto p = --s.lower_bound(std::make_pair(x, 0)), q = s.upper_bound(std::make_pair(x, 0));
        int v = 0;
        if (op == 2)
            std::cin &amp;gt;&amp;gt; v;
        u[0][0] = v, u[1][1] = v, u[4][0] = v + x, u[4][1] = v + 2 * x;
        if (op == 1) &amp;#123;
            ty[i] = 0;
            u[4][2] = u[4][1] - 2 * x;
            u[1][2] = u[1][1] - 2 * x;
            u[4][3] = u[4][0] - x;
            u[0][3] = u[0][0] - x;
        &amp;#125;
        else &amp;#123;
            ty[i] = 1;
            u[2][2] = v - (x - p-&amp;gt;first);
            u[3][3] = v - 2 * (x - p-&amp;gt;first);
        &amp;#125;
        u[4][4] = std::max(&amp;#123; 0ll, u[4][2], u[4][3] &amp;#125;);
        u[1][4] = u[1][2], u[0][4] = u[0][3], u[2][4] = u[2][2], u[3][4] = u[3][3];
        add(rt, 0, lim, x, u);
        if (q != s.end() &amp;amp;&amp;amp; ty[q-&amp;gt;second] == 1) &amp;#123;
            auto &amp;amp;u = a[q-&amp;gt;second];
            u[2][2] -= p-&amp;gt;first, u[2][2] += x;
            u[3][3] -= 2 * p-&amp;gt;first, u[3][3] += 2 * x;
            u[2][4] = u[2][2], u[3][4] = u[3][3];
            add(rt, 0, lim, q-&amp;gt;first, a[q-&amp;gt;second]);
        &amp;#125;
        s.emplace(x, i);
        std::cout &amp;lt;&amp;lt; t[1].u[4][4] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        // for (int i = 0; i &amp;lt; 5; ++i, puts(&amp;quot;&amp;quot;))
        //     for (int j = 0; j &amp;lt; 5; ++j)
        //         if (t[1].u[i][j] &amp;lt; -200)
        //             printf(&amp;quot;  x &amp;quot;);
        //         else
        //             printf(&amp;quot;%3lld &amp;quot;, t[1].u[i][j]);
        // puts(&amp;quot;=============&amp;quot;);
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---密码箱&#34;&gt;C - 密码箱&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/20250818/#c---%E5%AF%86%E7%A0%81%E7%AE%B1&#34;&gt;link&lt;/a&gt;;&lt;/p&gt;
</content>
        <category term="线段树" />
        <category term="DDP" />
        <updated>2025-08-14T09:08:21.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250812/</id>
        <title>DDP 与全局平衡二叉树</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250812/"/>
        <content type="html">&lt;p&gt;其实动态 DP 不是动态树 DP 的同义词&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;动态-dp&#34;&gt;动态 DP&lt;/h2&gt;
&lt;p&gt;对于转移只依赖前几项的 DP，可以放进矩阵。&lt;/p&gt;
&lt;p&gt;默认转移范围是 &lt;span class=&#34;math inline&#34;&gt;\([1,n]\)&lt;/span&gt;；如果我们需要改变求解范围，发现如果能获取转移矩阵的乘积就很快了。考虑存下来。&lt;/p&gt;
&lt;p&gt;如果需要单点修改，等价于修改其所在矩阵，则想要尽可能少地修改存储的答案，考虑使用线段树优化该过程。&lt;/p&gt;
&lt;h3 id=&#34;例海报&#34;&gt;例：海报&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9790&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9790&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易列出暴力 DP 式：令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示枚举到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时，包含 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 在内已经有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个连续的人举起海报，易得：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,0}=\max(f_{i-1,0},f_{i-1,1},f_{i-1,2},f_{i-1,3})\\
f_{i,j}=f_{i-1,j-1}+a_i \forall 1\le j\le 3
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;发现满足 + / max &lt;strong&gt;矩阵乘法&lt;/strong&gt; 的形式；想到用线段树保存每段区间对应矩阵（对应性质：结合律），每次修改 / 查询就能在 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 之内完成。&lt;/p&gt;
&lt;p&gt;原问题是环形的，可以再加一维 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 表示钦定选了前 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个且不选第 &lt;span class=&#34;math inline&#34;&gt;\(k+1\)&lt;/span&gt; 个时的答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 4e4 + 5;
const long long inf = 1e18;
struct mat &amp;#123;
    int n, m;
    long long a[4][4];
    mat() &amp;#123;&amp;#125;
    mat(int n1, int m1): n(n1), m(m1) &amp;#123;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int j = 0; j &amp;lt; m; ++j)
                a[i][j] = -inf;
        return;
    &amp;#125;
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res(n, q.m);
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k)
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int l, r; mat u[4]; &amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int a[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
#define c t[p].u[i]
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        for (int i = 0; i &amp;lt;= 3; ++i) &amp;#123;
            c = mat(4, 4);
            if (l &amp;gt; i + 1) &amp;#123;
                c[0][0] = c[1][0] = c[2][0] = c[3][0] = 0;
                c[0][1] = c[1][2] = c[2][3] = a[l];
            &amp;#125;
            else if (l == i + 1)
                c[0][0] = c[1][0] = c[2][0] = c[3][0] = 0;
            else
                c[0][1] = c[1][2] = c[2][3] = a[l];
        &amp;#125;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    for (int i = 0; i &amp;lt;= 3; ++i)
        t[p].u[i] = t[lt].u[i] * t[rt].u[i];
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        for (int i = 0; i &amp;lt;= 3; ++i)
            if (t[p].l != i + 1) 
                c[0][1] = c[1][2] = c[2][3] = v;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x, v);
    else
        add(rt, x, v);
    for (int i = 0; i &amp;lt;= 3; ++i)
        t[p].u[i] = t[lt].u[i] * t[rt].u[i];
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    bld(1, 1, n);
    auto calc = [&amp;amp;](void) &amp;#123;
        mat f(1, 4);
        f[0][0] = 0;
        auto res = -inf;
        for (int i = 0; i &amp;lt;= 3; ++i) &amp;#123;
            auto r = (f * t[1].u[i]);
            for (int j = 0; j &amp;lt;= 3; ++j)
                if (i + j &amp;lt;= 3) &amp;#123;
                    res = std::max(res, r[0][j]);
                    // printf(&amp;quot;f[%d][%d] = %lld\n&amp;quot;, i, j, f[i][j]);
                &amp;#125;
        &amp;#125;
        return res;
    &amp;#125;;
    std::cout &amp;lt;&amp;lt; calc() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    int q;
    std::cin &amp;gt;&amp;gt; q;
    for (int x, v; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v;
        add(1, x, v);
        std::cout &amp;lt;&amp;lt; calc() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;发现矩阵本身和 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 无关，还可以可以共用一个线段树上的信息，就可以只开一个线段树了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;我写这一版本的原因是 &lt;code&gt;maxn&lt;/code&gt; 开大了导致 MLE，实际上四个线段树是没有任何空间压力的 😅&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 4e5 + 5;
const long long inf = 1e18;
struct mat &amp;#123;
    int n, m;
    long long a[4][4];
    mat() &amp;#123;&amp;#125;
    mat(int n1, int m1): n(n1), m(m1) &amp;#123;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int j = 0; j &amp;lt; m; ++j)
                a[i][j] = -inf;
        return;
    &amp;#125;
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat q) const &amp;#123;
        mat res(n, q.m);
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k)
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int l, r; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int a[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u = mat(4, 4);
        t[p].u[0][0] = t[p].u[1][0] = t[p].u[2][0] = t[p].u[3][0] = 0;
        t[p].u[0][1] = t[p].u[1][2] = t[p].u[2][3] = a[l];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    t[p].u = t[lt].u * t[rt].u;
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        t[p].u[0][1] = t[p].u[1][2] = t[p].u[2][3] = v;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x, v);
    else
        add(rt, x, v);
    t[p].u = t[lt].u * t[rt].u;
    return;
&amp;#125;
mat ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    return ask(lt, l, r) * ask(rt, l, r);
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    bld(1, 1, n);
    auto calc = [&amp;amp;](void) &amp;#123;
        mat f(1, 4);
        f[0][0] = 0, f[0][1] = f[0][2] = f[0][3] = -inf;
        auto r(f * ask(1, 2, n));
        auto res(*std::max_element(r[0], r[0] + 4));
        mat z(4, 4);
        z[0][0] = z[1][0] = z[2][0] = z[3][0] = 0ll;
        for (int i = 1; i &amp;lt;= 3; ++i) &amp;#123;
            mat op(4, 4);
            op[0][1] = op[1][2] = op[2][3] = a[i];
            f *= op;
            if (i + 2 &amp;lt;= n)
                r = f * z * ask(1, i + 2, n);
            else
                r = f * z;
            res = std::max(res, *std::max_element(r[0], r[0] + 4 - i));
        &amp;#125;
        return res;
    &amp;#125;;
    std::cout &amp;lt;&amp;lt; calc() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    int q;
    std::cin &amp;gt;&amp;gt; q;
    for (int x, v; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v, a[x] = v;
        add(1, x, v);
        std::cout &amp;lt;&amp;lt; calc() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;经典题gss3&#34;&gt;经典题：GSS3&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/SP1716&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/SP1716&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;怎么是子段和 😓&lt;/p&gt;
&lt;p&gt;同样列出能够矩阵乘法的 DP 式，发现限制在于至少要选一个数。设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}\)&lt;/span&gt; 表示选了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的最大值，&lt;span class=&#34;math inline&#34;&gt;\(g_i\)&lt;/span&gt; 表示历史最大值，则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_i=\max(f_{i-1}+a_i,0+a_i)\\
g_i=\max(g_{i-1}+0,f_{i-1}+a_i,0+a_i)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;容易发现是一个 + / max 矩乘，线段树维护即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 4e5 + 5;
const long long inf = 1e18;
struct mat &amp;#123;
    int n, m;
    long long a[3][3];
    mat() &amp;#123;&amp;#125;
    mat(int n1, int m1): n(n1), m(m1) &amp;#123;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int j = 0; j &amp;lt; m; ++j)
                a[i][j] = -inf;
        return;
    &amp;#125;
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat q) const &amp;#123;
        mat res(n, q.m);
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k)
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int l, r; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int a[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u = mat(3, 3);
        t[p].u[0][0] = t[p].u[2][0] = a[l];
        t[p].u[0][1] = a[l], t[p].u[1][1] = 0ll, t[p].u[2][1] = a[l];
        t[p].u[2][2] = 0ll;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    t[p].u = t[lt].u * t[rt].u;
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        t[p].u[0][0] = t[p].u[2][0] = t[p].u[0][1] = t[p].u[2][1] = v;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x, v);
    else
        add(rt, x, v);
    t[p].u = t[lt].u * t[rt].u;
    return;
&amp;#125;
mat ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    return ask(lt, l, r) * ask(rt, l, r);
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    bld(1, 1, n);
    auto calc = [&amp;amp;](int l, int r) &amp;#123;
        mat f(1, 3);
        f[0][2] = 0ll;
        auto res(f * ask(1, l, r));
        return res[0][1];
    &amp;#125;;
    int q;
    std::cin &amp;gt;&amp;gt; q;
    for (int op; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            int l, r;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
            std::cout &amp;lt;&amp;lt; calc(l, r) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
        else &amp;#123;
            int x, v;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v;
            a[x] = v, add(1, x, v);
        &amp;#125;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;动态树-dp&#34;&gt;动态树 DP&lt;/h2&gt;
&lt;p&gt;把上述过程放到树上，很容易想到树剖 + 线段树。&lt;/p&gt;
&lt;p&gt;由于认为线段树上的矩乘只能进行从重儿子到父亲的转移，轻儿子的转移会被合并为一个新函数（同时是矩阵的系数），在跳重链的时候被单独更新。&lt;/p&gt;
&lt;p&gt;由于两个函数相互依赖，需要思考清楚更新的先后顺序。&lt;/p&gt;
&lt;h3 id=&#34;模板动态-dp&#34;&gt;【模板】动态 DP&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4719&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4719&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 上，选 / 不选 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的最大价值。容易得出转移：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{u,0}=\sum\max(f_{v,0},f_{v,1})\\
f_{u,1}=a_i+\sum f_{v,0}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;把转移矩阵放到树剖上后，考虑更新，发现求和这一步很困难。解决方案是&lt;strong&gt;直接将求和用另一个函数代替&lt;/strong&gt;。定义 &lt;span class=&#34;math inline&#34;&gt;\(g_{u,0}\)&lt;/span&gt; 表示取 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;、不取 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的所有轻儿子的答案，&lt;span class=&#34;math inline&#34;&gt;\(g_{u,1}\)&lt;/span&gt; 不取 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，轻儿子可选可不选的答案。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 是可求的，且只需要在跳重链的时候更新 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt;。具体更新起来非常绞，因为 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 是相互依赖的，需要分清楚先后关系。&lt;/p&gt;
&lt;p&gt;首先 &lt;span class=&#34;math inline&#34;&gt;\(g_u\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 都会被更新；接着，重链上其它的 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 不会被影响，而链顶的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 需要被新的 &lt;span class=&#34;math inline&#34;&gt;\(g_u\)&lt;/span&gt; 更新；由此链顶父亲的 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 被更新；依次类推。注意到对于一个链顶，其 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 值是整条重链的乘积，故需要记录链底。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(q\log ^2n)\)&lt;/span&gt;。注意很重要的一点是线段树内乘法应从右往左。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
const int inf = 0x3f3f3f3f;
struct mat &amp;#123;
    int n, m, a[2][2];
    mat() &amp;#123;&amp;#125;
    mat(int n1, int m1): n(n1), m(m1) &amp;#123;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int j = 0; j &amp;lt; m; ++j)
                a[i][j] = -inf;
        return;
    &amp;#125;
    int* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat q) const &amp;#123;
        mat res(n, q.m);
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k)
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int l, r; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int g[maxn][2], tab[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        int u = tab[l];
        t[p].u = mat(2, 2);
        t[p].u[0][0] = t[p].u[1][0] = g[u][1];
        t[p].u[0][1] = g[u][0];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        int u = tab[x];
        t[p].u[0][0] = t[p].u[1][0] = g[u][1];
        t[p].u[0][1] = g[u][0];
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x);
    else
        add(rt, x);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
mat ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    return ask(rt, l, r) * ask(lt, l, r);
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), fa(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != fa[x]) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            g[x][0] = a[x];
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                    top[i] = i, DFS(i);
                    g[x][0] += f[i][0];
                    g[x][1] += std::max(f[i][1], f[i][0]);
                &amp;#125;
            f[x][0] = g[x][1] + std::max(f[son[x]][0], f[son[x]][1]);
            f[x][1] = g[x][0] + f[son[x]][0];
        &amp;#125;
        else
            f[x][1] = g[x][0] = a[x], bot[x] = x;
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    bld(1, 1, n);
    for (int x, v; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; v;
        g[x][0] -= a[x], g[x][0] += v, a[x] = v;
        for (; top[x] != 1; ) &amp;#123;
            auto r = ask(1, dfn[top[x]], dfn[bot[x]]);
            f[top[x]][0] = r[0][0], f[top[x]][1] = r[0][1];
            g[fa[top[x]]][0] -= f[top[x]][0];
            g[fa[top[x]]][1] -= std::max(f[top[x]][0], f[top[x]][1]);
            add(1, dfn[x]);
            r = ask(1, dfn[top[x]], dfn[bot[x]]);
            f[top[x]][0] = r[0][0], f[top[x]][1] = r[0][1];
            g[fa[top[x]]][0] += f[top[x]][0];
            g[fa[top[x]]][1] += std::max(f[top[x]][0], f[top[x]][1]);
            x = fa[top[x]];
        &amp;#125;
        add(1, dfn[x]);
        auto r = ask(1, dfn[1], dfn[bot[1]]);
        f[1][0] = r[0][0], f[1][1] = r[0][1];
        std::cout &amp;lt;&amp;lt; std::max(f[1][0], f[1][1]) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;全局平衡二叉树&#34;&gt;全局平衡二叉树&lt;/h2&gt;
&lt;p&gt;回顾树剖（重剖），功能在于解决路径问题，单次操作能够在 &lt;span class=&#34;math inline&#34;&gt;\(O(\log^2 n)\)&lt;/span&gt; 的时间内完成。这个功能可以被&lt;strong&gt;全局平衡二叉树（GBT）&lt;/strong&gt;上位替代。GBT 能够在单次 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 的复杂度内完成链操作、子树操作。&lt;em&gt;&lt;a href=&#34;QTREE解法的一些研究.pdf&#34;&gt;Yang Zhe - SPOJ375 QTREE 解法的一些研究&lt;/a&gt; 中更为详细严谨地对 GBT 进行了说明，我传了份文件上来。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;考虑树剖能被卡的原因：每次线段树询问都会卡满 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt;，找一条卡得满 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 次跳重链次数的路径一直薅，就可以卡到 &lt;span class=&#34;math inline&#34;&gt;\(O(\log^2 n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;在实现线段树时发现，对于&lt;strong&gt;路径操作&lt;/strong&gt;和&lt;strong&gt;单点操作&lt;/strong&gt;，树剖只需要维护同一条重链的信息，建一个大线段树会产生许多重链间的无效维护。故一种经典的树剖卡常技巧是对于每一条重链建出线段树。&lt;/p&gt;
&lt;p&gt;在本文中定义&lt;strong&gt;全局二叉树&lt;/strong&gt;：将单个线段树按照在原树上重链顶的相对祖孙关系连边得到的模型。这里为了和&lt;strong&gt;全局平衡二叉树&lt;/strong&gt;形成照应而命名，实际上模型并不是二叉树。容易发现&lt;strong&gt;修改某个点花费的操作次数和其在全局二叉树中的深度相同&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;考虑本方法理论上仍可卡到 &lt;span class=&#34;math inline&#34;&gt;\(O(\log^2 n)\)&lt;/span&gt; 单次操作的原因，虽然单个线段树平衡，但&lt;strong&gt;全局二叉树&lt;/strong&gt;并不平衡；能够构造数据使得树高达到 &lt;span class=&#34;math inline&#34;&gt;\(\log^2 n\)&lt;/span&gt;。考虑使得全局二叉树平衡，即调整线段树结构使得任何一个点在全局二叉树上的左右儿子大小最接近。发现是易做的，只需在建线段树时移动左右儿子分割点使得两边子树大小均为全树的一半即可。&lt;/p&gt;
&lt;p&gt;法一：求出每个点的轻子树大小 &lt;span class=&#34;math inline&#34;&gt;\(ls_u=1+\sum siz_v\)&lt;/span&gt;，作为加权在线段树上找 mid 就能满足全局平衡；证明可以见上面的论文。这里用线段树代替了 BST，常数很大。&lt;/p&gt;
&lt;p&gt;法二：用一个 BST 实现上述功能，需要满足：任意子树的根为子树的带权 mid；BST 的中序遍历为原重链。显然有：树高为 log 级别。这就决定了所有问题都可以通过暴力爬山解决。&lt;/p&gt;
&lt;p&gt;GBT 能够快速维护&lt;strong&gt;普通树剖操作&lt;/strong&gt;和 &lt;strong&gt;DDP 信息&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;维护-ddp模板动态-dp加强版&#34;&gt;维护 DDP：【模板】动态 DP（加强版）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4751&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4751&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和未加强版类似，把所有线段树操作替换为 BST 即可。如果写得丑可能需要一些额外的卡常技巧。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e6 + 5;
const int inf = 0x3f3f3f3f;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
struct mat &amp;#123;
    int a[2][2];
    int* operator[] (const int q) &amp;#123; 
        return a[q];
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        res[0][0] = res[0][1] = res[1][0] = res[1][1] = -inf;
        for (int i = 0; i &amp;lt; 2; ++i)
            for (int k = 0; k &amp;lt; 2; ++k)
                for (int j = 0; j &amp;lt; 2; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int lc, rc, fa; mat u; &amp;#125; t[maxn]; 
int g[maxn][2], tab[maxn], ls[maxn];
mat p[maxn];
void pushup(int x) &amp;#123;
    t[x].u = t[t[x].rc].u * p[x] * t[t[x].lc].u;
    return;
&amp;#125;
void bld(int &amp;amp;x, int l, int r) &amp;#123;
    if (l &amp;gt; r)
        return;
    int s = 0, k = 0;
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    for (int i = l; i &amp;lt;= r; ++i, k += ls[tab[i]])
        if ((k + ls[tab[i]]) * 2 &amp;gt; s) &amp;#123;
            x = tab[i];
            bld(t[x].lc, l, i - 1), t[t[x].lc].fa = x;
            bld(t[x].rc, i + 1, r), t[t[x].rc].fa = x;
            pushup(x);
            break;
        &amp;#125;
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    t[0].u[0][0] = t[0].u[1][1] = 0, t[0].u[0][1] = t[0].u[1][0] = -inf;
    int n, q;
    read(n), read(q);
    std::vector&amp;lt;int&amp;gt; a(n + 1), rt(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; son(n + 1), fa(n + 1), siz(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != fa[x]) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x, ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            g[x][0] = a[x];
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                    top[i] = i, DFS(i), t[rt[i]].fa = x;
                    ls[x] += siz[i];
                    g[x][0] += f[i][0];
                    g[x][1] += std::max(f[i][1], f[i][0]);
                &amp;#125;
            f[x][0] = g[x][1] + std::max(f[son[x]][0], f[son[x]][1]);
            f[x][1] = g[x][0] + f[son[x]][0];
        &amp;#125;
        else
            f[x][1] = g[x][0] = a[x], bot[x] = x;
        p[x][0][0] = p[x][1][0] = g[x][1];
        p[x][0][1] = g[x][0], p[x][1][1] = -inf;
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    for (int x, v, la = 0; q--; ) &amp;#123;
        read(x), read(v), x ^= la;
        p[x][0][1] += v - a[x], a[x] = v;
        for (; x; ) &amp;#123;
            int fa = t[x].fa;
            if (fa &amp;amp;&amp;amp; x != t[fa].lc &amp;amp;&amp;amp; x != t[fa].rc) &amp;#123;
                int f0 = t[x].u[0][0], f1 = std::max(f0, t[x].u[0][1]);
                pushup(x);
                int F0 = t[x].u[0][0], F1 = std::max(F0, t[x].u[0][1]);
                p[fa][0][0] += F1 - f1, p[fa][1][0] += F1 - f1;
                p[fa][0][1] += F0 - f0;
            &amp;#125;
            else
                pushup(x);
            x = fa;
        &amp;#125;
        print(la = std::max(t[rt[1]].u[0][0], t[rt[1]].u[0][1]), &amp;#39;\n&amp;#39;);
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;也给出一个线段树版本的&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e6 + 5;
const int inf = 0x3f3f3f3f;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
struct mat &amp;#123;
    int a[2][2];
    int* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat q) const &amp;#123;
        mat res;
        res[0][0] = res[0][1] = res[1][0] = res[1][1] = -inf;
        for (int i = 0; i &amp;lt; 2; ++i)
            for (int k = 0; k &amp;lt; 2; ++k)
                for (int j = 0; j &amp;lt; 2; ++j)
                    res[i][k] = std::max(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int lc, rc, l, r, mid; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int g[maxn][2], tab[maxn], ls[maxn];
#define lt t[p].lc
#define rt t[p].rc
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    static int tot = 0;
    p = ++tot, t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        int u = tab[l];
        t[p].u[0][0] = t[p].u[1][0] = g[u][1];
        t[p].u[0][1] = g[u][0], t[p].u[1][1] = -inf;
        return;
    &amp;#125;
    int s = 0, u = ls[tab[l]];
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    s &amp;gt;&amp;gt;= 1;
    t[p].mid = r - 1;
    for (int i = l + 1; i &amp;lt; r; ++i) &amp;#123;
        u += ls[tab[i]];
        if (u + ls[tab[i + 1]] &amp;gt; s) &amp;#123;
            t[p].mid = i;
            break;
        &amp;#125;
    &amp;#125;
    bld(lt, l, t[p].mid), bld(rt, t[p].mid + 1, r);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        int u = tab[x];
        t[p].u[0][0] = t[p].u[1][0] = g[u][1];
        t[p].u[0][1] = g[u][0];
        return;
    &amp;#125;
    if (x &amp;lt;= t[p].mid)
        add(lt, x);
    else
        add(rt, x);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
mat ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    if (r &amp;lt;= t[p].mid)
        return ask(lt, l, r);
    if (l &amp;gt; t[p].mid)
        return ask(rt, l, r);
    return ask(rt, l, r) * ask(lt, l, r);
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q;
    read(n), read(q);
    std::vector&amp;lt;int&amp;gt; a(n + 1), rt(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), fa(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != fa[x]) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x;
        ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            g[x][0] = a[x];
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                    top[i] = i, DFS(i);
                    ls[x] += siz[i];
                    g[x][0] += f[i][0];
                    g[x][1] += std::max(f[i][1], f[i][0]);
                &amp;#125;
            f[x][0] = g[x][1] + std::max(f[son[x]][0], f[son[x]][1]);
            f[x][1] = g[x][0] + f[son[x]][0];
        &amp;#125;
        else
            f[x][1] = g[x][0] = a[x], bot[x] = x;
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    for (int x, v, la = 0; q--; ) &amp;#123;
        read(x), read(v), x ^= la;
        g[x][0] -= a[x], g[x][0] += v, a[x] = v;
        for (; top[x] != 1; ) &amp;#123;
            auto r = t[rt[top[x]]].u;
            f[top[x]][0] = r[0][0], f[top[x]][1] = r[0][1];
            g[fa[top[x]]][0] -= f[top[x]][0];
            g[fa[top[x]]][1] -= std::max(f[top[x]][0], f[top[x]][1]);
            add(rt[top[x]], dfn[x]);
            r = t[rt[top[x]]].u;
            f[top[x]][0] = r[0][0], f[top[x]][1] = r[0][1];
            g[fa[top[x]]][0] += f[top[x]][0];
            g[fa[top[x]]][1] += std::max(f[top[x]][0], f[top[x]][1]);
            x = fa[top[x]];
        &amp;#125;
        add(rt[1], dfn[x]);
        auto r =  t[rt[1]].u;
        f[1][0] = r[0][0], f[1][1] = r[0][1];
        std::cout &amp;lt;&amp;lt; (la = std::max(f[1][0], f[1][1])) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;树上路径问题染色&#34;&gt;树上路径问题：染色&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2486&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2486&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GBT 上的&lt;strong&gt;路径问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;BST：首先暴力爬山到 LCA，统计一路上的答案；然后跳到当前 BST 的根。由于本题有标记，所以需要在跳的同时想办法把标记问题解决一下。&lt;/p&gt;
&lt;p&gt;线段树：把树剖的线段树略改一下就过了。从上一行模棱两可的描述就可以看出来 BST 实现起来不太轻松；还是线段树更轮椅啊！&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;跑得没纯树剖快，因为数据没有刻意构造导致树高很低，再加上常数的影响吧。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void read(char &amp;amp;x) &amp;#123;
    for (x = nec(); x != &amp;#39;C&amp;#39; &amp;amp;&amp;amp; x != &amp;#39;Q&amp;#39;; x = nec());
    return;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
class node &amp;#123;
private:
    int lt, rt;
public:
    int l, r, mid, lc, rc, u, d;
    node(): u(-1) &amp;#123;&amp;#125;
    inline int&amp;amp; ls(void) &amp;#123; return lt; &amp;#125;
    inline int&amp;amp; rs(void) &amp;#123; return rt; &amp;#125;
    node&amp;amp; operator= (const node &amp;amp;q) &amp;#123;
        lc = q.lc, rc = q.rc, u = q.u;
        return *this;
    &amp;#125;
    node operator+ (const node &amp;amp;q) const &amp;#123;
        if (u == -1)
            return q;
        if (q.u == -1)
            return *this;
        node res;
        res.lc = lc, res.rc = q.rc, res.u = u + q.u - (rc == q.lc);
        return res;
    &amp;#125;
    inline void swap(void) &amp;#123;
        if (~u)
            lc ^= rc ^= lc ^= rc;
        return;
    &amp;#125;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int tab[maxn], ls[maxn], a[maxn];
#define lt t[p].ls()
#define rt t[p].rs()
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    static int tot = 0;
    p = ++tot, t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u = 1;
        t[p].lc = t[p].rc = a[tab[l]];
        return;
    &amp;#125;
    int s = 0, u = ls[tab[l]];
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    s &amp;gt;&amp;gt;= 1;
    t[p].mid = r - 1;
    for (int i = l + 1; i &amp;lt; r; ++i) &amp;#123;
        u += ls[tab[i]];
        if (u + ls[tab[i + 1]] &amp;gt; s) &amp;#123;
            t[p].mid = i;
            break;
        &amp;#125;
    &amp;#125;
    bld(lt, l, t[p].mid), bld(rt, t[p].mid + 1, r);
    t[p] = t[lt] + t[rt];
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d = t[lt].lc = t[lt].rc = t[rt].d = t[rt].lc = t[rt].rc = t[p].d;
        t[lt].u = t[rt].u = 1;
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void add(int p, int l, int r, int v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].u = 1;
        t[p].lc = t[p].rc = t[p].d = v;
        return;
    &amp;#125;
    pushdown(p);
    if (l &amp;lt;= t[p].mid)
        add(lt, l, r, v);
    if (r &amp;gt; t[p].mid)
        add(rt, l, r, v);
    t[p] = t[lt] + t[rt];
    return;
&amp;#125;
node ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p];
    pushdown(p);
    if (r &amp;lt;= t[p].mid)
        return ask(lt, l, r);
    if (l &amp;gt; t[p].mid)
        return ask(rt, l, r);
    return ask(lt, l, r) + ask(rt, l, r);
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
#else
    std::freopen(&amp;quot;paint17.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q;
    read(n), read(q);
    std::vector&amp;lt;int&amp;gt; rt(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), fa(n + 1), dep(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != fa[x]) &amp;#123;
                dep[i] = dep[x] + 1;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x, ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
        &amp;#125;
        else
            bot[x] = x;
        for (auto i : g[x])
            if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                top[i] = i;
                DFS(i);
                ls[x] += siz[i];
            &amp;#125;
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    for (char op; q--; ) &amp;#123;
        read(op);
        if (op == &amp;#39;C&amp;#39;) &amp;#123;
            int x, y, c;
            read(x), read(y), read(c);
            for (; top[x] != top[y]; x = fa[top[x]]) &amp;#123;
                if (dep[top[x]] &amp;lt; dep[top[y]])
                    std::swap(x, y);
                add(rt[top[x]], dfn[top[x]], dfn[x], c);
            &amp;#125;
            if (dep[x] &amp;gt; dep[y])
                std::swap(x, y);
            add(rt[top[x]], dfn[x], dfn[y], c);
        &amp;#125;
        else &amp;#123;
            int x, y;
            read(x), read(y);
            node res1, res2;
            for (; top[x] != top[y]; )
                if (dep[top[x]] &amp;lt; dep[top[y]]) &amp;#123;
                    res2 = ask(rt[top[y]], dfn[top[y]], dfn[y]) + res2;
                    y = fa[top[y]];
                &amp;#125;
                else &amp;#123;
                    res1 = ask(rt[top[x]], dfn[top[x]], dfn[x]) + res1;
                    x = fa[top[x]];
                &amp;#125;
            if (dep[x] &amp;gt; dep[y])
                res1 = ask(rt[top[y]], dfn[y], dfn[x]) + res1;
            else
                res2 = ask(rt[top[x]], dfn[x], dfn[y]) + res2;
            res1.swap();
            print((res1 + res2).u, &amp;#39;\n&amp;#39;);
        &amp;#125;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;树上路径查询&#34;&gt;树上路径查询？&lt;/h3&gt;
&lt;p&gt;做题的时候可以感受到，路径询问的存在很诡异，因为只需要一条链的操作，更偏向链上 DDP 而非树上的；&lt;strong&gt;轻儿子的信息是不用维护的&lt;/strong&gt;，形式上更像树剖（DS）；当成链上的 DDP 就可以解决了。&lt;/p&gt;
&lt;p&gt;可以用倍增维护 DDP（不用考虑轻重儿子，只用维护父子关系，进一步向序列 DDP 靠近），就不用打 GBT 了，常数也会小一些。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;习题&#34;&gt;习题&lt;/h2&gt;
&lt;p&gt;GBT 就统一用线段树了。DDP 也就可以顺带用 GBT 优化了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e---猫或狗-cats-or-dogs&#34;&gt;E - 猫或狗 / Cats or Dogs&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9597&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9597&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1}\)&lt;/span&gt; 表示从根上颜色为 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt; 时的最小断边数，显然无色可以视作任选一个颜色。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{u,a}=\sum\limits_v\min\limits_{b\in\{0,1\}}\{f_{v,b}+[a\ne b]\}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;直接把轻儿子的项提出来，记 &lt;span class=&#34;math inline&#34;&gt;\(g_{u,0/1}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1}\)&lt;/span&gt; 对应的轻儿子贡献即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
const int inf = 0x3f3f3f3f;
struct mat &amp;#123;
    int a[2][2];
    int* operator[] (const int q) &amp;#123; 
        return a[q];
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        res[0][0] = res[0][1] = res[1][0] = res[1][1] = inf;
        for (int i = 0; i &amp;lt; 2; ++i)
            for (int k = 0; k &amp;lt; 2; ++k)
                for (int j = 0; j &amp;lt; 2; ++j)
                    res[i][k] = std::min(res[i][k], a[i][j] + q[j][k]);
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125; p[maxn];
struct &amp;#123; int lc, rc, l, r, mid; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int ls[maxn], tab[maxn], g[maxn][2], rt[maxn], top[maxn], dfn[maxn], fa[maxn];
std::vector&amp;lt;int&amp;gt; a;
#define lt t[p].lc
#define rt t[p].rc
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    static int tot = 0;
    p = ++tot, t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u[0][1] = t[p].u[1][0] = 1;
        return;
    &amp;#125;
    int s = 0, u = ls[tab[l]];
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    s &amp;gt;&amp;gt;= 1;
    t[p].mid = r - 1;
    for (int i = l + 1; i &amp;lt; r; ++i) &amp;#123;
        u += ls[tab[i]];
        if (u + ls[tab[i + 1]] &amp;gt; s) &amp;#123;
            t[p].mid = i;
            break;
        &amp;#125;
    &amp;#125;
    bld(lt, l, t[p].mid), bld(rt, t[p].mid + 1, r);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        int u = tab[x], g0 = (a[u] == 1 ? inf : g[u][0]), g1 = (a[u] == 0 ? inf : g[u][1]);
        t[p].u[0][0] = g0, t[p].u[0][1] = g1 + 1;
        t[p].u[1][0] = g0 + 1, t[p].u[1][1] = g1;
        return;
    &amp;#125;
    if (x &amp;lt;= t[p].mid)
        add(lt, x);
    else
        add(rt, x);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
#undef lt
#undef rt
void initialize(int n, std::vector&amp;lt;int&amp;gt; A, std::vector&amp;lt;int&amp;gt; B) &amp;#123;
    a.assign(n + 1, -1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 0; i &amp;lt; n - 1; ++i)
        g1[A[i]].push_back(B[i]), g1[B[i]].push_back(A[i]);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != fa[x]) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;int&amp;gt; bot(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x, ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                    top[i] = i, DFS(i);
                    ls[x] += siz[i];
                &amp;#125;
        &amp;#125;
        else
            bot[x] = x;
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    return;
&amp;#125;
int upd(int x) &amp;#123;
    for (; top[x] != 1; ) &amp;#123;
        int faa = fa[top[x]];
        auto &amp;amp;id = t[rt[top[x]]].u;
        int f0 = std::min(id[0][0], id[1][0]), f1 = std::min(id[0][1], id[1][1]);
        g[faa][0] -= std::min(f0, f1 + 1);
        g[faa][1] -= std::min(f0 + 1, f1);
        add(rt[top[x]], dfn[x]);
        f0 = std::min(id[0][0], id[1][0]), f1 = std::min(id[0][1], id[1][1]);
        // printf(&amp;quot;%d: f0 = %d, f1 = %d\n&amp;quot;, top[x], f0, f1);
        g[faa][0] += std::min(f0, f1 + 1);
        g[faa][1] += std::min(f0 + 1, f1);
        x = faa;
    &amp;#125;
    add(rt[1], dfn[x]);
    auto &amp;amp;id = t[rt[1]].u;
    int f0 = std::min(id[0][0], id[1][0]), f1 = std::min(id[0][1], id[1][1]);
    // printf(&amp;quot;%d: f0 = %d, f1 = %d\n&amp;quot;, 1, f0, f1);
    return std::min(f0, f1);
&amp;#125;
int cat(int x) &amp;#123;
    a[x] = 0;
    return upd(x);
&amp;#125;
int dog(int x) &amp;#123;
    a[x] = 1;
    return upd(x);
&amp;#125;
int neighbor(int x) &amp;#123;
    a[x] = -1;
    return upd(x);
&amp;#125;
#ifndef ONLINE_JUDGE
int main() &amp;#123;
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; A(n - 1), B(n - 1);
    for (int i = 0; i &amp;lt; n - 1; ++i)
        std::cin &amp;gt;&amp;gt; A[i] &amp;gt;&amp;gt; B[i];
    initialize(n, A, B);
    int q;
    std::cin &amp;gt;&amp;gt; q;
    for (int op, x; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; op &amp;gt;&amp;gt; x;
        std::cout &amp;lt;&amp;lt; (op == 1 ? cat(x) : (op == 2 ? dog(x) : neighbor(x))) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
    return 0;
&amp;#125;
#endif&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f---hash-on-tree&#34;&gt;F - Hash on Tree&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/AT_abc351_g&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/AT_abc351_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;记 &lt;span class=&#34;math inline&#34;&gt;\(g_x\)&lt;/span&gt; 为轻儿子的哈希值之积，则 &lt;span class=&#34;math inline&#34;&gt;\(f_u=A_u+f_{son}\cdot g_u\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后开一个常数维即可。快速幂的 log 省不掉，所以是双 log 的。&lt;/p&gt;
&lt;p&gt;初值和修改都有可能为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，需要维护实际哈希值和去掉 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的哈希值。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e6 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
const int mod = 998244353;
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
struct mat &amp;#123;
    int n, m;
    long long a[2][2];
    long long* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        res.n = n, res.m = q.m;
        res[0][0] = res[0][1] = res[1][0] = res[1][1] = 0ll;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k) &amp;#123;
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] += a[i][j] * q[j][k];
                res[i][k] %= mod;
            &amp;#125;
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int lc, rc, l, r, mid; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
long long g[maxn];
int tab[maxn], ls[maxn], a[maxn];
#define lt t[p].lc
#define rt t[p].rc
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    static int tot = 0;
    p = ++tot, t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        int u = tab[l];
        t[p].u.n = t[p].u.m = 2;
        t[p].u[0][0] = g[u];
        t[p].u[0][1] = 0ll;
        t[p].u[1][0] = a[u];
        t[p].u[1][1] = 1ll;
        return;
    &amp;#125;
    int s = 0, u = ls[tab[l]];
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    s &amp;gt;&amp;gt;= 1;
    t[p].mid = r - 1;
    for (int i = l + 1; i &amp;lt; r; ++i) &amp;#123;
        u += ls[tab[i]];
        if (u + ls[tab[i + 1]] &amp;gt; s) &amp;#123;
            t[p].mid = i;
            break;
        &amp;#125;
    &amp;#125;
    bld(lt, l, t[p].mid), bld(rt, t[p].mid + 1, r);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        int u = tab[x];
        t[p].u[0][0] = g[u];
        t[p].u[1][0] = a[u];
        return;
    &amp;#125;
    if (x &amp;lt;= t[p].mid)
        add(lt, x);
    else
        add(rt, x);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n, q;
    read(n), read(q);
    std::vector&amp;lt;int&amp;gt; rt(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 2, x; i &amp;lt;= n; ++i) &amp;#123;
        read(x);
        g1[i].push_back(x), g1[x].push_back(i);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), fa(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != fa[x]) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1), la(n + 1), cnt(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x, ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            g[x] = 1ll;
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != fa[x]) &amp;#123;
                    top[i] = i, DFS(i);
                    ls[x] += siz[i];
                    if (f[i] == 0ll)
                        ++cnt[x];
                    else
                        (la[x] *= f[i]) %= mod;
                    (g[x] *= f[i]) %= mod;
                &amp;#125;
            f[x] = (a[x] + g[x] * f[son[x]]) % mod;
        &amp;#125;
        else
            f[x] = a[x], bot[x] = x;
        // printf(&amp;quot;f[%d] = %lld\n&amp;quot;, x, f[x]);
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    mat init;
    init.n = 1, init.m = 2;
    init[0][0] = 0ll, init[0][1] = 1ll;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto inv = [&amp;amp;](int x) &amp;#123;
        return qkp(x, mod - 2);
    &amp;#125;;
    for (int x, v; q--; ) &amp;#123;
        read(x), read(v);
        a[x] = v;
        for (; top[x] != 1; ) &amp;#123;
            int faa = fa[top[x]];
            auto &amp;amp;id = t[rt[top[x]]].u;
            int f = (init * id)[0][0];
            if (f == 0) &amp;#123;
                if (--cnt[faa] == 0)
                    g[faa] = la[faa];
            &amp;#125;
            else &amp;#123;
                f = inv(f);
                (g[faa] *= f) %= mod;
                (la[faa] *= f) %= mod;
            &amp;#125;
            add(rt[top[x]], dfn[x]);
            f = (init * id)[0][0];
            if (f == 0) &amp;#123;
                if (cnt[faa]++ == 0)
                    la[faa] = g[faa];
                g[faa] = 0ll;
            &amp;#125;
            else &amp;#123;
                (g[faa] *= f) %= mod;
                (la[faa] *= f) %= mod;
            &amp;#125;
            x = faa;
        &amp;#125;
        add(rt[1], dfn[x]);
        auto &amp;amp;id = t[rt[1]].u;
        int f = (init * id)[0][0];
        std::cout &amp;lt;&amp;lt; f &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;g---考试-2&#34;&gt;G - 考试 2&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10626&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10626&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运算均是线性的，容易想到『按位』维护，即只维护某个特定点值。如果将询问离线下来排序，每个函数的点值只会变化 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 次。&lt;/p&gt;
&lt;p&gt;建出符号二叉树，进行 DDP 即可。具体地，令 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 表示在运算 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 处的答案，计算 &lt;span class=&#34;math inline&#34;&gt;\(g_u\)&lt;/span&gt; 为轻儿子的答案，按照 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 处的符号写矩阵即可。叶子不是一次运算，应该直接填入点值（注意线段树上的叶子不一定是原树上的叶子）。&lt;/p&gt;
&lt;p&gt;建树和矩阵更新有点史，适当封装一下感觉会好一点&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e6 + 5;
const char mp[] = &amp;quot;x!&amp;amp;|^&amp;quot;;
const int LEN = (1 &amp;lt;&amp;lt; 20);
#define nec getchar
inline bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
struct mat &amp;#123;
    int n, m;
    int a[2][2];
    int* operator[] (const int q) &amp;#123;
        return a[q];
    &amp;#125;
    inline mat operator* (mat &amp;amp;q) const &amp;#123;
        mat res;
        res.n = n, res.m = q.m;
        res[0][0] = res[0][1] = res[1][0] = res[1][1] = 0ll;
        for (int i = 0; i &amp;lt; n; ++i)
            for (int k = 0; k &amp;lt; q.m; ++k)
                for (int j = 0; j &amp;lt; m; ++j)
                    res[i][k] += a[i][j] * q[j][k];
        return res;
    &amp;#125;
    mat&amp;amp; operator*= (mat &amp;amp;q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
&amp;#125;;
struct &amp;#123; int lc, rc, l, r, mid; mat u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2]; 
int g1[maxn][2];
int g[maxn], ty[maxn];
int tab[maxn], ls[maxn], lim[maxn];
#define lt t[p].lc
#define rt t[p].rc
void fillmat(mat &amp;amp;a, int op, int g) &amp;#123;
    if (op == 0) &amp;#123;
        a.n = 1, a.m = 2;
        a[0][!g] = 0, a[0][g] = 1;
        return;
    &amp;#125;
    a.n = 2, a.m = 2;
    switch (op) &amp;#123;
    case 1: // !
        a[0][0] = 0, a[0][1] = 1;
        a[1][0] = 1, a[1][1] = 0;
        break;
    case 2: // &amp;amp;
        a[0][0] = 1, a[0][1] = 0;
        a[1][0] = !g, a[1][1] = g;
        break;
    case 3: // |
        a[0][0] = !g, a[0][1] = g;
        a[1][0] = 0, a[1][1] = 1;
        break;
    case 4: // ^
        a[0][0] = !g, a[0][1] = g;
        a[1][0] = g, a[1][1] = !g;
        break;
    default:
        assert(0);
    &amp;#125;
    return;
&amp;#125;
void bld(int &amp;amp;p, int l, int r) &amp;#123;
    static int tot = 0;
    p = ++tot, t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        fillmat(t[p].u, ty[tab[l]], g[tab[l]]);
        return;
    &amp;#125;
    int s = 0, u = ls[tab[l]];
    for (int i = l; i &amp;lt;= r; ++i)
        s += ls[tab[i]];
    s &amp;gt;&amp;gt;= 1;
    t[p].mid = r - 1;
    for (int i = l + 1; i &amp;lt; r; ++i) &amp;#123;
        u += ls[tab[i]];
        if (u + ls[tab[i + 1]] &amp;gt; s) &amp;#123;
            t[p].mid = i;
            break;
        &amp;#125;
    &amp;#125;
    bld(lt, l, t[p].mid), bld(rt, t[p].mid + 1, r);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
void add(int p, int x) &amp;#123;
    if (t[p].l == t[p].r) &amp;#123;
        fillmat(t[p].u, ty[tab[t[p].l]], g[tab[t[p].l]]);
        return;
    &amp;#125;
    if (x &amp;lt;= t[p].mid)
        add(lt, x);
    else
        add(rt, x);
    t[p].u = t[rt].u * t[lt].u;
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifndef ONLINE_JUDGE
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int n = 0, q, p;
    read(q), read(q);
    &amp;#123;
        std::string s;
        std::cin &amp;gt;&amp;gt; s;
        std::stringstream in(s);
        std::stack&amp;lt;char&amp;gt; op;
        std::stack&amp;lt;int&amp;gt; id;
        auto trans = [&amp;amp;](char t) &amp;#123;
            switch (t) &amp;#123;
            case &amp;#39;!&amp;#39;:
                return 1;
            case &amp;#39;&amp;amp;&amp;#39;:
                return 2;
            case &amp;#39;|&amp;#39;:
                return 3;
            case &amp;#39;^&amp;#39;:
                return 4;
            &amp;#125;
            assert(0);
            return -1;
        &amp;#125;;
        auto calcNot = [&amp;amp;](void) &amp;#123;
            for (; !op.empty() &amp;amp;&amp;amp; op.top() == &amp;#39;!&amp;#39;; ) &amp;#123;
                ty[++n] = trans(op.top());
                g1[n][0] = id.top(), id.pop(), id.push(n);
                op.pop();
            &amp;#125;
            return;
        &amp;#125;;
        auto opt = [&amp;amp;](void) &amp;#123;
            ty[++n] = trans(op.top());
            g1[n][0] = id.top(), id.pop();
            g1[n][1] = id.top(), id.pop();
            id.push(n), op.pop();
            return;
        &amp;#125;;
        for (char t; in &amp;gt;&amp;gt; t; )
            if (t == &amp;#39;[&amp;#39;) &amp;#123;
                int x;
                in &amp;gt;&amp;gt; x, in &amp;gt;&amp;gt; t;
                lim[++n] = x - 1;
                id.push(n), calcNot();
            &amp;#125;
            else if (t == &amp;#39;(&amp;#39;)
                op.push(t);
            else if (t == &amp;#39;)&amp;#39;) &amp;#123;
                for (; op.top() != &amp;#39;(&amp;#39;; opt());
                op.pop(), calcNot();
            &amp;#125;
            else if (t == &amp;#39;&amp;amp;&amp;#39;)
                op.push(t);
            else if (t == &amp;#39;^&amp;#39;) &amp;#123;
                for (; !op.empty() &amp;amp;&amp;amp; op.top() == &amp;#39;&amp;amp;&amp;#39;; opt());
                op.push(t);
            &amp;#125;
            else if (t == &amp;#39;|&amp;#39;) &amp;#123;
                for (; !op.empty() &amp;amp;&amp;amp; (op.top() == &amp;#39;&amp;amp;&amp;#39; || op.top() == &amp;#39;^&amp;#39;); opt());
                op.push(t);
            &amp;#125;
            else &amp;#123;
                assert(t == &amp;#39;!&amp;#39;);
                op.push(t);
            &amp;#125;
        for (; !op.empty(); opt());
        p = id.top();
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; rt(n + 1);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), fa(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != 0) &amp;#123;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(p);
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), bot(n + 1), dfn(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, tab[now] = x, ls[x] = 1;
        if (son[x]) &amp;#123;
            top[son[x]] = top[x], DFS(son[x]);
            bot[x] = bot[son[x]];
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != 0) &amp;#123;
                    top[i] = i, DFS(i);
                    ls[x] += siz[i], g[x] = f[i];
                &amp;#125;
            switch (ty[x]) &amp;#123;
            case 1:
                f[x] = !f[son[x]];
                break;
            case 2:
                f[x] = g[x] &amp;amp; f[son[x]];
                break;
            case 3:
                f[x] = g[x] | f[son[x]];
                break;
            case 4:
                f[x] = g[x] ^ f[son[x]];
                break;
            default:
                assert(0);
                break;
            &amp;#125;
        &amp;#125;
        else
            assert(!ty[x]), f[x] = g[x] = 0, bot[x] = x;
        if (x == top[x])
            bld(rt[x], dfn[x], dfn[bot[x]]);
        return;
    &amp;#125;;
    top[p] = p, DFS(p);
    std::vector&amp;lt;int&amp;gt; a(q + 1), res(q + 1);
    for (int i = 1; i &amp;lt;= q; ++i)
        read(a[i]);
    std::vector&amp;lt;int&amp;gt; qid(q), nid;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (ty[i] == 0)
            nid.push_back(i);
    std::iota(qid.begin(), qid.end(), 1);
    std::sort(qid.begin(), qid.end(), [&amp;amp;](int x, int y) &amp;#123; return a[x] &amp;lt; a[y]; &amp;#125;);
    std::sort(nid.begin(), nid.end(), [&amp;amp;](int x, int y) &amp;#123; return lim[x] &amp;gt; lim[y]; &amp;#125;);
    for (auto i : qid) &amp;#123;
        for (; !nid.empty() &amp;amp;&amp;amp; lim[nid.back()] &amp;lt; a[i]; ) &amp;#123;
            int x = nid.back();
            nid.pop_back();
            g[x] = 1;
            for (; top[x] != p; ) &amp;#123;
                add(rt[top[x]], dfn[x]);
                g[fa[top[x]]] = t[rt[top[x]]].u[0][1];
                x = fa[top[x]];
            &amp;#125;
            add(rt[p], dfn[x]);
        &amp;#125;
        res[i] = t[rt[p]].u[0][1];
    &amp;#125;
    for (int i = 1; i &amp;lt;= q; ++i)
        if (res[i])
            std::cout &amp;lt;&amp;lt; &amp;quot;True\n&amp;quot;;
        else
            std::cout &amp;lt;&amp;lt; &amp;quot;False\n&amp;quot;;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <category term="DDP" />
        <updated>2025-08-12T00:16:52.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250809/</id>
        <title>近期杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250809/"/>
        <content type="html">&lt;p&gt;这段时间比赛的一些题 和 nKessi、duanyu 讲的题目。太偏计数、数学的基本上没办法做了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-出关&#34;&gt;A. 出关&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6462/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6462/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，对于一个空串，任意利用下列三种操作，使其变为 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，求最小代价：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;在末尾添加字符 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;，代价为 &lt;span class=&#34;math inline&#34;&gt;\(t_{0,c}\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;复制整个字符串并粘贴在末尾，代价为 &lt;span class=&#34;math inline&#34;&gt;\(t_1\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;删除末尾字符，代价为 &lt;span class=&#34;math inline&#34;&gt;\(t_2\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(|s|\le 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以预处理出对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 结尾，最多可以复制到哪个地方，发现要求 &lt;span class=&#34;math inline&#34;&gt;\(z_i=lcp(s_{1\dots n},s_{i+1\dots n})\)&lt;/span&gt;。那么一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的最远转移点 &lt;span class=&#34;math inline&#34;&gt;\(r_i=i+z_{i+1}\)&lt;/span&gt;，用单调队列就能维护，会 exkmp 就能线性；&lt;/p&gt;
&lt;p&gt;否则可以二分 + 哈希多个 log，后面也有理由偷懒用优先队列了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int p = 31;
const int mod = 998244353;
int main() &amp;#123;
    std::freopen(&amp;quot;laozi.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;laozi.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    int n = (int)s.length(), t1, t2;
    std::vector&amp;lt;long long&amp;gt; h(n + 1), base(n + 1);
    std::vector&amp;lt;int&amp;gt; a(n + 1), t0(27), z(n + 1), r(n + 1);
    base[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        a[i] = s[i - 1] - &amp;#39;a&amp;#39; + 1;
        h[i] = (h[i - 1] * p + a[i]) % mod;
        base[i] = base[i - 1] * p % mod;
    &amp;#125;
    auto gethash = [&amp;amp;](int l, int r) &amp;#123;
        return (h[r] - h[l - 1] * base[r - l + 1] % mod + mod) % mod;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int l = 1, r = std::min(i - 1, n - i + 1), mid; l &amp;lt;= r; ) &amp;#123;
            mid = (l + r) &amp;gt;&amp;gt; 1;
            if (gethash(1, mid) == gethash(i, i + mid - 1))
                z[i] = mid, l = mid + 1;
            else
                r = mid - 1;
        &amp;#125;
    for (int i = 1; i &amp;lt; n; ++i)
        r[i] = i + std::min(i, z[i + 1]);
    for (int i = 1; i &amp;lt;= 26; ++i)
        std::cin &amp;gt;&amp;gt; t0[i];
    std::cin &amp;gt;&amp;gt; t1 &amp;gt;&amp;gt; t2;
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::priority_queue&amp;lt;std::pair&amp;lt;long long, int&amp;gt; &amp;gt; q;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        f[i] = f[i - 1] + t0[a[i]];
        for (; !q.empty() &amp;amp;&amp;amp; r[q.top().second] &amp;lt; i; q.pop());
        if (!q.empty())
            f[i] = std::min(f[i], t1 - q.top().first - (long long)t2 * i);
        if (i != n)
            q.emplace(-(f[i] + 2ll * t2 * i), i);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-非攻&#34;&gt;D. 非攻&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6462/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6462/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，对于一个 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 的排列，使用最小的交换次数使得其单增。在该前提下，定义代价为每次交换的两个数之积。对于所有 &lt;span class=&#34;math inline&#34;&gt;\(n!\)&lt;/span&gt; 个排列，计算最小代价之和。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^7\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;转化成，把 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 分成无标号的若干组，每组的代价是 最小值 &lt;span class=&#34;math inline&#34;&gt;\(\times\)&lt;/span&gt; 其他元素的和，还有一个项链问题的系数，发现组间的符号是求和，考虑计算贡献。&lt;/p&gt;
&lt;p&gt;枚举 &lt;span class=&#34;math inline&#34;&gt;\(i,j\)&lt;/span&gt; 并钦定两个同属一个环，且 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 为最小值，枚举环大小 &lt;span class=&#34;math inline&#34;&gt;\(s+2\)&lt;/span&gt;，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
res&amp;amp;=\sum_{i=1}^{n-1}\sum_{j=i+1}^n i\cdot j \cdot \sum_{s=0}^{n-i-1}\binom{n-i-1}s \cdot (s+1)!\cdot (n-s-2)!\\
&amp;amp;=\sum_{i=1}^{n-1}i\cdot \dfrac {(i+n+1)(n-i)}2 \cdot \sum_{s=0}^{n-i-1}\binom{n-i-1}s\cdot (s+1)!\cdot (n-s-2)!\\
&amp;amp;=\frac 12\times\sum_{i=1}^{n-1}i\cdot (i+n+1)\cdot (n-i)!\cdot\sum_{s=0}^{n-i-1}\dfrac {(s + 1)\cdot (n-s-2)!}{(n-i-1-s)!}\\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(T=n-i-1\)&lt;/span&gt;，发现我们需要快速计算 &lt;span class=&#34;math inline&#34;&gt;\(f_T=\sum\limits_{i=0}^T \dfrac{(i+1)\cdot (n-i-2)!}{(T-i)!}\)&lt;/span&gt;。记 &lt;span class=&#34;math inline&#34;&gt;\(m=n-2\)&lt;/span&gt;，变形得 &lt;span class=&#34;math inline&#34;&gt;\(f_T=(m-T)!\cdot \sum\limits_{i=0}^{T} (i+1) \binom{m-i}{m-T}\)&lt;/span&gt;，发现似乎可以简化，令 &lt;span class=&#34;math inline&#34;&gt;\(k=m-T,t=T+1\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(f_T=\sum\limits_{i=1}^T i\cdot \binom {k+t-i}k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后是经典的组合意义保平安环节，即从 &lt;span class=&#34;math inline&#34;&gt;\(k+t\)&lt;/span&gt; 个有标号小球中选择一条分界线，分界线左边选一个球、右边选 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个球的方案数。发现分界线的存在很诡异，故用分界线后方的第一个球代替，在 &lt;span class=&#34;math inline&#34;&gt;\(t+1\)&lt;/span&gt; 处新建一个虚球，规定在前 &lt;span class=&#34;math inline&#34;&gt;\(t+1\)&lt;/span&gt; 个球中选两个球，并令后一个为分界线，且令前 &lt;span class=&#34;math inline&#34;&gt;\(t+1\)&lt;/span&gt; 个中的其他球为实球，就能建立双射。在分界线后再选 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个球，容易发现直接在范围内选 &lt;span class=&#34;math inline&#34;&gt;\(k+2\)&lt;/span&gt; 个球就能满足条件，故 &lt;span class=&#34;math inline&#34;&gt;\(f_T=(n-T-2)!\cdot \binom{t+k+1}{k+2}\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;mozi.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;mozi.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1), f(n + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    int m = n - 2;
    for (int T = 0; T &amp;lt;= n - 2; ++T) &amp;#123;
        int k = m - T, t = T + 1;
        f[T] = C(t + k + 1, k + 2) * fac[m - T] % mod;
    &amp;#125;
    auto res = 0ll;
    for (int i = 1; i &amp;lt;= n - 1; ++i)
        (res += (long long)i * (i + n + 1) % mod * fac[n - i] % mod * f[n - i - 1] % mod) %= mod;
    std::cout &amp;lt;&amp;lt; res * inv[2] % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---destruction-of-walls&#34;&gt;C - Destruction of Walls&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc203/tasks/arc203_c&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc203/tasks/arc203_c&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---insert-xor&#34;&gt;D - Insert XOR&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc203/tasks/arc203_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc203/tasks/arc203_d&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---记忆&#34;&gt;A - 记忆&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/problem/274793&#34; class=&#34;uri&#34;&gt;https://ac.nowcoder.com/acm/problem/274793&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要意识到问题是静态的，并且不能用线段树之类维护；故考虑离线下来，想办法在 LCA 处统计答案。&lt;/p&gt;
&lt;p&gt;这个时候发现需要合并子树状态、整体异或、整体 +1，很容易想到 Trie。把 &lt;span class=&#34;math inline&#34;&gt;\(u\to\)&lt;/span&gt; LCA 的答案保存在 LCA 处，然后再用 DFS + 回溯统计 LCA &lt;span class=&#34;math inline&#34;&gt;\(\to v\)&lt;/span&gt; 的答案。想了半天没想到把上下拆开来做也是神了 😅&lt;/p&gt;
&lt;p&gt;可能比较考验对字典树的理解？做个比喻，字典树的 id 就相当于对这个点上信息的『引用』。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;字典树合并的时候可以考虑回收废弃点，不然可能有点卡。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int X = 50;
const int maxn = 2e7 + 5;
long long d[maxn];
int tot, T[maxn][2], f[maxn], fa[maxn];
#define lc(p) T[p][0]
#define rc(p) T[p][1]
int find(int x) &amp;#123; return x == f[x] ? x : f[x] = find(f[x]); &amp;#125;
int newnode(void) &amp;#123;
    int p = ++tot;
    assert(p &amp;lt; maxn);
    d[p] = lc(p) = rc(p) = 0, f[p] = p;
    return p;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (d[p]) &amp;#123;
        if (d[p] &amp;amp; 1)
            std::swap(lc(p), rc(p));
        d[p] &amp;gt;&amp;gt;= 1;
        if (lc(p))
            d[lc(p)] ^= d[p];
        if (rc(p))
            d[rc(p)] ^= d[p];
        d[p] = 0;
    &amp;#125;
    return;
&amp;#125;
int ins(int p, long long x) &amp;#123;
    for (int i = 0; i &amp;lt; X; ++i) &amp;#123;
        pushdown(p);
        if (!T[p][(x &amp;gt;&amp;gt; i) &amp;amp; 1]) &amp;#123;
            T[p][(x &amp;gt;&amp;gt; i) &amp;amp; 1] = newnode();
            fa[T[p][(x &amp;gt;&amp;gt; i) &amp;amp; 1]] = p;
        &amp;#125;
        p = T[p][(x &amp;gt;&amp;gt; i) &amp;amp; 1];
    &amp;#125;
    return p;
&amp;#125;
void merge(int &amp;amp;p, int q) &amp;#123;
    if (!q)
        return;
    if (!p) &amp;#123;
        p = q;
        return;
    &amp;#125;
    pushdown(p), pushdown(q);
    fa[lc(q)] = p, fa[rc(q)] = p;
    merge(lc(p), lc(q)), merge(rc(p), rc(q));
    assert(f[p] == p), assert(f[q] == q), f[q] = p;
    return;
&amp;#125;
long long ask(int p) &amp;#123;
    std::vector&amp;lt;int&amp;gt; st;
    for (int i = 0, j = p; i &amp;lt; X; ++i)
        st.push_back(fa[j]), j = fa[j];
    for (int i = 0; i &amp;lt; X; ++i)
        pushdown(st.back()), st.pop_back();
    long long x = 0;
    for (int i = 0; i &amp;lt; X; ++i) &amp;#123;
        x = x * 2 + (p == rc(fa[p]));
        p = fa[p];
    &amp;#125;
    return x;
&amp;#125;
void add(int p) &amp;#123;
    for (int i = 0; p &amp;amp;&amp;amp; i &amp;lt; X; ++i) &amp;#123;
        pushdown(p);
        std::swap(lc(p), rc(p));
        p = lc(p);
    &amp;#125;
    return;
&amp;#125;
void del(int p) &amp;#123;
    for (int i = 0; p &amp;amp;&amp;amp; i &amp;lt; X; ++i) &amp;#123;
        pushdown(p);
        std::swap(lc(p), rc(p));
        p = rc(p);
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), top(n + 1), fa(n + 1), dep(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != fa[x]) &amp;#123;
                dep[i] = dep[x] + 1;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    DFS = [&amp;amp;](int x) &amp;#123;
        if (son[x])
            top[son[x]] = top[x], DFS(son[x]);
        for (auto i : g[x])
            if (i != son[x] &amp;amp;&amp;amp; i != fa[x])
                top[i] = i, DFS(i);
        return;
    &amp;#125;;
    top[1] = 1, DFS(1);
    auto askLCA = [&amp;amp;](int x, int y) &amp;#123;
        for (; top[x] != top[y]; x = fa[top[x]])
            if (dep[top[x]] &amp;lt; dep[top[y]])
                std::swap(x, y);
        return dep[x] &amp;lt; dep[y] ? x : y;
    &amp;#125;;
    struct node &amp;#123; long long x; int u, v; &amp;#125;;
    std::vector&amp;lt;node&amp;gt; q(m + 1);
    std::vector&amp;lt;int&amp;gt; id(m + 1);
    std::vector&amp;lt;long long&amp;gt; res(m + 1), ans(m + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; up(n + 1), dn(n + 1), ed(n + 1);
    for (int i = 1, x, u, v; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;
        q[i] = &amp;#123; x, u, v &amp;#125;;
        up[u].push_back(i), dn[askLCA(u, v)].push_back(i), ed[v].push_back(i);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; rt(n + 1);
    DFS = [&amp;amp;](int x) &amp;#123;
        rt[x] = newnode();
        for (auto i : g[x])
            if (i != fa[x]) &amp;#123;
                DFS(i);
                merge(rt[x], rt[i]);
            &amp;#125;
        add(rt[x]);
        for (auto i : up[x])
            id[i] = ins(rt[x], q[i].x);
        d[rt[x]] ^= a[x];
        for (auto i : dn[x])
            res[i] = ask(find(id[i]));
        return;
    &amp;#125;;
    DFS(1);
    tot = 0, rt[0] = newnode();
    std::fill(id.begin() + 1, id.end(), 0);
    DFS = [&amp;amp;](int x) &amp;#123;
        d[rt[0]] ^= a[x];
        for (auto i : dn[x])
            id[i] = ins(rt[0], res[i]);
        for (auto i : ed[x])
            ans[i] = ask(id[i]);
        add(rt[0]);
        for (auto i : g[x])
            if (i != fa[x])
                DFS(i);
        del(rt[0]);
        d[rt[0]] ^= a[x];
        return;
    &amp;#125;;
    DFS(1);
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; ans[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---ビーバーの会合-2-meetings-2&#34;&gt;B - ビーバーの会合 2 (Meetings 2)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/AT_joisc2021_j&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/AT_joisc2021_j&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义所求点为『局部重心』；类似树的重心，容易发现当关键点数量为奇时，只存在一个局部重心；否则，局部重心组成一条链。&lt;/p&gt;
&lt;p&gt;即对于每一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，需要找到一条最长链，使得其两端存在大小为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的子树（容易发现取后缀 max 即可得到真实答案）。使用点分治，精细实现容易做到 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; mx(n + 1), siz(n + 1), p, tag(n + 1), res(n + 1, 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int fa) &amp;#123;
        p.push_back(x);
        siz[x] = 1, mx[x] = 0;
        for (auto i : g[x])
            if (!tag[i] &amp;amp;&amp;amp; i != fa) &amp;#123;
                DFS1(i, x);
                siz[x] += siz[i];
                mx[x] = std::max(mx[x], siz[i]);
            &amp;#125;
        return;
    &amp;#125;;
    auto findrt = [&amp;amp;](int x) &amp;#123;
        p.clear(), DFS1(x, -1);
        int n = (int)p.size();
        for (auto i : p)
            if (mx[i] &amp;lt;= n / 2 &amp;amp;&amp;amp; n - siz[i] &amp;lt;= n / 2)
                return i;
        assert(0);
        return -1;
    &amp;#125;;
    struct node &amp;#123;
        int u1, u2, id1, id2;
        node(): u1(0), u2(0), id1(0), id2(0) &amp;#123;&amp;#125;
        void upd(int u, int id) &amp;#123;
            if (id1 == id)
                u1 = std::max(u1, u);
            else if (u &amp;gt;= u1)
                u2 = u1, id2 = id1, u1 = u, id1 = id;
            else if (u &amp;gt;= u2)
                u2 = u, id2 = id;
            return;
        &amp;#125;
    &amp;#125;;
    std::vector&amp;lt;node&amp;gt; s(n + 1);
    std::function&amp;lt;void(int, int, int, int)&amp;gt; DFS2 = [&amp;amp;](int x, int fa, int dep, int anc) &amp;#123;
        s[siz[x]].upd(dep, anc);
        for (auto i : g[x])
            if (!tag[i] &amp;amp;&amp;amp; i != fa)
                DFS2(i, x, dep + 1, anc);
        return;
    &amp;#125;;
    std::function&amp;lt;void(int, int, int, int)&amp;gt; DFS3 = [&amp;amp;](int x, int fa, int dep, int anc) &amp;#123;
        int v = ((s[siz[x]].id1 == anc) ? s[siz[x]].u2 : s[siz[x]].u1);
        res[2 * siz[x]] = std::max(res[2 * siz[x]], dep + 1 + v);
        for (auto i : g[x])
            if (!tag[i] &amp;amp;&amp;amp; i != fa)
                DFS3(i, x, dep + 1, anc);
        return;
    &amp;#125;;
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        x = findrt(x), p.clear(), DFS1(x, -1);
        // printf(&amp;quot;rt = %d\n&amp;quot;, x);
        for (auto i : g[x])
            if (!tag[i])
                DFS2(i, x, 1, i);
        for (int i = siz[x] - 1; i; --i) &amp;#123;
            s[i].upd(s[i + 1].u1, s[i + 1].id1);
            s[i].upd(s[i + 1].u2, s[i + 1].id2);
        &amp;#125;
        for (auto i : g[x])
            if (!tag[i])
                DFS3(i, x, 1, i);
        tag[x] = 1;
        for (int i = 1; i &amp;lt; siz[x]; ++i)
            s[i] = node();
        for (auto i : g[x])
            if (!tag[i])
                DFS(i);
        return;
    &amp;#125;;
    DFS(1);
    for (int i = (n &amp;gt;&amp;gt; 1) * 2; i; --i)
        if (i + 2 &amp;lt;= n)
            res[i] = std::max(res[i], res[i + 2]);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---the-closest-pair&#34;&gt;C - The Closest Pair&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/problem/262593&#34; class=&#34;uri&#34;&gt;https://ac.nowcoder.com/acm/problem/262593&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常规方法&lt;/strong&gt;：考虑&lt;strong&gt;支配对&lt;/strong&gt;，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，找到所有合法的 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt;。容易想到枚举 &lt;span class=&#34;math inline&#34;&gt;\(a_i\div a_j\)&lt;/span&gt; 来做；假设存在 &lt;span class=&#34;math inline&#34;&gt;\(a_k\div a_i=a_j\div a_i\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;gt;j\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;不妨设 &lt;span class=&#34;math inline&#34;&gt;\(a_j=K\cdot a_i+p,a_k=K\cdot a_i+q\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\((a_i,a_j),(a_i,a_k)\)&lt;/span&gt; 均合法当且仅当下列条件全部成立：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_j\bmod a_i&amp;gt;a_k\bmod a_i\)&lt;/span&gt;； 则 &lt;span class=&#34;math inline&#34;&gt;\(a_j&amp;gt;a_k\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_j\bmod a_k&amp;gt;a_k\bmod a_i\)&lt;/span&gt;；又 &lt;span class=&#34;math inline&#34;&gt;\(p-q\ge a_j\bmod a_k\)&lt;/span&gt;（&lt;strong&gt;太牛了这一步&lt;/strong&gt;），即 &lt;span class=&#34;math inline&#34;&gt;\(p-q&amp;gt;q\iff p&amp;gt;2q\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证得只关心同一个 &lt;span class=&#34;math inline&#34;&gt;\(a_j\div a_i\)&lt;/span&gt; 时的支配对数量为 &lt;span class=&#34;math inline&#34;&gt;\(\log n\)&lt;/span&gt; 级别；总对数 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n\ln n)\)&lt;/span&gt;。离线下来扫描线就行了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;对着 单点修改 区间最值 想了 1h 的单 log 做法 😰 果然小脑掉线太可怕了，第二天早上重置大脑 1s 发现自己是斯波 😓&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
const int maxn = 4e6 + 5;
struct &amp;#123; int l, r, u[2]; &amp;#125; t[maxn];
#define lt (t[p].l)
#define rt (t[p].r)
int tot[2];
void add(int &amp;amp;p, int l, int r, int x, int v, int i) &amp;#123;
    if (!p)
        p = ++tot[i], t[p].u[0] = -1, t[p].u[1] = 0x3f3f3f3f;
    if (i == 0)
        t[p].u[0] = std::max(t[p].u[0], v);
    else
        t[p].u[1] = std::min(t[p].u[1], v);
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, l, mid, x, v, i);
    else
        add(rt, mid + 1, r, x, v, i);
    return;
&amp;#125;
int ask(int p, int l, int r, int ql, int qr, int i) &amp;#123;
    if (!p || (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr))
        return t[p].u[i];
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (qr &amp;lt;= mid)
        return ask(lt, l, mid, ql, qr, i);
    if (ql &amp;gt; mid)
        return ask(rt, mid + 1, r, ql, qr, i);
    if (i == 0)
        return std::max(ask(lt, l, mid, ql, qr, 0), ask(rt, mid + 1, r, ql, qr, 0));
    return std::min(ask(lt, l, mid, ql, qr, 1), ask(rt, mid + 1, r, ql, qr, 1));
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifndef ONLINE_JUDGE
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    const int m = 1e6;
    int rt[2] = &amp;#123; 0 &amp;#125;, n;
    t[0].u[0] = -1, t[0].u[1] = 0x3f3f3f3f;
    read(n);
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (i != 1) &amp;#123;
            for (int K = a[i]; K &amp;lt;= m; K += a[i]) &amp;#123;
                for (int mx = std::min(a[i] - 1, m - K); ; ) &amp;#123;
                    int k = ask(rt[0], 1, m, K, K + mx, 0);
                    if (k == -1)
                        break;
                    t[i].emplace_back(k, a[k] - K);
                    if (k == 1 || !(a[k] - K))
                        break;
                    mx = (a[k] - K - 1) / 2;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        add(rt[0], 1, m, a[i], i, 0);
    &amp;#125;
    for (int i = n; i; --i) &amp;#123;
        if (i != n)
            for (int K = a[i]; K &amp;lt;= m; K += a[i])
                for (int mx = std::min(a[i] - 1, m - K); ; ) &amp;#123;
                    int k = ask(rt[1], 1, m, K, K + mx, 1);
                    if (k == 0x3f3f3f3f)
                        break;
                    t[k].emplace_back(i, a[k] - K);
                    if (k == n || !(a[k] - K))
                        break;
                    mx = (a[k] - K - 1) / 2;
                &amp;#125;
        add(rt[1], 1, m, a[i], i, 1);
    &amp;#125;
    int q;
    read(q);
    std::vector&amp;lt;int&amp;gt; res(q + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; u(n + 1);
    for (int i = 1, l, r; i &amp;lt;= q; ++i) &amp;#123;
        read(l), read(r);
        if (l &amp;gt; r)
            std::swap(l, r);
        u[r].emplace_back(l, i);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; bit(n + 1, 0x3f3f3f3f);
    auto lowbit = [&amp;amp;](int x) &amp;#123; return x &amp;amp; -x; &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] = std::min(bit[x], v);
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        auto res = 0x3f3f3f3f;
        for (; x; x -= lowbit(x))
            res = std::min(res, bit[x]);
        return res;
    &amp;#125;;
    for (int r = 1; r &amp;lt;= n; ++r) &amp;#123;
        for (auto [l, v] : t[r])
            add(n - l + 1, v);
        for (auto [l, i] : u[r])
            res[i] = ask(n - l + 1);
    &amp;#125;
    for (int i = 1; i &amp;lt;= q; ++i)
        print(res[i], &amp;#39;\n&amp;#39;);
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;求支配对的过程也要带 log（线段树），再加上扫描线的 3log，总共是常数比较大的 3log（卡了一个上午的常也是有了）。所以接下来讲解另一种奇技淫巧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;暴力分治&lt;/strong&gt;：注意到对于比较长（&lt;span class=&#34;math inline&#34;&gt;\(len&amp;gt; B\)&lt;/span&gt;）的区间，答案比较小；故考虑分治。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于长询问（&lt;span class=&#34;math inline&#34;&gt;\(len&amp;gt;B\)&lt;/span&gt;），从小到大枚举答案并 check；预处理某个范围（&lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt;）内的 &lt;span class=&#34;math inline&#34;&gt;\(res\)&lt;/span&gt; 出现的所有位置，平衡的时候还要算上调和级数和 bit。&lt;/li&gt;
&lt;li&gt;对于短询问（&lt;span class=&#34;math inline&#34;&gt;\(len\le B\)&lt;/span&gt;），发现每次区间内暴力是 &lt;span class=&#34;math inline&#34;&gt;\(O(B^2q)\)&lt;/span&gt; 的；把询问离线下来，精细实现，利用询问的公共部分使得&lt;strong&gt;每一对数只被枚举一次&lt;/strong&gt;就能达到 &lt;span class=&#34;math inline&#34;&gt;\(O(B^2 + Bq)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最优解取 &lt;span class=&#34;math inline&#34;&gt;\(B=333,V=483\)&lt;/span&gt;，不自己实现一遍了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---仙人掌&#34;&gt;D - 仙人掌&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3687&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3687&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;把边双从图中删除、问题转化为树上&lt;strong&gt;边&lt;/strong&gt;不交的链覆盖，使得&lt;strong&gt;所有链长 &lt;span class=&#34;math inline&#34;&gt;\(\ge 2\)&lt;/span&gt;&lt;/strong&gt; 的方案数。发现由于&lt;strong&gt;边可以不被覆盖&lt;/strong&gt;，常规 DP 会使得在父节点处合并时需要额外的数量维，参考树上背包，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;思考时会注意到两个限制可以抵消——如果认为长为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的链就是不被覆盖的边，覆盖所有树边，显然可以建立和合法解的双射。此时合并是非常方便的，注意到每个儿子的系数一定都参与『分步』，只需要求出『分类』的系数。这个可以预处理（和 &lt;a href=&#34;/20250407/#a.-二分图染色&#34;&gt;二分图染色&lt;/a&gt; 这个题有点像），令 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示一个点度数为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时的答案，参考错排的思路，则 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 可以不参与配对，也可以乱选一个点配对，如果选中了已配对的点就令其和 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 交换，可以建立和合法解的双射。则 &lt;span class=&#34;math inline&#34;&gt;\(f_i=f_{i-1}+(n-1)f_{i-2}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;首先需要 check 原图是否为仙人掌，顺带回忆一下连通性的知识——在 DFS 树上差分，检查是否有边被覆盖两次即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    const auto stime = std::chrono::steady_clock::now();
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, m;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
        for (int x, y; m--; ) &amp;#123;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
            g1[x].push_back(y), g1[y].push_back(x);
        &amp;#125;
        bool flag = 1;
        int now = 0, cnt = 0;
        std::vector&amp;lt;int&amp;gt; st, dfn(n + 1), low(n + 1), col(n + 1), diff(n + 1);
        std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
            st.push_back(x);
            dfn[x] = low[x] = ++now;
            for (auto i : g1[x])
                if (!dfn[i]) &amp;#123;
                    // printf(&amp;quot;x = %d, %d -&amp;gt; %d\n&amp;quot;, x, x, i);
                    DFS(i, x);
                    diff[x] += diff[i];
                    // printf(&amp;quot;x = %d, diff[%d] += diff[%d]\n&amp;quot;, x, x, i);
                    low[x] = std::min(low[x], low[i]);
                &amp;#125;
                else if (i != fa &amp;amp;&amp;amp; dfn[i] &amp;lt; dfn[x]) &amp;#123;
                    low[x] = std::min(low[x], dfn[i]);
                    ++diff[x], --diff[i];
                    // printf(&amp;quot;x = %d, ++diff[%d], --diff[%d]\n&amp;quot;, x, x, i);
                &amp;#125;
            if (diff[x] &amp;gt;= 2)
                flag = 0;
            // printf(&amp;quot;x = %d, diff[%d] = %d\n&amp;quot;, x, x, diff[x]);
            if (low[x] == dfn[x]) &amp;#123;
                ++cnt;
                for (int p = -1; p != x; ) &amp;#123;
                    p = st.back(), st.pop_back();
                    col[p] = cnt;
                &amp;#125;
            &amp;#125;
            return;
        &amp;#125;;
        DFS(1, -1);
        if (!flag) &amp;#123;
            std::cout &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            continue;
        &amp;#125;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            for (auto j : g1[i])
                if (col[i] != col[j])
                    g[i].push_back(j);
        std::vector&amp;lt;long long&amp;gt; f(n + 1), dp(n + 1);
        dp[0] = 1ll, dp[1] = 1ll;
        for (int i = 2; i &amp;lt;= n; ++i)
            dp[i] = (dp[i - 1] + (i - 1) * dp[i - 2]) % mod;
        std::vector&amp;lt;int&amp;gt; tag(n + 1);
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            f[x] = 1ll, tag[x] = 1;
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    DFS(i, x);
                    (f[x] *= f[i]) %= mod;
                &amp;#125;
            (f[x] *= dp[(int)g[x].size()]) %= mod;
            return;
        &amp;#125;;
        auto res(1ll);
        for (int i = 1; i &amp;lt;= n; ++i)
            if (!tag[i])
                DFS(i, -1), (res *= f[i]) %= mod;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
#ifndef ONLINE_JUDGE
    std::cerr &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6) &amp;lt;&amp;lt; std::chrono::duration&amp;lt;double&amp;gt; (std::chrono::steady_clock::now() - stime).count() &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
#endif
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;E. Many Minimizations 是数学题，跳了。&lt;/p&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;无名题&#34;&gt;无名题&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;背景：给定 &lt;span class=&#34;math inline&#34;&gt;\(n,k\)&lt;/span&gt;，对于 &lt;span class=&#34;math inline&#34;&gt;\(\forall\, 1\le i\le n\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(a_i=i\bmod k\)&lt;/span&gt;，问一共有多少个本质不同的子序列？对于 &lt;span class=&#34;math inline&#34;&gt;\(k=1,2,\cdots,n\)&lt;/span&gt; 分别求出答案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;maimai&#34;&gt;maimai&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/66112/F&#34; class=&#34;uri&#34;&gt;https://ac.nowcoder.com/acm/contest/66112/F&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="字典树" />
        <category term="字符串" />
        <category term="组合数学" />
        <category term="支配对" />
        <updated>2025-08-09T04:33:17.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250807/</id>
        <title>学习笔记：分拆数与 Ferrers 图</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250807/"/>
        <content type="html">&lt;p&gt;需要知道概念和求法，有一定的用处&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;分拆数与互异分拆数&#34;&gt;分拆数与互异分拆数&lt;/h2&gt;
&lt;p&gt;要求：给定一个正整数 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，要求将其划分为 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个可重 / 不可重的正整数，问本质不同的方案数。（显然 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt n\)&lt;/span&gt; 同阶。）&lt;/p&gt;
&lt;p&gt;不妨令划分结果单调不降，则有两种 DP 路径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;法一：令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示把 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 分成 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个正整数的方案数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可重：考虑将这 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个数减去 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。最多一个元素由 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 变为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，组数减少 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;；其他时候还是 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 组。故云 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=f_{i-j,j-1}+f_{i-j,j}\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;可重：如果存在 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，可以删除之然后转移；否则仍整体减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 转移。故曰 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=f_{i-1,j-1}+f_{i-j,j}\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
该转移方法唯一性很显然。&lt;strong&gt;注意到第二维只和 &lt;span class=&#34;math inline&#34;&gt;\(j,j-1\)&lt;/span&gt; 有关；可以交换前后两维顺序然后滚动。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;法二：令 &lt;span class=&#34;math inline&#34;&gt;\(n=\sum a_i\)&lt;/span&gt;，建立 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的差分数组 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，则有 &lt;span class=&#34;math inline&#34;&gt;\(n=\sum\limits_{i=1}^m \sum\limits_{j=1}^i c_j=\sum\limits_{i=1}^m (n-i+1)\times a_i\)&lt;/span&gt;。发现 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 每增大 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，答案会增大 &lt;span class=&#34;math inline&#34;&gt;\(n-i+1\)&lt;/span&gt;。故转化为『第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个物品重量为 &lt;span class=&#34;math inline&#34;&gt;\(n-i+1\)&lt;/span&gt;』的完全背包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可重：要求每个物品至少选一次。&lt;/li&gt;
&lt;li&gt;可重：无限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该方法唯一性更显然。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;复杂度均为 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(O(V\sqrt V)\)&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;例sets-of-complementary-sums&#34;&gt;例：Sets of Complementary Sums&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/20250723/#e.-sets-of-complementary-sums&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ferrers-图&#34;&gt;Ferrers 图&lt;/h2&gt;
&lt;p&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个分拆出来的数用横向柱状图表示并单调不增排列，得到 Ferrers 图。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;image-1.png&#34; alt=&#34;例：12=5+4+2+1 的 Ferrers 图（图源 OI Wiki）&#34; /&gt;&lt;figcaption&gt;例：&lt;span class=&#34;math inline&#34;&gt;\(12=5+4+2+1\)&lt;/span&gt; 的 Ferrers 图（图源 OI Wiki）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;将图像斜向翻折得到一组共轭解，原图中的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 即为共轭解中的元素最值。故亦可限定分拆结果的最值为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，则结果仍为 &lt;span class=&#34;math inline&#34;&gt;\(f_{n,k}\)&lt;/span&gt;。同时适用于分拆数与互异分拆数。&lt;/p&gt;
&lt;p&gt;顺带提一嘴杨表：把点替换成 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt;，并使得一个点同时大于左侧和上方的值。&lt;/p&gt;
&lt;p&gt;似乎就不是很有用了。计数题可能会考。&lt;/p&gt;
</content>
        <category term="DP" />
        <updated>2025-08-07T08:20:45.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250805/</id>
        <title>状压 DP</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250805/"/>
        <content type="html">&lt;p&gt;没补完（1/3），动作还是太慢了&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---只不过是长的领带-2-just-long-neckties-2&#34;&gt;A - 只不过是长的领带 2 / Just Long Neckties 2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11665&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11665&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要观察到，任意时刻 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 中不存在重复元素。把 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 压出来，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,S}\)&lt;/span&gt; 表示选了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，当前 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 是否可行，能够 &lt;span class=&#34;math inline&#34;&gt;\(O(n\cdot 2^V)\)&lt;/span&gt;。对于某个 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，只关心它最远能到达哪个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，故令 &lt;span class=&#34;math inline&#34;&gt;\(f_S\)&lt;/span&gt; 记录之。对于每一个 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，都可以找到 &lt;span class=&#34;math inline&#34;&gt;\(f_S\)&lt;/span&gt; 后第一对 &lt;span class=&#34;math inline&#34;&gt;\(a_i,a_{i+1}\notin S\)&lt;/span&gt;，用其刷表。&lt;/p&gt;
&lt;p&gt;发现『找 &lt;span class=&#34;math inline&#34;&gt;\(f_S\)&lt;/span&gt; 后第一对非法元素』是很慢的，考虑优化；对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 维护 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 在其后第一次出现的位置 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(a_x=p\)&lt;/span&gt; 维护 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 后方 &lt;span class=&#34;math inline&#34;&gt;\(a_y=p,a_{y+1}=q\)&lt;/span&gt; 第一次出现的位置，相当于&lt;strong&gt;先找 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 再找 &lt;span class=&#34;math inline&#34;&gt;\((p,q)\)&lt;/span&gt;&lt;/strong&gt;，就可以做到 &lt;span class=&#34;math inline&#34;&gt;\(O(V^2\cdot 2^V+n\cdot V)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    int V = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        V = std::max(V, a[i]--);
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; tx(n + 1, std::vector&amp;lt;int&amp;gt; (V)), ty(n + 1, std::vector&amp;lt;int&amp;gt; (V));
    std::vector&amp;lt;int&amp;gt; lp(V);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; lpq(V, std::vector&amp;lt;int&amp;gt; (V));
    for (int i = n; ~i; --i) &amp;#123;
        if (i &amp;amp;&amp;amp; i != n)
            lpq[a[i]][a[i + 1]] = i;
        for (int j = 0; j &amp;lt; V; ++j) &amp;#123;
            tx[i][j] = lp[j];
            if (i != n)
                ty[i][j] = lpq[a[i]][j];
        &amp;#125;
        if (i != 0)
            lp[a[i]] = i;
    &amp;#125;
    int siz = 1 &amp;lt;&amp;lt; V, res = 21;
    std::vector&amp;lt;int&amp;gt; f(siz);
    for (int i = 0; i &amp;lt; siz; ++i) &amp;#123;
        std::vector&amp;lt;int&amp;gt; p0, p1;
        for (int j = 0; j &amp;lt; V; ++j)
            if ((i &amp;gt;&amp;gt; j) &amp;amp; 1)
                p1.push_back(j);
            else
                p0.push_back(j);
        int j = n;
        for (auto p : p0)
            if (tx[f[i]][p])
                for (auto q : p0)
                    if (ty[tx[f[i]][p]][q])
                        j = std::min(j, ty[tx[f[i]][p]][q]);
        if (j != n) &amp;#123;
            f[i ^ (1 &amp;lt;&amp;lt; a[j])] = std::max(f[i ^ (1 &amp;lt;&amp;lt; a[j])], j);
            f[i ^ (1 &amp;lt;&amp;lt; a[j + 1])] = std::max(f[i ^ (1 &amp;lt;&amp;lt; a[j + 1])], j + 1);
            for (auto k : p1) &amp;#123;
                f[i ^ (1 &amp;lt;&amp;lt; k) ^ (1 &amp;lt;&amp;lt; a[j])] = std::max(f[i ^ (1 &amp;lt;&amp;lt; k) ^ (1 &amp;lt;&amp;lt; a[j])], j);
                f[i ^ (1 &amp;lt;&amp;lt; k) ^ (1 &amp;lt;&amp;lt; a[j + 1])] = std::max(f[i ^ (1 &amp;lt;&amp;lt; k) ^ (1 &amp;lt;&amp;lt; a[j + 1])], j + 1);
            &amp;#125;
        &amp;#125;
        else
            res = std::min(res, __builtin_popcount(i));
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---cut-and-reorder&#34;&gt;B - Cut and Reorder&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc328/tasks/abc328_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc328/tasks/abc328_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不妨先重排再修改，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,S}\)&lt;/span&gt; 表示已经重排好新序列的前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个元素，对应原序列状态 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的最小代价。枚举新区间容易转移。可以发现枚举 &lt;span class=&#34;math inline&#34;&gt;\(i,S\)&lt;/span&gt; 的实际复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(2^n)\)&lt;/span&gt;（空间也可以这么优化），预处理之后总时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2\cdot 2^n)\)&lt;/span&gt;，跑不满，可以通过。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    long long c;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; c;
    std::vector&amp;lt;long long&amp;gt; a(n), b(n);
    for (int i = 0; i &amp;lt; n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 0; i &amp;lt; n; ++i)
        std::cin &amp;gt;&amp;gt; b[i];
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    brr p(n, arr(n));
    crr g(n, brr(n, arr(n)));
    for (int l = 0; l &amp;lt; n; ++l)
        for (int r = l; r &amp;lt; n; ++r) &amp;#123;
            for (int k = l; k &amp;lt;= r; ++k)
                p[l][r] ^= (1 &amp;lt;&amp;lt; k);
            for (int R = r - l; R &amp;lt; n; ++R)
                for (int L = R, j = r; j &amp;gt;= l; --L, --j)
                    g[l][r][R] += std::abs(b[L] - a[j]);
        &amp;#125;
    int siz = 1 &amp;lt;&amp;lt; n;
    std::vector&amp;lt;long long&amp;gt; f(siz, inf);
    f[0] = 0ll;
    for (int j = 1; j &amp;lt; siz; ++j) &amp;#123;
        int i = __builtin_popcount(j) - 1;
        for (int r = 0; r &amp;lt; n; ++r)
            for (int l = r; ~l &amp;amp;&amp;amp; ((j &amp;gt;&amp;gt; l) &amp;amp; 1); --l)
                f[j] = std::min(f[j], f[j ^ p[l][r]] + g[l][r][i] + c);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[siz - 1] - c &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---electric-circuit&#34;&gt;C - Electric Circuit&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc321/tasks/abc321_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc321/tasks/abc321_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很像&lt;a href=&#34;/20250430/#有标号无向图计数&#34;&gt;无向图容斥&lt;/a&gt;？令 &lt;span class=&#34;math inline&#34;&gt;\(f_S\)&lt;/span&gt; 表示让 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 内部完成配对，可以不连通的方案数，那么当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 内部点出、入度之和相等（记为 &lt;span class=&#34;math inline&#34;&gt;\(cnt\)&lt;/span&gt;）时，&lt;span class=&#34;math inline&#34;&gt;\(f_S\)&lt;/span&gt; 有值 &lt;span class=&#34;math inline&#34;&gt;\(cnt!\)&lt;/span&gt;。相似地，设 &lt;span class=&#34;math inline&#34;&gt;\(g_S\)&lt;/span&gt; 表示让 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 完成配对，成为一个连通块的方案数，得到 &lt;span class=&#34;math inline&#34;&gt;\(g_S=f_S-\sum\limits_{v\in S} f_{S\oplus v}\cdot g_v\)&lt;/span&gt;。让 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 必须包含 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中编号最小的点就可以去重。&lt;/p&gt;
&lt;p&gt;从贡献的角度出发，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 带来的贡献就是 &lt;span class=&#34;math inline&#34;&gt;\(g_S\cdot f_{U\oplus S}\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; 是全集。最后除以 &lt;span class=&#34;math inline&#34;&gt;\(M!\)&lt;/span&gt; 求出期望。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(3^n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; ci(n), co(n);
    for (int i = 1, x; i &amp;lt;= m; ++i)
        std::cin &amp;gt;&amp;gt; x, ++ci[x - 1];
    for (int i = 1, x; i &amp;lt;= m; ++i)
        std::cin &amp;gt;&amp;gt; x, ++co[x - 1];
    std::vector&amp;lt;long long&amp;gt; fac(m + 1);
    fac[0] = 1ll;
    for (int i = 1; i &amp;lt;= m; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    int siz = 1 &amp;lt;&amp;lt; n;
    std::vector&amp;lt;long long&amp;gt; f(siz), g(siz);
    for (int i = 1; i &amp;lt; siz; ++i) &amp;#123;
        int si = 0, so = 0;
        for (int j = 0; j &amp;lt; n; ++j)
            if ((i &amp;gt;&amp;gt; j) &amp;amp; 1)
                si += ci[j], so += co[j];
        if (si == so)
            f[i] = fac[si];
    &amp;#125;
    auto res(0ll);
    for (int i = 1; i &amp;lt; siz; ++i) &amp;#123;
        g[i] = f[i];
        int mn = 0;
        for (int j = 0; j &amp;lt; n; ++j)
            if ((i &amp;gt;&amp;gt; j) &amp;amp; 1) &amp;#123;
                mn = j;
                break;
            &amp;#125;
        int s = i ^ (1 &amp;lt;&amp;lt; mn);
        (g[i] += mod - g[1 &amp;lt;&amp;lt; mn] * f[s] % mod) %= mod;
        for (int j = (s - 1) &amp;amp; s; j; j = (j - 1) &amp;amp; s)
            (g[i] += mod - g[j ^ (1 &amp;lt;&amp;lt; mn)] * f[s ^ j] % mod) %= mod;
        if (i != siz - 1)
            (res += g[i] * f[(siz - 1) ^ i]) %= mod;
        else
            (res += g[i]) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res * qkp(fac[m], mod - 2) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---count-grid-3-coloring&#34;&gt;D - Count Grid 3-coloring&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc379/tasks/abc379_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc379/tasks/abc379_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;轮廓线 DP。把每一列已经确定的最靠下的元素压起来，每行逐个确定即可。&lt;/p&gt;
&lt;p&gt;发现有效状态中只能容许最多一对相邻相同元素，这样复杂度就能降下来了。注意特判 &lt;span class=&#34;math inline&#34;&gt;\(1\times 1\)&lt;/span&gt; 的情况。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::array&amp;lt;int, 15&amp;gt; p;
    p[0] = 1;
    for (int i = 1; i &amp;lt; 15; ++i)
        p[i] = p[i - 1] * 3;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; a;
    if (n &amp;gt;= m) &amp;#123;
        a.assign(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
        for (int i = 1; i &amp;lt;= n; ++i) 
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                char t;
                std::cin &amp;gt;&amp;gt; t, a[i][j] = (t == &amp;#39;?&amp;#39; ? -1 : t - &amp;#39;1&amp;#39;);
            &amp;#125;
    &amp;#125;
    else &amp;#123;
        std::swap(n, m);
        a.assign(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
        for (int i = 1; i &amp;lt;= m; ++i)
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                char t;
                std::cin &amp;gt;&amp;gt; t, a[j][i] = (t == &amp;#39;?&amp;#39; ? -1 : t - &amp;#39;1&amp;#39;);
            &amp;#125;
    &amp;#125;
    int siz = p[m];
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    std::vector&amp;lt;int&amp;gt; s, tab(siz, -1);
    auto getv_1 = [&amp;amp;](int j, int i) &amp;#123;
        return (j / p[i - 1]) % 3;
    &amp;#125;;
    auto getv = [&amp;amp;](int j, int i) &amp;#123;
        return (s[j] / p[i - 1]) % 3;
    &amp;#125;;
    auto chg = [&amp;amp;](int j, int i, int v) &amp;#123;
        return tab[s[j] - p[i - 1] * getv(j, i) + p[i - 1] * v];
    &amp;#125;;
    auto out = [&amp;amp;](int i) &amp;#123;
        std::string s;
        for (int j = 1; j &amp;lt;= m; ++j)
            s += &amp;#39;1&amp;#39; + getv_1(i, j);
        return s.c_str();
    &amp;#125;;
    for (int i = 0; i &amp;lt; siz; ++i) &amp;#123;
        s.push_back(i);
        int cnt = 0;
        for (int j = 2; j &amp;lt;= m; ++j)
            if (getv_1(i, j - 1) == getv_1(i, j) &amp;amp;&amp;amp; ++cnt &amp;gt;= 2) &amp;#123;
                s.pop_back();
                break;
            &amp;#125;
    &amp;#125;
    for (int i = 0; i &amp;lt; (int)s.size(); ++i)
        tab[s[i]] = i;
    siz = (int)s.size();
    if (n == 1) &amp;#123;
        std::cout &amp;lt;&amp;lt; (a[1][1] == -1 ? 3 : 1) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    crr f(n + 1, brr(m + 1, arr(siz)));
    for (int i = 0; i &amp;lt; siz; ++i)
        if ([&amp;amp;](int i, int s) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                if (a[i][j] != -1 &amp;amp;&amp;amp; a[i][j] != getv(s, j))
                    return false;
                if (j != 1 &amp;amp;&amp;amp; getv(s, j) == getv(s, j - 1))
                    return false;
            &amp;#125;
            return true;
        &amp;#125; (1, i)) &amp;#123;
            for (int p = 0; p &amp;lt; 3; ++p)
                if ((a[2][1] == -1 || a[2][1] == p) &amp;amp;&amp;amp; getv(i, 1) != p &amp;amp;&amp;amp; ~chg(i, 1, p))
                    (++f[2][1][chg(i, 1, p)]) %= mod;
        &amp;#125;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        for (int k = 1; k &amp;lt; m; ++k)
            for (int j = 0; j &amp;lt; siz; ++j)
                if (f[i][k][j]) &amp;#123;
                    // printf(&amp;quot;f[%d][%d][%s] = %lld\n&amp;quot;, i, k, out(s[j]), f[i][k][j]);
                    for (int p = 0; p &amp;lt; 3; ++p)
                        if ((a[i][k + 1] == -1 || a[i][k + 1] == p) &amp;amp;&amp;amp; getv(j, k) != p &amp;amp;&amp;amp; getv(j, k + 1) != p &amp;amp;&amp;amp; ~chg(j, k + 1, p))
                            (f[i][k + 1][chg(j, k + 1, p)] += f[i][k][j]) %= mod;
                &amp;#125;
        for (int j = 0; j &amp;lt; siz; ++j)
            if (i != n &amp;amp;&amp;amp; f[i][m][j])
                for (int p = 0; p &amp;lt; 3; ++p)
                    if ((a[i + 1][1] == -1 || a[i + 1][1] == p) &amp;amp;&amp;amp; getv(j, 1) != p &amp;amp;&amp;amp; ~chg(j, 1, p))
                        (f[i + 1][1][chg(j, 1, p)] += f[i][m][j]) %= mod;
    &amp;#125;
    auto res = 0ll;
    for (int i = 0; i &amp;lt; siz; ++i)
        (res += f[n][m][i]) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---pure-straight&#34;&gt;E - Pure Straight&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc126/tasks/arc126_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc126/tasks/arc126_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;手玩发现只要最终序列确定，那么移动的顺序不影响答案。故考虑确定目标位置和移动序列。考虑绝对值的几何意义，不妨令目标子序列中元素集中到被选中位置的中间元素，此时的代价可以计算。用点二进制技巧和库函数可以 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 算代价。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    int siz = 1 &amp;lt;&amp;lt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1), f(siz, 0x3f3f3f3f);
    auto out = [&amp;amp;](int j) &amp;#123;
        std::string s;
        for (int i = 0; i &amp;lt; k; ++i)
            s += (&amp;#39;0&amp;#39; + ((j &amp;gt;&amp;gt; i) &amp;amp; 1));
        return s.c_str();
    &amp;#125;;
    f[0] = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i], --a[i];
        for (int j = siz - 1; j &amp;gt;= 0; --j) &amp;#123;
            if (!((j &amp;gt;&amp;gt; a[i]) &amp;amp; 1))
                f[j | (1 &amp;lt;&amp;lt; a[i])] = std::min(f[j | (1 &amp;lt;&amp;lt; a[i])], f[j] + __builtin_popcount(j &amp;amp; (~((1 &amp;lt;&amp;lt; a[i]) - 1))));
            f[j] += std::min(__builtin_popcount(j), k - __builtin_popcount(j));
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[siz - 1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f---123-set&#34;&gt;F - 123 Set&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc184/tasks/arc184_b&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc184/tasks/arc184_b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做过 &lt;a href=&#34;https://www.luogu.com.cn/problem/P3226&#34;&gt;集合选数&lt;/a&gt;（这个 trick 见过很多次了，应该不只这一道，但我想不起来了）很容易想到画一个表格或者 DAG 出来，其实都能做&lt;/p&gt;
&lt;p&gt;对于表格左上角和 DAG 的源点，肯定是一个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，其不是 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 的倍数。如果画表，横乘 3 竖乘 2，观察一下是包含了 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 恰好一次的很多个杨表（没什么用，提一嘴而已），考虑转化目标，发现是用一个不可旋转的倒 L 形骨牌可叠放地铺满异形表格，可以考虑轮廓线 DP&lt;/p&gt;
&lt;p&gt;具体地，用 1 来表示拐角处，0 表示其他，叠放的时候 1 的优先级比 0 高，然后就可以做了。以 3 为行，悲观估计单个表格大概有 &lt;span class=&#34;math inline&#34;&gt;\(31\times 2^{19}\)&lt;/span&gt; 个状态，运算次数差不多 &lt;span class=&#34;math inline&#34;&gt;\(31\times 19\times 2^{19}\)&lt;/span&gt;；再发现长得一模一样的表格肯定方案数是一样的，如果把任意一个表格全部除以 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，就会得到 &lt;span class=&#34;math inline&#34;&gt;\(n=10^9\div x\)&lt;/span&gt; 时 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为左上角的杨表，就是说长相只和 &lt;span class=&#34;math inline&#34;&gt;\(10^9\div x\)&lt;/span&gt; 的值有关，可以整除分块 😱 可预计的跑得非常不满，实践下来是可以过的（但是很慢）&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    auto calc = [&amp;amp;](int r) &amp;#123;
        return r - r / 2 - r / 3 + r / 6;
    &amp;#125;;
    auto dp = [&amp;amp;](int lim) &amp;#123;
        if (lim == 1) &amp;#123;
            // printf(&amp;quot;lim = 1, ret 1&amp;quot;);
            return 1;
        &amp;#125;
        int n = 1, m = 1;
        for (int k = 1; k * 2 &amp;lt;= lim; ++n, k *= 2);
        for (int k = 1; k * 3 &amp;lt;= lim; ++m, k *= 3);
        int siz = 1 &amp;lt;&amp;lt; m;
        std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; &amp;gt; f(2, std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; (2, std::vector&amp;lt;int&amp;gt; (siz))), p(n + 1, std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; (m));
        std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; &amp;gt; t(2, std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; (2, std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; (siz))); // sb
        auto upd = [&amp;amp;](int i, int k, int j, int v) &amp;#123;
            if (t[i &amp;amp; 1][k &amp;amp; 1][j] != std::make_pair(i, k)) &amp;#123;
                p[i][k].push_back(j);
                t[i &amp;amp; 1][k &amp;amp; 1][j] = &amp;#123; i, k &amp;#125;, f[i &amp;amp; 1][k &amp;amp; 1][j] = v;
            &amp;#125;
            else
                f[i &amp;amp; 1][k &amp;amp; 1][j] = std::min(f[i &amp;amp; 1][k &amp;amp; 1][j], v);
            return;
        &amp;#125;;
        auto chg = [&amp;amp;](int i, int j, int v) &amp;#123;
            return i ^ (((i &amp;gt;&amp;gt; j) &amp;amp; 1) &amp;lt;&amp;lt; j) ^ (v &amp;lt;&amp;lt; j);
        &amp;#125;;
        for (int i = 0; i &amp;lt; siz; ++i) &amp;#123;
            bool flag = 0;
            for (int j = 0; j &amp;lt; m; ++j)
                if (((i &amp;gt;&amp;gt; j) &amp;amp; 1) || (j &amp;amp;&amp;amp; ((i &amp;gt;&amp;gt; (j - 1)) &amp;amp; 1)));
                else &amp;#123;
                    flag = 1;
                    break;
                &amp;#125;
            if (!flag)
                upd(1, m - 1, i, __builtin_popcount(i));
        &amp;#125;
        for (int i = 2; i &amp;lt;= n; i++) &amp;#123;
            int m1 = 1;
            for (int x = (1 &amp;lt;&amp;lt; (i - 1)); x * 3ll &amp;lt;= lim; ++m1, x *= 3);
            int siz1 = 1 &amp;lt;&amp;lt; m1;
            for (auto j : p[i - 1][m - 1]) &amp;#123;
                if (j &amp;amp; 1)
                    upd(i, 0, chg(j &amp;amp; (siz1 - 1), 0, 0), f[(i - 1) &amp;amp; 1][(m - 1) &amp;amp; 1][j]);
                upd(i, 0, chg(j &amp;amp; (siz1 - 1), 0, 1), f[(i - 1) &amp;amp; 1][(m - 1) &amp;amp; 1][j] + 1);
            &amp;#125;
            m = m1, siz = siz1;
            for (int k = 0; k &amp;lt; m - 1; ++k)
                for (auto j : p[i][k]) &amp;#123;
                    if (((j &amp;gt;&amp;gt; k) &amp;amp; 1) || ((j &amp;gt;&amp;gt; (k + 1)) &amp;amp; 1))
                        upd(i, k + 1, chg(j, k + 1, 0), f[i &amp;amp; 1][k &amp;amp; 1][j]);
                    upd(i, k + 1, chg(j, k + 1, 1), f[i &amp;amp; 1][k &amp;amp; 1][j] + 1);
                &amp;#125;
        &amp;#125;
        int res = 0x3f3f3f3f;
        for (auto i : p[n][m - 1])
            res = std::min(res, f[n &amp;amp; 1][(m - 1) &amp;amp; 1][i]);
        return res;
    &amp;#125;;
    int res = 0;
    for (int l = 1, r; l &amp;lt;= n; l = r + 1) &amp;#123;
        r = n / (n / l);
        if (calc(r) - calc(l - 1))
            res += (calc(r) - calc(l - 1)) * dp(n / l);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="状压 DP" />
        <updated>2025-08-05T06:33:55.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250803/</id>
        <title>树 DP</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250803/"/>
        <content type="html">&lt;p&gt;树上的 DP 以及 和树有关的 DP&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---svjetlo&#34;&gt;A - Svjetlo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7163&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7163&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很容易想到一种状态设计，即令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,0/1/2}\)&lt;/span&gt; 分别表示有 &lt;span class=&#34;math inline&#34;&gt;\(0/1/2\)&lt;/span&gt; 个端点在子树内部的情况；然后就开始思考，如何满足对于开关状态的要求？&lt;/p&gt;
&lt;p&gt;还是想少了。如果再加一维，从『状态为开或关』思考就会轻松很多，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,0/1/2,0/1}\)&lt;/span&gt; 表示有 &lt;span class=&#34;math inline&#34;&gt;\(0/1/2\)&lt;/span&gt; 个端点再子树外部，且子树内操作完后 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为关 / 开的最少步数。然后分类讨论转移方式即可。&lt;/p&gt;
&lt;p&gt;一个比较方便的讨论方式是，先确定某种情况下，访问 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的次数，然后就可以得到它们原本的状态。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, rt = -1;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        a[i] = t - &amp;#39;0&amp;#39;;
        if (!a[i])
            rt = i;
    &amp;#125;
    if (rt == -1) &amp;#123;
        std::cout &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tag(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        tag[x] = a[x];
        for (auto i : g[x])
            if (i != fa)
                DFS(i, x), tag[x] &amp;amp;= tag[i];
        return;
    &amp;#125;;
    DFS(rt, -1);
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; (3, std::vector&amp;lt;int&amp;gt; (2, 0x3f3f3f3f)));
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        f[x][0][a[x]] = 0;
        for (auto i : g[x])
            if (i != fa &amp;amp;&amp;amp; !tag[i]) &amp;#123;
                DFS(i, x);
                auto g = f[x];
                f[x][0][0] = std::min(g[0][0] + f[i][0][1] + 4, g[0][1] + f[i][0][0] + 2);
                f[x][0][1] = std::min(g[0][1] + f[i][0][1] + 4, g[0][0] + f[i][0][0] + 2);
                f[x][1][0] = std::min(&amp;#123; g[1][0] + f[i][0][1] + 4, g[1][1] + f[i][0][0] + 2, g[0][0] + f[i][1][0] + 3, g[0][1] + f[i][1][1] + 1 &amp;#125;);
                f[x][1][1] = std::min(&amp;#123; g[1][1] + f[i][0][1] + 4, g[1][0] + f[i][0][0] + 2, g[0][1] + f[i][1][0] + 3, g[0][0] + f[i][1][1] + 1 &amp;#125;);
                f[x][2][0] = std::min(&amp;#123; g[2][0] + f[i][0][1] + 4, g[2][1] + f[i][0][0] + 2, g[1][0] + f[i][1][1], g[1][1] + f[i][1][0] + 2, g[0][0] + f[i][2][1] + 4, g[0][1] + f[i][2][0] + 2 &amp;#125;);
                f[x][2][1] = std::min(&amp;#123; g[2][1] + f[i][0][1] + 4, g[2][0] + f[i][0][0] + 2, g[1][1] + f[i][1][1], g[1][0] + f[i][1][0] + 2, g[0][1] + f[i][2][1] + 4, g[0][0] + f[i][2][0] + 2 &amp;#125;);
            &amp;#125;
        f[x][1][0] = std::min(f[x][1][0], f[x][0][1] + 1);
        f[x][1][1] = std::min(f[x][1][1], f[x][0][0] + 1);
        f[x][2][0] = std::min(f[x][2][0], f[x][1][0]);
        f[x][2][1] = std::min(f[x][2][1], f[x][1][1]);
        // for (int i = 0; i &amp;lt; 3; ++i)
        //     for (int j = 0; j &amp;lt; 2; ++j)
        //         printf(&amp;quot;f[%d][%d][%d] = %d\n&amp;quot;, x, i, j, f[x][i][j]);
        return;
    &amp;#125;;
    DFS(rt, -1);
    std::cout &amp;lt;&amp;lt; f[rt][2][1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---one-to-one&#34;&gt;B - One to One&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc140/tasks/arc140_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc140/tasks/arc140_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;观察原图上连通块，发现要么是没有未确定边的基环树，要么是有恰好一条未确定边的树。缩点，任意为未确定边赋值，考察最后得到的连通块，发现要么是以『基环树点』为根的树，要么是不包含『基环树点』的（内向）基环树。&lt;/p&gt;
&lt;p&gt;这里要用到贡献的思想。考虑将全局划分为若干个部分，保证每部分的单步价值是可确定的。将第一步，即对树和基环树的讨论拆开，对于树，其数量确定；对于基环树，发现环的数量即为基环树的数量，进一步将所有步中的『环』这一类分开，统计成环的方案数就可以得到基环树的贡献。具体地，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 为在前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个点中选择 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个成一个环的方案数，则有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,j}=f_{i-1,j}+f_{i-1,j-1}\times siz_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后计算每个环的贡献即可。注意还要算上环内部的排列（注意循环位移）。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), tag(n + 1), s(n + 1, 1), fa(n + 1), siz(n + 1);
    std::iota(fa.begin() + 1, fa.end(), 1);
    std::function&amp;lt;int(int)&amp;gt; find = [&amp;amp;](int x) &amp;#123;
        return x == fa[x] ? x : fa[x] = find(fa[x]);
    &amp;#125;;
    auto merge = [&amp;amp;](int x, int y) &amp;#123;
        x = find(x), y = find(y);
        if (x != y) &amp;#123;
            tag[y] += tag[x];
            s[y] += s[x];
            fa[x] = y;
        &amp;#125;
        return;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)  &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i], fa[i] = i;
        if (a[i] == -1)
            tag[i] = 1;
        else
            merge(i, a[i]);
    &amp;#125;
    int cnt1 = 0, cnt2 = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        cnt1 += (fa[i] == i &amp;amp;&amp;amp; !tag[i]);
        if (fa[i] == i &amp;amp;&amp;amp; tag[i])
            siz[++cnt2] = s[i];
    &amp;#125;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto res(cnt1 * qkp(n, cnt2) % mod);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(cnt2 + 1, std::vector&amp;lt;long long&amp;gt; (cnt2 + 1));
    f[0][0] = 1ll;
    for (int i = 1; i &amp;lt;= cnt2; ++i) &amp;#123;
        // printf(&amp;quot;i = %d, siz = %d: \n&amp;quot;, i, siz[i]);
        for (int j = 0; j &amp;lt;= i; ++j) &amp;#123;
            f[i][j] = f[i - 1][j];
            if (j != 0)
                (f[i][j] += f[i - 1][j - 1] * siz[i]) %= mod;
            // printf(&amp;quot;  f[%d][%d] = %lld\n&amp;quot;, i, j, f[i][j]);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= cnt2; ++i) &amp;#123;
        static auto fac(1ll);
        (res += f[cnt2][i] * fac % mod * qkp(n, cnt2 - i) % mod) %= mod;
        (fac *= i) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---diameter-cuts&#34;&gt;C - Diameter Cuts&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1499/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1499/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,i}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 上的最长链长为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的方案数，就可以用一个类似背包的过程求答案了。发现这个背包满足可以被优化的形式，故能在 &lt;span class=&#34;math inline&#34;&gt;\(O(nk)\)&lt;/span&gt; 内解决问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k, ++k;
    if (k == 0) &amp;#123;
        std::cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; h(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long long&amp;gt; (k + 1));
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        f[x][1] = 1ll, h[x] = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                std::vector&amp;lt;long long&amp;gt; g(k + 1);
                g.swap(f[x]);
                for (int j = std::min(h[x], k); j; --j)
                    for (int l = std::min(h[i], k - j); ~l; --l)
                        (f[x][std::max(j, l + 1)] += g[j] * f[i][l] % mod) %= mod;
                h[x] = std::max(h[x], h[i] + 1);
            &amp;#125;
        for (int i = 1; i &amp;lt;= h[x] &amp;amp;&amp;amp; i &amp;lt;= k; ++i)
            (f[x][0] += f[x][i]) %= mod;
        // for (int i = 0; i &amp;lt;= h[x] &amp;amp;&amp;amp; i &amp;lt;= k; ++i)
        //     printf(&amp;quot;f[%d][%d] = %lld\n&amp;quot;, x, i, f[x][i]);
        return;
    &amp;#125;;
    DFS(1, -1);
    auto res(0ll);
    for (int i = 1; i &amp;lt;= k; ++i)
        (res += f[1][i]) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---leaf-partition&#34;&gt;D - Leaf Partition&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1146/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1146/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设已经完成分组，欲判定这种方式是否合法，容易想到对每一组叶子建立虚树，则该分组方式合法，当且仅当没有一个点被多个虚树占用。也即，我们需要在总的虚树上选出一些点，让它们可以覆盖所有叶子。&lt;/p&gt;
&lt;p&gt;虚树上 DP，容易发现当且仅当存在 &lt;span class=&#34;math inline&#34;&gt;\(\ge 2\)&lt;/span&gt; 个儿子想要分进同一个虚树时，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 会被选到。故令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, 0/1/2}\)&lt;/span&gt; 表示当前有 &lt;span class=&#34;math inline&#34;&gt;\(0/1/\ge 2\)&lt;/span&gt; 个儿子想要选择 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时的方案数，DP 即可。&lt;/p&gt;
&lt;p&gt;在实现的过程中就会发现根本不需要求虚树，原树上 DP 就可以了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; fa(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 2; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; fa[i], g[fa[i]].push_back(i);
    std::vector&amp;lt;std::array&amp;lt;long long, 3&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        if (g[x].empty())
            f[x][2] = 1ll;
        else
            f[x][0] = 1ll;
        for (auto i : g[x]) &amp;#123;
            DFS(i);
            auto F0 = (f[i][0] + f[i][2]) % mod, F1 = (f[i][1] + f[i][2]) % mod;
            f[x][2] = (f[x][2] * F0 % mod + f[x][2] * F1 % mod + f[x][1] * F1 % mod) % mod;
            f[x][1] = (f[x][1] * F0 % mod + f[x][0] * F1 % mod) % mod;
            (f[x][0] *= F0) %= mod;
        &amp;#125;
        // printf(&amp;quot;%d: %lld / %lld / %lld\n&amp;quot;, x, f[x][0], f[x][1], f[x][2]);
        return;
    &amp;#125;;
    DFS(1);
    std::cout &amp;lt;&amp;lt; (f[1][0] + f[1][2]) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---uniformly-branched-trees&#34;&gt;E - Uniformly Branched Trees&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/724/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/724/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感觉是很常见的套路，但是我不会 😱&lt;/p&gt;
&lt;p&gt;在手玩样例的时候可以感性认知到，每个树会被每种点作为根的情况统计一次。且如果固定以某种（化学环境）的点为根，可以通过按 siz 从小到大排列唯一求解出该树。&lt;/p&gt;
&lt;p&gt;发现以重心为根（即钦定根为重心）可以带来很多优美的性质。因为 siz 是好确定的，且是儿子的排序依据，所以选重心便于统计，同时满足每种树最多被统计两次（当且仅当有两个重心）。&lt;/p&gt;
&lt;p&gt;发现这就变成了多重集的组合数，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k}\)&lt;/span&gt; 表示已经花费 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个点组成一个子树，子树的根节点当前已经确认了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个儿子，最靠右的一个 siz &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt; 的方案数。得到 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k}=\sum_{x=0} f_{i-x\cdot k,j-x,k-1}\cdot \binom{f_{k,d-1,k}+x-1}{x}\)&lt;/span&gt;（相当于将 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个无标号的位置 / 球分配给 &lt;span class=&#34;math inline&#34;&gt;\(f_{k,d-1,k}\)&lt;/span&gt; 个有标号的选项 / 盒子，插板即可）。&lt;/p&gt;
&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 为奇数，则可直接输出 &lt;span class=&#34;math inline&#34;&gt;\(f_{n,d,\lfloor\frac n2\rfloor}\)&lt;/span&gt;；若 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 为偶数，则可能存在两个重心，即需要统计拥有两个重心，且以两个重心分别为根时长相不同的树种类。这种情况下显然存在一条边，左右两边 siz 相同且长相不同。故数量为 &lt;span class=&#34;math inline&#34;&gt;\(\binom{f_{\lfloor \frac n2\rfloor, d-1,\lfloor \frac n2\rfloor}}{2}\)&lt;/span&gt;，容斥掉即可。&lt;/p&gt;
&lt;p&gt;需要特判 &lt;span class=&#34;math inline&#34;&gt;\(n\le2\)&lt;/span&gt; 的情况。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, d, mod;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; d &amp;gt;&amp;gt; mod;
    if (n &amp;lt;= 2) &amp;#123;
        std::cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    arr inv(d + 1);
    inv[0] = inv[1] = 1ll;
    auto fac = 1ll;
    for (int i = 2; i &amp;lt;= d; ++i) &amp;#123;
        (fac *= i) %= mod;
        inv[i] = qkp(fac, mod - 2);
    &amp;#125;
    auto C = [&amp;amp;](long long n, int m) &amp;#123;
        if (m == 0)
            return 1ll;
        if (m &amp;gt; n)
            return 0ll;
        auto res(1ll);
        for (auto i = 0; i &amp;lt; m; ++i)
            (res *= n - i) %= mod;
        return res * inv[m] % mod;
    &amp;#125;;
    crr f(n + 1, brr(d + 1, arr(n / 2 + 1)));
    f[1][0][0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 0; j &amp;lt;= d &amp;amp;&amp;amp; 1 + j &amp;lt;= i; ++j) &amp;#123;
            for (int x = 0; x &amp;lt;= j &amp;amp;&amp;amp; x &amp;lt;= i; ++x)
                f[i][j][1] += f[i - x][j - x][0];
            f[i][j][1] %= mod;
            for (int k = 2; k &amp;lt;= n / 2; ++k) &amp;#123;
                // bool flag = (i == 10 &amp;amp;&amp;amp; j == 3 &amp;amp;&amp;amp; k == 3);
                for (int x = 0; x &amp;lt;= j &amp;amp;&amp;amp; x * k &amp;lt;= i; ++x) &amp;#123;
                    f[i][j][k] += f[i - x * k][j - x][k - 1] * C(f[k][d - 1][k - 1] + x - 1, x);
                    // if (flag)
                    //     printf(&amp;quot;x = %d, f[%d][%d][%d](%lld) * C(%lld, %d)(%lld)\n&amp;quot;, x, i - x * k, j - x, k - 1, f[i - x * k][j - x][k - 1], f[k][d - 1][k - 1] + x - 1, x, C(f[k][d - 1][k - 1] + x - 1, x));
                &amp;#125;
                f[i][j][k] %= mod;
            &amp;#125;
        &amp;#125;
    // for (int i = 1; i &amp;lt;= n; ++i)
    //     for (int j = 0; j &amp;lt;= d &amp;amp;&amp;amp; j &amp;lt;= i - 1; ++j, puts(&amp;quot;&amp;quot;))
    //         for (int k = 0; k &amp;lt;= n / 2; ++k) &amp;#123;
    //             printf(&amp;quot;f[%d][%d][%d] = %lld\n&amp;quot;, i, j, k, f[i][j][k]);
    //         &amp;#125;
    if (n &amp;amp; 1)
        std::cout &amp;lt;&amp;lt; f[n][d][n / 2] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    else &amp;#123;
        auto res(f[n][d][n / 2]);
        res = (res + mod - C(f[n / 2][d - 1][n / 2 - 1], 2)) % mod;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---dominant-indices&#34;&gt;A - Dominant Indices&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1009/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1009/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;长剖板子；难点在于可能要复习一下长剖怎么写。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; h(n + 1), son(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        h[x] = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                h[x] = std::max(h[x], h[i] + 1);
                if (h[i] &amp;gt; h[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::vector&amp;lt;int&amp;gt; _f(2 * n + 1), res(n + 1);
    auto pos(_f.begin());
    std::vector&amp;lt;decltype(pos)&amp;gt; f(n + 1);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        ++f[x][0];
        if (!son[x]) &amp;#123;
            res[x] = 0;
            return;
        &amp;#125;
        f[son[x]] = std::next(f[x]);
        DFS(son[x], x);
        int mx = -std::max(std::make_pair(f[x][res[son[x]] + 1], -(res[son[x]] + 1)), std::make_pair(1, 0)).second;
        for (auto i : g[x])
            if (i != fa &amp;amp;&amp;amp; i != son[x]) &amp;#123;
                f[i] = pos, pos = std::next(pos, h[i] + 1);
                DFS(i, x);
                for (int j = 0; j &amp;lt;= h[i]; ++j) &amp;#123;
                    f[x][j + 1] += f[i][j];
                    if (j + 1 != mx &amp;amp;&amp;amp; std::make_pair(f[x][j + 1], -(j + 1)) &amp;gt; std::make_pair(f[x][mx], -mx))
                        mx = j + 1;
                &amp;#125;
            &amp;#125;
        // printf(&amp;quot;%d: &amp;quot;, x);
        // for (int i = 0; i &amp;lt;= h[x]; ++i)
        //     printf(&amp;quot;%d &amp;quot;, f[x][i]);
        // puts(&amp;quot;&amp;quot;);
        res[x] = mx;
        return;
    &amp;#125;;
    f[1] = pos, pos = std::next(pos, h[1]);
    DFS(1, -1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---树上异或&#34;&gt;B - 树上异或&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9745&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9745&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和 &lt;a href=&#34;#a---svjetlo&#34;&gt;Svjetlo&lt;/a&gt; 很像，把连通块的异或和放到状态里，拆位后令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,0/1}\)&lt;/span&gt; 表示点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 所在的连通块在第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 位异或和为 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt; 的权值（&lt;strong&gt;不计 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 所在连通块&lt;/strong&gt;），转移即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 2, x; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x;
        g[x].push_back(i), g[i].push_back(x);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; dp(n + 1);
    std::vector&amp;lt;std::array&amp;lt;std::array&amp;lt;long long, 2&amp;gt;, 60&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        for (int i = 0; i &amp;lt; 60; ++i)
            f[x][i][(a[x] &amp;gt;&amp;gt; i) &amp;amp; 1] = 1ll;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                for (int j = 0; j &amp;lt; 60; ++j) &amp;#123;
                    auto f1 = f[x][j];
                    f[x][j][0] = (f1[0] * dp[i] % mod + f1[0] * f[i][j][0] % mod + f1[1] * f[i][j][1] % mod) % mod;
                    f[x][j][1] = (f1[1] * dp[i] % mod + f1[0] * f[i][j][1] % mod + f1[1] * f[i][j][0] % mod) % mod;
                &amp;#125;
            &amp;#125;
        for (int i = 0; i &amp;lt; 60; ++i)
            dp[x] += (1ll &amp;lt;&amp;lt; i) % mod * f[x][i][1] % mod;
        dp[x] %= mod;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; dp[1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---一个网的路&#34;&gt;C - 一个网的路&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P8595&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P8595&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先需要意识到，树和链的边数是一样的，炸掉了多少条边，在之后就会花多少代价补回来。故炸一个点的代价为度数 +1。对于一个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，分为四种可能性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被炸了，单独作为一个连通块。&lt;/li&gt;
&lt;li&gt;没被炸，儿子全部被炸了。&lt;/li&gt;
&lt;li&gt;没被炸，有 1 个儿子没被炸。&lt;/li&gt;
&lt;li&gt;没被炸，有 2 个儿子没被炸。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分别用 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1/2/3}\)&lt;/span&gt; 代表上面四种可能性，转移即可。&lt;/p&gt;
&lt;p&gt;贺了个 fread，擦边跑过了。这个不是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的吗？&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int LEN = (1 &amp;lt;&amp;lt; 20);
#ifdef ONLINE_JUDGE
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar

#endif
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
int main() &amp;#123;
    int n, m;
    read(n), read(m);
    int res = (n - 1) - m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int x, y; m--; ) &amp;#123;
        read(x), read(y);
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tag(n + 1);
    std::vector&amp;lt;std::array&amp;lt;int, 4&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        tag[x] = 1;
        f[x][0] = (fa != -1) + 1;
        f[x][2] = f[x][3] = 0x3f3f3f3f;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                f[x][3] = std::min(f[x][3] + f[i][0], f[x][2] + std::min(f[i][1], f[i][2]));
                f[x][2] = std::min(f[x][2] + f[i][0], f[x][1] + std::min(f[i][1], f[i][2]));
                f[x][1] += f[i][0];
                f[x][0] += std::min(&amp;#123; f[i][0] - 1, f[i][1], f[i][2], f[i][3] &amp;#125;) + 1;
            &amp;#125;
        return;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (!tag[i]) &amp;#123;
            DFS(i, -1);
            res += *std::min_element(f[i].begin(), f[i].end());
        &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---随机树&#34;&gt;D - 随机树&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3830&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3830&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于第一问，令 &lt;span class=&#34;math inline&#34;&gt;\(f_x\)&lt;/span&gt; 表示共有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个叶子时的期望深度，两个新叶子的期望深度为 &lt;span class=&#34;math inline&#34;&gt;\(f_{x-1}+1\)&lt;/span&gt;，delta 为 &lt;span class=&#34;math inline&#34;&gt;\(f_{x-1}+2\)&lt;/span&gt;，故有 &lt;span class=&#34;math inline&#34;&gt;\(f_x=\dfrac {(x-1)f_{x-1}+f_{x-1}+2}x\)&lt;/span&gt;，递推即可。&lt;/p&gt;
&lt;p&gt;对于第二问，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,k}\)&lt;/span&gt; 表示有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个叶子，深度 &lt;span class=&#34;math inline&#34;&gt;\(\ge k\)&lt;/span&gt; 的概率（一种理解是从整数概率公式的角度出发）。则考虑枚举左、右叶子数，对于左侧叶子数为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的情况，&lt;strong&gt;为了去重，只选择深度为 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 的叶子展开&lt;/strong&gt;。只考虑某种组合的出现概率，为 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,k-1}+f_{x-i,k-1}-f_{i,k-1}\cdot f_{x-i,k-1}\)&lt;/span&gt;。数归可以证明，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，深度为 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 的叶子被选中的概率均为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac 1{x-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int q, n;
    std::cin &amp;gt;&amp;gt; q &amp;gt;&amp;gt; n;
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(6);
    if (q == 1) &amp;#123;
        std::vector&amp;lt;double&amp;gt; f(n + 1);
        for (int i = 2; i &amp;lt;= n; ++i)
            f[i] = (f[i - 1] * (i - 1) + f[i - 1] + 2.) / i;
        std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    else &amp;#123;
        std::vector&amp;lt;std::vector&amp;lt;double&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;double&amp;gt; (n + 1));
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            f[i][0] = 1.;
            for (int j = 1; j &amp;lt; i; ++j) &amp;#123;
                auto s(0.);
                for (int k = 1; k &amp;lt; i; ++k)
                    s += f[k][j - 1] + f[i - k][j - 1] - f[k][j - 1] * f[i - k][j - 1];
                f[i][j] = s / (i - 1);
            &amp;#125;
        &amp;#125;
        auto res(0.);
        for (int i = 1; i &amp;lt; n; ++i)
            res += f[n][i];
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---complete-compress&#34;&gt;E - Complete Compress&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/agc034/tasks/agc034_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/agc034/tasks/agc034_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于链，发现可以枚举最后聚集的点，答案与配对方式无关，check 是否能配对即可。&lt;/p&gt;
&lt;p&gt;如果不是链，则相比链，还可以选择同一子树中不存在祖孙关系的两个点，将它们都向 LCA 移一步。&lt;/p&gt;
&lt;p&gt;故而，可以在链的做法上打一个补丁，观察到先『内部消化』，再在子树间配对一定不劣，且答案仍然和配对方式无关。故令 &lt;span class=&#34;math inline&#34;&gt;\(f_x\)&lt;/span&gt; 表示点 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 内最多消掉多少对，就可以 check 了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;line_02.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        a[i] = t - &amp;#39;0&amp;#39;;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    auto res(inf);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::vector&amp;lt;int&amp;gt; s(n + 1);
        std::vector&amp;lt;long long&amp;gt; f(n + 1), cnt(n + 1);
        std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
            s[x] = a[x];
            int son = 0;
            auto sum(0ll);
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    DFS(i, x), s[x] += s[i];
                    sum += cnt[i];
                    if (cnt[i] &amp;gt; cnt[son])
                        son = i;
                &amp;#125;
            if (son) &amp;#123;
                if (cnt[son] * 2 &amp;lt;= sum)
                    f[x] = sum / 2;
                else
                    f[x] = sum - cnt[son] + std::min(f[son], (cnt[son] - (sum - cnt[son])) / 2);
            &amp;#125;
            cnt[x] = sum;
            if (x != i)
                cnt[x] += s[x];
            return;
        &amp;#125;;
        DFS(i, -1);
        if (cnt[i] % 2 == 0 &amp;amp;&amp;amp; f[i] == cnt[i] / 2)
            res = std::min(res, cnt[i] / 2);
    &amp;#125;
    if (res == inf)
        std::cout &amp;lt;&amp;lt; -1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    else
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="树形 DP" />
        <category term="长链剖分" />
        <updated>2025-08-03T03:44:54.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250726/</id>
        <title>解题报告 [GCJ 2018 #1B] Transmutation</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250726/"/>
        <content type="html">&lt;p&gt;对于『跑 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 遍』性质的利用。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10805&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10805&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易注意到可以二分答案；但似乎没办法找到一种很好的方法在 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 内完成一次 check。&lt;/p&gt;
&lt;p&gt;化用一下网络流中流量的概念；例如下面这个图，假如先从 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 开始跑，发现没办法很好地确定 &lt;span class=&#34;math inline&#34;&gt;\(8\to 2\)&lt;/span&gt; 这条边的流量（原因：没办法确定 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的搜索顺序）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个时候想到；如果是 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 先被搜到，自然很好；但如果是 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 先被搜到，可以忽略这条由它出发、且未确定的边，先由现在认为的流出量确定流入量。等搜到 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的时候，再更新一下 &lt;span class=&#34;math inline&#34;&gt;\(8\to 2\)&lt;/span&gt; 的流量。这样 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 的流入量就是错的；容易想到再搜一次来更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类比一下 SPFA，可以认为跑 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 遍就已经达到能更新的最终状态&lt;/strong&gt;。此时 check 一下是否每个点都合法。&lt;/p&gt;
</content>
        <category term="二分" />
        <category term="暴力" />
        <updated>2025-07-26T06:47:23.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250723/</id>
        <title>vp 记录 edu 181</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250723/"/>
        <content type="html">&lt;p&gt;tzl 太强了！真挚的膜拜&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;lhy 太强了！真挚的膜拜&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e.-sets-of-complementary-sums&#34;&gt;E. Sets of Complementary Sums&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/2125/problem/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/2125/problem/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分拆数、其实是个不牛的东西，但是写假了 😅&lt;/p&gt;
&lt;p&gt;令集合元素升序排列为 &lt;span class=&#34;math inline&#34;&gt;\(b_{1\sim n}\)&lt;/span&gt;。显然有结论 &lt;span class=&#34;math inline&#34;&gt;\(\sum b\geqslant (n-1)(b_n+1)\)&lt;/span&gt;，化一下就有 &lt;span class=&#34;math inline&#34;&gt;\(b_n\geqslant \left(\sum\limits_{i=1}^{n-1} b_n-b_i\right)+(n-1)\)&lt;/span&gt;。发现 RSH 取值对 LSH 无影响（从取等开始，RSH 不变，若 &lt;span class=&#34;math inline&#34;&gt;\(b_n\gets b_n+1\)&lt;/span&gt;，只需将每个 &lt;span class=&#34;math inline&#34;&gt;\(b_i\gets b_i+1\)&lt;/span&gt; 即可构造出一组解），故只用考虑 RSH 的每种取值下的方案。&lt;/p&gt;
&lt;p&gt;然后就可以做 &lt;a href=&#34;/20250807/&#34;&gt;分拆数&lt;/a&gt; 了。发现会 MLE，滚动即可。每次暴力 assign 会很慢，可以用一点巧思清空滚动数组。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        long long n, m;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
        if (n * (n - 1) / 2 &amp;gt; m) &amp;#123;
            std::cout &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            continue;
        &amp;#125;
        if (n == 1) &amp;#123;
            std::cout &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            continue;
        &amp;#125;
        --n;
        std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(2, std::vector &amp;lt;long long&amp;gt; (m + 1));
        f[0][0] = 1ll;
        for (int j = 1, at = 1; j &amp;lt;= n; ++j, at ^= 1)
            for (int i = 0; i &amp;lt;= m; ++i) &amp;#123;
                if (i &amp;lt; j)
                    f[at][i] = 0;
                else
                    f[at][i] = (f[at ^ 1][i - j] + f[at][i - j]) % mod;
            &amp;#125;
        auto res(0ll);
        for (int i = 1; i &amp;lt;= m - n; ++i)
            (res += f[n &amp;amp; 1][i] * (m - (i + n) + 1)) %= mod;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;vp-记录&#34;&gt;vp 记录&lt;/h2&gt;
&lt;h3 id=&#34;a&#34;&gt;A&lt;/h3&gt;
&lt;p&gt;1:43 切。打 &lt;code&gt;std::&lt;/code&gt; 还是太费时间了。&lt;/p&gt;
&lt;h3 id=&#34;b&#34;&gt;B&lt;/h3&gt;
&lt;p&gt;5:46 切，看完题没想到 gcd，输出的时候想到了。莼菜。&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;C&lt;/h3&gt;
&lt;p&gt;11:23 切，原因是容斥符号乱写。&lt;/p&gt;
&lt;h3 id=&#34;d&#34;&gt;D&lt;/h3&gt;
&lt;p&gt;24:21 切，中间重构了一次并且前缀和的部分考虑得有点问题。绅士（38:35）问我为啥做这么快。&lt;/p&gt;
&lt;h3 id=&#34;e.0&#34;&gt;E.0&lt;/h3&gt;
&lt;p&gt;看了一眼感觉不太可做。quack 说 F 板板，故跳。&lt;/p&gt;
&lt;h3 id=&#34;f&#34;&gt;F&lt;/h3&gt;
&lt;p&gt;01:13:41 草完。奇怪的 WQS 二分板板。吃了一发罚时，原因是没人合法的时候要输出 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。但和 maimai 的 30 发比起来还是相形见绌。绅士考虑了这个，但是没判目标 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;\)&lt;/span&gt; 当前的情况遗憾 4 题离场。&lt;/p&gt;
&lt;p&gt;场下看了 Diagnostics，发现其实第二发有个地方是 RE 了的（长度不足 &lt;span class=&#34;math inline&#34;&gt;\(6\)&lt;/span&gt; 我的 &lt;code&gt;*std::max_element&lt;/code&gt; 会飞起来），但是不知道为啥就是 A 了。&lt;/p&gt;
&lt;h3 id=&#34;e.1&#34;&gt;E.1&lt;/h3&gt;
&lt;p&gt;猜到结论之后止步于此。试着打了分拆数然后（实际上是）写挂了，怀疑自己结论出错直到 5 题招笑离场 😅&lt;/p&gt;
&lt;h3 id=&#34;b.1&#34;&gt;B.1&lt;/h3&gt;
&lt;p&gt;哈哈 B 的 gcd 没开 &lt;code&gt;long long&lt;/code&gt; 被 hack 了，rk55 to 6000+&lt;/p&gt;
</content>
        <category term="差分" />
        <category term="背包" />
        <updated>2025-07-23T07:06:07.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250721/</id>
        <title>解题报告 CF1804F Approximate Diameter</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250721/"/>
        <content type="html">&lt;p&gt;唉确实没见过这种二分形式。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1804/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1804/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意到这个范围基本上就是 &lt;a href=&#34;/20231117/#树的直径图的直径&#34;&gt;图直径的这个性质&lt;/a&gt;，但是我不认识 😅&lt;/p&gt;
&lt;p&gt;每次修改做一次 BFS 过于抽象，发现这个上界多了个 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的系数，把主元换成 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 可以得到 &lt;span class=&#34;math inline&#34;&gt;\(d\in[0.5s,2s]\)&lt;/span&gt;。有一个很牛的操作，假设在当前图上求出来了一个 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt;，显然一直加边，&lt;span class=&#34;math inline&#34;&gt;\(2s\)&lt;/span&gt; 这个上界是在变小的，但只要 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\le 2s\)&lt;/span&gt; 成立，&lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt; 就一直可以作为区间里的一个估值。如果不成立，发现除以二就成立了。&lt;/p&gt;
&lt;p&gt;转化成二分 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt; 最远可以达到的距离即可。每次 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt; 除以二，共除了 &lt;span class=&#34;math inline&#34;&gt;\(\log n\)&lt;/span&gt; 次；复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2 n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后注意不要每次 check 都复制一遍原数组然后加边；应该预先在原图上加好所有边，记录版本。原因是申请空间特别费时间。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, q;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; q;
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(n + 1);
    for (int x, y; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].emplace_back(y, 0), g[y].emplace_back(x, 0);
    &amp;#125;
    for (int i = 1, x, y; i &amp;lt;= q; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].emplace_back(y, i), g[y].emplace_back(x, i);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; mem(q + 1, -1);
    auto calc = [&amp;amp;](int id) &amp;#123;
        if (~mem[id])
            return mem[id];
        std::queue&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; q;
        std::vector&amp;lt;int&amp;gt; tag(n + 1);
        q.emplace(1, 0), tag[1] = 1;
        int mx = 0;
        for (; !q.empty(); ) &amp;#123;
            auto [x, w] = q.front();
            q.pop(), mx = w;
            for (auto [i, ver] : g[x])
                if (ver &amp;lt;= id &amp;amp;&amp;amp; !tag[i]) &amp;#123;
                    tag[i] = 1;
                    q.emplace(i, w + 1);
                &amp;#125;
        &amp;#125;
        return mem[id] = mx;
    &amp;#125;;
    int s = calc(0);
    for (int i = 0; i &amp;lt;= q; ) &amp;#123;
        int j = i;
        for (int l = i + 1, r = q, mid; l &amp;lt;= r; ) &amp;#123;
            mid = (l + r) &amp;gt;&amp;gt; 1;
            if (s &amp;lt;= 2 * calc(mid))
                j = mid, l = mid + 1;
            else
                r = mid - 1;
        &amp;#125;
        for (; i &amp;lt;= j; ++i)
            std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
        s /= 2;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="二分" />
        <updated>2025-07-21T14:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250720/</id>
        <title>【通知】区间最值不满足四边形不等式</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250720/"/>
        <content type="html">&lt;p&gt;花费两天，特此通告。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;以上。&lt;/p&gt;
</content>
        <category term="DP" />
        <category term="DP 优化" />
        <updated>2025-07-20T11:30:21.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250717/</id>
        <title>练习 树的各种性质 II</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250717/"/>
        <content type="html">&lt;p&gt;好像确实比斜优做着舒服。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---perfect-matching-on-a-tree&#34;&gt;A - Perfect Matching on a Tree&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc362/tasks/abc362_f&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc362/tasks/abc362_f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;肯定直接猜以重心为根。&lt;/p&gt;
&lt;p&gt;至于咋求答案，（显然值是所有点的深度之和），这个我去年在场上被卡住了，还是太菜了。现在看来不是很牛的。&lt;/p&gt;
&lt;p&gt;随便乱胡一下，发现就是把若干条线段陈列到两个上下对齐、长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\div 2\)&lt;/span&gt; 的盒子里。容易想到哪边更空放哪边的贪心策略，当最后还剩一条线段的时候，两个盒子都会剩下一截。&lt;/p&gt;
&lt;p&gt;如果直接塞进去肯定是非法的，这个时候想到把下面的这一节放到下面盒子的开头，其他的依次后移即可。由于重心的每个儿子大小不超过盒子长度，所以移了之后肯定不重合。且容易发现只会换行一次。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1);
    int rt = 0;
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        siz[x] = 1;
        bool flag = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; n / 2)
                    flag = 0;
            &amp;#125;
        if (flag &amp;amp;&amp;amp; n - siz[x] &amp;lt;= n / 2)
            rt = x;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; t(n + 1);
    for (auto i : g[rt]) &amp;#123;
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            t[i].push_back(x);
            for (auto i : g[x])
                if (i != fa)
                    DFS(i, x);
            return;
        &amp;#125;;
        DFS(i, rt);
    &amp;#125;
    std::deque&amp;lt;int&amp;gt; p1, p2;
    int to = n / 2;
    for (auto i : g[rt]) &amp;#123;
        auto &amp;amp;q1 = (p1.size() &amp;gt; p2.size() ? p2 : p1), &amp;amp;q2 = (p1.size() &amp;gt; p2.size() ? p1 : p2);
        for (; !t[i].empty() &amp;amp;&amp;amp; (int)q1.size() &amp;lt; to; q1.push_back(t[i].back()), t[i].pop_back());
        for (; !t[i].empty() &amp;amp;&amp;amp; (int)q2.size() &amp;lt; to; q2.push_front(t[i].back()), t[i].pop_back());
    &amp;#125;
    if (n % 2 == 0)
        (p1.size() &amp;lt; p2.size() ? p1 : p2).push_back(rt);
    for (; to--; ) &amp;#123;
        std::cout &amp;lt;&amp;lt; p1.back() &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; p2.back() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        p1.pop_back(), p2.pop_back();
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---miracle-tree&#34;&gt;B - Miracle Tree&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc117/tasks/arc117_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc117/tasks/arc117_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易发现任取 &lt;span class=&#34;math inline&#34;&gt;\(a,b,c\)&lt;/span&gt; 三点，由于它们之间只有一条简单路径，可以视为一条线段，即退化的三角形。那么由三角形三边关系，任取两边之和都大于等于第三边。&lt;/p&gt;
&lt;p&gt;不妨令 &lt;span class=&#34;math inline&#34;&gt;\(E(a)&amp;gt;E(b)&amp;gt;E(c)\)&lt;/span&gt;，以 &lt;span class=&#34;math inline&#34;&gt;\(d(b,a)+d(b,c)\ge d(a,c)\)&lt;/span&gt; 举例，有 &lt;span class=&#34;math inline&#34;&gt;\(E(a)-E(b)+E(b)-E(c)\ge d(a,c)\)&lt;/span&gt; 成立；即，若 &lt;span class=&#34;math inline&#34;&gt;\((b,a)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((b,c)\)&lt;/span&gt; 分别已经找到可行解，则 &lt;span class=&#34;math inline&#34;&gt;\((a,c)\)&lt;/span&gt; 合法。&lt;/p&gt;
&lt;p&gt;从而推断出，按点权将所有点从小到大排序后，只需让任意相邻两点合法，则全树合法。易发现答案是所有相邻两点 &lt;span class=&#34;math inline&#34;&gt;\(dis\)&lt;/span&gt; 之和；也即，从任意一点出发，经过全树所有点的路径和。这种问题我们很熟悉，由欧拉序可知是从 &lt;span class=&#34;math inline&#34;&gt;\(2(n-1)\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 中抠走一段路径长（终点到起点）。想要最小化答案就要最大化这段路径长，取直径即可。&lt;/p&gt;
&lt;p&gt;最后的答案序列按照欧拉序直接求即可（注意直径的端点要在序列两端），实现上应该可以有一些 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 小巧思。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; dep(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                dep[i] = dep[x] + 1;
                DFS(i, x);
            &amp;#125;
        return;
    &amp;#125;;
    dep[1] = 1, DFS(1, -1);
    int p = std::max_element(dep.begin() + 1, dep.end()) - dep.begin();
    dep[p] = 1, DFS(p, -1);
    int q = std::max_element(dep.begin() + 1, dep.end()) - dep.begin();
    std::vector&amp;lt;int&amp;gt; tag(n + 1);
    std::function&amp;lt;bool(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int fa) &amp;#123;
        if (x == q) &amp;#123;
            tag[x] = 1;
            return true;
        &amp;#125;
        for (auto i : g[x])
            if (i != fa &amp;amp;&amp;amp; DFS1(i, x)) &amp;#123;
                tag[x] = 1;
                return true;
            &amp;#125;
        return false;
    &amp;#125;;
    DFS1(p, -1);
    std::vector&amp;lt;int&amp;gt; res(n + 1);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        static int now = 1;
        int son = 0;
        if (x != p)
            res[x] = now;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                if (tag[i])
                    son = i;
                else
                    ++now, DFS(i, x), ++now;
            &amp;#125;
        if (son)
            ++now, DFS(son, x); // 回不来了，故可以不加 ;-)
        return;
    &amp;#125;;
    res[p] = 1, DFS(p, -1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---树的计数&#34;&gt;C - 树的计数&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1232&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1232&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要意识到 DFS 和 BFS 地位是不等价的：二者都有自己相应的性质，但 BFS 的深度性质更易于上手。&lt;/p&gt;
&lt;p&gt;不妨进行重标号，令 BFS 序为 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt;。可以在 BFS 中不断进行『分层』得到点的深度信息。发现 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 后必须分割一次，除此之外没有 BFS 序本身带来的限制。考虑 DFS 序对深度带来的额外限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(D_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(D_{i+1}\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(D_{i+1}\)&lt;/span&gt; 的插入位点位于 &lt;span class=&#34;math inline&#34;&gt;\(1\sim D_i\)&lt;/span&gt; 的链上，则 &lt;span class=&#34;math inline&#34;&gt;\(dep_{D_{i+1}}\le dep_{D_i}+1\)&lt;/span&gt;，即 BFS 序中，&lt;span class=&#34;math inline&#34;&gt;\([D_i,D_{i+1})\)&lt;/span&gt; 间有至多一个分段点。&lt;/li&gt;
&lt;li&gt;虽然题面没说，但是这里 BFS 和 DFS 遍历儿子的顺序是相同的；由于在 BFS 序中 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 先于 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 被遍历，（由于 &lt;span class=&#34;math inline&#34;&gt;\(dep_i\le dep_{i+1}\le dep_i+1\)&lt;/span&gt;），故而若 &lt;span class=&#34;math inline&#34;&gt;\(dep_i= dep_{i+1}\)&lt;/span&gt;，则 DFS 先遍历 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;；反之，若 DFS 序中 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 早于 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 出现，BFS 序中 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处必须分层。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则得到若干条限制，形如某处必须断、某区间必须恰好断一次之类。发现比较难处理的是区间内没有要求『某个点必须断』的情况；&lt;del&gt;可以差分约束&lt;/del&gt; 惊讶地发现，这种情况下有 &lt;span class=&#34;math inline&#34;&gt;\(D_{i+1}=D_i+1\)&lt;/span&gt;（可以考察第一个满足 &lt;span class=&#34;math inline&#34;&gt;\(D_i\ne i\)&lt;/span&gt; 的点来思考）。这点其实是比较难论证的，所以我也没有想得很清楚；好在信息也不是很要求证明这一块就是了。&lt;/p&gt;
&lt;p&gt;用差分处理『恰好一次』的限制，标记某些点不能断。初始高度为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;；每次『必须分段』会带来 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的高度；每次『可能分段』会带来 &lt;span class=&#34;math inline&#34;&gt;\(0.5\)&lt;/span&gt; 的高度。加起来就可以了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P1232_2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; d(n + 1), b(n + 1), p(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; d[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; b[i], p[b[i]] = i;
    for (int i = 1; i &amp;lt;= n; ++i)
        d[i] = p[d[i]];
    for (int i = 1; i &amp;lt;= n; ++i)
        p[d[i]] = i;
    int res = 4;
    std::vector&amp;lt;int&amp;gt; tag(n + 1), forbid(n + 1);
    for (int i = 2; i &amp;lt; n; ++i)
        if (p[i + 1] &amp;lt; p[i])
            tag[i] = 1;
    std::partial_sum(tag.begin() + 1, tag.end(), tag.begin() + 1);
    for (int i = 2; i &amp;lt; n; ++i)
        if (d[i + 1] &amp;gt; d[i] &amp;amp;&amp;amp; tag[d[i + 1] - 1] - tag[d[i] - 1]) &amp;#123;
            // fprintf(stderr, &amp;quot;forbid [%d, %d)\n&amp;quot;, d[i], d[i + 1]);
            forbid[d[i]] += 1, forbid[d[i + 1]] -= 1;
        &amp;#125;
    std::partial_sum(forbid.begin() + 1, forbid.end(), forbid.begin() + 1);
    for (int i = 2; i &amp;lt; n; ++i)
        if (p[i] &amp;gt; p[i + 1])
            res += 2;
        else if (!forbid[i] &amp;amp;&amp;amp; p[i + 1] == p[i] + 1)
            res += 1;
    std::cout &amp;lt;&amp;lt; res / 2;
    if (res &amp;amp; 1)
        std::cout &amp;lt;&amp;lt; &amp;quot;.500&amp;quot;;
    else
        std::cout &amp;lt;&amp;lt; &amp;quot;.000&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---alice-and-bob&#34;&gt;D - Alice and Bob&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3971&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3971&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个很显然的想法是 BST；但是这个东西只能求可行解，求不了最优解。&lt;/p&gt;
&lt;p&gt;题解说观察到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的决策点一定是左侧最靠右的一个 &lt;span class=&#34;math inline&#34;&gt;\(a_j=a_i-1\)&lt;/span&gt;（可以假设 &lt;span class=&#34;math inline&#34;&gt;\(a_j&amp;gt;a_i\)&lt;/span&gt; 然后反证）。如果把 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 向 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 连边可以建树；注意到共用一个父亲的点值是递减的。&lt;/p&gt;
&lt;p&gt;要往树上填值。容易想到一层一层填；可惜不最优（反例如下图）。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;image.png&#34; alt=&#34;考察从 1 开始的最长下降子序列，发现按层倒序填不优。&#34; /&gt;&lt;figcaption&gt;考察从 1 开始的最长下降子序列，发现按层倒序填不优。&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;考虑『以 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 开头的最长下降子序列长度』在树上的内涵，发现：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;只能取 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 所在子树往右的部分；&lt;/li&gt;
&lt;li&gt;取了祖先就不能取儿子；儿子标号比祖先大；标号越大越能取；最优肯定取叶子。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;想要尽量取满所有 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 子树右侧的所有比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 标号大的叶子，就要让它们比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 都小&lt;/strong&gt;。这个问题是简单的；一种方法是按儿子标号从大到小，一边 DFS 一边赋值。暂时没想到不用还原序列、log 求答案的统计方法。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;image-1.png&#34; alt=&#34;附：两种方式对比&#34; /&gt;&lt;figcaption&gt;附：两种方式对比&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
struct &amp;#123; int l, r, u; &amp;#125; t[maxn &amp;lt;&amp;lt; 2];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    t[p].u = std::max(t[p].u, v);
    if (t[p].l == t[p].r)
        return;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x, v);
    else
        add(rt, x, v);
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1, res = 0;
    if (l &amp;lt;= mid)
        res = ask(lt, l, r);
    if (r &amp;gt; mid)
        res = std::max(res, ask(rt, l, r));
    return res;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    std::vector&amp;lt;int&amp;gt; a(n + 1), la(n + 1), deg(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        g[la[a[i] - 1]].push_back(i), ++deg[la[a[i] - 1]];
        la[a[i]] = i;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; u(n + 1), b(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        u[x] = now++;
        std::reverse(g[x].begin(), g[x].end());
        for (auto i : g[x])
            DFS(i);
        return;
    &amp;#125;;
    DFS(0);
    bld(1, 1, n);
    for (int i = n; i; --i) &amp;#123;
        b[i] = ask(1, 1, u[i] - 1) + 1;
        add(1, u[i], b[i]);
    &amp;#125;
    // for (int i = 1; i &amp;lt;= n; ++i)
    //     std::cout &amp;lt;&amp;lt; b[i] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    // std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    std::cout &amp;lt;&amp;lt; std::accumulate(b.begin() + 1, b.end(), 0ll) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---tree-factory&#34;&gt;E - Tree Factory&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1225/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1225/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先把题意转化为『每次可以把一个子树下移，要求把一个树转化为一条链』。可以进行一些观察：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次移动能产生贡献当且仅当其让树高增加 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;如果每次移动都产生贡献，易发现答案下界为 &lt;span class=&#34;math inline&#34;&gt;\(n-\sum mxd_i\)&lt;/span&gt;，可以取到。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看到深度相关就要想到长剖 😅 bro 还没 ptsd&lt;/p&gt;
&lt;p&gt;取以根为 top 的长链，从底到顶依次完成『并到短链所在树上，把树拆成链』的操作。具体过程大概是一个 dfn 的感觉。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 2, x; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; x, g[x + 1].push_back(i);
    std::vector&amp;lt;int&amp;gt; mxd(n + 1), son(n + 1), res, nex(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        mxd[x] = 1;
        for (auto i : g[x]) &amp;#123;
            DFS(i);
            if (mxd[i] + 1 &amp;gt; mxd[x])
                son[x] = i, mxd[x] = mxd[i] + 1;
        &amp;#125;
        return;
    &amp;#125;;
    DFS(1);
    std::vector&amp;lt;int&amp;gt; p;
    for (int i = 1; son[i]; i = son[i])
        p.push_back(i);
    std::function&amp;lt;void(int, int)&amp;gt; merge = [&amp;amp;](int son, int x) &amp;#123;
        int la = son;
        res.push_back(son);
        for (auto i : g[x])
            merge(la, i), la = i;
        nex[x] = la;
        return;
    &amp;#125;;
    for (int i = (int)p.size() - 1; ~i; --i) &amp;#123;
        int la = son[p[i]];
        for (auto j : g[p[i]])
            if (j != son[p[i]])
                merge(la, j), la = j;
        nex[p[i]] = la;
    &amp;#125;
    for (int i = 1; i; i = nex[i])
        std::cout &amp;lt;&amp;lt; i - 1 &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39; &amp;lt;&amp;lt; res.size() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    std::reverse(res.begin(), res.end());
    for (auto i : res)
        std::cout &amp;lt;&amp;lt; i - 1 &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="思维" />
        <updated>2025-07-17T13:09:13.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250716/</id>
        <title>练习 树的各种性质 I</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250716/"/>
        <content type="html">&lt;p&gt;这不比斜优做着爽。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---tree&#34;&gt;A - Tr/ee&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc103/tasks/arc103_c&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc103/tasks/arc103_c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以发现，类似删边的问题，删出来的连通块当中，靠下的是一个完整的子树；就可以转化为子树问题了。&lt;/p&gt;
&lt;p&gt;容易想到枚举 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 时树的状态，尝试转化为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时的状态；进一步可以胡出来一堆方案（大概），这里我胡的是，初始设置一个单点，&lt;span class=&#34;math inline&#34;&gt;\(0\to 1\)&lt;/span&gt; 啥也不干，&lt;span class=&#34;math inline&#34;&gt;\(0\to 0\)&lt;/span&gt; 在当前根上再加一个叶子，&lt;span class=&#34;math inline&#34;&gt;\(1\to 0\)&lt;/span&gt; 新建一个带叶子的根并令其成为当前根的父亲，&lt;span class=&#34;math inline&#34;&gt;\(1\to 1\)&lt;/span&gt; 加一个父亲。&lt;/p&gt;
&lt;p&gt;然后特判一下 &lt;span class=&#34;math inline&#34;&gt;\(s_1=0\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(s_n=1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(s_i\ne s_{n-i}\)&lt;/span&gt; 的情况，发现其他时候都有解。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::string s;
    std::cin &amp;gt;&amp;gt; s, n = (int)s.length();
    s = &amp;quot;#&amp;quot; + s;
    if (s[1] == &amp;#39;0&amp;#39; || s[n] == &amp;#39;1&amp;#39;) &amp;#123;
        std::cout &amp;lt;&amp;lt; -1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    for (int i = 1; i &amp;lt; n; ++i)
        if (s[i] != s[n - i]) &amp;#123;
            std::cout &amp;lt;&amp;lt; -1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            return 0;
        &amp;#125;
    int tot = 1, rt = 1;
    for (int i = 2; i &amp;lt; n; ++i) &amp;#123;
        if (tot == i - 1) &amp;#123;
            if (s[i] == &amp;#39;0&amp;#39;) &amp;#123;
                std::cout &amp;lt;&amp;lt; rt &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; ++tot &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
                rt = tot;
                std::cout &amp;lt;&amp;lt; rt &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; ++tot &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            &amp;#125;
            else &amp;#123;
                std::cout &amp;lt;&amp;lt; rt &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; ++tot &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
                rt = tot;
            &amp;#125;
        &amp;#125;
        else if (s[i] == &amp;#39;0&amp;#39;)
            std::cout &amp;lt;&amp;lt; rt &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; ++tot &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    if (tot != n)
        std::cout &amp;lt;&amp;lt; rt &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---keep-perfectly-matched&#34;&gt;B - Keep Perfectly Matched&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc183/tasks/arc183_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc183/tasks/arc183_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现这个『完美匹配』就是在树上给每个点找相邻点配对，看看能不能配上；继而发现由于点的总数为偶，一个点有且仅能有一个 siz 为奇的子树（不然非法），再发现对于任意一个点，删掉的点对要么来自其同一个子树；要么一个来自其奇子树，另一个来自其偶子树。&lt;/p&gt;
&lt;p&gt;发现要求最大化距离，又只能删叶子，所以需要最小化 LCA 深度；有没有办法让每次的 LCA 都是根呢？让重心成为根，并保证每次操作的两个点都不来自同一个儿子即可（显然这样是完全可能的）。&lt;/p&gt;
&lt;p&gt;接着写了一发发现过不了样例，原因是发现在偶子树中会出现『一个中途的节点本来有一个奇儿子，删去偶子树中的一个叶子后非法』的情况。显然这样的节点是一个偶儿子。确保每个偶儿子的奇儿子先被删掉就可以解决问题。&lt;/p&gt;
&lt;p&gt;对重心的每个儿子，提前规划其节点被删除的顺序即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1);
    int rt = 0;
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        siz[x] = 1;
        bool flag = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; n / 2)
                    flag = 0;
            &amp;#125;
        if (flag &amp;amp;&amp;amp; n - siz[x] &amp;lt;= n / 2)
            rt = x;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; lf(n + 1);
    int f1 = -1;
    auto comp = [&amp;amp;](int i, int j) &amp;#123; return siz[i] &amp;lt; siz[j]; &amp;#125;;
    std::priority_queue&amp;lt;int, std::vector&amp;lt;int&amp;gt;, decltype(comp)&amp;gt; f0(comp);
    siz.assign(n + 1, 0);
    for (auto t : g[rt]) &amp;#123;
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            siz[x] = 1;
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    DFS(i, x);
                    siz[x] += siz[i];
                &amp;#125;
            return;
        &amp;#125;;
        DFS(t, rt);
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            if (siz[x] % 2 == 0) &amp;#123;
                for (auto i : g[x])
                    if (i != fa &amp;amp;&amp;amp; siz[x] % 2 == 1)
                        DFS(i, x);
                for (auto i : g[x])
                    if (i != fa &amp;amp;&amp;amp; siz[x] % 2 == 0)
                        DFS(i, x);
            &amp;#125;
            else
                for (auto i : g[x])
                    if (i != fa)
                        DFS(i, x);
            lf[t].push_back(x);
            return;
        &amp;#125;;
        DFS(t, rt);
        if (siz[t] &amp;amp; 1)
            assert(f1 == -1), f1 = t;
        else
            f0.push(t);
        std::reverse(lf[t].begin(), lf[t].end());
    &amp;#125;
    fprintf(stderr, &amp;quot;rt = %d\n&amp;quot;, rt);
    assert(~f1);
    for (int _ = n / 2; _--; ) &amp;#123;
        assert(~f1);
        if (!_ &amp;amp;&amp;amp; f0.empty()) &amp;#123;
            std::cout &amp;lt;&amp;lt; f1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; rt &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            break;
        &amp;#125;
        assert(!f0.empty());
        int t = f0.top();
        f0.pop();
        assert(!lf[f1].empty());
        assert(!lf[t].empty());
        std::cout &amp;lt;&amp;lt; lf[f1].back() &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; lf[t].back() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        lf[f1].pop_back(), --siz[f1];
        lf[t].pop_back(), --siz[t];
        if (siz[f1])
            f0.push(f1);
        f1 = t;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---fiolki&#34;&gt;C - Fiolki&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5578&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5578&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难点在于判断每一步有哪些反应发生；显然一个反应只会在某一步发生。&lt;/p&gt;
&lt;p&gt;发现将倒水的操作视为连边 &lt;span class=&#34;math inline&#34;&gt;\(b_i\to a_i\)&lt;/span&gt;，那么形成了森林，把每个反应丢到 LCA 处等待 check。&lt;/p&gt;
&lt;p&gt;发现在 LCA 之外，两种试剂不可能相遇；故最后遍历一遍反应序列，维护每种药水当前数量，在每个点处 check 即可。&lt;/p&gt;
&lt;p&gt;再发现如果每次加边都在父亲处 check 所有可能发生的反应，复杂度肯定是错的；故用倍增求出两个点在 LCA 下方的点作为『检查点』，当『检查点』被合并到其父亲时，就可以 check 一下检查点上面挂的所有询问。显然每个点上的询问只会被检查一次；复杂度线性。&lt;/p&gt;
&lt;p&gt;加上倍增 LCA 的复杂度，就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 地完成。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; k;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    std::vector&amp;lt;int&amp;gt; f(n + 1), deg(n + 1), now(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; now[i];
    std::iota(f.begin() + 1, f.end(), 1);
    std::function&amp;lt;int(int)&amp;gt; find = [&amp;amp;](int x) &amp;#123;
        return x == f[x] ? x : f[x] = find(f[x]);
    &amp;#125;;
    auto merge = [&amp;amp;](int x, int y) &amp;#123;
        f[find(x)] = find(y);
        return;
    &amp;#125;;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; a(m + 1);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        auto &amp;amp;[x, y] = a[i];
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y, ++deg[x];
        g[y].push_back(x), merge(x, y);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; dep(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; fa(n + 1, std::vector&amp;lt;int&amp;gt; (21));
    for (int i = 1; i &amp;lt;= n; ++i)
        if (!deg[i]) &amp;#123;
            std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
                for (auto i : g[x]) &amp;#123;
                    fa[i][0] = x;
                    for (int j = 1; j &amp;lt;= 20; ++j)
                        fa[i][j] = fa[fa[i][j - 1]][j - 1];
                    dep[i] = dep[x] + 1, DFS(i);
                &amp;#125;
                return;
            &amp;#125;;
            dep[i] = 1, DFS(i);
        &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; t(n + 1);
    for (int x, y; k--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        if (find(x) == find(y)) &amp;#123;
            std::pair&amp;lt;int, int&amp;gt; p(x, y);
            if (dep[x] != dep[y]) &amp;#123;
                if (dep[x] &amp;lt; dep[y])
                    std::swap(x, y);
                for (int i = 20; ~i; --i)
                    if (dep[fa[x][i]] &amp;gt; dep[y])
                        x = fa[x][i];
                if (fa[x][0] == y) &amp;#123;
                    t[x].push_back(p);
                    // printf(&amp;quot;add (%d, %d) to %d\n&amp;quot;, p.first, p.second, x);
                    continue;
                &amp;#125;
                x = fa[x][0];
            &amp;#125;
            for (int i = 20; ~i; --i)
                if (fa[x][i] != fa[y][i])
                    x = fa[x][i], y = fa[y][i];
            t[x].push_back(p), t[y].push_back(p);
        &amp;#125;
    &amp;#125;
    std::iota(f.begin() + 1, f.end(), 1);
    auto res(0ll);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        auto [x, y] = a[i];
        merge(x, y);
        for (auto [p, q] : t[x])
            if (find(p) == find(x) &amp;amp;&amp;amp; find(q) == find(x)) &amp;#123;
                int u = std::min(now[p], now[q]);
                res += 2 * u, now[p] -= u, now[q] -= u;
            &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125; &lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---permutation-tree&#34;&gt;D - Permutation Tree&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc095/tasks/arc095_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc095/tasks/arc095_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;随便画图，会发现，如果按层数从小到大标号，一个点的儿子只有最多一个不是叶子。一言以蔽之：毛毛虫。&lt;/p&gt;
&lt;p&gt;然后就可以判断可行性了（直径就是虫身）。接下来需要考虑最小化答案字典序的问题，发现对于一个点的儿子，必须是虫足在其左、虫身在其右且必须严格按照层数标号。&lt;/p&gt;
&lt;p&gt;字典序是个偏贪心的东西，所以可以开始瞎搞：发现虫足越多，标号更小的父亲就会越靠后，所以依次比较用两端开头的情况，如果到了虫身的某一段，哪种的儿子更少就选谁，然后直接按最小来标号即可。&lt;/p&gt;
&lt;p&gt;实际上由于只有两种方案，你也可以两边都试试（）&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; dep(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                dep[i] = dep[x] + 1;
                DFS(i, x);
            &amp;#125;
        return;
    &amp;#125;;
    dep[1] = 1, DFS(1, -1);
    int p = std::max_element(dep.begin() + 1, dep.end()) - dep.begin();
    bool flag = 0;
    std::vector&amp;lt;int&amp;gt; node, cnt(n + 1), siz(n + 1);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                siz[x] += siz[i], ++cnt[x];
            &amp;#125;
        if (siz[x] &amp;gt; 1) &amp;#123;
            node.push_back(0), --cnt[x];
            for (auto i : g[x]) &amp;#123;
                if (i != fa &amp;amp;&amp;amp; siz[node.back()] &amp;gt; 1 &amp;amp;&amp;amp; siz[i] &amp;gt; 1)
                    flag = 1;
                if (i != fa &amp;amp;&amp;amp; siz[i] &amp;gt; siz[node.back()])
                    node.back() = i;
            &amp;#125;
        &amp;#125;
        return;
    &amp;#125;;
    DFS(p, -1), node.push_back(p);
    if (flag) &amp;#123;
        std::cout &amp;lt;&amp;lt; -1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    for (int i = 0, j = (int)node.size() - 1; i &amp;lt;= j; ++i, --j)
        if (cnt[node[i]] &amp;gt; cnt[node[j]]) &amp;#123;
            std::reverse(node.begin(), node.end());
            break;
        &amp;#125;
        else if (cnt[node[i]] &amp;lt; cnt[node[j]])
            break;
    int now = 0;
    for (auto i : node) &amp;#123;
        int rt = ++now;
        for (; cnt[i]--; std::cout &amp;lt;&amp;lt; ++now &amp;lt;&amp;lt; &amp;#39; &amp;#39;);
        std::cout &amp;lt;&amp;lt; rt &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---isomorphism-freak&#34;&gt;E - Isomorphism Freak&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/agc024/tasks/agc024_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/agc024/tasks/agc024_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;像在数有多少种化学环境的 H 是可以说的吗&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;鉴于这个，高中化学选择性必修三，给我们打下的坚实基础，我们可以非常迅速地注意到答案就是半径长。&lt;/p&gt;
&lt;p&gt;然后最少叶子，发现一眼瞪不出来，糟糕！没关系，观察样例输出，发现这些答案的因数都挺多，故猜测是若干个数乘起来的；然后再发现是每层最大儿子数的乘积。&lt;/p&gt;
&lt;p&gt;枚举中间的边（仅当直径长度为偶时）、点（奇偶都行）作为对称轴 / 对称中心的情况取 min 即可（原因是要尽量取靠近中心的 &lt;strong&gt;点&lt;/strong&gt;），注意边两端算两个儿子数。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;所以为啥 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 这么小&lt;/del&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; dep(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        for (auto i : g[x])
        if (i != fa) &amp;#123;
            dep[i] = dep[x] + 1;
            DFS(i, x);
        &amp;#125;
        return;
    &amp;#125;;
    dep[1] = 1, DFS(1, -1);
    int p = std::max_element(dep.begin() + 1, dep.end()) - dep.begin();
    dep[p] = 1, DFS(p, -1);
    int q = std::max_element(dep.begin() + 1, dep.end()) - dep.begin();
    std::cout &amp;lt;&amp;lt; (dep[q] + 1) / 2 &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::vector&amp;lt;int&amp;gt; node;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; edge;
    if (dep[q] &amp;amp; 1) &amp;#123;
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            for (auto i : g[x])
                if (i != fa)
                    DFS(i, x);
            if (dep[x] == (dep[q] + 1) / 2)
                node.push_back(x), edge.emplace_back(x, fa);
            if (dep[x] == (dep[q] + 1) / 2 + 1)
                edge.emplace_back(x, fa);
            return;
        &amp;#125;;
        DFS(p, -1);
    &amp;#125;
    else &amp;#123;
        std::function&amp;lt;bool(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
            if (x == q)
                return true;
            bool ret = false;
            for (auto i : g[x])
                if (i != fa)
                    ret |= DFS(i, x);
            if (ret &amp;amp;&amp;amp; dep[x] == dep[q] / 2 + 1)
                edge.emplace_back(x, fa);
            return ret;
        &amp;#125;;
        DFS(p, -1);
    &amp;#125;
    long long res = inf;
    for (auto [x, y] : edge) &amp;#123;
        std::vector&amp;lt;int&amp;gt; cnt(n + 1);
        std::function&amp;lt;void(int, int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa, int dep) &amp;#123;
            int son = 0;
            for (auto i : g[x])
                if (i != fa)
                    ++son, DFS(i, x, dep + 1);
            cnt[dep] = std::max(cnt[dep], son);
            return;
        &amp;#125;;
        DFS(x, y, 1), DFS(y, x, 1);
        auto now(2ll);
        for (int i = 1; i &amp;lt;= n &amp;amp;&amp;amp; cnt[i]; ++i)
            now *= cnt[i];
        res = std::min(res, now);
    &amp;#125;
    for (auto rt : node) &amp;#123;
        std::vector&amp;lt;int&amp;gt; cnt(n + 1);
        std::function&amp;lt;void(int, int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa, int dep) &amp;#123;
            int son = 0;
            for (auto i : g[x])
                if (i != fa)
                    ++son, DFS(i, x, dep + 1);
            cnt[dep] = std::max(cnt[dep], son);
            return;
        &amp;#125;;
        DFS(rt, -1, 1);
        auto now(1ll);
        for (int i = 1; i &amp;lt;= n &amp;amp;&amp;amp; cnt[i]; ++i)
            now *= cnt[i];
        res = std::min(res, now);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="思维" />
        <updated>2025-07-16T08:17:10.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250715/</id>
        <title>练习 决策单调性</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250715/"/>
        <content type="html">&lt;p&gt;『心静自然凉』大抵是因为情绪平和时副交感神经兴奋，体温略有降低导致的。吗？&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;其实是因为心脏停跳后血液循环终止、代谢中断，导致产热低于散热（？）&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---征途&#34;&gt;A - 征途&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4072&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4072&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用完全平方公式展开得到 &lt;span class=&#34;math inline&#34;&gt;\(m^2\sigma^2=m\left(\sum {x_i}^2\right)-S^2\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 为求和。&lt;/p&gt;
&lt;p&gt;所以目标是最小化 &lt;span class=&#34;math inline&#34;&gt;\(\sum {x_i}^2\)&lt;/span&gt; 这个东西。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 天走到 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，得到：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j}&amp;amp;=\min\{f_{i-1,k}+(s_j-s_k)^2\}\\
&amp;amp;=\min\{f_{i-1,k}-2\times s_j\times s_k+{s_k}^2\}+{s_j}^2
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后得到的斜率式子是 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_{i - 1, a}-f_{i - 1, b}+{s_a}^2-{s_b}^2}{2(s_a-s_b)}&amp;lt;s_j\)&lt;/span&gt;，由于 &lt;span class=&#34;math inline&#34;&gt;\(s_j\)&lt;/span&gt; 单增，&lt;del&gt;单调队列维护递减斜率即可&lt;/del&gt; &lt;strong&gt;更正：是递增斜率。原因是 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;\)&lt;/span&gt; 是弹出条件，而非保留条件……&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e9;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;long long&amp;gt; s(n + 1);
    auto sum(0ll);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        s[i] = s[i - 1] + a[i];
        sum += a[i];
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf));
    f[0][0] = 0ll;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        auto f1 = [&amp;amp;](int a, int b) &amp;#123;
            return f[i - 1][a] - f[i - 1][b] + s[a] * s[a] - s[b] * s[b];
        &amp;#125;;
        auto f2 = [&amp;amp;](int a, int b) &amp;#123;
            return 2 * (s[a] - s[b]);
        &amp;#125;;
        std::vector&amp;lt;int&amp;gt; q(n + 1);
        int h = 0, t = -1;
        q[++t] = i - 1;
        for (int j = i; j &amp;lt;= n; ++j) &amp;#123;
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(q[h + 1], q[h]) &amp;lt; s[j] * f2(q[h + 1], q[h]); ++h);
            f[i][j] = f[i - 1][q[h]] + (s[j] - s[q[h]]) * (s[j] - s[q[h]]);
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(j, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(j, q[t]); --t);
            q[++t] = j;
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; m * f[m][n] - sum * sum &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---刷野-iii&#34;&gt;B - 刷野 III&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10074&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10074&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现最坏情况就是每次『试探』都不中的情况，再试探中最坏的那一个。为啥呢，相当于我们每次攻击的一定是未知元素中血最多的一个。既然已经试探出了比阈值大的所有元素，那么下一个攻击的就一定是阈值本身，如果这次跳过它，它就会成为下一次试探失败的元素。这显然不如一开始就直接用新阈值试探。&lt;/p&gt;
&lt;p&gt;从大到小排序。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{j, i}\)&lt;/span&gt; 表示只确定了前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 大的数，已经杀了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个人的最坏情况最小代价。那么显然这一次的阈值是 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;。随便选出上一次的阈值 &lt;span class=&#34;math inline&#34;&gt;\(a_k\)&lt;/span&gt;，那么中间这一段待确定的元素数量为 &lt;span class=&#34;math inline&#34;&gt;\(i-k\)&lt;/span&gt;。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{j, i}&amp;amp;=\min\limits_{k&amp;lt;i}\{f_{j-1,k}+(i-k)\times a_i\}\\
&amp;amp;=\min\limits_{k&amp;lt;i}\{f_{j-1,k}-k\times a_i\}+i\times a_i
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;经过验证，虽然这个式子和题解长得不一样，但是是对的 &lt;del&gt;因为我 n^3 暴力 A 了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;推出斜优形式 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_{j-1,A}-f_{j-1,B}}{A-B}&amp;lt;a_i\)&lt;/span&gt;，但我的朋友，&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 是递减的。所以用单调栈维护递增斜率即可。&lt;del&gt;或者你也可以学习 grisses 打一个单调队列上二分&lt;/del&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e12;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P10074_4.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::sort(a.begin() + 1, a.end(), std::greater&amp;lt;long long&amp;gt; ());
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf));
    f[0][0] = 0ll;
    for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
        std::vector&amp;lt;int&amp;gt; q(n + 1);
        int t = -1;
        q[++t] = j - 1;
        auto f1 = [&amp;amp;](int A, int B) &amp;#123;
            return f[j - 1][A] - f[j - 1][B];
        &amp;#125;;
        auto f2 =[&amp;amp;](int A, int B) &amp;#123;
            return A - B;
        &amp;#125;;
        for (int i = j; i &amp;lt;= n; ++i) &amp;#123;
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(q[t], q[t - 1]) &amp;gt; a[i] * f2(q[t], q[t - 1]); --t);
            f[j][i] = f[j - 1][q[t]] + (i - q[t]) * a[i];
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(i, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(i, q[t]); --t);
            q[++t] = i;
        &amp;#125;
    &amp;#125;
    auto res(inf);
    for (int i = m; i &amp;lt;= n; ++i)
        res = std::min(res, f[m][i]);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---traka&#34;&gt;C - TRAKA&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7747&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7747&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;稍微手玩一下就可以发现，假如第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个人在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 次的工作时间为 &lt;span class=&#34;math inline&#34;&gt;\([L_{j,i},R_{j,i}]\)&lt;/span&gt;，第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 次为 &lt;span class=&#34;math inline&#34;&gt;\([L_{j,i-1},R_{j,i-1}]\)&lt;/span&gt;，那么要求 &lt;span class=&#34;math inline&#34;&gt;\(L_{j,i}\ge R_{j,i-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(s_j\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的前缀和。假设第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 次加工于 &lt;span class=&#34;math inline&#34;&gt;\(x_{i-1}\)&lt;/span&gt; 开始，那么我们可以把上式转写为 &lt;span class=&#34;math inline&#34;&gt;\(x_{i}+s_{j-1}\times f_{i}\ge x_{i-1}+s_j\times f_{i-1}\)&lt;/span&gt;。也即 &lt;span class=&#34;math inline&#34;&gt;\(x_i-x_{i-1}\ge s_j\times f_{i-1}-s_{j-1}\times f_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;显然需要找到一个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 使得 RSH 取得最大值；现在就可以考虑斜率优化了。由于所有项都和 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 有关，想到两边同除 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}\)&lt;/span&gt; 消掉一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 有关的系数，最后化出来的斜优形式是 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {s_A-s_B}{s_{A-1}-s_{B-1}}&amp;gt;\dfrac {f_{i-1}}{f_i}\)&lt;/span&gt;。由于 RSH 不单调，把所有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 塞到队列里维护递减斜率，打二分即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; a(n + 1), w(m + 1), s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], s[i] = s[i - 1] + a[i];
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cin &amp;gt;&amp;gt; w[i];
    std::vector&amp;lt;long long&amp;gt; f(m + 1);
    std::vector&amp;lt;int&amp;gt; q(n + 1);
    int h = 0, t = -1;
    q[++t] = 1;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        for (; h &amp;lt; t &amp;amp;&amp;amp; (s[i] - s[q[t]]) * (s[q[t] - 1] - s[q[t - 1] - 1]) &amp;gt; (s[q[t]] - s[q[t - 1]]) * (s[i - 1] - s[q[t] - 1]); --t);
        q[++t] = i;
    &amp;#125;
    for (int i = 2; i &amp;lt;= m; ++i) &amp;#123;
        int to = q[h];
        for (int l = h + 1, r = t, mid; l &amp;lt;= r; ) &amp;#123;
            mid = (l + r) &amp;gt;&amp;gt; 1;
            if ((s[q[mid]] - s[q[mid - 1]]) * w[i - 1] &amp;gt; w[i] * (s[q[mid] - 1] - s[q[mid - 1] - 1]))
                to = q[mid], l = mid + 1;
            else
                r = mid - 1;
        &amp;#125;
        f[i] = f[i - 1] + s[to] * w[i - 1] - s[to - 1] * w[i];
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[m] + w[m] * s[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---柠檬&#34;&gt;D - 柠檬&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5504&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5504&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察零：原问题『从两端取』可以转化为分段问题，故从其中一端考虑即可。&lt;/li&gt;
&lt;li&gt;观察一：若有一段连续的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，完整的比拆开的更优。&lt;/li&gt;
&lt;li&gt;观察二：如果一段 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 中夹杂了一些其他元素，那么在哪里分段是说不准的。&lt;/li&gt;
&lt;li&gt;观察三：如果选取的区间是 &lt;span class=&#34;math inline&#34;&gt;\([1,r]\)&lt;/span&gt;，那么贪心地想，&lt;span class=&#34;math inline&#34;&gt;\(a_r\)&lt;/span&gt; 一定是关键值，不然取 &lt;span class=&#34;math inline&#34;&gt;\(a_r\)&lt;/span&gt; 就浪费了。&lt;/li&gt;
&lt;li&gt;观察四：如果选取的区间是 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，那么由观察四，&lt;span class=&#34;math inline&#34;&gt;\(a_l=a_r\)&lt;/span&gt;，且该值为关键值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这几个观察，令 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\([1,i]\)&lt;/span&gt; 中出现次数，&lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示这一段以 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 结尾的最大价值：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\max\limits_{j&amp;lt;i,a_{j+1}=a_i}\{f_j+a_i\times (c_i-c_{j + 1} + 1)^2\}\\
&amp;amp;=\max\limits_{j&amp;lt;i,a_{j+1}=a_i}\{f_j+a_{j+1}\times {c_{j+1}}^2-2\times c_i\times a_{j+1}\times c_{j+1}-2\times c_{j+1}\times a_{j+1}\}+a_i\times(c_i-1)^2
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（怎么这么大一堆。）最后可以化出 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_A-f_B+a_{A+1}\cdot c_{A+1}\cdot (c_{A+1}-2)-a_{B+1}\cdot c_{B+1}\cdot (c_{B+1}-2)}{2(c_{A+1} - c_{B+1})}&amp;gt;c_i\times a_i\)&lt;/span&gt;。发现对于每一种 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(c_i\times a_i\)&lt;/span&gt; 是单增的。单调栈维护即可。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这其实提醒我们关于代换的问题——显然，当与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的项、与 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 有关的项之间存在代换关系时，应该尽量往 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方向靠。&lt;/em&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;7.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n + 1), c(n + 1), la(10001);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        c[i] = c[la[a[i]]] + 1, la[a[i]] = i;
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::vector&amp;lt;int&amp;gt; _t(10001, -1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; _q(10001);
    auto f1 = [&amp;amp;](int A, int B) &amp;#123;
        return f[A] - f[B] + a[A + 1] * c[A + 1] * (c[A + 1] - 2) - a[B + 1] * c[B + 1] * (c[B + 1] - 2);
    &amp;#125;;
    auto f2 = [&amp;amp;](int A, int B) &amp;#123;
        return 2 * (c[A + 1] - c[B + 1]);
    &amp;#125;;
    ++_t[a[1]], _q[a[1]].push_back(0);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        &amp;#123;
            auto &amp;amp;t = _t[a[i]];
            auto &amp;amp;q = _q[a[i]];
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(q[t], q[t - 1]) &amp;lt; c[i] * a[i] * f2(q[t], q[t - 1]); --t);
            f[i] = f[q[t]] + a[i] * (c[i] - c[q[t] + 1] + 1) * (c[i] - c[q[t] + 1] + 1);
        &amp;#125;
        if (i &amp;lt; n) &amp;#123;
            auto &amp;amp;t = _t[a[i + 1]];
            auto &amp;amp;q = _q[a[i + 1]];
            for (; t &amp;gt;= 1 &amp;amp;&amp;amp; f1(i, q[t]) * f2(q[t], q[t - 1]) &amp;gt; f1(q[t], q[t - 1]) * f2(i, q[t]); --t);
            q.resize(++t + 1), q[t] = i;
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---knapsack-with-diminishing-values&#34;&gt;E - Knapsack with Diminishing Values&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc373/tasks/abc373_f&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc373/tasks/abc373_f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现和 &lt;a href=&#34;/20250707-1/#例单调队列优化多重背包&#34;&gt;单调队列优化多重背包&lt;/a&gt; 有异曲同工之妙。&lt;/p&gt;
&lt;p&gt;不妨令 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 表示体积，&lt;span class=&#34;math inline&#34;&gt;\(w_i\)&lt;/span&gt; 表示价值。对于每一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，把所有体积按模 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 的余数分类，设为 &lt;span class=&#34;math inline&#34;&gt;\(j\cdot v_i+x\)&lt;/span&gt;。对于 &lt;span class=&#34;math inline&#34;&gt;\(k\cdot v_i+x\)&lt;/span&gt;，有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j\cdot v_i+x}&amp;amp;=\max\limits_{k&amp;lt;j}\{f_{i-1,k\cdot v_i+x}+(j-k)\cdot w_i-(j-k)^2\}\\
&amp;amp;=\max\limits_{k&amp;lt;j}\{f_{i-1,k\cdot v_i+x}-k\cdot w_i-k^2+2\times j\times k\}-j^2+j\cdot w_i
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;则得到 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_{i-1,A\cdot v_i+x}-f_{i-1,B\cdot v_i+x}+(B-A)\cdot w_i - A^2+B^2}{2(B-A)}&amp;lt;j\)&lt;/span&gt;。注意分母为负。总之单调队列维护递增斜率即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; v(n + 1), w(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long long&amp;gt; (m + 1));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; v[i] &amp;gt;&amp;gt; w[i];
        for (int x = 0; x &amp;lt; v[i]; ++x) &amp;#123;
            int h = 0, t = -1;
            std::vector&amp;lt;int&amp;gt; q;
            auto f1 = [&amp;amp;](int A, int B) &amp;#123;
                return f[i - 1][A * v[i] + x] - f[i - 1][B * v[i] + x] + (B - A) * w[i] - A * A + B * B;
            &amp;#125;;
            auto f2 = [&amp;amp;](int A, int B) &amp;#123;
                return 2 * (B - A);
            &amp;#125;;
            for (int j = 0, J = x; J &amp;lt;= m; ++j, J += v[i]) &amp;#123;
                for (; h &amp;lt; t &amp;amp;&amp;amp; f1(q[h + 1], q[h]) &amp;gt; j * f2(q[h + 1], q[h]); ++h);
                f[i][J] = f[i - 1][J];
                if (h &amp;lt;= t)
                    f[i][J] = std::max(f[i][J], f[i - 1][q[h] * v[i] + x] + (j - q[h]) * w[i] - (j - q[h]) * (j - q[h]));
                for (; h &amp;lt; t &amp;amp;&amp;amp; f1(j, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(j, q[t]); --t);
                q.resize(++t + 1), q[t] = j;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n][m] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f---managing-telephone-poles&#34;&gt;F - Managing Telephone Poles&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1575/M&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1575/M&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;？观察到性质然后被自己忽略了。非常值得批评。&lt;/p&gt;
&lt;p&gt;不难写出类似斜率优化的式子 &lt;span class=&#34;math inline&#34;&gt;\(S(i,j)=\min\{ {x_k}^2-2\times i\times x_k+{y_k}^2-2\times j \times y_k\}+i^2+j^2\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;会下意识尝试固定 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2m)\)&lt;/span&gt; 完成任务，似乎不太行。顺着这个想法会观察到，固定 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 之后，每一列的 poles 中只有和第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行最近的才会有贡献。&lt;/p&gt;
&lt;p&gt;这个是好做的，且这样的相邻点数量是 &lt;span class=&#34;math inline&#34;&gt;\(O(m)\)&lt;/span&gt; 的；于是将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 视为常数进行变形，若将所有 poles 按 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 从小到大排序就能得到斜率形式 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac { {x_A}^2-{x_B}^2+{y_A}^2-{y_B}^2-2\times i\times(x_A-x_B)}{2(y_A-y_B)}&amp;lt;j\)&lt;/span&gt;。维护递增斜率就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 完成问题。&lt;/p&gt;
&lt;p&gt;那么找相邻点这一步大可以摆烂写二分。所以总共是 &lt;span class=&#34;math inline&#34;&gt;\(O(nm\log m)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;不要像我一样把两边最近的都加进队列，不然你会有分母为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的斜率 &lt;img src=&#34;/em/hsh.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m, ++n, ++m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; tag(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(m + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            char t;
            std::cin &amp;gt;&amp;gt; t;
            if (t == &amp;#39;1&amp;#39;)
                g[j].push_back(i), tag[i][j] = 1;
        &amp;#125;
    struct node &amp;#123; long long x, y; &amp;#125;;
    auto res(0ll);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::vector&amp;lt;node&amp;gt; p;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            int to = std::lower_bound(g[j].begin(), g[j].end(), i) - g[j].begin();
            if (to &amp;lt; (int)g[j].size()) &amp;#123;
                p.push_back(&amp;#123; g[j][to], j &amp;#125;);
                if (g[j][to] != i &amp;amp;&amp;amp; to != 0 &amp;amp;&amp;amp; g[j][to] - i &amp;gt; i - g[j][to - 1])
                    p.back() = &amp;#123; g[j][to - 1], j &amp;#125;;
            &amp;#125;
            else if (to != 0)
                p.push_back(&amp;#123; g[j][to - 1], j &amp;#125;);
        &amp;#125;
        std::vector&amp;lt;int&amp;gt; q(m + 1);
        int h = 0, t = -1;
        auto f1 = [&amp;amp;](node A, node B) &amp;#123;
            return A.x * A.x - B.x * B.x + A.y * A.y - B.y * B.y - 2 * i * (A.x - B.x);
        &amp;#125;;
        auto f2 = [&amp;amp;](node A, node B) &amp;#123;
            return 2 * (A.y - B.y);
        &amp;#125;;
        for (int j = 0; j &amp;lt; (int)p.size(); ++j) &amp;#123;
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(p[j], p[q[t]]) * f2(p[q[t]], p[q[t - 1]]) &amp;lt; f1(p[q[t]], p[q[t - 1]]) * f2(p[j], p[q[t]]); --t);
            q[++t] = j;
        &amp;#125;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;  
            for (; h &amp;lt; t &amp;amp;&amp;amp; f1(p[q[h + 1]], p[q[h]]) &amp;lt; j * f2(p[q[h + 1]], p[q[h]]); ++h);
            res += (p[q[h]].x - i) * (p[q[h]].x - i) + (p[q[h]].y - j) * (p[q[h]].y - j);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;g---partition-game&#34;&gt;G - Partition Game&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1527/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1527/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现不太斜优，终于给我浸泡了两天斜优内容的大脑加了勺新的底物。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 段以 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 结尾的最小代价；对 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 套用四边形不等式变式 &lt;span class=&#34;math inline&#34;&gt;\(w(l-1,r+1)+w(l,r)\ge w(l-1,r)+w(l,r+1)\)&lt;/span&gt; 发现成立（其中大多数时候能取等；部分特殊情况取到大于号）。&lt;/p&gt;
&lt;p&gt;那么发现可以用分治优化。发现 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 不那么能快速求；还是套用 &lt;a href=&#34;/20250707-1/#例yet-another-minimization-problem&#34;&gt;Yet Another Minimization Problem&lt;/a&gt; 中的方法，用类似莫队的方式求解。&lt;/p&gt;
&lt;p&gt;发现这个莫队套路也很熟悉了，直接用双端队列维护即可。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(nk\log n)\)&lt;/span&gt;，看着不太安全。但注意到我们在 20 个月前的提交中使用了 &lt;span class=&#34;math inline&#34;&gt;\(O(nk\log n)\)&lt;/span&gt; 的线段树，所以能过的兄弟。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;鉴于 deque 的时空常数都大得吓人，所以我用静态 vector 模拟 deque 了。&lt;/p&gt;
&lt;p&gt;跑得比我之前线段树的一半还快，兄弟。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; pos(n + 1);
    std::vector&amp;lt;int&amp;gt; a(n + 1), _h(n + 1), _t(n + 1, -1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], pos[a[i]].push_back(i);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf));
    f[0][0] = 0ll;
    auto w = [&amp;amp;](int ql, int qr) &amp;#123;
        static int l = 1, r = 0;
        static auto res(0ll);
        for (; l &amp;gt; ql; ) &amp;#123;
            --l;
            auto &amp;amp;h = _h[a[l]], &amp;amp;t = _t[a[l]];
            auto &amp;amp;q = pos[a[l]];
            if (h &amp;lt;= t)
                res -= q[t] - q[h];
            res += q[t] - q[--h];
        &amp;#125;
        for (; r &amp;gt; qr; ) &amp;#123;
            auto &amp;amp;h = _h[a[r]], &amp;amp;t = _t[a[r]];
            auto &amp;amp;q = pos[a[r]];
            res -= q[t--] - q[h];
            if (h &amp;lt;= t)
                res += q[t] - q[h];
            --r;
        &amp;#125;
        for (; r &amp;lt; qr; ) &amp;#123;
            ++r;
            auto &amp;amp;h = _h[a[r]], &amp;amp;t = _t[a[r]];
            auto &amp;amp;q = pos[a[r]];
            if (h &amp;lt;= t)
                res -= q[t] - q[h];
            res += q[++t] - q[h];
        &amp;#125;
        for (; l &amp;lt; ql; ) &amp;#123;
            auto &amp;amp;h = _h[a[l]], &amp;amp;t = _t[a[l]];
            auto &amp;amp;q = pos[a[l]];
            res -= q[t] - q[h++];
            if (h &amp;lt;= t)
                res += q[t] - q[h];
            ++l;
        &amp;#125;
        return res;
    &amp;#125;;
    for (int t = 1; t &amp;lt;= m; ++t) &amp;#123;
        std::function&amp;lt;void(int, int, int, int)&amp;gt; calc = [&amp;amp;](int l, int r, int lp, int rp) &amp;#123;
            if (l &amp;gt; r)
                return;
            if (l == r) &amp;#123;
                for (int i = lp; i &amp;lt;= rp &amp;amp;&amp;amp; i &amp;lt; l; ++i)
                    f[t][l] = std::min(f[t][l], f[t - 1][i] + w(i + 1, l));
                return;
            &amp;#125;
            int mid = (l + r) &amp;gt;&amp;gt; 1, p = -1;
            for (int i = lp; i &amp;lt;= rp &amp;amp;&amp;amp; i &amp;lt; mid; ++i)
                if (f[t - 1][i] + w(i + 1, mid) &amp;lt; f[t][mid])
                    f[t][mid] = f[t - 1][i] + w(i + 1, mid), p = i;
            calc(l, mid - 1, lp, p), calc(mid + 1, r, p, rp);
            return;
        &amp;#125;;
        calc(t, n, t - 1, n - 1);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[m][n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;h---battle-lemmings&#34;&gt;H - Battle Lemmings&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1420/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1420/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易发现 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的数目不变，答案就是 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的对数 - 连续 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的对数。&lt;/p&gt;
&lt;p&gt;然后有一个我们很熟悉的 trick，随便找一个目标序列，那么花费的操作次数就是每个对应的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的位置差。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k}\)&lt;/span&gt; 表示用了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 次操作、&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;、最后一个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的最小连续 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 对数。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j,k}&amp;amp;=\min\limits_{p&amp;lt;k}\left\{f_{i-|k-pos_j|,j-1,p}+\dfrac {(k-p-1)(k-p-2)}2\right\}\\
&amp;amp;=\min\left\{f_{i-|k-pos_j|,j-1,p}-k\cdot p+\dfrac {p(p + 2)}2\right\}+\dfrac {k^2-3k+2}2
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;发现这个式子是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^5)\)&lt;/span&gt; 的，而且看起来很斜优，化为斜率形式 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{2\times f_A-2\times f_B+A(A+2)-B(B+2)}{2(A-B)}&amp;lt;k\)&lt;/span&gt;。维护递增斜率就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n^4)\)&lt;/span&gt; 做了。&lt;/p&gt;
&lt;p&gt;Tip：当时写着写着愣住了，比如这个 &lt;span class=&#34;math inline&#34;&gt;\(i-|k-pos_j|\)&lt;/span&gt; 不是一直在动吗。解决方案？同时维护很多个队列即可。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;注意还要把最后一个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 之后连续 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的代价算上。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e9;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;long long&amp;gt; pos(1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        if (a[i] == 1)
            pos.push_back(i);
    &amp;#125;
    int m = n * (n - 1) / 2;
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; &amp;gt; f(pos.size(), std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; (m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf)));
    f[0][0][0] = 0ll;
    for (int j = 1; j &amp;lt; (int)pos.size(); ++j) &amp;#123;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; _q(m + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
        std::vector&amp;lt;int&amp;gt; _h(m + 1), _t(m + 1, -1);
        for (int k = 0; k &amp;lt;= n; ++k)
            for (int i = m; i &amp;gt;= 0; --i) &amp;#123;
                if (i &amp;gt;= std::abs(k - pos[j])) &amp;#123;
                    auto f1 = [&amp;amp;](long long A, long long B) &amp;#123;
                        return 2 * f[j - 1][i - std::abs(k - pos[j])][A] - 2 * f[j - 1][i - std::abs(k - pos[j])][B] + A * (A + 2) - B * (B + 2);
                    &amp;#125;;
                    auto f2 = [&amp;amp;](long long A, long long B) &amp;#123;
                        return 2 * (A - B);
                    &amp;#125;;
                    auto &amp;amp;h = _h[i - std::abs(k - pos[j])], &amp;amp;t = _t[i - std::abs(k - pos[j])];
                    auto &amp;amp;q = _q[i - std::abs(k - pos[j])];
                    for (; h &amp;lt; t &amp;amp;&amp;amp; f1(q[h + 1], q[h]) &amp;lt; k * f2(q[h + 1], q[h]); ++h) &amp;#123;&amp;#125;
                    if (h &amp;lt;= t)
                        f[j][i][k] = std::min(inf, f[j - 1][i - std::abs(k - pos[j])][q[h]] + (k - q[h] - 1) * (k - q[h] - 2) / 2);
                &amp;#125;
                auto f1 = [&amp;amp;](long long A, long long B) &amp;#123;
                    return 2 * f[j - 1][i][A] - 2 * f[j - 1][i][B] + A * (A + 2) - B * (B + 2);
                &amp;#125;;
                auto f2 = [&amp;amp;](long long A, long long B) &amp;#123;
                    return 2 * (A - B);
                &amp;#125;;
                auto &amp;amp;h = _h[i], &amp;amp;t = _t[i];
                auto &amp;amp;q = _q[i];
                for (; h &amp;lt; t &amp;amp;&amp;amp; f1(k, q[t]) * f2(q[t], q[t - 1]) &amp;lt; f1(q[t], q[t - 1]) * f2(k, q[t]); --t);
                q[++t] = k;
            &amp;#125;
    &amp;#125;
    auto res(-inf);
    int cnt = n - (int)pos.size() + 1;
    cnt = cnt * (cnt - 1) / 2;
    for (int i = 0; i &amp;lt;= m; ++i) &amp;#123;
        for (int k = 0; k &amp;lt;= n; ++k)
            res = std::max(res, cnt - f.back()[i][k] - (n - k) * (n - k - 1) / 2);
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---yakiniku-restaurants&#34;&gt;A - Yakiniku Restaurants&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc067/tasks/arc067_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc067/tasks/arc067_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现固定左右端点后，收益是可以贪心算的；下意识想到只固定左端点，那么右端点应该就可以用单调队列之类的搞一搞。&lt;/p&gt;
&lt;p&gt;先提前把所有东西塞到队列里。左端点一开始在最右边；往左边动一下之后，就可以更新每种菜的队列；发现在所有元素中作决策点的不总是队头；这个地方用 &lt;strong&gt;单调递减的单调栈&lt;/strong&gt; 是极好的。这里的单调栈其实就类似 &lt;a href=&#34;/20250707-1/#优化-dp单调数据结构&#34;&gt;四边形不等式中的单调数据结构&lt;/a&gt; 了。&lt;/p&gt;
&lt;p&gt;维护单调栈中每个决策点的影响区间；显然每个右端点的答案变化量相同；用个类似于差分的东西记录一下就好了。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; s(n + 1), f(n + 1);
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; s[i], s[i] += s[i - 1];
        f[i] = -s[i];
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; a(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= m; ++j)
            std::cin &amp;gt;&amp;gt; a[i][j];
    struct node &amp;#123; int j, l, r; &amp;#125;;
    std::vector&amp;lt;std::stack&amp;lt;node&amp;gt; &amp;gt; _q(m + 1);
    auto res(-inf);
    for (int l = n; l; --l) &amp;#123;
        std::vector&amp;lt;long long&amp;gt; d(n + 1);
        auto add = [&amp;amp;](int l, int r, long long v) &amp;#123;
            d[l] += v;
            if (r != n)
                d[r + 1] -= v;
            return;
        &amp;#125;;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            auto &amp;amp;q = _q[j];
            node now = &amp;#123; j, l, l &amp;#125;;
            add(l, l, a[l][j]);
            for (; !q.empty() &amp;amp;&amp;amp; a[l][j] &amp;gt;= a[q.top().l][q.top().j]; q.pop()) &amp;#123;
                now.r = q.top().r;
                add(q.top().l, q.top().r, a[l][j] - a[q.top().l][q.top().j]);
            &amp;#125;
            q.push(now);
        &amp;#125;
        std::partial_sum(d.begin() + 1, d.end(), d.begin() + 1);
        for (int r = l; r &amp;lt;= n; ++r) &amp;#123;
            f[r] += d[r];
            res = std::max(res, f[r] + s[l]);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---jellyfish-and-miku&#34;&gt;B - Jellyfish and Miku&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1874/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1874/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;唉数列。唉概统。在数学讲义上折磨了我一遍之后还要到这儿来折磨我。&lt;/p&gt;
&lt;p&gt;假设已经知道了 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，考虑求期望步数。设 &lt;span class=&#34;math inline&#34;&gt;\(E_i\)&lt;/span&gt; 为从 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 出发走到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的期望步数。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
E_i=\begin{cases}
E_1+1&amp;amp;i=0\\
0&amp;amp;i=n\\
E_i=(E_{i-1}+1)\cdot \dfrac {a_i}{a_{i+1}+a_i}+(E_{i+1}+1)\cdot \dfrac {a_{i+1}}{a_{i+1}+a_{i}}&amp;amp;\text{otherwise}
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（提示：从『&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 下一步会走哪个方向』考虑。）&lt;/p&gt;
&lt;p&gt;接下来就可以利用你的高中数学知识进行一个 &lt;span class=&#34;math inline&#34;&gt;\(f_0\)&lt;/span&gt; 的求，（一堆过程），得到 &lt;span class=&#34;math inline&#34;&gt;\(E_0=n+2\times \sum\limits_{i=1}^n\dfrac {\sum_{j\le i}a_j}{a_i}\)&lt;/span&gt;，然后想要最小化这个东西。&lt;/p&gt;
&lt;p&gt;不妨令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时已经分配走了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 体积，&lt;span class=&#34;math inline&#34;&gt;\(\sum_{k=1}^i \dfrac {\sum_{l\le k}a_l}{a_k}\)&lt;/span&gt; 的最小值，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\min\limits_{k&amp;lt;j}\left\{f_{i-1,k}+\dfrac {k}{j - k}\right\}\)&lt;/span&gt;。发现它大抵是满足四边形不等式的，按照 &lt;a href=&#34;/20250707-1/#d1d-dp-优化&#34;&gt;2D/1D DP 优化的结论&lt;/a&gt;，代入 &lt;span class=&#34;math inline&#34;&gt;\(p_{i,j-1}&amp;lt;p_{i,j}&amp;lt;p_{i+1,j}\)&lt;/span&gt; 可以 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt; 解决问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; p(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
    std::vector&amp;lt;std::vector&amp;lt;long double&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long double&amp;gt; (m + 1, 1e18));
    f[0][0] = 0ll;
    for (int j = 1; j &amp;lt;= m; ++j)
        for (int i = std::min(j, n); i; --i) &amp;#123;
            int to = ((i == std::min(j, n)) ? j : std::min(p[i + 1][j], j));
            for (int k = p[i][j - 1]; k &amp;lt;= to; ++k)
                if (f[i - 1][k] + k * 1. / (j - k) &amp;lt; f[i][j])
                    f[i][j] = f[i - 1][k] + k * 1. / (j - k), p[i][j] = k;
            // printf(&amp;quot;f[%d][%d] = %Lf, p = %d\n&amp;quot;, i, j, f[i][j], p[i][j]);
        &amp;#125;
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(10) &amp;lt;&amp;lt; n + 2 * f[n][m] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cut-the-sequence&#34;&gt;Cut the Sequence&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10977&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10977&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;通知区间最值-不满足-四边形不等式&#34;&gt;&lt;mark&gt;通知：区间最值 不满足 四边形不等式。&lt;/mark&gt;&lt;/h1&gt;
&lt;p&gt;其实在猜的时候是举了反例的，但是大脑萎缩了推着推着忘记符号了 😅&lt;/p&gt;
&lt;p&gt;看到 &lt;span class=&#34;math inline&#34;&gt;\(f_i=\min\limits_{g(i)\le j&amp;lt;i}\{f_j+\max\{a_{j+1\sim i}\}\}\)&lt;/span&gt; 这个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的范围其实是有点单调队列优化的感觉的，但这个最大值传统的单调队列不是很可做。可以注意到最大值这一项有点 &lt;strong&gt;单调队列&lt;/strong&gt; 后缀最大值的感觉（实际上就是）；一个很自然的想法是利用这个最大值影响的区间，维护 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的线段树来暴力做。&lt;/p&gt;
&lt;p&gt;另一个比较牛的做法是发现同一个下标的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的关系。首先需要注意到 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 单调不降；对于同一个 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，能取到的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 就是最靠前的；维护一个 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的单减队列，那么共用同一个 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的就是相邻两个下标之间的部分，其最优决策在能取到的最前端取得；需要注意到队列里的贡献并不单调，需要用一个 multiset 来存储所有贡献并查找、更新。&lt;/p&gt;
&lt;p&gt;需要注意单调队列里某个元素 &lt;span class=&#34;math inline&#34;&gt;\(f_{q_i}\)&lt;/span&gt; 结合的其实是 &lt;span class=&#34;math inline&#34;&gt;\(a_{q_{i+1}}\)&lt;/span&gt;。还需要注意队头的维护，可能需要一些小巧思。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;1.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;long long&amp;gt; s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], s[i] = s[i - 1] + a[i];
    int h = 0, t = -1;
    std::multiset&amp;lt;long long&amp;gt; st;
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; q(n + 1);
    q[++t] = &amp;#123; 0, 0 &amp;#125;, a[0] = 0x3f3f3f3f;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (; s[i] - s[q[h].second] &amp;gt; m; ) &amp;#123;
            st.erase(st.find(f[q[h].second] + a[q[h + 1].first]));
            if (++q[h].second &amp;gt;= q[h + 1].first)
                a[q[++h].first] = 0x3f3f3f3f;
            else
                st.insert(f[q[h].second] + a[q[h + 1].first]);
        &amp;#125;
        for (; h &amp;lt; t &amp;amp;&amp;amp; a[q[t].first] &amp;lt;= a[i]; --t)
            st.erase(st.find(f[q[t - 1].second] + a[q[t].first]));
        st.insert(f[q[t].second] + a[i]), q[++t] = &amp;#123; i, i &amp;#125;;
        f[i] = *st.begin();
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="斜率优化" />
        <category term="DP" />
        <category term="四边形不等式" />
        <updated>2025-07-15T06:13:24.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250712/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250712/"/>
        <content type="html">&lt;p&gt;我生待明日，万事成蹉跎。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;town&#34;&gt;town&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6407/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6407/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一棵大小为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的树，点有点权，欲将树划分为若干个连通块，使得每个块内的点权异或和都为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，求方案数，模 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6,0\le x\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 引导的子树异或和为 &lt;span class=&#34;math inline&#34;&gt;\(s_u\)&lt;/span&gt;。把连通块转化为对断边的讨论。考察一条最末端的边，其下方子树的异或和一定为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;简单数归可得断掉的每一条边，其下方子树异或和为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;（那么显然有解的充要条件是 &lt;span class=&#34;math inline&#34;&gt;\(s_1=0\lor s_1=x\)&lt;/span&gt;）。考虑树形 DP，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,0/1}\)&lt;/span&gt; 表示当前 DP 到 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 子树头上那条边，它连接了一个异或和为 &lt;span class=&#34;math inline&#34;&gt;\(s_u\)&lt;/span&gt; （或 &lt;span class=&#34;math inline&#34;&gt;\(s_u\oplus x\)&lt;/span&gt;）的连通块的合法方案数，分别代表已经『断』掉了偶数 / 奇数个合法连通块。&lt;/p&gt;
&lt;p&gt;首先自然可以一条边都不断，&lt;span class=&#34;math inline&#34;&gt;\(f_{u,0}=1\)&lt;/span&gt;。那么更新就应为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f&amp;#39;_{u,0}=f_{u,0}\cdot f_{v,0}+f_{u,1}\cdot f_{v,1}\\
f&amp;#39;_{u,1}=f_{u,0}\cdot f_{v,1}+f_{u,1}\cdot f_{v,0}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;接着，如果 &lt;span class=&#34;math inline&#34;&gt;\(s_u\)&lt;/span&gt; 恰好为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，这条边连接的连通块的异或和就可以是 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，那么就可以在这条边处断开，提供一个空连通块（加入异或和为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的方案）。&lt;/p&gt;
&lt;p&gt;最后注意 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 可能为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，需要特殊处理——每个 &lt;span class=&#34;math inline&#34;&gt;\(s_u=0\)&lt;/span&gt; 处都可以断开。&lt;/p&gt;
&lt;p&gt;这个 DP 状态实在非常新奇；同时 DP 和删边又是分开的，显得非常割裂。看 sol、听 grisses 讲解的时候都完全一头雾水。quack 说这是因为我没做过连通块 DP /ll&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;ex_town1.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1), s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        s[x] = a[x];
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                s[x] ^= s[i];
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    if (s[1] != 0 &amp;amp;&amp;amp; s[1] != m) &amp;#123;
        std::cout &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    if (m == 0) &amp;#123;
        auto res(1ll);
        for (int i = 2; i &amp;lt;= n; ++i)
            if (s[i] == 0)
                (res *= 2) %= mod;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    else &amp;#123;
        std::vector&amp;lt;std::array&amp;lt;long long, 2&amp;gt; &amp;gt; f(n + 1);
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            f[x][0] = 1ll;
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    DFS(i, x);
                    std::tie(f[x][0], f[x][1]) = std::make_tuple((f[x][0] * f[i][0] + f[x][1] * f[i][1]) % mod, (f[x][0] * f[i][1] + f[x][1] * f[i][0]) % mod);
                &amp;#125;
            if (x != 1) &amp;#123;
                if (s[x] == m)
                    (f[x][1] += f[x][0]) %= mod;
                if (s[x] == 0)
                    (f[x][0] += f[x][1]) %= mod;
            &amp;#125;
            // printf(&amp;quot;f[%d][0] = %lld, f[%d][1] = %lld\n&amp;quot;, x, f[x][0], x, f[x][1]);
            return;
        &amp;#125;;
        DFS(1, -1);
        std::cout &amp;lt;&amp;lt; (s[1] == m ? f[1][0] : f[1][1]) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;perm&#34;&gt;perm&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6407/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6407/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;、元素两两不同的序列，你可以交换任意两个元素。试使用最少交换次数使得序列有序，问方案数。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于一个下标，将它和它上面元素的 rank 连有向边，那么每个下标的出、入度都为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，则图由若干个简单环组成。&lt;/p&gt;
&lt;p&gt;接着，考虑一次任意一次交换 &lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt; 的操作会带来什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 不在同一环上：&lt;/p&gt;
该操作使得 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 所在的环合为一个大环。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 在同一环上：&lt;/p&gt;
&lt;p&gt;该操作使得环以 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 为分界线裂成两个小环。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以得到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个自环为目标，数归得到，对于最优方案，当且仅当每次交换的目标都在同一环上。&lt;/p&gt;
&lt;p&gt;考虑方案数。把一个大小为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的环，欲将其拆成 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个自环，共需 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 次 &lt;em&gt;有序&lt;/em&gt; 的拆解。&lt;/p&gt;
&lt;p&gt;考虑 DP，令 &lt;span class=&#34;math inline&#34;&gt;\(f_k\)&lt;/span&gt; 为方案数，那么 &lt;span class=&#34;math inline&#34;&gt;\(f_k=\dfrac {k\sum\limits_{j=1}^{k-1} f_j\cdot f_{k-j}\cdot C_{k-2}^j}2\)&lt;/span&gt;。尝试打表，（惊讶地）发现 &lt;span class=&#34;math inline&#34;&gt;\(f_k=k^{k-2}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;不同的环之间的操作可以交错，看作多重集排列即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), p(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], p[i] = i;
    std::sort(p.begin() + 1, p.end(), [&amp;amp;](int i, int j) &amp;#123; return a[i] &amp;lt; a[j]; &amp;#125;);
    std::vector&amp;lt;int&amp;gt; f(n + 1), siz(n + 1, 1);
    std::iota(f.begin() + 1, f.end(), 1);
    std::function&amp;lt;int(int)&amp;gt; find = [&amp;amp;](int x) &amp;#123;
        return x == f[x] ? x : f[x] = find(f[x]);
    &amp;#125;;
    auto merge = [&amp;amp;](int x, int y) &amp;#123;
        x = find(x), y = find(y);
        if (x != y)
            siz[y] += siz[x], f[x] = y;
        return;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)
        merge(i, p[i]);
    std::vector&amp;lt;long long&amp;gt; g(n + 1), fac(n + 1), inv(n + 1);
    g[1] = g[2] = 1ll, fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    for (int i = 3; i &amp;lt;= n; ++i)
        g[i] = qkp(i, i - 2);
    int cnt(0);
    auto res(1ll);
    for (int i = 1; i &amp;lt;= n; ++i)
        if (f[i] == i) &amp;#123;
            cnt += siz[i] - 1;
            (res *= g[siz[i]]) %= mod;
            (res *= inv[siz[i] - 1]) %= mod;
        &amp;#125;
    (res *= fac[cnt]) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cf2122d-traffic-lights&#34;&gt;CF2122D Traffic Lights&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/2122/problem/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/2122/problem/D&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个由 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个顶点和 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条边组成的简单无向连通图。在顶点 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 有一个标记。认为初始时间为 &lt;span class=&#34;math inline&#34;&gt;\(t=0\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 秒后，如果标记位于点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; ，则必须执行以下操作之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等待一秒。&lt;/li&gt;
&lt;li&gt;将标记沿 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的第 &lt;span class=&#34;math inline&#34;&gt;\((t \bmod \mathrm{deg}(u) + 1)\)&lt;/span&gt; 条边移动，花费一秒。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算将标记从顶点 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 移到顶点 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 所需的最短时间，以及在使总时间最小化的同时所能达到的最短等待时间。&lt;span class=&#34;math inline&#34;&gt;\(m\le 5\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;能够发现这是一个边权和 dis 有关的最短路，本着分层图一类的想法，考察答案的最值。发现一个很松的上界是 &lt;span class=&#34;math inline&#34;&gt;\(O(m)\)&lt;/span&gt;；发现实际情况会比这个乐观得多，这个时候就会考虑用一些暴力做法草过去了。&lt;/p&gt;
&lt;p&gt;实际上有一个上界是 &lt;span class=&#34;math inline&#34;&gt;\(3n\)&lt;/span&gt;：取一条最短路，则不存在路径外的点，与路径上至少四个点有连边，否则可以更新最短路。设最短路长 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，让每次等待时间取满，考察答案发现为 &lt;span class=&#34;math inline&#34;&gt;\(2k\)&lt;/span&gt;（路径上点之间）、&lt;span class=&#34;math inline&#34;&gt;\(3(n-k)\)&lt;/span&gt;（路径上与路径外），共为 &lt;span class=&#34;math inline&#34;&gt;\(\le 3n\)&lt;/span&gt;。还有一个上确界是 &lt;span class=&#34;math inline&#34;&gt;\(2n-3\)&lt;/span&gt;，可以欣赏一下 &lt;a href=&#34;https://codeforces.com/blog/entry/144876?#comment-1295568&#34; class=&#34;uri&#34;&gt;https://codeforces.com/blog/entry/144876?#comment-1295568&lt;/a&gt;，我没看懂 😰&lt;/p&gt;
&lt;p&gt;总之可以猜到暴力 dij 上 DP 得到…… 啊题解怎么说是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2+m)\)&lt;/span&gt; 的。原因是求得答案上界之后就能暴力模拟这个过程了 😅&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, m;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
        for (int x, y; m--; ) &amp;#123;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
            g[x].push_back(y), g[y].push_back(x);
        &amp;#125;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; dis(2, std::vector&amp;lt;int&amp;gt; (n + 1, inf));
        dis[1][1] = 0;
        for (int t = 0; ; ++t) &amp;#123;
            auto &amp;amp;d = dis[t &amp;amp; 1], &amp;amp;la = dis[(t &amp;amp; 1) ^ 1];
            std::vector&amp;lt;int&amp;gt; (n + 1, inf).swap(d);
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                int to = t % ((int)g[i].size());
                d[g[i][to]] = std::min(d[g[i][to]], la[i]);
                d[i] = std::min(d[i], la[i] + 1);
            &amp;#125;
            if (d[n] != inf) &amp;#123;
                std::cout &amp;lt;&amp;lt; t + 1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; d[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
                break;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;arc202a-merge-and-increment&#34;&gt;ARC202A Merge and Increment&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc202/tasks/arc202_a&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc202/tasks/arc202_a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设相邻元素全部不同，至少在当前这一步有一个很显然的策略（记为 &lt;em&gt;策略一&lt;/em&gt;）是选全局最小值，把它和它左边、右边更小的一个 merge 起来。&lt;/p&gt;
&lt;p&gt;注意到如果当前全局最小值有相邻的偶数个，可以把相邻项合并一次，得到长度减半的区间，一定不劣（记为 &lt;em&gt;策略二&lt;/em&gt;）；假如当前全局最小值存在相邻的奇数个，很容易注意到有两种处理方式：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;选取偶数个应用策略二，剩余一个应用策略一。&lt;/li&gt;
&lt;li&gt;花一步，补一个全局最小值，转化为策略二。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很容易发现第二种方式一定不劣 😅。模拟即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; a(1);
        &amp;#123;
            for (int i = 1, x; i &amp;lt;= n; ++i) &amp;#123;
                std::cin &amp;gt;&amp;gt; x;
                if (x != a.back().first)
                    a.emplace_back(x, 1);
                else
                    ++a.back().second;
            &amp;#125;
            n = (int)a.size() - 1;
        &amp;#125;
        std::vector&amp;lt;int&amp;gt; pre(n + 2), nex(n + 1), tag(n + 1);
        std::priority_queue&amp;lt;std::pair&amp;lt;int, int&amp;gt;, std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt;, std::greater&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; q;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            q.emplace(a[i].first, i);
            pre[i] = i - 1, nex[i] = i + 1;
        &amp;#125;
        nex[0] = 1, pre[n + 1] = n;
        auto del = [&amp;amp;](int i) &amp;#123;
            tag[i] = 1;
            pre[nex[i]] = pre[i], nex[pre[i]] = nex[i];
            return;
        &amp;#125;;
        auto res(0ll);
        for (; (int)q.size() &amp;gt; 1;) &amp;#123;
            auto [x, id] = q.top();
            q.pop();
            if (tag[id] || a[id].first != x)
                continue;
            if (a[id].second == 1) &amp;#123;
                if (!pre[id] || (nex[id] != n + 1 &amp;amp;&amp;amp; a[nex[id]].first &amp;lt;= a[pre[id]].first))
                    res += a[nex[id]].first - x, a[id].first = a[nex[id]].first;
                else
                    res += a[pre[id]].first - x, a[id].first = a[pre[id]].first;
            &amp;#125;
            else &amp;#123;
                if (a[id].second &amp;amp; 1)
                    ++res, ++a[id].second;
                ++a[id].first, a[id].second /= 2;
            &amp;#125;
            if (pre[id] &amp;amp;&amp;amp; a[id].first == a[pre[id]].first)
                a[id].second += a[pre[id]].second, del(pre[id]);
            if (nex[id] != n + 1 &amp;amp;&amp;amp; a[id].first == a[nex[id]].first)
                a[id].second += a[nex[id]].second, del(nex[id]);
            q.emplace(a[id].first, id);
        &amp;#125;
        &amp;#123;
            auto [x, id] = q.top();
            for ( ; a[id].second != 1; ) &amp;#123;
                if (a[id].second &amp;amp; 1)
                    ++res, ++a[id].second;
                ++a[id].first, a[id].second /= 2;
            &amp;#125;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <updated>2025-07-12T07:36:52.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250709/</id>
        <title>练习 - DP 凸优化</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250709/"/>
        <content type="html">&lt;p&gt;Stewart’s theorem：在线段 &lt;span class=&#34;math inline&#34;&gt;\(AB\)&lt;/span&gt; 上取一点 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(\vec{AB}=\lambda \vec{AM}\)&lt;/span&gt;。在 &lt;span class=&#34;math inline&#34;&gt;\(AB\)&lt;/span&gt; 上方任取一点 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt;，则有 &lt;span class=&#34;math inline&#34;&gt;\(PM^2=(1-\lambda) PA^2+\lambda PB^2-\lambda(1-\lambda) AB^2\)&lt;/span&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-akvizna&#34;&gt;D. Akvizna&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6393/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6393/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实到这里应该发现了，WQS 的奖励都以一次项系数出现，原因也很显然，奖励的对象是一次项系数嘛。此外，WQS 内层 DP 数组的维度都应和操作次数无关，而 DP 值应为最大收益。这个也很显然。&lt;/p&gt;
&lt;p&gt;令一轮比赛的惩罚是 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 然后二分。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{j}\)&lt;/span&gt; 表示剩余人数为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 时的最大收益，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{j}=\max\limits_{k\ge j}\left\{f_k+\frac {k-j}k\right\}-mid\)&lt;/span&gt;。最后在 &lt;span class=&#34;math inline&#34;&gt;\(f_0\)&lt;/span&gt; 处找答案即可。&lt;/p&gt;
&lt;p&gt;然后就发现一个很可怕的问题，内层 DP 咋写。发现把 &lt;span class=&#34;math inline&#34;&gt;\(\frac {k-j}k\)&lt;/span&gt; 改写成 &lt;span class=&#34;math inline&#34;&gt;\(1-\frac jk\)&lt;/span&gt; 后出现交叉项，考虑斜优。令 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;lt;b\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {f_a-f_b}{\frac 1a - \frac 1b} &amp;gt; j\)&lt;/span&gt;。维护单减的斜率即可。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;笑话：二分 50 次不够，需要 60 次。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    double l = 0., r = 1e5, mid;
    auto calc = [&amp;amp;](double mid) &amp;#123;
        std::vector&amp;lt;double&amp;gt; f(n + 1, -1e18);
        f[n] = 0.;
        int h = 1, t = 0;
        std::vector&amp;lt;int&amp;gt; q(n + 1), p(n + 1);
        q[++t] = n;
        // printf(&amp;quot;mid = %.3lf: \n&amp;quot;, mid);
        for (int i = n - 1; ~i; --i) &amp;#123;
            for (; h &amp;lt; t &amp;amp;&amp;amp; (f[q[h + 1]] - f[q[h]]) / (1. / q[h + 1] - 1. / q[h]) &amp;gt;= i; ++h);
            f[i] = f[q[h]] + 1. - i * 1.0 / q[h] - mid, p[i] = p[q[h]] + 1;
            // printf(&amp;quot;  %d: f = %.3lf, p = %d, q[h] = %d(%.3lf / %d)\n&amp;quot;, i, f[i], p[i], q[h], f[q[h]], p[q[h]]);
            if (i) &amp;#123;
                for (; h &amp;lt; t &amp;amp;&amp;amp; (f[i] - f[q[t]]) / (1. / i - 1. / q[t]) &amp;gt;= (f[q[t]] - f[q[t - 1]]) / (1. / q[t] - 1. / q[t - 1]); --t);
                q[++t] = i;
            &amp;#125;
        &amp;#125;
        // printf(&amp;quot;res = %.3lf\n&amp;quot;, f[0] + p[0] * mid);
        return std::make_pair(f[0], p[0]);
    &amp;#125;;
    // calc(0.);
    // return 0;
    double res(0.);
    for (int i = 1; i &amp;lt;= 60; ++i) &amp;#123;
        mid = (l + r) / 2.;
        auto t(calc(mid));
        if (t.second &amp;gt;= k)
            l = mid, res = t.first + k * mid;
        else
            r = mid;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(8) &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e.-poborcy-podatkowi&#34;&gt;E. Poborcy podatkowi&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6393/problem/5&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6393/problem/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先令 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,l}(i),l=0,1,2,3\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 上挂了长度为 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 的半条链，共有 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 条整链的最大收益。&lt;/p&gt;
&lt;p&gt;可以观察到是凸的。那么不难发现需要闵可夫斯基和，考虑 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 位置上的合并。&lt;strong&gt;首先需要注意到儿子上长度为 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 的链到父亲上会变成 &lt;span class=&#34;math inline&#34;&gt;\(l+1\)&lt;/span&gt;&lt;/strong&gt;。显然每条可以不选；如果选了 &lt;span class=&#34;math inline&#34;&gt;\(cnt_a\)&lt;/span&gt; 条长度为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的半链，那么合并出来的结果是 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1-cnt_3\)&lt;/span&gt; 条长度为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 的链、&lt;span class=&#34;math inline&#34;&gt;\(cnt_2\bmod 2\)&lt;/span&gt; 条长度为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的链，并且要求两者不同时出现。发现这个东西基本上处理不了。&lt;/p&gt;
&lt;p&gt;接着注意到这个形式有点像背包。但怎么处理 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt; 配对的这个要求呢？有个非常精妙的在物品体积上做文章的方法：&lt;/p&gt;
&lt;p&gt;首先注意到我们最后的查询的答案肯定要求把所有儿子用完。那么不妨设体积之和为儿子总数 &lt;span class=&#34;math inline&#34;&gt;\(tot\)&lt;/span&gt;。接着，对 &lt;span class=&#34;math inline&#34;&gt;\(cnt_0\)&lt;/span&gt;（同时也是 &lt;span class=&#34;math inline&#34;&gt;\(cnt_4\)&lt;/span&gt;）没有限制，直接令其体积为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(cnt_2\)&lt;/span&gt; 单独处理（等会儿会说），为了不对现在的问题产生影响也令其体积为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。对于 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt;，显然两者平均体积需要为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;；你可以令 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt; 体积为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt; 体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;接下来就有个很好的性质：&lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt; 必须和 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt; 配对才能让平均体积为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。在 &lt;span class=&#34;math inline&#34;&gt;\(tot\)&lt;/span&gt; 处查找的答案，由 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个体积不为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的物品和 &lt;span class=&#34;math inline&#34;&gt;\(tot-x\)&lt;/span&gt; 个体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的物品（&lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt;）组成，原因是背包会贪心地在所有『剩余』的分组中选择体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的一项。再计算一下 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt;，发现显然为 &lt;span class=&#34;math inline&#34;&gt;\(tot-x\)&lt;/span&gt;。符合目的。&lt;/p&gt;
&lt;p&gt;在 &lt;span class=&#34;math inline&#34;&gt;\(dp_{tot}\)&lt;/span&gt; 处查找可以找到 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1=cnt_3\)&lt;/span&gt; 时的答案；同理，在 &lt;span class=&#34;math inline&#34;&gt;\(dp_{tot-1},dp_{tot1+1}\)&lt;/span&gt; 处可以查找到 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1=cnt_3\pm 1\)&lt;/span&gt; 的答案。&lt;/p&gt;
&lt;p&gt;接下来再考虑 &lt;span class=&#34;math inline&#34;&gt;\(cnt_2\)&lt;/span&gt;，解决『&lt;span class=&#34;math inline&#34;&gt;\(cnt\bmod2=1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1\ne cnt_3\)&lt;/span&gt; 不能同时成立』的限制。那太好了，直接多开一维记录 &lt;span class=&#34;math inline&#34;&gt;\(cnt_2\bmod 2\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;啊啊太妙了。像利用体积为 &lt;span class=&#34;math inline&#34;&gt;\(-1,1\)&lt;/span&gt; 的随机数据背包期望最大体积不超过 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt V\)&lt;/span&gt; 的那个方法，显然就没有办法利用凸性了。所以这或许是闵可夫斯基和做法的唯一解？&lt;/p&gt;
&lt;p&gt;需要知道，如果设 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 而 &lt;span class=&#34;math inline&#34;&gt;\(cnt_3\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，始终会出一些问题。这个我和 yly 讨论了一下没啥结果。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e12;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;1.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y, w; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; w;
        g[x].emplace_back(y, w), g[y].emplace_back(x, w);
    &amp;#125;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    std::vector&amp;lt;arr&amp;gt; f(n + 1, arr(4));
    struct node &amp;#123;
        std::vector&amp;lt;arr&amp;gt; f;
        node(): f(2) &amp;#123;&amp;#125;
        node(std::vector&amp;lt;arr&amp;gt; f1): f(f1) &amp;#123;&amp;#125;
        arr&amp;amp; operator[](int q) &amp;#123;
            return f[q];
        &amp;#125;
    &amp;#125;;
    auto getmax = [&amp;amp;](arr p, arr q) &amp;#123;
        arr res(p);
        if (q.size() &amp;gt; p.size())
            res.resize(q.size());
        for (int i = 0; i &amp;lt; (int)q.size(); ++i)
            res[i] = std::max(res[i], q[i]);
        return res;
    &amp;#125;;
    auto merge = [&amp;amp;](arr &amp;amp;p, arr &amp;amp;q) &amp;#123;
        arr res(p.size() + q.size() - 1), dp(p.size()), dq(q.size());
        std::adjacent_difference(p.begin(), p.end(), dp.begin());
        std::adjacent_difference(q.begin(), q.end(), dq.begin());
        std::merge(dp.begin() + 1, dp.end(), dq.begin() + 1, dq.end(), res.begin() + 1, std::greater&amp;lt;long long&amp;gt; ());
        res[0] = p[0] + q[0];
        std::partial_sum(res.begin(), res.end(), res.begin());
        return res;
    &amp;#125;; 
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        if ((int)g[x].size() == 1 &amp;amp;&amp;amp; x != 1) &amp;#123;
            f[x][1] = f[x][2] = f[x][3] = -inf;
            return;
        &amp;#125;
        int tot = (int)g[x].size() - (x != 1);
        std::vector&amp;lt;arr&amp;gt; w1(1), w2(1);
        for (auto [i, w] : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                w1.push_back(&amp;#123; f[i][0] + w, std::max(f[i][0], f[i][3] + w), f[i][2] + w &amp;#125;);
                w2.push_back(&amp;#123; -inf, f[i][1] + w &amp;#125;);
            &amp;#125;
        auto fun = [&amp;amp;](arr &amp;amp;p, arr &amp;amp;q) &amp;#123;
            arr res(p.size() + q.size() - 1, -inf);
            for (int ip = 0; ip &amp;lt; 2; ++ip)
                for (int iq = 0; iq &amp;lt; 2; ++iq) &amp;#123;
                    arr tp, tq;
                    for (int i = ip; i &amp;lt; (int)p.size(); i += 2)
                        tp.push_back(p[i]);
                    for (int i = iq; i &amp;lt; (int)q.size(); i += 2)
                        tq.push_back(q[i]);
                    auto t = merge(tp, tq);
                    for (int i = 0; i &amp;lt; (int)t.size(); ++i)
                        if (i * 2 + ip + iq &amp;lt; (int)res.size())
                            res[i * 2 + ip + iq] = std::max(res[i * 2 + ip + iq], t[i]);
                &amp;#125;
            return res;
        &amp;#125;; 
        std::function&amp;lt;node(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
            if (l == r)
                return node(&amp;#123; w1[l], w2[l] &amp;#125;);
            int mid = (l + r) &amp;gt;&amp;gt; 1;
            node t1(calc(l, mid)), t2(calc(mid + 1, r));
            return node(&amp;#123; getmax(fun(t1[0], t2[0]), fun(t1[1], t2[1])),
                          getmax(fun(t1[0], t2[1]), fun(t1[1], t2[0])) &amp;#125;);
        &amp;#125;;
        auto t(calc(1, tot));
        f[x][0] = t[0][tot], f[x][1] = t[0][tot - 1], f[x][2] = t[1][tot], f[x][3] = t[0][tot + 1];
        return;
    &amp;#125;;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; f[1][0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="DP 优化" />
        <updated>2025-07-09T13:59:41.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250707-1/</id>
        <title>决策单调性</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250707-1/"/>
        <content type="html">&lt;p&gt;等和线：在线段 &lt;span class=&#34;math inline&#34;&gt;\(AB\)&lt;/span&gt; 上取一点 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(\vec{AB}=\lambda \vec{AM}\)&lt;/span&gt;。在 &lt;span class=&#34;math inline&#34;&gt;\(AB\)&lt;/span&gt; 上方任取一点 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt;，则有 &lt;span class=&#34;math inline&#34;&gt;\(\vec{PM}=(1-\lambda) \vec{PA}+\lambda \vec{PB}\)&lt;/span&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;什么是-xdyd-dp&#34;&gt;什么是 xD/yD DP&lt;/h2&gt;
&lt;p&gt;即 DP 数组共有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 维，一次转移复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^y)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;为什么要给一句话单开一个标题&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;下面设通式 &lt;span class=&#34;math inline&#34;&gt;\(f_i=\max\left\{f_j+w(i,j)\right\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;单调队列优化-dp&#34;&gt;单调队列优化 DP&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 仅包含 &lt;span class=&#34;math inline&#34;&gt;\(i,j\)&lt;/span&gt; 的最高一次项。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果要求 &lt;span class=&#34;math inline&#34;&gt;\(j\in [1,i]\)&lt;/span&gt;，前缀最小值即可。&lt;/li&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的取值范围在到处乱动，可以写 DS =_=&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的取值范围 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 随着 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 增大而 &lt;span class=&#34;math inline&#34;&gt;\(l,r\)&lt;/span&gt; 都不减小，那么可以使用单调队列。&lt;/p&gt;
&lt;p&gt;顺带一提，和这种的单调队列用法相似的『单调栈』主要在斜优里出现。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体过程被 grizzly bear 吃掉了 &lt;img src=&#34;/em/eat.gif&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;例单调队列优化多重背包&#34;&gt;例：单调队列优化多重背包&lt;/h3&gt;
&lt;p&gt;朴素的多重背包式子是 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\max\left\{f_{i-1,j-k\times v_i}+k\times w_i\right\}\)&lt;/span&gt;，因为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 和整个式子无关，所以是关于 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的 1D/1D。&lt;/p&gt;
&lt;p&gt;为了套用单调队列，需要把查询的项变成连续的。发现 &lt;span class=&#34;math inline&#34;&gt;\(j-k\times v_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 关于 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 同余；且随着 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的增大，查询的位置不断移动 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt;。那么不妨把所有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 按照模 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 的余数分开做。具体地，不妨设 &lt;span class=&#34;math inline&#34;&gt;\(j=a\times v_i+b\)&lt;/span&gt;，将 &lt;span class=&#34;math inline&#34;&gt;\(j-k\times v_i\)&lt;/span&gt; 替换为余数写法，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j}&amp;amp;=\max\{f_{i-1,x\times v_i+b}+(a-x)\times v_i\}\\
&amp;amp;=\max\{f_{i-1,x\times v_i+b}-x\times v_i\}+a\times v_i
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;限制 &lt;span class=&#34;math inline&#34;&gt;\((a-x)\)&lt;/span&gt; 的取值不超过物品数，在不同模数下按 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 从小到大将 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 这一维进行单调队列优化即可。容易发现会不重不漏枚举所有体积；复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(nV)\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;斜率优化-dp&#34;&gt;斜率优化 DP&lt;/h2&gt;
&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 种含有 &lt;span class=&#34;math inline&#34;&gt;\(i,j\)&lt;/span&gt; 的交叉项，可以考虑斜优。&lt;/p&gt;
&lt;p&gt;具体过程，（如果你愿意），可以看这篇 &lt;a href=&#34;/20210214/&#34;&gt;四年半前的博客&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于符号等问题，分享一下我的做法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单调队列维护：适用于符号和右侧斜率要求单调性相反的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，讨论队头维护。不妨假设 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 为队头第二个元素，&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 为队头第一个元素。&lt;/li&gt;
&lt;li&gt;如果队头 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 需要被弹出，说明 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;；假设式子要求 max，则用 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 转移得到的答案 &amp;gt; 用 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 转移得到的答案。&lt;/li&gt;
&lt;li&gt;化式子，注意 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;gt;b\)&lt;/span&gt;；且负数乘除要变号。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后得到的式子中间的不等号就决定了需要维护的斜率单调情况。以此决定队尾维护方式即可。&lt;/p&gt;
&lt;strong&gt;注意这个式子的不等号体现的是弹出条件；保留条件和其相反&lt;/strong&gt; &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单调栈维护：适用于符号和右侧斜率要求单调性相同的情况；需要清楚，维护合法性、维护单调和取答案都在栈顶进行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，都知道要用单调栈了，说明斜优形式已经被化出来了；以此维护合法性即可。&lt;/li&gt;
&lt;li&gt;维护一个从底到顶，『优』得越来越小的斜率序列。找到从更优到更劣的临界点，更新答案。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;啊，果然高中文化学科是非常有用的。算是明白为什么我小学 / 初中基本没弄懂过斜优，而旁边的大佬已经在乱杀了 &lt;img src=&#34;/em/hsh.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;现在假设正在维护一个上凸包，可以进行一些思考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果查询区间不单增？&lt;/p&gt;
搞不了啊这个。废了。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询的斜率不单增？&lt;/p&gt;
写个二分 + 单调栈。参见 &lt;a href=&#34;https://www.luogu.com.cn/problem/P5785&#34;&gt;任务安排&lt;/a&gt;、&lt;a href=&#34;#例traka&#34;&gt;TRAKA&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加入斜率的位置不单增？&lt;/p&gt;
&lt;p&gt;李超 / CDQ / 平衡树。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;四边形不等式优化-dp&#34;&gt;四边形不等式优化 DP&lt;/h2&gt;
&lt;h3 id=&#34;关于四边形不等式&#34;&gt;关于四边形不等式&lt;/h3&gt;
&lt;p&gt;对于代价矩阵 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 和定义域内 &lt;span class=&#34;math inline&#34;&gt;\(\forall\,a\le b\le c\le d\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(w(a,d)+w(b,c)\ge w(a,c)+w(b,d)\)&lt;/span&gt;，认为 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 满足四边形不等式。简记为重叠大于交叉。&lt;/p&gt;
&lt;p&gt;命名来源是四边形对角线之和大于对边之和；将恒大于改为恒小于也能得到相似的性质。&lt;/p&gt;
&lt;p&gt;就会发现单调队列优化和斜优其实是四边形不等式的特化，导致它们可以少一个 log。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;性质&#34;&gt;性质&lt;/h3&gt;
&lt;p&gt;用于证明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于任意 &lt;span class=&#34;math inline&#34;&gt;\(c\le l\le r\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(w(l-c,r+c) + w(l,r)\le w(l-c,r)+ w(l,r+c)\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 满足四边形不等式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用于题目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性质一&lt;/strong&gt;：若 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 满足四边形不等式（或其反式），那么最优决策点 &lt;span class=&#34;math inline&#34;&gt;\(p_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 有单调关系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性质二&lt;/strong&gt;：当 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 变化时，每个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 带来贡献的相对大小 rank 不变。亦作：若 &lt;span class=&#34;math inline&#34;&gt;\(j_1\)&lt;/span&gt; 相对于 &lt;span class=&#34;math inline&#34;&gt;\(j_2\)&lt;/span&gt; 对 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 更优，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(j_1\)&lt;/span&gt; 相对于 &lt;span class=&#34;math inline&#34;&gt;\(j_2\)&lt;/span&gt; 对 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;\)&lt;/span&gt; 更优。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;在优化-dp-之前&#34;&gt;在优化 DP 之前&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先我必须要提一嘴。由于我第一次接触『四边形不等式』是在四年前，看到『石子合并的 &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 做法』时。然而，这一题的 DP 本身有一个特殊性质，即贡献是一个以决策点为极值的凸函数；这直接导致我误以为这是四边形不等式本身带来的性质，导致我在理解上浪费了很多时间。&lt;strong&gt;四边形不等式带来的性质，只有上述两条！&lt;/strong&gt;&lt;/p&gt;
当然这也告诉我们，如果你发现『贡献是一个以决策点为极值的凸函数』，你就可以用类似石子合并中的线性转移完成问题。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;『满足四边形不等式』并不能等价于『决策单调性』。决策单调性并不具备性质二。&lt;/p&gt;
&lt;p&gt;也就是说，如果只满足决策单调性，只有最优决策点是单调的，但贡献函数随着 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的变化，其形状会有很大的变动。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;优化-dp分治&#34;&gt;优化 DP：分治&lt;/h3&gt;
&lt;p&gt;主要适用于 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}=g_j+w(j,i)\)&lt;/span&gt; 的场景，其中 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 是与 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 无关的函数。&lt;/p&gt;
&lt;p&gt;对于分治范围 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 和其决策点范围 &lt;span class=&#34;math inline&#34;&gt;\([L_p,R_p]\)&lt;/span&gt;，首先把暴力 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 的决策点 &lt;span class=&#34;math inline&#34;&gt;\(p_{mid}\)&lt;/span&gt; 找出来。&lt;/p&gt;
&lt;p&gt;接着对于 &lt;span class=&#34;math inline&#34;&gt;\([l,mid)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((mid,R]\)&lt;/span&gt;，分别在 &lt;span class=&#34;math inline&#34;&gt;\([L_p,p_{mid}]\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\([p_{mid},R_p]\)&lt;/span&gt; 里找决策点（注意两边都是闭的）。递归地做。&lt;/p&gt;
&lt;p&gt;这时候你肯定就会怀疑了，主播主播，虽然你的区间每次在减半，但决策点范围并不是均分的，还会被共用，复杂度真的对吗？&lt;/p&gt;
&lt;p&gt;对的兄弟，对的。观察搜索树，你会发现虽然 &lt;span class=&#34;math inline&#34;&gt;\(p_{mid}\)&lt;/span&gt; 会被给两个儿子共用，但是在任何一层中，被重复经过的点只会出现在两个区间的交界处。也就是说每整层大概遍历 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt; 次。是不是很对了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;例yet-another-minimization-problem&#34;&gt;例：Yet Another Minimization Problem&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/868/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/868/F&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;我的天哪！是罕见的四级标题！&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;笑点解析：这个人因为懒得写 CSS 所以只写了经常用的 h2 和 h3 的样式，现在迫不得已用 h4 被倒逼去写了 h4 的 CSS。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;发现 &lt;span class=&#34;math inline&#34;&gt;\(k\le 20\)&lt;/span&gt;，所以可以不用写 WQS 二分。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 段分在 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 处的代价，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\min\{f_{i-1,l}+w(l+1,j)\}\)&lt;/span&gt;，分治解决。&lt;/p&gt;
&lt;p&gt;接着发现问题：&lt;span class=&#34;math inline&#34;&gt;\(w(l+1,j)\)&lt;/span&gt; 并不能很快地求出来；然后注意到这个代价的形式很莫队（其实在看到这个题的时候就会有莫队的想法），考虑使用莫队移动端点的方式解决问题。由于分治中查询的区间两端单增，每层的总移动次数是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的，总复杂度就是 &lt;span class=&#34;math inline&#34;&gt;\(O(nk\log n)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e12;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;long long&amp;gt; cnt(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; p(k + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(k + 1, std::vector&amp;lt;long long&amp;gt; (n + 1, inf));
    auto w = [&amp;amp;](int l, int r) &amp;#123;
        static int L = 1, R = 0;
        static long long res = 0ll;
        for (; L &amp;gt; l; --L, res -= cnt[a[L]] * (cnt[a[L]] - 1) / 2, ++cnt[a[L]], res += cnt[a[L]] * (cnt[a[L]] - 1) / 2);
        for (; R &amp;gt; r; res -= cnt[a[R]] * (cnt[a[R]] - 1) / 2, --cnt[a[R]], res += cnt[a[R]] * (cnt[a[R]] - 1) / 2, --R);
        for (; R &amp;lt; r; ++R, res -= cnt[a[R]] * (cnt[a[R]] - 1) / 2, ++cnt[a[R]], res += cnt[a[R]] * (cnt[a[R]] - 1) / 2);
        for (; L &amp;lt; l; res -= cnt[a[L]] * (cnt[a[L]] - 1) / 2, --cnt[a[L]], res += cnt[a[L]] * (cnt[a[L]] - 1) / 2, ++L);
        return res;
    &amp;#125;;
    f[0][0] = 0ll;
    for (int t = 1; t &amp;lt;= k; ++t) &amp;#123;
        std::function&amp;lt;void(int, int, int, int)&amp;gt; calc = [&amp;amp;](int l, int r, int lp, int rp) &amp;#123;
            if (l &amp;gt; r)
                return;
            if (l == r) &amp;#123;
                for (int i = lp; i &amp;lt;= rp &amp;amp;&amp;amp; i &amp;lt; l; ++i)
                    if (f[t - 1][i] + w(i + 1, l) &amp;lt; f[t][l])
                        f[t][l] = f[t - 1][i] + w(i + 1, l), p[t][l] = i;
                return;
            &amp;#125;
            int mid = (l + r) &amp;gt;&amp;gt; 1;
            for (int i = lp; i &amp;lt;= rp &amp;amp;&amp;amp; i &amp;lt; mid; ++i)
                if (f[t - 1][i] + w(i + 1, mid) &amp;lt; f[t][mid])
                    f[t][mid] = f[t - 1][i] + w(i + 1, mid), p[t][mid] = i;
            calc(l, mid - 1, lp, p[t][mid]), calc(mid + 1, r, p[t][mid], rp);
            return;
        &amp;#125;;
        calc(1, n, 0, n - 1);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[k][n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;优化-dp单调数据结构&#34;&gt;优化 DP：单调数据结构&lt;/h3&gt;
&lt;p&gt;有的时候会出现 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}=f_{j}+w(j,i)\)&lt;/span&gt; 的结构，也就是 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的取值与自己有关。&lt;/p&gt;
&lt;p&gt;这种情况我们通常选择填表法，求出 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 后找到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 是哪些点的最优决策（那么显然这些点是一段连续区间）。用 &lt;span class=&#34;math inline&#34;&gt;\((i,l_i,r_i)\)&lt;/span&gt; 这个三元组表示当前算出来的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 管辖的范围。&lt;/p&gt;
&lt;p&gt;这是什么意思呢？结合性质二，每当我们手上拿到一个新的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，那么推出来其管辖范围右端点就会是 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;。接着想办法找到左端点，同样利用性质二，二分出最靠左的一个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，满足之前算出来的决策点没有 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 优，那么 &lt;span class=&#34;math inline&#34;&gt;\([j,n]\)&lt;/span&gt; 就是当前条件下 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的管辖范围。&lt;/p&gt;
&lt;p&gt;在队列里加入当前版本的整个三元组序列就可以方便地完成这个过程。为寻找当前元素的答案，需要将队头上，管辖范围完全早于当前元素的弹出去。由于维护的过程和单调队列很像，所以也有人直接把这里的队列叫单调队列。&lt;/p&gt;
&lt;p&gt;视题目不同，也可能用到单调栈，也有可能不用二分（例如满足前两种特化的情况）。goto &lt;a href=&#34;/20250715/#a---yakiniku-restaurants&#34;&gt;Yakiniku Restaurants&lt;/a&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;例诗人小g&#34;&gt;例：诗人小G&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1912&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1912&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;我觉得给出字符串内容的唯一价值是让出题人欣赏白日依山尽&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{j}\)&lt;/span&gt; 为某一行分在第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 句处的代价，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{j}=\min\limits_{k&amp;lt;j}\left\{f_{k}+|(s_j-s_k+j-k-1)-L|^P\right\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么就可以考虑单调队列 + 二分了。需要注意无穷大之间的大小比较，我写这个写红温了，直接用指数项相对大小来代替了，似乎可以过。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1000000000000000001ll;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P1912_2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, l, p;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; l &amp;gt;&amp;gt; p;
        long long to;
        switch (p) &amp;#123; // 会有精度问题
        case 1:
            to = 1e18;
            break;
        case 2:
            to = 1e9;
            break;
        case 3:
            to = 1e6;
            break;
        case 4:
            to = 31622;
            break;
        case 5:
            to = 3981;
            break;
        case 6:
            to = 1e3;
            break;
        case 7:
            to = 372;
            break;
        case 8:
            to = 177;
            break;
        case 9:
            to = 100;
            break;
        default:
            to = 63;
            break;
        &amp;#125;
        std::vector&amp;lt;int&amp;gt; s(n + 1);
        std::vector&amp;lt;std::string&amp;gt; a(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; a[i], s[i] = (int)a[i].length();
        std::partial_sum(s.begin() + 1, s.end(), s.begin() + 1);
        struct node &amp;#123; int i, l, r; &amp;#125;;
        std::vector&amp;lt;node&amp;gt; q(n + 1);
        int h = 0, t = -1;
        q[++t] = &amp;#123; 0, 1, n &amp;#125;;
        auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
            if (x &amp;gt; to)
                return inf;
            auto res(1ll);
            for (; y--; res *= x);
            return res;
        &amp;#125;;
        std::vector&amp;lt;int&amp;gt; pre(n + 1);
        std::vector&amp;lt;long long&amp;gt; f(n + 1);
        auto calc = [&amp;amp;](int k, int j) &amp;#123;
            return std::min(inf, f[k] + qkp(std::abs(s[j] - s[k] + j - k - 1 - l), p));
        &amp;#125;;
        auto less = [&amp;amp;](int k1, int j1, int k2, int j2) &amp;#123;
            auto t1(calc(k1, j1)), t2(calc(k2, j2));
            if (t1 == inf &amp;amp;&amp;amp; t2 == inf)
                return std::abs(s[j1] - s[k1] + j1 - k1 - 1 - l) &amp;lt; std::abs(s[j2] - s[k2] + j2 - k2 - 1 - l);
            return t1 &amp;lt; t2;
        &amp;#125;;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (; h &amp;lt;= t &amp;amp;&amp;amp; q[h].r &amp;lt; i; ++h);
            f[i] = calc(q[h].i, i), pre[i] = q[h].i;
            for (; h &amp;lt;= t &amp;amp;&amp;amp; q[t].l &amp;gt; i &amp;amp;&amp;amp; less(i, q[t].l, q[t].i, q[t].l); --t)
                q[t - 1].r = q[t].r;
            for (int l = std::max(q[t].l, i + 1), r = q[t].r, mid; l &amp;lt;= r; ) &amp;#123;
                mid = (l + r) &amp;gt;&amp;gt; 1;
                if (less(i, mid, q[t].i, mid))
                    r = q[t].r = mid - 1, q[t + 1] = &amp;#123; i, mid, n &amp;#125;;
                else
                    l = mid + 1;
            &amp;#125;
            if (q[t + 1].i == i)
                ++t;
        &amp;#125;
        if (f[n] &amp;gt;= inf)
            std::cout &amp;lt;&amp;lt; &amp;quot;Too hard to arrange&amp;quot; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        else &amp;#123;
            std::cout &amp;lt;&amp;lt; f[n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            std::function&amp;lt;void(int)&amp;gt; print = [&amp;amp;](int x) &amp;#123;
                if (x == 0)
                    return;
                print(pre[x]);
                for (int i = pre[x] + 1; i &amp;lt;= x; ++i) &amp;#123;
                    std::cout &amp;lt;&amp;lt; a[i];
                    if (i != x)
                        std::cout &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
                &amp;#125;
                std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
                return;
            &amp;#125;;
            print(n);
        &amp;#125;
        std::cout &amp;lt;&amp;lt; &amp;quot;--------------------&amp;quot;;
        if (T)
            std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;需要注意，本题也可以再加一个『恰好分 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 段』的限制，直接在外层套一个 WQS 二分就好了，参见 &lt;a href=&#34;https://www.luogu.com.cn/problem/P6246&#34;&gt;邮局 加强版 加强版&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;d1d-dp-优化&#34;&gt;2D/1D DP 优化&lt;/h3&gt;
&lt;p&gt;若存在 &lt;span class=&#34;math inline&#34;&gt;\(f(i,j)=\min\limits_{k&amp;lt;j} f(i-1,k)+w(k+1,j)\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 满足四边形不等式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(p(i,j)\)&lt;/span&gt; 为最优决策点，那么有 &lt;span class=&#34;math inline&#34;&gt;\(p(i,j)\le p(i,j+1)\le p(i+1,j+1)\)&lt;/span&gt;，亦作 &lt;span class=&#34;math inline&#34;&gt;\(p(i,j-1)\le p(i,j)\le p(i+1,j)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;此时可以 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt; 解决问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image.png&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 固定，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)\)&lt;/span&gt; 为凸函数。（例：邮局 加强版 加强版）&lt;/p&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250707/&#34;&gt;DP 凸优化&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="DP" />
        <category term="DP 优化" />
        <updated>2025-07-07T13:23:01.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250707/</id>
        <title>DP 凸优化</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250707/"/>
        <content type="html">&lt;p&gt;袜，这篇文章一下子创建了三个新 tag。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;什么是凸函数&#34;&gt;什么是凸函数&lt;/h2&gt;
&lt;h3 id=&#34;定义&#34;&gt;定义&lt;/h3&gt;
&lt;p&gt;在信息学中研究的凸函数大抵是只在正整数域上有定义的，所以只能直接摒弃导函数的概念了。&lt;/p&gt;
&lt;p&gt;若斜率递增，换言之，差分数组递增，认为函数是凸的（好反直觉）。&lt;/p&gt;
&lt;p&gt;或者看看符号化的定义：若对于任意 &lt;span class=&#34;math inline&#34;&gt;\(\lambda\in[0,1]\)&lt;/span&gt;，函数 &lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; 均满足：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(\lambda x+(1-\lambda) y)\le \lambda f(x)+(1-\lambda) f(y).
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;或等价地：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(x)-f(x - 1)\le f(x + 1) - f(x)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;那么认为 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 是凸函数。&lt;/p&gt;
&lt;p&gt;因为凹凸在性质上没区别，所以 &lt;strong&gt;下文施行暴政，将凹函数和凸函数统称为凸函数&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;判定&#34;&gt;判定&lt;/h3&gt;
&lt;p&gt;对于具体情境下的问题，怎么判断 DP 数组是否关于其某一维为凸函数？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相信相信的力量（最常用）。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于分段问题，证明分出来的每一段满足四边形不等式。&lt;/p&gt;
&lt;em&gt;值得一提的是，数学上不认为满足四边形不等式能够推出函数为凸。但这是信息学.jpg&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其由两个凸函数线性相加得到：&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(\forall\, \lambda,\mu\ge 0\)&lt;/span&gt; 和凸函数 &lt;span class=&#34;math inline&#34;&gt;\(f,g\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(h=\lambda f+\mu g\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 为凸函数。&lt;/p&gt;
此外，此时 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 的差分数组和 &lt;span class=&#34;math inline&#34;&gt;\(f,g\)&lt;/span&gt; 差分数组也满足上述关系。&lt;/li&gt;
&lt;li&gt;其是两个凸函数的 &lt;a href=&#34;#闵可夫斯基和&#34;&gt;闵可夫斯基和&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其由两个凸函数线性 max 得到。&lt;/p&gt;
&lt;p&gt;对于两个凸函数的线性 min，一般不是凸函数，甚至可能是凹的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;性质&#34;&gt;性质&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最值为唯一极值。&lt;/li&gt;
&lt;li&gt;斜率 / 差分数组具有单调性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在解题中主要用到的大概就是上面两条。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;wqs-二分&#34;&gt;WQS 二分&lt;/h2&gt;
&lt;h3 id=&#34;主要任务&#34;&gt;主要任务&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;例：把 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 分为恰好 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 段，每段的代价为 &lt;span class=&#34;math inline&#34;&gt;\(sum^2+c\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 为给定的常数），问最小代价。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^5,a_i\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果对段数没有要求，可以用斜优 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 做。&lt;/p&gt;
&lt;p&gt;加上了 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的限制，DP 变成二维的，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处分第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 段，可以在第一维斜率优化，做到 &lt;span class=&#34;math inline&#34;&gt;\(O(nk)\)&lt;/span&gt;；亦或发现 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 有决策单调性，然后四边形不等式优化到 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们发现 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 关于 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 这一维是凸的（而非上文的 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt;），故将 &lt;span class=&#34;math inline&#34;&gt;\(f(n,j)\)&lt;/span&gt; 关于 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的函数提取出来（记为 &lt;span class=&#34;math inline&#34;&gt;\(f_n(j)\)&lt;/span&gt;）。发现只有最高点是可以一次斜优快速求出来的，故可以认为在当前复杂度限制下，整个函数除了最高点以外都是未知的（注意可以在 DP 时记录极值点的横坐标，即分了几段）。&lt;/p&gt;
&lt;p&gt;我们给每个 &lt;span class=&#34;math inline&#34;&gt;\(f_n(j)\)&lt;/span&gt; 加上 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\cdot j\)&lt;/span&gt;（在本题中即将 &lt;span class=&#34;math inline&#34;&gt;\(c\gets c+k\)&lt;/span&gt;），勉强可以认为 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\cdot j\)&lt;/span&gt; 是凸的，所以新函数 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;_n(j)\)&lt;/span&gt; 也是凸的。若 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;gt;0\)&lt;/span&gt;，可以感受到极值点向左偏移，且随着 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的增大，极值点不会右移；&lt;span class=&#34;math inline&#34;&gt;\(k&amp;lt;0\)&lt;/span&gt; 时同理。&lt;/p&gt;
&lt;p&gt;结合几何观点，在 &lt;span class=&#34;math inline&#34;&gt;\(f_n\)&lt;/span&gt; 上的极值点可以用斜率为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的直线切到；而加上 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\cdot j\)&lt;/span&gt; 的过程，其实就是切线斜率减去 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; 的过程。相当于令切线斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-\alpha\)&lt;/span&gt;，看看能切到哪里。&lt;/p&gt;
&lt;p&gt;故可以二分一个合适的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，使得极值点的横坐标为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。此时 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;_n(k)-\alpha\cdot k\)&lt;/span&gt; 即为待求。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;WQS 二分参与的问题一般以如下形式呈现：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定序列，将其恰好分为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 段 / 恰好选 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个，求最大 / 最小代价。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;题目要求最大 / 最小值一般能够反映函数的凹凸性，可以根据这一点来猜。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;细节处理&#34;&gt;细节处理&lt;/h3&gt;
&lt;p&gt;考虑如下凸函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显然对于『凸出来』的点（即图中除了 &lt;span class=&#34;math inline&#34;&gt;\(E,H\)&lt;/span&gt; 以外的点），能切到的直线斜率为一个范围；而位于直线上的点（途中 &lt;span class=&#34;math inline&#34;&gt;\(E,H\)&lt;/span&gt;），能切到的直线斜率更是定死了。所以这要求你的二分精度需要略高一点。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(E\)&lt;/span&gt;（或 &lt;span class=&#34;math inline&#34;&gt;\(H\)&lt;/span&gt;），不能找到只过它一点的切线。根据 DP 的写法，记录的横坐标可能是最小的 &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt;，也可能是最大的 &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt;，此时你可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同时记录最小和最大的横坐标，看看 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 在不在中间。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题目要求最大代价时，记录最大横坐标，二分到一个极值点 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;#39;\ge k\)&lt;/span&gt; 时，显然 &lt;span class=&#34;math inline&#34;&gt;\(\alpha&amp;#39;\ge \alpha\)&lt;/span&gt;，用 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;_n(k&amp;#39;)-\alpha&amp;#39;\cdot k\)&lt;/span&gt; 更新答案（是赋值而不是取最值）；求最小代价时同理。&lt;/p&gt;
&lt;p&gt;主要是需要记住斜率是 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; 的相反数，&lt;del&gt;实在搞不清对应关系可以都试一试&lt;/del&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例种树&#34;&gt;例：种树&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1484&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1484&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，函数是凸的——感性理解即可。&lt;/p&gt;
&lt;p&gt;接着，要求的是 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt; 时的最值。分为两种情况：&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 是否右于原函数极值点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 右于原函数极值点，则原函数极值点为答案。&lt;/li&gt;
&lt;li&gt;否则，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 为答案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好消息是整数域上一定有解（最后答案为整、倒推即可），所以不用打浮点数二分了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 1e6;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    auto calc = [&amp;amp;](int c) &amp;#123;
        std::vector&amp;lt;std::pair&amp;lt;long long, int&amp;gt; &amp;gt; f(n + 1);
        auto mx = f.front();
        auto upd = [&amp;amp;](auto &amp;amp;x, auto y) &amp;#123;
            if (y.first &amp;gt; x.first || (y.first == x.first &amp;amp;&amp;amp; y.second &amp;lt; x.second))
                x = y;
            return;
        &amp;#125;;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            f[i].first = mx.first + a[i] + c;
            f[i].second = mx.second + 1;
            upd(mx, f[i - 1]);
        &amp;#125;
        upd(mx, f[n]);
        return mx;
    &amp;#125;;
    auto t(calc(0));
    if (t.second &amp;lt;= k) &amp;#123;
        std::cout &amp;lt;&amp;lt; t.first &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    auto res(-inf);
    for (int l = -lim, r = lim, mid; l &amp;lt;= r; ) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        auto t = calc(mid);
        if (t.second &amp;lt;= k)
            res = t.first - (long long)mid * k, l = mid + 1;
        else
            r = mid - 1;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例raper&#34;&gt;例：Raper&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4694&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4694&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给所有光盘附一个奖励 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt;，进行 WQS 二分。&lt;/p&gt;
&lt;p&gt;然后内层就和 &lt;a href=&#34;#例序列-sequence&#34;&gt;sequence&lt;/a&gt; 差得不是特别多，所以考虑反悔贪心。（？）&lt;/p&gt;
&lt;p&gt;把路过的 &lt;span class=&#34;math inline&#34;&gt;\(-a_j\)&lt;/span&gt; 丢到大根堆里，尝试和 &lt;span class=&#34;math inline&#34;&gt;\(b_i\)&lt;/span&gt; 配对。如果 &lt;span class=&#34;math inline&#34;&gt;\(mid-a_i-b_i\ge 0\)&lt;/span&gt; 那么暂时配对，顺便把 &lt;span class=&#34;math inline&#34;&gt;\(b_i-mid\)&lt;/span&gt; 丢进去用于反悔，若 &lt;span class=&#34;math inline&#34;&gt;\(b_{i&amp;#39;}\)&lt;/span&gt; 选中了 &lt;span class=&#34;math inline&#34;&gt;\(b_i-mid\)&lt;/span&gt; 说明反悔，将 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(b_{i&amp;#39;}\)&lt;/span&gt; 配对。&lt;/p&gt;
&lt;p&gt;贪心的时候需要记录已经配的对数，优先队列中需要对 &lt;span class=&#34;math inline&#34;&gt;\(-a_j\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b_i-mid\)&lt;/span&gt; 打标记进行区分，匹配到前者时才增加成功对数。&lt;/p&gt;
&lt;p&gt;发现整数域上仍然必有解（答案为整，倒推），不用打浮点数二分 neiher.&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 2e9 + 5;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; b[i];
    auto calc = [&amp;amp;](long long mid) &amp;#123;
        std::priority_queue&amp;lt;std::pair&amp;lt;long long, int&amp;gt; &amp;gt; q;
        int cnt = 0;
        auto res(0ll);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            q.emplace(-a[i], 1);
            auto [v, ty] = q.top();
            if (mid + v - b[i] &amp;gt;= 0) &amp;#123;
                q.pop(), cnt += ty;
                res += mid + v - b[i], q.emplace(b[i] - mid, 0);
            &amp;#125;
        &amp;#125;
        return std::make_pair(cnt, res);
    &amp;#125;;
    auto res(inf);
    for (long long l = 1ll, r = inf, mid; l &amp;lt;= r; ) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        auto t(calc(mid));
        if (t.first &amp;gt;= k)
            r = mid - 1, res = -(t.second - k * mid);
        else
            l = mid + 1;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;区间分拆问题&#34;&gt;区间分拆问题&lt;/h3&gt;
&lt;p&gt;目标：尝试将 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 分割成恰好 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 段，定义 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 为将 &lt;span class=&#34;math inline&#34;&gt;\([i,j]\)&lt;/span&gt; 作为一段的代价，求代价最值。其中 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 满足四边形不等式。&lt;/p&gt;
&lt;p&gt;不妨设求最小代价。定义 &lt;span class=&#34;math inline&#34;&gt;\(f(i,j)\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处分第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 段，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(i,j)=\min(f(i-1,p-1)+w(p,j)).
\]&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有定理：若 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 满足四边形不等式，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f(i-1,j)\le f(i,j)\le f(i,j+1)\)&lt;/span&gt;，从 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 定义出发很好感性理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么可以从这一点出发，&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 这一维就可以被摊掉，做到 &lt;span class=&#34;math inline&#34;&gt;\(O(n(n+m))\)&lt;/span&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有定理：若 &lt;span class=&#34;math inline&#34;&gt;\(w(i,j)\)&lt;/span&gt; 满足四边形不等式，那么 &lt;span class=&#34;math inline&#34;&gt;\(f_i(j)\)&lt;/span&gt; 是凸函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那很好了。直接冲刺 WQS 即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;闵可夫斯基和&#34;&gt;闵可夫斯基和&lt;/h2&gt;
&lt;p&gt;给定两个凸函数（当然是指 OI 中那种长得很直的函数），将它们的『边』拆下来过后，以某种方式拼在一起，使得最后得到一个新的凸函数。&lt;/p&gt;
&lt;p&gt;按每条『边』的斜率归并一下就可以得到，显然答案存在且唯一，这个过程被称为闵可夫斯基和。可以发现这是一种最值 - 加卷积。&lt;/p&gt;
&lt;p&gt;假设我们要求的 DP 数组是两个已知的子数组以类似的方法卷起来的，最后要求完整的 DP 数组（而非 WQS 中的单点值），就可以考虑闵可夫斯基和。&lt;/p&gt;
&lt;p&gt;发现这个结构是很适合归并的，使用归并要求状态中含有版本维、因变量维。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例its-mooin-time-p&#34;&gt;例：It&#39;s Mooin&#39; Time P&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11459&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11459&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义 &lt;span class=&#34;math inline&#34;&gt;\(w_i\)&lt;/span&gt; 为将 &lt;span class=&#34;math inline&#34;&gt;\([i,i+L)\)&lt;/span&gt; 改为 &lt;code&gt;MOO&lt;/code&gt; 的代价，问题转化为选取 &lt;span class=&#34;math inline&#34;&gt;\(1\sim \frac nL\)&lt;/span&gt; 个不重区间的最小代价和。&lt;/p&gt;
&lt;p&gt;尝试归并，每次将 &lt;span class=&#34;math inline&#34;&gt;\([l,mid]\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((mid, r]\)&lt;/span&gt; 卷起来。但是会有一点问题：如果恰好有区间卡在中间呢？&lt;/p&gt;
&lt;p&gt;可以令 &lt;span class=&#34;math inline&#34;&gt;\(f_{l,r,0/1/2,0/1/2}(i)\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 内选了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个 &lt;code&gt;MOO&lt;/code&gt;，且两侧最远的被选点距离端点为 &lt;span class=&#34;math inline&#34;&gt;\(0/1/\ge 2\)&lt;/span&gt; 的 DP 值。然后可以进行相应的讨论、平移、闵可夫斯基和，最后将所有情况线性取 max 得到这一层的答案，容易发现得到的答案也是凸的。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int L;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; L &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;char&amp;gt; t(n + 1);
    std::vector&amp;lt;long long&amp;gt; w(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i];
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 1; i &amp;lt;= n - L + 1; ++i) &amp;#123;
        w[i] = a[i] * (t[i] != &amp;#39;M&amp;#39;);
        for (int j = i + 1; j &amp;lt; i + L; ++j)
            w[i] += a[j] * (t[j] != &amp;#39;O&amp;#39;);
        // printf(&amp;quot;[%d, %d]: %lld\n&amp;quot;, i, i + L - 1, w[i]);
    &amp;#125;
    if (L == 1) &amp;#123;
        std::sort(w.begin() + 1, w.end());
        auto s(0ll);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            s += w[i];
            std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
        return 0;
    &amp;#125;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    struct node &amp;#123;
        crr f;
        node(int len): f(L, brr(L, arr(len, inf))) &amp;#123;
            for (int i = 0; i &amp;lt; L; ++i)
                for (int j = 0; j &amp;lt; L; ++j)
                    f[i][j][0] = 0ll;
            return;
        &amp;#125;
        brr&amp;amp; operator[] (int q) &amp;#123; return f[q]; &amp;#125;
    &amp;#125;;
    auto upd = [&amp;amp;](arr &amp;amp;x, arr y) &amp;#123;
        if (x.size() &amp;lt; y.size())
            x.resize(y.size(), inf);
        for (int i = 0; i &amp;lt; (int)y.size(); ++i)
            x[i] = std::min(x[i], y[i]);
        return;
    &amp;#125;;
    auto merge = [&amp;amp;](arr l, arr r) &amp;#123;
        arr out((int)(l.size() + r.size()) - 1), dl(l.size()), dr(r.size());
        for (int i = 1; i &amp;lt; (int)l.size(); ++i)
            dl[i] = l[i] - l[i - 1];
        for (int i = 1; i &amp;lt; (int)r.size(); ++i)
            dr[i] = r[i] - r[i - 1];
        std::merge(dl.begin() + 1, dl.end(), dr.begin() + 1, dr.end(), out.begin() + 1);
        out[0] = l[0] + r[0];
        std::partial_sum(out.begin(), out.end(), out.begin());
        return out;
    &amp;#125;;
    std::function&amp;lt;node(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (r - l + 1 &amp;lt; 2 * L) &amp;#123;
            node res(1);
            for (int ll = 0; ll &amp;lt; L; ++ll)
                for (int rr = 0; rr &amp;lt; L; ++rr)
                    if (l + ll &amp;lt;= r - rr - L + 1) &amp;#123;
                        res[ll][rr].resize(2, inf);
                        for (int i = l + ll; i &amp;lt;= r - rr - L + 1; ++i)
                            res[ll][rr][1] = std::min(res[ll][rr][1], w[i]);
                        // printf(&amp;quot;[%d, %d]: (%d, %d) = %lld\n&amp;quot;, l, r, ll, rr, res[ll][rr][1]);
                    &amp;#125;
            // for (int i = 0; i &amp;lt; L; ++i)
            //     if (l + i + L - 1 &amp;lt;= r) &amp;#123;
            //         printf(&amp;quot;[%d, %d]: (%d, %d) = %lld\n&amp;quot;, l, r, i, r - (l + i + L - 1), w[l + i]);
            //         res[i][r - (l + i + L - 1)].emplace_back(w[l + i]);
            //     &amp;#125;
            return res;
        &amp;#125;   
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        node tl(calc(l, mid)), tr(calc(mid + 1, r)), res((r - l + 1) / L + 1);
        for (int ll = 0; ll &amp;lt; L; ++ll)
            for (int rr = 0; rr &amp;lt; L; ++rr)
                res[ll][rr] = merge(tl[ll][0], tr[0][rr]);
        for (int ll = 0; ll &amp;lt; L; ++ll)
            for (int rr = 0; rr &amp;lt; L; ++rr)
                for (int i = 1; i &amp;lt; L &amp;amp;&amp;amp; i &amp;lt; mid; ++i)
                    upd(res[ll][rr], merge(merge(tl[ll][i], tr[L - i][rr]), &amp;#123; 0, w[mid - i + 1] &amp;#125;));
        for (int ll = 0; ll &amp;lt; L; ++ll)
            for (int rr = L - 1; rr; --rr)
                upd(res[ll][rr - 1], res[ll][rr]);
        for (int rr = 0; rr &amp;lt; L; ++rr)
            for (int ll = L - 1; ll; --ll)
                upd(res[ll - 1][rr], res[ll][rr]);
        // for (int i = 0; i &amp;lt; L; ++i)
        //     for (int j = 0; j &amp;lt; L; ++j) &amp;#123;
        //         printf(&amp;quot;  (%d, %d): &amp;quot;, i, j);
        //         for (auto p : res[i][j])
        //             printf(&amp;quot;%lld &amp;quot;, p);
        //         puts(&amp;quot;&amp;quot;);
        //     &amp;#125;
        return res;
    &amp;#125;;
    auto res(calc(1, n));
    for (int i = 1; i &amp;lt;= n / L; ++i)
        std::cout &amp;lt;&amp;lt; res[0][0][i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例假人&#34;&gt;例：假人&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/problem/47728&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/problem/47728&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 组选完占了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 体积的最大价值。那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\max\{f_{i-1,k}+a_{i,j-k}\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;袜，这个东西好凸的样子！啊？居然不是凸的？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;事实上，有结论：若干个体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim 4\)&lt;/span&gt; 的物品做背包，可以凑出值域内任意 &lt;span class=&#34;math inline&#34;&gt;\(24\)&lt;/span&gt; 的倍数。所以先把体积全部 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，然后就可以得到体积为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim 4\)&lt;/span&gt; 的物品。然后会发现他们按照模 &lt;span class=&#34;math inline&#34;&gt;\(12\)&lt;/span&gt; 的余数分别是凸的。&lt;/p&gt;
&lt;p&gt;能感受到恶意了。然后就可以枚举体积，再闵可夫斯基和了。同样需要在状态中引入作为版本号的 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 维，显然因变量是体积、版本号是组数。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;fake2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; siz(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; siz[i], m += siz[i];
        a[i].resize(siz[i] + 1);
        for (int j = 1; j &amp;lt;= siz[i]; ++j)
            std::cin &amp;gt;&amp;gt; a[i][j];
    &amp;#125;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    struct node &amp;#123;
        std::vector&amp;lt;arr&amp;gt; f;
        node(): f(12) &amp;#123;&amp;#125;
        arr &amp;amp;operator[] (int q) &amp;#123;
            return f[q];
        &amp;#125;
    &amp;#125;;
    auto merge = [&amp;amp;](arr &amp;amp;p, arr &amp;amp;q) &amp;#123;
        arr res((int)(p.size() + q.size()) - 1), dp(p.size()), dq(q.size());
        std::adjacent_difference(p.begin(), p.end(), dp.begin());
        std::adjacent_difference(q.begin(), q.end(), dq.begin());
        std::merge(dp.begin() + 1, dp.end(), dq.begin() + 1, dq.end(), res.begin() + 1, std::greater&amp;lt;long long&amp;gt; ());
        res[0] = p[0] + q[0];
        std::partial_sum(res.begin(), res.end(), res.begin());
        return res;
    &amp;#125;;
    auto upd = [&amp;amp;](arr y, arr &amp;amp;x, int tag) &amp;#123;
        if (tag)
            y.insert(y.begin(), -inf);
        if (y.size() &amp;gt; x.size())
            x.resize(y.size(), -inf);
        for (int i = 0; i &amp;lt; (int)y.size(); ++i)
            x[i] = std::max(x[i], y[i]);
        return;
    &amp;#125;;
    std::function&amp;lt;node(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (l == r) &amp;#123;
            node res;
            for (int i = 1; i &amp;lt;= siz[l]; ++i)
                res[i - 1].push_back(a[l][i]);
            return res;
        &amp;#125;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        node tl(calc(l, mid)), tr(calc(mid + 1, r)), res;
        for (int p = 0; p &amp;lt; 12; ++p)
            for (int q = 0; q &amp;lt; 12; ++q)
                if (!tl[p].empty() &amp;amp;&amp;amp; !tr[q].empty())
                    upd(merge(tl[p], tr[q]), res[(p + q) % 12], p + q &amp;gt;= 12);
        return res;
    &amp;#125;;
    auto res(calc(1, n));
    for (int i = 0; i &amp;lt;= m - n; ++i)
        std::cout &amp;lt;&amp;lt; res[i % 12][i / 12] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;slope-trick&#34;&gt;slope trick&lt;/h2&gt;
&lt;p&gt;对于一个 OI 中的凸函数，它是由一些斜率单调的线段拼接成的图形。&lt;/p&gt;
&lt;p&gt;在这个前提下，发现可以用整个函数的左 / 右端点值（截距）和 &lt;span class=&#34;math inline&#34;&gt;\((n-1)\)&lt;/span&gt; 个斜率 / 差分信息描述函数。而这有时比直接维护 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点值有着更优美的性质，唤其为 slope trick。&lt;/p&gt;
&lt;p&gt;例如，关于斜率序列，如果定义域不大，可以直接维护；如果它的变化次数不多，可以利用它的单调性质，用单调数据结构维护；如果它的值域很小，可以直接维护拐点。&lt;/p&gt;
&lt;p&gt;注意前两种方法一般关注横坐标对应的函数值，所以自变量一般是和操作次数一类有关的；而这里关注函数最值而弱化了具体横坐标，操作次数一般会作为待最优化的因变量，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我想要将数列通过若干次单点修改使序列单调，但不关心序列最终形态，问最小操作次数。&lt;/li&gt;
&lt;li&gt;我想要让树上所有叶子到根的路径边权和相等，但不关心这个值是多少，问最小操作次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面依次解决上述问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例序列-sequence&#34;&gt;例：序列 sequence&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4597&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4597&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暴力地，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 最终被修改为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，容易写出 DP 式子 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\min\limits_{k\le j}\{f_{i-1,k}\}+|a_i-j|\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后就会发现它的定义域实在是太大了！那如果关注斜率的变化情况呢？&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1}(k)\)&lt;/span&gt; 的极值点为 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt;，分类讨论拆绝对值和 min：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j\le a_i\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=\min\limits_{k\le j}\{f_{i-1}(k)\}+a_i - j\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j &amp;lt; k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=f_{i-1}(j)+a_i-j\)&lt;/span&gt;，斜率相对于 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1}(j)\)&lt;/span&gt; 整体减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;del&gt;我就说导数没白学吧&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j \ge k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=f_{i-1}(k_m)+a_i-j\)&lt;/span&gt;，斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j &amp;gt; a_i\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=\min\limits_{k\le j}\{f_{i-1}(k)\}+j-a_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j &amp;lt; k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j)=f_{i-1}(j)+j-a_i\)&lt;/span&gt;，斜率相对于 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1}(j)\)&lt;/span&gt; 整体加 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j\ge k_m\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_i(j) = f_{i-1}(k_m)+j-a_i\)&lt;/span&gt;，斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果现在我们掏一个支持区间加斜率、区间推平斜率且维护区间函数最值点的数据结构，那就太逆天了。一个经典的解决方案是用堆维护线段斜率的差分（也就是差分的差分）。&lt;/p&gt;
&lt;p&gt;发现整体修改次数是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的，且如果只看比 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 更左的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;（更靠右的已经与极值无关所以不用维护），那么就只需要维护区间减法。&lt;/p&gt;
&lt;p&gt;如果将一次区间前缀减法看作一次前缀右端点入队，显然左侧某点 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的实际被减次数为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 入队的次数 + 所有右于 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 点的元素的入队次数。用大根堆维护这些元素，就可以快速维护整个斜率序列。例如 &lt;code&gt;3 2 2 1&lt;/code&gt;，代表 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 处斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 处斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-3\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 处斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-4\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(a_i\ge k_m\)&lt;/span&gt; 时（容易发现它会成为新的 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt;），直接把 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 加入大根堆，就可以把 &lt;span class=&#34;math inline&#34;&gt;\(\le a_i\)&lt;/span&gt; 的所有位置斜率减去 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
什么你问在 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 之间的推平怎么办？由于唯一右于它们的拐点 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 入了一次队，所以中间的元素斜率自然是 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 啊。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(a_i&amp;lt;k_m\)&lt;/span&gt; 时，我们需要：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 以左的位置斜率减去 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，直接将 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 入队即可。&lt;/li&gt;
&lt;li&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 之间的位置斜率加上 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，把 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 弹出（太好了就在队首）再把 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 加入即可。由于 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 显然是一个拐点，所以删除 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 并非虚空索敌，但注意 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 可能会变化成其后继。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实就会发现还有一些有趣的小性质，比如 &lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 与队首等价（用于实现）；&lt;span class=&#34;math inline&#34;&gt;\(k_m\)&lt;/span&gt; 右侧斜率全部为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，也是唯一可以取到的正斜率。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;袜写起来好简单。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    long long res = 0ll;
    std::priority_queue&amp;lt;int&amp;gt; q;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        if (i == 1 || a[i] &amp;gt;= q.top())
            q.push(a[i]);
        else &amp;#123;
            res += q.top() - a[i];
            q.pop(), q.push(a[i]), q.push(a[i]);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例烟花表演&#34;&gt;例：烟花表演&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3642&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3642&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,d}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 子树中所有叶子距根均为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的最小代价。那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{u,d}=\sum\limits_{(v, w)\in u}\min\limits_{0\le w&amp;#39;\le d}\{f_{v,d-w&amp;#39;}+|w-w&amp;#39;|\}.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以归纳证明 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,d}\)&lt;/span&gt; 为凸；和上一题相似地，考虑用 &lt;span class=&#34;math inline&#34;&gt;\(f_v\)&lt;/span&gt; 的堆得到 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 的堆。&lt;/p&gt;
&lt;p&gt;首先最外层是一个线性加，这其实就是把差分数组 / 斜率加起来，放到我们这个堆里面就是合并两个堆。虽然你可能和我一样不认识可并堆，但是你可以和我一样不会 pd_ds。&lt;/p&gt;
&lt;p&gt;再看内层，发现和上一题长得像但其实不一样，呜呜呜。发现 &lt;span class=&#34;math inline&#34;&gt;\(|w-w&amp;#39;|\)&lt;/span&gt; 是一个左右斜率分别为 &lt;span class=&#34;math inline&#34;&gt;\(-1,1\)&lt;/span&gt; 的分段函数，而左边类比可得斜率最大为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;由闵可夫斯基和，内层函数斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;-1\)&lt;/span&gt; 的部分来自 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt;；&lt;span class=&#34;math inline&#34;&gt;\(=-1\)&lt;/span&gt; 的部分来自 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(|w-w&amp;#39;|\)&lt;/span&gt; 的左半边（感谢 &lt;span class=&#34;math inline&#34;&gt;\(w&amp;#39;\)&lt;/span&gt; 是有下确界的）；&lt;span class=&#34;math inline&#34;&gt;\(=0\)&lt;/span&gt; 的部分来自 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt;；&lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;0\)&lt;/span&gt; 的部分我们不关心。&lt;/p&gt;
&lt;p&gt;最终函数图像的变化：水平部分的左端点右移了 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;。找到 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d}\)&lt;/span&gt; 中的水平线段和斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的线段，令其在堆中的值 &lt;span class=&#34;math inline&#34;&gt;\(+w\)&lt;/span&gt; 就能达到平移的目的。&lt;/p&gt;
&lt;p&gt;但需要注意，此时仍然需要 &lt;strong&gt;保留内层函数中斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的部分，但斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;1\)&lt;/span&gt; 的部分被删除&lt;/strong&gt;。原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绝对值函数与内层函数定义域相同，作闵可夫斯基和后，斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的右侧线段会将 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,d-w&amp;#39;}\)&lt;/span&gt; 中原有的 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;1\)&lt;/span&gt; 的部分『挤』出定义域，故可以将其直接删除。&lt;/li&gt;
&lt;li&gt;斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的部分，虽然对内层函数中极值点无贡献，但在外层函数中极值点可能向右偏移，此时会对其产生影响，需要维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容易发现由于 &lt;span class=&#34;math inline&#34;&gt;\(w&amp;#39;\)&lt;/span&gt; 的取值上限是 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，但 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 没有上界，所以每个内层函数的右侧都一定是一条斜率为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的射线；也就是说，每个外层函数一定有（儿子个数）个拐点（堆中元素），弹出这么多个就可以删除外层函数中斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;1\)&lt;/span&gt; 的线段，顺便找到斜率为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的线段。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
#include &amp;lt;ext/pb_ds/priority_queue.hpp&amp;gt;
const int inf= 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m, n += m;
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(n + 1);
    auto res(0ll);
    for (int i = 2, fa, w; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; fa &amp;gt;&amp;gt; w, res += w;
        g[fa].emplace_back(i, w);
    &amp;#125;
    std::vector&amp;lt;__gnu_pbds::priority_queue&amp;lt;long long&amp;gt; &amp;gt; q(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        if (g[x].empty())
            q[x].push(0), q[x].push(0);
        else
            for (auto [i, w] : g[x]) &amp;#123;
                DFS(i);
                for (int j = 1; j &amp;lt; (int)g[i].size(); ++j)
                    q[i].pop();
                long long t1 = q[i].top(), t0;
                q[i].pop(), t0 = q[i].top(), q[i].pop();
                q[i].push(t1 + w), q[i].push(t0 + w);
                q[x].join(q[i]);
            &amp;#125;
        // fprintf(stderr, &amp;quot;size(%d) = %d\n&amp;quot;, x, (int)q[x].size());
        return;
    &amp;#125;;
    DFS(1);
    for (int i = 1; i &amp;lt;= (int)g[1].size(); ++i)
        q[1].pop();
    for (; !q[1].empty(); q[1].pop())
        res -= q[1].top();
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例buy-low-sell-high&#34;&gt;例：Buy Low Sell High&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/865/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/865/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 天结束后持有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 支股票的最大收益。则 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\max\{f_{i-1,j},f_{i-1,j-1}-a_i,f_{i-1,j+1}+a_i\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;（由于这里和 max 有关所以需要精细描述凹凸了）发现就是把三个（可能）经过平移的（可能）凹的函数做线性 max。虽然实际上的结论『函数在整点上是凹的』不算太显然，但是可以猜是凹的。&lt;/p&gt;
&lt;p&gt;线性 max 在 slope trick 中是不太能体现的，但我们发现这里是同一个凹函数向左上、右下平移同一个向量，希望得到新的凹函数不管是从差分角度还是图象，都能得到新函数由左上部分斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;-a_i\)&lt;/span&gt; 的线段、两段斜率 &lt;span class=&#34;math inline&#34;&gt;\(=-a_i\)&lt;/span&gt; 的线段、右下部分斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;-a_i\)&lt;/span&gt; 的线段组成。此外，由于向左上平移的函数有一处离开了定义域，还需将其剔除。&lt;/p&gt;
&lt;p&gt;值得注意的是，当 &lt;span class=&#34;math inline&#34;&gt;\(-a_i\)&lt;/span&gt; 比最小斜率还要小时会有变化，可以画图看一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现定义域是相对小的（&lt;span class=&#34;math inline&#34;&gt;\(0\le j\le n\)&lt;/span&gt;），故用优先队列维护整个斜率序列就可以快速插入两个 &lt;span class=&#34;math inline&#34;&gt;\(k=-a_i\)&lt;/span&gt; 的线段。容易发现顶点在 &lt;span class=&#34;math inline&#34;&gt;\(j=0\)&lt;/span&gt; 处取得（从图象和定义都易知），最右侧是只买不卖的最劣方案，可以倒推。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    auto res = 0ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], res -= a[i];
    std::priority_queue&amp;lt;int&amp;gt; q;
    q.push(-a[1]);
    for (int i = 2; i &amp;lt;= n; ++i)
        if (a[i] &amp;lt; -q.top())
            q.push(-a[i]);
        else
            q.pop(), q.push(-a[i]), q.push(-a[i]);
    for (; !q.empty(); res -= q.top(), q.pop());
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="反悔贪心" />
        <category term="DP 优化" />
        <category term="WQS 二分" />
        <category term="闵可夫斯基和" />
        <category term="slope trick" />
        <updated>2025-07-07T06:10:02.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250612/</id>
        <title>点分治</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250612/"/>
        <content type="html">&lt;p&gt;一时兴起在博客里搜索『点分治』，发现没有匹配项。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;适用于解决和点对、路径相关的问题。&lt;/p&gt;
&lt;p&gt;对于任意点 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，树上任意简单路径 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt; 被分为几类：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;不经过 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;经过 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;：
&lt;ul&gt;
&lt;li&gt;一个端点为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;两个端点都不为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;：可以由上一种情况拼接得到。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果我们把每个点作为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的情况都枚举一遍，再统计不重复的 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;，在一种特定的枚举顺序下可以做到 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 完成所有点对的枚举。&lt;/p&gt;
&lt;p&gt;证明略，每次取子树重心，只遍历没遍历过的点即可。&lt;/p&gt;
&lt;p&gt;关于子树重心，一则阅读材料：&lt;a href=&#34;https://liu-cheng-ao.blog.uoj.ac/blog/2969&#34;&gt;一种基于错误的寻找重心方法的点分治的复杂度分析&lt;/a&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cf1575e-eye-pleasing-city-park-tour&#34;&gt;CF1575E Eye-Pleasing City Park Tour&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1575/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1575/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;随便用线段树维护一下就行了。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2 n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;随便维护一下 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y, c; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; c;
        g[x].emplace_back(y, c), g[y].emplace_back(x, c);
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, long long&amp;gt; &amp;gt; &amp;gt; bit(2, std::vector&amp;lt;std::pair&amp;lt;int, long long&amp;gt; &amp;gt; (n + 1));
    auto lowbit = [&amp;amp;](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int id, int x, long long v, int type) &amp;#123;
        for (++x; x &amp;lt;= n; x += lowbit(x))
            bit[id][x].first += type, (bit[id][x].second += v * type) %= mod;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int id, int x) &amp;#123;
        std::pair&amp;lt;int, long long&amp;gt; res;
        for (++x; x; x -= lowbit(x))
            res.first += bit[id][x].first, (res.second += bit[id][x].second) %= mod;
        return res;
    &amp;#125;;
    std::vector&amp;lt;int&amp;gt; p, siz(n + 1), mx(n + 1), tag(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; findp = [&amp;amp;](int x, int fa) &amp;#123;
        p.push_back(x);
        siz[x] = 1, mx[x] = 0;
        for (auto [i, c] : g[x])
            if (i != fa &amp;amp;&amp;amp; !tag[i]) &amp;#123;
                findp(i, x);
                siz[x] += siz[i];
                mx[x] = std::max(mx[x], siz[i]);
            &amp;#125;
        return;
    &amp;#125;;
    auto findrt = [&amp;amp;](int x) &amp;#123;
        std::vector&amp;lt;int&amp;gt;().swap(p), findp(x, -1);
        int n = (int)p.size();
        for (auto i : p)
            if (mx[i] &amp;lt;= n / 2 &amp;amp;&amp;amp; n - siz[i] &amp;lt;= n / 2)
                return i;
        return -1;
    &amp;#125;;
    auto res(0ll);
    std::function&amp;lt;void(int, int, int, int, int, long long, int, int)&amp;gt; calc = [&amp;amp;](int x, int fa, int oc, int la, int cnt, long long s, int os, int type) &amp;#123;
        if (cnt &amp;gt; k)
            return;
        if (type == 0) &amp;#123;
            auto t0(ask(oc, k - cnt)), t1(ask(!oc, k - cnt - 1));
            // auto lr(res);
            (res += t0.first * (s - os) + t0.second) %= mod;
            (res += t1.first * (s - os) + t1.second) %= mod;
            // printf(&amp;quot;  %d(%d, %lld): ask[0](%d) = (%d, %lld), ask[1](%d) = (%d, %lld), res += %lld\n&amp;quot;, x, cnt, s - os, k - cnt, t0.first, t0.second, k - cnt - 1, t1.first, t1.second, res - lr);
        &amp;#125;
        else if (type != 0) &amp;#123;
            // printf(&amp;quot;  %d(%d, %lld): add(%d, %lld)\n&amp;quot;, x, cnt, s - os, oc, s * type);
            add(oc, cnt, s, type);
        &amp;#125;
        for (auto [i, c] : g[x])
            if (i != fa &amp;amp;&amp;amp; !tag[i])
                calc(i, x, oc, c, cnt + (la != c), (s + a[i]) % mod, os, type);
        return;
    &amp;#125;;
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        x = findrt(x);
        // printf(&amp;quot;DFS %d\n&amp;quot;, x);
        for (auto [i, c] : g[x])
            if (!tag[i]) &amp;#123;
                calc(i, x, c, c, 0, (a[x] + a[i]) % mod, a[x], 0);
                calc(i, x, c, c, 0, (a[x] + a[i]) % mod, a[x], 1);
            &amp;#125;
        (res += ask(0, k).second + ask(1, k).second) %= mod;
        (res += a[x]) %= mod;
        // printf(&amp;quot;res += %lld + %lld\n&amp;quot;, ask(0, k).second, ask(1, k).second);
        for (auto [i, c] : g[x])
            if (!tag[i])
                calc(i, x, c, c, 0, (a[x] + a[i]) % mod, a[x], -1);
        // assert(!ask(0, k).second);
        tag[x] = 1;
        for (auto [i, c] : g[x])
            if (!tag[i])
                DFS(i);
        return;
    &amp;#125;;
    DFS(1);
    std::cout &amp;lt;&amp;lt; (res + mod) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---三元图-graf&#34;&gt;A - 三元图 Graf&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10829&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10829&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现很圆方树；观察题图，肯定想要把中间的方点作为树根。&lt;/p&gt;
&lt;p&gt;发现它就是重心；进一步地，整个圆方树其实是一个点分治的结构。显然除了最后一层，每次找到的重心都应该是方点；并且其应该有三个等大的儿子。check 上述两点即可。&lt;/p&gt;
&lt;p&gt;唉还是挺常规的，限制我做出来这道题的应该是我已经 &amp;gt; 1y 没写过连通性问题了 😅&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;怎么还有人不会判重边的 😅&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1), _g(n + 1);
    auto nosol = [](void) &amp;#123;
        std::cout &amp;lt;&amp;lt; &amp;quot;ne&amp;quot; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        exit(0);
        return;
    &amp;#125;;
    std::set&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; t;
    for (int x, y; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        if (x == y || t.count(&amp;#123; x, y &amp;#125;))
            nosol();
        t.insert(&amp;#123; x, y &amp;#125;), t.insert(&amp;#123; y, x &amp;#125;);
        _g[x].push_back(y), _g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; st, dfn(n + 1), low(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        static int now = 0;
        st.push_back(x);
        dfn[x] = low[x] = ++now;
        for (auto i : _g[x])
            if (!dfn[i]) &amp;#123;
                DFS(i, x);
                low[x] = std::min(low[x], low[i]);
                if (low[i] &amp;gt;= dfn[x]) &amp;#123;
                    ++n, g.emplace_back();
                    for (int p = st.back(); ; p = st.back()) &amp;#123;
                        g[n].push_back(p), g[p].push_back(n);
                        st.pop_back();
                        if (p == i)
                            break;
                    &amp;#125;
                    g[n].push_back(x), g[x].push_back(n);
                &amp;#125;
            &amp;#125;
            else if (i != fa)
                low[x] = std::min(low[x], dfn[i]);
        return;
    &amp;#125;;
    int n1 = n;
    DFS(1, -1);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), p, mx(n + 1), tag(n + 1);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        siz[x] = 1, mx[x] = 0;
        p.push_back(x);
        for (auto i : g[x])
            if (i != fa &amp;amp;&amp;amp; !tag[i]) &amp;#123;
                DFS(i, x);
                siz[x] += siz[i];
                mx[x] = std::max(mx[x], siz[i]);
            &amp;#125;
        return;
    &amp;#125;;
    auto findrt = [&amp;amp;](int x) &amp;#123;
        p.clear(), DFS(x, -1);
        int n = (int)p.size();
        for (auto i : p)
            if (mx[i] &amp;lt;= n / 2 &amp;amp;&amp;amp; n - siz[i] &amp;lt;= n / 2)
                return i;
        return -1;
    &amp;#125;;
    std::function&amp;lt;void(int)&amp;gt; DFS1 = [&amp;amp;](int x) &amp;#123;
        x = findrt(x), DFS(x, -1);
        int si = -1, cnt = 0;
        if (siz[x] == 1) &amp;#123;
            if (x &amp;gt; n1)
                nosol();
            return;
        &amp;#125;
        if (x &amp;lt;= n1)
            nosol();
        for (auto i : g[x])
            if (!tag[i]) &amp;#123;
                ++cnt;
                if (~si &amp;amp;&amp;amp; si != siz[i])
                    nosol();
                if (si == -1)
                    si = siz[i];
            &amp;#125;
        if (cnt != 3)
            nosol();
        tag[x] = 1;
        for (auto i : g[x])
            if (!tag[i])
                DFS1(i);
        return;
    &amp;#125;; 
    DFS1(1);
    std::cout &amp;lt;&amp;lt; &amp;quot;da&amp;quot; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---distance-on-triangulation&#34;&gt;B - Distance on Triangulation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6976&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6976&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;众（除了我）所周知 &lt;a href=&#34;/20231117/#经典建模&#34;&gt;凸多边形的三角剖分可以转化为树上问题&lt;/a&gt;，故把树建出来；一个重要的点是要认识到这个树的意义。树上的点其实是没什么物理含义的；经过了某一个树上的点和经过了三角形上的任一点是等价的；也就是说，想要从某个点走到另一个点，肯定要经过对应的树上路径，但这不能反应实际距离什么的，只是能获取路径可能包含的点和必须包含的点（的超集），具体还是要最短路。&lt;/p&gt;
&lt;p&gt;接着转化为点分治。但其实这里的点分治有点像序列分治：先跑一遍根节点（三个）在当前分治范围内的最短路，然后处理经过了这个点的询问，然后递归。容易发现三个点里有一些之前被算过了，且一定包含了这个分治范围，直接跳过就行了。&lt;/p&gt;
&lt;p&gt;注意询问要写成整体二分那种动态下传的形式，只把被某个子树完全包含的询问传下去；不然复杂度是错的。以及这样就可以剪枝：发现询问数组空了就可以停了。直接 TLE to 200ms 了 😅&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; deg(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; _g(n + 1), g(n + 1);
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        _g[i].push_back(i + 1), _g[i + 1].push_back(i);
        ++deg[i], ++deg[i + 1];
    &amp;#125;
    _g[1].push_back(n), _g[n].push_back(1);
    ++deg[1], ++deg[n];
    for (int i = 1, x, y; i &amp;lt;= n - 3; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        _g[x].push_back(y), _g[y].push_back(x);
        ++deg[x], ++deg[y];
    &amp;#125;
    int cnt = 0;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; t(1);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        std::vector&amp;lt;int&amp;gt; inq(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            if (deg[i] == 2)
                q.push(i);
        std::map&amp;lt;std::pair&amp;lt;int, int&amp;gt;, int&amp;gt; st;
        for (; !q.empty(); ) &amp;#123;
            int x = q.front();
            q.pop(), inq[x] = 1;
            if (deg[x] == 2) &amp;#123;
                ++cnt, t.push_back(&amp;#123; x &amp;#125;);
                for (auto i : _g[x])
                    if (!inq[i]) &amp;#123;
                        t[cnt].push_back(i);
                    &amp;#125;
                std::sort(t[cnt].begin(), t[cnt].end());
                for (int a = 0; a &amp;lt; 2; ++a)
                    for (int b = a + 1; b &amp;lt; 3; ++b) &amp;#123;
                        std::pair&amp;lt;int, int&amp;gt; now(t[cnt][a], t[cnt][b]);
                        if (st.count(now)) &amp;#123;
                            int to = st[now];
                            // printf(&amp;quot;add %d &amp;lt;-&amp;gt; %d\n&amp;quot;, to, cnt);
                            g[cnt].push_back(to), g[to].push_back(cnt);
                        &amp;#125;
                        else
                            st[now] = cnt;
                    &amp;#125;
            &amp;#125;
            for (auto i : _g[x])
                if (--deg[i] == 2)
                    q.push(i);
        &amp;#125;
    &amp;#125;
    int q;
    std::cin &amp;gt;&amp;gt; q;
    std::vector&amp;lt;int&amp;gt; res(q + 1, 0x3f3f3f3f);
    std::vector&amp;lt;std::tuple&amp;lt;int, int, int&amp;gt; &amp;gt; u(q);
    for (int i = 1, x, y; i &amp;lt;= q; ++i)
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y, u[i - 1] = &amp;#123; x, y, i &amp;#125;;
    int tik = 0;
    std::vector&amp;lt;int&amp;gt; siz(cnt + 1), mx(cnt + 1), p, now(n + 1), p1;
    std::vector&amp;lt;int&amp;gt; dis(n + 1), tag(n + 1), vis(n + 1), faa(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int fa) &amp;#123;
        siz[x] = 1, mx[x] = 0;
        p.push_back(x);
        for (auto i : t[x])
            now[i] = tik, p1.push_back(i);
        for (auto i : g[x])
            if (i != fa &amp;amp;&amp;amp; !tag[i]) &amp;#123;
                DFS1(i, x);
                siz[x] += siz[i];
                mx[x] = std::max(mx[x], siz[i]);
            &amp;#125;
        return;
    &amp;#125;;
    auto findrt = [&amp;amp;](int x) &amp;#123;
        p.clear(), p1.clear(), DFS1(x, -1);
        int n = (int)p.size();
        for (auto i : p)
            if (mx[i] &amp;lt;= n / 2 &amp;amp;&amp;amp; n - siz[i] &amp;lt;= n / 2)
                return i;
        return -1;
    &amp;#125;;
    auto BFS = [&amp;amp;](int x) &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (auto i : p1)
            dis[i] = 0x3f3f3f3f;
        q.push(x), dis[x] = 0;
        for (; !q.empty(); ) &amp;#123;
            int x = q.front();
            q.pop();
            for (auto i : _g[x])
                if (dis[i] == 0x3f3f3f3f &amp;amp;&amp;amp; now[i] == tik)
                    dis[i] = dis[x] + 1, q.push(i);
        &amp;#125;
        return;
    &amp;#125;;
    std::function&amp;lt;void(int, int, int)&amp;gt; calc = [&amp;amp;](int x, int fa, int rt) &amp;#123;
        for (auto i : t[x])
            faa[i] = rt;
        for (auto i : g[x])
            if (i != fa &amp;amp;&amp;amp; !tag[i])
                calc(i, x, rt);
        return;
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;std::tuple&amp;lt;int, int, int&amp;gt; &amp;gt; &amp;gt; tmp(n + 1);
    std::function&amp;lt;void(int, std::vector&amp;lt;std::tuple&amp;lt;int, int, int&amp;gt; &amp;gt;)&amp;gt; DFS = [&amp;amp;](int x, std::vector&amp;lt;std::tuple&amp;lt;int, int, int&amp;gt; &amp;gt; q) &amp;#123;
        if (q.empty())
            return;
        ++tik, x = findrt(x);
        for (auto i : g[x])
            calc(i, x, i);
        for (auto k : t[x])
            if (!vis[k]) &amp;#123;
                vis[k] = 1, BFS(k);
                for (auto [u, v, id] : q)
                    res[id] = std::min(res[id], dis[u] + dis[v]);
            &amp;#125;
        for (auto [u, v, id] : q)
            if (faa[u] == faa[v])
                tmp[faa[u]].emplace_back(u, v, id);
        std::vector&amp;lt;std::tuple&amp;lt;int, int, int&amp;gt; &amp;gt;().swap(q);
        tag[x] = 1;
        for (auto i : g[x])
            if (!tag[i])
                DFS(i, std::move(tmp[i]));
        return;
    &amp;#125;;
    DFS(1, std::move(u));
    for (int i = 1; i &amp;lt;= q; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---shopping&#34;&gt;C - Shopping&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6326&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6326&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;意识到连通块 DP 也是可以放在点分上做的，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,i}\)&lt;/span&gt; 表示在（点分时的）子树 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 中，&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 选了至少一个，共用了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 体积的最大价值。剩下就是一个树上的多重 + 01 背包；发现这个 01 背包不满足可以优化的形式，所以考虑树上背包序列化，转换成序列上多重背包问题；不知道真实数据强度，但我认为应该用 &lt;a href=&#34;/20250707-1/#例单调队列优化多重背包&#34;&gt;单调队列优化多重背包&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;注意树背包序列化的细节其实是有点多的。可能需要一些邪思。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, m;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
        std::vector&amp;lt;int&amp;gt; v(n + 1), w(n + 1), c(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; w[i];
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; v[i];
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; c[i];
        for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
            g[x].push_back(y), g[y].push_back(x);
        &amp;#125;
        std::vector&amp;lt;int&amp;gt; siz(n + 1), mx(n + 1), tag(n + 1), p;
        std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int fa) &amp;#123;
            p.push_back(x);
            siz[x] = 1, mx[x] = 0;
            for (auto i : g[x])
                if (i != fa &amp;amp;&amp;amp; !tag[i]) &amp;#123;
                    DFS1(i, x);
                    siz[x] += siz[i];
                    mx[x] = std::max(mx[x], siz[i]);
                &amp;#125;
            return;
        &amp;#125;;
        int now = 0;
        std::vector&amp;lt;int&amp;gt; nex(n + 1), tab(n + 1);
        auto findrt = [&amp;amp;](int x) &amp;#123;
            p.clear(), DFS1(x, -1);
            int n = (int)p.size();
            for (auto i : p)
                if (mx[i] &amp;lt;= n / 2 &amp;amp;&amp;amp; n - siz[i] &amp;lt;= n / 2)
                    return i;
            assert(0);
            return -1;
        &amp;#125;;
        std::function&amp;lt;void(int, int)&amp;gt; DFS2 = [&amp;amp;](int x, int fa) &amp;#123;
            tab[++now] = x;
            for (auto i : g[x])
                if (i != fa &amp;amp;&amp;amp; !tag[i])
                    DFS2(i, x);
            nex[x] = now;
            return;
        &amp;#125;;
        int res = -inf;
        std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
            x = findrt(x), now = 0, DFS2(x, -1);
            std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(now + 1, std::vector&amp;lt;int&amp;gt; (m + 1, -inf));
            for (int i = 1; i &amp;lt;= c[x] &amp;amp;&amp;amp; i * v[x] &amp;lt;= m; ++i)
                f[1][i * v[x]] = i * w[x];
            for (int i = 1; i &amp;lt; now; ++i) &amp;#123;
                int V = v[tab[i + 1]], W = w[tab[i + 1]], C = c[tab[i + 1]];
                for (int b = 0; b &amp;lt; V; ++b) &amp;#123;
                    std::vector&amp;lt;int&amp;gt; q;
                    int h = 0, t = -1;
                    for (int a = 0; a * V + b &amp;lt;= m; ++a) &amp;#123;
                        for (; h &amp;lt;= t &amp;amp;&amp;amp; a - q[h] &amp;gt; C; ++h);
                        if (h &amp;lt;= t &amp;amp;&amp;amp; f[i][q[h] * V + b] != -inf)
                            f[i + 1][a * V + b] = std::max(f[i + 1][a * V + b], f[i][q[h] * V + b] + (a - q[h]) * W);
                        for (; h &amp;lt;= t &amp;amp;&amp;amp; f[i][a * V + b] - a * W &amp;gt;= f[i][q[t] * V + b] - q[t] * W; --t);
                        q.resize(++t + 1), q[t] = a;
                    &amp;#125;
                &amp;#125;
                int to = nex[tab[i + 1]];
                for (int j = 0; j &amp;lt;= m; ++j)
                    f[to][j] = std::max(f[to][j], f[i][j]);
            &amp;#125;
            res = std::max(res, *std::max_element(f[now].begin(), f[now].end()));
            std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt;().swap(f);
            tag[x] = 1;
            for (auto i : g[x])
                if (!tag[i])
                    DFS(i);
            return;
        &amp;#125;;
        DFS(1);
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---加油站&#34;&gt;D - 加油站&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10805&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10805&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点分治后分为 &lt;span class=&#34;math inline&#34;&gt;\(u\to rt\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(rt\to v\)&lt;/span&gt; 两个部分考虑。前者只需要倍增找到第一次加油的点即可；后者需要对于每个点作为加油站的情况，统计起点个数。&lt;/p&gt;
&lt;p&gt;具体地，需要分类讨论：若 &lt;span class=&#34;math inline&#34;&gt;\(d(rt,v)&amp;lt;k\)&lt;/span&gt;，说明&lt;strong&gt;上次加油一定不在当前子树内&lt;/strong&gt;；在根节点上登记的加油站中统计走得到 &lt;span class=&#34;math inline&#34;&gt;\(fa_v\)&lt;/span&gt; 但走不到 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的，就可以找到 &lt;span class=&#34;math inline&#34;&gt;\(fa_v\)&lt;/span&gt; 作为加油站对应的起点个数。对 &lt;span class=&#34;math inline&#34;&gt;\(d(rt,v)\ge k\)&lt;/span&gt;，只需要倍增找到上一次加油的点即可找到 &lt;span class=&#34;math inline&#34;&gt;\(fa_v\)&lt;/span&gt; 的答案。&lt;/p&gt;
&lt;p&gt;说着很轻巧，实现着很恶心。摆了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---首都&#34;&gt;E - 首都&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7215&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7215&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;启示我们点分治处理的问题不一是与『树结构』强相关者；也可以仅利用点分治划分出来的块，例如『若超出当前块，则一定不优』之类的。&lt;/p&gt;
&lt;p&gt;本题的该性质通过分讨是好证的；所以直接每个块内暴力即可。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1), t(k + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; col(n + 1), mx(n + 1), siz(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; col[i];
        t[col[i]].push_back(i);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tag(n + 1), p, tik(n + 1), faa(n + 1), vis(n + 1), book(k + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int fa) &amp;#123;
        siz[x] = 1, mx[x] = 0;
        p.push_back(x), tik[x] = 1;
        for (auto i : g[x])
            if (!tag[i] &amp;amp;&amp;amp; i != fa) &amp;#123;
                DFS1(i, x);
                siz[x] += siz[i];
                mx[x] = std::max(mx[x], siz[i]);
            &amp;#125;
        return;
    &amp;#125;;
    auto findrt = [&amp;amp;](int x) &amp;#123;
        p.clear(), DFS1(x, -1);
        int n = (int)p.size();
        for (auto i : p)
            if (mx[i] &amp;lt;= n / 2 &amp;amp;&amp;amp; n - siz[i] &amp;lt;= n / 2)
                return i;
        assert(0);
        return -1;
    &amp;#125;;
    std::function&amp;lt;void(int)&amp;gt; DFS2 = [&amp;amp;](int x) &amp;#123;
        for (auto i : g[x])
            if (!tag[i] &amp;amp;&amp;amp; i != faa[x])
                faa[i] = x, DFS2(i);
        return;
    &amp;#125;;
    int res = 0x3f3f3f3f;
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        x = findrt(x);
        faa[x] = -1, DFS2(x);
        std::queue&amp;lt;int&amp;gt; q;
        q.push(col[x]), book[col[x]] = 1;
        int cnt = 0;
        for (; !q.empty(); ) &amp;#123;
            int f = q.front();
            q.pop();
            for (auto i : t[f])
                if (tik[i]) 
                    for (int p = i; ~p &amp;amp;&amp;amp; !vis[p]; p = faa[p]) &amp;#123;
                        vis[p] = 1;
                        if (!book[col[p]]) &amp;#123;
                            if (++cnt &amp;gt;= res)
                                goto outo;
                            q.push(col[p]), book[col[p]] = 1;
                        &amp;#125;
                    &amp;#125;
                else
                    goto outo;
        &amp;#125;
        res = cnt;
        // printf(&amp;quot;x = %d: cnt = %d\n&amp;quot;, x, cnt);
    outo:
        for (auto i : p)
            vis[i] = tik[i] = book[col[i]] = 0;
        tag[x] = 1;
        for (auto i : g[x])
            if (!tag[i])
                DFS(i);
        return;
    &amp;#125;;
    DFS(1);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;    
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f---开店&#34;&gt;F - 开店&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3241&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3241&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;转化问题，原问题即求解权值在 &lt;span class=&#34;math inline&#34;&gt;\([L,R]\)&lt;/span&gt; 间的元素到 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的距离和。&lt;/p&gt;
&lt;p&gt;一般求解距离的方法是找到 LCA 后计算，考虑如果不利用树上 LCA，而是利用点分树上 LCA 如何计算。分讨易证得点分树上 LCA 一定在两点路径上。&lt;/p&gt;
&lt;p&gt;储存点分树上每个点到其每个祖先的距离，就可以方便地计算任意两点间距离。接下来处理原问题的弱化：对于每个 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 求解其到树上所有点距离和。显然这是一个类似换根的问题，随便做即可。&lt;/p&gt;
&lt;p&gt;现在需要在线地解决原问题。&lt;strong&gt;可以用 vector 存储这一层所有点的权值与深度信息，按权值排序后二分查询&lt;/strong&gt;。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2 n)\)&lt;/span&gt;。实现的时候应该可以注意到原题限制点度数对复杂度的保证。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;打起来的时候感觉很史，但实际上调得比大多数题快。&lt;/p&gt;
&lt;p&gt;大概懂得为什么经常看大佬写游记做到史题的实现预期都是『一遍过』了。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
const int maxn = 1.5e5 + 5;
std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; g[maxn];
int top[maxn], siz[maxn], fa[maxn], son[maxn], dep[maxn], dis[maxn];
void DFS1(int x) &amp;#123;
    siz[x] = 1;
    for (auto [i, w] : g[x])
        if (i != fa[x]) &amp;#123;
            fa[i] = x;
            dep[i] = dep[x] + 1, dis[i] = dis[x] + w;
            DFS1(i);
            siz[x] += siz[i];
            if (siz[i] &amp;gt; siz[son[x]])
                son[x] = i;
        &amp;#125;
    return;
&amp;#125;
void DFS2(int x) &amp;#123;
    if (son[x])
        top[son[x]] = top[x], DFS2(son[x]);
    for (auto [i, w] : g[x])
        if (i != fa[x] &amp;amp;&amp;amp; i != son[x])
            top[i] = i, DFS2(i);
    return;
&amp;#125;
int ask(int x, int y) &amp;#123;
    int sx = x, sy = y;
    for (; top[x] != top[y]; x = fa[top[x]])
        if (dep[top[x]] &amp;lt; dep[top[y]])
            std::swap(x, y);
    x = dep[x] &amp;lt; dep[y] ? x : y;
    return dis[sx] + dis[sy] - 2 * dis[x];
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, q, A;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q &amp;gt;&amp;gt; A;
    std::vector&amp;lt;int&amp;gt; c(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; c[i];
    for (int i = 1, x, y, w; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; w;
        g[x].emplace_back(y, w), g[y].emplace_back(x, w);
    &amp;#125;
    DFS1(1), DFS2(1);
    std::vector&amp;lt;int&amp;gt; mx(n + 1), siz(n + 1), p, tag(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int fa) &amp;#123;
        siz[x] = 1, mx[x] = 0;
        p.push_back(x);
        for (auto [i, w] : g[x])
            if (!tag[i] &amp;amp;&amp;amp; i != fa) &amp;#123;
                DFS1(i, x);
                siz[x] += siz[i];
                mx[x] = std::max(mx[x], siz[i]);
            &amp;#125;
        return;
    &amp;#125;;
    auto findrt = [&amp;amp;](int x) &amp;#123;
        p.clear(), DFS1(x, -1);
        int n = (int)p.size();
        for (auto i : p)
            if (mx[i] &amp;lt;= n / 2 &amp;amp;&amp;amp; n - siz[i] &amp;lt;= n / 2)
                return i;
        assert(0);
        return -1;
    &amp;#125;;
    std::vector&amp;lt;int&amp;gt; dis(n + 1);
    std::vector&amp;lt;std::array&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, long long&amp;gt; &amp;gt;, 3&amp;gt; &amp;gt; t(n + 1);
    std::function&amp;lt;void(int, int, std::vector&amp;lt;std::pair&amp;lt;int, long long&amp;gt; &amp;gt;&amp;amp;)&amp;gt; DFS2 = [&amp;amp;](int x, int fa, std::vector&amp;lt;std::pair&amp;lt;int, long long&amp;gt; &amp;gt; &amp;amp;t) &amp;#123;
        t.emplace_back(c[x], dis[x]);
        for (auto [i, w] : g[x])
            if (!tag[i] &amp;amp;&amp;amp; i != fa) &amp;#123;
                dis[i] = dis[x] + w;
                DFS2(i, x, t);
            &amp;#125;
        return;
    &amp;#125;;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; to(n + 1);
    std::function&amp;lt;std::pair&amp;lt;int, int&amp;gt; (int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        x = findrt(x);
        int ret = dis[x];
        for (int j = 0; j &amp;lt; (int)g[x].size(); ++j) &amp;#123;
            auto [i, w] = g[x][j];
            if (!tag[i]) &amp;#123;
                dis[i] = w;
                DFS2(i, x, t[x][j]);
                std::sort(t[x][j].begin(), t[x][j].end());
                // printf(&amp;quot;[%d, %d]: %d(%lld)&amp;quot;, x, j, t[x][j][0].first, t[x][j][0].second);
                for (int k = 1; k &amp;lt; (int)t[x][j].size(); ++k) &amp;#123;
                    t[x][j][k].second += t[x][j][k - 1].second;
                    // printf(&amp;quot; %d(%lld)&amp;quot;, t[x][j][k].first, t[x][j][k].second);
                &amp;#125;
                // puts(&amp;quot;&amp;quot;);
            &amp;#125;
        &amp;#125;
        tag[x] = 1;
        for (int j = 0; j &amp;lt; (int)g[x].size(); ++j) &amp;#123;
            auto [i, w] = g[x][j];
            if (!tag[i]) &amp;#123;
                auto [rt, d] = DFS(i);
                to[rt] = &amp;#123; x, j &amp;#125;;
            &amp;#125;
        &amp;#125;
        return std::make_pair(x, ret);
    &amp;#125;;
    int rt = DFS(1).first;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; fd(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        int now = i;
        for (;; now = to[now].first) &amp;#123;
            fd[i].push_back(ask(now, i));
            if (now == rt)
                break;
        &amp;#125;
    &amp;#125;
    for (int u, a, b; q--; ) &amp;#123;
        static long long la = 0ll;
        std::cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        int l = std::min((a + la) % A, (b + la) % A), r = std::max((a + la) % A, (b + la) % A);
        // printf(&amp;quot;ask %d, [%d, %d]\n&amp;quot;, u, l, r);
        auto ask = [&amp;amp;](int x, int j) &amp;#123;
            auto res(0ll);
            int cnt = 0, p = 0;
            p = std::lower_bound(t[x][j].begin(), t[x][j].end(), std::make_pair(l, -1ll)) - t[x][j].begin();
            cnt -= p;
            if (p != 0)
                res -= t[x][j][p - 1].second;
            p = std::upper_bound(t[x][j].begin(), t[x][j].end(), std::make_pair(r, inf)) - t[x][j].begin();
            cnt += p;
            if (p != 0)
                res += t[x][j][p - 1].second;
            return std::make_pair(res, cnt);
        &amp;#125;;
        la = ask(u, 0).first + ask(u, 1).first + ask(u, 2).first;
        // int U = u;
        for (auto d = ++fd[u].begin(); u != rt; ++d) &amp;#123;
            auto [fa, k] = to[u];
            // fprintf(stderr, &amp;quot;u = %d, fa = %d, d = %d\n&amp;quot;, U, fa, *d);
            for (int j = 0; j &amp;lt; 3; ++j)
                if (j != k) &amp;#123;
                    auto [len, cnt] = ask(fa, j);
                    la += len + (long long)cnt * *d;
                &amp;#125;
            if (c[fa] &amp;gt;= l &amp;amp;&amp;amp; c[fa] &amp;lt;= r)
                la += *d;
            u = fa;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; la &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="点分治" />
        <updated>2025-06-12T09:18:55.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250603/</id>
        <title>虚树</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250603/"/>
        <content type="html">&lt;p&gt;凡所有相，皆是虚妄①。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注释：①虚妄：犹言虚树是狂妄的算法。&lt;/em&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;给定一个大小为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的树和树上 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个关键点。取出这 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个关键点和它们任意两个间的 LCA 作为虚树的点集，按照原树上的祖孙关系连边得到虚树。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;求虚树&#34;&gt;求虚树&lt;/h2&gt;
&lt;p&gt;按照 DFN 排序，获取任意相邻两点 LCA，即可生成虚树点集。将点集按 DFN 排序后连边，复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(k\log k)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;至少两个实点对应一个虚点，故而虚树大小为 &lt;span class=&#34;math inline&#34;&gt;\(O(k)\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;用途&#34;&gt;用途&lt;/h2&gt;
&lt;p&gt;注意到无论是构建还是遍历虚树复杂度都与 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 无关。因而适用于对 &lt;span class=&#34;math inline&#34;&gt;\(\sum k\)&lt;/span&gt; 有限制的题目。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b---leaf-color&#34;&gt;B - Leaf Color&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc340/tasks/abc340_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc340/tasks/abc340_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;枚举所有颜色，每次对该颜色对应的所有点建立虚树，发现不能选虚树外的其他点，虚树上 DP 即可。&lt;/p&gt;
&lt;p&gt;注意根有可能是叶子。需要特判一下。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1), t(n + 1), g(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], t[a[i]].push_back(i);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), dep(n + 1), fa(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int faa) &amp;#123;
        siz[x] = 1;
        for (auto i : g1[x])
            if (i != faa) &amp;#123;
                dep[i] = dep[x] + 1;
                fa[i] = x;
                DFS(i, x);
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::vector&amp;lt;int&amp;gt; dfn(n + 1), rfn(n + 1), top(n + 1);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        static int now = 0;
        dfn[x] = ++now;
        if (son[x])
            top[son[x]] = top[x], DFS(son[x], x);
        for (auto i : g1[x])
            if (i != fa &amp;amp;&amp;amp; i != son[x])
                top[i] = i, DFS(i, x);
        rfn[x] = now;
        return;
    &amp;#125;;
    top[1] = 1, DFS(1, -1);
    auto getLCA = [&amp;amp;](int x, int y) &amp;#123;
        for (; top[x] != top[y]; x = fa[top[x]])
            if (dep[top[x]] &amp;lt; dep[top[y]])
                std::swap(x, y);
        return dep[x] &amp;lt; dep[y] ? x : y;
    &amp;#125;;
    std::vector&amp;lt;int&amp;gt; tag(n + 1);
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    auto res(0ll);
    for (int k = 1; k &amp;lt;= n; ++k)
        if (!t[k].empty()) &amp;#123;
            std::sort(t[k].begin(), t[k].end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
            std::vector&amp;lt;int&amp;gt; p;
            for (auto i : t[k])
                tag[i] = 1, p.push_back(i);
            for (int i = 1; i &amp;lt; (int)t[k].size(); ++i) &amp;#123;
                int fa = getLCA(t[k][i - 1], t[k][i]);
                if (!tag[fa])
                    tag[fa] = 1, p.push_back(fa);
            &amp;#125;
            std::sort(p.begin(), p.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
            std::vector&amp;lt;int&amp;gt; tmp;
            for (auto i : p) &amp;#123;
                if (!tmp.empty()) &amp;#123;
                    for (; rfn[tmp.back()] &amp;lt; dfn[i]; tmp.pop_back());
                    g[tmp.back()].push_back(i);
                &amp;#125;
                tmp.push_back(i);
            &amp;#125;
            std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
                f[x] = 1ll;
                auto s(1ll);
                for (auto i : g[x]) &amp;#123;
                    DFS(i), (s += f[i]) %= mod;
                    (f[x] *= f[i] + 1) %= mod;
                &amp;#125;
                if (a[x] != k)
                    (f[x] += mod - s) %= mod;
                // printf(&amp;quot;color = %d, res += f[%d](%lld)\n&amp;quot;, k, x, f[x]);
                (res += f[x]) %= mod;
                if (a[x] != k)
                    --s, (f[x] += s) %= mod;
                return;
            &amp;#125;;
            DFS(p.front());
            for (auto i : p) &amp;#123;
                tag[i] = 0, f[i] = 0ll;
                std::vector&amp;lt;int&amp;gt;().swap(g[i]);
            &amp;#125;
        &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c---watching-cowflix-p&#34;&gt;C - Watching Cowflix P&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9132&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9132&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;会想到钦定 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 再来做。发现任意情况下都有：假如两个连通块距离 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt;，那么合并起来不劣。所以把距离 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt; 的所有点都合并起来发现只剩下 &lt;span class=&#34;math inline&#34;&gt;\(O(\frac nk)\)&lt;/span&gt; 个点了，想到用虚树。&lt;/p&gt;
&lt;p&gt;然后虚树上枚举点选不选，DP 一下就完了。&lt;/p&gt;
&lt;p&gt;但是实现起来好史啊。合并需要用并查集维护父亲（而非本身），特别打脑壳。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;我的天哪滔天巨史。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, rt;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; p, tag(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        if (t == &amp;#39;1&amp;#39;)
            p.push_back(i), tag[i] = 1;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1), g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::set&amp;lt;int&amp;gt; st;
    std::vector&amp;lt;int&amp;gt; to(n + 1), len(n + 1), cnt(n + 1), dfn(n + 1);
    &amp;#123;
        std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1), fa(n + 1), dep(n + 1);
        std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int faa) &amp;#123;
            siz[x] = 1;
            for (auto i : g1[x])
                if (i != faa) &amp;#123;
                    dep[i] = dep[x] + 1;
                    fa[i] = x, DFS(i, x);
                    siz[x] += siz[i];
                    if (siz[i] &amp;gt; siz[son[x]])
                        son[x] = i;
                &amp;#125;
            return;
        &amp;#125;;
        DFS(1, -1);
        std::vector&amp;lt;int&amp;gt; rfn(n + 1), top(n + 1);
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            static int now = 0;
            dfn[x] = ++now;
            if (son[x])
                top[son[x]] = top[x], DFS(son[x], x);
            for (auto i : g1[x])
                if (i != son[x] &amp;amp;&amp;amp; i != fa)
                    top[i] = i, DFS(i, x);
            rfn[x] = now;
            return;
        &amp;#125;;
        DFS(1, -1);
        auto getLCA = [&amp;amp;](int x, int y) &amp;#123;
            for (; top[x] != top[y]; x = fa[top[x]])
                if (dep[top[x]] &amp;lt; dep[top[y]])
                    std::swap(x, y);
            return dep[x] &amp;lt; dep[y] ? x : y;
        &amp;#125;;
        std::sort(p.begin(), p.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
        std::vector&amp;lt;int&amp;gt; vis(tag), t(p);
        for (int i = 1; i &amp;lt; (int)p.size(); ++i) &amp;#123;
            int fa = getLCA(p[i - 1], p[i]);
            if (!vis[fa])
                vis[fa] = 1, t.push_back(fa);
        &amp;#125;
        std::sort(t.begin(), t.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
        rt = t.front();
        std::vector&amp;lt;int&amp;gt; stk;
        for (auto i : t) &amp;#123;
            if (!stk.empty()) &amp;#123;
                for (; rfn[stk.back()] &amp;lt; dfn[i]; stk.pop_back());
                to[i] = stk.back(), len[i] = dep[i] - dep[to[i]] - 1;
            &amp;#125;
            st.insert(i), stk.push_back(i);
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; fa(n + 1), siz(n + 1, 1);
    std::iota(fa.begin() + 1, fa.end(), 1);
    std::function&amp;lt;int(int)&amp;gt; find = [&amp;amp;](int x) &amp;#123;
        return x == fa[x] ? x : fa[x] = find(fa[x]);
    &amp;#125;;
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int k) &amp;#123;
        if (tag[x])
            f[x][0] = inf;
        f[x][1] = siz[x] + k;
        for (auto i : g[x]) &amp;#123;
            DFS(i, k);
            if (!tag[x])
                f[x][0] += std::min(f[i][0], f[i][1]);
            f[x][1] += std::min(&amp;#123; f[i][0], f[i][1], f[i][1] + len[i] - k &amp;#125;);
        &amp;#125;
        return;
    &amp;#125;;
    std::function&amp;lt;void(int, int, int)&amp;gt; DFS1 = [&amp;amp;](int x, bool flag, int k) &amp;#123;
        for (auto i : g[x])
            if (flag) &amp;#123;
                if (f[i][0] &amp;lt;= std::min(f[i][1], f[i][1] + len[i] - k))
                    DFS1(i, 0, k);
                else &amp;#123;
                    DFS1(i, 1, k);
                    if (f[i][1] + len[i] - k &amp;lt; f[i][1]) &amp;#123;
                        tag[x] |= tag[i];
                        siz[x] += siz[i] + len[i];
                        st.erase(i), fa[i] = x;
                    &amp;#125;
                &amp;#125;
            &amp;#125;
            else &amp;#123;
                if (f[i][0] &amp;lt;= f[i][1])
                    DFS1(i, 0, k);
                else
                    DFS1(i, 1, k);
            &amp;#125;
        return;
    &amp;#125;;
    for (int k = 1; k &amp;lt;= n; ++k) &amp;#123;
        std::vector&amp;lt;int&amp;gt; p;
        for (auto i : st) &amp;#123;
            p.push_back(i);
            if (to[i])
                g[find(to[i])].push_back(i);
        &amp;#125;
        DFS(rt, k);
        std::cout &amp;lt;&amp;lt; std::min(f[rt][0], f[rt][1]) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        DFS1(rt, f[rt][1] &amp;lt;= f[rt][0], k);
        for (auto i : st)
            f[i][0] = f[i][1] = 0, std::vector&amp;lt;int&amp;gt;().swap(g[i]);
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d---smuggling-marbles&#34;&gt;D - Smuggling Marbles&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc086/tasks/arc086_c&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc086/tasks/arc086_c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易想到从贡献角度思考问题；那么每个点只与同深度的所有点存在竞争关系。&lt;/p&gt;
&lt;p&gt;把每个深度的点拿出来建虚树，在虚树上跑 DP 即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m = 0;
    std::cin &amp;gt;&amp;gt; n, ++n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1), g1(n + 1);
    for (int i = 2, x; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; x, g1[x + 1].push_back(i);
    std::vector&amp;lt;int&amp;gt; top(n + 1), dep(n + 1), dfn(n + 1), rfn(n + 1), fa(n + 1);
    &amp;#123;
        std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1);
        std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
            siz[x] = 1;
            m = std::max(m, dep[x]);
            for (auto i : g1[x]) &amp;#123;
                dep[i] = dep[x] + 1;
                fa[i] = x, DFS(i);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
            return;
        &amp;#125;;
        dep[1] = 1, DFS(1);
        DFS = [&amp;amp;](int x) &amp;#123;
            static int now = 0;
            dfn[x] = ++now;
            if (son[x])
                top[son[x]] = top[x], DFS(son[x]);
            for (auto i : g1[x])
                if (i != son[x])
                    top[i] = i, DFS(i);
            rfn[x] = now;
            return;
        &amp;#125;;
        top[1] = 1, DFS(1);
    &amp;#125;
    auto getLCA = [&amp;amp;](int x, int y) &amp;#123;
        for (; top[x] != top[y]; x = fa[top[x]])
            if (dep[top[x]] &amp;lt; dep[top[y]])
                std::swap(x, y);
        return dep[x] &amp;lt; dep[y] ? x : y;
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; _p(m + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        _p[dep[i]].push_back(i);
    std::vector&amp;lt;int&amp;gt; tag(n + 1), flag(n + 1);
    std::vector&amp;lt;std::array&amp;lt;long long, 2&amp;gt; &amp;gt; f(n + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        f[x][0] = 1ll + flag[x], f[x][1] = flag[x];
        auto s(1ll);
        for (auto i : g[x]) &amp;#123;
            DFS(i);
            f[x][1] = (f[x][1] * f[i][0] + s * f[i][1]) % mod;
            (f[x][0] *= f[i][0] + f[i][1]) %= mod;
            (s *= f[i][0]) %= mod;
        &amp;#125;
        (f[x][0] += mod - f[x][1]) %= mod;
        // printf(&amp;quot;f[%d][0] = %lld, f[%d][1] = %lld\n&amp;quot;, x, f[x][0], x, f[x][1]);
        return;
    &amp;#125;;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto res(0ll);
    for (int k = 1; k &amp;lt;= m; ++k) &amp;#123;
        auto &amp;amp;p = _p[k], t(p);
        for (auto i : p)
            flag[i] = 1;
        std::sort(p.begin(), p.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
        for (int i = 1; i &amp;lt; (int)p.size(); ++i) &amp;#123;
            int fa = getLCA(p[i - 1], p[i]);
            if (!tag[fa])
                tag[fa] = 1, t.push_back(fa);
        &amp;#125;
        std::sort(t.begin(), t.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
        int rt = t.front();
        std::vector&amp;lt;int&amp;gt; st;
        for (auto i : t) &amp;#123;
            if (!st.empty()) &amp;#123;
                for (; rfn[st.back()] &amp;lt; dfn[i]; st.pop_back());
                g[st.back()].push_back(i);
            &amp;#125;
            st.push_back(i);
        &amp;#125;
        DFS(rt);
        (res += f[rt][1] * qkp(2ll, n - (int)p.size())) %= mod;
        // std::cout &amp;lt;&amp;lt; f[rt][1] * qkp(2ll, n - (int)p.size()) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        for (auto i : t) &amp;#123;
            tag[i] = flag[i] = 0;
            std::vector&amp;lt;int&amp;gt;().swap(g[i]);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e---世界树&#34;&gt;E - 世界树&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3233&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3233&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;会想到在虚树上两次 DFS 找到离任意点最近的实点。具体地，第一次找下方，第二次尝试用上方更新。&lt;/p&gt;
&lt;p&gt;接着发现对于虚树上的实点是好做的；对于实点的不在树上的儿子是好做的；接下来是虚点及其不在树上的儿子。&lt;/p&gt;
&lt;p&gt;就要用到刚刚求的信息了。显然二分一下就可以了。说起来很简单，然而实际上写起来很苦恼 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, q;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1), g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;std::array&amp;lt;int, 21&amp;gt; &amp;gt; fa(n + 1);
    std::vector&amp;lt;int&amp;gt; siz(n + 1), top(n + 1), dep(n + 1), dfn(n + 1), rfn(n + 1);
    &amp;#123;
        std::vector&amp;lt;int&amp;gt; son(n + 1);
        std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int faa) &amp;#123;
            siz[x] = 1;
            for (auto i : g1[x])
                if (i != faa) &amp;#123;
                    dep[i] = dep[x] + 1;
                    fa[i][0] = x;
                    for (int j = 1; j &amp;lt;= 20; ++j)
                        fa[i][j] = fa[fa[i][j - 1]][j - 1];
                    DFS(i, x);
                    siz[x] += siz[i];
                    if (siz[i] &amp;gt; siz[son[x]])
                        son[x] = i;
                &amp;#125;
            return;
        &amp;#125;;
        DFS(1, -1);
        int now = 0;
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            dfn[x] = ++now;
            if (son[x])
                top[son[x]] = top[x], DFS(son[x], x);
            for (auto i : g1[x])
                if (i != fa &amp;amp;&amp;amp; i != son[x])
                    top[i] = i, DFS(i, x);
            rfn[x] = now;
            return;
        &amp;#125;;
        top[1] = 1, DFS(1, -1);
    &amp;#125;
    auto getLCA = [&amp;amp;](int x, int y) &amp;#123;
        for (; top[x] != top[y]; x = fa[top[x]][0])
            if (dep[top[x]] &amp;lt; dep[top[y]])
                std::swap(x, y);
        return dep[x] &amp;lt; dep[y] ? x : y;
    &amp;#125;;
    auto getfa = [&amp;amp;](int x, int p) &amp;#123;
        for (int i = 20; ~i; --i)
            if (p &amp;gt;= (1 &amp;lt;&amp;lt; i))
                x = fa[x][i], p -= (1 &amp;lt;&amp;lt; i);
        return x;
    &amp;#125;;
    std::vector&amp;lt;int&amp;gt; to(n + 1);
    std::vector&amp;lt;int&amp;gt; tag(n + 1), flag(n + 1), res(n + 1);
    std::cin &amp;gt;&amp;gt; q;
    auto dis = [&amp;amp;](int x, int y) &amp;#123;
        return std::make_pair(dep[x] + dep[y] - 2 * dep[getLCA(x, y)], y);
    &amp;#125;;
    std::function&amp;lt;void(int)&amp;gt; DFS1 = [&amp;amp;](int x) &amp;#123;
        to[x] = (flag[x] ? x : -1);
        for (auto i : g[x]) &amp;#123;
            DFS1(i);
            if (~to[i] &amp;amp;&amp;amp; (to[x] == -1 || dis(x, to[i]) &amp;lt; dis(x, to[x])))
                to[x] = to[i];
        &amp;#125;
        // printf(&amp;quot;to[%d] = %d\n&amp;quot;, x, to[x]);
        return;
    &amp;#125;, DFS2 = [&amp;amp;](int x) &amp;#123;
        // printf(&amp;quot;to[%d] = %d\n&amp;quot;, x, to[x]);
        for (auto i : g[x]) &amp;#123;
            if (to[i] == -1 || dis(i, to[x]) &amp;lt; dis(i, to[i]))
                to[i] = to[x];
            DFS2(i);
        &amp;#125;
        return;
    &amp;#125;, DFS3 = [&amp;amp;](int x) &amp;#123;
        res[to[x]] += siz[x];
        for (auto i : g[x]) &amp;#123;
            res[to[x]] -= siz[getfa(i, dep[i] - dep[x] - 1)];
            DFS3(i);
        &amp;#125;
        // printf(&amp;quot;res[%d] = %d\n&amp;quot;, x, res[x]);
        return;
    &amp;#125;, DFS4 = [&amp;amp;](int x) &amp;#123;
        for (auto i : g[x]) &amp;#123;
            if (to[x] == to[i])
                res[to[x]] += siz[getfa(i, dep[i] - dep[x] - 1)] - siz[i];
            else &amp;#123;
                auto dx(dis(x, to[x])), di(dis(i, to[i]));
                int at = -1, len = dep[i] - dep[x] - 1;
                for (int l = 0, r = len, mid; l &amp;lt;= r; ) &amp;#123;
                    mid = (l + r) &amp;gt;&amp;gt; 1;
                    if ([&amp;amp;](auto dx, auto dy) &amp;#123;
                        dx.first += mid, dy.first += len - mid + 1;
                        return dx &amp;lt; dy;
                    &amp;#125; (dx, di))
                        at = mid, l = mid + 1;
                    else
                        r = mid - 1;
                &amp;#125;
                int fa = getfa(i, len - at);
                res[to[x]] += siz[getfa(i, len)] - siz[fa];
                res[to[i]] += siz[fa] - siz[i];
            &amp;#125;
            DFS4(i);
        &amp;#125;
        return;
    &amp;#125;;
    for (int k; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; k;
        std::vector&amp;lt;int&amp;gt; p(k);
        for (int i = 0; i &amp;lt; k; ++i)
            std::cin &amp;gt;&amp;gt; p[i], tag[p[i]] = flag[p[i]] = 1;
        auto org(p);
        std::sort(p.begin(), p.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
        std::vector&amp;lt;int&amp;gt; t(p);
        for (int i = 1; i &amp;lt; (int)p.size(); ++i) &amp;#123;
            int fa = getLCA(p[i - 1], p[i]);
            if (!tag[fa])
                tag[fa] = 1, t.push_back(fa);
        &amp;#125;
        if (!tag[1])
            t.push_back(1), tag[1] = 1;
        std::sort(t.begin(), t.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
        std::vector&amp;lt;int&amp;gt; st;
        for (auto i : t) &amp;#123;
            if (!st.empty()) &amp;#123;
                for (; rfn[st.back()] &amp;lt; dfn[i]; st.pop_back());
                g[st.back()].push_back(i);
            &amp;#125;
            st.push_back(i);
        &amp;#125;
        DFS1(1), DFS2(1), DFS3(1), DFS4(1);
        for (auto i : org)
            std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
        std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        for (auto i : t) &amp;#123;
            res[i] = 0;
            tag[i] = flag[i] = 0;
            std::vector&amp;lt;int&amp;gt;().swap(g[i]);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f---大工程&#34;&gt;F - 大工程&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4103&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4103&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虚树上 DP 统计相关信息即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, q;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1), g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; top(n + 1), dep(n + 1), dfn(n + 1), rfn(n + 1), fa(n + 1);
    &amp;#123;
        std::vector&amp;lt;int&amp;gt; siz(n + 1), son(n + 1);
        std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int faa) &amp;#123;
            siz[x] = 1;
            for (auto i : g1[x])
                if (i != faa) &amp;#123;
                    dep[i] = dep[x] + 1;
                    fa[i] = x, DFS(i, x);
                    siz[x] += siz[i];
                    if (siz[i] &amp;gt; siz[son[x]])
                        son[x] = i;
                &amp;#125;
            return;
        &amp;#125;;
        DFS(1, -1);
        int now = 0;
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            dfn[x] = ++now;
            if (son[x])
                top[son[x]] = top[x], DFS(son[x], x);
            for (auto i : g1[x])
                if (i != fa &amp;amp;&amp;amp; i != son[x])
                    top[i] = i, DFS(i, x);
            rfn[x] = now;
            return;
        &amp;#125;;
        top[1] = 1, DFS(1, -1);
    &amp;#125;
    auto getLCA = [&amp;amp;](int x, int y) &amp;#123;
        for (; top[x] != top[y]; x = fa[top[x]])
            if (dep[top[x]] &amp;lt; dep[top[y]])
                std::swap(x, y);
        return dep[x] &amp;lt; dep[y] ? x : y;
    &amp;#125;;
    std::vector&amp;lt;long long&amp;gt; s(n + 1);
    std::vector&amp;lt;int&amp;gt; mx(n + 1), mn(n + 1);
    std::vector&amp;lt;int&amp;gt; tag(n + 1), siz(n + 1), flag(n + 1);
    int rmx, rmn;
    long long rs;
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        if (flag[x]) &amp;#123;
            siz[x] = 1;
            mx[x] = mn[x] = s[x] = 0;
        &amp;#125;
        else &amp;#123;
            siz[x] = s[x] = 0;
            mn[x] = inf, mx[x] = -inf;
        &amp;#125;
        for (auto i : g[x]) &amp;#123;
            DFS(i);
            int len = dep[i] - dep[x];
            rmx = std::max(rmx, mx[x] + mx[i] + len);
            mx[x] = std::max(mx[x], mx[i] + len);
            rmn = std::min(rmn, mn[x] + mn[i] + len);
            mn[x] = std::min(mn[x], mn[i] + len);
            rs += siz[x] * (s[i] + (long long)siz[i] * len) + siz[i] * s[x]; 
            s[x] += s[i] + (long long)siz[i] * len;
            siz[x] += siz[i];
            // printf(&amp;quot;%d -&amp;gt; %d, mx = %d, mn = %d, s = %lld\n&amp;quot;, x, i, rmx, rmn, rs);
        &amp;#125;
        return;
    &amp;#125;;
    std::cin &amp;gt;&amp;gt; q;
    for (int k; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; k;
        std::vector&amp;lt;int&amp;gt; p(k);
        for (int i = 0; i &amp;lt; k; ++i)
            std::cin &amp;gt;&amp;gt; p[i], tag[p[i]] = flag[p[i]] = 1;
        std::sort(p.begin(), p.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
        std::vector&amp;lt;int&amp;gt; t(p);
        for (int i = 1; i &amp;lt; (int)p.size(); ++i) &amp;#123;
            int fa = getLCA(p[i - 1], p[i]);
            if (!tag[fa])
                tag[fa] = 1, t.push_back(fa);
        &amp;#125;
        std::sort(t.begin(), t.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
        int rt = t.front();
        std::vector&amp;lt;int&amp;gt; st;
        for (auto i : t) &amp;#123;
            if (!st.empty()) &amp;#123;
                for (; rfn[st.back()] &amp;lt; dfn[i]; st.pop_back());
                g[st.back()].push_back(i);
            &amp;#125;
            st.push_back(i);
        &amp;#125;
        rs = 0ll, rmx = -inf, rmn = inf;
        DFS(rt);
        std::cout &amp;lt;&amp;lt; rs &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; rmn &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; rmx &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        for (auto i : t) &amp;#123;
            tag[i] = flag[i] = 0;
            std::vector&amp;lt;int&amp;gt;().swap(g[i]);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="虚树" />
        <updated>2025-06-03T12:15:29.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250526/</id>
        <title>多维 DP</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250526/"/>
        <content type="html">&lt;p&gt;上楼听到有人在哼 &lt;em&gt;Climbing on the Trees&lt;/em&gt;，上来听到隔壁班在放 &lt;em&gt;Burn the House Down&lt;/em&gt;，果然春天是 AJR 的季节（）&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;主要是多维 DP 特有的优化！&lt;/p&gt;
&lt;h2 id=&#34;分步转移&#34;&gt;分步转移&lt;/h2&gt;
&lt;p&gt;如果状态的若干维之间只存在很弱的联系，可以分步转移每一维。&lt;/p&gt;
&lt;p&gt;假设有二维状态转移 &lt;span class=&#34;math inline&#34;&gt;\((a,b)\to (a&amp;#39;,b&amp;#39;)\)&lt;/span&gt;，『很弱的联系』举例：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;DP 值中包含 &lt;span class=&#34;math inline&#34;&gt;\(w(a&amp;#39;,b&amp;#39;)\)&lt;/span&gt;，但不包含诸如 &lt;span class=&#34;math inline&#34;&gt;\(w(a&amp;#39;,b),w(a,b&amp;#39;)\)&lt;/span&gt; 之类。也即该值的求解不依赖于上一个状态、不依赖于转移。&lt;/li&gt;
&lt;li&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\((a&amp;#39;,b&amp;#39;)\)&lt;/span&gt; 的取值有限制，比如 &lt;span class=&#34;math inline&#34;&gt;\((114,514)\)&lt;/span&gt; 不能取到之类。显然这也不依赖于上一个状态、不依赖于转移。&lt;/li&gt;
&lt;li&gt;符号限制（如转移间为 &lt;span class=&#34;math inline&#34;&gt;\(+\)&lt;/span&gt;，状态间为 &lt;span class=&#34;math inline&#34;&gt;\(\times\)&lt;/span&gt; 之类），在计数中常出现。&lt;/li&gt;
&lt;li&gt;一个变动的时候另一个必须也一起动。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意！有的时候一个状态也可以拆成两个状态，然后分步转移。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题经典题&#34;&gt;例题：经典题&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(w_{N\times M}\)&lt;/span&gt;，求 &lt;span class=&#34;math inline&#34;&gt;\((A,B)_{1\sim K}\)&lt;/span&gt;，最大化 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=1}^K w_{A_i,B_i}+w_{A_{i-1},A_i}+w_{B_{i-1},B_i}\)&lt;/span&gt; 的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现如果设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,a,b}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\((A,B)_i=(a,b)\)&lt;/span&gt; 的话，转移就会达到可观的 &lt;span class=&#34;math inline&#34;&gt;\(O(N\times M)\)&lt;/span&gt;；但发现里面的 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 其实没什么有机联系；唯一的联系 &lt;span class=&#34;math inline&#34;&gt;\(w_{A_i,B_i}\)&lt;/span&gt;（上面『很弱的联系』中的第一、四种情况）。因此分布转移：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f&amp;#39;_{a&amp;#39;,b}\gets \max\limits_a f_{a,b}+w_{a&amp;#39;,a}\\
f_{a&amp;#39;,b&amp;#39;}\gets \max\limits_b f&amp;#39;_{a&amp;#39;, b} + w_{b,b&amp;#39;}+w_{a&amp;#39;,b&amp;#39;}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;由此便优化转移复杂度到 &lt;span class=&#34;math inline&#34;&gt;\(O(N+M)\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题彩灯晚会&#34;&gt;例题：彩灯晚会&lt;/h3&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250407/#e---kdoi-11彩灯晚会&#34;&gt;link&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Tips：发现 &lt;span class=&#34;math inline&#34;&gt;\(l_1,l_2\)&lt;/span&gt; 之间也没啥有机联系（上面『很弱的联系』中的第三、四种情况），故分步转移。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题序列妙妙值&#34;&gt;例题：序列妙妙值&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://uoj.ac/problem/549&#34; class=&#34;uri&#34;&gt;https://uoj.ac/problem/549&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;朴素地，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个处分第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 段的最大价值，显然有 &lt;span class=&#34;math inline&#34;&gt;\(O(k\times n^2)\)&lt;/span&gt;，且并没有优化的空间。&lt;/p&gt;
&lt;p&gt;考虑利用 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 很小这一条件，发现上一条无法优化是因为要获取 &lt;span class=&#34;math inline&#34;&gt;\(sum_{i}\)&lt;/span&gt; 的值；那么把 &lt;span class=&#34;math inline&#34;&gt;\(sum_i\)&lt;/span&gt; 塞到状态里。设 &lt;span class=&#34;math inline&#34;&gt;\(f_{s&amp;#39;,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(sum=s&amp;#39;\)&lt;/span&gt; 时，分了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 段的最大价值。同样可以 &lt;span class=&#34;math inline&#34;&gt;\(O(k\cdot n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;接下来有两个理解这个优化的角度：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;从平衡角度，原问题等价于 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 更新 &lt;span class=&#34;math inline&#34;&gt;\((s,j)\)&lt;/span&gt; 处的最大值，&lt;span class=&#34;math inline&#34;&gt;\(O(v)\)&lt;/span&gt; 查找 &lt;span class=&#34;math inline&#34;&gt;\(j-1\)&lt;/span&gt; 处的最大值；把 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 拆成前 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位、后 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位两个 part，当更新&lt;/p&gt;
&lt;p&gt;对于修改：相当于固定前 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，枚举后 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，并更新 &lt;span class=&#34;math inline&#34;&gt;\((s,x)\)&lt;/span&gt;。&lt;/p&gt;
对于查询：相当于固定后 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，枚举前 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，并查询 &lt;span class=&#34;math inline&#34;&gt;\((s,x)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从分步转移角度，由于『现时刻』的贡献是按位的，二进制状态的前 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位和后 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位没啥有机联系，故直接拆开，先转移前 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位，再转移后 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt; 位。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样就被优化为 &lt;span class=&#34;math inline&#34;&gt;\(O(k\cdot n\times \sqrt v)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxv = 1 &amp;lt;&amp;lt; 8;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    using arr = std::vector&amp;lt;int&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    arr s(n + 1), tag0(maxv), d0;
    crr f(maxv, brr(maxv, arr(k + 1, inf))), g(maxv, brr(maxv, arr(k + 1, inf)));
    f[0][0][0] = 0;
    for (int j = 0; j &amp;lt; maxv; ++j)
        g[0][j][1] = j;
    tag0[0] = 1, d0.push_back(0);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; s[i], s[i] ^= s[i - 1];
        int p0 = s[i] &amp;gt;&amp;gt; 8, p1 = s[i] &amp;amp; ((1 &amp;lt;&amp;lt; 8) - 1);
        for (int j = k; j; --j) &amp;#123;
            for (auto a : d0)
                f[p0][p1][j] = std::min(f[p0][p1][j], g[a][p1][j] + ((a ^ p0) &amp;lt;&amp;lt; 8));
            // printf(&amp;quot;f[%d][%d][%d] = %d\n&amp;quot;, p0, p1, j, f[p0][p1][j]);
            if (j != k)
                for (int a = 0; a &amp;lt; maxv; ++a)
                    g[p0][a][j + 1] = std::min(g[p0][a][j + 1], f[p0][p1][j] + (a ^ p1));
        &amp;#125;
        if (i &amp;gt;= k)
            std::cout &amp;lt;&amp;lt; f[p0][p1][k] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
        if (!tag0[p0])
            tag0[p0] = 1, d0.push_back(p0);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;割裂&#34;&gt;割裂&lt;/h2&gt;
&lt;p&gt;如果状态的若干维之间连无机联系都没了，可以直接把 DP 数组拆开，各自转移各自的。&lt;/p&gt;
&lt;p&gt;最后答案的拼接，可能是枚举、直接拼、用一个转移另一个之类。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题经典题-1&#34;&gt;例题：经典题&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(w_{N\times M}\)&lt;/span&gt;，求 &lt;span class=&#34;math inline&#34;&gt;\((A,B)_{1\sim K}\)&lt;/span&gt;，最大化 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=1}^K w_{A_{i-1},A_i}+w_{B_{i-1},B_i}\)&lt;/span&gt; 的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先 DP 出来 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;，再 DP 出来 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;，直接相加即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题mnogomet&#34;&gt;例题：MNOGOMET&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7648&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7648&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;想到设 &lt;span class=&#34;math inline&#34;&gt;\(f_{t,i,a,b}\)&lt;/span&gt; 表示『过去了 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 秒，且球在球员 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 手上，且两个队伍得分分别为 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt;』的概率。那么枚举球上一次在谁手上，有美观的 &lt;span class=&#34;math inline&#34;&gt;\(O(T\cdot N^2R^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;发现比分变动时（上半个时刻完成射门并传球）球一定在某个队的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 号手上；&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 这一维和 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt; 也没有相互的干扰；故可以将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 提取出来（作为对比，射门和夺球、传球都会影响 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，所以分裂出来的状态中必须包含 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;）。具体地：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(g_{t,0/1,i}\)&lt;/span&gt; 表示『一开始球在哪个球队的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 号，花费 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 秒，且没人射门，且球在球员 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 手上』的概率。发现可以 &lt;span class=&#34;math inline&#34;&gt;\(O(T\times N^2)\)&lt;/span&gt; 计算。&lt;/p&gt;
&lt;p&gt;当然这里就是条件概率了。其中『一开始球在哪个球队的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 号』就是条件。&lt;/p&gt;
再预处理可以得到 &lt;span class=&#34;math inline&#34;&gt;\(G_{t,0/1,0/1,0/1}\)&lt;/span&gt; 表示『一开始球在哪个球队的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 号，花费 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 秒，哪个球队射门，（没）射进』的概率。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{t,0/1,a,b}\)&lt;/span&gt; 表示『过去了 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 秒，球在哪个队的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 号，且得分为 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt;』的概率。枚举距离上一次射门的时间，可以 &lt;span class=&#34;math inline&#34;&gt;\(O(T^2\times R^2)\)&lt;/span&gt; 完成转移。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, r, T;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; r &amp;gt;&amp;gt; T;
    using arr = std::vector&amp;lt;double&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    brr p(2 * n + 1, arr(2)), pp(2 * n + 1, arr(2 * n + 1));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; p[i][1], p[i][0] = 1. - p[i][1];
        int ss, sd;
        std::cin &amp;gt;&amp;gt; ss &amp;gt;&amp;gt; sd;
        double P = 1. / (ss + sd + 1);
        p[i][0] *= P, p[i][1] *= P;
        for (int x; ss--; pp[i][x] = P)
            std::cin &amp;gt;&amp;gt; x;
        for (int x; sd--; pp[i][x + n] = P)
            std::cin &amp;gt;&amp;gt; x;
    &amp;#125;
    for (int i = n + 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; p[i][1], p[i][0] = 1. - p[i][1];
        int ss, sd;
        std::cin &amp;gt;&amp;gt; ss &amp;gt;&amp;gt; sd;
        double P = 1. / (ss + sd + 1);
        p[i][0] *= P, p[i][1] *= P;
        for (int x; ss--; pp[i][x + n] = P)
            std::cin &amp;gt;&amp;gt; x;
        for (int x; sd--; pp[i][x] = P)
            std::cin &amp;gt;&amp;gt; x;
    &amp;#125;
    brr s(T + 1, arr(2));
    crr g(T + 1, brr(2, arr(2 * n + 1)));
    std::vector&amp;lt;crr&amp;gt; G(T + 1, crr(2, brr(2, arr(2)))), f(T + 1, crr(2, brr(r + 1, arr(r + 1))));
    g[0][0][1] = g[0][1][n + 1] = 1.;
    for (int t = 1; t &amp;lt;= T; ++t) &amp;#123;
        for (int f1 = 0; f1 &amp;lt;= 1; ++f1)
            for (int i = 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
                G[t][f1][i &amp;gt; n][0] += g[t - 1][f1][i] * p[i][0];
                G[t][f1][i &amp;gt; n][1] += g[t - 1][f1][i] * p[i][1];
                for (int j = 1; j &amp;lt;= 2 * n; ++j)
                    if (j != i)
                        g[t][f1][i] += pp[j][i] * g[t - 1][f1][j];
                // printf(&amp;quot;spend %ds, start from %d, now at %d: %.10lf\n&amp;quot;, t, 1 + f1 * n, i, g[t][f1][i]);
                s[t][f1] += g[t][f1][i];
            &amp;#125;
    &amp;#125;
    // puts(&amp;quot;------------------------------------&amp;quot;);
    // for (int t = 1; t &amp;lt;= T; ++t) &amp;#123;
    //     for (int f1 = 0; f1 &amp;lt;= 1; ++f1)
    //         for (int f2 = 0; f2 &amp;lt;= 1; ++f2)
    //             for (int f3 = 0; f3 &amp;lt;= 1; ++f3)
    //                 printf(&amp;quot;spend %ds, start from %d, %d shoots, STATUS: %d, P = %.10lf\n&amp;quot;, t, 1 + f1 * n, 1 + f2, f3, G[t][f1][f2][f3]);
    // &amp;#125;
    // puts(&amp;quot;------------------------------------&amp;quot;);
    f[0][0][0][0] = 1.;
    for (int t = 0; t &amp;lt; T; ++t)
        for (int f1 = 0; f1 &amp;lt;= 1; ++f1)
            for (int a = 0; a &amp;lt; r; ++a)
                for (int b = 0; b &amp;lt; r; ++b) &amp;#123;
                    for (int t1 = 1; t + t1 &amp;lt;= T; ++t1) &amp;#123;
                        f[t + t1][0][a][b] += f[t][f1][a][b] * G[t1][f1][1][0];
                        f[t + t1][0][a][b + 1] += f[t][f1][a][b] * G[t1][f1][1][1];
                        f[t + t1][1][a][b] += f[t][f1][a][b] * G[t1][f1][0][0];
                        f[t + t1][1][a + 1][b] += f[t][f1][a][b] * G[t1][f1][0][1];
                        if (t + t1 == T)
                            f[T][0][a][b] += f[t][f1][a][b] * s[t1][f1];
                    &amp;#125;
                &amp;#125;
    // for (int t = 0; t &amp;lt;= T; ++t)
    //     for (int f1 = 0; f1 &amp;lt;= 1; ++f1)
    //         for (int a = 0; a &amp;lt;= r; ++a)
    //             for (int b = 0; b &amp;lt;= r; ++b)
    //                 if (f[t][f1][a][b] &amp;gt; 1e-10)
    //                     printf(&amp;quot;%ds later, %d shoots, %d : %d, P = %.10lf\n&amp;quot;, t, 1 + !f1 * n, a, b, f[t][f1][a][b]);
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(10);
    for (int a = 0; a &amp;lt;= r; ++a) &amp;#123;
        for (int b = 0; b &amp;lt;= r; ++b) &amp;#123;
            if (a == r &amp;amp;&amp;amp; b == r)
                continue;
            double res(0.);
            if (a == r)
                for (int t = r; t &amp;lt;= T; ++t)
                    res += f[t][1][r][b];
            else if (b == r)
                for (int t = r; t &amp;lt;= T; ++t)
                    res += f[t][0][a][r];
            else
                res = f[T][0][a][b] + f[T][1][a][b];
            std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="DP 优化" />
        <updated>2025-05-26T07:05:53.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250524/</id>
        <title>周考</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250524/"/>
        <content type="html">&lt;p&gt;并非周考。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---carousel-of-combinations&#34;&gt;B - Carousel of Combinations&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1957/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1957/E&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次询问，每次给定一个 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，求：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\left(\sum\limits_{i=1}^n\sum\limits_{j=1}^i \dfrac {i!}{(i-j)!\cdot j!}\bmod j\right) \bmod 10^9+7
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;赛时打表 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {i!}{(i-j)!\cdot j!}\bmod j\)&lt;/span&gt; 易发现只有 &lt;span class=&#34;math inline&#34;&gt;\(j=4\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 为质数的列上有值；且仅当 &lt;span class=&#34;math inline&#34;&gt;\(\left\lfloor \dfrac ij\right\rfloor\)&lt;/span&gt; 发生变化时，&lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 的值不同。&lt;/p&gt;
&lt;p&gt;于是乎埃筛找每个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的倍数，由于每个值会持续一段 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 上的区间，考虑维护差分数组。前缀和得到原数组，再前缀和就能得到答案。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;证明&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;考虑转化为组合数形式方便证明。当 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 为质数时：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\dfrac {i!}{(i-j)!\cdot j!}\bmod j
&amp;amp;=C_i^j\cdot (j-1)!\bmod j\\
&amp;amp;=C_{i\bmod j}^{j\bmod j}\cdot C_{\lfloor \frac ij\rfloor}^{\frac jj}\cdot (j-1)!\bmod j\\
&amp;amp;=\left\lfloor \frac ij\right\rfloor\cdot (j-1)!\bmod j\\
&amp;amp;=\left\lfloor \frac ij\right\rfloor\cdot (j-1)\bmod j
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 为合数时：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\dfrac {i!}{(i-j)!\cdot j!}\bmod j=\left\lfloor \frac ij\right\rfloor\cdot (j-1)!\bmod j
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j=p^2\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 为质数时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j\ne 4\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(\dfrac jp \ge 3\)&lt;/span&gt;，代表在 &lt;span class=&#34;math inline&#34;&gt;\(1\sim j-1\)&lt;/span&gt; 中至少出现了两个 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的倍数，即 &lt;span class=&#34;math inline&#34;&gt;\((j-1)\bmod j = 0\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;否则，原式转化为 &lt;span class=&#34;math inline&#34;&gt;\(2\cdot \left\lfloor \frac i4\right\rfloor\bmod 4\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;否则：可以找到至少一组 &lt;span class=&#34;math inline&#34;&gt;\(j=i\cdot k\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\(i\ne k\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(i,k\)&lt;/span&gt; 出现在 &lt;span class=&#34;math inline&#34;&gt;\(1\sim j-1\)&lt;/span&gt; 中，即 &lt;span class=&#34;math inline&#34;&gt;\((j-1)\bmod j = 0\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;得到上述结论。&lt;/p&gt;
&lt;p&gt;Tips：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卢卡斯定理：懒得写了。&lt;/li&gt;
&lt;li&gt;威尔逊定理：对于质数 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\((p-1)!\equiv -1\pmod p\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---玻利维亚-bolivija&#34;&gt;C - 玻利维亚 / Bolivija&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P12401&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P12401&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定若干次区间的插入与删除操作，对于所有值域内未被覆盖极长段 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(len_i\)&lt;/span&gt; 为其长度；每次操作后询问 &lt;span class=&#34;math inline&#34;&gt;\(\sum \frac {len_i\cdot (len_i-1)}2+len_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来一点新奇的思路。假如你和我一样，很不幸地不知道维护最小值这个 trick，怎么解决这道题？&lt;/p&gt;
&lt;p&gt;容易想到线段树维护节点内贡献和左侧、右侧极长未覆盖长度。加入区间是简单的：对于线段树上被完全覆盖的节点，更新其贡献为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。依次 &lt;code&gt;pushup&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;删除区间，对于被这段区间完全覆盖的节点，发现如果整体被覆盖次数减少 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，有可能出现新的、未被覆盖的点，如果暴力 check 左右儿子是否出现了这样的点并更新，复杂度就不太美观了。&lt;/p&gt;
&lt;p&gt;故而对于一个节点，&lt;strong&gt;将『完全覆盖它的区间』和『部分覆盖它的区间』分开考虑&lt;/strong&gt;，在维护该节点所有实时信息（记为 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;）的同时，&lt;strong&gt;维护另一份只考虑了『部分覆盖它地区间』的信息（记为 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt;）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果一个『部分覆盖它的区间』被删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果存在『完全覆盖它的区间』：&lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 不变；向下修改儿子的 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt; 需要从儿子的 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 更新。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个『完全覆盖它的区间』被删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果还存在其他『完全覆盖它的区间』：&lt;span class=&#34;math inline&#34;&gt;\(s,s&amp;#39;\)&lt;/span&gt; 都不变。&lt;/li&gt;
&lt;li&gt;如果不存在其他『完全覆盖它的区间』：用 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt; 更新 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就能 &lt;span class=&#34;math inline&#34;&gt;\(O(q\log V)\)&lt;/span&gt; 解决上述问题。本方法较维护最小值的优势在于——似乎没有。想了许多种情况，它们大抵是等价的——且本方法更难写（哭）。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 654205;
struct &amp;#123;
    int cnt;
    long long u, s;
    int l, r, lu, ru, ls, rs;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
#define len(p) (t[p].r - t[p].l + 1)
void pushup(int p) &amp;#123;
    t[p].s = t[lt].u + t[rt].u + (long long)t[lt].ru * t[rt].lu;
    if (t[lt].lu == len(lt))
        t[p].ls = len(lt) + t[rt].lu;
    else
        t[p].ls = t[lt].lu;
    if (t[rt].ru == len(rt))
        t[p].rs = t[lt].ru + len(rt);
    else
        t[p].rs = t[rt].ru;
    if (!t[p].cnt)
        t[p].u = t[p].s, t[p].lu = t[p].ls, t[p].ru = t[p].rs;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u = t[p].s = 1ll;
        t[p].lu = t[p].ru = t[p].ls = t[p].rs = 1;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void add(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        ++t[p].cnt, t[p].u = 0ll, t[p].lu = t[p].ru = 0;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        add(lt, l, r);
    if (r &amp;gt; mid)
        add(rt, l, r);
    pushup(p);
    return;
&amp;#125;
void rem(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        if (!--t[p].cnt)
            t[p].u = t[p].s, t[p].lu = t[p].ls, t[p].ru = t[p].rs;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        rem(lt, l, r);
    if (r &amp;gt; mid)
        rem(rt, l, r);
    pushup(p);
    return;
&amp;#125;
int main() &amp;#123;
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    int n, q;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    int u = (n + 1) / 2;
    const int N = a[u];
    bld(1, 1, N);
    for (int i = 1; i &amp;lt; u; ++i)
        if (a[i] != a[n - i + 1])
            add(1, std::min(a[i], a[n - i + 1]) + 1, std::max(a[i], a[n - i + 1]));
    std::cout &amp;lt;&amp;lt; t[1].u &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    for (int i, v; q--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; i &amp;gt;&amp;gt; v;
        if (a[i] != a[n - i + 1])
            rem(1, std::min(a[i], a[n - i + 1]) + 1, std::max(a[i], a[n - i + 1]));
        a[i] = v;
        if (a[i] != a[n - i + 1])
            add(1, std::min(a[i], a[n - i + 1]) + 1, std::max(a[i], a[n - i + 1]));
        std::cout &amp;lt;&amp;lt; t[1].u &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---移动金币&#34;&gt;D - 移动金币&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5363&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5363&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后一个棋子的移动等价于丢掉最后一部分空格；中间棋子的移动等价于把左边间隔里的一段空格拿到右边的间隔里。发现原问题转化为『阶梯 Nim 博弈』。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;关于阶梯 Nim 博弈…&lt;/summary&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 层石头，每次行动可以选择以下操作中的一种：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;选择 &lt;span class=&#34;math inline&#34;&gt;\(2\le i\le n\)&lt;/span&gt;，从第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 层石头中拿走若干颗，全部放到第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 层里。&lt;/li&gt;
&lt;li&gt;从第 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 层石头中拿走若干颗，全部丢弃。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不能行动者输。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本问题可以等效为 Nim 游戏：&lt;/p&gt;
&lt;p&gt;对于第偶数层，若 Alice 选择从第 &lt;span class=&#34;math inline&#34;&gt;\(2i\)&lt;/span&gt; 层中移动 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个石头到 &lt;span class=&#34;math inline&#34;&gt;\(2i-1\)&lt;/span&gt;，Bob 可以立即从 &lt;span class=&#34;math inline&#34;&gt;\(2i-1\)&lt;/span&gt; 层中将这 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个石头移动到 &lt;span class=&#34;math inline&#34;&gt;\(2i-2\)&lt;/span&gt;（或丢弃）。&lt;/p&gt;
&lt;p&gt;也就是说，Alice 在偶数层中的操作不会对 Bob 带来任何限制。偶数层的石头可以被视作不存在；从奇数层移动到偶数层的石头可以被视为丢弃；进而，奇数堆中的移动等效为『丢弃』，将原问题中所有奇数堆抽离出来，等效成普通的 Nim 游戏。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;问题转化成，将 &lt;span class=&#34;math inline&#34;&gt;\(n-m\)&lt;/span&gt; 个元素放到编号 &lt;span class=&#34;math inline&#34;&gt;\(0\sim m+1\)&lt;/span&gt; 的盒子里，满足奇数号盒子球个数异或和为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的方案数。小容斥一下，用总数减去异或和为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 者。&lt;/p&gt;
</content>
        <category term="线段树" />
        <category term="博弈论" />
        <updated>2025-05-24T06:29:44.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250520/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250520/"/>
        <content type="html">&lt;p&gt;manual 是 anual 的 m 词形式（胡言乱语）&lt;/p&gt;
&lt;p&gt;Everyone is potential. （每个人都是蛋白质。）&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cf2043e-matrix-transformation&#34;&gt;CF2043E Matrix Transformation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/2043/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/2043/E&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\times m\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(01\)&lt;/span&gt; 矩阵 &lt;span class=&#34;math inline&#34;&gt;\(A,B\)&lt;/span&gt;，可任意将 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 的一行置为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 或一列置为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，问是否能将 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 变成 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现如果 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 的某一行是 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，那么不管 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 这一行是什么东西都可以通过一次操作让这一行满足条件（当然，要求这步操作最后进行）。列也是相似的。&lt;/p&gt;
&lt;p&gt;那么就有一个撤销的思路，从 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 中不断删除全 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 行或全 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 列，不能删了就对比二者剩下的部分是否全等（因为此时任何操作都是非法的）。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, m;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
        using arr = std::vector&amp;lt;int&amp;gt;;
        using brr = std::vector&amp;lt;arr&amp;gt;;
        using crr = std::vector&amp;lt;brr&amp;gt;;
        brr cn(31, arr(n + 1)), cm(31, arr(m + 1));
        crr a(31, brr(n + 1, arr(m + 1))), b(31, brr(n + 1, arr(m + 1)));
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = 1, x; j &amp;lt;= m; ++j) &amp;#123;
                std::cin &amp;gt;&amp;gt; x;
                for (int k = 0; k &amp;lt; 31; ++k)
                    a[k][i][j] = (x &amp;gt;&amp;gt; k) &amp;amp; 1;
            &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = 1, x; j &amp;lt;= m; ++j) &amp;#123;
                std::cin &amp;gt;&amp;gt; x;
                for (int k = 0; k &amp;lt; 31; ++k) &amp;#123;
                    b[k][i][j] = (x &amp;gt;&amp;gt; k) &amp;amp; 1;
                    cn[k][i] += b[k][i][j];
                    cm[k][j] += !b[k][i][j];
                &amp;#125;
            &amp;#125;
        for (int k = 0; k &amp;lt; 31; ++k) &amp;#123;
            std::queue&amp;lt;int&amp;gt; qn, qm;
            std::vector&amp;lt;int&amp;gt; tn(n + 1, 1), tm(m + 1, 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                if (!cn[k][i])
                    tn[i] = 0, qn.push(i);
            for (int j = 1; j &amp;lt;= m; ++j)
                if (!cm[k][j])
                    tm[j] = 0, qm.push(j);
            for (; !qn.empty() || !qm.empty(); ) &amp;#123;
                if (!qn.empty()) &amp;#123;
                    int i = qn.front();
                    // printf(&amp;quot;delete line %d\n&amp;quot;, i);
                    qn.pop();
                    for (int j = 1; j &amp;lt;= m; ++j)
                        if (!b[k][i][j] &amp;amp;&amp;amp; !--cm[k][j])
                            tm[j] = 0, qm.push(j);
                &amp;#125;
                else &amp;#123;
                    int j = qm.front();
                    // printf(&amp;quot;delete column %d\n&amp;quot;, j);
                    qm.pop();
                    for (int i = 1; i &amp;lt;= n; ++i)
                        if (b[k][i][j] &amp;amp;&amp;amp; !--cn[k][i])
                            tn[i] = 0, qn.push(i);
                &amp;#125;
            &amp;#125;
            for (int i = 1; i &amp;lt;= n; ++i)
                if (tn[i])
                    for (int j = 1; j &amp;lt;= m; ++j)
                        if (tm[j] &amp;amp;&amp;amp; a[k][i][j] != b[k][i][j]) &amp;#123;
                            // printf(&amp;quot;k = %d: (%d, %d)\n&amp;quot;, k, i, j);
                            goto nosol;
                        &amp;#125;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; &amp;quot;Yes\n&amp;quot;;
        continue;
    nosol :
        std::cout &amp;lt;&amp;lt; &amp;quot;No\n&amp;quot;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cf2043f-nim&#34;&gt;CF2043F Nim&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/2043/problem/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/2043/problem/F&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 次询问，每次问从 &lt;span class=&#34;math inline&#34;&gt;\(a_l\sim a_r\)&lt;/span&gt; 选非空子序列使得异或和为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，问子序列最小长度、该前提下的方案数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现子序列问题可以等价为背包；背包可以合并（即把整区间拆成若干段后，两两信息可以合并）；&lt;a href=&#34;/20231117/#关于背包&#34;&gt;背包可以放在分治上&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;由此，把询问离线下来放在 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 的分治上，每次只处理在 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 间且跨越 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 的询问就可以得到答案。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\cdot v^2\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;不要用方案数是否为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 来判断是否无解！因为方案数可能是 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt; 的倍数……&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int siz = 63;
const int mod = 998244353;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    struct _ &amp;#123; int l, r, id; &amp;#125;;
    std::vector&amp;lt;_&amp;gt; q(m + 1);
    std::vector&amp;lt;std::pair&amp;lt;int, long long&amp;gt; &amp;gt; res(m + 1, &amp;#123; inf, 0ll &amp;#125;);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; q[i].l &amp;gt;&amp;gt; q[i].r;
        q[i].id = i;
    &amp;#125;
    std::function&amp;lt;void(int, int, std::vector&amp;lt;_&amp;gt; &amp;amp;q)&amp;gt; calc = [&amp;amp;](int l, int r, std::vector&amp;lt;_&amp;gt; &amp;amp;q) &amp;#123;
        if (l == r) &amp;#123;
            for (auto [l, r, id] : q)
                if (a[l] == 0)
                    res[id] = &amp;#123; 0, 1ll &amp;#125;;
            return;
        &amp;#125;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        std::vector&amp;lt;_&amp;gt; ql, qr, qm;
        for (; !q.empty(); q.pop_back()) &amp;#123;
            if (q.back().r &amp;lt;= mid)
                ql.push_back(std::move(q.back()));
            else if (q.back().l &amp;gt; mid)
                qr.push_back(std::move(q.back()));
            else
                qm.push_back(std::move(q.back()));
        &amp;#125;
        calc(l, mid, ql), calc(mid + 1, r, qr);
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(r - l + 1, std::vector&amp;lt;int&amp;gt; (siz + 1, inf));
        std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; g(r - l + 1, std::vector&amp;lt;long long&amp;gt; (siz + 1));
        f[mid - l][a[mid]] = 1ll, g[mid - l][a[mid]] = 1ll;
        for (int i = mid - l - 1; ~i; --i) &amp;#123;
            int k = a[i + l];
            f[i] = f[i + 1], g[i] = g[i + 1];
            if (f[i][k] == 1)
                (++g[i][k]) %= mod;
            else
                f[i][k] = 1, g[i][k] = 1ll;
            for (int j = 0, k = a[i + l]; j &amp;lt;= siz; ++j)
                if (f[i + 1][j ^ k] + 1 &amp;lt; f[i][j])
                    f[i][j] = f[i + 1][j ^ k] + 1, g[i][j] = g[i + 1][j ^ k];
                else if (f[i + 1][j ^ k] + 1 == f[i][j])
                    (g[i][j] += g[i + 1][j ^ k]) %= mod;
        &amp;#125;
        f[mid - l + 1][a[mid + 1]] = 1ll, g[mid - l + 1][a[mid + 1]] = 1ll;
        for (int i = mid - l + 2; i &amp;lt;= r - l; ++i) &amp;#123;
            int k = a[i + l];
            f[i] = f[i - 1], g[i] = g[i - 1];
            if (f[i][k] == 1)
                (++g[i][k]) %= mod;
            else
                f[i][k] = 1, g[i][k] = 1ll;
            for (int j = 0; j &amp;lt;= siz; ++j)
                if (f[i - 1][j ^ k] + 1 &amp;lt; f[i][j])
                    f[i][j] = f[i - 1][j ^ k] + 1, g[i][j] = g[i - 1][j ^ k];
                else if (f[i - 1][j ^ k] + 1 == f[i][j])
                    (g[i][j] += g[i - 1][j ^ k]) %= mod;
        &amp;#125;
        for (auto [ql, qr, id] : qm) &amp;#123;
            // printf(&amp;quot;at [%d, %d], mid = %d: ASK [%d, %d]: \n&amp;quot;, l, r, mid, ql, qr);
            ql -= l, qr -= l;
            if (f[ql][0] &amp;lt; inf)
                res[id].first = f[ql][0], res[id].second = g[ql][0];
            if (f[qr][0] &amp;lt; res[id].first)
                res[id].first = f[qr][0], res[id].second = g[qr][0];
            else if (f[qr][0] == res[id].first)
                (res[id].second += g[qr][0]) %= mod;
            for (int i = 1; i &amp;lt;= siz; ++i) &amp;#123;
                // printf(&amp;quot;  %d[%d]: %d(%lld)  |  %d[%d]: %d(%lld)\n&amp;quot;, ql + l, i, f[ql][i], g[ql][i], qr + l, i, f[qr][i], g[qr][i]);
                if (f[ql][i] + f[qr][i] &amp;lt; res[id].first)
                    res[id].first = f[ql][i] + f[qr][i], res[id].second = g[ql][i] * g[qr][i] % mod;
                else if (f[ql][i] + f[qr][i] == res[id].first)
                    (res[id].second += g[ql][i] * g[qr][i]) %= mod;
            &amp;#125;
            if (res[id].first &amp;lt; inf)
                res[id].first = (qr - ql + 1) - res[id].first;
        &amp;#125;
        return;
    &amp;#125;;
    calc(1, n, q);
    for (int i = 1; i &amp;lt;= m; ++i)
        if (res[i].first &amp;lt; inf)
            std::cout &amp;lt;&amp;lt; res[i].first &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; res[i].second &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        else
            std::cout &amp;lt;&amp;lt; -1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;贪玩蓝月&#34;&gt;贪玩蓝月&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/6515&#34; class=&#34;uri&#34;&gt;https://loj.ac/p/6515&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;差不多的题：&lt;a href=&#34;https://atcoder.jp/contests/jag2018summer-day2/tasks/jag2018summer_day2_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/jag2018summer-day2/tasks/jag2018summer_day2_d&lt;/a&gt;，注意加入是按体积单增的&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;发现断点确定时可以背包 &lt;span class=&#34;math inline&#34;&gt;\(O(p)\)&lt;/span&gt; 维护插入删除；使用 &lt;a href=&#34;/20231117/#双栈模拟双端队列&#34;&gt;双栈模拟双端队列&lt;/a&gt; 就可以均摊 &lt;span class=&#34;math inline&#34;&gt;\(O(pm)\)&lt;/span&gt; 实现插入删除。&lt;/p&gt;
&lt;p&gt;对于询问，当然可以 &lt;span class=&#34;math inline&#34;&gt;\(O(p^2)\)&lt;/span&gt; 枚举最值再枚举方案（即枚举一端的贡献）；但复杂度不太美观。考虑倒过来，先 &lt;span class=&#34;math inline&#34;&gt;\(O(v)\)&lt;/span&gt; 枚举一端贡献，再枚举『能凑出 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 中的值』的另一端的贡献。这样就发现我们是在求区间最大值；每次询问时构建 ST 表预处理另一端的区间最大值即可。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(mq\log q)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int m, mod;
    std::cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; m &amp;gt;&amp;gt; mod;
    std::array&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt;, 2&amp;gt; T;
    std::array&amp;lt;std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt;, 2&amp;gt; F;
    F[0].emplace_back(mod, -inf), F[1].emplace_back(mod, -inf);
    F[0][0][0] = 0ll, F[1][0][0] = 0ll;
    for (; m--; ) &amp;#123;
        std::string op;
        std::cin &amp;gt;&amp;gt; op;
        if (op[0] == &amp;#39;I&amp;#39;) &amp;#123;
            int v, w;
            std::cin &amp;gt;&amp;gt; v &amp;gt;&amp;gt; w, v %= mod;
            auto &amp;amp;t = T[op[1] == &amp;#39;G&amp;#39;];
            auto &amp;amp;f = F[op[1] == &amp;#39;G&amp;#39;];
            t.emplace_back(v, w);
            f.emplace_back(f.back());
            for (int i = (int)f.size() - 1, j = 0; j &amp;lt; mod; ++j)
                if (f[i - 1][(j + mod - v) % mod] + w &amp;gt; f[i][j])
                    f[i][j] = f[i - 1][(j + mod - v) % mod] + w;
        &amp;#125;
        else if (op[0] == &amp;#39;D&amp;#39;) &amp;#123;
            auto &amp;amp;t0 = T[op[1] == &amp;#39;G&amp;#39;], &amp;amp;t1 = T[op[1] == &amp;#39;F&amp;#39;];
            auto &amp;amp;f0 = F[op[1] == &amp;#39;G&amp;#39;], &amp;amp;f1 = F[op[1] == &amp;#39;F&amp;#39;];
            if (t0.empty()) &amp;#123;
                t1.erase(t1.begin());
                int to = t1.size() / 2;
                std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; (t1.begin(), t1.begin() + to).swap(t0);
                std::reverse(t0.begin(), t0.end());
                std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; (t1.begin() + to, t1.end()).swap(t1);
                f0.resize(1), f1.resize(1);
                for (auto [v, w] : t0) &amp;#123;
                    f0.emplace_back(f0.back());
                    for (int i = (int)f0.size() - 1, j = 0; j &amp;lt; mod; ++j)
                        if (f0[i - 1][(j + mod - v) % mod] + w &amp;gt; f0[i][j])
                            f0[i][j] = f0[i - 1][(j + mod - v) % mod] + w;
                &amp;#125;
                for (auto [v, w] : t1) &amp;#123;
                    f1.emplace_back(f1.back());
                    for (int i = (int)f1.size() - 1, j = 0; j &amp;lt; mod; ++j)
                        if (f1[i - 1][(j + mod - v) % mod] + w &amp;gt; f1[i][j])
                            f1[i][j] = f1[i - 1][(j + mod - v) % mod] + w;
                &amp;#125;
            &amp;#125;
            else
                t0.pop_back(), f0.pop_back();
        &amp;#125;
        else &amp;#123;
            int l, r;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
            auto res(-inf);
            std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; st(std::__lg(mod) + 1, std::vector&amp;lt;long long&amp;gt; (mod + 1));
            st[0] = F[1].back();
            for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= mod; ++j)
                for (int i = 0; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt; mod; ++i)
                    st[j][i] = std::max(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
            auto ask = [&amp;amp;](int l, int r) &amp;#123;
                int k = std::__lg(r - l + 1);
                return std::max(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
            &amp;#125;;
            for (int j = 0; j &amp;lt; mod; ++j)
                if (j &amp;lt;= l)
                    res = std::max(res, F[0].back()[j] + ask(l - j, r - j));
                else if (l &amp;lt; j &amp;amp;&amp;amp; j &amp;lt;= r)
                    res = std::max(&amp;#123; res, F[0].back()[j] + ask(0, r - j), F[0].back()[j] + ask(l + mod - j, mod - 1) &amp;#125;);
                else
                    res = std::max(res, F[0].back()[j] + ask(l + mod - j, r + mod - j));
            std::cout &amp;lt;&amp;lt; std::max(-1ll, res) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;apio2025-转杆&#34;&gt;APIO2025 转杆&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P12543&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P12543&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;总有一天我要让全天下的数学题 DP 题字符串题图论题模拟题数据结构题思维题全部消失&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;不要把它转化成序列问题来考虑！这对观察到结论没有好处！&lt;/p&gt;
&lt;p&gt;考虑 &lt;span class=&#34;math inline&#34;&gt;\(n=2\)&lt;/span&gt; 的情况，当且仅当垂直时最优。&lt;span class=&#34;math inline&#34;&gt;\(n=3\)&lt;/span&gt; 时，随便固定其中一条线，发现剩下两条线如果夹角固定，则代价固定；当夹角取 &lt;span class=&#34;math inline&#34;&gt;\(90^{\circ}\)&lt;/span&gt; 时最优。&lt;/p&gt;
&lt;p&gt;于是猜是不是任意一对都要垂直。考虑数归，当前 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt; 对 &lt;del&gt;不知道怎么摆的，反正就是&lt;/del&gt; 最优时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考虑加入第 &lt;span class=&#34;math inline&#34;&gt;\(2n+1\)&lt;/span&gt; 条；参照 &lt;span class=&#34;math inline&#34;&gt;\(n=3\)&lt;/span&gt; 的情形，把前 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt; 条任意两两配对，则第 &lt;span class=&#34;math inline&#34;&gt;\(2n+1\)&lt;/span&gt; 的位置对代价没有任何影响。&lt;/li&gt;
&lt;li&gt;考虑加入第 &lt;span class=&#34;math inline&#34;&gt;\(2n+2\)&lt;/span&gt; 条；相似地，它的位置对前 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt; 条没有任何影响；故需要最大化它和第 &lt;span class=&#34;math inline&#34;&gt;\(2n+1\)&lt;/span&gt; 条的贡献。取垂直即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此得到任意一对都要垂直。具体怎么调整呢？首先下意识排序；配对方式即将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac i+\lfloor \frac n2\rfloor\)&lt;/span&gt; 配对；因为能感受到这样影响的线段最少。严谨的证明好像没看到。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include&amp;lt;bits/stdc++.h&amp;gt;
void energy(int, std::vector&amp;lt;int&amp;gt;);
void rotate(std::vector&amp;lt;int&amp;gt;, int);
void energy(int n, std::vector&amp;lt;int&amp;gt; a) &amp;#123;
    std::vector&amp;lt;int&amp;gt; id(n);
    std::iota(id.begin(), id.end(), 0);
    std::sort(id.begin(), id.end(), [&amp;amp;](int x, int y) &amp;#123; return a[x] &amp;lt; a[y]; &amp;#125;);
    for (int i = 0, j = n / 2; i &amp;lt; n / 2; ++i, ++j)
        rotate(&amp;#123; id[j] &amp;#125;, (a[id[i]] + 75000 - a[id[j]]) % 50000);
    return;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;abc407e-most-valuable-parentheses&#34;&gt;ABC407E Most Valuable Parentheses&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc407/tasks/abc407_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc407/tasks/abc407_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有一个很典（可惜我不知道）的 trick：&lt;a href=&#34;/20231117/#贪心选取括号序列&#34;&gt;贪心构造最优括号序列&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;用优先队列维护，贪心选即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        std::vector&amp;lt;int&amp;gt; a(2 * n + 1);
        for (int i = 1; i &amp;lt;= 2 * n; ++i)
            std::cin &amp;gt;&amp;gt; a[i];
        long long res = a[1];
        std::priority_queue&amp;lt;int&amp;gt; q;
        for (int i = 2; i &amp;lt; 2 * n; i += 2) &amp;#123;
            q.push(a[i]), q.push(a[i + 1]);
            res += q.top(), q.pop();
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="分治" />
        <category term="背包" />
        <updated>2025-05-20T14:22:43.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250518/</id>
        <title>构造类问题的很少解题方法</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250518/"/>
        <content type="html">&lt;p&gt;病毒可能具有膜结构，但不存在生物膜系统。核糖体是唯一所有细胞均含有的细胞器，但病毒中无核糖体。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;病毒的主要组成是 &lt;span class=&#34;math inline&#34;&gt;\(10\%\sim 20\%\)&lt;/span&gt; 的核酸，&lt;span class=&#34;math inline&#34;&gt;\(60\%\sim 70\%\)&lt;/span&gt; 的蛋白质外壳，&lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;10\%\)&lt;/span&gt; 的结合水，可能具有逆转录酶、RNA 聚合酶。病毒的含水量（&lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;10\%\)&lt;/span&gt;）远远小于细胞（&lt;span class=&#34;math inline&#34;&gt;\(70\%\)&lt;/span&gt;）。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;type-i调整法---1&#34;&gt;Type I：调整法 - 1&lt;/h2&gt;
&lt;p&gt;虽然话是这么说，感觉这就是平常正常的做题路径，『想做法』——『发现有锅』——『打补丁』。&lt;/p&gt;
&lt;p&gt;只是可能这是在提醒你在构造题中发现有锅不要急着换做法（？）&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题c---stations&#34;&gt;例题：C - Stations&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://qoj.ac/problem/1139&#34; class=&#34;uri&#34;&gt;https://qoj.ac/problem/1139&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个简单的想法是，当可用的编号范围很大时，可以记下每个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(DFN_u\)&lt;/span&gt; 和出栈序（记为 &lt;span class=&#34;math inline&#34;&gt;\(RFN_u\)&lt;/span&gt;），这样就能解决查询；但标号是 &lt;span class=&#34;math inline&#34;&gt;\(N^2\)&lt;/span&gt; 级别的。&lt;/p&gt;
&lt;p&gt;现在思考，我们为什么需要记录 &lt;span class=&#34;math inline&#34;&gt;\(RFN_u\)&lt;/span&gt; 呢？因为在询问时，需要判断 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的位置：如果在 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 某一儿子的子树内，答案为该儿子；否则，答案为 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt;。当 &lt;span class=&#34;math inline&#34;&gt;\(DFN_t\)&lt;/span&gt; 比 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 最靠后的儿子 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(DFN\)&lt;/span&gt; 还要大时，无法判断 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 内还是在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 外。&lt;/p&gt;
&lt;p&gt;此处有一个解决方案（原谅我实在无法猜出是怎么想到的），将树按奇数层、偶数层分层，计数层记录 &lt;span class=&#34;math inline&#34;&gt;\(DFN\)&lt;/span&gt;，偶数层记录 &lt;span class=&#34;math inline&#34;&gt;\(RFN\)&lt;/span&gt;（具体地，奇数层在入栈时编号，偶数层在出栈时编号）；接下来进行判断（注意我们并不知道 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 所在层数的奇偶性）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若不存在 &lt;span class=&#34;math inline&#34;&gt;\(id_i&amp;gt;id_u\)&lt;/span&gt;，说明 &lt;span class=&#34;math inline&#34;&gt;\(id_u\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(RFN_u\)&lt;/span&gt;；此时 可以判断 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 是否位于 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 内。&lt;/li&gt;
&lt;li&gt;否则，&lt;span class=&#34;math inline&#34;&gt;\(id_u\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(DFN_u\)&lt;/span&gt;。由于知道 &lt;span class=&#34;math inline&#34;&gt;\(RFN_v\)&lt;/span&gt;，可以判断 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 是否位于 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 内。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容易证明其他一般情况也可以判断 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的位置。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;quot;stations.h&amp;quot;
#include &amp;lt;bits/stdc++.h&amp;gt;
std::vector&amp;lt;int&amp;gt; label(int n, int k, std::vector&amp;lt;int&amp;gt; u, std::vector&amp;lt;int&amp;gt; v) &amp;#123;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n);
    for (int i = 0; i &amp;lt; n - 1; ++i)
        g[u[i]].push_back(v[i]), g[v[i]].push_back(u[i]);
    std::vector&amp;lt;int&amp;gt; id(n, -1);
    int now = 0;
    std::function&amp;lt;void(int, int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa, int tag) &amp;#123;
        if (tag)
            id[x] = now++;
        for (auto i : g[x])
            if (i != fa)
                DFS(i, x, tag ^ 1);
        if (!tag)
            id[x] = now++;
        return;
    &amp;#125;;
    DFS(0, -1, 1);
    return id;
&amp;#125;
int find_next_station(int s, int t, std::vector&amp;lt;int&amp;gt; c) &amp;#123;
    if (c.back() &amp;lt; s) &amp;#123;
        int fa = c.front();
        if (t &amp;gt; s)
            return fa;
        for (int i = (int)c.size() - 1; ~i; --i)
            if (t &amp;gt;= c[i])
                return c[i];
        return fa;
    &amp;#125;
    else &amp;#123;
        int fa = c.back();
        if (t &amp;lt; s)
            return fa;
        for (int i = 0; i &amp;lt; (int)c.size() - 1; ++i)
            if (t &amp;lt;= c[i])
                return c[i];
        return fa;
    &amp;#125;
    // assert(0);
    return 114514;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;type-ii调整法---2&#34;&gt;Type II：调整法 - 2&lt;/h2&gt;
&lt;p&gt;题目要求构造『恰好为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;』，可以先不看这个限制，对于局面求出上界和下界，然后再看是不是上下界中全部（或大多数）都能取到，此时有两个路径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接在某个上界 / 下界局面中通过若干步极小改动调整到恰好为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;通过这一点优化 DP 状态（这样就可以大量压缩『可到达局面』这一信息）。见 &lt;a href=&#34;/20250510/#b---miriany-and-matchstick&#34;&gt;此&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题d---construct-the-binary-tree&#34;&gt;例题：D - Construct the Binary Tree&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1311/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1311/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先从找上下界的角度出发，发现链为上界，完全二叉树为下界。&lt;/p&gt;
&lt;p&gt;那么只需先 check &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 是否在该范围内；固定树最左侧的一条链，每次拿走右下角的一个叶子（这样就能&lt;strong&gt;维持完全二叉树性质&lt;/strong&gt;），如果可以插入到链底就 do so；否则由于这是个左边挂着单链的完全二叉树，可以证明你想取的任意深度都可以取到，暴力跳即可，且跳完后就构造完了。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(O(nd)\)&lt;/span&gt; 是每次取点时扫一遍完全二叉树找一个能让当前点深度 &lt;span class=&#34;math inline&#34;&gt;\(+1\)&lt;/span&gt; 的父节点。&lt;span class=&#34;math inline&#34;&gt;\(O(d)\)&lt;/span&gt; 的做法是慢慢把树变窄变高，一次还是只 &lt;span class=&#34;math inline&#34;&gt;\(+1\)&lt;/span&gt;，二者的弊端都在于没利用『上界为链』即链和完全二叉树的优美性质。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, d;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; d;
        std::vector&amp;lt;int&amp;gt; tag(n + 1), dep(n + 1), cnt(n + 1), fa(n + 1);
        int L = 0, R = n * (n - 1) / 2;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            L += std::__lg(i), dep[i] = std::__lg(i);
            if (i * 2 &amp;lt;= n)
                ++cnt[i], fa[i * 2] = i;
            if (i * 2 + 1 &amp;lt;= n)
                ++cnt[i], fa[i * 2 + 1] = i;
        &amp;#125;
        if (L &amp;lt;= d &amp;amp;&amp;amp; d &amp;lt;= R) &amp;#123;
            std::cout &amp;lt;&amp;lt; &amp;quot;YES\n&amp;quot;;
            int t = 1;
            for (int i = 1; i &amp;lt;= n; i *= 2)
                tag[i] = 1, t = i;
            for (int i = n; i &amp;amp;&amp;amp; L != d; --i)
                if (!tag[i]) &amp;#123;
                    // printf(&amp;quot;i = %d\n&amp;quot;, i);
                    if (L + (dep[t] + 1) - dep[i] &amp;lt;= d) &amp;#123;
                        // printf(&amp;quot;L += %d - %d\n&amp;quot;, dep[t] + 1, dep[i]);
                        L += (dep[t] + 1) - dep[i];
                        --cnt[fa[i]], cnt[i] = 0, ++cnt[t];
                        dep[i] = dep[t] + 1, fa[i] = t;
                        t = i, tag[i] = 1;
                    &amp;#125;
                    else &amp;#123;
                        for (int j = 1; j &amp;lt;= n; ++j)
                            if (cnt[j] != 2 &amp;amp;&amp;amp; L + (dep[j] + 1) - dep[i] == d) &amp;#123;
                                fa[i] = j, L = d;
                                break;
                            &amp;#125;
                    &amp;#125;
                &amp;#125;
            for (int i = 2; i &amp;lt;= n; ++i)
                std::cout &amp;lt;&amp;lt; fa[i] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
            std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
        else &amp;#123;
            // printf(&amp;quot;[%d, %d]\n&amp;quot;, L, R);
            std::cout &amp;lt;&amp;lt; &amp;quot;NO\n&amp;quot;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;type-iii增量法-规约法&#34;&gt;Type III：增量法 / 规约法&lt;/h2&gt;
&lt;p&gt;增量法：类似数归，发现可以方便地从 &lt;span class=&#34;math inline&#34;&gt;\(n-k\)&lt;/span&gt; 扩展到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，考虑 &lt;span class=&#34;math inline&#34;&gt;\(n-k\)&lt;/span&gt; 给 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 带来的限制 / 性质，就可以类递推地做了。&lt;/p&gt;
&lt;p&gt;规约法：发现抠掉一个好处理的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 之后可以转化为规模为 &lt;span class=&#34;math inline&#34;&gt;\(n-k\)&lt;/span&gt; 的子问题，考虑 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 给 &lt;span class=&#34;math inline&#34;&gt;\(n - k\)&lt;/span&gt; 带来的限制，也可以类递推地做。&lt;/p&gt;
&lt;p&gt;其实真差不多哈，并不能说是一正一反之类的，因为思维路径真没太差。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题经典题&#34;&gt;例题：经典题&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给定大小为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的竞赛图，&lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 内求出一条哈密顿路径。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;竞赛图：给完全图的每条边定向。&lt;/li&gt;
&lt;li&gt;哈密顿路径：经过每个点恰好一次，对边无要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设已经知道规模为 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 的子问题的解法，塞一个新点进去，考察 &lt;span class=&#34;math inline&#34;&gt;\(P(n-1)\)&lt;/span&gt; 中的 &lt;span class=&#34;math inline&#34;&gt;\(\forall\, u\to v\)&lt;/span&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若只存在 &lt;span class=&#34;math inline&#34;&gt;\(n\to u,n\to v\)&lt;/span&gt;：对于路径起点 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 也有 &lt;span class=&#34;math inline&#34;&gt;\(n\to s\)&lt;/span&gt;，把 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 添加到开头即可。&lt;/li&gt;
&lt;li&gt;若只存在 &lt;span class=&#34;math inline&#34;&gt;\(u\to n,v\to n\)&lt;/span&gt;：对于路径终点 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 也有 &lt;span class=&#34;math inline&#34;&gt;\(t\to n\)&lt;/span&gt;，把 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 添加到末尾即可。&lt;/li&gt;
&lt;li&gt;若只存在 &lt;span class=&#34;math inline&#34;&gt;\(n\to u,v\to n\)&lt;/span&gt;：对于路径起点 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 也有 &lt;span class=&#34;math inline&#34;&gt;\(n\to s\)&lt;/span&gt;，对于路径终点 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 也有 &lt;span class=&#34;math inline&#34;&gt;\(t\to n\)&lt;/span&gt;，爱加哪儿就加哪儿。&lt;/li&gt;
&lt;li&gt;否则：存在 &lt;span class=&#34;math inline&#34;&gt;\(u\to n,n\to v\)&lt;/span&gt;，皆大欢喜，将 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt; 改为 &lt;span class=&#34;math inline&#34;&gt;\(u\to n\to v\)&lt;/span&gt; 即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由此就可以解决问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;例题e---travelling-salesperson&#34;&gt;例题：E - Travelling Salesperson&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6644&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6644&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意本题为无向边！&lt;/p&gt;
&lt;p&gt;相似地，对于 &lt;span class=&#34;math inline&#34;&gt;\(P(n-1)\)&lt;/span&gt;，假如存在 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt;，欲加入 &lt;span class=&#34;math inline&#34;&gt;\(u\to n\to v\)&lt;/span&gt; 讨论以下几种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(P(n - 1)\)&lt;/span&gt; 中只含有一种颜色的边：直接加入首 / 尾即可。&lt;/li&gt;
&lt;li&gt;若存在 &lt;span class=&#34;math inline&#34;&gt;\(\color{red}{\to} u\color{red}{\to}v\color{red}{\to}\)&lt;/span&gt;、&lt;span class=&#34;math inline&#34;&gt;\(u\color{red}{\to} n\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(n\color{red}{\to} v\)&lt;/span&gt;（蓝色同理）：直接加入，皆大欢喜。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其余情况，就是 &lt;span class=&#34;math inline&#34;&gt;\(\color{red}{\to} u\color{blue}{\to} v\color{blue}{\to}\)&lt;/span&gt; 的情况了。容易发现除了 &lt;span class=&#34;math inline&#34;&gt;\(u\color{blue}{\to} n\land n\color{red}{\to} v\)&lt;/span&gt; 之外的情况都可以直接将边加入。故接下来讨论该特例。&lt;/p&gt;
&lt;p&gt;此时在 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt; 处无法加入；尝试考虑相邻的点。由于在 &lt;span class=&#34;math inline&#34;&gt;\(u\color{blue}{\to} v\)&lt;/span&gt; 处切换颜色，易知 &lt;span class=&#34;math inline&#34;&gt;\(u\ne s\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 存在前驱（记为 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若存在 &lt;span class=&#34;math inline&#34;&gt;\(p\color{blue}{\to} i\)&lt;/span&gt;：连接 &lt;span class=&#34;math inline&#34;&gt;\(p,i,u\)&lt;/span&gt;，最终局面为 &lt;span class=&#34;math inline&#34;&gt;\(\color{red}{\to} p\color{blue}{\to} i\color{blue}{\to} u\color{blue}{\to} v\color{blue}{\to}\)&lt;/span&gt;，即将变换处提前两位。&lt;/li&gt;
&lt;li&gt;否则：存在 &lt;span class=&#34;math inline&#34;&gt;\(p\color{red}{\to} i\)&lt;/span&gt;，仍然连接 &lt;span class=&#34;math inline&#34;&gt;\(p,i,u\)&lt;/span&gt;，最终局面为 &lt;span class=&#34;math inline&#34;&gt;\(\color{red}{\to} p\color{red}{\to} i\color{blue}{\to} u\color{blue}{\to} v\color{blue}{\to}\)&lt;/span&gt;，即将变换处提前一位。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由此可解决问题。可以发现并不存在所谓无解的情况 &lt;img src=&#34;/em/ll.gif&#34; /&gt; —— 倒不如说可以对所有点套用最后一种情况（和第一种）——就能够 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 解决原问题了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;loj 上过了但洛谷过不了 &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    if (n == 1) &amp;#123;
        std::cout &amp;lt;&amp;lt; &amp;quot;1\n1&amp;quot; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;char&amp;gt; &amp;gt; g(n + 1, std::vector&amp;lt;char&amp;gt; (n + 1));
    for (int i = 2; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt; i; ++j)
            std::cin &amp;gt;&amp;gt; g[i][j], g[j][i] = g[i][j];
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::vector&amp;lt;int&amp;gt; tag(n + 1);
        std::list&amp;lt;int&amp;gt; p(&amp;#123; i, i == 1 ? 2 : 1 &amp;#125;);
        tag[p.front()] = tag[p.back()] = 1;
        bool flag = 1;
        char R = g[p.front()][p.back()], B = ((R == &amp;#39;R&amp;#39;) ? &amp;#39;B&amp;#39; : &amp;#39;R&amp;#39;);
        auto pos = --p.end();
        for (int j = 1; j &amp;lt;= n; ++j)
            if (!tag[j]) &amp;#123;
                if (flag &amp;amp;&amp;amp; g[j][p.back()] == R)
                    // printf(&amp;quot;%d: 30  &amp;quot;, j),
                    p.push_back(j), ++pos;
                else if (g[j][p.back()] == B)
                    // printf(&amp;quot;%d: 33  &amp;quot;, j),
                    p.push_back(j), flag = 0;
                else &amp;#123;
                    auto u = pos, v = std::next(pos);
                    if (g[*u][j] == R &amp;amp;&amp;amp; g[j][*v] == R) &amp;#123;
                        // printf(&amp;quot;%d: 38  &amp;quot;, j),
                        p.insert(v, j), ++++pos;
                        if (v == --p.end())
                            flag = 1;
                    &amp;#125;
                    else if (g[*u][j] == R &amp;amp;&amp;amp; g[j][*v] == B)
                        // printf(&amp;quot;%d: 41  &amp;quot;, j),
                        p.insert(v, j), ++pos;
                    else if (g[*u][j] == B &amp;amp;&amp;amp; g[j][*v] == B)
                        // printf(&amp;quot;%d: 44  &amp;quot;, j),
                        p.insert(v, j);
                    else &amp;#123;
                        auto pr(std::prev(u));
                        if (g[*pr][j] == B)
                            // printf(&amp;quot;%d: 49  &amp;quot;, j),
                            p.insert(u, j), ----pos;
                        else
                            // printf(&amp;quot;%d: 52  &amp;quot;, j),
                            p.insert(u, j), --pos;
                    &amp;#125;
                &amp;#125;
                // for (auto j : p)
                //     std::cout &amp;lt;&amp;lt; j &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
                // printf(&amp;quot; flag = %d\n&amp;quot;, flag);
            &amp;#125;
        std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        for (auto j : p)
            std::cout &amp;lt;&amp;lt; j &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
        std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f---sergeys-problem&#34;&gt;F - Sergey’s problem&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1019/C&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1019/C&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="构造" />
        <category term="调整法" />
        <updated>2025-05-18T06:43:30.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250510/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250510/"/>
        <content type="html">&lt;p&gt;啊啊。小封条。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---pass-to-next&#34;&gt;A - Pass to Next&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc124/tasks/arc124_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc124/tasks/arc124_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感觉其他一些题解讲得不是特别清楚，这里参考了 &lt;a href=&#34;https://blog.csdn.net/weixin_43960287/article/details/119140590&#34;&gt;XJX 的文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;要求的答案是 &lt;span class=&#34;math inline&#34;&gt;\(\prod a&amp;#39;_i\)&lt;/span&gt;，&lt;mark&gt;发现运算是乘法，比较怪；由此考虑转化为方案数，也就是假设每个人有 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;#39;_i\)&lt;/span&gt; 个互不相同的球，每个人在其中选出恰好一个的方案数&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;考虑 DP。发现每个人手上的球分为『自己的』和『左边的人传过来的』两种类型；&lt;mark&gt;显然第二种会有来自上一个人的限制，考虑把第二种在上一个人就完成求解&lt;/mark&gt;。具体地，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,0}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个人选取自己的球，但只记录 &lt;span class=&#34;math inline&#34;&gt;\(1\sim i-1\)&lt;/span&gt; 的方案；&lt;span class=&#34;math inline&#34;&gt;\(f_{i,1}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个人选取第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 个人的球，并记入答案的方案。&lt;em&gt;你可能需要注意到：最后一个被记入方案的球来自第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 个人&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;但这样会有个小问题。我们让所有人多往右边传一个球，那么在我们的这种分割方法看来是不一样的局面；但实际上它们是等价的。从每个人传出了多少个球（设为 &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt;）的角度来看，对于 &lt;span class=&#34;math inline&#34;&gt;\(\min\{x_n\}\ne 0\)&lt;/span&gt;，只需要不断执行 &lt;span class=&#34;math inline&#34;&gt;\(\forall\, x_i\gets x_i-1\)&lt;/span&gt; 就可以在局面不变的情况下使 &lt;span class=&#34;math inline&#34;&gt;\(\min\{x_n\}\ne 0\)&lt;/span&gt;。这是在说，可以让 &lt;span class=&#34;math inline&#34;&gt;\(\min\{x_n\}\ne 0\)&lt;/span&gt; 的方案和终局一一对应。&lt;/p&gt;
&lt;p&gt;发现可以容斥：钦定 &lt;span class=&#34;math inline&#34;&gt;\(x_i\ge 1\)&lt;/span&gt;，也就是每个人必须往右传至少一个，相似地算一遍就能得到非法方案。&lt;/p&gt;
&lt;p&gt;考虑转移，令 &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt; 可选最小值为 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt;，有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{i+1,0}\gets f_{i,0}\)&lt;/span&gt;：将第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个人未被记入的自己的球记入，球数可能为 &lt;span class=&#34;math inline&#34;&gt;\([0,a_i-l]\)&lt;/span&gt;。等差数列求和即可。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{i+1,0}\gets f_{i,1}\)&lt;/span&gt;：没有球需要被记入，但是这种情况对应多种 &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt;。具体地，&lt;span class=&#34;math inline&#34;&gt;\(x_i\in [l,a_i]\)&lt;/span&gt;。共有 &lt;span class=&#34;math inline&#34;&gt;\(a_i-l+1\)&lt;/span&gt; 种方案。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{i+1,1}\gets f_{i,0}\)&lt;/span&gt;：将第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个人的 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 个球分给 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt;。共有 &lt;span class=&#34;math inline&#34;&gt;\(x_i\cdot (a_i-x_i)\)&lt;/span&gt; 种可能，也就是 &lt;span class=&#34;math inline&#34;&gt;\(\left(a_i\cdot \sum_{x_i=l}^{a_i} x_i\right)-\left(\sum_{x_i=l}^{a_i}{x_i}^2\right)\)&lt;/span&gt; 种方案。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{i+1,1}\gets f_{i,1}\)&lt;/span&gt;：将第 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 个人得到的第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个人的球记入，同第一条。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;破环为链，分别钦定第一个人是用自己的球还是上一个人的球来解决问题（必须对于两种可能性分开计算；否则就不知道答案应该取 &lt;span class=&#34;math inline&#34;&gt;\(f_{n,0}\)&lt;/span&gt; 还是 &lt;span class=&#34;math inline&#34;&gt;\(f_{n,1}\)&lt;/span&gt;）。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353, inv2 = (mod + 1) &amp;gt;&amp;gt; 1, inv6 = 166374059;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i % n];
    auto sum = [&amp;amp;](long long r) &amp;#123;
        return r * (r + 1) % mod * inv2 % mod;
    &amp;#125;;
    auto sum2 = [&amp;amp;](long long r) &amp;#123;
        return r * (r + 1) % mod * (2 * r % mod + 1) % mod * inv6 % mod;
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f0(n, std::vector&amp;lt;long long&amp;gt; (2)), f1(n, std::vector&amp;lt;long long&amp;gt; (2));
    auto calc = [&amp;amp;](long long l, std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; &amp;amp;f) &amp;#123;
        f[0][0] = 1ll;
        for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
            int j = (i + 1) % n;
            f[j][0] = f[i][0] * sum(a[i] - l) % mod;
            (f[j][0] += f[i][1] * (a[i] - l + 1)) %= mod;
            f[j][1] = f[i][0] * (a[i] * sum(a[i]) % mod - sum2(a[i])) % mod;
            (f[j][1] += f[i][1] * sum(a[i]) % mod) %= mod;
            // printf(&amp;quot;0, l = %lld, f[%d]: %lld / %lld\n&amp;quot;, l, j, f[j][0], f[j][1]);
        &amp;#125;
        auto res(f[0][0]);
        f.assign(n, std::vector&amp;lt;long long&amp;gt; (2));
        f[0][1] = 1ll;
        for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
            int j = (i + 1) % n;
            f[j][0] = f[i][0] * sum(a[i] - l) % mod;
            (f[j][0] += f[i][1] * (a[i] - l + 1)) %= mod;
            f[j][1] = f[i][0] * (a[i] * sum(a[i]) % mod - sum2(a[i])) % mod;
            (f[j][1] += f[i][1] * sum(a[i]) % mod) %= mod;
            // printf(&amp;quot;1, l = %lld, f[%d]: %lld / %lld\n&amp;quot;, l, j, f[j][0], f[j][1]);
        &amp;#125;
        return (res + f[0][1]) % mod;
    &amp;#125;;
    std::cout &amp;lt;&amp;lt; (calc(0, f0) + mod - calc(1, f1)) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---绿宝石之岛&#34;&gt;B - 绿宝石之岛&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/6406&#34; class=&#34;uri&#34;&gt;https://loj.ac/p/6406&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为只关心最终状态，原题可以转化为：将 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 分成 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个非负整数，前 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 大数之和的期望（当然你需要加上初始的 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 个）。&lt;/p&gt;
&lt;p&gt;关于非负整数拆分：设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 分成 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个 &lt;strong&gt;非负整数&lt;/strong&gt; 的方案，钦定其中恰有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个 &lt;strong&gt;正整数&lt;/strong&gt; 进行转移，给这 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个数先分一个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\sum\limits_{k=0}^{\min(i,j)} C_j^k\cdot f_{i-k,k}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;再设 &lt;span class=&#34;math inline&#34;&gt;\(g_{i,j}\)&lt;/span&gt; 表示将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 分成 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个非负整数的所有方案中、前 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 大的数之和。类似地，有 &lt;span class=&#34;math inline&#34;&gt;\(g_{i,j}=\sum\limits_{k=0}^{\min(i,j)} C_j^k\cdot (g_{i-k,k}+\min(k,r)\cdot f_{i-k,k})\)&lt;/span&gt;。其中，&lt;span class=&#34;math inline&#34;&gt;\(\min(k,r)\)&lt;/span&gt; 的来源是，只有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个数有值，前 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 大的数一定在这 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个数里面。&lt;/p&gt;
&lt;p&gt;答案为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {g_{d,n}}{f_{d,n}}+r\)&lt;/span&gt;，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, d, r;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; d &amp;gt;&amp;gt; r;
    using arr = std::vector&amp;lt;double&amp;gt;;
    std::vector&amp;lt;arr&amp;gt; f(d + 1, arr(n + 1)), g(d + 1, arr(n + 1)), C(n + 1, arr(n + 1));
    for (int i = 0; i &amp;lt;= n; ++i) &amp;#123;
        C[i][0] = 1.;
        for (int j = 1; j &amp;lt;= i; ++j)
            C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
    &amp;#125;
    f[0].assign(n + 1, 1.);
    for (int i = 1; i &amp;lt;= d; ++i)
        for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
            for (int k = 1; k &amp;lt;= i &amp;amp;&amp;amp; k &amp;lt;= j; ++k) &amp;#123;
                f[i][j] += C[j][k] * f[i - k][k];
                g[i][j] += C[j][k] * (g[i - k][k] + std::min(k, r) * f[i - k][k]);
                // printf(&amp;quot;  k = %d, %.0lf + %.0lf\n&amp;quot;, k, C[j][k] * g[i - k][k], std::min(k, r) * f[i - k][k]);
            &amp;#125;
            // printf(&amp;quot;f[%d][%d] = %.0lf, g[%d][%d] = %.0lf\n&amp;quot;, i, j, f[i][j], i, j, g[i][j]);
        &amp;#125;
    std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(8) &amp;lt;&amp;lt; g[d][n] / f[d][n] + r &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---uddered-but-not-herd-g&#34;&gt;C - Uddered but not Herd G&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P7296&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P7296&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给每个字母分配一个标号 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，那么最小段数就是 &lt;span class=&#34;math inline&#34;&gt;\(\sum \left[x_i\ge x_{i+1}\right]\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑状压完成映射操作，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{s}\)&lt;/span&gt; 表示给标号 &lt;span class=&#34;math inline&#34;&gt;\(1\sim |s|\)&lt;/span&gt; 分配字母后，占用字符集 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的方案数，那么就能 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 得到贡献——只需预处理出 &lt;span class=&#34;math inline&#34;&gt;\(f_{c, s}\)&lt;/span&gt; 表示分配到字母 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 时，已经先给 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 中字母分配了更小标号时的贡献。&lt;/p&gt;
&lt;p&gt;注意字符集大小只有 &lt;span class=&#34;math inline&#34;&gt;\(20\)&lt;/span&gt;，可以 &lt;span class=&#34;math inline&#34;&gt;\(O(|S|\cdot 2^{|S|})\)&lt;/span&gt; 解决问题，&lt;mark&gt;注意到预处理的内容是类高维前缀最值的形式，可以递推降低复杂度&lt;/mark&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre data-line=&#34;26-28&#34; class=&#34;cpp language-cpp&#34;&gt;&lt;code data-line=&#34;26-28&#34; class=&#34;cpp language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&#34;.in&#34;, &#34;r&#34;, stdin);
    std::freopen(&#34;.out&#34;, &#34;w&#34;, stdout);
#endif
    int n;
    std::string t;
    std::cin &gt;&gt; t, n = (int)t.length(), t = &#34;#&#34; + t;
    std::vector&amp;lt;int&gt; a, tag(26, -1), s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (tag[t[i] - &#39;a&#39;] == -1)
            tag[t[i] - &#39;a&#39;] = (int)a.size(), a.push_back(t[i] - &#39;a&#39;);
        s[i] = tag[t[i] - &#39;a&#39;];
    &amp;#125;
    int m = (int)a.size(), siz = 1 &amp;lt;&amp;lt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; cnt(m, std::vector&amp;lt;int&gt; (m));
    for (int i = 1; i &amp;lt; n; ++i)
        ++cnt[s[i]][s[i + 1]];
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; g(m, std::vector&amp;lt;int&gt; (siz));
    for (int i = 0; i &amp;lt; m; ++i)
        for (int k = 0; k &amp;lt; m; ++k) // 注意这里相当于是钦定从 k 处转移
            for (int j = (1 &amp;lt;&amp;lt; k); j &amp;lt; (2 &amp;lt;&amp;lt; k); ++j) // 枚举的是 k 位为 1 的所有数；这两层循环的复杂度为 O(siz)
                g[i][j] = g[i][j ^ (1 &amp;lt;&amp;lt; k)] + cnt[i][k]; // 目的是此处的内存连续访问优化，把 ^ 看作 - 应该就能理解为什么第二维是连续的
    std::vector&amp;lt;int&gt; f(siz, inf);
    f[0] = 1;
    for (int i = 1; i &amp;lt; siz; ++i)
        for (int j = 0; j &amp;lt; m; ++j)
            if ((i &gt;&gt; j) &amp; 1)
                f[i] = std::min(f[i], f[i ^ (1 &amp;lt;&amp;lt; j)] + g[j][i]);
    std::cout &amp;lt;&amp;lt; f[siz - 1] &amp;lt;&amp;lt; &#39;\n&#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---min-max-subarrays-p&#34;&gt;D - Min Max Subarrays P&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11845&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11845&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先考虑 &lt;span class=&#34;math inline&#34;&gt;\(01\)&lt;/span&gt; 序列的答案：如果序列中存在相邻的 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，总能保证最后的一个是 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;如果序列中存在 &lt;span class=&#34;math inline&#34;&gt;\(\ge 3\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，可以牺牲其中的一些使得 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 相邻。&lt;/p&gt;
&lt;p&gt;当序列中只有 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 时，只有因为剩下的 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 不太够，导致我们无法随意『上下其手』时不能将 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 挪到一起。&lt;/p&gt;
&lt;p&gt;令两个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为序列最大值与次大值，暴搜处理序列长度较小的情况，剩下的直接用奇偶性判断两个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 取哪个。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---mst-on-line&#34;&gt;A - MST on Line++&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc167/tasks/arc167_c&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc167/tasks/arc167_c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相当于把 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 打乱然后处理原问题。考虑每个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 的贡献次数。模拟 Kruskal 连边，从小到大把点 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 加入图，&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 可以向 &lt;span class=&#34;math inline&#34;&gt;\(a_{[i-K,i+K]}\)&lt;/span&gt; 内所有连通块连边。&lt;/p&gt;
&lt;p&gt;连通块数量当且仅当 &lt;span class=&#34;math inline&#34;&gt;\([i-K,i)\)&lt;/span&gt; 内最靠右的点和 &lt;span class=&#34;math inline&#34;&gt;\((i, i+K]\)&lt;/span&gt; 内最靠左的点距离 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;K\)&lt;/span&gt; 时为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;，其余情况为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但要是从这个角度想这个题就不太好做了。正确的想法应该是&lt;mark&gt;拆分为『若 &lt;span class=&#34;math inline&#34;&gt;\([i-K,i)\)&lt;/span&gt; 中有点，贡献次数 &lt;span class=&#34;math inline&#34;&gt;\(+1\)&lt;/span&gt;』和『若 &lt;span class=&#34;math inline&#34;&gt;\((i,i+K]\)&lt;/span&gt; 中有点 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\([j-K,j)\)&lt;/span&gt; 中无点，贡献次数 &lt;span class=&#34;math inline&#34;&gt;\(+1\)&lt;/span&gt;』&lt;/mark&gt;。对于第一个问题，贡献次数将前 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 大的数分配至少一个到 &lt;span class=&#34;math inline&#34;&gt;\([i-K,i)\)&lt;/span&gt; 中的方案数；对于第二个问题，枚举 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，贡献次数为将前 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 大的数分配到 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\([1,j-K)\cup (j, n]\)&lt;/span&gt; 中的方案数。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;实现的时候千万注意循环变量枚举的是位置还是值！不然你会调得很痛苦。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;03-max-01.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::sort(a.begin() + 1, a.end());
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto A = [&amp;amp;](int n, int m) &amp;#123;
        if (n &amp;lt; m)
            return 0ll;
        return fac[n] * inv[n - m] % mod;
    &amp;#125;;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return A(n, m) * inv[m] % mod;
    &amp;#125;;
    long long res = 0ll;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j)
            (res += a[i] * (fac[n - 1] + mod - A(n - 1 - (j - std::max(1, j - k)), i - 1) * fac[n - i] % mod) % mod) %= mod;
        for (int j = 2; j &amp;lt;= n; ++j)
            (res += a[i] * C(i - 1, i - 2) % mod * C(j - std::max(1, j - k), 1) % mod * A(n - (j - std::max(1, j - k) + 1), i - 2) % mod * fac[n - i] % mod) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---existence-counting&#34;&gt;B - Existence Counting&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc174/tasks/arc174_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc174/tasks/arc174_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现可以分类讨论。假设 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;#39;\)&lt;/span&gt; 中第一个异于 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的位置为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 中位置为 &lt;span class=&#34;math inline&#34;&gt;\(pos_x\)&lt;/span&gt;（不存在则 &lt;span class=&#34;math inline&#34;&gt;\(pos_x=k+1\)&lt;/span&gt;）。令 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 为若 &lt;span class=&#34;math inline&#34;&gt;\(1\sim i-1\)&lt;/span&gt; 均相同，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 位置可选的选项数。则 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 出现的次数：&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(pos_x&amp;lt;i\)&lt;/span&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(pos_x=i\)&lt;/span&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(pos_x&amp;gt;i,i&amp;lt;k\)&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\le a_i\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(1+f_i\cdot A_{n-i}^{k-i}\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_i\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\((f_i-1)\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}+A_{n-i}^{k-i}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x&amp;gt;a_i\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_i\cdot A_{n-i}^{k-i}\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_i\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;故，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，答案为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
&amp;amp;1+\left(\sum_{i=pos_x+1}^k f_i\cdot A_{n-i}^{k-i}\right)
+\sum_{i=1}^{pos_x} (f_i-[x&amp;lt; a_i])\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}+[x&amp;lt; a_i]\cdot A_{n-i}^{k-i}\\
=&amp;amp;1+\left(\sum_{i=pos_x+1}^k f_i\cdot A_{n-i}^{k-i}\right)
+\left(\sum_{i=1}^{pos_x} f_i\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}\right)+\sum_{i=1,a_i&amp;gt; x}^{pos_x}A_{n-i}^{k-i}-C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}\\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;预处理出 &lt;span class=&#34;math inline&#34;&gt;\(f_i=\sum\limits_{j=i+1}^k [a_j&amp;lt; a_i]\)&lt;/span&gt;（需要数据结构）、&lt;span class=&#34;math inline&#34;&gt;\(g_i=\sum\limits_{j=1}^i f_j\cdot A_{n-j}^{k-j}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(h_j=\sum\limits_{j=1}^i f_i\cdot C_{k-i}^1\cdot A_{n-i-1}^{k-i-1}\)&lt;/span&gt;，再用数据结构计算 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=1,a_i&amp;gt;x}^{pos_x}C_{k-i}^1\cdot A_{n-i-1}^{k-i-1} - A_{n-i}^{k-i}\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(k + 1), p(n + 1, k + 1);
    for (int i = 1; i &amp;lt;= k; ++i)
        std::cin &amp;gt;&amp;gt; a[i], p[a[i]] = i;
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    &amp;#123;
        fac[0] = inv[0] = 1ll;
        for (int i = 1; i &amp;lt;= n; ++i)
            fac[i] = fac[i - 1] * i % mod;
        auto qkp = [](long long x, int y) &amp;#123;
            auto res(1ll);
            for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
                if (y &amp;amp; 1)
                    (res *= x) %= mod;
            return res;
        &amp;#125;;
        inv[n] = qkp(fac[n], mod - 2);
        for (int i = n - 1; i; --i)
            inv[i] = inv[i + 1] * (i + 1) % mod;
    &amp;#125;
    auto A = [&amp;amp;](int n, int m) &amp;#123;
        if (n &amp;lt; m || m &amp;lt; 0)
            return 0ll;
        return fac[n] * inv[n - m] % mod;
    &amp;#125;;
    std::vector&amp;lt;long long&amp;gt; f(k + 1), g(k + 1), h(k + 1);
    std::vector&amp;lt;long long&amp;gt; bit(n + 1);
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            (bit[x] += v) %= mod;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](int x) &amp;#123;
        auto res(0ll);
        for (; x; x -= lowbit(x))
            (res += bit[x]) %= mod;
        return res;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (p[i] == k + 1)
            add(i, 1);
    for (int i = k; i; --i)
        f[i] = ask(a[i]), add(a[i], 1);
    for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
        g[i] = (g[i - 1] + f[i] * A(n - i, k - i)) % mod;
        h[i] = (h[i - 1] + f[i] * (k - i) % mod * A(n - i - 1, k - i - 1)) % mod;
        // printf(&amp;quot;%d: f = %lld, g = %lld, h = %lld\n&amp;quot;, i, f[i], g[i], h[i]);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; res(n + 1);
    bit.assign(n + 1, 0ll);
    auto s(0ll);
    for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
        // printf(&amp;quot;%d: %lld + %lld + %lld\n&amp;quot;, a[i], 1 + g[k] - g[i], h[i], s - ask(a[i]));
        res[a[i]] = (1 + g[k] - g[i] + h[i] + (s - ask(a[i]))) % mod;
        res[a[i]] = (res[a[i]] + mod) % mod;
        (s += A(n - i, k - i) - (k - i) * A(n - i - 1, k - i - 1)) %= mod;
        add(a[i], (A(n - i, k - i) - (k - i) * A(n - i - 1, k - i - 1)) % mod);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (p[i] == k + 1) &amp;#123;
            res[i] = (h[k] + (s - ask(i))) % mod;
            res[i] = (res[i] + mod) % mod;
        &amp;#125;
    for (int x = 1; x &amp;lt;= n; ++x)
        std::cout &amp;lt;&amp;lt; res[x] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---1-loop-bubble-sort&#34;&gt;C - 1 Loop Bubble Sort&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc187/tasks/arc187_c&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc187/tasks/arc187_c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先是被考烂了的：对序列进行一次冒泡排序，等价于将序列在前缀最大值处分段，并将其从段首移到段尾；且满足排序前为前缀最大值的元素，排序后仍为前缀最大值。&lt;/p&gt;
&lt;p&gt;考虑用 DP 解决问题。注意状态要从 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 的角度出发——假如 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 中不存在 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，发现也需要 DP。此时再设计有关 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 的状态就很扯淡了，考虑令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 中直到第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 位的前缀最大值为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数。为什么把前缀最大值作为状态呢？因为它可以表示分段；同时限制段间数的取值。具体地，考虑转移：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;若令 &lt;span class=&#34;math inline&#34;&gt;\(P_i=j\)&lt;/span&gt;，则在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处分段。对应到 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 中，&lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 位是上一个前缀最大值，那么这要求 &lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}&amp;lt;j\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}\)&lt;/span&gt; 是一个前缀最大值。也即：当 &lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}\ne -1\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\gets f_{i-1, Q_{i-1}}\)&lt;/span&gt;；否则，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\gets \sum\limits_{k&amp;lt;j} f_{i-1,k}\)&lt;/span&gt;。其中，二式都要求转移来源为前缀最大值。&lt;/li&gt;
&lt;li&gt;若令 &lt;span class=&#34;math inline&#34;&gt;\(P_i&amp;lt;j\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 中恰好前移一位，即 &lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}=P_i&amp;lt;j\)&lt;/span&gt;。则当 &lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}\ne -1\)&lt;/span&gt; 时，该位确定，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\gets f_{i-1,j}\)&lt;/span&gt;；否则，&lt;span class=&#34;math inline&#34;&gt;\(Q_{i-1}\)&lt;/span&gt; 可选的值为 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;j\)&lt;/span&gt; 的所有未选数（定值，可预处理）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于初值，可以在 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 前加一个 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 作为排列的一部分（那么按照冒泡排序的规则 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 的第一位也一定是 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;）来处理就好了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; q(n + 1), t(n + 1), c(n + 1), pos(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; q[i], c[i] = c[i - 1];
        if (q[i] == -1)
            ++c[i];
        else
            pos[q[i]] = i;
    &amp;#125;
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        // printf(&amp;quot;t[%d] = %d\n&amp;quot;, i, t[i]);
        if (!pos[i])
            for (int j = i + 1; j &amp;lt;= n; ++j)
                ++t[j];
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long long&amp;gt; (n + 1)), s(n + 1, std::vector&amp;lt;long long&amp;gt; (n + 1));
    f[0][0] = 1ll;
    s[0].assign(n + 1, 1ll);
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
            if (q[i - 1] == -1)
                f[i][j] = (s[i - 1][j - 1] + f[i - 1][j] * std::max(0, 1 + t[j] - c[i - 1])) % mod;
            else if (q[i - 1] &amp;lt; j)
                f[i][j] = (f[i - 1][q[i - 1]] + f[i - 1][j]) % mod;
            s[i][j] = s[i][j - 1];
            if (q[i] == j || !pos[j]) // 满足前缀最大值
                (s[i][j] += f[i][j]) %= mod;
            // printf(&amp;quot;f[%d][%d] = %lld\n&amp;quot;, i, j, f[i][j]);
        &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n][n] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f---1.-intro&#34;&gt;(F - 1). Intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个大小为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的树，点有点权。给定 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次操作，分为两种：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;1 x&lt;/code&gt;：查询 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的点权。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 x d v&lt;/code&gt; 对于所有距 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 不超过 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的点，将它们的权值加上 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,q\le 10^5,d\le 20\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 很小，我们可能需要枚举与 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 距离 &lt;span class=&#34;math inline&#34;&gt;\(0\sim d\)&lt;/span&gt; 的点进行修改；那么对距离 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的点的更改存储在 &lt;span class=&#34;math inline&#34;&gt;\(f_{x,i}\)&lt;/span&gt;，查询 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 时就可以从 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_i f_{fa(v,i),i}\)&lt;/span&gt; 求得答案。&lt;/p&gt;
&lt;p&gt;考虑修改。记 &lt;span class=&#34;math inline&#34;&gt;\(S_{x,d}\)&lt;/span&gt; 为距 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的点集。&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 子树内是好处理的，但子树外的呢？发现 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa,d-1}\)&lt;/span&gt; 中 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 子树外的点，就是 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 子树下、&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 子树外距离 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的所有点。&lt;/p&gt;
&lt;p&gt;由于所有 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa(x,i),d-i}\)&lt;/span&gt; 无交，这可能满足我们每个待操作点被不重不漏加一次的要求。考虑将所有 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa(x,i),d-i}\)&lt;/span&gt; 标记出来：&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;1.png&#34; alt=&#34;粉色虚线框是待操作点集&#34; /&gt;&lt;figcaption&gt;粉色虚线框是待操作点集&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;然后我们可以一眼发现被叉的点和未被叉的待操作点是交错的！这意味着我们只需要再补充上所有 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa(x,i),d-i-1}\)&lt;/span&gt; 即可（显然它们之间、它们和所有 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa(x,i),d-i}\)&lt;/span&gt; 之间都不交）。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;2.png&#34; alt=&#34;虚线叉为 S_{fa(x,i),d-i-1}&#34; /&gt;&lt;figcaption&gt;虚线叉为 &lt;span class=&#34;math inline&#34;&gt;\(S_{fa(x,i),d-i-1}\)&lt;/span&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;此时就可以不重不漏。当然，也会存在一些细节：比如说 &lt;span class=&#34;math inline&#34;&gt;\(fa(x,i)\)&lt;/span&gt; 不存在之类。只需要在根节点 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 处将剩余的 &lt;span class=&#34;math inline&#34;&gt;\(S_{1,i\to 0}\)&lt;/span&gt; 全部更新即可。&lt;/p&gt;
&lt;p&gt;故每次修改操作只需要修改 &lt;span class=&#34;math inline&#34;&gt;\(O(d)\)&lt;/span&gt; 坨点。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(qd)\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f.-distance-to-the-path&#34;&gt;F. Distance to the Path&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1749/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1749/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本例中将单点修改替换为路径修改；考虑树剖解决问题。&lt;/p&gt;
&lt;p&gt;对于路径上的所有点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，容易发现只需要修改所有的 &lt;span class=&#34;math inline&#34;&gt;\(S_{u,d}\)&lt;/span&gt; 就可以完成对『&lt;strong&gt;一部分路径内侧的点&lt;/strong&gt;』的修改。这『一部分』，是因为不包括距离 LCA &lt;span class=&#34;math inline&#34;&gt;\(\le d\)&lt;/span&gt; 的点。&lt;/p&gt;
&lt;p&gt;而『&lt;strong&gt;另一部分路径内侧的点&lt;/strong&gt;（距 LCA &lt;span class=&#34;math inline&#34;&gt;\(\le d\)&lt;/span&gt;：见上一行说明）』及『&lt;strong&gt;路径外侧的点&lt;/strong&gt;（距 LCA &lt;span class=&#34;math inline&#34;&gt;\(\le d\)&lt;/span&gt;：因为路径在 LCA 子树内，LCA 能够到最远的外侧点）』，等价于『&lt;strong&gt;距 LCA &lt;span class=&#34;math inline&#34;&gt;\(\le d\)&lt;/span&gt; 的点&lt;/strong&gt;』，只需要把 LCA 代入上例中方式修改即可。&lt;/p&gt;
&lt;p&gt;修改路径上所有点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(S_{u,d}\)&lt;/span&gt; 时，可以对所有 &lt;span class=&#34;math inline&#34;&gt;\(f_{*,i}\)&lt;/span&gt; 建立数据结构，由于只需要区间修改、单点查询，使用差分树状数组即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt; 
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; siz(n + 1), dep(n + 1), fa(n + 1), son(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int faa) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != faa) &amp;#123;
                fa[i] = x, dep[i] = dep[x] + 1;
                DFS(i, x);
                siz[x] += siz[i];
                if (siz[i] &amp;gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    std::vector&amp;lt;int&amp;gt; dfn(n + 1), top(n + 1);
    DFS = [&amp;amp;](int x, int toop) &amp;#123;
        static int now = 0;
        dfn[x] = ++now, top[x] = toop;
        if (son[x])
            DFS(son[x], toop);
        for (auto i : g[x])
            if (i != fa[x] &amp;amp;&amp;amp; i != son[x])
                DFS(i, i);
        return;
    &amp;#125;;
    DFS(1, 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; bit(21, std::vector&amp;lt;long long&amp;gt; (n + 1));
    auto lowbit = [&amp;amp;](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](auto &amp;amp;bit, int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] += v;
        return;
    &amp;#125;;
    auto ask = [&amp;amp;](auto &amp;amp;bit, int x) &amp;#123;
        auto res(0ll);
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    std::cin &amp;gt;&amp;gt; m;
    for (int op; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            int x;
            std::cin &amp;gt;&amp;gt; x;
            auto res(0ll);
            for (int i = 0; i &amp;lt;= 20 &amp;amp;&amp;amp; x; ++i, x = fa[x])
                res += ask(bit[i], dfn[x]);
            std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
        else &amp;#123;
            int x, y, v, d;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; v &amp;gt;&amp;gt; d;
            for (; top[x] != top[y]; x = fa[top[x]]) &amp;#123;
                if (dep[top[x]] &amp;lt; dep[top[y]])
                    std::swap(x, y);
                add(bit[d], dfn[top[x]], v);
                add(bit[d], dfn[x] + 1, -v);
            &amp;#125;
            if (dep[x] &amp;gt; dep[y])
                std::swap(x, y);
            add(bit[d], dfn[x] + 1, v), add(bit[d], dfn[y] + 1, -v);
            for (x = x, y = d; ~y &amp;amp;&amp;amp; x; x = fa[x], --y) &amp;#123;
                add(bit[y], dfn[x], v), add(bit[y], dfn[x] + 1, -v);
                if (y &amp;amp;&amp;amp; fa[x])
                    add(bit[y - 1], dfn[x], v), add(bit[y - 1], dfn[x] + 1, -v);
            &amp;#125;
            if (x == 0)
                for (; ~y; --y)
                    add(bit[y], dfn[1], v), add(bit[y], dfn[1] + 1, -v);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---ina-of-the-mountain&#34;&gt;A - Ina of the Mountain&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1852/C&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1852/C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑这么一个简化版的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(\{a_n\}\)&lt;/span&gt;，每次可以进行区间 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，问操作多少次才能将所有元素变为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;会想到差分；对原数组进行差分，一次操作相当于令 &lt;span class=&#34;math inline&#34;&gt;\(d_l\gets d_l-1\)&lt;/span&gt; 而 &lt;span class=&#34;math inline&#34;&gt;\(d_{r+1}\gets d_{r+1}+1\)&lt;/span&gt;，最后要让 &lt;span class=&#34;math inline&#34;&gt;\(\forall \,d_i=0\)&lt;/span&gt;。那么答案就是差分数组中正数之和嘛。&lt;/p&gt;
&lt;p&gt;回到原问题。原问题等价于把上述问题变为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(\{a_n\}\)&lt;/span&gt;，每次可以进行区间 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，每个数的总操作次数对 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 取模，问操作多少次才能将所有元素变为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;怎么套回到刚刚的问题上呢？还原被取模掉的操作即可。具体来说，提前在 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 上进行若干次操作（记为操作 1），形如令 &lt;span class=&#34;math inline&#34;&gt;\(d_i\gets d_i+k\)&lt;/span&gt;，同时 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\gets d_{i+1}-k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;会发现相邻的操作 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 对一个数加加减减影响判断；发现可以合并一段连续的操作 1，表现在 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 上也就是区间 &lt;span class=&#34;math inline&#34;&gt;\(+k\)&lt;/span&gt;。此时可以发现，一个位置上只会剩下若干次 &lt;span class=&#34;math inline&#34;&gt;\(+k\)&lt;/span&gt; 或若干次 &lt;span class=&#34;math inline&#34;&gt;\(-k\)&lt;/span&gt; （否则可以把 &lt;span class=&#34;math inline&#34;&gt;\(+k\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(-k\)&lt;/span&gt; 代表的不同操作合并），就不会有互相影响一说了。这也是有的题解说可以提前在 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 上区间 &lt;span class=&#34;math inline&#34;&gt;\(+k\)&lt;/span&gt; 的原因。&lt;/p&gt;
&lt;p&gt;此时问题变为在 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 进行任意次前加 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 后减 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的操作，使得 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{d_i&amp;gt;0}d_i\)&lt;/span&gt; 最大化。那么显然如果要使代价更小，只可能在原本 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;0\)&lt;/span&gt; 的位置做加法、&lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;0\)&lt;/span&gt; 的位置做减法（其他情况会发现一定不优）。考虑两个数 &lt;span class=&#34;math inline&#34;&gt;\(d_l,d_r\)&lt;/span&gt;，可以感受到对于一个 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，选最小的 &lt;span class=&#34;math inline&#34;&gt;\(d_l\)&lt;/span&gt; 是最优的，但什么时候应该选呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(d_l\le -k,d_r\ge k\)&lt;/span&gt;：当然可选，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 被完全利用，答案减少 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(d_l&amp;gt;-k,d_r\ge k\)&lt;/span&gt;：此时 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 未被完全利用，但必须选：选择其他更大的数，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的利用率只会更低；如果不选，答案也无法减少。&lt;/p&gt;
&lt;p&gt;Q：此时是否需要尝试找到一个 &lt;span class=&#34;math inline&#34;&gt;\(l&amp;#39;&amp;lt;l\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 做操作，使得 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 重新变为负数呢？&lt;/p&gt;
A：否。因为你可以将这两次操作合并，发现相当于是直接对 &lt;span class=&#34;math inline&#34;&gt;\((l&amp;#39;,r)\)&lt;/span&gt; 做操作，是更劣的。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(d_l\le -k,d_r&amp;lt;k\)&lt;/span&gt;：此时 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 未被完全利用，&lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 成为负数。这意味着 &lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 将会成为某个 &lt;span class=&#34;math inline&#34;&gt;\(r&amp;#39;\)&lt;/span&gt; 的可选项。考察 &lt;span class=&#34;math inline&#34;&gt;\(d_{r&amp;#39;}\)&lt;/span&gt; 可用的最小值。如果 &lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 在当前不应该作为右端点，它就一定会被 &lt;span class=&#34;math inline&#34;&gt;\(d_{r&amp;#39;}\)&lt;/span&gt; 选择。具体的有点抽象，但是你可以理解为 &lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 选了 &lt;span class=&#34;math inline&#34;&gt;\(d_l\)&lt;/span&gt; 的贡献是被整合到 &lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 里的；如果 &lt;span class=&#34;math inline&#34;&gt;\(d_r\)&lt;/span&gt; 被选了就说明 &lt;span class=&#34;math inline&#34;&gt;\(d_{r&amp;#39;}\)&lt;/span&gt; 选 &lt;span class=&#34;math inline&#34;&gt;\(d_l\)&lt;/span&gt; 会拥有更大的优势。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(d_l&amp;gt;-k,d_r&amp;lt;k\)&lt;/span&gt;：和上面的情况相似；但这种情况下答案可能反而变得更大，因为没有后效性，所以至少要保证单步最优。此时不能选。&lt;/p&gt;
&lt;p&gt;说到单步最优，就会发现这里就是反悔贪心；单步最优一定是全局最优，但更靠前的局部最优可能被否定掉。而『否定』的方法表现为一次操作。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，从前往后扫，优先队列实时维护负数最小值，对于每个正数，check 选最小值是否优于当前答案，有就选。如果正数被减为负，加入队列。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, k;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
        std::vector&amp;lt;int&amp;gt; a(n + 1), d(n + 1);
        long long res(0ll);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            std::cin &amp;gt;&amp;gt; a[i], a[i] %= k;
            d[i] = a[i] - a[i - 1];
            if (d[i] &amp;gt; 0)
                (res += d[i]);
        &amp;#125;
        std::priority_queue&amp;lt;int&amp;gt; q;
        for (int i = 1; i &amp;lt;= n; ++i)
            if (d[i] &amp;lt; 0)
                q.push(-d[i]);
            else &amp;#123;
                for (; !q.empty() &amp;amp;&amp;amp; d[i] &amp;gt; 0; ) &amp;#123;
                    int x = -q.top(), y = d[i];
                    auto t(res - y);
                    x += k, y -= k;
                    if (x &amp;gt; 0)
                        t += x;
                    if (y &amp;gt; 0)
                        t += y;
                    if (t &amp;gt;= res)
                        break;
                    q.pop();
                    res = t, d[i] = y;
                    if (d[i] &amp;lt; 0)
                        q.push(-d[i]);
                &amp;#125;
            &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---miriany-and-matchstick&#34;&gt;B - Miriany and Matchstick&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1852/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1852/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从构造的角度出发，看到『恰好为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;』，会想到找到上界和下界并证明中间每一个数都能取到。&lt;/p&gt;
&lt;p&gt;但似乎很容易证伪：例如对于 &lt;code&gt;AAAA&lt;/code&gt;，下界为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，上界为 &lt;span class=&#34;math inline&#34;&gt;\(4\)&lt;/span&gt;，但有且仅有 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 取不到。但该想法并未破产——可以感受到这样的位置很少。进一步地，你 &lt;a href=&#34;https://www.luogu.com.cn/article/2mmg5rjd&#34;&gt;可以证明只有一个这样的位置&lt;/a&gt;，也可以 &lt;a href=&#34;https://www.luogu.com.cn/article/679cwjgl&#34;&gt;大胆猜想这样的位置一定出现在 &lt;span class=&#34;math inline&#34;&gt;\(l+1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(r-1\)&lt;/span&gt;&lt;/a&gt;。总之现在我们的状态就减少了（或者说状态变成 DP 值了）。预处理出这个东西之后大力搜索找方案即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n, k;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
        std::vector&amp;lt;int&amp;gt; a(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            char t;
            std::cin &amp;gt;&amp;gt; t, a[i] = (t == &amp;#39;A&amp;#39;);
            if (i &amp;gt;= 2)
                k -= (a[i] ^ a[i - 1]);
        &amp;#125;
        std::vector&amp;lt;std::array&amp;lt;std::tuple&amp;lt;int, int, int&amp;gt;, 2&amp;gt; &amp;gt; f(n + 1);
        f[n][0] = &amp;#123; a[n], a[n], 0 &amp;#125;, f[n][1] = &amp;#123; !a[n], !a[n], 0 &amp;#125;;
        auto merge = [&amp;amp;](int i, int l0, int r0, int p0, int l1, int r1, int p1) &amp;#123;
            if (l0 &amp;gt; l1)
                std::swap(l0, l1), std::swap(r0, r1), std::swap(p0, p1);
            int l = l0, r = std::max(r0, r1), p = 0;
            if (!p0 &amp;amp;&amp;amp; !p1) &amp;#123;
                if (r0 &amp;lt; l1 - 1)
                    assert(r0 == l1 - 2), p = r0 + 1;
                else;
            &amp;#125;
            else if (p0 &amp;amp;&amp;amp; p1) &amp;#123;
                if (p0 == p1)
                    p = p0;
                else &amp;#123;
                    int tag0 = (l1 &amp;lt;= p0 &amp;amp;&amp;amp; p0 &amp;lt;= r1), tag1 = (l0 &amp;lt;= p1 &amp;amp;&amp;amp; p1 &amp;lt;= r0);
                    if (!tag0 &amp;amp;&amp;amp; !tag1);
                    else if (!tag0)
                        p = p0;
                    else if (!tag1)
                        p = p1;
                    else;
                &amp;#125;
            &amp;#125;
            else if (p0) &amp;#123;
                if (l1 &amp;lt;= p0 &amp;amp;&amp;amp; p0 &amp;lt;= r1);
                else
                    p = p0;
            &amp;#125;
            else &amp;#123;
                if (l0 &amp;lt;= p1 &amp;amp;&amp;amp; p1 &amp;lt;= r0);
                else
                    p = p1;
            &amp;#125;
            assert(p != l &amp;amp;&amp;amp; p != r &amp;amp;&amp;amp; l &amp;lt;= r);
            return std::make_tuple(l, r, p);
        &amp;#125;;
        for (int i = n - 1; i; --i) &amp;#123;
            &amp;#123;
                auto [l0, r0, p0] = f[i + 1][0];
                auto [l1, r1, p1] = f[i + 1][1];
                if (a[i]) &amp;#123;
                    ++l0, ++r0, ++l1, ++r1;
                    if (p0) ++p0;
                    if (p1) ++p1;
                &amp;#125;
                ++l1, ++r1;
                if (p1) ++p1;
                f[i][0] = merge(i, l0, r0, p0, l1, r1, p1);
            &amp;#125;
            &amp;#123;
                auto [l0, r0, p0] = f[i + 1][0];
                auto [l1, r1, p1] = f[i + 1][1];
                if (!a[i]) &amp;#123;
                    ++l0, ++r0, ++l1, ++r1;
                    if (p0) ++p0;
                    if (p1) ++p1;
                &amp;#125;
                ++l0, ++r0;
                if (p0) ++p0;
                f[i][1] = merge(i, l0, r0, p0, l1, r1, p1);
            &amp;#125;
        &amp;#125;
        std::vector&amp;lt;int&amp;gt; res(n + 1);
        std::function&amp;lt;bool(int, int, int)&amp;gt; DFS = [&amp;amp;](int x, int cnt, int la) &amp;#123;
            if (x == n + 1)
                return cnt == k;
            auto [l0, r0, p0] = f[x][0];
            auto [l1, r1, p1] = f[x][1];
            if (cnt + (la == 1) + l0 &amp;lt;= k &amp;amp;&amp;amp; cnt + (la == 1) + r0 &amp;gt;= k &amp;amp;&amp;amp; (!p0 || cnt + (la == 1) + p0 != k) &amp;amp;&amp;amp; DFS(x + 1, cnt + (la == 1) + a[x], 0))
                res[x] = 0;
            else if (cnt + !la + l1 &amp;lt;= k &amp;amp;&amp;amp; cnt + !la + r1 &amp;gt;= k &amp;amp;&amp;amp; (!p1 || cnt + !la + p1 != k) &amp;amp;&amp;amp; DFS(x + 1, cnt + !la + !a[x], 1))
                res[x] = 1;
            else
                return false;
            return true;
        &amp;#125;;
        if (DFS(1, 0, -1)) &amp;#123;
            std::cout &amp;lt;&amp;lt; &amp;quot;YES\n&amp;quot;;
            for (int i = 1; i &amp;lt;= n; ++i)
                std::cout &amp;lt;&amp;lt; (res[i] ? &amp;#39;A&amp;#39; : &amp;#39;B&amp;#39;);
            std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
        else
            std::cout &amp;lt;&amp;lt; &amp;quot;NO\n&amp;quot;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="容斥原理" />
        <category term="树链剖分" />
        <category term="反悔贪心" />
        <updated>2025-05-10T02:18:21.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250505/</id>
        <title>解题报告 喝醉的兔子</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250505/"/>
        <content type="html">&lt;p&gt;老题解批量补档。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6248/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6248/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次询问，每次给定 &lt;span class=&#34;math inline&#34;&gt;\(f(0)\)&lt;/span&gt;，求最小的 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(n | f(t)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(f(t)=d\cdot f(t-1) + \Delta_t\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(n,d,l,r\)&lt;/span&gt; 为常数，&lt;span class=&#34;math inline&#34;&gt;\(\Delta_t\)&lt;/span&gt; 为你自选的 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 间的整数，每次询问独立。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(q, n\le 10^7\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果这是数论题，&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 就不会和 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 同阶了，所以这可能是一道偏模拟的题目。&lt;/p&gt;
&lt;p&gt;很容易想到建同余图（这里说的是从 &lt;span class=&#34;math inline&#34;&gt;\([0-r,0-l]\)&lt;/span&gt; 出发；这样每个点第一次被 BFS 到的时候就能确定答案了）。但如果直接把图建出来，大小就是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 级别的了。每次连的点都是连续的一段，容易想到线段树优化建图。这样就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 解决问题了。但是题目要求线性。&lt;/p&gt;
&lt;p&gt;在实现的时候一定会注意到我们会连到一些已经被访问过的点。这样的边是『无效』的——我们不能将访问过的点再次加入队列。能不能规避掉这些点呢？&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;每次被访问过的点一定是连续的、长度为 &lt;span class=&#34;math inline&#34;&gt;\(r - l + 1\)&lt;/span&gt; 的一段——有没有&lt;a href=&#34;/20250202/#texttt-aa-%E5%BC%8F%E5%AD%90%E4%B8%B2%E5%A4%84%E7%90%86&#34;&gt;联想到什么&lt;/a&gt;？类似地，给 &lt;span class=&#34;math inline&#34;&gt;\(0\sim n-1\)&lt;/span&gt; 每隔 &lt;span class=&#34;math inline&#34;&gt;\(r-l+1\)&lt;/span&gt; 打一个标记——或者说 &lt;strong&gt;分一段&lt;/strong&gt;&lt;/mark&gt;，那么每次试图访问 &lt;span class=&#34;math inline&#34;&gt;\([l_0, r_0]\)&lt;/span&gt; 时：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\([l_0,r_0]\)&lt;/span&gt; 为两个相邻段的前后缀。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\([l_0,r_0]\)&lt;/span&gt; 恰好为一段。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这时我们就发现了，每次访问的是完整的前后缀，利用前后缀和优化建图，由于边数是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的，且边权只有 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，就可以做到 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 01BFS 解决问题。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;注：常数大到必可神机跑不过&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
struct IO &amp;#123;
    static const int N = 1 &amp;lt;&amp;lt; 22;
    char buf[N], pbuf[N], *p1 = buf, *p2 = buf, *pp = pbuf;
#define gc() (p1 == p2 &amp;amp;&amp;amp; (p2 = (p1 = buf) + fread(buf, 1, N, stdin), p1 == p2) ? EOF : *p1++)
    template &amp;lt;typename T&amp;gt;
    void read(T&amp;amp; x) &amp;#123;
        x = 0;
        char ch;
        int f = 0;
        while ((ch = gc()) &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) f |= (ch == &amp;#39;-&amp;#39;);
        while (x = (x &amp;lt;&amp;lt; 1) + (x &amp;lt;&amp;lt; 3) + (ch ^ 48), (ch = gc()) &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;)
            ;
        if (f)
            x = ~x + 1;
    &amp;#125;
    void putc(char c) &amp;#123;
        if (pp - pbuf == N)
            fwrite(pbuf, 1, N, stdout), pp = pbuf;
        *pp++ = c;
    &amp;#125;
    void puts(const char* s) &amp;#123;
        while (*s) putc(*s), ++s;
        putc(&amp;#39;\n&amp;#39;);
    &amp;#125;
    template &amp;lt;typename T&amp;gt;
    void print(T x) &amp;#123;
        static int st[20];
        int tp = 0;
        if (x &amp;lt; 0)
            putc(&amp;#39;-&amp;#39;), x = ~x + 1;
        do
            st[++tp] = x % 10, x /= 10;
        while (x);
        while (tp) putc(st[tp--] + &amp;#39;0&amp;#39;);
    &amp;#125;
    ~IO() &amp;#123; fwrite(pbuf, pp - pbuf, 1, stdout); &amp;#125;
&amp;#125; io;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::freopen(&amp;quot;calculate.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;calculate.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;ex_calculator3.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (io.read(T); T--; ) &amp;#123;
        int n, l, r, m, to;
        long long d, len;
        io.read(n), io.read(d), io.read(l), io.read(r), io.read(m);
        len = r - l + 1, to = (n - 1) / len + 1;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; t(n), lid(to), rid(to);
        for (int i = 0; i &amp;lt; n; ++i)
            t[i * d % n].push_back(i);
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(3 * n);
        for (int i = 0, id = n - 1; i &amp;lt; to; ++i) &amp;#123;
            int at = ((i != to - 1 || !(n % len)) ? len : (n % len));
            lid[i].resize(at), rid[i].resize(at);
            for (int j = 0; j &amp;lt; at; ++j) &amp;#123;
                lid[i][j] = ++id;
                g[id].push_back(i * len + j);
                if (j != 0)
                    g[id].push_back(id - 1);
            &amp;#125;
            for (int j = at - 1; ~j; --j) &amp;#123;
                rid[i][j] = ++id;
                g[id].push_back(i * len + j);
                if (j != at - 1)
                    g[id].push_back(id - 1);
            &amp;#125;
        &amp;#125;
        auto add = [&amp;amp;](int p, int l0, int r0) &amp;#123;
            int p1 = l0 / len, p2 = r0 / len;
            if (p1 == p2)
                g[p].push_back(lid[p1].back());
            else &amp;#123;
                g[p].push_back(rid[p1][l0 % len]);
                if ((p1 + 1) % to != p2) &amp;#123;
                    // fprintf(stderr, &amp;quot;p1 = %d, p2 = %d, to = %d, get %d(%d)\n&amp;quot;, p1, p2, to, (p1 + 1) % to, (int)lid[(p1 + 1) % to].size());
                    g[p].push_back(lid[(p1 + 1) % to].back());
                &amp;#125;
                g[p].push_back(lid[p2][r0 % len]);
            &amp;#125;
            return;
        &amp;#125;;
        for (int i = 0; i &amp;lt; n; ++i)
            for (auto j : t[i]) &amp;#123;
                // printf(&amp;quot;%d -&amp;gt; %d[%d, %d]\n&amp;quot;, i, j, (j + n - r) % n, (j + n - l) % n);
                add(i, (j + n - r) % n, (j + n - l) % n);
            &amp;#125;
        std::list&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; q;
        std::vector&amp;lt;int&amp;gt; f(n + 1, -1), tag(3 * n + 1);
        for (int i = l, p = (n - r) % n; i &amp;lt;= r; ++i, (++p) %= n)
            f[p] = 0, q.emplace_back(p, 0), tag[p] = 1;
        for (; !q.empty(); ) &amp;#123;
            auto [u, d] = q.front();
            q.pop_front();
            if (u &amp;lt; n)
                f[u] = d;
            // printf(&amp;quot;u = %d, d = %d\n&amp;quot;, u, d);
            for (auto i : g[u]) &amp;#123;
                // printf(&amp;quot;  i = %d\n&amp;quot;, i);
                if (!tag[i]) &amp;#123;
                    if (i &amp;gt;= n)
                        q.emplace_front(i, d), tag[i] = 1;
                    else
                        q.emplace_back(i, d + 1), tag[i] = 1;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        for (int x; m--; )
            io.read(x), io.print(f[x]), io.putc(&amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;或者，发现&lt;mark&gt;每次任意标记前后缀，则一段内未访问的一定是中间的一整截&lt;/mark&gt;。根据这一点可维护每一段内可访问元素，就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; BFS；&lt;/p&gt;
&lt;p&gt;如果把图建出来了，还可以解决扩展问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假如 &lt;span class=&#34;math inline&#34;&gt;\(\Delta_i\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 间的整数中等概率取值，则最优解出现的概率？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么 BFS 不能解决该问题呢？因为同层同代价的点对共同能访问到的点的贡献不会被 BFS 记入（注意到一个点只会被一个点访问到），所以只有建图出来才能解决问题。&lt;/p&gt;
&lt;p&gt;这也侧面反映该图在忽略环后所对应的就是最优解，这其实是有点 BFS 扩展出来的意味在的。&lt;/p&gt;
</content>
        <category term="优化建图" />
        <updated>2025-05-05T00:04:36.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250430/</id>
        <title>连通图计数</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250430/"/>
        <content type="html">&lt;figure&gt;
&lt;img src=&#34;/20250430/neko.png&#34; alt=&#34;猫&#34; style=&#34;width: 75px&#34;&gt;
&lt;figcaption&gt;
猫
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;太可怕了！2025 年才过去 4 个月，正经文章的总数已经和 2024 年中正经文章的总数一样多了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;有标号无向图计数&#34;&gt;有标号无向图计数&lt;/h2&gt;
&lt;p&gt;问题模型大概如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个点，你可以在它们间任意连边，但存在限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中一个较好处理（如要求图必须是二分图）；&lt;/li&gt;
&lt;li&gt;另一个较难处理（如去重问题等）；&lt;/li&gt;
&lt;li&gt;最后，可能要求图连通。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先需要知道怎么处理这样的计数问题。以下皆建立在无重边、自环的基础上。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;先只考虑容易的限制，且不要求连通：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注：如果发现 &lt;strong&gt;不连通&lt;/strong&gt; 的时候没办法很方便地计算精确方案数（也就是说会算重），那么可以把 &lt;strong&gt;去重&lt;/strong&gt; 作为较难的限制，这一步算重就不重要了&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;该怎么求怎么求。例如，若该限制是二分图且可以算重，枚举左部点数及边，那么方案数就是 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=0}^n C_n^i\cdot C_{i\cdot (n-i)}^m\)&lt;/span&gt;。&lt;/p&gt;
这个时候需要注意到算重部分的意义是什么。比如此处，计算中一个连通块将左右部翻转后被视作不同的子图，但在全局看来对应的总图是同一个二分图。因此，对于拥有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个连通块的图，其被计算了 &lt;span class=&#34;math inline&#34;&gt;\(2^k\)&lt;/span&gt; 次。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再加上必须连通的限制，仍只考虑容易的限制：&lt;/p&gt;
&lt;p&gt;如果不存在其他限制，那么就是 &lt;a href=&#34;https://oeis.org/A001187&#34;&gt;A001187&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;连通的方案就是任意的方案减去不连通的方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任意的求法就是第一点；&lt;/li&gt;
&lt;li&gt;不连通的方案，枚举 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在子集，让其补集里面任意连边（第 1 点的子问题）且不和 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在子集相连。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接着，对连通的情况应用较难处理的限制：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;因为连通会带来一些比较好的性质简化运算，所以选择在这一步加上较难的限制&lt;/em&gt;。&lt;/p&gt;
例如，对于上文中二分图去重的例子，连通图中显然只有一个连通块，将连通图的方案 &lt;span class=&#34;math inline&#34;&gt;\(\div 2\)&lt;/span&gt; 就可以得到答案。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后，如果题目要求任意图的方案，用第三步中的答案再次算出任意图的答案。&lt;/p&gt;
&lt;p&gt;相当于是把第 2 点中的过程反过来，枚举 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在子集，在其补集中任意连边（该问的子问题）且可以和 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在的子集连边。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样就可以解决问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a---many-good-tuple-problems&#34;&gt;A - Many Good Tuple Problems&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc327/tasks/abc327_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc327/tasks/abc327_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果把一组 &lt;span class=&#34;math inline&#34;&gt;\((S_i,T_i)\)&lt;/span&gt; 看作一条边的话，原限制就可以转化为：在 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个点中连 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 条可重边，形成二分图的方案数。边有序。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;你可以发现我偷懒把这道题拿去上面举例了&lt;/del&gt;，由于边是可重的，而我们的模型要求无重边，但发现这个限制是独立于模型外的，也就是可以在最后枚举有多少条不同边，再用一点组合手段计算实际贡献。&lt;/p&gt;
&lt;p&gt;首先令 &lt;span class=&#34;math inline&#34;&gt;\(f_{0,n,m}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点、&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条边、&lt;strong&gt;不去重&lt;/strong&gt;、&lt;strong&gt;连通性任意&lt;/strong&gt; 的方案数，那么 &lt;span class=&#34;math inline&#34;&gt;\(f_{0,n,m}=\sum_{i=0}^n C_n^i\cdot C_{i\cdot (n-i)}^m\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{1,n,m}\)&lt;/span&gt; 表示 &lt;strong&gt;不去重&lt;/strong&gt;、要求 &lt;strong&gt;连通&lt;/strong&gt; 的方案，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{1,n,m}=f_{0,n,m}-\sum\limits_{i,j} C_{n - 1}^{i-1}\cdot f_{1,i,j}\cdot f_{0,n-i,m-j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{2,n,m}\)&lt;/span&gt; 表示 &lt;strong&gt;去重&lt;/strong&gt;，要求 &lt;strong&gt;连通&lt;/strong&gt; 的方案，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{2,n,m}=\dfrac {f_{1,n,m}}{2}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{3,n,m}\)&lt;/span&gt; 表示 &lt;strong&gt;去重&lt;/strong&gt;，&lt;strong&gt;连通性任意&lt;/strong&gt; 的方案数，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{3,n,m}=\sum\limits_{i,j} C_{n-1}^{i-1} \cdot f_{2,i,j} \cdot f_{3,n-i,m-j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;最后的方案数为 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j} f_{3,n,j}\cdot F(m,j)\)&lt;/span&gt;。其中 &lt;span class=&#34;math inline&#34;&gt;\(F(m,j)\)&lt;/span&gt; 表示把 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个有标号的球放在 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个有标号的盒子里，不空放的方案数，可以容斥。最后注意边反向算两种，所以乘上 &lt;span class=&#34;math inline&#34;&gt;\(2^m\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^6)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
const int inv2 = (mod + 1) &amp;gt;&amp;gt; 1;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, M, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; M, m = std::min(n * (n - 1) / 2, M);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; C(n * n + 1, std::vector&amp;lt;long long&amp;gt; (n * n + 1));
    for (int i = 0; i &amp;lt;= n * n; ++i) &amp;#123;
        C[i][0] = 1ll;
        for (int j = 1; j &amp;lt;= i; ++j)
            C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % mod;
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; &amp;gt; f(4, std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; (n + 1, std::vector&amp;lt;long long&amp;gt; (m + 1)));
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 0; j &amp;lt;= m &amp;amp;&amp;amp; j &amp;lt;= i * (i - 1) / 2; ++j)
            for (int k = 0; k &amp;lt;= i; ++k)
                (f[0][i][j] += C[i][k] * C[k * (i - k)][j]) %= mod;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 0; j &amp;lt;= m; ++j) &amp;#123;
            auto t(0ll);
            for (int k = 1; k &amp;lt;= i; ++k)
                for (int l = 0; l &amp;lt;= j; ++l)
                    (t += C[i - 1][k - 1] * f[1][k][l] % mod * f[0][i - k][j - l]) %= mod;
            f[1][i][j] = (f[0][i][j] + mod - t) % mod;
            f[2][i][j] = f[1][i][j] * inv2 % mod;
        &amp;#125;
    f[3][0][0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 0; j &amp;lt;= m; ++j)
            for (int k = 1; k &amp;lt;= i; ++k)
                for (int l = 0; l &amp;lt;= j; ++l)
                    (f[3][i][j] += C[i - 1][k - 1] * f[2][k][l] % mod * f[3][i - k][j - l]) %= mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    std::vector&amp;lt;long long&amp;gt; F(m + 1);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        F[i] = qkp(i, M);
        for (int j = 1, p = mod - 1; j &amp;lt; m; ++j, p = mod - p)
            (F[i] += p * C[i][j] % mod * qkp(i - j, M)) %= mod;
    &amp;#125;
    auto res(0ll);
    for (int j = 1; j &amp;lt;= m; ++j)
        (res += f[3][n][j] * F[j]) %= mod;
    std::cout &amp;lt;&amp;lt; res * qkp(2, M) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b---many-mst&#34;&gt;B - Many MST&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc386/tasks/abc386_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc386/tasks/abc386_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意到 MST 和连通块的隐含联系。按照 Kruskal 的生成方式可以发现只需要在合并两个连通块时加上它们之间连边中最小的边权就可以得到 MST。&lt;/p&gt;
&lt;p&gt;因此容易想到在 DP 时对最小边权进行限制；枚举 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，让边权 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt; 成为简单限制；让求解 MST 成为某种意义上的较难限制。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{0,n,k}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点，边权 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt;、&lt;strong&gt;对连通性没有要求&lt;/strong&gt; 的方案数；相应地，&lt;span class=&#34;math inline&#34;&gt;\(f_{1,n,k}\)&lt;/span&gt; 表示 &lt;strong&gt;要求连通&lt;/strong&gt; 的方案数，则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{0,n,k}=\sum\limits_i C_{n-1}^{i-1}\cdot f_{1,i,k-1} \cdot f_{0,n-i,k}\cdot (M-k+1)^{i\times(n-i)}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;注解：式子正确性建立在 &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在 的由权值 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;k\)&lt;/span&gt; 的边构成的最大连通块 大小为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;&lt;/strong&gt; 的基础之上，故两个连通块之间的边权只能 &lt;span class=&#34;math inline&#34;&gt;\(\ge k\)&lt;/span&gt;。这也提醒我们，此处的 &lt;strong&gt;不连通&lt;/strong&gt; 含义实际上是给这些边一个 &lt;span class=&#34;math inline&#34;&gt;\((M-k)\)&lt;/span&gt; 的系数。&lt;/p&gt;
那么这样你会注意到，&lt;span class=&#34;math inline&#34;&gt;\(f_0\)&lt;/span&gt; 的意义就与 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 无关了（那么显然值也与 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 无关），但是仍然保留 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 对思考有帮助，故留之。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_{1,n,k}=f_{0, n, k} - \sum\limits_i C_{n - 1}^{i-1} \cdot f_{1,i,k}\cdot f_{0,n-i,k}\times (M-k)^{i\times (n - i)}\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(g_{0, n, k}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点、边权 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt;、&lt;strong&gt;对连通性没有要求&lt;/strong&gt; 的 MST 之和；相应地，&lt;span class=&#34;math inline&#34;&gt;\(g_{1,n,k}\)&lt;/span&gt; 表示对应条件下 &lt;strong&gt;要求连通&lt;/strong&gt; 的 MST 之和。则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(g_{0,n,k}=\sum\limits_{i} C_{n-1}^{i-1}\cdot (f_{1,i,k - 1}\cdot g_{0,n-i,k}+g_{1,i,k - 1} \cdot f_{0,n-i,k}+f_{1,i,k-1}\cdot f_{0,n-i,k}\cdot k)\cdot (M-k+1)^{i\times (n-i)}\)&lt;/span&gt;。&lt;/p&gt;
注解：类比 &lt;span class=&#34;math inline&#34;&gt;\(f_0\)&lt;/span&gt; 的计算方式得到 &lt;span class=&#34;math inline&#34;&gt;\(g_0\)&lt;/span&gt;。在 &lt;span class=&#34;math inline&#34;&gt;\(i\times (n-i)\)&lt;/span&gt; 中任选一条作为 MST 上权值为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的边，故有 &lt;span class=&#34;math inline&#34;&gt;\(f_{1,i,k-1}\cdot f_{0,n-i,k}\cdot k\)&lt;/span&gt;。之所以必须要求有这么一条边是为了和 &lt;span class=&#34;math inline&#34;&gt;\(g_{k-1}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(g_{k+1}\)&lt;/span&gt; 等区分。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(g_{1,n,k}=g_{0,n,k}-\sum\limits_i C_{n-1}^{i-1}\cdot (f_{1,i,k}\cdot g_{0,n-i,k}+g_{1,i,k}\cdot f_{0,n-i,k}+f_{1,i,k}\cdot f_{0,n-i,k}\cdot k)\cdot (M-k)^{i\times (n-i)}\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2\cdot M)\)&lt;/span&gt;。要求预处理幂，不然会 T。以及可能需要把 &lt;span class=&#34;math inline&#34;&gt;\(f_0,f_1,g_0,g_1\)&lt;/span&gt; 放在同一个内层循环求，不然会卡常；&lt;del&gt;在此基础上使用内存连续访问优化似乎并不明显&lt;/del&gt; &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int N, M;
    std::cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; M;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    crr f(2, brr(N + 1, arr(M + 1))), g(2, brr(N + 1, arr(M + 1)));
    brr C(N + 1, arr(N + 1)), p(M + 1, arr(N * N + 1));
    for (int i = 0; i &amp;lt;= M; ++i) &amp;#123;
        p[i][0] = 1ll;
        for (int j = 1; j &amp;lt;= N * N; ++j)
            p[i][j] = p[i][j - 1] * i % mod;
    &amp;#125;
    for (int i = 0; i &amp;lt;= N; ++i) &amp;#123;
        C[i][0] = 1ll;
        for (int j = 1; j &amp;lt;= i; ++j)
            C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % mod;
    &amp;#125;
    f[1][0][0] = f[1][1][0] = 1ll;
    for (int n = 1; n &amp;lt;= N; ++n)
        for (int k = 1; k &amp;lt;= M; ++k) &amp;#123;
            f[0][n][k] = f[1][n][k - 1];
            for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
                (f[0][n][k] += C[n - 1][i - 1] * f[1][i][k - 1] % mod * f[0][n - i][k] % mod * p[M - k + 1][i * (n - i)]) %= mod;
                (f[1][n][k] += mod - C[n - 1][i - 1] * f[1][i][k] % mod * f[0][n - i][k] % mod * p[M - k][i * (n - i)] % mod) %= mod;
            &amp;#125;
            (f[1][n][k] += f[0][n][k]) %= mod;
        &amp;#125;
    for (int n = 1; n &amp;lt;= N; ++n)
        for (int k = 1; k &amp;lt;= M; ++k) &amp;#123;
            g[0][n][k] = g[1][n][k - 1];
            for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
                (g[0][n][k] += (f[1][i][k - 1] * g[0][n - i][k] % mod + g[1][i][k - 1] * f[0][n - i][k] % mod + f[1][i][k - 1] * f[0][n - i][k] % mod * k) % mod * C[n - 1][i - 1] % mod * p[M - k + 1][i * (n - i)]) %= mod;
                (g[1][n][k] += mod - (f[1][i][k] * g[0][n - i][k] % mod + g[1][i][k] * f[0][n - i][k] % mod + f[1][i][k] * f[0][n - i][k] % mod * k) % mod * C[n - 1][i - 1] % mod * p[M - k][i * (n - i)] % mod) %= mod;
            &amp;#125;
            (g[1][n][k] += g[0][n][k]) %= mod;
        &amp;#125;
    // for (int n = 1; n &amp;lt;= N; ++n)
    //     for (int k = 1; k &amp;lt;= M; ++k) &amp;#123;
    //         printf(&amp;quot;f[0][%d][%d] = %lld\n&amp;quot;, n, k, f[0][n][k]);
    //         printf(&amp;quot;f[1][%d][%d] = %lld\n&amp;quot;, n, k, f[1][n][k]);
    //         printf(&amp;quot;g[0][%d][%d] = %lld\n&amp;quot;, n, k, g[0][n][k]);
    //         printf(&amp;quot;g[1][%d][%d] = %lld\n&amp;quot;, n, k, g[1][n][k]);
    //     &amp;#125;
    std::cout &amp;lt;&amp;lt; g[1][N][M] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;有标号-dag-计数&#34;&gt;有标号 DAG 计数&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个点，你可以在它们间任意连边，要求最后图为 DAG，可能要求图弱连通。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果说无向图计数关键在于连通块，那么 DAG 在此基础上关键在于入度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的点集。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f(i)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个点的 DAG 的答案；&lt;span class=&#34;math inline&#34;&gt;\(g_{0, i,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个点的 DAG，其中 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个入度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的方案，不难想到容斥：令 &lt;span class=&#34;math inline&#34;&gt;\(g_{1,i,j}\)&lt;/span&gt; 表示至少 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个的方案，那么：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
g_{1,i,j}=C_i^j\times f(i-j)\times 2^{j\times (i-j)}\\
g_{0,i,j}=\sum_{k=j}^i (-1)^{k-j}\cdot C_k^j\cdot g_{1,i,j}\\
f(i)=\sum_{j=1}^i g_{0,i,j}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;整理有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f(i)
&amp;amp;=\sum_{j=1}^i \sum_{k=j}^i (-1)^{k-j}\cdot C_k^j\cdot g_{1,i,k}\\
&amp;amp;=\sum_{k=1}^i (-1)^k\cdot g_{1,i,k}\cdot \sum_{j=1}^k (-1)^j\cdot C_k^j\\
&amp;amp;=\sum_{k=1}^i (-1)^k\cdot g_{1,i,k}\cdot (0^k-1)\\
&amp;amp;=\sum_{k=1}^i (-1)^{k+1}\cdot C_i^k\times f(i-k)\times 2^{(i-k)}
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;即得递推式。如果要求连通仿照无向图连通的方法，用任意减去不连通即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c---amusement-park&#34;&gt;C - Amusement Park&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1193/A&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1193/A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先考虑计算方案数。枚举 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 所在子集，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f(S)=\sum\limits_{T\in S} (-1)^{|T|+1}\cdot f(S - T)\)&lt;/span&gt;。相较于一般的 DAG 计数，因为每条边取不取是固定的，所以没有了 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的次幂的系数；同时因为直接枚举子集，所以没有了组合系数。&lt;/p&gt;
&lt;p&gt;注意此处 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 可构成一轮新的入度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的点集当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 之内没有连边，即 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 为独立集。&lt;/p&gt;
&lt;p&gt;算出方案数后如何算答案呢？发现对于一种合法的方案，把里面所有的边反向一定唯一对应另一种合法方案，两种方案取反边数相加为 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;；那么给所有方案除以 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;，再乘上 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 就能得到答案。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(3^n)\)&lt;/span&gt;。需要提前把每个点集是否独立预处理下来。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353, inv2 = (mod + 1) &amp;gt;&amp;gt; 1;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; g(n + 1);
    for (int i = 1, x, y; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x] |= (1 &amp;lt;&amp;lt; (y - 1));
        g[y] |= (1 &amp;lt;&amp;lt; (x - 1));
    &amp;#125;
    auto check = [&amp;amp;](int s) &amp;#123;
        for (int i = 1; i &amp;lt;= n; ++i)
            if ((s &amp;gt;&amp;gt; (i - 1)) &amp;amp; 1)
                if (s &amp;amp; g[i])
                    return false;
        return true;
    &amp;#125;;
    int siz = 1 &amp;lt;&amp;lt; n;
    std::vector&amp;lt;int&amp;gt; tag(siz);
    for (int i = 0; i &amp;lt; siz; ++i)
        tag[i] = check(i);
    std::vector&amp;lt;long long&amp;gt; f(siz);
    f[0] = 1ll;
    for (int i = 1; i &amp;lt; siz; ++i)
        for (int j = i; j; j = (j - 1) &amp;amp; i)
            if (tag[j])
                (f[i] += ((__builtin_popcount(j) &amp;amp; 1) ? 1 : mod - 1) * f[i ^ j]) %= mod;
    std::cout &amp;lt;&amp;lt; f[siz - 1] * inv2 % mod * m % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d---balance-scale&#34;&gt;D - Balance Scale&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc306/tasks/abc306_h&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc306/tasks/abc306_h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以发现，如果将被 &lt;code&gt;=&lt;/code&gt; 连起来的点缩起来，就可以转化成上一个问题。但枚举被缩的点集显然是不能通过的，这里介绍一种方法。&lt;/p&gt;
&lt;p&gt;不把缩点放在开头。在上一题中的 DP 式子 &lt;span class=&#34;math inline&#34;&gt;\(f(S)=\sum\limits_{T\in S} (-1)^{|T|+1}\cdot f(S - T)\)&lt;/span&gt; 中，考虑和我们最终的答案有什么差异：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;在现在的问题中，有的边是可以不选的！考虑这会给容斥带来怎样的影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先应该知道一件事情：你决定把一部分点缩到一起，当且仅当它们全部由 &lt;code&gt;=&lt;/code&gt; 连接。要让一些边加入 DP，也就是让它们不是 &lt;code&gt;=&lt;/code&gt;，当且仅当它们成为连通块的『割』——把连通块分成多个连通块。这种情况显然已经由另一条路径转移过了。也就是说，就用这个式子可以得到所有答案。 1. 另一个问题，在上一题中，我们可以轻易地判断 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 是否为独立集；但在本问中，不是独立集的点集也可能缩点成为独立集。&lt;/p&gt;
&lt;p&gt;发现有一种唯一方法，就是使 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 中位于同一连通块的点缩到一起；所以应该将 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 的次数替换为 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 所在连通块个数 &lt;span class=&#34;math inline&#34;&gt;\(+1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;注意这里说的连通块是 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的导出子图中的连通块。&lt;/p&gt;
&lt;p&gt;这也启示我们不要把缩点和图的连通性等等关联得太死，需要把点等价的场景都可能用到缩点。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353, inv2 = (mod + 1) &amp;gt;&amp;gt; 1;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; fa(n + 1);
    std::function&amp;lt;int(int)&amp;gt; find = [&amp;amp;](int x) &amp;#123;
        return fa[x] == x ? x : fa[x] = find(fa[x]);
    &amp;#125;;
    auto merge = [&amp;amp;](int x, int y) &amp;#123;
        fa[find(x)] = find(y);
        return;
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    for (int x, y; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    int siz = 1 &amp;lt;&amp;lt; n;
    std::vector&amp;lt;int&amp;gt; cnt(siz);
    for (int i = 0; i &amp;lt; siz; ++i) &amp;#123;
        std::iota(fa.begin(), fa.end(), 0);
        std::vector&amp;lt;int&amp;gt; tag(n + 1);
        for (int j = 1; j &amp;lt;= n; ++j)
            if ((i &amp;gt;&amp;gt; (j - 1)) &amp;amp; 1)
                for (auto k : g[j])
                    if ((i &amp;gt;&amp;gt; (k - 1)) &amp;amp; 1)
                        merge(k, j);
        for (int j = 1; j &amp;lt;= n; ++j)
            if ((i &amp;gt;&amp;gt; (j - 1)) &amp;amp; 1)
                cnt[i] += (fa[j] == j);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; f(siz);
    f[0] = 1ll;
    for (int i = 1; i &amp;lt; siz; ++i)
        for (int j = i; j; j = (j - 1) &amp;amp; i)
            if (cnt[j])
                (f[i] += ((cnt[j] &amp;amp; 1) ? 1 : mod - 1) * f[i ^ j]) %= mod;
    std::cout &amp;lt;&amp;lt; f[siz - 1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e---主旋律&#34;&gt;E - 主旋律&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11714&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11714&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;即，给定一个有向图，问边集有多少个子集是强连通的。&lt;/p&gt;
&lt;p&gt;再次涉及到了连通性问题，但在这里需要结合 SCC 缩点来考虑。容易发现强连通即缩出来是一个点；故需要关注缩出来的点数。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f(S)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的导出子图内合法边子集的数量，&lt;span class=&#34;math inline&#34;&gt;\(g(S)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的导出子图中非法边子集的数量；&lt;span class=&#34;math inline&#34;&gt;\(h(S,k)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的导出子图中边的子集缩出来有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个点的数量， 令 &lt;span class=&#34;math inline&#34;&gt;\(E(S_1, S_2)\)&lt;/span&gt; 表示从 &lt;span class=&#34;math inline&#34;&gt;\(S_1\)&lt;/span&gt; 指向 &lt;span class=&#34;math inline&#34;&gt;\(S_2\)&lt;/span&gt; 的边数，则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(S) = 2^{E(S,S)}-g(S)\\
g(S)=\sum_{T \subseteq S}2^{E(T, S - T)}\cdot 2^{E(T, T)}\cdot \sum_{k=1+[T=\varnothing]} (-1)^{k+1}\cdot h(S - T, k)\\
h(S, k) = \sum_{T\subset S} f(T) \cdot h(S - T, k-1)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注意为什么要用一个 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 来转移 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 呢？我们发现 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 的次数和缩出来的点数是有关的，而光凭 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 无法表示点数信息，所以需要用 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 来搭个桥。&lt;/p&gt;
&lt;p&gt;直接 DP，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\cdot 3^n)\)&lt;/span&gt;。&lt;/p&gt;
</content>
        <category term="计数" />
        <updated>2025-04-30T02:31:11.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250421/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250421/"/>
        <content type="html">&lt;figure&gt;
&lt;img src=&#34;/20250421/neko.png&#34; alt=&#34;猫&#34; style=&#34;width: 75px&#34;&gt;
&lt;figcaption&gt;
猫
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---t-shirt&#34;&gt;A - T-shirt&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/183/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/183/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果知道一个衣服序列，怎么算出期望呢？&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---two-melodies&#34;&gt;B - Two Melodies&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/813/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/813/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示第一个以 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 结尾，第二个以 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 结尾的方案数，就会有一个弊端——假设现在有 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;gt;j\)&lt;/span&gt;，又假设有 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;lt;j&amp;#39;&amp;lt;i\)&lt;/span&gt;，那么就不可以直接把 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 转移到 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j&amp;#39;}\)&lt;/span&gt;，因为 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt; 可能已经被第一个选过了。但如果从 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 转移就没有这样的问题（不管 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;\)&lt;/span&gt; 是比 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 大还是比 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 小）。&lt;/p&gt;
&lt;p&gt;那就可以固定从较大的一维转移，也可以枚举所有情况。但是这样就会有一个问题，这是一个 &lt;span class=&#34;math inline&#34;&gt;\(n^3\)&lt;/span&gt; 的过程，而且对于不单调的内层 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，维护它的数值只能用带 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 的数据结构优化，似乎不太过得了；但 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 却可以前缀优化。&lt;/p&gt;
&lt;p&gt;其实，两个组是无序的，这意味着可以强制 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;gt;j\)&lt;/span&gt; 再从 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 转移；这个时候转移就和 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 没有太大的关系了，可以把 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 放到外层，对 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 前缀优化。可能需要注意边界的处理。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, res = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
    for (int j = 0; j &amp;lt; n; ++j) &amp;#123;
        std::vector&amp;lt;int&amp;gt; mx(100002), mmx(7);
        for (int i = 1; i &amp;lt; j; ++i) &amp;#123;
            mx[a[i]] = std::max(mx[a[i]], f[j][i]);
            mmx[a[i] % 7] = std::max(mmx[a[i] % 7], f[j][i]);
        &amp;#125;
        for (int i = j + 1; i &amp;lt;= n; ++i) &amp;#123;
            f[i][j] = std::max(&amp;#123; !!i + !!j, mx[a[i] - 1] + 1, mx[a[i] + 1] + 1, mmx[a[i] % 7] + 1, f[j][0] + 1 &amp;#125;);
            mx[a[i]] = std::max(mx[a[i]], f[i][j]);
            mmx[a[i] % 7] = std::max(mmx[a[i] % 7], f[i][j]);
            // printf(&amp;quot;f[%d][%d] = %d\n&amp;quot;, i, j, f[i][j]);
            res = std::max(res, f[i][j]);
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cf633f-the-chocolate-spree&#34;&gt;CF633F The Chocolate Spree&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/633/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/633/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;树形 DP 求直径的时候，有一种方法是找到每个点下面的最大两条不交链。&lt;/p&gt;
&lt;p&gt;这里也可以有类似的求法。假设答案出现在子树 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 中（下面的 &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; 都是 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的直接儿子），可以讨论 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 参与构成两条路径的情况：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;不参与构成任何一条路径，答案是 &lt;span class=&#34;math inline&#34;&gt;\(v_1,v_2\)&lt;/span&gt; 子树中的最长路径之和。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参与构成其中一条：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;这一条与子树 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 完全相离，答案是 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 中最长路径，和 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下面不经过 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的最大两条不交链。&lt;/li&gt;
&lt;li&gt;这一条有一支来自 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 子树，但和 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 中最长路径没有重合的点。答案是 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的点权、&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下面不经过 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的最大链、&lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 中一条路径（不经过 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;）和 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 下面一条链之和的最大值；&lt;/li&gt;
&lt;li&gt;这一条两支都来自 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 子树：有重合，不可能发生。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参与构成其中两条，答案是 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下面最长的四条链：路径重复经过 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，不可能发生。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以记录 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下方最大的四条不交链、&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 中选取一条不经过 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的路径和 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下方一条链之和的最大值、&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 中最长路径求解。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp language-cpp&#34; data-line=&#34;42-44&#34;&gt;&lt;code class=&#34;cpp langauage-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&#34;.in&#34;, &#34;r&#34;, stdin);
    std::freopen(&#34;.out&#34;, &#34;w&#34;, stdout);
#endif
    int n;
    std::cin &gt;&gt; n;
    std::vector&amp;lt;int&gt; a(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; g(n + 1);
    for (int i = 1; i &lt;= n; ++i)
        std::cin &gt;&gt; a[i];
    for (int i = 1, x, y; i &lt; n; ++i) &amp;#123;
        std::cin &gt;&gt; x &gt;&gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    auto res(0ll);
    std::vector&amp;lt;long long&gt; s(n + 1), w(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;long long, int&gt; &gt; &gt; f(n + 1, std::vector&amp;lt;std::pair&amp;lt;long long, int&gt; &gt; (4));
    std::function&amp;lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &amp;#123;
        f[x][0] = &amp;#123; 0, x &amp;#125;;
        w[x] = s[x] = a[x];
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                &amp;#123;
                    if (f[i][0].first + a[i] &gt; f[x][3].first)
                        f[x][3].first = f[i][0].first + a[i], f[x][3].second = i;
                    std::sort(f[x].begin(), f[x].end(), std::greater&amp;lt;std::pair&amp;lt;long long, int&gt; &gt; ());
                &amp;#125;
                w[x] = std::max(w[x], w[i] + a[x]);
            &amp;#125;
        auto mx(0ll);
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                s[x] = std::max(&amp;#123; s[x], s[i], f[x][0].first + f[x][1].first + a[x] &amp;#125;);
                w[x] = std::max(w[x], (f[x][0].second != i ? f[x][0] : f[x][1]).first + s[i] + a[x]);
                res = std::max(&amp;#123; res,
                    mx + s[i], // 情况 1
                    (f[x][0].second == i ? f[x][1].first + f[x][2].first : (f[x][1].second == i ? f[x][0].first + f[x][2].first : f[x][0].first + f[x][1].first)) + s[i] + a[x], // 情况 2.1
                    (f[x][0].second == i ? f[x][1].first : f[x][0].first) + w[i] + a[x], // 情况 2.2
                &amp;#125;);
                mx = std::max(mx, s[i]);
            &amp;#125;
    //     printf(&#34;%d: res = %lld\n  f: \n&#34;, a[x], res);
    //     for (int i = 0; i &lt; 4; ++i)
    //         printf(&#34;    [%d] %lld\n&#34;, f[x][i].second, f[x][i].first);
    //     printf(&#34;  s: %lld\n  w: %lld\n&#34;, s[x], w[x]);
    &amp;#125;;
    DFS(1, -1);
    std::cout &lt;&lt; res &lt;&lt; &#39;\n&#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---巡逻&#34;&gt;C - 巡逻&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3629&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3629&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可能需要注意：目的是遍历所有边而非所有点。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(K=1\)&lt;/span&gt; 的时候，环上除了关键边的所有边经过次数会减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。所以选树的直径就可以最优。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(K=2\)&lt;/span&gt; 的时候，答案是 &lt;span class=&#34;math inline&#34;&gt;\(2\times (m + 2)\)&lt;/span&gt; 减去两个边构成的环的 &lt;em&gt;并集减交集&lt;/em&gt; 大小 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;。环实际上是不存在的，&lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 其实是两条路径 &lt;em&gt;并集减交集&lt;/em&gt; 再加上两条新边的值。&lt;/p&gt;
&lt;p&gt;两条路径有交的时候，可以等效成无交的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;就化归成上一个问题了。注意此时情况 3 可能发生；同时情况 2.2 可以选取经过 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的路径。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp language-cpp&#34; data-line=&#34;55-56,64-67&#34;&gt;&lt;code class=&#34;cpp langauage-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&#34;.in&#34;, &#34;r&#34;, stdin);
    std::freopen(&#34;.out&#34;, &#34;w&#34;, stdout);
#endif
    int n, k;
    std::cin &gt;&gt; n &gt;&gt; k;
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; g(n + 1);
    for (int i = 1, x, y; i &lt; n; ++i) &amp;#123;
        std::cin &gt;&gt; x &gt;&gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    int res = 0;
    if (k == 1) &amp;#123;
        std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&gt; &gt; &gt; f(n + 1, std::vector&amp;lt;std::pair&amp;lt;int, int&gt; &gt; (2));
        std::function&amp;lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &amp;#123;
            f[x][0] = &amp;#123; 0, x &amp;#125;;
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    DFS(i, x);
                    &amp;#123;
                        if (f[i][0].first + 1 &gt; f[x][1].first)
                            f[x][1].first = f[i][0].first + 1, f[x][1].second = i;
                        std::sort(f[x].begin(), f[x].end(), std::greater&amp;lt;std::pair&amp;lt;int, int&gt; &gt; ());
                    &amp;#125;
                &amp;#125;
            res = std::max(res, f[x][0].first + f[x][1].first);
        &amp;#125;;
        DFS(1, -1);
        std::cout &lt;&lt; 2 * n - res - 1 &lt;&lt; &#39;\n&#39;;
    &amp;#125;
    else &amp;#123;
        std::vector&amp;lt;int&gt; s(n + 1), w(n + 1);
        std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&gt; &gt; &gt; f(n + 1, std::vector&amp;lt;std::pair&amp;lt;int, int&gt; &gt; (4));
        std::function&amp;lt;void(int, int)&gt; DFS = [&amp;](int x, int fa) &amp;#123;
            f[x][0] = &amp;#123; 0, x &amp;#125;;
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    DFS(i, x);
                    &amp;#123;
                        if (f[i][0].first + 1 &gt; f[x][3].first)
                            f[x][3].first = f[i][0].first + 1, f[x][3].second = i;
                        std::sort(f[x].begin(), f[x].end(), std::greater&amp;lt;std::pair&amp;lt;int, int&gt; &gt; ());
                    &amp;#125;
                    w[x] = std::max(w[x], w[i] + 1);
                &amp;#125;
            &amp;#123;
                int t = 0;
                for (auto [v, id] : f[x])
                    t += v;
                res = std::max(res, t); // 情况 3
                w[x] = std::max(w[x], t - f[x][3].first); // 路径可经过 u
            &amp;#125;
            int mx = 0;
            for (auto i : g[x])
                if (i != fa) &amp;#123;
                    s[x] = std::max(&amp;#123; s[x], s[i], f[x][0].first + f[x][1].first &amp;#125;);
                    w[x] = std::max(w[x], (f[x][0].second != i ? f[x][0] : f[x][1]).first + std::max(s[i], f[i][0].first + 1));
                    res = std::max(&amp;#123; res,
                        mx + s[i], // 情况 1
                        (f[x][0].second == i ? f[x][1].first + f[x][2].first : (f[x][1].second == i ? f[x][0].first + f[x][2].first : f[x][0].first + f[x][1].first)) + s[i], // 情况 2.1
                        (f[x][0].second == i ? f[x][1].first : f[x][0].first) + w[i] + 1, // 情况 2.2
                    &amp;#125;);
                    mx = std::max(mx, s[i]);
                &amp;#125;
        &amp;#125;;
        DFS(1, -1);
        std::cout &lt;&lt; 2 * (n + 1) - res - 2 &lt;&lt; &#39;\n&#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---瞬间传送-teleport&#34;&gt;D - 瞬间传送 / Teleport&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11915&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11915&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要观察到一个很厉害的贪心策略：如果钦定所有点的距离不大于 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，且存在 &lt;span class=&#34;math inline&#34;&gt;\(d(i,j)&amp;gt;r\)&lt;/span&gt;。&lt;strong&gt;假设&lt;/strong&gt; 一种满足条件的新边是 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;（由于两者无序，不妨钦定 &lt;span class=&#34;math inline&#34;&gt;\(d(i,u)&amp;lt;d(i,v)\)&lt;/span&gt;），可以进行讨论：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(d(j,v)&amp;lt;d(j,u)\)&lt;/span&gt;：&lt;/p&gt;
此时最优路径为 &lt;span class=&#34;math inline&#34;&gt;\(i\to u\to v\to j\)&lt;/span&gt;，判断一下这种方案是否不大于 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 就可以了。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(d(j,v)\ge d(j, u)\)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;此时不管是走 &lt;span class=&#34;math inline&#34;&gt;\(i\to u\to v\to j\)&lt;/span&gt; 还是 &lt;span class=&#34;math inline&#34;&gt;\(i\to v\to u\to j\)&lt;/span&gt; 都不如走已经存在的 &lt;span class=&#34;math inline&#34;&gt;\(i\to u\to j\)&lt;/span&gt; 这条路径，也就是说如果要走新边，代价是一定比原距离大，更是比 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 大的；也就是说，&lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt; 不能解决 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 之间的问题，假设就不成立了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上，只需要判断 &lt;span class=&#34;math inline&#34;&gt;\(i\to u\to v\to j\le r\)&lt;/span&gt; 是否成立，就可以判断 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt; 是否合法。从大到小枚举 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，同时维护当前依然合法的 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;（显然是有单调性的），对于不合法的 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt;，枚举每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，维护 &lt;span class=&#34;math inline&#34;&gt;\(\max\{d(v,j)\}\)&lt;/span&gt;，精细实现（主要是利用各种均摊）一下就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这里具体提一下需要摊的几个点：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;枚举到 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的时候用所有 &lt;span class=&#34;math inline&#34;&gt;\(d(i,j)=r+1\)&lt;/span&gt; 把 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处的最大 &lt;span class=&#34;math inline&#34;&gt;\(d(v,j)\)&lt;/span&gt; 更新，方便后面 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 地 check。摊出来是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt; 的。&lt;/li&gt;
&lt;li&gt;枚举仍然处在合法队列里的 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;，如果 check 合法，就说明对于当前 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 至少存在一个合法解，就可以 &lt;code&gt;break&lt;/code&gt; 了；否则，把 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt; 弹出，继续 check 下一条边。这样每条边只会被弹出一次，而未弹出边的 check 次数最多是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;；加上 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的 check，摊出来是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt; 的。&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1, inf));
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                char t;
                std::cin &amp;gt;&amp;gt; t;
                if (t == &amp;#39;1&amp;#39; || i == j)
                    g[i][j] = t - &amp;#39;0&amp;#39;;
            &amp;#125;
        for (int k = 1; k &amp;lt;= n; ++k)
            for (int i = 1; i &amp;lt;= n; ++i)
                if (i != k)
                    for (int j = 1; j &amp;lt;= n; ++j)
                        if (j != i &amp;amp;&amp;amp; j != k)
                            g[i][j] = std::min(g[i][j], g[i][k] + g[k][j]);
        std::queue&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; q;
        std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; p(n + 1);
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; mx(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
        for (int i = 1; i &amp;lt; n; ++i)
            for (int j = i + 1; j &amp;lt;= n; ++j) &amp;#123;
                q.emplace(i, j);
                p[g[i][j] - 1].emplace_back(i, j);
            &amp;#125;
        auto check = [&amp;amp;](int u, int v, int r) &amp;#123;
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                if (g[u][i] &amp;gt; g[v][i])
                    std::swap(u, v);
                if (g[u][i] + mx[v][i] &amp;gt; r)
                    return false;
            &amp;#125;
            return true;
        &amp;#125;;
        for (int r = n; r &amp;gt;= -1; --r) &amp;#123;
            for (auto [i, j] : p[r])
                for (int v = 1; v &amp;lt;= n; ++v) &amp;#123;
                    mx[v][i] = std::max(mx[v][i], g[v][j]);
                    mx[v][j] = std::max(mx[v][j], g[v][i]);
                &amp;#125;
            for (; !q.empty(); ) &amp;#123;
                auto [u, v] = q.front();
                if (!check(u, v, r))
                    q.pop();
                else
                    break;
            &amp;#125;
            if (q.empty()) &amp;#123;
                std::cout &amp;lt;&amp;lt; r + 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
                break;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e.-two-tanks&#34;&gt;E. Two Tanks&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1809/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1809/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;果然还是不会简单 DP &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以观察到如果总水量相同，且某个时刻两种初始状态当前是相同状态，那么以后它们也会是相同状态。但光凭这个好像还是不太能做出来的样子 &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里大概算一个定式，对于类似这种两个元素总和不变的问题，可以把两个元素的容量画到数轴上，原点表示分界，当前水为一条定长线段，倒水就相当于左右平移这条线段：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;需要意识到，&lt;mark&gt;&lt;/mark&gt;&lt;/p&gt;
</content>
        <category term="DP" />
        <category term="贪心" />
        <category term="均摊" />
        <updated>2025-04-21T06:42:31.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250419/</id>
        <title>网格图路径计数</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250419/"/>
        <content type="html">&lt;figure&gt;
&lt;img src=&#34;/20250419/neko.jpeg&#34; alt=&#34;猫&#34; style=&#34;width: 75px&#34;&gt;
&lt;figcaption&gt;
猫
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;点到点的方案数&#34;&gt;点到点的方案数&lt;/h2&gt;
&lt;p&gt;从 &lt;span class=&#34;math inline&#34;&gt;\((x_1,y_1)\)&lt;/span&gt; 只能向右、向下走到 &lt;span class=&#34;math inline&#34;&gt;\((x_2,y_2)\)&lt;/span&gt; 的方案数：&lt;span class=&#34;math inline&#34;&gt;\(C_{x_2-x_1+y_2-y_1}^{x_2-x_1}\)&lt;/span&gt;。就是说，因为必须向下走 &lt;span class=&#34;math inline&#34;&gt;\(x_2-x_1\)&lt;/span&gt; 步，又必须向右走 &lt;span class=&#34;math inline&#34;&gt;\(y_2-y_1\)&lt;/span&gt; 步；但顺序是可以任意打乱的。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a---gerald-and-giant-chess&#34;&gt;A - Gerald and Giant Chess&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/560/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/560/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;把不能走的点按 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为第一关键字，&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 为第二关键字排序，就可以得到它们按大致拓扑序排列的结果。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示不经过 &lt;span class=&#34;math inline&#34;&gt;\(1\sim i-1\)&lt;/span&gt; 的非法点走到第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个非法点的方案数，就可以得到 &lt;span class=&#34;math inline&#34;&gt;\(f_i=C_{x_i+y_i,x_i}-\sum_{j=1}^{i-1} f_j\times C_{x_i-x_j+y_i-y_j}^{x_i-x_j}\)&lt;/span&gt;。可以发现后面减去的方案，因为碰到的第一个非法点不同，所以是两两不同的。&lt;/p&gt;
&lt;p&gt;让 &lt;span class=&#34;math inline&#34;&gt;\((h,w)\)&lt;/span&gt; 成为第 &lt;span class=&#34;math inline&#34;&gt;\((n+1)\)&lt;/span&gt; 个非法点，&lt;span class=&#34;math inline&#34;&gt;\(f_{n+1}\)&lt;/span&gt; 就是答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int h, w, n;
    std::cin &amp;gt;&amp;gt; h &amp;gt;&amp;gt; w &amp;gt;&amp;gt; n, --h, --w;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; a(n + 2);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i].first &amp;gt;&amp;gt; a[i].second;
        --a[i].first, --a[i].second;
    &amp;#125;
    a[n + 1] = &amp;#123; h, w &amp;#125;;
    std::sort(a.begin() + 1, a.end());
    std::vector&amp;lt;long long&amp;gt; fac(h + w + 1), inv(h + w + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= h + w; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[h + w] = qkp(fac[h + w], mod - 2);
    for (int i = h + w - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    std::vector&amp;lt;long long&amp;gt; f(n + 2);
    for (int i = 1; i &amp;lt;= n + 1; ++i) &amp;#123;
        f[i] = C(a[i].first + a[i].second, a[i].first);
        for (int j = 1; j &amp;lt; i; ++j)
            if (a[j].second &amp;lt;= a[i].second)
                (f[i] += mod - f[j] * C(a[i].first - a[j].first + a[i].second - a[j].second, a[i].first - a[j].first) % mod) %= mod;
        // printf(&amp;quot;f[(%d, %d)] = %lld\n&amp;quot;, a[i].first, a[i].second, f[i]);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n + 1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b---bbq-hard&#34;&gt;B - BBQ Hard&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/agc001/tasks/agc001_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/agc001/tasks/agc001_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不仅仅可以在关键点上 DP，也可以在网格上直接 DP。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(A_i+B_i+A_j+B_j\)&lt;/span&gt; 就是 &lt;span class=&#34;math inline&#34;&gt;\(A_i+B_i-(-A_j)-(-B_j)\)&lt;/span&gt;。把棋盘扩大到 &lt;span class=&#34;math inline&#34;&gt;\(-2000\to 2000\)&lt;/span&gt; 就可以了。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示可以到达 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 的所有发出关键点 &lt;span class=&#34;math inline&#34;&gt;\((-A_j,-B_j)\)&lt;/span&gt; 带来的贡献，那么 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=f_{i-1,j}+f_{i,j-1}\)&lt;/span&gt;。枚举所有接收关键点 &lt;span class=&#34;math inline&#34;&gt;\((A_i,B_i)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\sum f_{A_i,B_i}\)&lt;/span&gt; 就是答案的两倍，再减去对角线，也就是 &lt;span class=&#34;math inline&#34;&gt;\(\sum (-A_i,B_i)\to (A_i,B_i)\)&lt;/span&gt; 后的值。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int N = 2000;
const int mod = 1e9 + 7;
const int inv2 = 500000004;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; fac(4 * N + 1), inv(4 * N + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= 4 * N; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[4 * N] = qkp(fac[4 * N], mod - 2);
    for (int i = 4 * N - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; a(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(2 * N + 1, std::vector&amp;lt;long long&amp;gt; (2 * N + 1));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i].first &amp;gt;&amp;gt; a[i].second;
        ++f[N - a[i].first][N - a[i].second];
    &amp;#125;
    for (int i = 0; i &amp;lt;= 2 * N; ++i)
        for (int j = 0; j &amp;lt;= 2 * N; ++j) &amp;#123;
            if (i &amp;gt;= 1)
                (f[i][j] += f[i - 1][j]) %= mod;
            if (j &amp;gt;= 1)
                (f[i][j] += f[i][j - 1]) %= mod;
            // printf(&amp;quot;f(%2d, %2d) = %lld\n&amp;quot;, i - N, j - N, f[i][j]);
        &amp;#125;
    long long res = 0ll;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        (res += f[a[i].first + N][a[i].second + N]) %= mod;
        (res += mod - C(a[i].first * 2 + a[i].second * 2, 2 * a[i].first)) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res * inv2 % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c---iroha-and-a-grid&#34;&gt;C - Iroha and a Grid&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc058/tasks/arc058_b&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc058/tasks/arc058_b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先把绿色部分的答案计算出来：&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;1.png&#34; alt=&#34;网格&#34; /&gt;&lt;figcaption&gt;网格&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;如果把绿色的每一个格子到终点的方案数求和，就会算重，因为上面的绿色点可以走到下面的绿色点。&lt;/p&gt;
&lt;p&gt;让绿色点第一步只能往右走到黄色点，用这样的方案为黄色点赋初值，再让黄色点自由走就可以得到答案了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int h, w, a, b;
    std::cin &amp;gt;&amp;gt; h &amp;gt;&amp;gt; w &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
    std::vector&amp;lt;long long&amp;gt; fac(h + w + 1), inv(h + w + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= h + w; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[h + w] = qkp(fac[h + w], mod - 2);
    for (int i = h + w - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    auto res = 0ll;
    for (int i = 1; i &amp;lt;= h - a; ++i) &amp;#123;
        // (i, B)
        auto f(C(i + b - 2, i - 1));
        // printf(&amp;quot;(%d, %d): %lld\n&amp;quot;, i, b, f);
        // (i, B + 1)
        (res += f * C(h - i + w - (b + 1), h - i) % mod) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;点到矩形的方案数&#34;&gt;点到矩形的方案数&lt;/h2&gt;
&lt;p&gt;从 &lt;span class=&#34;math inline&#34;&gt;\((x_0,y_0)\)&lt;/span&gt; 走到矩形 &lt;span class=&#34;math inline&#34;&gt;\((x_1,y_1,x_2,y_2)\)&lt;/span&gt; 的方案数：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\sum\limits_{i\in [x_1,x_2],j\in [y_1,y_2]} G(x_0,y_0, i, j) = G(x_0,y_0,x_2 + 1,y_2 + 1)-G(x_0,y_0,x_2+1,y_1)-G(x_0,y_0,x_1,y_2+1)+G(x_0,y_0,x_1,y_1)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;证明：&lt;span class=&#34;math inline&#34;&gt;\(G(x_0,y_0,x_2+1,y_2+1)=\sum\limits_i G(x_0,y_0,i,y_2)=\sum\limits_{i,j} G(x_0,y_0,i,j)\)&lt;/span&gt;，类似的，把后面几项展开，可以得到前缀和的结构。&lt;/p&gt;
&lt;p&gt;现在，矩形就可以被概括成 4 个点了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;矩形到矩形的方案数&#34;&gt;矩形到矩形的方案数&lt;/h2&gt;
&lt;p&gt;枚举第一个矩形里的所有点，那么就可以得到关于第二个矩形里四个点的表达式。反过来把第一个矩形概括为 4 个点就可以快速求解了。&lt;/p&gt;
&lt;p&gt;具体一点，第一个矩形 &lt;span class=&#34;math inline&#34;&gt;\((x_1,y_1,x_2,y_2)\)&lt;/span&gt; 可以被概括为 &lt;span class=&#34;math inline&#34;&gt;\((x_1-1,y_1-1)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\((x_1-1,y_2)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\((x_2,y_1-1)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\((x_2,y_2)\)&lt;/span&gt;。注意方向颠倒导致符号发生变化。此时对 &lt;span class=&#34;math inline&#34;&gt;\(4\times 4=16\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt; 按对应的 &lt;span class=&#34;math inline&#34;&gt;\(-1/1\)&lt;/span&gt; 系数求和就能得到答案。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d---sightseeing-plan&#34;&gt;D - Sightseeing Plan&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/agc018/tasks/agc018_e&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/agc018/tasks/agc018_e&lt;/a&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;恒等式：&lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i\in [x_1,x_2]}G_(x_1,y_1,i,y_2-1)=G(x_1,y_1,x_2,y_2)\)&lt;/span&gt;，放在网格图上就是强制走到 &lt;span class=&#34;math inline&#34;&gt;\((i,y_2-1)\)&lt;/span&gt;，再强制向右走一步，然后向上走到 &lt;span class=&#34;math inline&#34;&gt;\((x_2,y_2)\)&lt;/span&gt;。和上一题类似的，可以发现不重不漏。&lt;/li&gt;
&lt;li&gt;三个矩形，&lt;span class=&#34;math inline&#34;&gt;\(M_1\)&lt;/span&gt; 经过 &lt;span class=&#34;math inline&#34;&gt;\(M_2\)&lt;/span&gt; 到达 &lt;span class=&#34;math inline&#34;&gt;\(M_3\)&lt;/span&gt; 的路径数量：经过 &lt;span class=&#34;math inline&#34;&gt;\(M_2\)&lt;/span&gt; 时，根据限制，只可能从下面或左边进入。枚举进入的点 &lt;span class=&#34;math inline&#34;&gt;\((x_0,y_0)\)&lt;/span&gt;（数量为 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;），再计算 &lt;span class=&#34;math inline&#34;&gt;\(G(x_0,y_0,M_3)\)&lt;/span&gt; 就能得到不重不漏的答案。&lt;/li&gt;
&lt;li&gt;原问题：要求 &lt;span class=&#34;math inline&#34;&gt;\(M_2\)&lt;/span&gt; 内部路径上点的贡献和，这个其实就是 &lt;span class=&#34;math inline&#34;&gt;\(M_2\)&lt;/span&gt; 内部路径长度。若从 &lt;span class=&#34;math inline&#34;&gt;\((x_1,y_1)\)&lt;/span&gt; 进入，再从 &lt;span class=&#34;math inline&#34;&gt;\((x_2,y_2)\)&lt;/span&gt; 离开，长度就是 &lt;span class=&#34;math inline&#34;&gt;\(x_2-x_1+y_2-y_1+1\)&lt;/span&gt;。拆成 &lt;span class=&#34;math inline&#34;&gt;\((x_2+y_2+1)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(-(x_1+y_1)\)&lt;/span&gt; 后发现一次进入和一次离开的贡献是独立的。分别枚举进入点和离开点计算贡献就可以了。&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int N = 2e6;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int x1, x2, x3, x4, x5, x6, y1, y2, y3, y4, y5, y6;
    std::cin &amp;gt;&amp;gt; x1 &amp;gt;&amp;gt; x2 &amp;gt;&amp;gt; x3 &amp;gt;&amp;gt; x4 &amp;gt;&amp;gt; x5 &amp;gt;&amp;gt; x6;
    std::cin &amp;gt;&amp;gt; y1 &amp;gt;&amp;gt; y2 &amp;gt;&amp;gt; y3 &amp;gt;&amp;gt; y4 &amp;gt;&amp;gt; y5 &amp;gt;&amp;gt; y6;
    std::vector&amp;lt;long long&amp;gt; fac(N + 1), inv(N + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= N; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[N] = qkp(fac[N], mod - 2);
    for (int i = N - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    std::vector&amp;lt;std::tuple&amp;lt;int, int, int&amp;gt; &amp;gt; f(4), g(4);
    f[0] = &amp;#123; x1 - 1, y1 - 1, 1 &amp;#125;, f[1] = &amp;#123; x1 - 1, y2, mod - 1 &amp;#125;, f[2] = &amp;#123; x2, y1 - 1, mod - 1 &amp;#125;, f[3] = &amp;#123; x2, y2, 1 &amp;#125;;
    g[0] = &amp;#123; x5, y5, 1 &amp;#125;, g[1] = &amp;#123; x5, y6 + 1, mod - 1 &amp;#125;, g[2] = &amp;#123; x6 + 1, y5, mod - 1 &amp;#125;, g[3] = &amp;#123; x6 + 1, y6 + 1, 1 &amp;#125;; 
    auto G = [&amp;amp;](int x1, int y1, int x2, int y2) &amp;#123;
        auto a(std::abs(x1 - x2)), b(std::abs(y1 - y2));
        return C(a + b, a);
    &amp;#125;;
    auto res = 0ll;
    for (auto [x1, y1, k1] : f)
        for (auto [x2, y2, k2] : g) &amp;#123;
            auto t(0ll);
            for (int x = x3; x &amp;lt;= x4; ++x) &amp;#123;
                (t += G(x1, y1, x, y4) * G(x, y4 + 1, x2, y2) % mod * (x + y4 + 1) % mod) %= mod;
                (t += mod - G(x1, y1, x, y3 - 1) * G(x, y3, x2, y2) % mod * (x + y3) % mod) %= mod;
            &amp;#125;
            for (int y = y3; y &amp;lt;= y4; ++y) &amp;#123;
                (t += G(x1, y1, x4, y) * G(x4 + 1, y, x2, y2) % mod * (x4 + y + 1) % mod) %= mod;
                (t += mod - G(x1, y1, x3 - 1, y) * G(x3, y, x2, y2) % mod * (x3 + y) % mod) %= mod;
            &amp;#125;
            // printf(&amp;quot;(%d, %d, %d), (%d, %d, %d): %lld\n&amp;quot;, x1, y1, k1, x2, y2, k2, t * k1 % mod * k2 % mod);
            (res += t * k1 % mod * k2 % mod) %= mod;
        &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;不经过-yxc-的方案数&#34;&gt;不经过 &lt;span class=&#34;math inline&#34;&gt;\(y=x+c\)&lt;/span&gt; 的方案数&lt;/h2&gt;
&lt;p&gt;Catalan 数的一种推导方式是，在 &lt;span class=&#34;math inline&#34;&gt;\(n\times n\)&lt;/span&gt; 的网格上，要求不能越过 &lt;span class=&#34;math inline&#34;&gt;\(y=x\)&lt;/span&gt; 的方案数。可以用总方案数减去越过的方案数。&lt;/p&gt;
&lt;p&gt;怎么计算非法的方案呢？越过 &lt;span class=&#34;math inline&#34;&gt;\(y=x\)&lt;/span&gt; 的路径必定存在一个点经过 &lt;span class=&#34;math inline&#34;&gt;\(y=x+1\)&lt;/span&gt;，原问题转化为不能碰到 &lt;span class=&#34;math inline&#34;&gt;\(y=x+1\)&lt;/span&gt; 的方案数。&lt;/p&gt;
&lt;p&gt;把终点 &lt;span class=&#34;math inline&#34;&gt;\((n, n)\)&lt;/span&gt; 翻折到 &lt;span class=&#34;math inline&#34;&gt;\(y=x+1\)&lt;/span&gt; 上方，得到 &lt;span class=&#34;math inline&#34;&gt;\((n-1, n + 1)\)&lt;/span&gt;；对于任意到达 &lt;span class=&#34;math inline&#34;&gt;\((n-1,n+1)\)&lt;/span&gt; 的路径，一定会接触 &lt;span class=&#34;math inline&#34;&gt;\(y=x+1\)&lt;/span&gt; 至少一次；将第一次接触以后的路径翻折到 &lt;span class=&#34;math inline&#34;&gt;\(y=x+1\)&lt;/span&gt; 下方，则一定和原图中的非法路径一一对应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;4.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;就可以得到 &lt;span class=&#34;math inline&#34;&gt;\(C_{2n}^n-C_{2n}^{n-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;如果问题变得更加一般，求解到达 &lt;span class=&#34;math inline&#34;&gt;\((n, m)\)&lt;/span&gt; 不能碰到 &lt;span class=&#34;math inline&#34;&gt;\(y=x+c\)&lt;/span&gt; 的方案数，还是可以把 &lt;span class=&#34;math inline&#34;&gt;\((n,m)\)&lt;/span&gt; 翻折到 &lt;span class=&#34;math inline&#34;&gt;\((m-c,n+c)\)&lt;/span&gt;，答案是 &lt;span class=&#34;math inline&#34;&gt;\(C_{n+m}^n-C_{n+m}^{m-c}\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;不经过-yx-l-和-yxr-的方案数&#34;&gt;不经过 &lt;span class=&#34;math inline&#34;&gt;\(y=x-l\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(y=x+r\)&lt;/span&gt; 的方案数&lt;/h2&gt;
&lt;p&gt;现在有 &lt;span class=&#34;math inline&#34;&gt;\(y=x-l\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(y=x+r\)&lt;/span&gt; 两条线作为限制，现在的翻折意义就会有一点改变。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;5.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;比如图中的 &lt;span class=&#34;math inline&#34;&gt;\(A&amp;#39;\)&lt;/span&gt;，是 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 沿着 &lt;span class=&#34;math inline&#34;&gt;\(y=x-l\)&lt;/span&gt; 翻折一次后的结果。还是按照之前的方式来理解，那么走到 &lt;span class=&#34;math inline&#34;&gt;\(A&amp;#39;\)&lt;/span&gt; 的路径代表至少经过一次 &lt;span class=&#34;math inline&#34;&gt;\(y=x-l\)&lt;/span&gt; 的方案。&lt;span class=&#34;math inline&#34;&gt;\(A&amp;#39;&amp;#39;\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(A&amp;#39;\)&lt;/span&gt; 沿着 &lt;span class=&#34;math inline&#34;&gt;\(y=x+r\)&lt;/span&gt; 翻折一次之后得到的结果，走到 &lt;span class=&#34;math inline&#34;&gt;\(A&amp;#39;&amp;#39;\)&lt;/span&gt; 的路径就代表至少先碰到一次 &lt;span class=&#34;math inline&#34;&gt;\(y=x-l\)&lt;/span&gt;，再碰到一次 &lt;span class=&#34;math inline&#34;&gt;\(y=x+r\)&lt;/span&gt; 的方案数。&lt;/p&gt;
&lt;p&gt;如果把相邻多次碰到 &lt;span class=&#34;math inline&#34;&gt;\(y=x-l\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(y=x+r\)&lt;/span&gt; 合并为一次，最终的非法路径就是 &lt;code&gt;LRLRLR...&lt;/code&gt; 或者 &lt;code&gt;RLRLRL...&lt;/code&gt; 的形式。因为可以计算的是「至少」的形式，用容斥原理得到，答案是 &lt;span class=&#34;math inline&#34;&gt;\(f_{\varnothing}-(f_{\texttt L} + f_{\texttt R}) + (f_{\texttt {LR}} + f_{\texttt {RL}}) - \cdots\)&lt;/span&gt;。对应计算每个翻折对应终点和答案就可以了。最后的答案是 &lt;span class=&#34;math inline&#34;&gt;\(C_{n+m}^n-C_{n+m}^{n+l}-C_{n+m}^{n + r}+C_{n+m}^{n+l-r}+C_{n+m}^{n+r-l}-\cdots\)&lt;/span&gt;，可以简化成 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{k\in \mathbb{Z}} C_{n+m}^{n-k\cdot (r-l)}-C_{n+m}^{n-k\cdot (r-l)+r}\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e---骗我呢&#34;&gt;E - 骗我呢&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3266&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3266&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每行内部递增，而且选项只有 &lt;span class=&#34;math inline&#34;&gt;\([0,m]\)&lt;/span&gt;，那么每行就会刚好在 &lt;span class=&#34;math inline&#34;&gt;\([0,m]\)&lt;/span&gt; 里面跳过一个数。&lt;/p&gt;
&lt;p&gt;如果第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行跳过的数是 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，那么画一画图就可以发现第 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 可能跳过的数是 &lt;span class=&#34;math inline&#34;&gt;\([j-1,m]\)&lt;/span&gt;；反过来，第 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 行可能跳过的数就是 &lt;span class=&#34;math inline&#34;&gt;\([0,j+1]\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;如果让 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示确定了第 &lt;span class=&#34;math inline&#34;&gt;\(1\to i\)&lt;/span&gt; 行，其中第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行跳过 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数，就可以得到 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\sum\limits_{k=0}^{j+1} f_{i-1,k}\)&lt;/span&gt;。前缀和得到 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=f_{i,j-1}+f_{i-1,j+1}\)&lt;/span&gt;。注意边界：&lt;span class=&#34;math inline&#34;&gt;\(f_{0,j}=1\)&lt;/span&gt;；&lt;span class=&#34;math inline&#34;&gt;\(f_{i,0}=f_{i-1,0}+f_{i-1,1}\)&lt;/span&gt;；&lt;span class=&#34;math inline&#34;&gt;\(f_{i,m}=f_{i,m-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;为了得到答案，让 &lt;span class=&#34;math inline&#34;&gt;\(g_{i,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(i\times j\)&lt;/span&gt; 矩阵的方案数（这样就有机会通过手段优化了）：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
g_{i,j}&amp;amp;=\sum_{k=0}^j f_{i,k}\\
&amp;amp;= f_{i-1,0}+f_{i-1,1}+\sum_{k=1}^j f_{i,k-1}+f_{i-1,k+1}\\
&amp;amp;= g_{i,j-1}+g_{i-1,j+1}
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;边界情况呢， &lt;span class=&#34;math inline&#34;&gt;\(g_{i, 0} = f_{i,0} = f_{i-1, 0} + f_{i - 1, 1} = g_{i-1,1}\)&lt;/span&gt;；&lt;span class=&#34;math inline&#34;&gt;\(g_{i,m}=g_{i, m - 1} + f_{i,m}=g_{i-1,m}+g_{i,m-1}\)&lt;/span&gt;。 &lt;span class=&#34;math inline&#34;&gt;\(g_{i,m+1}=g_{i,m}\)&lt;/span&gt; 避免边界。&lt;/p&gt;
&lt;p&gt;那么在网格图上转移如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;考虑将这个图形拉正，令 &lt;span class=&#34;math inline&#34;&gt;\((i+i,j)\gets g_{i,j}\)&lt;/span&gt; 得到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;问题就转化为，从 &lt;span class=&#34;math inline&#34;&gt;\((0, 0)\)&lt;/span&gt; 走到 &lt;span class=&#34;math inline&#34;&gt;\((m+n+1,n)\)&lt;/span&gt; 且不能触碰 &lt;span class=&#34;math inline&#34;&gt;\(y=x+1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(y=x-m-2\)&lt;/span&gt; 两条直线的方案数。&lt;/p&gt;
&lt;details&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;不经过一般过原点直线的方案数&#34;&gt;不经过一般过原点直线的方案数&lt;/h2&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;类型一：&lt;span class=&#34;math inline&#34;&gt;\((0,0)\to (n,m)\)&lt;/span&gt;，不经过 &lt;span class=&#34;math inline&#34;&gt;\(y=\dfrac mnx\)&lt;/span&gt; 的方案，其中要求 &lt;span class=&#34;math inline&#34;&gt;\((m,n)=1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;方案为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {C_{n+m}^n}{n+m}\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="排列组合" />
        <category term="容斥原理" />
        <category term="数学" />
        <updated>2025-04-19T02:03:57.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250418/</id>
        <title>NOI 大纲 Upload</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250418/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;NOI_Syllabus_Edition_2025.pdf&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
</content>
        <updated>2025-04-18T08:51:53.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250407/</id>
        <title>组合计数</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250407/"/>
        <content type="html">&lt;p&gt;毅毅：统计不是数学（断章取义 ed）。&lt;del&gt;故删掉了数学标签。&lt;/del&gt; 其实并没有。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-二分图染色&#34;&gt;A. 二分图染色&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6181/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6181/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先只看红色。显然一个左部点最多只能用红边连接一个右部点，反之同理。把左部点视为下标，其用红边相连的右部点视为值，则一个合法的方案为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的只保留一部分元素的排列。显然为 &lt;span class=&#34;math inline&#34;&gt;\(f(n)=\sum\limits_{i=0}^nC_n^i\cdot A_n^i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;再加上蓝色，&lt;span class=&#34;math inline&#34;&gt;\(f^2(n)\)&lt;/span&gt; 会给一条边涂两种颜色，故钦定有两种颜色的边数，容斥得到 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=0}^n(-1)^i\cdot C_n^i\cdot A_n^i\cdot f^2(n-i)\)&lt;/span&gt;。发现 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的计算可能需要优化一下。考虑已经知道 &lt;span class=&#34;math inline&#34;&gt;\(f(n-1)\)&lt;/span&gt;，此时对于新增的第 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 对点：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;任意连边（显然两个当中只能有一个点发出边），共有 &lt;span class=&#34;math inline&#34;&gt;\(2n-1\)&lt;/span&gt; 种方案，因为 &lt;span class=&#34;math inline&#34;&gt;\((n, n)\)&lt;/span&gt; 会被算重。&lt;/li&gt;
&lt;li&gt;不连，共 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 种方案。&lt;/li&gt;
&lt;li&gt;发现 1 中可能连到已经有连边的点上了，新边的目的地有 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 个选项，目的地原本连接的点也有 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 个选项，去掉两边共 &lt;span class=&#34;math inline&#34;&gt;\(4\)&lt;/span&gt; 个点，非法的即为 &lt;span class=&#34;math inline&#34;&gt;\((n-1)^2\cdot f(n-2)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; f(n + 1), fac(n + 1), inv(n + 1);
    f[0] = 1ll, f[1] = 2ll;
    fac[0] = 1ll, fac[1] = 1ll, inv[0] = 1ll;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        fac[i] = fac[i - 1] * i % mod;
        f[i] = (f[i - 1] * 2 * i % mod + mod - f[i - 2] * (i - 1) % mod * (i - 1) % mod) % mod;
    &amp;#125;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    auto A = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod;
    &amp;#125;;
    long long res = 0ll;
    for (int i = 0, k = 1; i &amp;lt;= n; ++i, k = mod - k)
        (res += k * C(n, i) % mod * A(n, i) % mod * f[n - i] % mod * f[n - i]) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-七选五&#34;&gt;B. 七选五&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6181/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6181/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 固定，钦定有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个数相等，有 &lt;span class=&#34;math inline&#34;&gt;\(C_k^x\)&lt;/span&gt; 个方案，剩下的就是从 &lt;span class=&#34;math inline&#34;&gt;\(n-x\)&lt;/span&gt; 个元素里选出 &lt;span class=&#34;math inline&#34;&gt;\(k-x\)&lt;/span&gt; 个来错排，考虑钦定相同的个数来容斥：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=0}^{k-x}(-1)^i\cdot C_{k-x}^i\cdot A_{n-x-i}^{k-x-i}
\]&lt;/span&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k, x;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k &amp;gt;&amp;gt; x;
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    fac[0] = 1ll, fac[1] = 1ll, inv[0] = 1ll;
    for (int i = 2; i &amp;lt;= n; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    auto A = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod;
    &amp;#125;;
    long long res = C(k, x), sum = 0ll;
    for (int i = 0, p = 1; i &amp;lt;= k - x; ++i, p = mod - p)
        (sum += p * C(k - x, i) % mod * A(n - x - i, k - x - i) % mod) %= mod;
    std::cout &amp;lt;&amp;lt; res * sum % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-硬币购物&#34;&gt;D. 硬币购物&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6181/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6181/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每次多重背包会超时，考虑用钦定每种硬币是否超额来容斥。令 &lt;span class=&#34;math inline&#34;&gt;\(f_s\)&lt;/span&gt; 表示凑出 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的方案数（完全背包），那么 &lt;span class=&#34;math inline&#34;&gt;\(f_{s-c_1\times (d_1 + 1)}\)&lt;/span&gt; 就表示钦定第 1 种硬币超额时凑出 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的方案数，以此类推。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int c[4], T, m = 1e5;
    std::vector&amp;lt;long long&amp;gt; f(m + 1);
    f[0] = 1;
    for (int i = 0; i &amp;lt; 4; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; c[i];
        for (int j = c[i]; j &amp;lt;= m; ++j)
            f[j] += f[j - c[i]];
    &amp;#125;
    std::cin &amp;gt;&amp;gt; T;
    for (int d[4], m; T--; ) &amp;#123;
        for (int i = 0; i &amp;lt; 4; ++i)
            std::cin &amp;gt;&amp;gt; d[i];
        std::cin &amp;gt;&amp;gt; m;
        long long res = 0ll;
        for (int i = 0; i &amp;lt; (1 &amp;lt;&amp;lt; 4); ++i) &amp;#123;
            int s = m;
            for (int j = 0; j &amp;lt; 4; ++j)
                if ((i &amp;gt;&amp;gt; j) &amp;amp; 1)
                    s -= (d[j] + 1) * c[j];
            if (s &amp;gt;= 0) &amp;#123;
                int k = (__builtin_popcount(i) &amp;amp; 1) ? -1 : 1;
                res += k * f[s];
            &amp;#125;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e.-distinct-multiples&#34;&gt;E. Distinct Multiples&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6181/problem/5&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6181/problem/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推式子题。题意转化为，给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个位置可选的值集合，要求任意两个位置值不等，问方案数。&lt;/p&gt;
&lt;p&gt;如果把两个位置取等视作在团上选中边，那么有朴素做法钦定选边的集合 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 然后容斥，考虑它们构成的连通块 &lt;span class=&#34;math inline&#34;&gt;\(\{s\} \subseteq S\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(res=\sum\limits_{S\subseteq V}(-1)^{|S|}\cdot \prod\limits_{s_i} \left\lfloor \frac m{\operatorname{lcm} s_i} \right\rfloor\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;有个很神奇的操作是把 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 丢掉，直接枚举 &lt;span class=&#34;math inline&#34;&gt;\(\{s\}\)&lt;/span&gt; 尝试子集 DP。有：&lt;span class=&#34;math inline&#34;&gt;\(res=\sum\limits_{\{s\}}\prod\limits_s f(s)\cdot\left\lfloor \frac m{\operatorname{lcm} s} \right\rfloor\)&lt;/span&gt;。其中 &lt;span class=&#34;math inline&#34;&gt;\(f(s)\)&lt;/span&gt; 表示选取一个 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的导出子图的容斥系数之和，其中次数为导出子图中边数。&lt;/p&gt;
&lt;p&gt;怎么把 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 算出来呢？容易发现其值只与 &lt;span class=&#34;math inline&#34;&gt;\(|s|\)&lt;/span&gt; 有关，考虑钦定与 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 连通的点数容斥，则有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(n)=\sum\limits_{i=0}^{n - 1} (-1)^i \times C_{n-1}^{i-1} \times f(i) \cdot \sum_{j=0}^{m\gets i\times (i-1)\div 2} (-1)^j\cdot C_m^j
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们知道，二项式定理取 &lt;span class=&#34;math inline&#34;&gt;\(a=1, b = -1\)&lt;/span&gt; 有 &lt;span class=&#34;math inline&#34;&gt;\(0^m=[m=0]=\sum_{j=0}^m(-1)^j\cdot C_m^j\)&lt;/span&gt;，代入得：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f(n)&amp;amp;=\sum\limits_{i=0}^{n - 1} (-1)^i \times C_{n-1}^{n-i-1} \times f(n-i)\cdot [m=0\iff i=1]\\
&amp;amp;=(1 - n)\cdot f(n-1)
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后就能线性求出。再用一个子集 DP，为了保证顺序枚举最小的未被确定的点所在连通块进行转移。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, l;
    long long m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m, l = 1 &amp;lt;&amp;lt; n;
    std::vector&amp;lt;long long&amp;gt; d(n), f(n + 1), dp(l), g(l);
    f[1] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; d[i - 1];
        if (i &amp;gt;= 2)
            f[i] = (1 + mod - i) * f[i - 1] % mod;
        // printf(&amp;quot;f[%d] = %lld\n&amp;quot;, i, f[i]);
    &amp;#125;
    for (int i = 0; i &amp;lt; l; ++i) &amp;#123;
        long long now = 1ll;
        for (int j = 0; j &amp;lt; n; ++j)
            if ((i &amp;gt;&amp;gt; j) &amp;amp; 1) &amp;#123;
                if (now / std::__gcd(now, d[j]) &amp;gt; m / d[j])
                    goto nosol;
                now = now / std::__gcd(now, d[j]) * d[j];
            &amp;#125;
        g[i] = (m / now) % mod;
        // printf(&amp;quot;lcm = %lld, g[%d] = %lld\n&amp;quot;, now, i, g[i]);
    nosol: ;
    &amp;#125;
    dp[0] = 1ll;
    auto lowbit = [](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    for (int i = 1; i &amp;lt; l; ++i) &amp;#123;
        int to = std::__lg(lowbit(i));
        for (int j = i; j; j = (j - 1) &amp;amp; i)
            if ((j &amp;gt;&amp;gt; to) &amp;amp; 1)
                (dp[i] += dp[i ^ j] * f[__builtin_popcount(j)] % mod * g[j] % mod) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; dp[l - 1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;f.-permutation&#34;&gt;F. Permutation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6181/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6181/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果全是 &lt;code&gt;&amp;lt;&lt;/code&gt;，方案数为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;现在把其中一些 &lt;code&gt;&amp;lt;&lt;/code&gt; 变成 &lt;code&gt;?&lt;/code&gt;，比如 &lt;code&gt;&amp;lt;&amp;lt;??&amp;lt;?&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; 的方案数，&lt;del&gt;太好了是多重集排列，我们没救了&lt;/del&gt; 显然被 &lt;code&gt;&amp;lt;&lt;/code&gt; 连接起来的一段元素只有一种排列方式，所以可以视为多重集排列，方案数为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {11!}{3!\times 2!\times 5!}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;似乎只需要枚举把 &lt;code&gt;&amp;gt;&lt;/code&gt; 变成 &lt;code&gt;&amp;lt;&lt;/code&gt; 或 &lt;code&gt;=&lt;/code&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(2^k\)&lt;/span&gt; 种情况再计算就可以了，可惜 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 有点大。但我们发现它在一定程度上是没有后效性的，比如 &lt;code&gt;&amp;lt;&amp;lt;??&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;&amp;lt;?&amp;lt;&amp;lt;&lt;/code&gt;，前面的 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 不会对后面的内容带来影响。&lt;/p&gt;
&lt;p&gt;故令 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示对于前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个元素的方案数，枚举最后一个被钦定为 &lt;code&gt;?&lt;/code&gt; 的 &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;（即 &lt;span class=&#34;math inline&#34;&gt;\([j + 1, i-1]\)&lt;/span&gt; 间的 &lt;code&gt;&amp;gt;&lt;/code&gt; 都被替换为 &lt;code&gt;&amp;lt;&lt;/code&gt;），带上容斥系数，有 &lt;span class=&#34;math inline&#34;&gt;\(f_i=\sum\limits_{s_j=\texttt{&amp;#39;&amp;gt;&amp;#39;}}(-1)^{cnt_\texttt{&amp;#39;&amp;gt;&amp;#39;}[j + 1, i - 1]}\times f_j\times\dfrac1{(i-j)!}\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    fac[0] = 1ll, inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i)
        fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    std::vector&amp;lt;char&amp;gt; s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; s[i];
    std::vector&amp;lt;long long&amp;gt; f(n + 1);
    s[0] = &amp;#39;&amp;gt;&amp;#39;, f[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        int cnt = 0;
        for (int j = i - 1; ~j; --j)
            if (s[j] == &amp;#39;&amp;gt;&amp;#39;) &amp;#123;
                long long k = (cnt &amp;amp; 1) ? mod - 1 : 1;
                (k *= f[j]) %= mod, (k *= inv[i - j]) %= mod;
                (f[i] += k) %= mod;
                ++cnt;
            &amp;#125;
        // printf(&amp;quot;f[%d] = %lld\n&amp;quot;, i, f[i]);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n] * fac[n] % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;忳郁邑余侘傺兮，余独穷困乎此时也。&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;h.-k-perm-counting&#34;&gt;H. ~K Perm Counting&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6181/problem/8&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6181/problem/8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑钦定令几个元素不满足条件进行容斥，即答案为 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=0}^n (-1)^i\cdot f(i)\)&lt;/span&gt;。但我们发现 &lt;span class=&#34;math inline&#34;&gt;\([n-k,n+k]\)&lt;/span&gt; 都有两个不能选的值，直接取 &lt;span class=&#34;math inline&#34;&gt;\(f(i)=\prod 2\)&lt;/span&gt; 肯定会选到相同值，一个自然（？）的想法是再容斥一遍，可惜手玩一下发现似乎容不动。考虑把玩意儿拍在棋盘上：&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;1.png&#34; alt=&#34;以 k=2 为例&#34; /&gt;&lt;figcaption&gt;以 &lt;span class=&#34;math inline&#34;&gt;\(k=2\)&lt;/span&gt; 为例&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;其中 &lt;span class=&#34;math inline&#34;&gt;\(\times\)&lt;/span&gt; 是非法格子，边是非法格子间的不同选关系，同颜色的边隶属同一条链。容易发现如果棋盘继续扩大，这些链还会继续延长。&lt;/p&gt;
&lt;p&gt;会发现这些链互不干扰，就是说我选了这条链上的某个点和链外的点没有任何关系（显然）。把这些链首尾相连拼起来，要做的就是拼接处可以选相邻，其余位置不能选相邻，选出来 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个的方案数。提前预处理出来整个序列，令 &lt;span class=&#34;math inline&#34;&gt;\(tag_j\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 是否能和 &lt;span class=&#34;math inline&#34;&gt;\(j-1\)&lt;/span&gt; 同选，设 &lt;span class=&#34;math inline&#34;&gt;\(dp_{j,i,0/1}\)&lt;/span&gt; 表示 DP 到了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，已经选了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个数，第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个元素（不）选的方案数，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
dp_{j,i,0} = dp_{j - 1, i, 0} + dp_{j-1, i, 1}\\
dp_{j,i,1} = \begin{cases}
dp_{j-1, i - 1, 1} + dp_{j-1,i - 1,0}&amp;amp;tag_j=1
\\
dp_{j-1,i,0}&amp;amp;\text{otherwise}
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;大力 DP 即可。&lt;span class=&#34;math inline&#34;&gt;\(f(i)\)&lt;/span&gt; 即为 &lt;span class=&#34;math inline&#34;&gt;\((n-i)!\times (dp_{m, i, 0} + dp_{m, i, 1})\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 为总链长。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;注意不滚动可能会 MLE &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 924844033;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; tag(1);
    std::vector&amp;lt;long long&amp;gt; fac(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; vis(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
    auto calc = [&amp;amp;](int i, int j, int s) &amp;#123;
        tag.push_back(1);
        for (; ; s ^= 1) &amp;#123;
            // printf(&amp;quot;(%d, %d) &amp;quot;, i, j);
            vis[i][j] = 1;
            if (!s) &amp;#123;
                i = j + k;
                if (i &amp;lt;= n)
                    tag.push_back(0);
                else
                    break;
            &amp;#125;
            else &amp;#123;
                j = i + k;
                if (j &amp;lt;= n)
                    tag.push_back(0);
                else
                    break;
            &amp;#125;
        &amp;#125;
        // puts(&amp;quot;&amp;quot;);
        return;
    &amp;#125;;
    fac[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        fac[i] = fac[i - 1] * i % mod;
        int j = i - k;
        if (j &amp;gt;= 1 &amp;amp;&amp;amp; !vis[i][j])
            calc(i, j, 1);
        j = i + k;
        if (j &amp;lt;= n &amp;amp;&amp;amp; !vis[i][j])
            calc(i, j, 0);
    &amp;#125;
    int m = (int)tag.size() - 1;
    // printf(&amp;quot;m = %d\n&amp;quot;, m);
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; &amp;gt; dp(2, std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; (n + 1, std::vector&amp;lt;long long&amp;gt; (2)));
    dp[0][0][0] = 1ll;
    for (int j = 1, now = 1; j &amp;lt;= m; ++j, now ^= 1) &amp;#123;
        for (int i = 0; i &amp;lt;= n &amp;amp;&amp;amp; i &amp;lt;= j; ++i) &amp;#123;
            dp[now][i][0] = dp[!now][i][0];
            dp[now][i][1] = 0ll;
            if (i) &amp;#123;
                (dp[now][i][0] += dp[!now][i][1]) %= mod;
                dp[now][i][1] = dp[!now][i - 1][0];
                if (tag[j]) &amp;#123;
                    (dp[now][i][1] += dp[!now][i - 1][1]) %= mod;
                    // assert(0);
                &amp;#125;
            &amp;#125;
            // printf(&amp;quot;dp[%d][%d] = %lld / %lld\n&amp;quot;, j, i, dp[j][i][0], dp[j][i][1]);
        &amp;#125;
    &amp;#125;
    long long res = 0ll;
    for (int i = 0, p = 1; i &amp;lt;= n; ++i, p = mod - p)
        (res += p * fac[n - i] % mod * (dp[m &amp;amp; 1][i][0] + dp[m &amp;amp; 1][i][1]) % mod) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---positions-in-permutations&#34;&gt;A - Positions in Permutations&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/285/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/285/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;（看向上一题）这照片是你吗？&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;在上一题的基础上，令 &lt;span class=&#34;math inline&#34;&gt;\(k=1\)&lt;/span&gt;。但是有个小小的问题——所求的「至少」不为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，无法简单容斥。具体地，如果一个排列一共有 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 个非法排列，那么它会被 &lt;span class=&#34;math inline&#34;&gt;\(f(i)\)&lt;/span&gt; 统计 &lt;span class=&#34;math inline&#34;&gt;\(C_p^i\)&lt;/span&gt; 次。令 &lt;span class=&#34;math inline&#34;&gt;\(g(p)\)&lt;/span&gt; 表示非法格子数恰好为 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的排列的真实数量，则 &lt;span class=&#34;math inline&#34;&gt;\(f(i)=\sum\limits_{j=i}^n C_j^i\cdot g(j)\)&lt;/span&gt;，二项式反演即可得到真实值 &lt;span class=&#34;math inline&#34;&gt;\(g(m)=\sum\limits_{j=m}^n (-1)^{j-m}\cdot C_j^m\cdot f(j)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; tag(1);
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; vis(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1));
    auto calc = [&amp;amp;](int i, int j, int s) &amp;#123;
        tag.push_back(1);
        for (; i &amp;lt;= n &amp;amp;&amp;amp; j &amp;lt;= n; s ^= 1) &amp;#123;
            vis[i][j] = 1;
            if (!s) &amp;#123;
                i = j + 1;
                if (i &amp;lt;= n)
                    tag.push_back(0);
            &amp;#125;
            else &amp;#123;
                j = i + 1;
                if (j &amp;lt;= n)
                    tag.push_back(0);
            &amp;#125;
        &amp;#125;
        return;
    &amp;#125;;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    fac[0] = 1ll, inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        fac[i] = fac[i - 1] * i % mod;
        int j = i - 1;
        if (j &amp;gt;= 1 &amp;amp;&amp;amp; !vis[i][j])
            calc(i, j, 1);
        j = i + 1;
        if (j &amp;lt;= n &amp;amp;&amp;amp; !vis[i][j])
            calc(i, j, 0);
    &amp;#125;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    int m = (int)tag.size() - 1;
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; &amp;gt; dp(2, std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; (n + 1, std::vector&amp;lt;long long&amp;gt; (2)));
    dp[0][0][0] = 1ll;
    for (int j = 1, now = 1; j &amp;lt;= m; ++j, now ^= 1) &amp;#123;
        for (int i = 0; i &amp;lt;= n &amp;amp;&amp;amp; i &amp;lt;= j; ++i) &amp;#123;
            dp[now][i][0] = dp[!now][i][0];
            dp[now][i][1] = 0ll;
            if (i) &amp;#123;
                (dp[now][i][0] += dp[!now][i][1]) %= mod;
                dp[now][i][1] = dp[!now][i - 1][0];
                if (tag[j])
                    (dp[now][i][1] += dp[!now][i - 1][1]) %= mod;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    long long res = 0ll;
    for (int i = k, p = 1; i &amp;lt;= n; ++i, p = mod - p) &amp;#123;
        // printf(&amp;quot;%d: %lld\n&amp;quot;, i, C(i, k) * fac[n - i] % mod * (dp[m &amp;amp; 1][i][0] + dp[m &amp;amp; 1][i][1]) % mod);
        (res += p * C(i, k) % mod * fac[n - i] % mod * (dp[m &amp;amp; 1][i][0] + dp[m &amp;amp; 1][i][1]) % mod) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---all-pairs-similarity-p&#34;&gt;D - All Pairs Similarity P&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11458&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11458&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;省流：求 &lt;span class=&#34;math inline&#34;&gt;\(\forall\,i,f_i=\sum\limits_{j=1}^n \dfrac{|a_i\cap a_j|}{|a_i\cup a_j|}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;首先分离常数，有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\sum\limits_{j=1}^n \dfrac{|a_i\cap a_j|}{|a_i\cup a_j|}\\
&amp;amp;=\sum_{j=1}^n\dfrac {|a_i|+|a_j|-|a_i\cup a_j|}{|a_i\cup a_j|}\\
&amp;amp;=\sum_{j=1}^n \dfrac {|a_i|+|a_j|}{|a_i\cup a_j|}-1
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;尽量把分子变得更简：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\sum_{j=1}^n \dfrac {|a_i|+|a_j|}{|a_i\cup a_j|}-1\\
&amp;amp;=|a_i|\cdot\left(\sum_{j=1}^n\dfrac 1{|a_i\cup a_j|}\right)-n+\sum_{j=1}^n \dfrac {|a_j|}{|a_i\cup a_j|}
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;问题转化为求解 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j=1}^n\dfrac 1{|a_i\cup a_j|}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j=1}^n\dfrac {|a_j|}{|a_i\cup a_j|}\)&lt;/span&gt;，以 &lt;span class=&#34;math inline&#34;&gt;\(*=\sum\limits_{j=1}^n\dfrac 1{|a_i\cup a_j|}\)&lt;/span&gt; 为例。令 &lt;span class=&#34;math inline&#34;&gt;\(b_i\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 补集，则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
*&amp;amp;=\sum\limits_{j=1}^n\dfrac 1{|a_i\cup a_j|}\\
&amp;amp;=\sum_{j=1}^n\dfrac 1{k-|b_i\cap b_j|}
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为什么要做这个转换呢？相比起并集运算，交集运算有着优秀的性质：&lt;span class=&#34;math inline&#34;&gt;\(s\subseteq(b_i\cap b_j)\iff s\subseteq b_i\land s\subseteq b_j\)&lt;/span&gt;，&lt;del&gt;直接取或当然也有相似的性质，但是太烧脑了&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;基于这个性质，我们有一个想法：对于所有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\(\forall \, s\subseteq b_j\)&lt;/span&gt; 处放置 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac 1{k-|s|}\)&lt;/span&gt; 的贡献；对于 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，将 &lt;span class=&#34;math inline&#34;&gt;\(\forall \, s\subseteq b_i\)&lt;/span&gt; 处的贡献求和。但是这样肯定会拿到很多我们不想要的贡献，例如 &lt;span class=&#34;math inline&#34;&gt;\(\forall \, s\subset (b_i\cap b_j)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑精细布置贡献——构造 &lt;span class=&#34;math inline&#34;&gt;\(g(|s|)\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j=1}^n\sum\limits_{s\subseteq b_j}g(|s|)=*\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这里可以二项式反演得到 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt;，具体地，令 &lt;span class=&#34;math inline&#34;&gt;\(F(|S|)=\dfrac 1{k-|S|}=\sum\limits_{s\subseteq S}g(|s|)=\sum\limits_{j=0}^{|S|} C_{|S|}^j g(j)\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(g(i)=\sum\limits_{j=0}^iC_i^j\cdot \dfrac {(-1)^{i-j}}{k-j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;再令 &lt;span class=&#34;math inline&#34;&gt;\(h(s)=\sum\limits_{b_j\supseteq s}g(|s|)=g(|s|)\cdot \sum\limits_{b_j\supseteq s}1\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 就是高维后缀和。我们正在做的事情就是求解 &lt;span class=&#34;math inline&#34;&gt;\(*=\sum\limits_{s\subseteq b_i}h(s)\)&lt;/span&gt;，这就又是一个高维前缀和了。&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j=1}^n\dfrac {|a_j|}{|a_i\cup a_j|}\)&lt;/span&gt; 呢，令 &lt;span class=&#34;math inline&#34;&gt;\(h(s)=\sum\limits_{b_j\supseteq s}g(|s|)\cdot {\color{red}{|a_j|}} = g(|s|) \cdot \sum\limits_{b_j\supseteq s} \color{red}{k - |b_j|}\)&lt;/span&gt;，改变高维后缀和求和对象即可。&lt;/p&gt;
&lt;p&gt;复杂度就是 &lt;span class=&#34;math inline&#34;&gt;\(O(n+k\cdot 2^k)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(k\cdot 2^k\)&lt;/span&gt; 来自整体高维前 / 后缀和，&lt;span class=&#34;math inline&#34;&gt;\(n\cdot k\)&lt;/span&gt; 来自枚举 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k, l;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k, l = 1 &amp;lt;&amp;lt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(n + 1), cnt(l);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i], b[i] = (l - 1) ^ a[i];
        ++cnt[b[i]];
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; g(k + 1), fac(k + 1);
    auto qkp = [&amp;amp;](long long x, int y = mod - 2) &amp;#123;
        auto res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * qkp(fac[n - m]) % mod * qkp(fac[m]) % mod;
    &amp;#125;;
    fac[0] = 1ll;
    for (int i = 1; i &amp;lt;= k; ++i)
        fac[i] = fac[i - 1] * i % mod;
    for (int i = 0; i &amp;lt;= k; ++i) &amp;#123;
        for (int j = 0, p = (i &amp;amp; 1) ? mod - 1 : 1; j &amp;lt;= i; ++j, p = mod - p)
            (g[i] += C(i, j) * p % mod * qkp(k - j) % mod) %= mod;
        // printf(&amp;quot;g[%d] = %lld\n&amp;quot;, i, g[i]);
    &amp;#125;
    // for (int i = 0; i &amp;lt;= k; ++i) &amp;#123;
    //     long long F = 0ll;
    //     for (int j = 0; j &amp;lt;= i; ++j)
    //         (F += C(i, j) * g[j] % mod) %= mod;
    //     printf(&amp;quot;%d: %lld / %lld\n&amp;quot;, i, F, qkp(k - i));
    // &amp;#125;
    std::vector&amp;lt;long long&amp;gt; h(l);
    std::copy(cnt.begin(), cnt.end(), h.begin());
    for (int i = 0; i &amp;lt; k; ++i)
        for (int j = l - 1; ~j; --j)
            if (!((j &amp;gt;&amp;gt; i) &amp;amp; 1))
                (h[j] += h[j ^ (1 &amp;lt;&amp;lt; i)]) %= mod;
    auto f1(h);
    for (int i = 0; i &amp;lt; l; ++i)
        (f1[i] *= g[__builtin_popcount(i)]) %= mod;
    for (int i = 0; i &amp;lt; k; ++i)
        for (int j = 0; j &amp;lt; l; ++j)
            if ((j &amp;gt;&amp;gt; i) &amp;amp; 1)
                (f1[j] += f1[j ^ (1 &amp;lt;&amp;lt; i)]) %= mod;
    for (int i = 0; i &amp;lt; l; ++i)
        h[i] = cnt[i] * (k - __builtin_popcount(i));
    for (int i = 0; i &amp;lt; k; ++i)
        for (int j = l - 1; ~j; --j)
            if (!((j &amp;gt;&amp;gt; i) &amp;amp; 1))
                (h[j] += h[j ^ (1 &amp;lt;&amp;lt; i)]) %= mod;
    auto f2(h);
    for (int i = 0; i &amp;lt; l; ++i)
        (f2[i] *= g[__builtin_popcount(i)]) %= mod;
    for (int i = 0; i &amp;lt; k; ++i)
        for (int j = 0; j &amp;lt; l; ++j)
            if ((j &amp;gt;&amp;gt; i) &amp;amp; 1)
                (f2[j] += f2[j ^ (1 &amp;lt;&amp;lt; i)]) %= mod;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        // fprintf(stderr, &amp;quot;%d: %d * %lld - %d + %lld\n&amp;quot;, i, __builtin_popcount(a[i]), f1[b[i]], n, f2[b[i]]);
        std::cout &amp;lt;&amp;lt; (__builtin_popcount(a[i]) * f1[b[i]] % mod + mod - n + f2[b[i]]) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---prefix-xors&#34;&gt;E - Prefix XORs&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc137/tasks/arc137_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/arc137/tasks/arc137_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;省流：做 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次前缀和，&lt;span class=&#34;math inline&#34;&gt;\(k=1,2,\cdots,m\)&lt;/span&gt;，分别询问：令 &lt;span class=&#34;math inline&#34;&gt;\(x_i\gets a_i\)&lt;/span&gt; 对 &lt;span class=&#34;math inline&#34;&gt;\(s_n\)&lt;/span&gt; 的贡献次数，则 &lt;span class=&#34;math inline&#34;&gt;\(\sum a_i\cdot (x_i\bmod 2)\)&lt;/span&gt;？&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(a_p\)&lt;/span&gt;，容易发现第一轮其对任意 &lt;span class=&#34;math inline&#34;&gt;\(s_q\)&lt;/span&gt; 有 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 次贡献，拉开来就是常数列；第二轮有 &lt;span class=&#34;math inline&#34;&gt;\((q-p+1)\)&lt;/span&gt; 次贡献，是公差为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的等差数列；第三轮是类三角形数——至此，肯定和组合数有关了。手玩可以发现第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 轮 &lt;span class=&#34;math inline&#34;&gt;\(a_p\)&lt;/span&gt; 对 &lt;span class=&#34;math inline&#34;&gt;\(s_n\)&lt;/span&gt; 的贡献为 &lt;span class=&#34;math inline&#34;&gt;\(C_{n-p+(k-2)}^{n-p}\)&lt;/span&gt;，尽量令其中一个不动，得到 &lt;span class=&#34;math inline&#34;&gt;\(C_{n-p+(k-2)}^{k-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但是我们发现直接枚举每轮每个数会起飞，而且模数为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 似乎只能 Lucas（再带个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;），怎么办呢？&lt;/p&gt;
&lt;p&gt;那就 Lucas 呗。由其观察容易发现 &lt;span class=&#34;math inline&#34;&gt;\(C_{n-p+(k-2)}^{k-2}\bmod2=1\)&lt;/span&gt; 当且仅当 &lt;span class=&#34;math inline&#34;&gt;\((k-2)\subseteq (n-p+k-2)\iff (k-2)\subseteq \complement_U(n-p)\)&lt;/span&gt;，故问题转化为高维后缀和，&lt;del&gt;当然你也可以做一次 and-FWT&lt;/del&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(res_k=\sum (C_{n-p+(k-2)}^{k-2}\bmod 2)\cdot a_p=S_{k-2}\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 为高维后缀和，初值为 &lt;span class=&#34;math inline&#34;&gt;\(S_{\complement_u(n-i)}\gets a_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, l, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m, k = std::__lg(n + m) + 1, l = 1 &amp;lt;&amp;lt; k;
    std::vector&amp;lt;int&amp;gt; s(l);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; s[l - 1 - (n - i)];
    for (int i = 0; i &amp;lt; k; ++i)
        for (int j = l - 1; ~j; --j)
            if (!((j &amp;gt;&amp;gt; i) &amp;amp; 1))
                s[j] ^= s[j ^ (1 &amp;lt;&amp;lt; i)];
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; s[i - 1] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---the-top-scorer&#34;&gt;B - The Top Scorer&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1096/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1096/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;鉴于每种方案等概率（翻译没说，但原题面有提到），考虑计算小明能够取胜的方案数，再对总方案数做除法。先枚举最高分 &lt;span class=&#34;math inline&#34;&gt;\(k\ge r\)&lt;/span&gt;，再枚举包括小明在内恰有 &lt;span class=&#34;math inline&#34;&gt;\(c\ge 1\)&lt;/span&gt; 个人 拿到 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 分。但剩下的人呢？显然是不能插板随机分配的，因为存在 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;k\)&lt;/span&gt; 的限制。&lt;/p&gt;
&lt;p&gt;考虑容斥，钦定剩下的 &lt;span class=&#34;math inline&#34;&gt;\(p-c\)&lt;/span&gt; 个人中拿到 &lt;span class=&#34;math inline&#34;&gt;\(\ge k\)&lt;/span&gt; 分的人数后再可空地插板即可，则总方案数为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\sum_{k=r}^s\sum_{c=1}^p\dfrac {C_{p - 1}^{c-1}}c\cdot \sum_{i=0}^{p-c}C_{p-c}^i\cdot C_{s-k\cdot (c+i)+(p-c-1)}^{p-c-1}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中分母上的 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 来源于等概率分配给最高分，虽然不是整数，但也代表着「小明获胜可行方案数」。最后将答案除上总方案数 &lt;span class=&#34;math inline&#34;&gt;\(C_{s-r+p-1}^{p-1}\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int p, s, r;
    std::cin &amp;gt;&amp;gt; p &amp;gt;&amp;gt; s &amp;gt;&amp;gt; r;
    std::vector&amp;lt;long long&amp;gt; fac(s + p), inv(s + p);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt; s + p; ++i) &amp;#123;
        fac[i] = fac[i - 1] * i % mod;
    &amp;#125;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv.back() = qkp(fac.back(), mod - 2);
    for (int i = s + p - 2; i &amp;gt; 0; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        if (n == -1 &amp;amp;&amp;amp; m == -1)
            return 1ll;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    auto res(0ll);
    for (int k = r; k &amp;lt;= s; ++k)
        for (int c = 1; c &amp;lt;= p; ++c)
            if ((p - c) * (k - 1) + c * k &amp;gt;= s) &amp;#123;
                auto t(0ll);
                for (int i = 0, now = 1; i &amp;lt;= p - c &amp;amp;&amp;amp; k * (c + i) &amp;lt;= s; ++i, now = mod - now)
                    (t += now * C(p - c, i) % mod * C(s - k * (c + i) + (p - c - 1), p - c - 1) % mod) %= mod;
                (res += C(p - 1, c - 1) * qkp(c, mod - 2) % mod * t % mod) %= mod;
            &amp;#125;
    std::cout &amp;lt;&amp;lt; res * qkp(C(s - r + p - 1, p - 1), mod - 2) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c---sky-full-of-stars&#34;&gt;C - Sky Full of Stars&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/997/C&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/997/C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现用 &lt;span class=&#34;math inline&#34;&gt;\(3^{n\times n}\)&lt;/span&gt; 减去任意一行一列不同色的方案就是答案。&lt;/p&gt;
&lt;p&gt;考虑一元容斥，如令 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示至少 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 列同色的方案，但会发现 &lt;span class=&#34;math inline&#34;&gt;\(f_0\)&lt;/span&gt; 中包含 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 行 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 列同色等与预期不符的情况。受此启发考虑令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示至少 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 列同色进行二元容斥。容易发现当 &lt;span class=&#34;math inline&#34;&gt;\(i\times j\ne 0\)&lt;/span&gt; 时，被选中的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 列全部连通，应为同一种颜色；将它们挪到角落，可以发现未被选中的格子共有 &lt;span class=&#34;math inline&#34;&gt;\((n-i)\times (n-j)\)&lt;/span&gt; 个。故有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,j}=\begin{cases}
C_n^j\times 3^j\times 3^{n\times(n - j)}&amp;amp;i=0\\
C_n^i\times 3^i\times 3^{n\times(n-i)}&amp;amp;j=0\\
C_n^i\times C_n^j\times 3\times 3^{(n-i)\times (n-j)}&amp;amp;\text{otherwise}
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(g_{i,j}\)&lt;/span&gt; 表示恰好 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 列同色的方案数，那么答案为 &lt;span class=&#34;math inline&#34;&gt;\(3^{n\times n}-g_{0,0}\)&lt;/span&gt;。二项式反演 / 容斥原理得 &lt;span class=&#34;math inline&#34;&gt;\(g_{0,0}=\sum\limits_{i=0}^n\sum\limits_{j=0}^n (-1)^{i+j}\cdot f_{i,j}\)&lt;/span&gt;。很惊讶地发现这是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 的！考虑优化。把 &lt;span class=&#34;math inline&#34;&gt;\(f_{1\to n,1\to n}\)&lt;/span&gt; 合并同类项，得到：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
g_{0, 0}
&amp;amp;=\left[\sum_{j=0}^n (-1)^j\cdot f_{0,j}\right]+\sum_{i=1}^n (-1)^i\cdot f_{i,0}+\sum_{j=1}^n (-1)^{i+j}\cdot C_n^i\times C_n^j\times 3^{(n-i)\times (n-j)+1}\\
&amp;amp;=\left[\sum_{j=0}^n (-1)^j\cdot f_{0,j}\right]+\sum_{i=1}^n (-1)^i\cdot f_{i,0}+(-1)^i\cdot C_n^i\times 3^{n^2-n\times i+1}\times\sum_{j=1}^n (-1)^j\cdot C_n^j\times 3^{j\times(-n+i)}\\
&amp;amp;=\left[\sum_{j=0}^n (-1)^j\cdot f_{0,j}\right]+\sum_{i=1}^n (-1)^i\cdot f_{i,0}+(-1)^i\cdot C_n^i\times 3^{n^2-n\times i+1}\times\left[\left(\sum_{j=0}^n (-1)^j\cdot C_n^j\times (3^{-n+i})^j\right)-1\right]\\
&amp;amp;=\left[\sum_{j=0}^n (-1)^j\cdot f_{0,j}\right]+\sum_{i=1}^n (-1)^i\cdot f_{i,0}+(-1)^i\cdot C_n^i\times 3^{n^2-n\times i+1}\times\left[(-3^{-n+i}+1)^n-1\right]
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;由此便可 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 计算。担心超时可以把所有 &lt;span class=&#34;math inline&#34;&gt;\(3^{-n+i}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(3^{n\times i}\)&lt;/span&gt; 线性预处理出来，复杂度不会变就是了。&lt;/p&gt;
&lt;p&gt;这里解释一下最后一步的二项式定理，非常遗憾地发现 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(3^{-n+i}\)&lt;/span&gt; 都是 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 次的，没办法把二者相加减做二项式定理；但由于次数相同，这提示我们可以把 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 乘到 &lt;span class=&#34;math inline&#34;&gt;\(3^{-n+i}\)&lt;/span&gt; 里去，给每一项配上 &lt;span class=&#34;math inline&#34;&gt;\(1^{n-k}\)&lt;/span&gt; 就可以做 &lt;span class=&#34;math inline&#34;&gt;\(-3^{n-i}\)&lt;/span&gt;（注意不是 &lt;span class=&#34;math inline&#34;&gt;\((-3)^{n-i}\)&lt;/span&gt;） 和 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的二项式定理。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    long long n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1), invn(n + 1), invi(n + 1), powi(n + 1), pown(n + 1);
    auto qkp = [&amp;amp;](long long x, long long y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    const long long pnn = qkp(3ll, n * n), pn = qkp(3ll, n);
    fac[0] = inv[0] = invn[0] = invi[0] = powi[0] = pown[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        fac[i] = fac[i - 1] * i % mod;
        powi[i] = powi[i - 1] * 3 % mod;
        pown[i] = pown[i - 1] * pn % mod;
    &amp;#125;
    inv[n] = qkp(fac[n], mod - 2);
    invi[n] = qkp(powi[n], mod - 2);
    invn[n] = qkp(pown[n], mod - 2);
    for (int i = n - 1; i; --i) &amp;#123;
        inv[i] = inv[i + 1] * (i + 1) % mod;
        invi[i] = invi[i + 1] * 3 % mod;
        invn[i] = invn[i + 1] * pn % mod;
    &amp;#125;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    long long g = 0ll;
    auto f = [&amp;amp;](int i, int j) &amp;#123; // make sure (!i || !j)
        if (i == 0 &amp;amp;&amp;amp; j == 0)
            return pnn;
        else if (i == 0)
            return C(n, j) * powi[j] % mod * pown[n - j] % mod;
        return C(n, i) * powi[i] % mod * pown[n - i] % mod;
    &amp;#125;;
    for (int j = 0, p = 1; j &amp;lt;= n; ++j, p = mod - p)
        (g += p * f(0, j)) %= mod;
    for (int i = 1, p = mod - 1; i &amp;lt;= n; ++i, p = mod - p)
        (g += p * f(i, 0) % mod + p * C(n, i) % mod * pnn % mod * invn[i] % mod * 3 % mod * (qkp(mod - invi[n - i] + 1, n) + mod - 1) % mod) %= mod;
    std::cout &amp;lt;&amp;lt; (pnn + mod - g) % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d---去-m-nom&#34;&gt;D - 去 M / NoM&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11316&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11316&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设 &lt;span class=&#34;math inline&#34;&gt;\(f(i)\)&lt;/span&gt; 为至少有 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 对不合法元素的方案数，则容斥得到答案 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=0}^n (-1)^i\cdot f(i)\)&lt;/span&gt;。考虑怎么计算 &lt;span class=&#34;math inline&#34;&gt;\(f(i)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 整除 &lt;span class=&#34;math inline&#34;&gt;\(dis(x, y) \iff (pos_x - pos_y)\bmod M=0\iff pos_x\equiv pos_y\pmod M\)&lt;/span&gt;。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;考虑把关于 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 同余的位置放在一个组，也就是说需要让一对元素不能选同一组的位置。&lt;/p&gt;
&lt;p&gt;考虑容斥，令 &lt;span class=&#34;math inline&#34;&gt;\(f(i)\)&lt;/span&gt; 表示至少有 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 对点选到一组的方案数，考虑怎么计算。假设我们要在第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 组（size 为 &lt;span class=&#34;math inline&#34;&gt;\(s_k\)&lt;/span&gt;）中选出 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 对位置，实际上只需要选择 &lt;span class=&#34;math inline&#34;&gt;\(2x\)&lt;/span&gt; 个位置然后任意分配给这 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 对数，即 &lt;span class=&#34;math inline&#34;&gt;\(A_{s_k}^{2x}\)&lt;/span&gt;。设 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i, j}\)&lt;/span&gt; 表示 DP 到第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个组，已经选了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 对，那么有 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i,j}=\sum\limits_{k=0}^jC_{n-(j - k)}^{j-k}\times dp_{i-1,j-k}\times A_{s_i}^{2k}\)&lt;/span&gt;。乍一看好像是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt; 的，但是别忘了 &lt;span class=&#34;math inline&#34;&gt;\(\sum s_i=2n\)&lt;/span&gt;，所以只有 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(f(i)\)&lt;/span&gt; 即为 &lt;span class=&#34;math inline&#34;&gt;\(dp_{m,i}\times (2n-2i)!\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; s(m + 1);
    std::vector&amp;lt;long long&amp;gt; fac(2 * n + 1), inv(2 * n + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= 2 * n; ++i)
        ++s[i % m + 1], fac[i] = fac[i - 1] * i % mod;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[2 * n] = qkp(fac[2 * n], mod - 2);
    for (int i = 2 * n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto A = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod;
    &amp;#125;;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; dp(m + 1, std::vector&amp;lt;long long&amp;gt; (n + 1));
    dp[0][0] = 1ll;
    for (int i = 1; i &amp;lt;= m; ++i)
        for (int j = 0; j &amp;lt;= n; ++j) &amp;#123;
            for (int k = 0; k &amp;lt;= j &amp;amp;&amp;amp; 2 * k &amp;lt;= s[i]; ++k)
                (dp[i][j] += C(n - (j - k), k) * dp[i - 1][j - k] % mod * A(s[i], 2 * k) % mod) %= mod;
            // printf(&amp;quot;s = %d, dp[%d][%d] = %lld\n&amp;quot;, s[i], i, j, dp[i][j]);
        &amp;#125;
    long long res = 0ll;
    for (int i = 0, p = 1; i &amp;lt;= n; ++i, p = mod - p)
        (res += p * dp[m][i] % mod * fac[2 * n - 2 * i] % mod) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;e---kdoi-11彩灯晚会&#34;&gt;E - 「KDOI-11」彩灯晚会&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P11292&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P11292&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑 &lt;span class=&#34;math inline&#34;&gt;\({cnt_i}^2\)&lt;/span&gt; 的含义，即在所有颜色为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;、长度为 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 的链中有放回地选两次的方案数。&lt;/p&gt;
&lt;p&gt;显然复杂度里是不能包含 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的，所以放弃直接统计 &lt;span class=&#34;math inline&#34;&gt;\(cnt_i\)&lt;/span&gt; 的想法。显然每种颜色是等价的，考虑计算选择两条链可以给答案带来的贡献：答案的形式是个和式；对于两条同色链 &lt;span class=&#34;math inline&#34;&gt;\(p,q\)&lt;/span&gt;，假设颜色为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，那么会对 &lt;span class=&#34;math inline&#34;&gt;\({cnt_i}^2\)&lt;/span&gt; 带来 &lt;span class=&#34;math inline&#34;&gt;\(k^{n-2l-|p\cap q|}\)&lt;/span&gt; 的贡献，对总答案带来 &lt;span class=&#34;math inline&#34;&gt;\(k^{n-2l-|p\cap q| + 1}\)&lt;/span&gt; 的贡献。&lt;/p&gt;
&lt;p&gt;然而如果要枚举计算 &lt;span class=&#34;math inline&#34;&gt;\(|p\cap q|\)&lt;/span&gt; 就无法避免 &lt;span class=&#34;math inline&#34;&gt;\(O(n^5)\)&lt;/span&gt;，考虑更有潜力的方法：将问题转化为对于每个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，求交集大小恰好为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的链对个数。然而「恰好」是不方便计算的——假如当前两链在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 次重合，如果假设下一次在 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 次重合，就需要保证在 &lt;span class=&#34;math inline&#34;&gt;\(u,v\)&lt;/span&gt; 之间不能重合——这并不好操作。二项式反演将恰好转化为至少，则限制减弱。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,c,l_1,l_2}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(p,q\)&lt;/span&gt; 当前在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 处重合，视野内的 &lt;span class=&#34;math inline&#34;&gt;\(p,q\)&lt;/span&gt; 长度为 &lt;span class=&#34;math inline&#34;&gt;\(l_1,l_2\)&lt;/span&gt;，至少已经重合了 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 次的方案数。预处理出走到 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 步数为 &lt;span class=&#34;math inline&#34;&gt;\(l_1,l_2\)&lt;/span&gt; 的方案数为初始值。枚举可能的后续重合点 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;（满足 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的拓扑序 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;u\)&lt;/span&gt;）有 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,c+1,l_1&amp;#39;,l_2&amp;#39;}\gets f_{v,c+1,l_1&amp;#39;,l_2&amp;#39;} + f_{u,c,l_1,l_2}\)&lt;/span&gt;。预处理出 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt; 长度为 &lt;span class=&#34;math inline&#34;&gt;\(\Delta\)&lt;/span&gt; 的方案数（这是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3l)\)&lt;/span&gt; 的）优化转移，在算出 &lt;span class=&#34;math inline&#34;&gt;\(nex_{u,l}\)&lt;/span&gt; 表示从 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 出发走 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 步的方案数处理答案，则 &lt;span class=&#34;math inline&#34;&gt;\(F(i)=\sum_{u,l_1,l_2}f_{u,l_1,l_2}\cdot nex_{u,l-l_1}\cdot nex_{u,l-l_2}\)&lt;/span&gt;，枚举 &lt;span class=&#34;math inline&#34;&gt;\(u,c,l_1,l_2,v,l_1&amp;#39;,l_2&amp;#39;\)&lt;/span&gt;，就可以达到优秀的 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2l^5+n^3l)\)&lt;/span&gt;！简直是令人震撼 &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;给出第一个优化：发现 &lt;span class=&#34;math inline&#34;&gt;\(l_1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(l_2\)&lt;/span&gt; 的转移彼此不干扰，考虑建立一个临时数组 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt;，先从 &lt;span class=&#34;math inline&#34;&gt;\(f_u,c\)&lt;/span&gt; 转移 &lt;span class=&#34;math inline&#34;&gt;\(l_1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt;，再从 &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; 转移 &lt;span class=&#34;math inline&#34;&gt;\(l_2\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,c+1}\)&lt;/span&gt;，则复杂度降为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2l^4+n^3l)\)&lt;/span&gt;，仍不足以通过。&lt;/p&gt;
&lt;p&gt;DP 过程上的优化已经万策尽，考虑从式子本身消元减少 DP 维度入手。令 &lt;span class=&#34;math inline&#34;&gt;\(h(i)\)&lt;/span&gt; 表示交集大小恰好恰好为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的方案数，则此时答案式为 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=0}^l k^{n-2l+i+1}\times h(i)\)&lt;/span&gt;。又 &lt;span class=&#34;math inline&#34;&gt;\(F(i)=\sum\limits_{j=i}^lC_j^i\cdot h(j)\)&lt;/span&gt;，二项式反演得：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
res&amp;amp;=\sum\limits_{i=0}^lk^{n-2l+i+1}\cdot \sum_{j=i}^l(-1)^{j-i}\cdot C_j^i\cdot F(j)\\
&amp;amp;=k^{n-2l+1}\cdot\sum_{j=0}^l \sum_{i=0}^j k^i\cdot (-1)^{j-i}\cdot C_j^i\cdot F(j)\\
&amp;amp;=k^{n-2l+1}\cdot \sum_{j=0}^l (k-1)^j\cdot F(j)
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;注意这里利用了二项式反演的系数可以和交换求和顺序后的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 次项（或 &lt;span class=&#34;math inline&#34;&gt;\(j-i\)&lt;/span&gt; 次项，参见 &lt;a href=&#34;#c---sky-full-of-stars&#34;&gt;Sky Full of Stars 中最后一步的处理&lt;/a&gt;）组成二项式定理的特点&lt;/mark&gt;，以便基于式子结构尽可能消元。&lt;/p&gt;
&lt;p&gt;那么此时答案式已经和 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 无关，可以丢掉 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 这一维，和 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 有关的计算已经在转移时处理了。则 &lt;span class=&#34;math inline&#34;&gt;\(f_{v,l_1&amp;#39;,l_2&amp;#39;}=\sum f_{u,l_1,l_2}\times (k-1)\)&lt;/span&gt;，复杂度降为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2l^3+n^3l)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;记得还要算上 &lt;span class=&#34;math inline&#34;&gt;\(F(0)\)&lt;/span&gt;，即任选一条合法链的方案数平方。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;// 兄弟你好香
// 兄弟你是依托打分，我踏马吃吃吃吃吃
#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;party3.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using arrr = std::vector&amp;lt;arr&amp;gt;;
    using arrrr = std::vector&amp;lt;arrr&amp;gt;;
    int n, k, l, m;
    std::cin &amp;gt;&amp;gt; n, std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k &amp;gt;&amp;gt; l &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; deg(n + 1), id;
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(n + 1);
    for (int x, y, c; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; c;
        ++deg[y], g[x].emplace_back(y, c);
    &amp;#125;
    arrrr to(n + 1, arrr(n + 1, arr(l + 1)));
    arrr pre(n + 1, arr(l + 1)), nex(n + 1, arr(l + 1));
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 1; i &amp;lt;= n; ++i)
            if (!deg[i])
                q.push(i);
        for (int u; !q.empty(); ) &amp;#123;
            u = q.front(), q.pop();
            to[u][u][0] = 1ll, id.push_back(u);
            for (auto i : id)
                for (int j = 0; j &amp;lt;= l; ++j) &amp;#123;
                    (pre[u][j] += to[i][u][j]) %= mod;
                    // printf(&amp;quot;to[%d][%d][%d] = %lld\n&amp;quot;, i, u, j, to[i][u][j]);
                &amp;#125;
            // for (int j = 0; j &amp;lt;= l; ++j)
            //     printf(&amp;quot;pre[%d][%d] = %lld\n&amp;quot;, u, j, pre[u][j]);
            for (auto [v, c] : g[u]) &amp;#123;
                for (auto i : id)
                    for (int j = 1; j &amp;lt;= l; ++j)
                        (to[i][v][j] += to[i][u][j - 1] * c) %= mod;
                if (!--deg[v])
                    q.push(v);
            &amp;#125;
        &amp;#125;
        for (int u = 1; u &amp;lt;= n; ++u)
            for (int v = 1; v &amp;lt;= n; ++v)
                for (int i = 0; i &amp;lt;= l; ++i)
                    (nex[u][i] += to[u][v][i]) %= mod;
    &amp;#125;
    arrrr f(n + 1, arrr(l + 1, arr(l + 1)));
    &amp;#123;
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int l1 = 1; l1 &amp;lt;= l; ++l1)
                for (int l2 = 1; l2 &amp;lt;= l; ++l2)
                    f[i][l1][l2] = pre[i][l1 - 1] * pre[i][l2 - 1] % mod * (k - 1) % mod;
        for (auto i = 0; i &amp;lt; n; ++i) &amp;#123;
            int u = id[i];
            // for (int l1 = 1; l1 &amp;lt;= l; ++l1)
            //     for (int l2 = 1; l2 &amp;lt;= l; ++l2)
            //         printf(&amp;quot;f[%d][%d][%d] = %lld\n&amp;quot;, u, l1, l2, f[u][l1][l2]);
            for (auto j = i + 1; j &amp;lt; n; ++j) &amp;#123;
                arrr g(l + 1, arr(l + 1));
                int v = id[j];
                for (int l1 = 1; l1 &amp;lt; l; ++l1)
                    for (int _l1 = l1 + 1; _l1 &amp;lt;= l; ++_l1) &amp;#123;
                        auto K = to[u][v][_l1 - l1];
                        if (K)
                            for (int l2 = 1; l2 &amp;lt; l; ++l2)
                                (g[_l1][l2] += f[u][l1][l2] * K) %= mod;
                    &amp;#125;
                for (int _l1 = 2; _l1 &amp;lt;= l; ++_l1)
                    for (int l2 = 1; l2 &amp;lt; l; ++l2)
                        if (g[_l1][l2])
                            for (int _l2 = l2 + 1; _l2 &amp;lt;= l; ++_l2)
                                (f[v][_l1][_l2] += g[_l1][l2] * to[u][v][_l2 - l2] % mod * (k - 1)) %= mod; 
            &amp;#125;
        &amp;#125;
    &amp;#125;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto res(0ll);
    for (int u = 1; u &amp;lt;= n; ++u)
        for (int v = 1; v &amp;lt;= n; ++v)
            (res += to[u][v][l - 1]) %= mod;
    (res *= res) %= mod;
    for (int u = 1; u &amp;lt;= n; ++u)
        for (int l1 = 1; l1 &amp;lt;= l; ++l1)
            for (int l2 = 1; l2 &amp;lt;= l; ++l2)
                (res += f[u][l1][l2] * nex[u][l - l1] % mod * nex[u][l - l2] % mod) %= mod;
    res = res % mod * (qkp(k, n + 1) * qkp(qkp(k, 2 * l), mod - 2) % mod) % mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;g---小星星&#34;&gt;G - 小星星&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3349&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3349&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先考虑比较暴力的做法，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,S}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 这个子树里面选了集合 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的颜色为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数，维数里之所以有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 是为了满足连边限制。&lt;/p&gt;
&lt;p&gt;然后树上子集 DP，发现是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^4\cdot 2^n)\)&lt;/span&gt; 的，&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cf785d-anton-and-school---2&#34;&gt;CF785D Anton and School - 2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/785/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/785/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易想到枚举每个 &lt;code&gt;(&lt;/code&gt; 作为分界点的情况，那么钦定当前枚举的 &lt;code&gt;(&lt;/code&gt; 是要选的。对于当前 &lt;code&gt;(&lt;/code&gt;，若其左边（不含）的 &lt;code&gt;(&lt;/code&gt; 有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个而右边的 &lt;code&gt;)&lt;/code&gt; 有 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个，枚举除了当前 &lt;code&gt;(&lt;/code&gt; 还要选 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个 &lt;code&gt;(&lt;/code&gt;，那么答案为 &lt;span class=&#34;math inline&#34;&gt;\(\sum_{i=0}C_n^{i-1}\cdot C_m^i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;发现这个形式可以范德蒙德卷积：&lt;span class=&#34;math inline&#34;&gt;\(\sum_{i=0}C_n^{i-1}\cdot C_m^i=\sum_{i=0}C_n^{n-i+1}\cdot C_m^i=C_{n+m}^{n+1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;关于怎么记忆范德蒙德卷积，发现上下相加，也可以从组合意义记忆：在 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个球中选出 &lt;span class=&#34;math inline&#34;&gt;\(k-i\)&lt;/span&gt; 个球，再从 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个球中选出 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个球的总方案就是从 &lt;span class=&#34;math inline&#34;&gt;\(n+m\)&lt;/span&gt; 个球中直接选出 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个球的方案。&lt;/p&gt;
&lt;p&gt;注意判断右侧没有 &lt;code&gt;)&lt;/code&gt; 的时候贡献为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    int n = s.length();
    s = &amp;quot; &amp;quot; + s;
    std::vector&amp;lt;int&amp;gt; cnt1(n + 1), cnt2(n + 1);
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1);
    fac[0] = inv[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        fac[i] = fac[i - 1] * i % mod;
        cnt1[i] = cnt1[i - 1] + (s[i] == &amp;#39;(&amp;#39;);
    &amp;#125;
    auto qkp = [](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    cnt2[n] = (s[n] == &amp;#39;)&amp;#39;);
    for (int i = n - 1; i; --i) &amp;#123;
        cnt2[i] = cnt2[i + 1] + (s[i] == &amp;#39;)&amp;#39;);
        inv[i] = inv[i + 1] * (i + 1) % mod;
    &amp;#125;
    long long res = 0ll;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        if (n &amp;lt; m)
            return 0ll;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (s[i] == &amp;#39;(&amp;#39;)
            (res += C(cnt1[i] + cnt2[i] - 1, cnt1[i])) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;cf1332e-height-all-the-same&#34;&gt;CF1332E Height All the Same&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1332/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1332/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易发现第一个操作是用来改变两个数奇偶性的；而第二个操作能在全图奇偶性相同的任何情况下达成要求。&lt;/p&gt;
&lt;p&gt;注意到如果我们想同时仅改变任意两个数的奇偶性，可以在棋盘上任找一条路径一路使用操作一。只要某种奇偶性的元素个数共有偶数个，就能通过若干次操作一把它们全部变成另一种奇偶性。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(K_1\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(L\sim R\)&lt;/span&gt; 中奇数的个数，&lt;span class=&#34;math inline&#34;&gt;\(K_2\)&lt;/span&gt; 为偶数，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
res=\sum_{i=0}^{nm} C_{nm}^i\times {K_1}^i\cdot {K_2}^{nm-i}\cdot [i\bmod 2=0]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们发现这个东西和二项式定理简直像得不能再像了！但多了一个系数导致没办法省略枚举过程。如果进行变形呢？&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
res=(K_1+K_2)^{nm}-\sum_{i=0}^{nm} C_{nm}^i\times {K_1}^i\cdot {K_2}^{nm-i}\cdot [i\bmod 2=1]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;似乎依然没有出路！但这里有个神奇的操作：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
res=(-K_1+K_2)^{nm}+\sum_{i=0}^{nm} C_{nm}^i\times {K_1}^i\cdot {K_2}^i\cdot [i\bmod 2=1]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;二式相加就可以&lt;mark&gt;消元&lt;/mark&gt;，得到 &lt;span class=&#34;math inline&#34;&gt;\(2\cdot res=(K_1+K_2)^{nm}+(K_1-K_2)^{nm}\)&lt;/span&gt;。&lt;mark&gt;这启示我们二项式定理中的符号和奇偶性的深切联系。&lt;/mark&gt;&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;如果你使用费马小定理对次数进行了处理，你可能需要注意次数可能为 &lt;span class=&#34;math inline&#34;&gt;\(\text{mod} -1\)&lt;/span&gt; 的倍数。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
const int inv2 = 499122177;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    long long n, m, l, r, k1, k2;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r, k1 = (r - l + 1) / 2, k2 = (r - l + 1) - k1;
    auto qkp = [](long long x, long long y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    if (n * m % 2)
        std::cout &amp;lt;&amp;lt; qkp(r - l + 1, n * m) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    else
        std::cout &amp;lt;&amp;lt; (qkp(r - l + 1, n * m) + qkp((k1 + mod - k2) % mod, n * m)) % mod * inv2 % mod &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a---交错序列&#34;&gt;A - 交错序列&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4456&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4456&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;2.png&#34; alt=&#34;出题人疑似需要加强数学功底（？）&#34; /&gt;&lt;figcaption&gt;出题人疑似需要加强数学功底（？）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;容易想到把答案用二项式定理拆开：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
res&amp;amp;=\sum_y f_y\cdot y^b\cdot (n-y)^a\\
&amp;amp;=\sum_y f_y\cdot y^b\cdot \sum_{i=0}^a C_a^i\cdot n^i\cdot(-y)^{a-i}\\
&amp;amp;=\sum_y\sum_{i=0}^a f_y\cdot C_a^i\cdot n^i\cdot(-1)^{a-i}\cdot y^{a+b-i}\\
&amp;amp;=\sum_{i=0}^a C_a^i\cdot n^i\cdot(-1)^{a-i}\cdot \sum_y f_y\cdot y^{a+b-i}\\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后发现后面那个 sigma 不太有办法求。一个比较优雅的方法是把 &lt;span class=&#34;math inline&#34;&gt;\(y^{a+b-i}\)&lt;/span&gt; 直接作为系数而非下标塞到 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 里去，即令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(\forall \,y\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\sum y^i\)&lt;/span&gt; 之和。&lt;/p&gt;
&lt;p&gt;具体地，令 &lt;span class=&#34;math inline&#34;&gt;\(dp_{n,i,0/1}\)&lt;/span&gt; 表示当前 DP 到第 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 位，要求幂次为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，最后一位为 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt; 的答案。则显然有 &lt;span class=&#34;math inline&#34;&gt;\(dp_{n,i,0}=dp_{n-1,i,0}+dp_{n-1,i,1}\)&lt;/span&gt;。对于 &lt;span class=&#34;math inline&#34;&gt;\(dp_{n,i,1}\)&lt;/span&gt;，因为此时 &lt;span class=&#34;math inline&#34;&gt;\(\forall\, k,k\gets k+1\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\((k+1)^i=\sum\limits_{j=0}^i C_i^j \cdot k^j\)&lt;/span&gt; 即 &lt;span class=&#34;math inline&#34;&gt;\(dp_{n,i,1}=\sum\limits_{j=0}^i C_i^j\cdot dp_{n-1,j,0}\)&lt;/span&gt;。发现 &lt;span class=&#34;math inline&#34;&gt;\(i,j\)&lt;/span&gt; 的范围是 &lt;span class=&#34;math inline&#34;&gt;\(90\)&lt;/span&gt;，很恐怖的事情是这是可以矩阵的。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;就像我们都知道的那样，矩阵在加完之后再取模就会快很多……&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int mod;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, a, b;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt; mod;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; C(a + b + 1, std::vector&amp;lt;long long&amp;gt;(a + b + 1));
    for (int i = 0; i &amp;lt;= a + b; ++i) &amp;#123;
        C[i][0] = 1ll;
        for (int j = 1; j &amp;lt;= i; ++j)
            C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % mod;
    &amp;#125;
    struct mat &amp;#123;
        int n, m;
        std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; a;
        mat(int n, int m, bool flag = 0): n(n), m(m), a(n, std::vector&amp;lt;long long&amp;gt; (m)) &amp;#123;
            if (flag)
                for (int i = 0; i &amp;lt; n; ++i)
                    a[i][i] = 1ll;
            return;
        &amp;#125;
        mat operator* (const mat &amp;amp;q) const &amp;#123;
            mat res(n, q.m);
            for (int i = 0; i &amp;lt; n; ++i)
                for (int k = 0; k &amp;lt; q.m; ++k) &amp;#123;
                    for (int j = 0; j &amp;lt; m; ++j)
                        res.a[i][k] += a[i][j] * q.a[j][k];
                    res.a[i][k] %= mod;
                &amp;#125;
            return res;
        &amp;#125;
        mat operator^ (int q) const &amp;#123;
            mat res(n, n, 1), x(*this);
            for (; q; x = x * x, q &amp;gt;&amp;gt;= 1)
                if (q &amp;amp; 1)
                    res = res * x;
            return res;
        &amp;#125;
    &amp;#125; f(1, 2 * (a + b + 1)), op(2 * (a + b + 1), 2 * (a + b + 1));
    auto fun = [&amp;amp;](int i, int j) &amp;#123;
        return i + j * (a + b + 1);
    &amp;#125;;
    f.a[0][fun(0, 0)] = 1ll;
    for (int i = 0; i &amp;lt;= a + b; ++i)
        op.a[fun(i, 0)][fun(i, 0)] = op.a[fun(i, 1)][fun(i, 0)] = 1ll;
    for (int i = 0; i &amp;lt;= a + b; ++i)
        for (int j = 0; j &amp;lt;= i; ++j)
            op.a[fun(j, 0)][fun(i, 1)] = C[i][j];
    f = f * (op ^ n);
    // for (int i = 0; i &amp;lt;= n; ++i) &amp;#123;
    //     if (i)
    //         f = f * op;
    //     for (int j = 0; j &amp;lt;= a + b; ++j)
    //         printf(&amp;quot;f[%d][%d] = %lld / %lld\n&amp;quot;, i, j, f.a[0][fun(j, 0)], f.a[0][fun(j, 1)]);
    // &amp;#125;
    auto res = 0ll;
    for (int i = 0; i &amp;lt;= a; ++i) &amp;#123;
        static auto p(1ll), k((a % 2) ? mod - 1ll : 1ll);
        (res += C[a][i] * p % mod * k % mod * (f.a[0][fun(a + b - i, 0)] + f.a[0][fun(a + b - i, 1)]) % mod) %= mod;
        (p *= n) %= mod, k = mod - k;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---different-subsets-for-all-tuples&#34;&gt;B - Different Subsets For All Tuples&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF660E&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF660E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先你可能需要知道，如果已知一个序列，如何得到答案？&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处取一个子序列的末尾，枚举上一个元素 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，找到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 之前最靠后的一个 &lt;span class=&#34;math inline&#34;&gt;\(a_j=x\)&lt;/span&gt;，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_i=\sum f_j\)&lt;/span&gt;，换言之需要保证 &lt;span class=&#34;math inline&#34;&gt;\((j,i)\)&lt;/span&gt; 范围内没有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 出现。&lt;/p&gt;
&lt;p&gt;此时序列未知，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, x}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处取一个子序列末尾，且 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的值为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;；按照贡献的视角来看待，每个可以和 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 组成新子序列的方案可以带来 &lt;span class=&#34;math inline&#34;&gt;\(m^{i-1}\)&lt;/span&gt; 的贡献（因为 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 已经固定为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，其他位置可以任选），那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,x}=m^i\times \sum_{j&amp;lt;i,y}f_{j,y}\times (m-1)^{i-j-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后就惊讶地发现式子和 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 这一维没有关系了。所以直接带上系数得到：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=m^i\times \sum_{j&amp;lt;i} f_j\times (m-1)^{i-j-1}\times m\\
&amp;amp;=m^i\times (m-1)^{i-1}\times m\cdot \sum_{j&amp;lt;i} f_j\times (m-1)^{-j}
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;前缀和优化一下就可以快速求了。最终的答案就是 &lt;span class=&#34;math inline&#34;&gt;\(res=m^n+\sum f_i\times (m-1)^{n-i}\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    if (m == 1)
        std::cout &amp;lt;&amp;lt; (n + 1) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    else &amp;#123;
        std::vector&amp;lt;long long&amp;gt; f(n + 1), s(n + 1), pm1(n + 1);
        pm1[0] = 1ll;
        for (int i = 1; i &amp;lt;= n; ++i)
            pm1[i] = pm1[i - 1] * (m - 1) % mod;
        auto qkp = [](long long x, int y) &amp;#123;
            auto res(1ll);
            for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
                if (y &amp;amp; 1)
                    (res *= x) %= mod;
            return res;
        &amp;#125;;
        auto res(qkp(m, n));
        const auto invm = qkp(m - 1, mod - 2);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            static long long p(m), inv(invm);
            f[i] = (p + pm1[i - 1] * m % mod * s[i - 1] % mod) % mod;
            s[i] = (s[i - 1] + f[i] * inv % mod) % mod;
            (res += f[i] * pm1[n - i] % mod) %= mod;
            (p *= m) %= mod, (inv *= invm) %= mod;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; 
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;g---gardens&#34;&gt;G - Gardens&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc235/tasks/abc235_g&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc235/tasks/abc235_g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果没有『每个人必须有一个元素』这个限制，就可以随便做了。现在加上了这个限制，很容易想到用没得到的人来容斥。钦定至少有 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个人没拿到，得到答案为 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=0}^n (-1)^i\cdot C_n^i\cdot \left(\sum\limits_{j=0}^a C_i^j\right)\cdot \left(\sum\limits_{j=0}^b C_i^j\right)\cdot \left(\sum\limits_{j=0}^c C_i^j\right)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;怎么算 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j=0}^a C_i^j\)&lt;/span&gt; 呢？当 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;gt; i\)&lt;/span&gt; 时，二项式是好求的；当 &lt;span class=&#34;math inline&#34;&gt;\(a\le i\)&lt;/span&gt; 时呢？看到这个式子很容易带到杨辉三角里去，也就是求一行的前 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 个数。注意到可以用上一行的前 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 个数 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 得到（假设第 &lt;span class=&#34;math inline&#34;&gt;\(j-1\)&lt;/span&gt; 行前 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 个数之和为 &lt;span class=&#34;math inline&#34;&gt;\(f_a(j-1)\)&lt;/span&gt;）：&lt;span class=&#34;math inline&#34;&gt;\(f_a(j)=f_a(j-1)\times 2-C_{j-1,a}\)&lt;/span&gt;。&lt;mark&gt;你需要意识到，由于上一行也是答案中要求的，所以可以使用递推解决问题。&lt;strong&gt;在组合计数中，递推 / DP 无论是在化简式子还是求容斥 / 二项式反演里具体某一限制下的方案数都是很有用的，在需要优化复杂度时，可以从递推 / DP、恒等式、前缀和、预处理等方法入手考虑&lt;/strong&gt;&lt;/mark&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, a, b, c;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt; c;
    std::vector&amp;lt;long long&amp;gt; fac(n + 1), inv(n + 1), fa(n + 1), fb(n + 1), fc(n + 1), pow2(n + 1);
    fac[0] = inv[0] = pow2[0] = 1ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        fac[i] = fac[i - 1] * i % mod;
        pow2[i] = pow2[i - 1] * 2 % mod;
    &amp;#125;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        auto res(1ll);
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[n] = qkp(fac[n], mod - 2);
    for (int i = n - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    for (int i = 0; i &amp;lt;= a; ++i)
        (fa[a] += C(a, i)) %= mod;
    for (int i = a + 1; i &amp;lt;= n; ++i)
        fa[i] = (2 * fa[i - 1] % mod + mod - C(i - 1, a)) % mod;
    for (int i = 0; i &amp;lt;= b; ++i)
        (fb[b] += C(b, i)) %= mod;
    for (int i = b + 1; i &amp;lt;= n; ++i)
        fb[i] = (2 * fb[i - 1] % mod + mod - C(i - 1, b)) % mod;
    for (int i = 0; i &amp;lt;= c; ++i)
        (fc[c] += C(c, i)) %= mod;
    for (int i = c + 1; i &amp;lt;= n; ++i)
        fc[i] = (2 * fc[i - 1] % mod + mod - C(i - 1, c)) % mod;
    auto res(0ll);
    for (int i = n, p = 1; ~i; --i, p = mod - p)
        (res += p * C(n, i) % mod * (i &amp;gt;= a ? fa[i] : pow2[i]) % mod * (i &amp;gt;= b ? fb[i] : pow2[i]) % mod * (i &amp;gt;= c ? fc[i] : pow2[i]) % mod) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="排列组合" />
        <category term="容斥原理" />
        <category term="数学" />
        <category term="二项式定理" />
        <category term="二项式反演" />
        <updated>2025-04-07T06:57:14.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250404/</id>
        <title>杂题选谈</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250404/"/>
        <content type="html">&lt;p&gt;NOI Linux 2.0，拼尽全力无法战胜。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;比方说我试图对我一片狼藉的屏幕进行一个图的截，但是我并不知道 where the so-called &lt;code&gt;$PICTURE&lt;/code&gt; is &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这场有两个题都用到了 &lt;mark&gt;优先队列&lt;/mark&gt; + &lt;mark&gt;最优答案扩展&lt;/mark&gt; 的思路，可以记录一下。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-序列加法机&#34;&gt;A. 序列加法机&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6174/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6174/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;转化题意可以发现，三个不下降的限制拼起来其实就是没有限制。若令 &lt;span class=&#34;math inline&#34;&gt;\(c_i=|a_i-b_i|\)&lt;/span&gt;，则题意转化如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(c_{1\sim n}\)&lt;/span&gt;，定义一次操作为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择一个 &lt;span class=&#34;math inline&#34;&gt;\(x&amp;gt;0\)&lt;/span&gt;，再选择 &lt;span class=&#34;math inline&#34;&gt;\(c_i\ge x\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(c_i\gets c_i-x\)&lt;/span&gt;，并花费 &lt;span class=&#34;math inline&#34;&gt;\(x^2\)&lt;/span&gt; 的代价。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现可进行不超过 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 次操作，问将 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 全部置为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的最小代价。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有一个比较显然的事情，如果给 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 分配 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次操作机会，那么每次减去 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {c_i}k\)&lt;/span&gt; 是最优的。具体地，令 &lt;span class=&#34;math inline&#34;&gt;\(p=\left\lfloor\dfrac {c_i}k\right\rfloor\)&lt;/span&gt;，那么给 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个中的 &lt;span class=&#34;math inline&#34;&gt;\(c_i\bmod k\)&lt;/span&gt; 分配 &lt;span class=&#34;math inline&#34;&gt;\(p+1\)&lt;/span&gt;，给剩余的 &lt;span class=&#34;math inline&#34;&gt;\(k-c_i\bmod k\)&lt;/span&gt; 分配 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 即可。这个随便用反证什么的证一下即可。&lt;/p&gt;
&lt;p&gt;但是我们怎么知道应该给每个 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 分配多少次操作次数呢？这里有个 trick：初始先给每个 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 分配一次次数，&lt;mark&gt;对于每个 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt;，记录给其多分配一次后能减少的代价，全部丢进优先队列里，将最优的拿出来之后，记录再给其多分配一次后能减少的代价，再丢进去&lt;/mark&gt;。能这样做的根本原因在于：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;每个元素的每一次扩展代价相同。&lt;/li&gt;
&lt;li&gt;对于同一个元素，丢到优先队列里的值是递减的（即无后效性，可以贪心）。&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;p&gt;有人对着对的代码调了半个小时，是谁呢 &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;seq.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;seq.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;ex_seq2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; c(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; c[i];
    struct _ &amp;#123;
        int k;
        long long org, d;
        bool operator&amp;lt; (const _ &amp;amp;q) const &amp;#123;
            return d &amp;lt; q.d; 
        &amp;#125;
    &amp;#125;;
    std::priority_queue&amp;lt;_&amp;gt; q;
    long long res = 0ll;
    auto calc = [&amp;amp;](long long x, int k) &amp;#123;
        auto p = x / k;
        return (x % k) * (p + 1) * (p + 1) + (k - x % k) * p * p;
    &amp;#125;;
    for (int i = 1, x; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x;
        c[i] = std::abs(c[i] - x);
        if (c[i]) &amp;#123;
            (res += calc(c[i], 1) % mod) %= mod;
            q.push(&amp;#123; 2, c[i], calc(c[i], 1) - calc(c[i], 2) &amp;#125;);
        &amp;#125;
    &amp;#125;
    // printf(&amp;quot;res = %lld\n&amp;quot;, res);
    if ((int)q.size() &amp;gt; m)
        std::cout &amp;lt;&amp;lt; -1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    else &amp;#123;
        m -= (int)q.size();
        for (; m--; ) &amp;#123;
            auto [k, org, d] = q.top();
            q.pop();
            // printf(&amp;quot;org = %lld, k = %d, d = %lld\n&amp;quot;, org, k, d);
            (res += mod - d % mod) %= mod;
            q.push(&amp;#123; k + 1, org, calc(org, k) - calc(org, k + 1) &amp;#125;);
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-摸鱼军训&#34;&gt;B. 摸鱼军训&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6174/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6174/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义一次冒泡排序为：&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;for (int i = 1; i &amp;lt; n; ++i)
    if (a[i] &amp;gt; a[i + 1])
        std::swap(a[i], a[i + 1]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现给定一个排列和 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 次询问，问第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 轮冒泡排序后元素 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现一个元素移动的原因有两种：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;前面有个比它大的元素「冒泡」到它后面去了，本轮该元素向前移动恰好一步。&lt;/li&gt;
&lt;li&gt;前面没有比它更大的元素，轮到它来向后面「冒泡」了。找到具体的位置是不容易的，但我们发现每次 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 向右移动一步，都一定会有一个比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 更小的元素被它交换到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 左边。找到有多少个在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 右边且比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 小的元素到了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 左边就可以得到这一种情况下 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;容易发现，只要前面存在比它大的元素，那么第一条始终成立。树状数组统计 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 为元素 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 前比它大的元素个数，对于询问 &lt;span class=&#34;math inline&#34;&gt;\((k,i)\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(k\le f_i\)&lt;/span&gt;，那么答案即为 &lt;span class=&#34;math inline&#34;&gt;\(pos_i-k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;第 &lt;span class=&#34;math inline&#34;&gt;\(f_i+1\)&lt;/span&gt; 轮，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 向后「冒泡」，碰到一个比它更大的元素 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 即停止，此时 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 接替 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 向后「冒泡」，直到碰到一个 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;&amp;gt;j\)&lt;/span&gt; 为止，以此类推。&lt;/p&gt;
&lt;p&gt;如何将 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 轮后 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 停下的位置对应到原数组上呢？我们发现每一轮 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 跨越的元素一定是比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 小的可空极长段，手玩可以发现段的数量不会因为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 之后任何元素的移动而改变，故找到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 后第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 大的元素，中间比 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 小的元素个数就是 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的右移步数。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;bubble.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;bubble.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    int n, m;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), bit(n + 1), p(n + 1), f(n + 1), bit1(n + 1);
    auto lowbit = [&amp;amp;](int x) &amp;#123;
        return x &amp;amp; -x;
    &amp;#125;;
    auto add = [&amp;amp;](std::vector&amp;lt;int&amp;gt; &amp;amp;bit, int x, int v) &amp;#123;
        for (; x &amp;lt;= n; x += lowbit(x))
            bit[x] += v;
        return;
    &amp;#125;;
    auto qry = [&amp;amp;](std::vector&amp;lt;int&amp;gt; &amp;amp;bit, int x) &amp;#123;
        int res = 0;
        for (; x; x -= lowbit(x))
            res += bit[x];
        return res;
    &amp;#125;;
    auto ask = [&amp;amp;](std::vector&amp;lt;int&amp;gt; &amp;amp;bit, int l, int r) &amp;#123;
        if (l &amp;gt; n || r &amp;lt; 1)
            return 0;
        return qry(bit, r) - qry(bit, l - 1);
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i], p[a[i]] = i;
        f[a[i]] = ask(bit, a[i] + 1, n), add(bit, a[i], 1);
    &amp;#125;
    struct _ &amp;#123; int k, id; &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;_&amp;gt; &amp;gt; t(n + 1);
    std::cin &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; res(m + 1);
    for (int i = 1, x, k; i &amp;lt;= m; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; k &amp;gt;&amp;gt; x;
        t[x].push_back(&amp;#123; k, i &amp;#125;);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        add(bit, p[i], -1);
        for (auto [k, id] : t[i])
            if (k &amp;lt;= f[i])
                res[id] = p[i] - k;
            else &amp;#123;
                int now = n;
                for (int l = p[i] + 1, r = n, mid; l &amp;lt;= r; ) &amp;#123;
                    mid = (l + r) &amp;gt;&amp;gt; 1;
                    if (ask(bit, p[i] + 1, mid) &amp;gt;= k - f[i])
                        r = mid - 1, now = mid;
                    else
                        l = mid + 1;
                &amp;#125;
                // printf(&amp;quot;%d: now = %d\n&amp;quot;, i, now);
                res[id] = p[i] - f[i] + ask(bit1, p[i] + 1, now);
            &amp;#125;
        add(bit1, p[i], 1);
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c0.-超级钢琴&#34;&gt;C0. 超级钢琴&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2048&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2048&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先做前缀和，容易想到枚举右端点，那么左端点就是一段连续的区间。显然在这里最优选择是选择左端点中 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 最小的一个。&lt;/p&gt;
&lt;p&gt;怎么求前 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 大呢？这里有一个很固定的 trick：把每个右端点及其对应的左端点区间丢到优先队列里，按照最优解（用 ST 表找一下即可）从优到劣排序。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;每次取出最优解 &lt;span class=&#34;math inline&#34;&gt;\([l_1, l_2], r\)&lt;/span&gt;，假设最优决策为 &lt;span class=&#34;math inline&#34;&gt;\(x\in [l_1, l_2]\)&lt;/span&gt;，那么把 &lt;span class=&#34;math inline&#34;&gt;\([l_1, x), r\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((x, l_2], r\)&lt;/span&gt; 分别丢到优先队列里去&lt;/mark&gt;。这个做法成立的根本原因也是：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;任何一个元素都可以贡献一次答案。&lt;/li&gt;
&lt;li&gt;对于同一个 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，随着拆分次数的增加，最优解逐渐变劣（无后效性，可贪心）。&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp language-cpp&#34; data-line=&#34;17&#34;&gt;&lt;code class=&#34;cpp langauage-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&#34;.in&#34;, &#34;r&#34;, stdin);
    std::freopen(&#34;.out&#34;, &#34;w&#34;, stdout);
#endif
    int n, k, l, r;
    std::cin &gt;&gt; n &gt;&gt; k &gt;&gt; l &gt;&gt; r;
    std::vector&amp;lt;long long&gt; a(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&gt; &gt; st(21, std::vector&amp;lt;long long&gt; (n + 1));
    for (int i = 1; i &lt;= n; ++i)
        std::cin &gt;&gt; a[i], st[0][i] = i;
    std::partial_sum(a.begin() + 1, a.end(), a.begin() + 1);
    for (int j = 1; (1 &lt;&lt; j) &lt;= n + 1; ++j) // 一个优秀的笑话是，你的 ST 表需要从 0 开始。而长度自然也应该为 n + 1。
        for (int i = 0; i + (1 &lt;&lt; j) - 1 &lt;= n; ++i)
            st[j][i] = (a[st[j - 1][i]] &lt;= a[st[j - 1][i + (1 &lt;&lt; (j - 1))]] ? st[j - 1][i] : st[j - 1][i + (1 &lt;&lt; (j - 1))]);
    auto ask = [&amp;](int l, int r) &amp;#123;
        int k = std::__lg(r - l + 1);
        return a[st[k][l]] &lt;= a[st[k][r - (1 &lt;&lt; k) + 1]] ? st[k][l] : st[k][r - (1 &lt;&lt; k) + 1];
    &amp;#125;;
    struct _ &amp;#123;
        int l1, l2, r, x;
        long long v;
        bool operator&lt; (const _ &amp;q) const &amp;#123;
            return v &lt; q.v;
        &amp;#125;
    &amp;#125;;
    std::priority_queue&lt;_&gt; q;
    for (int i = l; i &lt;= n; ++i) &amp;#123;
        _ t;
        t.l1 = std::max(i - r, 0), t.l2 = i - l, t.r = i, t.x = ask(t.l1, t.l2), t.v = a[i] - a[t.x];
        q.push(t);
    &amp;#125;
    long long res = 0ll;
    for (int to; k--; ) &amp;#123;
        auto [l1, l2, r, x, v] = q.top();
        q.pop();
        res += v;
        if (x != l1) &amp;#123;
            to = ask(l1, x - 1);
            q.push(&amp;#123; l1, x - 1, r, to, a[r] - a[to] &amp;#125;);
        &amp;#125;
        if (x != l2) &amp;#123;
            to = ask(x + 1, l2);
            q.push(&amp;#123; x + 1, l2, r, to, a[r] - a[to] &amp;#125;);
        &amp;#125;
    &amp;#125;
    std::cout &lt;&lt; res &lt;&lt; &#39;\n&#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c1.-皮卡丘&#34;&gt;C1. 皮卡丘&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6174/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6174/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个询问，每次问 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 中前 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 大 &lt;span class=&#34;math inline&#34;&gt;\(a_l-a_r\)&lt;/span&gt; 的和。&lt;span class=&#34;math inline&#34;&gt;\(\sum k\le 3\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们发现不能直接按照上一题的方法来做——每次询问都把 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 个元素丢进优先队列是不现实的。但我们似乎忽略了什么——这次的初始最优解是否可以直接在 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 上全局求解？&lt;/p&gt;
&lt;p&gt;区间修改操作就是在明示线段树。显然我们可以差分过后线段树上求解最大子段和——不差分也可以照样维护答案，方法差不多。假设现在求得的最优解为 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但此时我们没有一个端点是固定的！应该怎样拆分呢？这里又要用到另一个经典的 trick——抽象一个矩阵 &lt;span class=&#34;math inline&#34;&gt;\(b_{i,j}=a_i-a_j\)&lt;/span&gt;，那么对于一次询问，可用的 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 构成一个三角形：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意一个点，我们之所以可以通过最大子段和求得最优解是因为矩阵的行号范围和列号范围是一致的（记为情况 1）。除此之外，除了行号和列号完全相离（即 &lt;span class=&#34;math inline&#34;&gt;\(l_2&amp;lt;r_1\)&lt;/span&gt;，记为情况 2） 时可以直接用 &lt;span class=&#34;math inline&#34;&gt;\(l_{\max}-r_{\min}\)&lt;/span&gt; 求解，其他情况都无法简单得到答案。&lt;/p&gt;
&lt;p&gt;也就是说，我们的拆分方式要尽可能地贴近上面两种可求解的情况。幸运地是，直觉地划分可以比较轻松地在初始状态下得到一种可能的方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;容易注意到初始状态属于情况 1，可以按照图所示，按照行号与 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的大小关系分类，得到：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;x\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(\ge x\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(\in (x,y)\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;y\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;几个 part。&lt;/p&gt;
&lt;p&gt;如果我们要对情况 2 进行划分呢？这也是轻松的，假设当前图形满足行： &lt;span class=&#34;math inline&#34;&gt;\([l_1, l_2]\)&lt;/span&gt;，列：&lt;span class=&#34;math inline&#34;&gt;\([r_1, r_2]\)&lt;/span&gt;（显然这是个完整的矩形），且最优解 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt;。容易发现任意行、列一定相离，故根据 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt; 划分即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;也即以下几个 part：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;x\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;y\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(=x\)&lt;/span&gt;，列 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;y\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;行 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(\sum k\log)\)&lt;/span&gt;。注意到线段树的 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 和优先队列的 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 并不会叠起来。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;意外的很难写 &lt;img src=&#34;/em/qd.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;主要是线段树写起来有点答辩了 &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
struct __ &amp;#123;
    int l, r;
    int i0, i1, s0, s1;
    long long u, d, u0, u1;
    __ operator+ (const __ &amp;amp;q) const &amp;#123;
        __ res;
        res.l = l, res.r = q.r, res.d = 0ll;
        res.u = std::max(&amp;#123; u, q.u, u1 - q.u0 &amp;#125;);
        if (res.u == u)
            res.s0 = s0, res.s1 = s1;
        else if (res.u == q.u)
            res.s0 = q.s0, res.s1 = q.s1;
        else
            res.s1 = i1, res.s0 = q.i0;
        if (u0 &amp;lt; q.u0)
            res.u0 = u0, res.i0 = i0;
        else
            res.u0 = q.u0, res.i0 = q.i0;
        if (u1 &amp;gt; q.u1)
            res.u1 = u1, res.i1 = i1;
        else
            res.u1 = q.u1, res.i1 = q.i1;
        return res;
    &amp;#125;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
long long a[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d += t[p].d, t[rt].d += t[p].d;
        t[lt].u0 += t[p].d, t[lt].u1 += t[p].d;
        t[rt].u0 += t[p].d, t[rt].u1 += t[p].d;
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void pushup(int p) &amp;#123;
    t[p] = t[lt] + t[rt];
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].i0 = t[p].i1 = t[p].s0 = t[p].s1 = l;
        t[p].u0 = t[p].u1 = a[l];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void add(int p, int l, int r, long long v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].u0 += v, t[p].u1 += v, t[p].d += v;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        add(lt, l, r, v);
    if (r &amp;gt; mid)
        add(rt, l, r, v);
    pushup(p);
    return;
&amp;#125;
auto ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p];
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    return ask(lt, l, r) + ask(rt, l, r);
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    std::freopen(&amp;quot;pi.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;pi.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;ex_pi2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    bld(1, 1, n);
    for (int op; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            int l, r, x;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r &amp;gt;&amp;gt; x;
            add(1, l, r, x);
        &amp;#125;
        else &amp;#123;
            int l, r, k;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r &amp;gt;&amp;gt; k;
            struct _ &amp;#123;
                int ty, l1, l2, r1, r2, x, y;
                long long v;
                bool operator&amp;lt; (const _ &amp;amp;q) const &amp;#123;
                    return v &amp;lt; q.v;
                &amp;#125;
            &amp;#125;;
            long long res = 0ll;
            std::priority_queue&amp;lt;_&amp;gt; q;
            auto calc = [&amp;amp;](int ty, int l1, int l2, int r1, int r2) &amp;#123;
                if (l1 &amp;lt;= l2 &amp;amp;&amp;amp; r1 &amp;lt;= r2) &amp;#123;
                    if (ty == 1) &amp;#123;
                        auto ts(ask(1, l1, l2));
                        q.push(&amp;#123; 1, l1, l2, r1, r2, ts.s1, ts.s0, ts.u &amp;#125;);
                    &amp;#125;
                    else &amp;#123;
                        auto ls(ask(1, l1, l2)), rs(ask(1, r1, r2));
                        q.push(&amp;#123; 2, l1, l2, r1, r2, ls.i1, rs.i0, ls.u1 - rs.u0 &amp;#125;);
                    &amp;#125;
                &amp;#125;
                return;
            &amp;#125;;
            calc(1, l, r, l, r);
            for (; k--; ) &amp;#123;
                auto [ty, l1, l2, r1, r2, x, y, v] = q.top();
                res += v;
                q.pop();
                if (ty == 1) &amp;#123;
                    calc(1, l1, x - 1, r1, x - 1);
                    calc(2, l1, x - 1, x, r2);
                    if (x != y)
                        calc(1, x, x, x, x);
                    calc(2, x, x, x + 1, y - 1);
                    calc(2, x, x, y + 1, r2);
                    calc(1, x + 1, l2, x + 1, r2);
                &amp;#125;
                else &amp;#123;
                    calc(2, l1, x - 1, r1, r2);
                    calc(2, x, x, r1, y - 1);
                    calc(2, x, x, y + 1, r2);
                    calc(2, x + 1, l2, r1, r2);
                &amp;#125;
            &amp;#125;
            std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-银行的崛起&#34;&gt;D. 银行的崛起&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/6174/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/6174/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原题：&lt;a href=&#34;https://www.codechef.com/problems/CTREE?tab=statement&#34;&gt;CodeChef CTREE - Chef and Chefcoin&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;假设只需要一个关键点，那么容易想到换根 DP 的做法。但仅凭这个比较 naive 的思路是无法靠近正解的。找题解的时候看到一个惊为天人的式子：&lt;mark&gt;&lt;span class=&#34;math inline&#34;&gt;\(res=\sum\limits_{(u, v): w} f(v)=w\cdot \min(s_v,n-s_v)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(s_v\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的 size&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;乍一看是在讨论关键点要选在 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 外部还是内部，但是 &lt;span class=&#34;math inline&#34;&gt;\(\min\)&lt;/span&gt; 的含义很奇怪——假如有多个点都觉得应该往自己内部走呢？考虑如下普适场景：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;4.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;假如 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 都觉得应该往自己内部走，就会有 &lt;span class=&#34;math inline&#34;&gt;\(\begin{cases}a&amp;gt;b+c\\c&amp;gt;a+b\end{cases}\Rightarrow 0&amp;gt;2\times b\)&lt;/span&gt;，由此就反证了。&lt;/p&gt;
&lt;p&gt;那么显然 &lt;span class=&#34;math inline&#34;&gt;\(f(v)=w\cdot s_v\iff s_v\le \dfrac n2\)&lt;/span&gt;，转化成带权重心问题，可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 一次 DFS 解决。那扩展到两个呢？手玩发现存在一条边作为两个选择倾向的点的分界，不会被任何一方经过（显然），枚举这条分割线切断就可以得到两个子树；在子树上分别作一次一个关键点的做法，加起来就是这条边的答案。&lt;/p&gt;
&lt;p&gt;显然这是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 的，需要优化。能够感受到枚举边的过程不太能被优化，考虑优化求解上面式子的过程。容易想到换根，记 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt; 为当前版本时刻变化的 size，&lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 为初始值，那么有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 侧，对于 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的所有祖先 &lt;span class=&#34;math inline&#34;&gt;\(\{fa\}\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;_{fa}=s_{fa}-s_v\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(n&amp;#39;=n-s_v\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 侧，所有点 &lt;span class=&#34;math inline&#34;&gt;\(\{son\}\)&lt;/span&gt; 有 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;_{son}=s_{son}\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(n&amp;#39;=s_v\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们需要维护所有 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {n&amp;#39;}2\)&lt;/span&gt; 的大小关系——发现这是一个类似二维偏序的问题，即求：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;DFN 在 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 子树范围内，且 &lt;span class=&#34;math inline&#34;&gt;\(s\le \dfrac {s_v}2\)&lt;/span&gt; 的权值。&lt;/li&gt;
&lt;li&gt;DFN 在 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 之前 / 之后，且 &lt;span class=&#34;math inline&#34;&gt;\(s\le \dfrac {n-s_v}2\)&lt;/span&gt; 的权值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记录询问的 DFN 区间，离线（？）下来按照 &lt;span class=&#34;math inline&#34;&gt;\(n&amp;#39;\)&lt;/span&gt; 排序，随便用个 DFN 上的 DS 统计一下即可。但 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 侧的 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;#39;_{fa}\)&lt;/span&gt; 会发生变化，没办法离线处理，考虑&lt;mark&gt;费用提前计算消除误差——找到比 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {n-s_v}2\)&lt;/span&gt; 大，但减去 &lt;span class=&#34;math inline&#34;&gt;\(s_v\)&lt;/span&gt; 后比之小的 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 提前处理&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;发现由于 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 随着 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 往上是单调递增的，满足这个条件的 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 是连续的。&lt;/mark&gt;用树上倍增框出上下端点 &lt;span class=&#34;math inline&#34;&gt;\((fa_p\to fa_q]\)&lt;/span&gt; 进行费用提前计算。那么就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log)\)&lt;/span&gt; 的解决问题了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;具体地，如何提前计算？&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;记 &lt;span class=&#34;math inline&#34;&gt;\(diw_x\)&lt;/span&gt; 为从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的路径上所有点 &lt;span class=&#34;math inline&#34;&gt;\(s\cdot w\)&lt;/span&gt; 之和。&lt;/p&gt;
&lt;p&gt;那么有：&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;col style=&#34;width: 25%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;项&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;真实值&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;计算值&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(\sum\Delta\)&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\notin\{fa\}\land x\notin\{son\}\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot \min(s_x,n&amp;#39;-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot \min(s_x,n&amp;#39;-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\in[1\to fa_p]\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot (s_x - s_v)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot s_x\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(-dis_p\times s_v\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\in (fa_p\to fa_q]\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot (n-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot s_x\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\times(dis_q-dis_p)-2\times (diw_q - diw_p)\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\in(fa_q,v)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot (n-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot (n-s_x-s_v)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(s_v\cdot (dis_u-dis_q)\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\in \{son\}\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot \min(s_x,n&amp;#39;-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_x\cdot \min(s_x,n&amp;#39;-s_x)\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;即需将答案 &lt;strong&gt;减去&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\(n\times(dis_q-dis_p)-2\times (diw_q - diw_p)+s_v\cdot (dis_u-dis_q-dis_p)\)&lt;/span&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#ifdef ONLINE_JUDGE
    std::freopen(&amp;quot;banking.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;banking.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        std::vector&amp;lt;long long&amp;gt; a(n + 1);
        long long sw = 0ll;
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; a[i], sw += a[i];
        std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, long long&amp;gt; &amp;gt; &amp;gt; g(n + 1);
        for (int i = 1, x, y, w; i &amp;lt; n; ++i) &amp;#123;
            std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; w;
            g[x].emplace_back(y, w), g[y].emplace_back(x, w);
        &amp;#125;
        struct _ &amp;#123; int l, r, id; long long v; &amp;#125;;
        int now = 0;
        std::vector&amp;lt;_&amp;gt; q;
        std::vector&amp;lt;int&amp;gt; dfn(n + 1), rfn(n + 1);
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;int&amp;gt; (21));
        std::vector&amp;lt;long long&amp;gt; dis(n + 1), diw(n + 1), w(n + 1), res(n + 1), s(n + 1);
        std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123; // 前置工作
            dfn[x] = ++now, s[x] = a[x];
            for (auto [i, tw] : g[x])
                if (i != fa) &amp;#123;
                    w[i] = tw;
                    f[i][0] = x;
                    for (int j = 1; j &amp;lt;= 20; ++j)
                        f[i][j] = f[f[i][j - 1]][j - 1];
                    DFS(i, x);
                    s[x] += s[i];
                &amp;#125;
            rfn[x] = now;
            return;
        &amp;#125;;
        DFS(1, -1);
        DFS = [&amp;amp;](int x, int fa) &amp;#123;
            for (auto [i, tw] : g[x])
                if (i != fa) &amp;#123;
                    dis[i] = dis[x] + tw;
                    diw[i] = diw[x] + tw * s[i];
                    q.push_back(&amp;#123; dfn[i], rfn[i], i, s[i] &amp;#125;);
                    q.push_back(&amp;#123; 1, dfn[i] - 1, i, sw - s[i] &amp;#125;);
                    q.push_back(&amp;#123; rfn[i] + 1, n, i, sw - s[i] &amp;#125;);
                    int p, q;
                    long long t = (sw - s[i]) / 2;
                    &amp;#123;   // 找上端点（开的）
                        p = i;
                        for (int j = 20; ~j; --j)
                            if (f[p][j] &amp;amp;&amp;amp; s[f[p][j]] - s[i] &amp;lt;= t)
                                p = f[p][j];
                        p = f[p][0];
                    &amp;#125;
                    &amp;#123;   // 找下端点（闭的）
                        q = i;
                        for (int j = 20; ~j; --j)
                            if (f[q][j] &amp;amp;&amp;amp; s[f[q][j]] &amp;lt;= t)
                                q = f[q][j];
                        q = f[q][0];
                    &amp;#125;
                    res[i] -= sw * (dis[q] - dis[p]) - 2 * (diw[q] - diw[p]) + (dis[x] - dis[p] - dis[q]) * s[i];
                    DFS(i, x);
                &amp;#125;
            return;
        &amp;#125;;
        DFS(1, -1);
        std::vector&amp;lt;int&amp;gt; id(n + 1);
        std::iota(id.begin() + 1, id.end(), 1);
        std::sort(id.begin() + 1, id.end(), [&amp;amp;](int x, int y) &amp;#123; return s[x] &amp;lt; s[y]; &amp;#125;);
        std::sort(q.begin(), q.end(), [&amp;amp;](_ x, _ y) &amp;#123; return x.v &amp;lt; y.v; &amp;#125;);
        std::vector&amp;lt;std::pair&amp;lt;long long, long long&amp;gt; &amp;gt; bit(n + 1);
        auto lowbit = [&amp;amp;](int x) &amp;#123; return x &amp;amp; -x; &amp;#125;;
        auto add = [&amp;amp;](int x, std::pair&amp;lt;long long, long long&amp;gt; v) &amp;#123;
            for (; x &amp;lt;= n; x += lowbit(x))
                bit[x].first += v.first, bit[x].second += v.second;
            return;
        &amp;#125;;
        auto ask = [&amp;amp;](int x) &amp;#123;
            std::pair&amp;lt;long long, long long&amp;gt; res;
            for (; x; x -= lowbit(x))
                res.first += bit[x].first, res.second += bit[x].second;
            return res;
        &amp;#125;;
        auto j = ++id.begin();
        for (auto &amp;amp;[l, r, x, v] : q) &amp;#123;
            for (; j != id.end() &amp;amp;&amp;amp; s[*j] &amp;lt;= v / 2; ++j)
                add(dfn[*j], &amp;#123; w[*j], s[*j] * w[*j] &amp;#125;);
            auto ls(ask(l - 1)), rs(ask(r));
            rs.first -= ls.first, rs.second -= ls.second;
            res[x] += rs.second;
        &amp;#125;
        bit.assign(n + 1, &amp;#123; 0ll, 0ll &amp;#125;);
        std::reverse(q.begin(), q.end());
        std::reverse(id.begin(), id.end());
        j = ++id.begin();
        for (auto &amp;amp;[l, r, x, v] : q) &amp;#123;
            for (; j != id.end() &amp;amp;&amp;amp; s[*j] &amp;gt; v / 2; ++j)
                add(dfn[*j], &amp;#123; w[*j], s[*j] * w[*j] &amp;#125;);
            auto ls(ask(l - 1)), rs(ask(r));
            rs.first -= ls.first, rs.second -= ls.second;
            res[x] += rs.first * v - rs.second;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; *std::min_element(res.begin() + 2, res.end()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="堆" />
        <category term="树的重心" />
        <updated>2025-04-04T07:31:09.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250329/</id>
        <title>学习笔记：FWT</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250329/"/>
        <content type="html">&lt;p&gt;活了哥们，复活了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;考虑以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(\forall \,i\in U\)&lt;/span&gt;，求 &lt;span class=&#34;math inline&#34;&gt;\(c_i=\sum\limits_{j\cup k=i}a_j\cdot b_k\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然这里可以把集合看成二进制状态，那么取并集就是按位或了。&lt;/p&gt;
&lt;p&gt;咕咕咕&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;emiya-家明天的饭&#34;&gt;Emiya 家明天的饭&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10242&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10242&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;冷知识：&lt;em&gt;Emiya 家明天的饭&lt;/em&gt; 和 &lt;em&gt;Emiya 家今天的饭&lt;/em&gt; 拥有相同的难度评级 &lt;img src=&#34;/em/kt.gif&#34; alt=&#34;磕头&#34; /&gt;&lt;/p&gt;
&lt;p&gt;考虑暴力的做法，如果我们先钦定必须到达的人（这是 &lt;span class=&#34;math inline&#34;&gt;\(O(2^n)\)&lt;/span&gt; 的），再花费 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt; 的时间依次判定每道菜是否可以被选择，就可以 解决问题。但发现时间是不能承受的，这里我们选择优化 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt; 的判定。&lt;/p&gt;
&lt;p&gt;现在已知人员集合 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，对于一道菜 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，设它适配的人员集合为 &lt;span class=&#34;math inline&#34;&gt;\(T_i\)&lt;/span&gt;，那么有 &lt;span class=&#34;math inline&#34;&gt;\(s\subseteq T_i\)&lt;/span&gt;。所求即为 &lt;span class=&#34;math inline&#34;&gt;\(\max\limits_s\{\sum\limits_{T_i\supseteq s}\sum\limits_{j\in s}a_{i,j}\}\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt; 预处理出 &lt;span class=&#34;math inline&#34;&gt;\(f_j(u)=\sum\limits_{T_i=u}a_{j, i}\)&lt;/span&gt;，那么待求即为 &lt;span class=&#34;math inline&#34;&gt;\(\max\limits_{s}\{\sum\limits_{j\in s}\sum\limits_{u\supseteq s}f_j(u)\}\)&lt;/span&gt;，发现这个东西可以用 FWT 求。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, k;
    std::cin &amp;gt;&amp;gt; k &amp;gt;&amp;gt; m, n = 1 &amp;lt;&amp;lt; k;
    using arr = std::vector&amp;lt;long long&amp;gt;;
    std::vector&amp;lt;int&amp;gt; t(m + 1);
    std::vector&amp;lt;arr&amp;gt; a(k + 1, arr(m + 1)), f(k + 1, arr(n));
    for (int i = 1; i &amp;lt;= k; ++i)
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            std::cin &amp;gt;&amp;gt; a[i][j];
            if (a[i][j] &amp;gt;= 0)
                t[j] |= 1 &amp;lt;&amp;lt; (i - 1);
        &amp;#125;
    for (int i = 1; i &amp;lt;= k; ++i)
        for (int j = 1; j &amp;lt;= m; ++j)
            if (a[i][j] &amp;gt;= 0)
                f[i][t[j]] += a[i][j];
    &amp;#123;
        std::vector&amp;lt;arr&amp;gt; mT(2, arr(2));
        mT[0][0] = 1ll, mT[0][1] = 1ll, mT[1][0] = 0ll, mT[1][1] = 1ll;
        auto calc = [&amp;amp;](arr a, arr &amp;amp;f, std::vector&amp;lt;arr&amp;gt; &amp;amp;w) &amp;#123;
            f = a;
            for (int len = 2; len &amp;lt;= n; len &amp;lt;&amp;lt;= 1) &amp;#123;
                for (int i = 0; i &amp;lt; n; i += len)
                    for (int p = i, q = i + len / 2; q &amp;lt; i + len; ++p, ++q)
                        std::tie(f[p], f[q]) = std::make_tuple(f[p] * w[0][0] + f[q] * w[0][1], f[p] * w[1][0] + f[q] * w[1][1]);
            &amp;#125;
            return;
        &amp;#125;;
        for (int i = 1; i &amp;lt;= k; ++i)
            calc(f[i], f[i], mT);
    &amp;#125;
    long long res = 0ll;
    for (int s = 0; s &amp;lt; n; ++s) &amp;#123;
        long long sum = 0ll;
        for (int i = 1; i &amp;lt;= k; ++i)
            if ((s &amp;gt;&amp;gt; (i - 1)) &amp;amp; 1)
                sum += f[i][s];
        res = std::max(res, sum);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;nim-counting&#34;&gt;Nim Counting&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc212/tasks/abc212_h&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc212/tasks/abc212_h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;即，从 &lt;span class=&#34;math inline&#34;&gt;\(A_N\)&lt;/span&gt; 中有放回地选择 &lt;span class=&#34;math inline&#34;&gt;\(\le M\)&lt;/span&gt; 个数，问它们异或起来不为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的方案数。&lt;/p&gt;
&lt;p&gt;如果令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, j}\)&lt;/span&gt; 表示选了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 次，异或和为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数，显然 &lt;span class=&#34;math inline&#34;&gt;\(f_{1,i}=\sum [a_j=i]\)&lt;/span&gt; 为关于 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的桶。此时有 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\sum\limits_{k=1}^n f_{i-1,j\oplus a_k}=\sum\limits_{k=0}^V f_{i-1,j\oplus k}\cdot f_{1,k}\)&lt;/span&gt;，发现把 &lt;span class=&#34;math inline&#34;&gt;\(f_1\)&lt;/span&gt; 这个桶在 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 上做 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 次 xor-FWT 就可以得到 &lt;span class=&#34;math inline&#34;&gt;\(f_n\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但如果直接卷 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 次是 &lt;span class=&#34;math inline&#34;&gt;\(O(N\cdot V\log V)\)&lt;/span&gt; 的，不太美好，但我们看看我们实际上需要做什么：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;求 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 的 FWT。&lt;/li&gt;
&lt;li&gt;求初始桶 &lt;span class=&#34;math inline&#34;&gt;\(f_1\)&lt;/span&gt; 的 FWT。&lt;/li&gt;
&lt;li&gt;对位相乘得到 &lt;span class=&#34;math inline&#34;&gt;\(f_{i+1}\)&lt;/span&gt; 的 FWT。&lt;/li&gt;
&lt;li&gt;通过 FWT 求得原本的 &lt;span class=&#34;math inline&#34;&gt;\(f_{i+1}\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当这个操作被放在 &lt;span class=&#34;math inline&#34;&gt;\(i=1\sim n\)&lt;/span&gt; 上依次进行时，我们发现第一步和最后一步会相互抵消，我们只需要求出 &lt;span class=&#34;math inline&#34;&gt;\(f_1\)&lt;/span&gt; 的 FWT，&lt;span class=&#34;math inline&#34;&gt;\(FWT_{i, j}(f)\)&lt;/span&gt; 即为 &lt;span class=&#34;math inline&#34;&gt;\(FWT_{1, j}(f)^i\)&lt;/span&gt;。因为我们要求的是 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i, j}f_{i,j}\)&lt;/span&gt; 可以通过等比数列求和求出 &lt;span class=&#34;math inline&#34;&gt;\(FWT_j(s)=\sum f_{i, j}\)&lt;/span&gt;。由前文推导可知直接做一次逆变换求得 &lt;span class=&#34;math inline&#34;&gt;\(s_j\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    struct mint &amp;#123;
        const int mod = 998244353;
        long long x;
        mint(): x(0ll) &amp;#123;&amp;#125;
        mint(long long x1): x((x1 + mod) % mod) &amp;#123;&amp;#125;
        mint&amp;amp; operator= (const mint q) &amp;#123;
            x = q.x;
            return *this;
        &amp;#125;
        bool operator== (const mint q) const &amp;#123;
            return x == q.x;
        &amp;#125;
        mint operator* (const mint q) const &amp;#123;
            return x * q.x % mod;
        &amp;#125;
        mint&amp;amp; operator*= (const mint q) &amp;#123;
            return *this = *this * q;
        &amp;#125;
        mint operator+ (const mint q) &amp;#123;
            return (x + q.x) % mod;
        &amp;#125;
        mint&amp;amp; operator+= (const mint q) &amp;#123;
            return *this = *this + q;
        &amp;#125;
        mint operator- (const mint q) &amp;#123;
            return (x + mod - q.x) % mod;
        &amp;#125;
        mint qkp(int y) &amp;#123;
            mint res(1ll), x(this-&amp;gt;x);
            for (; y; y &amp;gt;&amp;gt;= 1, x *= x)
                if (y &amp;amp; 1)
                    res *= x;
            return res;
        &amp;#125;
        mint inv(void) &amp;#123;
            return qkp(mod - 2);
        &amp;#125;
    &amp;#125;;
    int n, m, k = 16, l = 1 &amp;lt;&amp;lt; k;
    std::cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; n;
    using arr = std::vector&amp;lt;mint&amp;gt;;
    arr a(n + 1), c(l);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i].x, c[a[i].x] += 1;
    std::vector&amp;lt;arr&amp;gt; mT(2, arr(2)), mI(2, arr(2));
    mT[0][0] = 1ll, mT[0][1] = 1ll, mT[1][0] = 1ll, mT[1][1] = -1ll;
    mI[0][0] = mI[0][1] = mI[1][0] = mint(2ll).inv(), mI[1][1] = mint(-2ll).inv();
    auto calc = [&amp;amp;](arr a, arr &amp;amp;f, std::vector&amp;lt;arr&amp;gt; &amp;amp;w) &amp;#123;
        f = a;
        for (int len = 2; len &amp;lt;= l; len &amp;lt;&amp;lt;= 1)
            for (int i = 0; i &amp;lt; l; i += len)
                for (int p = i, q = i + len / 2; q &amp;lt; i + len; ++p, ++q)
                    std::tie(f[p], f[q]) = std::make_tuple(f[p] * w[0][0] + f[q] * w[0][1], f[p] * w[1][0] + f[q] * w[1][1]);
        return;
    &amp;#125;;
    calc(c, c, mT);
    arr s(l);
    for (int i = 0; i &amp;lt; l; ++i)
        if (c[i] == 1ll)
            s[i] = m;
        else
            s[i] = c[i] * (mint(1ll) - c[i].qkp(m)) * (mint(1ll) - c[i]).inv();
    calc(s, s, mI);
    mint res;
    for (int i = 1; i &amp;lt; l; ++i)
        res += s[i];
    std::cout &amp;lt;&amp;lt; res.x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;binary-table&#34;&gt;Binary Table&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/662/C&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/662/C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现这个题和 &lt;em&gt;Emiya 家今天的饭&lt;/em&gt; 很像，都是有一个很小的维和一个相对比较大的维。&lt;/p&gt;
&lt;p&gt;显然，我们所有的操作顺序都可以任意调换；朴素地，我们枚举 &lt;span class=&#34;math inline&#34;&gt;\(2^n\)&lt;/span&gt; 种给这 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 行反转的情况；再对于每一列，&lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 选择应该反转还是不反转，这样总共是 &lt;span class=&#34;math inline&#34;&gt;\(O(2^n\cdot nm)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;发现把一列初始状态压成一个二进制数 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，假设我们现在枚举的行反转状态为 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，显然用 &lt;span class=&#34;math inline&#34;&gt;\(s\oplus a\)&lt;/span&gt; 可以得到当前状态。怎么利用这个去 FWT 呢？这引导我们依然枚举 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，用一个和 &lt;span class=&#34;math inline&#34;&gt;\(s\oplus a\)&lt;/span&gt; 有关的量跟一个和 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 有关的量相乘得到关于 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的答案。&lt;/p&gt;
&lt;p&gt;容易发现令 &lt;span class=&#34;math inline&#34;&gt;\(f_{s\oplus a}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(s\oplus a\)&lt;/span&gt; 这个状态反转和不反转两个选项中可以获取的最少 1 的个数；再令 &lt;span class=&#34;math inline&#34;&gt;\(c_s\)&lt;/span&gt; 表示状态为 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的列的个数，那么 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_s c_s\times f_{s\oplus a}\)&lt;/span&gt; 就可以得到枚举的反转方案为 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的答案，求最小即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    struct mint &amp;#123;
        const int mod = 998244353;
        long long x;
        mint(): x(0ll) &amp;#123;&amp;#125;
        mint(long long x1): x((x1 + mod) % mod) &amp;#123;&amp;#125;
        mint&amp;amp; operator= (const mint q) &amp;#123;
            x = q.x;
            return *this;
        &amp;#125;
        bool operator== (const mint q) const &amp;#123;
            return x == q.x;
        &amp;#125;
        mint operator* (const mint q) const &amp;#123;
            return x * q.x % mod;
        &amp;#125;
        mint&amp;amp; operator*= (const mint q) &amp;#123;
            return *this = *this * q;
        &amp;#125;
        mint operator+ (const mint q) &amp;#123;
            return (x + q.x) % mod;
        &amp;#125;
        mint&amp;amp; operator+= (const mint q) &amp;#123;
            return *this = *this + q;
        &amp;#125;
        mint operator- (const mint q) &amp;#123;
            return (x + mod - q.x) % mod;
        &amp;#125;
        mint qkp(int y) &amp;#123;
            mint res(1ll), x(this-&amp;gt;x);
            for (; y; y &amp;gt;&amp;gt;= 1, x *= x)
                if (y &amp;amp; 1)
                    res *= x;
            return res;
        &amp;#125;
        mint inv(void) &amp;#123;
            return qkp(mod - 2);
        &amp;#125;
    &amp;#125;;
    int n, m, l;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m, l = 1 &amp;lt;&amp;lt; n;
    using arr = std::vector&amp;lt;mint&amp;gt;;
    arr c(l), f(l);
    std::vector&amp;lt;std::vector&amp;lt;char&amp;gt; &amp;gt; a(n + 1, std::vector&amp;lt;char&amp;gt; (m + 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= m; ++j)
            std::cin &amp;gt;&amp;gt; a[i][j];
    for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
        int s = 0;
        for (int i = 1; i &amp;lt;= n; ++i)
            s = (s &amp;lt;&amp;lt; 1) + a[i][j] - &amp;#39;0&amp;#39;;
        c[s] += 1;
    &amp;#125;
    for (int i = 0, t; i &amp;lt; l; ++i)
        t = (__builtin_popcount(i)), f[i] = std::min(t, n - t);
    std::vector&amp;lt;arr&amp;gt; mT(2, arr(2)), mI(2, arr(2));
    mT[0][0] = 1ll, mT[0][1] = 1ll, mT[1][0] = 1ll, mT[1][1] = -1ll;
    mI[0][0] = mI[0][1] = mI[1][0] = mint(2ll).inv(), mI[1][1] = mint(-2ll).inv();
    auto calc = [&amp;amp;](arr a, arr &amp;amp;f, std::vector&amp;lt;arr&amp;gt; &amp;amp;w) &amp;#123;
        f = a;
        for (int len = 2; len &amp;lt;= l; len &amp;lt;&amp;lt;= 1)
            for (int i = 0; i &amp;lt; l; i += len)
                for (int p = i, q = i + len / 2; q &amp;lt; i + len; ++p, ++q)
                    std::tie(f[p], f[q]) = std::make_tuple(f[p] * w[0][0] + f[q] * w[0][1], f[p] * w[1][0] + f[q] * w[1][1]);
        return;
    &amp;#125;;
    calc(c, c, mT), calc(f, f, mT);
    arr s(l);
    for (int i = 0; i &amp;lt; l; ++i)
        s[i] = c[i] * f[i];
    calc(s, s, mI);
    int res = 0x3f3f3f3f;
    for (int i = 0; i &amp;lt; l; ++i)
        res = std::min(res, (int)s[i].x);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;hard-nim&#34;&gt;Hard Nim&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hydro.ac/p/bzoj-P4589&#34; class=&#34;uri&#34;&gt;https://hydro.ac/p/bzoj-P4589&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nim Counting&lt;/em&gt; 然后缝了个筛子。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
const int inv2 = 5e8 + 4;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    std::vector&amp;lt;int&amp;gt; p, tag(50001);
    for (int i = 2; i &amp;lt;= 50000; ++i)
        if (!tag[i]) &amp;#123;
            p.push_back(i);
            for (int j = 2 * i; j &amp;lt;= 50000; j += i)
                tag[j] = 1;
        &amp;#125;
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        long long res = 1ll;
        for (; y; y &amp;gt;&amp;gt;= 1, (x *= x) %= mod)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    for (int n, m; std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m; ) &amp;#123;
        int k = std::__lg(m) + 1, l = 1 &amp;lt;&amp;lt; k;
        using arr = std::vector&amp;lt;long long&amp;gt;;
        arr c(l);
        for (auto i : p)
            if (i &amp;lt;= m)
                c[i] += 1;
            else
                break;
        std::vector&amp;lt;arr&amp;gt; mT(2, arr(2)), mI(2, arr(2));
        mT[0][0] = 1ll, mT[0][1] = 1ll, mT[1][0] = 1ll, mT[1][1] = mod - 1ll;
        mI[0][0] = mI[0][1] = mI[1][0] = inv2, mI[1][1] = mod - inv2;
        auto calc = [&amp;amp;](arr &amp;amp;f, std::vector&amp;lt;arr&amp;gt; &amp;amp;w) &amp;#123;
            for (int len = 2; len &amp;lt;= l; len &amp;lt;&amp;lt;= 1)
                for (int i = 0; i &amp;lt; l; i += len)
                    for (int p = i, q = i + len / 2; q &amp;lt; i + len; ++p, ++q)
                        std::tie(f[p], f[q]) = std::make_tuple((f[p] * w[0][0] + f[q] * w[0][1]) % mod, (f[p] * w[1][0] + f[q] * w[1][1]) % mod);
            return;
        &amp;#125;;
        calc(c, mT);
        arr s(l);
        for (int i = 0; i &amp;lt; l; ++i)
            s[i] = qkp(c[i], n);
        calc(s, mI);
        std::cout &amp;lt;&amp;lt; s[0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;子集卷积&#34;&gt;子集卷积&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6097&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6097&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个是在许多 DP 中都可能见到过的结构，相信大家都深有体会。&lt;/p&gt;
&lt;p&gt;等价于求 &lt;span class=&#34;math inline&#34;&gt;\(c_s=\sum\limits_{i\cap j=\varnothing\land i\cup j=s}a_i\cdot b_j\)&lt;/span&gt;，首先关注 &lt;span class=&#34;math inline&#34;&gt;\(i\cup j=s\)&lt;/span&gt;，可以用 FWT 解决；对于 &lt;span class=&#34;math inline&#34;&gt;\(i\cap j = \varnothing\)&lt;/span&gt; 呢？&lt;/p&gt;
&lt;p&gt;有一个很聪明的办法，我们发现 &lt;span class=&#34;math inline&#34;&gt;\(i\cap j=\varnothing\land i\cup j = s\iff \operatorname{ctz}(i)+\operatorname{ctz}(j)=\operatorname{ctz}(s)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{ctz}(i)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 中 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的个数，即 &lt;code&gt;popcount(i)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;显然后者是个简单的加法运算，这里又有一个很聪明又很基本的办法，我们令 &lt;span class=&#34;math inline&#34;&gt;\(A_{\operatorname{ctz}(i),i}=a_i,B_{\operatorname{ctz}(j),j}=b_j\)&lt;/span&gt;，那么答案就转化为 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i}\sum\limits_{j\cup k=s}A_{i,j}\cdot B_{\operatorname{ctz}(s)-i,j}\)&lt;/span&gt;，就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2n)\)&lt;/span&gt; 地解决问题了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 9;
using arr = std::vector&amp;lt;long long&amp;gt;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    int l = 1 &amp;lt;&amp;lt; n;
    std::vector&amp;lt;arr&amp;gt; a(n + 1, arr(l)), b(n + 1, arr(l)), c(n + 1, arr(l));
    for (int i = 0, x; i &amp;lt; l; ++i)
        std::cin &amp;gt;&amp;gt; x, a[__builtin_popcount(i)][i] = x;
    for (int i = 0, x; i &amp;lt; l; ++i)
        std::cin &amp;gt;&amp;gt; x, b[__builtin_popcount(i)][i] = x;
    std::vector&amp;lt;arr&amp;gt; mT(2, arr(2)), mI(2, arr(2));
    mT[0][0] = 1ll, mT[0][1] = 0ll, mT[1][0] = 1ll, mT[1][1] = 1ll;
    mI[0][0] = 1ll, mI[0][1] = 0ll, mI[1][0] = mod - 1ll, mI[1][1] = 1ll;
    auto calc = [&amp;amp;](arr &amp;amp;f, std::vector&amp;lt;arr&amp;gt; &amp;amp;w) &amp;#123;
        for (int len = 2; len &amp;lt;= l; len &amp;lt;&amp;lt;= 1)
            for (int i = 0; i &amp;lt; l; i += len)
                for (int p = i, q = i + len / 2; q &amp;lt; i + len; ++p, ++q)
                    std::tie(f[p], f[q]) = std::make_tuple((f[p] * w[0][0] + f[q] * w[0][1]) % mod, (f[p] * w[1][0] + f[q] * w[1][1]) % mod);
        return;
    &amp;#125;;
    for (int i = 0; i &amp;lt;= n; ++i)
        calc(a[i], mT), calc(b[i], mT);
    for (int i = 0; i &amp;lt;= n; ++i) &amp;#123;
        for (int k = 0; k &amp;lt;= i; ++k)
            for (int j = 0; j &amp;lt; l; ++j)
                (c[i][j] += a[k][j] * b[i - k][j]) %= mod;
        calc(c[i], mI);
    &amp;#125;
    for (int j = 0; j &amp;lt; l; ++j)
        std::cout &amp;lt;&amp;lt; c[__builtin_popcount(j)][j] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;州区划分&#34;&gt;州区划分&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4221&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4221&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;人话：把 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点划分成若干个点集，保证每个点集的导出子图不是欧拉回路（每个点的度数为偶且图连通）。&lt;/p&gt;
&lt;p&gt;那么枚举每一个点集判定是否合法，再令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i}={w_i}^{-p}\times\sum\limits_{j\cup k = i\land j\cap k=\varnothing}f_{j}\times {w_k}^p\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;发现后面那个 sigma 里面是一个简单的子集卷积；但是我们发现前面有一个和 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 有关的常数，导致没办法直接卷 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 次。&lt;/p&gt;
&lt;p&gt;但我们发现这个 DP 其实是有一定隐含条件的——都是按照 &lt;span class=&#34;math inline&#34;&gt;\(\text{ctz}\)&lt;/span&gt; 从小到大转移。考虑子集卷积的第一维，得到 &lt;span class=&#34;math inline&#34;&gt;\(FWT_{f_i}\)&lt;/span&gt; 后先 IFWT 回来，乘上 &lt;span class=&#34;math inline&#34;&gt;\({w_i}^{-p}\)&lt;/span&gt;，再 FWT 回去即可。考察子集卷积的结构，发现这个是可以想办法套进去的。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;a href=&#34;https://atcoder.jp/contests/abc400/tasks/abc400_c&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(O(n^2\cdot 2^n)\)&lt;/span&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
using arr = std::vector&amp;lt;long long&amp;gt;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, p;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; p;
    int l = 1 &amp;lt;&amp;lt; n;
    auto qkp = [&amp;amp;](long long x, int y = mod - 2) &amp;#123;
        auto res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    arr w(n), inv(l);
    std::vector&amp;lt;arr&amp;gt; f(n + 1, arr(l)), s(n + 1, arr(l));
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n);
    for (int x, y; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y, --x, --y;
        g[x].push_back(y);
    &amp;#125;
    auto check = [&amp;amp;](int s) &amp;#123;
        std::vector&amp;lt;int&amp;gt; f(n), deg(n);
        std::iota(f.begin(), f.end(), 0);
        std::function&amp;lt;int(int)&amp;gt; find = [&amp;amp;](int x) &amp;#123;
            return x == f[x] ? x : f[x] = find(f[x]);
        &amp;#125;;
        auto merge = [&amp;amp;](int x, int y) &amp;#123;
            f[find(x)] = find(y);
            return;
        &amp;#125;;
        for (int i = 0; i &amp;lt; n; ++i)
            if ((s &amp;gt;&amp;gt; i) &amp;amp; 1)
                for (auto j : g[i])
                    if ((s &amp;gt;&amp;gt; j) &amp;amp; 1)
                        merge(i, j), ++deg[i], ++deg[j];
        int fa = -1;
        for (int i = 0; i &amp;lt; n; ++i)
            if ((s &amp;gt;&amp;gt; i) &amp;amp; 1) &amp;#123;
                if (deg[i] &amp;amp; 1)
                    return 1;
                if (fa == -1 || fa == find(i))
                    fa = find(i);
                else
                    return 1;
            &amp;#125;
        return 0;
    &amp;#125;;
    for (int i = 0; i &amp;lt; n; ++i)
        std::cin &amp;gt;&amp;gt; w[i];
    for (int i = 0; i &amp;lt; l; ++i) &amp;#123;
        int ctz = __builtin_popcount(i);
        for (int j = 0; j &amp;lt; n; ++j)
            if ((i &amp;gt;&amp;gt; j) &amp;amp; 1) 
                s[ctz][i] += w[j];
        s[ctz][i] = qkp(s[ctz][i], p);
        inv[i] = qkp(s[ctz][i]);
        if (!check(i))
            s[ctz][i] = 0ll;
    &amp;#125;
    std::vector&amp;lt;arr&amp;gt; mT(2, arr(2)), mI(2, arr(2));
    mT[0][0] = 1ll, mT[0][1] = 0ll, mT[1][0] = 1ll, mT[1][1] = 1ll;
    mI[0][0] = 1ll, mI[0][1] = 0ll, mI[1][0] = mod - 1ll, mI[1][1] = 1ll;
    auto calc = [&amp;amp;](arr &amp;amp;f, std::vector&amp;lt;arr&amp;gt; &amp;amp;w) &amp;#123;
        for (int len = 2; len &amp;lt;= l; len &amp;lt;&amp;lt;= 1)
            for (int i = 0; i &amp;lt; l; i += len)
                for (int p = i, q = i + len / 2; q &amp;lt; i + len; ++p, ++q)
                    std::tie(f[p], f[q]) = std::make_tuple((f[p] * w[0][0] + f[q] * w[0][1]) % mod, (f[p] * w[1][0] + f[q] * w[1][1]) % mod);
        return;
    &amp;#125;;
    f[0][0] = 1ll;
    for (int i = 0; i &amp;lt;= n; ++i)
        calc(s[i], mT);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        calc(f[i - 1], mT);
        for (int k = 0; k &amp;lt; i; ++k)
            for (int j = 0; j &amp;lt; l; ++j)
                (f[i][j] += f[k][j] * s[i - k][j]) %= mod;
        calc(f[i], mI);
        for (int j = 0; j &amp;lt; l; ++j)
            (f[i][j] *= inv[j]) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n][l - 1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b---sum-the-fibonacci&#34;&gt;B - Sum the Fibonacci&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/914/G&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/914/G&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，对于每个元素的 &lt;span class=&#34;math inline&#34;&gt;\(cnt\)&lt;/span&gt; 是好做的——做一次子集卷积得到 &lt;span class=&#34;math inline&#34;&gt;\(cnt_1(a\cup b)\)&lt;/span&gt;，做一次 xor-FWT 得到 &lt;span class=&#34;math inline&#34;&gt;\(cnt_2(d\oplus e)\)&lt;/span&gt;，中间的 &lt;span class=&#34;math inline&#34;&gt;\(cnt(c)\)&lt;/span&gt; 就是原样。&lt;/p&gt;
&lt;p&gt;值得注意的是可以在一次 and-FWT 后把 &lt;span class=&#34;math inline&#34;&gt;\(cnt,cnt_1,cnt_2\)&lt;/span&gt; 直接卷起来——由矩阵乘法结合律得（哈哈大笑了）。但怎么把 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 塞进去呢？如果你拥有小学生的数学水平，你可以很容易地想到直接在 &lt;span class=&#34;math inline&#34;&gt;\(cnt,cnt_1,cnt_2\)&lt;/span&gt; IFWT 后的结果分别对位乘上 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 即可，很可惜我并没有这样的数学能力 &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int N = 17;
const int mod = 1e9 + 7;
using arr = std::vector&amp;lt;long long&amp;gt;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, l;
    std::cin &amp;gt;&amp;gt; n, l = 1 &amp;lt;&amp;lt; N;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    arr f(l), cnt(l), cnt1(l), cnt2(l);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], ++cnt[a[i]];
    f[0] = 0ll, f[1] = 1ll;
    for (int i = 2; i &amp;lt; l; ++i)
        f[i] = (f[i - 1] + f[i - 2]) % mod;
    auto qkp = [&amp;amp;](long long x, int y = mod - 2) &amp;#123;
        auto res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    const int inv2 = qkp(2ll);
    std::vector&amp;lt;arr&amp;gt; mT(2, arr(2)), mI(2, arr(2));
    auto calc = [&amp;amp;](arr a, arr &amp;amp;f, std::vector&amp;lt;arr&amp;gt; &amp;amp;w) &amp;#123;
        f = a;
        for (int len = 2; len &amp;lt;= l; len &amp;lt;&amp;lt;= 1)
            for (int i = 0; i &amp;lt; l; i += len)
                for (int p = i, q = i + len / 2; q &amp;lt; i + len; ++p, ++q)
                    std::tie(f[p], f[q]) = std::make_tuple((f[p] * w[0][0] + f[q] * w[0][1]) % mod, (f[p] * w[1][0] + f[q] * w[1][1]) % mod);
        return;
    &amp;#125;;
    &amp;#123; // orFWT
        mT[0][0] = 1ll, mT[0][1] = 0ll, mT[1][0] = 1ll, mT[1][1] = 1ll;
        mI[0][0] = 1ll, mI[0][1] = 0ll, mI[1][0] = mod - 1ll, mI[1][1] = 1ll;
        std::vector&amp;lt;arr&amp;gt; u(N + 1, arr(l)), d(N + 1, arr(l));
        for (int i = 0; i &amp;lt; l; ++i)
            u[__builtin_popcount(i)][i] = cnt[i];
        for (int i = 0; i &amp;lt;= N; ++i)
            calc(u[i], u[i], mT);
        for (int i = 0; i &amp;lt;= N; ++i) &amp;#123;
            for (int j = 0; j &amp;lt; l; ++j)
                for (int k = 0; k &amp;lt;= i; ++k)
                    (d[i][j] += u[k][j] * u[i - k][j]) %= mod;
            calc(d[i], d[i], mI);
        &amp;#125;
        for (int i = 0; i &amp;lt; l; ++i)
            cnt1[i] = d[__builtin_popcount(i)][i] * f[i] % mod;
    &amp;#125;
    &amp;#123; // xor FWT
        mT[0][0] = 1ll, mT[0][1] = 1ll, mT[1][0] = 1ll, mT[1][1] = mod - 1ll;
        mI[0][0] = mI[0][1] = mI[1][0] = inv2, mI[1][1] = mod - inv2;
        calc(cnt, cnt2, mT);
        for (int i = 0; i &amp;lt; l; ++i)
            (cnt2[i] *= cnt2[i]) %= mod;
        calc(cnt2, cnt2, mI);
        for (int i = 0; i &amp;lt; l; ++i)
            (cnt2[i] *= f[i]) %= mod;
    &amp;#125;
    &amp;#123; // andFWT
        mT[0][0] = 0ll, mT[0][1] = 1ll, mT[1][0] = 1ll, mT[1][1] = 1ll;
        mI[0][0] = mod - 1ll, mI[0][1] = 1ll, mI[1][0] = 1ll, mI[1][1] = 0ll;
        for (int i = 0; i &amp;lt; l; ++i) // 这一步要放在 FWT 之前，原因显然 🤗
            (cnt[i] *= f[i]) %= mod;
        calc(cnt2, cnt2, mT), calc(cnt1, cnt1, mT), calc(cnt, cnt, mT);
        for (int i = 0; i &amp;lt; l; ++i)
            cnt[i] = cnt[i] * cnt1[i] % mod * cnt2[i] % mod % mod;
        calc(cnt, cnt, mI);
    &amp;#125;
    long long res = 0ll;
    for (int i = 0; i &amp;lt; N; ++i)
        (res += cnt[1 &amp;lt;&amp;lt; i] % mod) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="高维前缀和" />
        <category term="FWT" />
        <updated>2025-03-29T07:00:21.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250222/</id>
        <title>中等题目 Practice</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250222/"/>
        <content type="html">
</content>
        <updated>2025-02-22T09:31:36.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250219/</id>
        <title>杂题集</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250219/"/>
        <content type="html">&lt;p&gt;不在沉默中躺平，就在喧嚣中躺平。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;但谁说人一定要躺平？我要 work work work work work work work work 勤劳又勇敢的 XSC062 为了 OI 的关键杂题集 她作出了巨大的贡献 巨大的牺牲 巨大的 carry 无敌了 无敌了 &lt;img src=&#34;/em/kt.gif&#34; alt=&#34;磕头&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;usaco23jan-moo-route-g&#34;&gt;[USACO23JAN] Moo Route G&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9018&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9018&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关键词：&lt;mark&gt;由小推大&lt;/mark&gt; &lt;mark&gt;思维&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;希望大家不要和我一样忽略了重要条件：终点也是 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。这意味着每个点都会被左右成对地经过，那么不妨令 &lt;span class=&#34;math inline&#34;&gt;\(A_i\gets \frac 2{A_i}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;观察到给了 &lt;span class=&#34;math inline&#34;&gt;\(N=2\)&lt;/span&gt; 的一档分，考虑该情况。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(A_1&amp;gt; A_2\)&lt;/span&gt;：&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;此时最优策略为……&lt;/summary&gt;&lt;/p&gt;
&lt;pre class=&#34;plain{data-line=&amp;quot;1,2,5,6,9,10&amp;quot;}&#34;&gt;&lt;code&gt;|---------&amp;gt;
&amp;lt;---------|
|---------&amp;gt;
&amp;lt;---------|
|---------&amp;gt;
&amp;lt;---------|
|----&amp;gt;
&amp;lt;----|
|----&amp;gt;
&amp;lt;----|
===========
0    1    2&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
只要不拆开一组，箭头排列顺序任意。显然方案数为 &lt;span class=&#34;math inline&#34;&gt;\({A_1}\choose {A_2}\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Otherwise：&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;此时最优策略为……&lt;/summary&gt;&lt;/p&gt;
&lt;pre class=&#34;plain{data-line=&amp;quot;4,5,7,8&amp;quot;}&#34;&gt;&lt;code&gt;|----------&amp;gt;
      &amp;lt;----|
      |----&amp;gt;
      &amp;lt;----|
      |----&amp;gt;
 &amp;lt;---------|
 |---------&amp;gt;
 &amp;lt;---------|
 ===========
 0    1    2&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;相似地，只要不拆开一组，箭头排列顺序任意，可以注意到除了第一个，每个长 &lt;code&gt;|---&amp;gt;&lt;/code&gt; 的前面一定是一个长 &lt;code&gt;&amp;lt;---|&lt;/code&gt;，那么问题转化为选择 &lt;span class=&#34;math inline&#34;&gt;\(A_1-1\)&lt;/span&gt; 个短 &lt;code&gt;&amp;lt;---|&lt;/code&gt; 拉长，方案数为 &lt;span class=&#34;math inline&#34;&gt;\({A_2-1}\choose{A_1-1}\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进一步，考虑 &lt;span class=&#34;math inline&#34;&gt;\(N=3\)&lt;/span&gt; 的情况。若已知子问题 &lt;span class=&#34;math inline&#34;&gt;\(0\to1\to2\)&lt;/span&gt; 的方案和子问题 &lt;span class=&#34;math inline&#34;&gt;\(1\to2\to3\)&lt;/span&gt; 的方案，可以直接乘起来合并。为什么呢？&lt;/p&gt;
&lt;p&gt;二者经过 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的次数相等；在子问题 &lt;span class=&#34;math inline&#34;&gt;\(0\to1\to2\)&lt;/span&gt; 中，&lt;span class=&#34;math inline&#34;&gt;\(1\to2\)&lt;/span&gt; 的下一步一定是 &lt;span class=&#34;math inline&#34;&gt;\(2\to 1\)&lt;/span&gt;；我们把该过程替换为子问题 &lt;span class=&#34;math inline&#34;&gt;\(1\to 2\to 3\)&lt;/span&gt; 中对应的一段 &lt;span class=&#34;math inline&#34;&gt;\(1\to2\to\cdots\to2\to1\)&lt;/span&gt; 的路径即可。&lt;/p&gt;
&lt;p&gt;那么两两合并起来，可以得到最终答案为 &lt;span class=&#34;math inline&#34;&gt;\(\prod\limits_{i=1}^{n-1}\begin{cases}{\binom{A_i}{A_{i+1}}}&amp;amp;A_i&amp;gt;A_{i+1}\\{\binom{A_{i+1}-1}{A_i-1}}&amp;amp;\text{otherwise}\end{cases}\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 5e5;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i], a[i] /= 2;
    std::vector&amp;lt;long long&amp;gt; inv(lim + 1), fac(lim + 1);
    auto qkp = [&amp;amp;](long long x, int y) &amp;#123;
        long long res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    inv[0] = fac[0] = 1ll;
    for (int i = 1; i &amp;lt;= lim; ++i)
        fac[i] = fac[i - 1] * i % mod;
    inv[lim] = qkp(fac[lim], mod - 2);
    for (int i = lim - 1; i; --i)
        inv[i] = inv[i + 1] * (i + 1) % mod;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        return fac[n] * inv[n - m] % mod * inv[m] % mod;
    &amp;#125;;
    long long res = 1ll;
    for (int i = 1; i &amp;lt; n; ++i)
        if (a[i] &amp;gt; a[i + 1])
            (res *= C(a[i], a[i + 1])) %= mod;
        else
            (res *= C(a[i + 1] - 1, a[i] - 1)) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;gdkoi2024-普及组-正方形扩展&#34;&gt;[GDKOI2024 普及组] 正方形扩展&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10078&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10078&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关键词：&lt;mark&gt;分类讨论&lt;/mark&gt; &lt;mark&gt;扫描线&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;理论上看懂了就是弱智题，可惜看不懂。&lt;/p&gt;
&lt;p&gt;就是说，一个点如果被染了某种颜色，并且以它为中心的边长为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的正方形中没有其他颜色的点，就把这个正方形里的点都染成这个颜色，问每个颜色面积是否能达到无穷大。&lt;/p&gt;
&lt;p&gt;考虑无法达到无穷大的原因，一定是因为向四个方向都无法延伸到无穷远。以右边为例，考虑点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 什么时候不能在 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 轴正方向上延伸到无穷远：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(\forall \, j,x_j\le x_i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; &lt;strong&gt;不会&lt;/strong&gt;对 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 向右的延伸带来任何影响——所有点的延伸速度相同。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(x_j&amp;gt;x_i\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(y_j=y_i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 可以堵住 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这时候不免产生疑问：&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 不能从上下「翻越」过 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的统治吗？&lt;/p&gt;
&lt;p&gt;显而易见地，由于延伸速度相同，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 在某时刻能够在 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 轴上到达的高度，&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 也能达到，所以 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; &lt;strong&gt;能够&lt;/strong&gt;把 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 堵死，参见题面中给出的例子。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(x_j&amp;gt;x_i\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(y_j \ne y_i\)&lt;/span&gt;，由上所述，&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 轴下 / 上方向&lt;strong&gt;无法&lt;/strong&gt;追上 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 可以从该方向越过 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 轴正方向上延伸到无穷远；但 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 在自己所在的一侧（上 / 下）&lt;strong&gt;可以&lt;/strong&gt;堵住 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(x_j,x_k&amp;gt;x_i\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\((y_j-y_i)(y_k-y_i)&amp;lt;0\)&lt;/span&gt;（即二者分居 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 点上下），&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; &lt;strong&gt;可以&lt;/strong&gt;在两个方向分别拦截住 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;此时可能有疑问：&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 可不可以先越过 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; ，再越过 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 呢？答案是否定的。由上，&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 会分别在 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 轴自身对应方向上堵住 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，在越过其中之一后无法从这一侧越过另一个点，所以 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 会被两个点合作堵死。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由此我们总结出，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 能在 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 轴正方向被拦截，当且仅当：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在 &lt;span class=&#34;math inline&#34;&gt;\(x_j&amp;gt;x_i\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(y_j=y_i\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;抑或，存在 &lt;span class=&#34;math inline&#34;&gt;\(x_j,x_k&amp;gt;x_i\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(y_j&amp;lt;y_i,y_k&amp;gt;y_i\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么可以从四个方向分别用扫描线求解。鉴于和实际坐标数值没有什么直接关系，可以离散化后树状数组以避免被卡常。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;金鱼草&#34;&gt;金鱼草&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/20250819/#金鱼草区间覆盖信息&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
</content>
        <updated>2025-02-19T07:33:17.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250217/</id>
        <title>线段树维护前缀最值序列信息</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250217/"/>
        <content type="html">&lt;p&gt;人类不应该使用 &lt;code&gt;std::vector&lt;/code&gt; 实现线段树的 2 个原因：&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;当你的参数包含引用时，扩容操作，包括显式的 &lt;code&gt;resize()&lt;/code&gt; 和隐式的 &lt;code&gt;push_back()&lt;/code&gt; 均会导致引用失效。&lt;/li&gt;
&lt;li&gt;当你的左值为引用时，由于 &lt;code&gt;=&lt;/code&gt; 左右计算顺序是不确定的（C++14），由于 1 中所述原因，引用可能失效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terminate called after throwing an instance of &#39;std::bad_alloc&#39; what():  std::bad_alloc&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;笑点解析：首先通过「……的 2 个原因」暗示声明一个长度为 2 的 &lt;code&gt;vector&lt;/code&gt;，接着在试图访问第 3 个元素时抛出错误。&lt;/p&gt;
&lt;p&gt;什么？你说我的下标是从 1 开始的？恭喜你发现了 &lt;code&gt;vector&lt;/code&gt; 的第 0 个笑点。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;楼房重建&#34;&gt;楼房重建&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4198&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4198&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑用线段树解决问题。难点在于如何合并两个区间的信息——直觉地，大区间的信息一定与两个子区间有关。&lt;/p&gt;
&lt;p&gt;考虑理想的情况：我们现在知道左右两边区间的答案序列。显然我们需要保留左边整段区间，对于左区间序列末的元素 &lt;span class=&#34;math inline&#34;&gt;\(rv_l\)&lt;/span&gt;，我们在右区间内找到第一个大于之的元素 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，从它开始的序列就是答案。&lt;/p&gt;
&lt;p&gt;反证法易得 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 一定在右区间答案序列内：若 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 不在答案序列内，则右区间内存在一个 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;x\)&lt;/span&gt; 且位于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 之前的元素，那么 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 就不是第一个 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;rv_l\)&lt;/span&gt; 的元素，矛盾。&lt;/p&gt;
&lt;p&gt;那么现在对于左右序列未知的情况，我们取左区间的答案，再在右区间中单 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 查找能够接上去的区间长度，加起来即可。&lt;/p&gt;
&lt;p&gt;题目只要求总区间答案，故不需要查询。动态开点可能需要小心处理一下。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 1e5 + 5;
struct &amp;#123;
    int l, r, u;
    double lv, rv, mv;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int tot;
#define lt t[p].l
#define rt t[p].r
int askt(int p, int l, int r, double v) &amp;#123;
    if (l == r)
        return t[p].u;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (lt &amp;amp;&amp;amp; t[p].mv &amp;gt; v)
        return t[p].u - t[lt].u + askt(lt, l, mid, v);
    return askt(rt, mid + 1, r, v);
&amp;#125;
void pushup(int p, int l, int r) &amp;#123;
    t[p].mv = t[lt].rv;
    if (lt &amp;amp;&amp;amp; rt) &amp;#123;
        t[p].lv = t[lt].lv;
        t[p].rv = std::max(t[lt].rv, t[rt].rv);
        if (t[lt].rv &amp;lt; t[rt].lv)
            t[p].u = t[lt].u + t[rt].u;
        else if (t[lt].rv &amp;gt;= t[rt].rv)
            t[p].u = t[lt].u;
        else &amp;#123;
            int mid = (l + r) &amp;gt;&amp;gt; 1;
            t[p].u = t[lt].u + askt(rt, mid + 1, r, t[lt].rv);
        &amp;#125;
    &amp;#125;
    else &amp;#123;
        t[p].u = t[lt + rt].u;
        t[p].lv = t[lt + rt].lv, t[p].rv = t[lt + rt].rv;
    &amp;#125;
    return;
&amp;#125;
void upd(int &amp;amp;p, int l, int r, int x, double v) &amp;#123;
    if (!p)
        p = ++tot;
    if (l == r) &amp;#123;
        t[p].lv = t[p].rv = v, t[p].u = 1;
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, l, mid, x, v);
    else
        upd(rt, mid + 1, r, x, v);
    pushup(p, l, r);
    return;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P4198_2.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, rt = 0;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;double&amp;gt; a(n + 1);
    for (int x; m--; ) &amp;#123;
        double y;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        a[x] = y / x;
        upd(rt, 1, n, x, y / x);
        std::cout &amp;lt;&amp;lt; t[1].u &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <updated>2025-02-17T11:09:57.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250216/</id>
        <title>Public Round 15 前两题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250216/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;https://pjudge.ac/contest/1914&#34;&gt;PR #15&lt;/a&gt; 前两题题解。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;最小表示法&#34;&gt;最小表示法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pjudge.ac/contest/1914/problem/21888&#34; class=&#34;uri&#34;&gt;https://pjudge.ac/contest/1914/problem/21888&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先不妨假设每个 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 在值域内等概率取值以简化问题。那么手玩一下可以轻松地得到规律：不妨将 &lt;span class=&#34;math inline&#34;&gt;\(\{s\}\)&lt;/span&gt; 循环右移一位的结果记为 &lt;span class=&#34;math inline&#34;&gt;\(\{t\}\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(res=\sum\frac 1{\max(|s_i|,|t_i|)}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这看起来令人疑惑：对于不同的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\([f(s_i)=f(t_i)]\)&lt;/span&gt; 的期望似乎是彼此独立的，十分奇怪。这其实与表达式的来源有关，记 &lt;span class=&#34;math inline&#34;&gt;\(g(s_i, j)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(f(s_i)=j\)&lt;/span&gt; 的概率，那么上述等式可以转写为 &lt;span class=&#34;math inline&#34;&gt;\(res=\sum\limits_i\sum\limits_jg({s_i},j)\times g(t_i,j)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么将最小表示法带来的偏差纳入考虑范围，我们发现 &lt;span class=&#34;math inline&#34;&gt;\(g(s,j)\)&lt;/span&gt; 对于不同的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 并不永远相等。具体地，当 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 具有循环节时，最小循环节的第一处结尾会享有更大的取得概率。&lt;/p&gt;
&lt;p&gt;枚举 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 的因数作为最小循环节长度的情况，显然，对于最小循环节为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的情况（该情况出现的概率，容斥得到 &lt;span class=&#34;math inline&#34;&gt;\(p_j=26^j-\sum_{k\mid j}p_k\)&lt;/span&gt;），&lt;span class=&#34;math inline&#34;&gt;\(f(s_i)\)&lt;/span&gt; 的取值在 &lt;span class=&#34;math inline&#34;&gt;\(1\sim j\)&lt;/span&gt; 上等概率分布，差分即可统计每个值在不同循环节长度下被取到的概率和。&lt;/p&gt;
&lt;p&gt;用埃筛解决每个数的因数和 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 值，那么此时复杂度瓶颈在于 &lt;span class=&#34;math inline&#34;&gt;\(g(s_i, j)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_i\sum\limits_jg({s_i},j)\times g(t_i,j)\)&lt;/span&gt; 的求解。容易发现只有每个 &lt;span class=&#34;math inline&#34;&gt;\(g(s_i,j),j\mid |s_i|\)&lt;/span&gt; 的值是有效的（其他的和它们值都相同），考虑只求解和利用这些值，类 &lt;code&gt;std::merge&lt;/code&gt;（即归并排序）地求解答案。&lt;/p&gt;
&lt;p&gt;注意特判 &lt;span class=&#34;math inline&#34;&gt;\(n=1\)&lt;/span&gt;。会得到错误答案的原因是此时存在 &lt;span class=&#34;math inline&#34;&gt;\(s_i=t_i\)&lt;/span&gt;，不满足基本要求。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 1e5;
const int mod = 998244353;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    if (n == 1) &amp;#123;
        std::cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        return 0;
    &amp;#125;
    auto qkp = [](long long x, int y) &amp;#123;
        long long res = 1ll;
        for (; y; y &amp;gt;&amp;gt;= 1, (x *= x) %= mod)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto inv = [&amp;amp;](int x) &amp;#123;
        return qkp(x, mod - 2);
    &amp;#125;;
    std::vector&amp;lt;long long&amp;gt; f(lim + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; fac(lim + 1);
    for (int i = 1; i &amp;lt;= lim; ++i) &amp;#123;
        static long long now = 26;
        (f[i] += now) %= mod;
        fac[i].push_back(i);
        for (int j = 2 * i; j &amp;lt;= lim; j += i)
            (f[j] += mod - f[i]) %= mod, fac[j].push_back(i);
        (now *= 26) %= mod;
    &amp;#125;
    for (int i = 1; i &amp;lt;= lim; ++i)
        (f[i] *= inv(i)) %= mod;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    struct _ &amp;#123; int l, r; long long f; &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;_&amp;gt; &amp;gt; g(lim + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        if (g[a[i]].empty()) &amp;#123;
            g[a[i]].resize(fac[a[i]].size());
            for (int j = 0; j &amp;lt; (int)fac[a[i]].size(); ++j) &amp;#123;
                g[a[i]][j].l = (j ? g[a[i]][j - 1].r + 1 : 1);
                g[a[i]][j].r = fac[a[i]][j];
                (g[a[i]][0].f += f[fac[a[i]][j]]) %= mod;
                if (j != (int)fac[a[i]].size() - 1)
                    (g[a[i]][j + 1].f += mod - f[fac[a[i]][j]]) %= mod;
            &amp;#125;
            for (int j = 1; j &amp;lt; (int)fac[a[i]].size(); ++j)
                (g[a[i]][j].f += g[a[i]][j - 1].f) %= mod;
            int getinv = inv(qkp(26, a[i]));
            for (int j = 0; j &amp;lt; (int)fac[a[i]].size(); ++j)
                (g[a[i]][j].f *= getinv) %= mod;
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; b(n + 1);
    std::rotate_copy(a.begin() + 1, --a.end(), a.end(), b.begin() + 1);
    long long res = 0ll;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 0, k = 0, now = 0;
            j &amp;lt; (int)fac[a[i]].size() &amp;amp;&amp;amp; k &amp;lt; (int)fac[b[i]].size(); )
            if (g[a[i]][j].r &amp;lt; g[b[i]][k].r) &amp;#123;
                (res += g[a[i]][j].f * g[b[i]][k].f % mod
                    * (g[a[i]][j].r - now) % mod) %= mod;
                now = g[a[i]][j].r, ++j;
            &amp;#125;
            else if (g[a[i]][j].r == g[b[i]][k].r) &amp;#123;
                (res += g[a[i]][j].f * g[b[i]][k].f % mod
                    * (g[a[i]][j].r - now) % mod) %= mod;
                now = g[a[i]][j].r, ++j, ++k;
            &amp;#125;
            else &amp;#123;
                (res += g[a[i]][j].f * g[b[i]][k].f % mod
                    * (g[b[i]][k].r - now) % mod) %= mod;
                now = g[b[i]][k].r, ++k;
            &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;二叉搜索树&#34;&gt;二叉搜索树&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pjudge.ac/contest/1914/problem/21889&#34; class=&#34;uri&#34;&gt;https://pjudge.ac/contest/1914/problem/21889&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当我们处理链的部分分时，很容易想到用差分解决问题。把更新 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 看作在差分数组 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 处插入，在 &lt;span class=&#34;math inline&#34;&gt;\(r+1\)&lt;/span&gt; 处删除，离线下来再从左到右扫一遍操作，考虑如何解决查询问题。&lt;/p&gt;
&lt;p&gt;考虑如何获取 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 树上 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 时刻点 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的所有祖先。根据前面的操作，我们可以获取 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 树上存在过的所有元素。&lt;/p&gt;
&lt;p&gt;对于比 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 大的元素，考虑祖先 &lt;span class=&#34;math inline&#34;&gt;\(p_a\)&lt;/span&gt; 和非祖先 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 有什么区别。根据 BST 的性质易得，对于最低的右侧祖先 &lt;span class=&#34;math inline&#34;&gt;\({p_a}_0\)&lt;/span&gt;，其是 &lt;span class=&#34;math inline&#34;&gt;\(\ge x\)&lt;/span&gt; 的最小的元素（当然其加入时刻 &lt;span class=&#34;math inline&#34;&gt;\(t_a&amp;lt;t_0\)&lt;/span&gt;）；那么同理可以找到 &lt;span class=&#34;math inline&#34;&gt;\({p_a}_0\)&lt;/span&gt; 右侧最低的祖先（其左侧的祖先显然也 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 左侧），该祖先满足 &lt;span class=&#34;math inline&#34;&gt;\(t&amp;lt;t_a\)&lt;/span&gt;。那么我们就从左右两边分别得到 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的所有祖先。容易证明该过程对于不在树上的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 也是正确的。&lt;/p&gt;
&lt;p&gt;具体地，我们需要一个数据结构，能够求出 &lt;span class=&#34;math inline&#34;&gt;\(\ge x\)&lt;/span&gt; 的元素中，以 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 为起点的前缀最小值序列的区间和。&lt;/p&gt;
&lt;p&gt;欸 ☝🤓 这是什么？&lt;a href=&#34;/20250217&#34;&gt;楼房重建&lt;/a&gt;！秒一下！&lt;/p&gt;
&lt;p&gt;进一步地，本题需要完成对于 &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt; 为序列头的查询。再次利用性质，每次 &lt;span class=&#34;math inline&#34;&gt;\(O(\log V)\)&lt;/span&gt; 地合并答案。&lt;/p&gt;
&lt;p&gt;好的那么怎么把链搞到树上呢？把差分放到树上，写个线段树合并即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意由于这题细节太多了，所以你可能需要舍弃不必要的时空优化换取代码简洁度以方便调试。&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre data-line=&#34;12&#34; class=&#34;cpp language-cpp&#34;&gt;&lt;code data-line=&#34;12&#34; class=&#34;cpp language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int lim = 2e5;
const int maxn = 2e7 + 5;
const int inf = 0x3f3f3f3f;
struct &amp;#123;
    int l, r, rv;
    long long u;
&amp;#125; t[maxn];
std::vector&amp;lt;int&gt; tr;
#define lt t[p].l
#define rt t[p].r
int newnode(void) &amp;#123;         // 我知道你要说什么，但这属于「必要的」空间优化 😥
    static int tot = 0;
    if (tr.empty())
        return ++tot;
    auto p(tr.back());
    t[p].l = t[p].r = 0;
    tr.pop_back();
    return p;
&amp;#125;
long long askv(int p, int l, int r, int v) &amp;#123;
    if (l == r)
        return t[p].rv &lt; v ? t[p].u : 0;
    int mid = (l + r) &gt;&gt; 1;
    if (v &gt; t[lt].rv)
        return t[p].u - t[lt].u + askv(lt, l, mid, v);
    return askv(rt, mid + 1, r, v);
&amp;#125;
void pushup(int p, int l, int r) &amp;#123;
    t[p].rv = std::min(t[lt].rv, t[rt].rv);
    int mid = (l + r) &gt;&gt; 1;
    t[p].u = t[lt].u + askv(rt, mid + 1, r, t[lt].rv);
    return;
&amp;#125;
void upd(int &amp;p, int l, int r, int x, int v, int u) &amp;#123;
    if (!p)
        p = newnode();
    if (l == r) &amp;#123;
        t[p].rv = v, t[p].u = u;
        return;
    &amp;#125;
    int mid = (l + r) &gt;&gt; 1;
    if (x &lt;= mid)
        upd(lt, l, mid, x, v, u);
    else
        upd(rt, mid + 1, r, x, v, u);
    pushup(p, l, r);
    return;
&amp;#125;
void merge(int &amp;p, int q, int l, int r) &amp;#123;
    if (!p || !q) &amp;#123;
        p += q;
        return;
    &amp;#125;
    if (l == r) &amp;#123;
        t[p].rv = std::min(t[p].rv, t[q].rv);
        t[p].u = std::max(t[p].u, t[q].u);
        return;
    &amp;#125;
    int mid = (l + r) &gt;&gt; 1;
    merge(t[p].l, t[q].l, l, mid), merge(t[p].r, t[q].r, mid + 1, r);
    pushup(p, l, r), tr.push_back(q);
    return;
&amp;#125;
int qv = inf;
long long ask(int p, int l, int r, int ql, int qr) &amp;#123;
    if (ql &lt;= l &amp;&amp; r &lt;= qr) &amp;#123;
        auto s(askv(p, l, r, qv));
        qv = std::min(qv, t[p].rv);
        return s;
    &amp;#125;
    int mid = (l + r) &gt;&gt; 1;
    long long res = 0ll;
    if (ql &lt;= mid)
        res = ask(lt, l, mid, ql, qr);
    if (qr &gt; mid)
        res += ask(rt, mid + 1, r, ql, qr);
    return res;
&amp;#125;
#undef lt
#undef rt
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&#34;ex_problem4.in&#34;, &#34;r&#34;, stdin);
    std::freopen(&#34;.out&#34;, &#34;w&#34;, stdout);
#endif
    int n, m;
    std::cin &gt;&gt; n &gt;&gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; g(n + 1);
    for (int i = 1, x, y; i &lt; n; ++i) &amp;#123;
        std::cin &gt;&gt; x &gt;&gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&gt; top(n + 1), fa(n + 1), siz(n + 1), son(n + 1), dep(n + 1);
    std::function&amp;lt;void(int, int)&gt; DFS = [&amp;](int x, int faa) &amp;#123;
        siz[x] = 1;
        for (auto i : g[x])
            if (i != faa) &amp;#123;
                fa[i] = x, dep[i] = dep[x] + 1;
                DFS(i, x), siz[x] += siz[i];
                if (siz[i] &gt; siz[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    DFS = [&amp;](int x, int topp) &amp;#123;
        top[x] = topp;
        if (son[x])
            DFS(son[x], topp);
        for (auto i : g[x])
            if (i != fa[x] &amp;&amp; i != son[x])
                DFS(i, i);
        return;
    &amp;#125;;
    DFS(1, 1);
    auto getLCA = [&amp;](int x, int y) &amp;#123;
        for (; top[x] != top[y]; x = fa[top[x]])
            if (dep[top[y]] &gt; dep[top[x]])
                std::swap(x, y);
        return (dep[x] &lt; dep[y] ? x : y);
    &amp;#125;;
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; d(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&gt; &gt; &gt; u(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::tuple&amp;lt;int, int, int&gt; &gt; &gt; q(n + 1);
    int cnt = 0;
    for (int i = 1; i &lt;= m; ++i) &amp;#123;
        int op;
        std::cin &gt;&gt; op;
        if (op == 0) &amp;#123;
            int x, v;
            std::cin &gt;&gt; x &gt;&gt; v;
            q[x].emplace_back(++cnt, i, v);
        &amp;#125; else &amp;#123;
            int x, y, v;
            std::cin &gt;&gt; x &gt;&gt; y &gt;&gt; v;
            int faa = getLCA(x, y);
            u[x].emplace_back(i, v), u[y].emplace_back(i, v);
            if (fa[faa])
                d[fa[faa]].emplace_back(v);
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;long long&gt; res(cnt + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&gt; &gt; rt(2, std::vector&amp;lt;int&gt; (n + 1));
    t[0].rv = inf;
    DFS = [&amp;](int x, int fa) &amp;#123;
        for (auto i : g[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                merge(rt[0][x], rt[0][i], 1, lim);
                merge(rt[1][x], rt[1][i], 1, lim);
            &amp;#125;
        for (auto [t, v] : u[x]) &amp;#123;
            upd(rt[0][x], 1, lim, v, t, v);
            upd(rt[1][x], 1, lim, lim - v + 1, t, v);
        &amp;#125;
        for (auto v : d[x]) &amp;#123;
            upd(rt[0][x], 1, lim, v, inf, 0);
            upd(rt[1][x], 1, lim, lim - v + 1, inf, 0);
        &amp;#125;
        for (auto [id, t, v] : q[x]) &amp;#123;
            qv = t, res[id] = ask(rt[0][x], 1, lim, v, lim);
            qv = t, res[id] += ask(rt[1][x], 1, lim, lim - v + 1, lim);
            qv = t, res[id] -= ask(rt[0][x], 1, lim, v, v);
        &amp;#125;
    &amp;#125;;
    DFS(1, -1);
    for (int i = 1; i &lt;= cnt; ++i)
        std::cout &lt;&lt; res[i] &lt;&lt; &#39;\n&#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <category term="数学" />
        <category term="树上差分" />
        <updated>2025-02-16T11:44:38.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250202/</id>
        <title>学习笔记：后缀数组</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250202/"/>
        <content type="html">&lt;p&gt;非常后知后觉地意识到 SA(Suffix Array) 和 SAM(Suffix Automaton) 的 A 不是同一个 A &lt;img src=&#34;/em/fad.gif&#34; /&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;显而易见一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的字符串中有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个长度分别为 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 的后缀，如果我们对其按字典序排序，分别存储下排名 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的后缀 &lt;span class=&#34;math inline&#34;&gt;\(sa_i\)&lt;/span&gt; 和每个后缀 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的排名 &lt;span class=&#34;math inline&#34;&gt;\(rk_i\)&lt;/span&gt;。虽然看着挺没头没尾的，但是很有用。&lt;/p&gt;
&lt;h2 id=&#34;求解&#34;&gt;求解&lt;/h2&gt;
&lt;h3 id=&#34;哈希-排序&#34;&gt;哈希 + 排序&lt;/h3&gt;
&lt;p&gt;直接把所有后缀拿来排序的话，字符串比较是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的。如果我们用哈希 + 二分优化比较过程，就可以把整个排序优化到 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2 n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;倍增&#34;&gt;倍增&lt;/h3&gt;
&lt;p&gt;先对所有后缀按 &lt;strong&gt;第一个字符&lt;/strong&gt; 排序，记排序后排名序列为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么怎么按 &lt;strong&gt;前两个字符&lt;/strong&gt; 排序呢？对于第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 组字符，我们用 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_{i+1})\)&lt;/span&gt; 双关键字排序即可。记此时排名序列为 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;，那么如果需要按照前四个字符排序，用 &lt;span class=&#34;math inline&#34;&gt;\((b_i,b_{i+2})\)&lt;/span&gt; 进行双关键字排序即可。总共需要进行 &lt;span class=&#34;math inline&#34;&gt;\(\log n\)&lt;/span&gt; 次排序。复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;此时我们注意到排名数组的值域为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，那么我们用桶排就能少一个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;哈希很好实现，这里就按下不表，主要讲解倍增法的实现。&lt;/p&gt;
&lt;p&gt;描述起来很简单，实现起来很要命。OI wiki 上的实现算是相对好理解的：&lt;/p&gt;
&lt;p&gt;首先了解双关键字桶排的方法，首先用单关键字桶排完成对 &lt;strong&gt;第二关键字&lt;/strong&gt; 的排序；对于第一关键字，令桶 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 记录前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个元素的数量；遍历排序后的第二关键字数组，将元素放到桶中记录数值对应的下标中，并将桶中数值 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;。实际上桶 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 充当计算下标范围的作用，&lt;span class=&#34;math inline&#34;&gt;\((c_{i-1},c_i]\)&lt;/span&gt; 即为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 分布的范围。&lt;/p&gt;
&lt;p&gt;显然，当且仅当排名种类为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，即没有并列排名时，排序完成。设本轮区间长度为 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;，对于一轮操作：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;计算每个区间按后半段 &lt;span class=&#34;math inline&#34;&gt;\(\frac w2\)&lt;/span&gt; 长度字符排序的结果：&lt;span class=&#34;math inline&#34;&gt;\((n-w,n]\)&lt;/span&gt; 开头的区间后半段均为空，直接放在序列首端；接着按照上一轮 &lt;span class=&#34;math inline&#34;&gt;\(sa\)&lt;/span&gt; 结果，把能够作为后半段的元素依次放入。&lt;/li&gt;
&lt;li&gt;依照上一轮的 &lt;span class=&#34;math inline&#34;&gt;\(rk\)&lt;/span&gt; 作为前半段排名，进行双关键字桶排。&lt;/li&gt;
&lt;li&gt;依照 &lt;span class=&#34;math inline&#34;&gt;\(sa\)&lt;/span&gt; 和第二关键字（处理并列），求出 &lt;span class=&#34;math inline&#34;&gt;\(rk\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;std::vector&amp;lt;int&amp;gt; la(n + 2);
std::copy(s.begin(), s.end(), rk.begin());
int m = 128;
&amp;#123;
    std::vector&amp;lt;int&amp;gt; c(m + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        ++c[rk[i]];
    std::partial_sum(c.begin(), c.end(), c.begin());
    for (int i = n; i; --i)
        sa[c[rk[i]]--] = i;
&amp;#125; 
for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
    std::vector&amp;lt;int&amp;gt; id(1);
    for (int i = n - w + 1; i &amp;lt;= n; ++i)
        id.push_back(i);
    for (int i = 1; i &amp;lt;= n; ++i)
        if (sa[i] &amp;gt; w)
            id.push_back(sa[i] - w);
    std::vector&amp;lt;int&amp;gt; c(m + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        ++c[rk[i]];
    std::partial_sum(c.begin(), c.end(), c.begin());
    for (int i = n; i; --i)
        sa[c[rk[id[i]]]--] = id[i];
    p = 0;
    std::copy(rk.begin(), rk.end(), la.begin());
    for (int i = 1; i &amp;lt;= n; ++i)
        if (la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
            rk[sa[i]] = p;
        else
            rk[sa[i]] = ++p;
    if (p == n)
        break;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;纯-sa-的应用&#34;&gt;纯 SA 的应用&lt;/h2&gt;
&lt;h3 id=&#34;最小表示法&#34;&gt;最小表示法&lt;/h3&gt;
&lt;p&gt;模板：&lt;a href=&#34;https://www.luogu.com.cn/problem/P1368&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1368&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;对于循环位移相关要求，首先考虑将字符串重复一遍。&lt;/p&gt;
&lt;p&gt;在 &lt;span class=&#34;math inline&#34;&gt;\(ss\)&lt;/span&gt; 中找到排名第一个 &lt;span class=&#34;math inline&#34;&gt;\(sa_i\le n\)&lt;/span&gt; 即为答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; s(2 * n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; s[i], s[n + i] = s[i];
    std::vector&amp;lt;int&amp;gt; sa(2 * n + 1), rk(s);
    &amp;#123;
        int m = 29;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= 2 * n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = 2 * n; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(1);
            for (int i = 2 * n - w + 1; i &amp;lt;= 2 * n; ++i)
                id.push_back(i);
            for (int i = 1; i &amp;lt;= 2 * n; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= 2 * n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = 2 * n; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            auto la(rk);
            p = 0;
            for (int i = 1; i &amp;lt;= 2 * n; ++i)
                if (i != 1 &amp;amp;&amp;amp; la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == 2 * n)
                break;
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= 2 * n; ++i)
        if (sa[i] &amp;lt;= n) &amp;#123;
            for (int j = sa[i]; j &amp;lt; n + sa[i]; ++j)
                std::cout &amp;lt;&amp;lt; s[j] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
            std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            break;
        &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;字符串匹配&#34;&gt;字符串匹配&lt;/h3&gt;
&lt;p&gt;二分，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(|S|\log |T|)\)&lt;/span&gt;。求出现次数则二分左右边界。&lt;/p&gt;
&lt;p&gt;太麻烦了且没有实际应用价值，代码略。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;height-数组&#34;&gt;height 数组&lt;/h2&gt;
&lt;p&gt;定义 &lt;span class=&#34;math inline&#34;&gt;\(h_i=\text {lcp}(sa_i, sa_i-1)\)&lt;/span&gt;，特别地，&lt;span class=&#34;math inline&#34;&gt;\(h_1=0\)&lt;/span&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有引理：&lt;span class=&#34;math inline&#34;&gt;\(h_{rk_i}\ge h_{rk_{i-1}}-1\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设已经求出 &lt;span class=&#34;math inline&#34;&gt;\(h_{rk_{i-1}}\)&lt;/span&gt;，那么可以从 &lt;span class=&#34;math inline&#34;&gt;\(h_{rk_{i-1}}-1\)&lt;/span&gt; 出发暴力看下一个字符是否相等得到答案。那么我们会发现从前往后 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 值每次最多 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，所以复杂度摊下来是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;记住记住一定是 &lt;span class=&#34;math inline&#34;&gt;\(rk_{i-1}\)&lt;/span&gt; 而不是下意识的 &lt;span class=&#34;math inline&#34;&gt;\(rk_i-1\)&lt;/span&gt;！！！&lt;/mark&gt;所以为了保证求解顺序循环枚举的一定是下标而非排名。但是注意定义却是和 &lt;span class=&#34;math inline&#34;&gt;\(rk_i-1\)&lt;/span&gt; 的 lcp！！！所以求 height 的写法是相对固定的，不能觉得好像是对的就随便乱改。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;height-数组的应用&#34;&gt;height 数组的应用&lt;/h2&gt;
&lt;p&gt;相当于背板子，因为应用太多且形式大多固定。&lt;/p&gt;
&lt;h3 id=&#34;求任意两个后缀的-lcp&#34;&gt;求任意两个后缀的 lcp&lt;/h3&gt;
&lt;p&gt;易得 &lt;span class=&#34;math inline&#34;&gt;\(\text{lcp}(sa_i, sa_j)=\min\{h_{i+1}, \cdots, h_j\}\)&lt;/span&gt;。&lt;strong&gt;故应将一些复杂 lcp 问题的解决方式和 RMQ 联系起来&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;子串大小关系&#34;&gt;子串大小关系&lt;/h3&gt;
&lt;p&gt;即比较 &lt;span class=&#34;math inline&#34;&gt;\(S_{l_1, r_1}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(S_{l_2, r_2}\)&lt;/span&gt; 的大小关系。比较导致 lcp 不能继续延伸的元素大小即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;本质不同子串数量&#34;&gt;本质不同子串数量&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;子串等价于「后缀的前缀」&lt;/strong&gt;。按顺序枚举每个后缀，减去和已枚举的所有后缀的 lcp 即可。鉴于 &lt;span class=&#34;math inline&#34;&gt;\(\min\{h_{j+1},\cdots,h_i\}\)&lt;/span&gt; 单调不减，直接减去 &lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;最后答案即为 &lt;span class=&#34;math inline&#34;&gt;\(\frac {n(n-1)}2 - \sum\limits_{i=2}^nh_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;至少出现-k-次子串的最大长度&#34;&gt;至少出现 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次子串的最大长度&lt;/h3&gt;
&lt;p&gt;模板：&lt;a href=&#34;https://www.luogu.com.cn/problem/P2852&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2852&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;出现 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次 &lt;span class=&#34;math inline&#34;&gt;\(\iff\)&lt;/span&gt; 在后缀数组中连续出现 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次 &lt;span class=&#34;math inline&#34;&gt;\(\iff\)&lt;/span&gt; 是任意连续 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 的最小值，需要最大化该最小值，考虑滑动窗口。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;P2852_7.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k, --k;
    std::vector&amp;lt;int&amp;gt; s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; s[i];
    std::vector&amp;lt;int&amp;gt; sa(n + 1), rk(s), h(n + 1);
    &amp;#123;
        int m = 1000001;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(1);
            for (int i = n - w + 1; i &amp;lt;= n; ++i)
                id.push_back(i);
            for (int i = 1; i &amp;lt;= n; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            auto la(rk);
            p = 0;
            for (int i = 1; i &amp;lt;= n; ++i)
                if (i != 1 &amp;amp;&amp;amp; la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n; ++i)
            if (rk[i]) &amp;#123;
                for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
                h[rk[i]] = to;
            &amp;#125;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; q(n + 1);
    int res = 0;
    for (int i = 1, l = 1, r = 0; i &amp;lt;= n; ++i) &amp;#123;
        // printf(&amp;quot;%d\n&amp;quot;, h[i]);
        for (; l &amp;lt;= r &amp;amp;&amp;amp; i - q[l] &amp;gt;= k; ++l);
        for (; l &amp;lt;= r &amp;amp;&amp;amp; h[i] &amp;lt;= h[q[r]]; --r);
        q[++r] = i;
        if (i &amp;gt;= k)
            res = std::max(res, h[q[l]]);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;最长不重叠多次出现子串&#34;&gt;最长不重叠多次出现子串&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;bb：定式太多太杂以至于让人怀疑某些定式是否存在应用场景&lt;/del&gt; &lt;img src=&#34;/em/kt.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现满足单调性，二分子串长度 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt;，那么显然 &lt;span class=&#34;math inline&#34;&gt;\(\text {lcp}\ge len\)&lt;/span&gt;；将 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 划分为连续 &lt;span class=&#34;math inline&#34;&gt;\(\ge len\)&lt;/span&gt; 的段，在每段内找到下标极差与 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 比较即可。&lt;/p&gt;
&lt;p&gt;也可以用于判定是否存在不重叠多次出现子串。&lt;/p&gt;
&lt;p&gt;甚至可以考虑限制至少出现次数为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，那大概多个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;，看看一段里有没有 &lt;span class=&#34;math inline&#34;&gt;\(\ge k\)&lt;/span&gt; 个相互相差 &lt;span class=&#34;math inline&#34;&gt;\(\ge len\)&lt;/span&gt; 的。排序贪心求解。&lt;/p&gt;
&lt;p&gt;那么上面的至少出现 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次子串也可以用这个方法来解，但是多个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 没必要。&lt;/p&gt;
&lt;p&gt;也可以限制多次出现但长度至少为 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt;，那甚至少了二分的 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;，直接跑一遍 check 即可。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;？？？到底为什么会有这么多奇怪的定式，是因为真的有题这么出吗？？？&lt;/del&gt; &lt;img src=&#34;/em/oh.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;最长公共子串问题&#34;&gt;最长公共子串问题&lt;/h3&gt;
&lt;p&gt;求 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的最长公共子串（注意不是 LCS）。设 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 长为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 长为 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;，那么将 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 拼接，答案就是 &lt;span class=&#34;math inline&#34;&gt;\(\max \{\text{lcp}(i,j)\},i\le n&amp;lt;j\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但这里不直接枚举 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，还是照例先从 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 下手再卡条件，若 &lt;span class=&#34;math inline&#34;&gt;\(sa_{i-1}\le n&amp;lt;sa_{i}\)&lt;/span&gt;（或者反过来），就可以用 &lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt; 更新答案。容易证明这样总可以找到最大值。&lt;/p&gt;
&lt;h4 id=&#34;eg1.-找相同字符&#34;&gt;eg1. 找相同字符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3181&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3181&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要求方案数，那么答案为 &lt;span class=&#34;math inline&#34;&gt;\(\text{lcp}(i,j),i\le n&amp;lt;j\)&lt;/span&gt;。（我已经帮你们试过了容斥比直接做更麻烦），考虑用单调栈维护左 / 右侧区间 lcp 求解右 / 左侧答案。关于单调栈的描述可见 &lt;a href=&#34;#结合单调栈&#34;&gt;本页后部内容&lt;/a&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, n1;
    std::string s, t;
    std::cin &amp;gt;&amp;gt; s &amp;gt;&amp;gt; t;
    n = (int)s.length(), n1 = n + (int)t.length() + 1;
    s = &amp;quot;#&amp;quot; + s + &amp;quot;$&amp;quot; + t;
    std::vector&amp;lt;int&amp;gt; sa(n1 + 1), rk(n1 + 1), h(n1 + 1);
    &amp;#123;
        std::copy(s.begin() + 1, s.end(), rk.begin() + 1);
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(w + 1);
            std::iota(id.begin() + 1, id.end(), n1 - w + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            auto la(rk);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (i != 1 &amp;amp;&amp;amp; la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n1)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n1; ++i) &amp;#123;
            for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
            h[rk[i]] = to;
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;std::pair&amp;lt;int, long long&amp;gt; &amp;gt; q1, q2;
    std::vector&amp;lt;int&amp;gt; tot1(n1 + 1), tot2(n1 + 1);
    for (int i = 1; i &amp;lt;= n1; ++i) &amp;#123;
        tot1[i] = tot1[i - 1] + (sa[i] &amp;lt;= n);
        tot2[i] = tot2[i - 1] + (sa[i] &amp;gt; n + 1);
    &amp;#125;
    long long res = 0ll;
    q1.emplace_back(1, 0ll), q2.emplace_back(1, 0ll);
    for (int i = 1; i &amp;lt;= n1; ++i) &amp;#123;
        for (; !q1.empty() &amp;amp;&amp;amp; h[i] &amp;lt; h[q1.back().first]; q1.pop_back());
        q1.emplace_back(i, (tot1[i - 1] - tot1[q1.back().first - 1]) * h[i] + q1.back().second);
        if (sa[i] &amp;gt; n + 1)
            res += q1.back().second;
        for (; !q2.empty() &amp;amp;&amp;amp; h[i] &amp;lt; h[q2.back().first]; q2.pop_back());
        q2.emplace_back(i, (tot2[i - 1] - tot2[q2.back().first - 1]) * h[i] + q2.back().second);
        if (sa[i] &amp;lt;= n)
            res += q2.back().second;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&#34;eg2.-公共串&#34;&gt;eg2. 公共串&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5546&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5546&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要求多串最长公共子串，仍然考虑将多个串拼在一起。仿照前面二分的方式处理，问题转化为找到最长的 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt;，使得存在一段最小值 &lt;span class=&#34;math inline&#34;&gt;\(\ge len\)&lt;/span&gt; 的区间，其覆盖了 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 段串。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, l = 0, r = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::string s;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; lim(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t;
        lim[i] = &amp;#123; (int)s.length() + 1, s.length() + t.length() &amp;#125;;
        s += &amp;quot;#&amp;quot; + t;
        r = std::max(r, (int)t.length());
        // printf(&amp;quot;[%d, %d]\n&amp;quot;, lim[i].first, lim[i].second);
    &amp;#125;
    int n1 = lim.back().second;
    std::vector&amp;lt;int&amp;gt; sa(n1 + 1), rk(n1 + 1), h(n1 + 1);
    &amp;#123;
        std::copy(s.begin() + 1, s.end(), rk.begin() + 1);
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(w + 1);
            std::iota(id.begin() + 1, id.end(), n1 - w + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            auto la(rk);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (i != 1 &amp;amp;&amp;amp; la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n1)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n1; ++i) &amp;#123;
            for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
            h[rk[i]] = to;
        &amp;#125;
    &amp;#125;
    // for (int i = 1; i &amp;lt;= n1; ++i)
    //     printf(&amp;quot;h[%d] = %d\n&amp;quot;, sa[i], h[i]);
    int res = 0;
    auto check = [&amp;amp;](int len) &amp;#123;
        // printf(&amp;quot;check %d: \n&amp;quot;, len);
        std::vector&amp;lt;int&amp;gt; cnt(n + 1);
        for (int i = 1; i &amp;lt;= n1; ++i) &amp;#123;
            if (h[i] &amp;lt; len) &amp;#123;
                if (*std::min_element(cnt.begin() + 1, cnt.end()))
                    return 1;
                cnt.assign(n + 1, 0);
            &amp;#125;
            else
                for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                    if (lim[j].first &amp;lt;= sa[i - 1] &amp;amp;&amp;amp; sa[i - 1] &amp;lt;= lim[j].second)
                        cnt[j] = 1;
                    if (lim[j].first &amp;lt;= sa[i] &amp;amp;&amp;amp; sa[i] &amp;lt;= lim[j].second)
                        cnt[j] = 1;
                &amp;#125;
        &amp;#125;
        // printf(&amp;quot;\n%d\n&amp;quot;, *std::min_element(cnt.begin() + 1, cnt.end()));
        return *std::min_element(cnt.begin() + 1, cnt.end());
    &amp;#125;;
    for (int mid; l &amp;lt;= r; ) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        if (check(mid))
            l = mid + 1, res = mid;
        else
            r = mid - 1;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;但是看了题解发现居然还有线性做法（当然不看建 SA 的 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;），对于覆盖全部 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 段串找区间最小值，发现需要最小化区间，考虑双指针。&lt;/p&gt;
&lt;p&gt;区间最小值用单调队列求解，细想可能会觉得不太对劲，但是容易证明答案不大于队首且不小于最大队首，所以最大队首就是答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, l = 0, r = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::string s;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; lim(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t;
        lim[i] = &amp;#123; (int)s.length() + 1, s.length() + t.length() &amp;#125;;
        s += (char)(&amp;#39;A&amp;#39; + i - 1) + t;
        r = std::max(r, (int)t.length());
    &amp;#125;
    int n1 = lim.back().second;
    std::vector&amp;lt;int&amp;gt; sa(n1 + 1), rk(n1 + 1), h(n1 + 1);
    &amp;#123;
        std::copy(s.begin() + 1, s.end(), rk.begin() + 1);
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(w + 1);
            std::iota(id.begin() + 1, id.end(), n1 - w + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n1; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n1; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            auto la(rk);
            for (int i = 1; i &amp;lt;= n1; ++i)
                if (i != 1 &amp;amp;&amp;amp; la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n1)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n1; ++i) &amp;#123;
            for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
            h[rk[i]] = to;
        &amp;#125;
    &amp;#125;
    int res = 0;
    std::vector&amp;lt;int&amp;gt; q(n1 + 1), cnt(n + 1);
    // for (int i = 1; i &amp;lt;= n1; ++i)
    //     printf(&amp;quot;%d: %d\n&amp;quot;, sa[i], h[i]);
    for (int l = 1, r = 0, ql = 1, qr = 0; l &amp;lt;= n1; ++l) &amp;#123;
        for (; r &amp;lt; n1 &amp;amp;&amp;amp; !*std::min_element(cnt.begin() + 1, cnt.end()); ) &amp;#123;
            ++r;
            for (int i = 1; i &amp;lt;= n; ++i)
                if (lim[i].first &amp;lt;= sa[r] &amp;amp;&amp;amp; sa[r] &amp;lt;= lim[i].second) &amp;#123;
                    ++cnt[i];
                    break;
                &amp;#125;
            for (; ql &amp;lt;= qr &amp;amp;&amp;amp; h[r] &amp;lt;= h[q[qr]]; --qr);
            q[++qr] = r;
        &amp;#125;
        if (*std::min_element(cnt.begin() + 1, cnt.end())) &amp;#123;
            // printf(&amp;quot;[%d, %d]: %d\n&amp;quot;, l, r, h[q[ql]]);
            res = std::max(res, h[q[ql]]);
        &amp;#125;
        for (; ql &amp;lt;= qr &amp;amp;&amp;amp; q[ql] &amp;lt;= l; ++ql);
        if (l != 1) &amp;#123;
            for (int i = 1; i &amp;lt;= n; ++i)
                if (lim[i].first &amp;lt;= sa[l - 1] &amp;amp;&amp;amp; sa[l - 1] &amp;lt;= lim[i].second) &amp;#123;
                    --cnt[i];
                    break;
                &amp;#125;
        &amp;#125;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;texttt-aa-式子串处理&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(\texttt {AA}\)&lt;/span&gt; 式子串处理&lt;/h3&gt;
&lt;p&gt;即对于连续相同子串问题的处理，有一个定的思路，由例题分析。&lt;/p&gt;
&lt;h4 id=&#34;eg1.-优秀的拆分&#34;&gt;eg1. 优秀的拆分&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1117&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1117&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还是从中间分开，按前后分别处理。这里有个 trick，我们枚举 &lt;span class=&#34;math inline&#34;&gt;\(\texttt B\)&lt;/span&gt; 的长度 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中每隔 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 打一个标记。那么显然，任意一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(2\times len\)&lt;/span&gt; 的子串都会经过恰好两个标记（充分的），这样就可以筛选出所有可能的串。&lt;/p&gt;
&lt;p&gt;我们枚举所有连续两个标记（总复杂度为调和级数），求它们对应后缀的 lcp 和对应前缀的 lcs（翻转求 SA 即可），如果二者加起来 &lt;span class=&#34;math inline&#34;&gt;\(\ge len\)&lt;/span&gt; 就说明存在这样的 &lt;span class=&#34;math inline&#34;&gt;\(\texttt {AA}\)&lt;/span&gt;。在 &lt;span class=&#34;math inline&#34;&gt;\(\text {lcs}+\text {lcp}\)&lt;/span&gt; 中任取 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 长度即为一对 &lt;span class=&#34;math inline&#34;&gt;\(\texttt {AA}\)&lt;/span&gt;。用差分给可能的起点和终点区间加即可。&lt;/p&gt;
&lt;p&gt;小细节：lcp 和 lcs 均需要对 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 取 &lt;span class=&#34;math inline&#34;&gt;\(\min\)&lt;/span&gt;，否则取到的串可能不会经过当前选中的两个标记。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
class SA &amp;#123;
public:
    std::vector&amp;lt;int&amp;gt; sa, rk, h;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;  &amp;gt; st;
    SA(int n, std::string s): sa(n + 1), rk(n + 2), h(n + 1), st(20, std::vector&amp;lt;int&amp;gt; (n + 1)) &amp;#123;
        std::vector&amp;lt;int&amp;gt; la(n + 2);
        std::copy(s.begin(), s.end(), rk.begin());
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(1);
            for (int i = n - w + 1; i &amp;lt;= n; ++i)
                id.push_back(i);
            for (int i = 1; i &amp;lt;= n; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            std::copy(rk.begin(), rk.end(), la.begin());
            for (int i = 1; i &amp;lt;= n; ++i)
                if (la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n; ++i)
            if (rk[i]) &amp;#123;
                for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
                h[rk[i]] = to;
            &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i)
            st[0][i] = h[i];
        for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
            for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
                st[j][i] = std::min(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
        rk.emplace_back();
        return;
    &amp;#125;
private:
    int ask(int l, int r) &amp;#123;
        // fprintf(stderr, &amp;quot;l = %d, r = %d\n&amp;quot;, l, r);
        int k = std::__lg(r - l + 1);
        return std::min(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
    &amp;#125;
public:
    int lcp(int l, int r) &amp;#123;
        return ask(std::min(rk[l], rk[r]) + 1, std::max(rk[l], rk[r]));
    &amp;#125;
&amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        std::string s;
        std::cin &amp;gt;&amp;gt; s;
        int n = (int)s.length();
        s = &amp;quot;#&amp;quot; + s;
        SA p(n, s);
        std::reverse(s.begin() + 1, s.end());
        SA q(n, s);
        std::vector&amp;lt;int&amp;gt; f(n + 2), g(n + 2);
        for (int len = 1; len &amp;lt;= n / 2; ++len)
            for (int i = len; i + len &amp;lt;= n; i += len) &amp;#123;
                int l = i, r = i + len, lcp = std::min(len, p.lcp(l, r)), lcs = std::min(len - 1, q.lcp(n - l + 2, n - r + 2));
                if (lcp + lcs &amp;gt;= len) &amp;#123;
                    int t = lcp + lcs - len + 1;
                    // fprintf(stderr, &amp;quot;(%d, %d), %d, %d\n&amp;quot;, l, r, lcp, lcs);
                    ++g[l - lcs], --g[l - lcs + t], ++f[r + lcp - t], --f[r + lcp];
                &amp;#125;
            &amp;#125;
        std::partial_sum(f.begin(), f.end(), f.begin());
        std::partial_sum(g.begin(), g.end(), g.begin());
        long long res = 0ll;
        for (int i = 1; i &amp;lt; n; ++i)
            res += (long long)f[i] * g[i + 1];
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;eg2.-tandem&#34;&gt;eg2. tandem&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codechef.com/problems/TANDEM&#34; class=&#34;uri&#34;&gt;https://www.codechef.com/problems/TANDEM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意到多了一个限制，前一个好处理，找到经过 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 个标记的串即可。对于后一个限制，画图可以发现对于 interesting ones，每次只会出现最多一个；当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(\text {lcp}&amp;gt;len\)&lt;/span&gt; 时不存在。&lt;/p&gt;
&lt;p&gt;对于 uninteresting ones，用每次能提供的总数减去 interesting ones 的数量即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
class SA &amp;#123;
public:
    std::vector&amp;lt;int&amp;gt; sa, rk, h;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;  &amp;gt; st;
    SA(int n, std::string s): sa(n + 1), rk(n + 2), h(n + 1), st(20, std::vector&amp;lt;int&amp;gt; (n + 1)) &amp;#123;
        std::vector&amp;lt;int&amp;gt; la(n + 2);
        std::copy(s.begin(), s.end(), rk.begin());
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(1);
            for (int i = n - w + 1; i &amp;lt;= n; ++i)
                id.push_back(i);
            for (int i = 1; i &amp;lt;= n; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            std::copy(rk.begin(), rk.end(), la.begin());
            for (int i = 1; i &amp;lt;= n; ++i)
                if (la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n; ++i)
            if (rk[i]) &amp;#123;
                for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
                h[rk[i]] = to;
            &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i)
            st[0][i] = h[i];
        for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
            for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
                st[j][i] = std::min(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
        rk.emplace_back();
        return;
    &amp;#125;
private:
    int ask(int l, int r) &amp;#123;
        // fprintf(stderr, &amp;quot;l = %d, r = %d\n&amp;quot;, l, r);
        int k = std::__lg(r - l + 1);
        return std::min(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
    &amp;#125;
public:
    int lcp(int l, int r) &amp;#123;
        return ask(std::min(rk[l], rk[r]) + 1, std::max(rk[l], rk[r]));
    &amp;#125;
&amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    int n = (int)s.length();
    s = &amp;quot;#&amp;quot; + s;
    SA p(n, s);
    std::reverse(s.begin() + 1, s.end());
    SA q(n, s);
    std::reverse(s.begin() + 1, s.end());
    long long res1 = 0ll, res2 = 0ll;
    for (int len = 1; len &amp;lt;= n; ++len)
        for (int i = len, j = 2 * len, k = 3 * len; k &amp;lt;= n; i += len, j += len, k += len) &amp;#123;
            int lcp = std::min(p.lcp(i, j), p.lcp(j, k)), lcs = std::min(&amp;#123; len - 1, q.lcp(n - i + 2, n - j + 2), q.lcp(n - j + 2, n - k + 2) &amp;#125;);
            if (std::min(len, lcp) + lcs &amp;gt;= len) &amp;#123;
                // printf(&amp;quot;(%d, %d, %d), %d, %d, %d\n&amp;quot;, i, j, k, lcs, lcp, len);
                int t = (lcp &amp;lt;= len);
                res1 += t, res2 += std::min(len, lcp) + lcs - len + 1 - t;
            &amp;#125;
            // else
            //     printf(&amp;quot;# (%d, %d, %d), %d, %d, %d\n&amp;quot;, i, j, k, lcs, lcp, len);
        &amp;#125;
    std::cout &amp;lt;&amp;lt; res1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; res2 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;eg3.-repeats&#34;&gt;eg3. repeats&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.spoj.com/problems/REPEATS/&#34; class=&#34;uri&#34;&gt;https://www.spoj.com/problems/REPEATS/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;重复次数最多，只需经过标记点最多。显然经过标记点的数量就是该字符串长除以 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 向下取整就可以得到重复次数减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的值。&lt;/p&gt;
&lt;p&gt;选择两个连续标记点，对于 lcp 和 lcs（显然此时不需要对 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 取 &lt;span class=&#34;math inline&#34;&gt;\(\min\)&lt;/span&gt;），计算 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {\text{lcp}+\text{lcs}}{len}+1\)&lt;/span&gt; 取最大即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
class SA &amp;#123;
public:
    std::vector&amp;lt;int&amp;gt; sa, rk, h;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;  &amp;gt; st;
    SA(int n, std::string s): sa(n + 1), rk(n + 2), h(n + 1), st(20, std::vector&amp;lt;int&amp;gt; (n + 1)) &amp;#123;
        std::vector&amp;lt;int&amp;gt; la(n + 2);
        std::copy(s.begin(), s.end(), rk.begin());
        int m = 128;
        &amp;#123;
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[i]]--] = i;
        &amp;#125;
        for (int w = 1, p; ; w &amp;lt;&amp;lt;= 1, m = p) &amp;#123;
            std::vector&amp;lt;int&amp;gt; id(1);
            for (int i = n - w + 1; i &amp;lt;= n; ++i)
                id.push_back(i);
            for (int i = 1; i &amp;lt;= n; ++i)
                if (sa[i] &amp;gt; w)
                    id.push_back(sa[i] - w);
            std::vector&amp;lt;int&amp;gt; c(m + 1);
            for (int i = 1; i &amp;lt;= n; ++i)
                ++c[rk[i]];
            std::partial_sum(c.begin(), c.end(), c.begin());
            for (int i = n; i; --i)
                sa[c[rk[id[i]]]--] = id[i];
            p = 0;
            std::copy(rk.begin(), rk.end(), la.begin());
            for (int i = 1; i &amp;lt;= n; ++i)
                if (la[sa[i]] == la[sa[i - 1]] &amp;amp;&amp;amp; la[sa[i] + w] == la[sa[i - 1] + w])
                    rk[sa[i]] = p;
                else
                    rk[sa[i]] = ++p;
            if (p == n)
                break;
        &amp;#125;
        for (int i = 1, to = 0; i &amp;lt;= n; ++i)
            if (rk[i]) &amp;#123;
                for (to = std::max(to - 1, 0); s[i + to] == s[sa[rk[i] - 1] + to]; ++to);
                h[rk[i]] = to;
            &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i)
            st[0][i] = h[i];
        for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
            for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
                st[j][i] = std::min(st[j - 1][i], st[j - 1][i + (1 &amp;lt;&amp;lt; (j - 1))]);
        rk.emplace_back();
        return;
    &amp;#125;
private:
    int ask(int l, int r) &amp;#123;
        // fprintf(stderr, &amp;quot;l = %d, r = %d\n&amp;quot;, l, r);
        int k = std::__lg(r - l + 1);
        return std::min(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k) + 1]);
    &amp;#125;
public:
    int lcp(int l, int r) &amp;#123;
        return ask(std::min(rk[l], rk[r]) + 1, std::max(rk[l], rk[r]));
    &amp;#125;
&amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        std::string s = &amp;quot;#&amp;quot;;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            char t;
            std::cin &amp;gt;&amp;gt; t;
            s.push_back(t);
        &amp;#125;
        SA p(n, s);
        std::reverse(s.begin() + 1, s.end());
        SA q(n, s);
        int res = 0;
        for (int len = 1; len &amp;lt;= n; ++len)
            for (int i = len, j = 2 * len; j &amp;lt;= n; i += len, j += len) &amp;#123;
                int lcp = p.lcp(i, j), lcs = q.lcp(n - i + 2, n - j + 2);
                if (lcp + lcs &amp;gt;= len)
                    res = std::max(res, (lcp + lcs) / len + 1);
            &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;结合并查集&#34;&gt;结合并查集&lt;/h3&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;结合单调栈&#34;&gt;结合单调栈&lt;/h3&gt;
</content>
        <category term="字符串" />
        <category term="SA" />
        <updated>2025-02-02T00:27:44.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250124/</id>
        <title>网络流</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250124/"/>
        <content type="html">&lt;p&gt;想当年叱诧风云左牵字符串右擎网络流，而今飘零憔悴沦落到需要学而时习之的地步 &lt;img src=&#34;/em/kx.gif&#34; /&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;对于有一个源点 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 和汇点 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的有向图，每条边都有一个权值 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 作为容量，称这个有向图 &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt; 是一个网络。&lt;/p&gt;
&lt;p&gt;假设现在有 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 升水从 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 流入，而我们可以自由分配每个点的水可以朝哪个方向流出，那么显然地：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流出 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的水为 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 升。&lt;/li&gt;
&lt;li&gt;对于除 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 以外的所有点，流入的水量等于流出的水量。&lt;/li&gt;
&lt;li&gt;对于任意一条边，流经的水量不超过容量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于这个网络，任选出一部分点与 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 分为一组，剩下与 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 分为一组，该操作称为「割」。一个割的「容量」定义为 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 组与 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 组间连边的容量和。&lt;/p&gt;
&lt;p&gt;那么接下来就会由这个模型衍生出许多问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最大流问题：找到一种分配方式最大化 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;最小割问题：找到一种割的方案最小化割的容量。&lt;/li&gt;
&lt;li&gt;最小费用最大流问题：给每条边除容量 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 外外加一个费用权值 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;，需要在保证最大化 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的前提下最小化 &lt;span class=&#34;math inline&#34;&gt;\(\sum f(u, v)\times w(u, v)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来会分别介绍解决这几种不同问题的方法。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;最大流问题&#34;&gt;最大流问题&lt;/h2&gt;
&lt;p&gt;一个主要的思想是 &lt;strong&gt;贪心寻找增广路更新当前答案&lt;/strong&gt;。&lt;/p&gt;
</content>
        <category term="网络流" />
        <updated>2025-01-24T00:35:47.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250121/</id>
        <title>技巧：字符串拆分</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250121/"/>
        <content type="html">&lt;p&gt;神刘家在走前体育课上问我听没听过 &lt;em&gt;Die For You - The Weekend&lt;/em&gt;。我让他哼一段，刘家便展示了自己的天籁之音，我理所当然地连旋律都没辨认出来。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;有的时候，对于一个完整的匹配串，我们需要「枚举断点」，分为前半段和后半段分别和模式串匹配解决问题。当然这样的技巧不止局限于字符串，我们在之前的学习中在诸如动态规划等题目中遇到了相似的情景。&lt;/p&gt;
&lt;p&gt;在字符串题目中，一个典型的标志是「模式串的拼接」，将两截模式串拼接到一起，形成的新模式串并不利好我们的处理，我们需要尽量利用已知的模式串。当然我们不会将新模式串重新拆成两半，而是考虑转换，枚举匹配串的断点，将前半段的后缀和后半段的前缀分别匹配。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;一个模板cf1202e-you-are-given-some-strings&#34;&gt;一个模板：CF1202E You Are Given Some Strings…&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1202/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1202/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然对于每种不同拼接需要求解分别的出现次数，但是注意到最后只需要输出 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的总和，所以就可以不再顾及不同拼接方式间的区别。&lt;/p&gt;
&lt;p&gt;枚举匹配串的断点。一个自然的想法是将前后缀与 AC 自动机匹配，但如果逐个放进去显然复杂度起飞。这里就又有一个实现小技巧，我们在原串的 AC 自动机上把原串过一遍，每个位置所在的状态就是这个位置对应后缀可能处在的后缀。&lt;/p&gt;
&lt;p&gt;记录每个状态可能处在的模式串末尾个数，这一点直接在 fail 树上从上到下转移即可。反串同理。&lt;/p&gt;
&lt;p&gt;二者相乘即为答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
struct &amp;#123;
    int T[maxn][26], tot, cnt[maxn], fail[maxn], deg[maxn];
    void ins(std::string &amp;amp;t) &amp;#123;
        int p = 0;
        for (auto i : t) &amp;#123;
            if (!T[p][i - &amp;#39;a&amp;#39;])
                T[p][i - &amp;#39;a&amp;#39;] = ++tot;
            p = T[p][i - &amp;#39;a&amp;#39;];
        &amp;#125;
        ++cnt[p];
        return;
    &amp;#125;
    void bld(void) &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i], cnt[v] += cnt[fail[v]];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
        return;
    &amp;#125;
&amp;#125; p, q;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    int n;
    std::cin &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t;
        p.ins(t);
        std::reverse(t.begin(), t.end());
        q.ins(t);
    &amp;#125;
    p.bld(), q.bld();
    int len = s.length();
    std::vector&amp;lt;std::array&amp;lt;int, 2&amp;gt; &amp;gt; f(len + 1);
    &amp;#123;
        int u = 0;
        for (int i = 1; i &amp;lt;= len; ++i) &amp;#123;
            u = p.T[u][s[i - 1] - &amp;#39;a&amp;#39;];
            f[i][0] = p.cnt[u];
        &amp;#125;
    &amp;#125;
    &amp;#123;
        int u = 0;
        for (int i = len; i; --i) &amp;#123;
            u = q.T[u][s[i - 1] - &amp;#39;a&amp;#39;];
            f[i][1] = q.cnt[u];
        &amp;#125;
    &amp;#125;
    long long res = 0ll;
    for (int i = 1; i &amp;lt; len; ++i)
        res += (long long)f[i][0] * f[i + 1][1];
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;变式优秀的拆分&#34;&gt;变式：优秀的拆分&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1117&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P1117&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="字符串" />
        <updated>2025-01-21T03:47:06.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20250120/</id>
        <title>学习笔记：AC 自动机</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20250120/"/>
        <content type="html">&lt;p&gt;耳机声音疑似有点小了，用心旷神怡的话来说大致会是「比果蝇↑嗡嗡声还小」。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;？卧槽耳机上居然可以调音量 &lt;img src=&#34;/em/oh.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;前置知识&#34;&gt;前置知识&lt;/h2&gt;
&lt;p&gt;首先可能需要知道专有名词「自动机」的含义。&lt;/p&gt;
&lt;p&gt;大致可以简单理解为，一个 DAG，其中点表示状态，边表示转移。给进去一个字符串之类，就可以在 DAG 上游走，根据最后所处结点，可以得到字符串相关特征。&lt;/p&gt;
&lt;p&gt;这个定义让我们想到了 Trie。事实上，Trie 就是一种相当基础的自动机。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;接下来，让我们复习 KMP 相关概念。&lt;/p&gt;
&lt;p&gt;假想一个场景：你需要求得 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中的出现次数。&lt;/p&gt;
&lt;p&gt;拥有一定题目经验的你，会使用 KMP 求出 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的 &lt;code&gt;next&lt;/code&gt; 数组，令 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 上进行匹配，失配或完全匹配时回到 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 在该处的 &lt;code&gt;next&lt;/code&gt;，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 上的指针始终向右，&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 上的指针如果向右，每次只能移动一位；如果向左，最左移到开头，均摊下来复杂度即为 &lt;span class=&#34;math inline&#34;&gt;\(O(|S| + |T|)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;假如场景变得更复杂：给定 &lt;span class=&#34;math inline&#34;&gt;\(\{T_m\}\)&lt;/span&gt;，你需要求出每个 &lt;span class=&#34;math inline&#34;&gt;\(T_j\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中的出现次数。&lt;/p&gt;
&lt;p&gt;那么如果我们对每个 &lt;span class=&#34;math inline&#34;&gt;\(T_j\)&lt;/span&gt; 进行一次 KMP，复杂度将会上升到 &lt;span class=&#34;math inline&#34;&gt;\(O(m|S|)\)&lt;/span&gt;，难以承受。有没有优化的方法呢？&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ac-自动机的建立&#34;&gt;AC 自动机的建立&lt;/h2&gt;
&lt;p&gt;结合上面的知识，我们下意识想到，能不能将 &lt;span class=&#34;math inline&#34;&gt;\(\{T_m\}\)&lt;/span&gt; 建成一个树状结构，令 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 在其上进行 KMP 呢？&lt;/p&gt;
&lt;p&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(\{T_m\}\)&lt;/span&gt; 全部加入 Trie，由于 &lt;code&gt;next&lt;/code&gt; 只会由更深的点指向更浅的点，似乎从直觉上是有规则的。但随之而来的是一个问题：点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;next&lt;/code&gt; 不一定在 &lt;span class=&#34;math inline&#34;&gt;\(\text{root}\to u\)&lt;/span&gt; 的链上（由于 Trie 的性质，可知指向的点是唯一的）。鉴于这一点不同，我们结合其「失配指针」的定义，将 &lt;code&gt;next&lt;/code&gt; 在 Trie 上的同分异构体唤为 &lt;code&gt;fail&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;考察 Trie 上该 &lt;code&gt;fail&lt;/code&gt; 边的性质。现欲求解 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 指向的 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;，结合 KMP 中 &lt;code&gt;next&lt;/code&gt; 的性质，假设 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的父节点的 &lt;code&gt;fail&lt;/code&gt; 边指向 &lt;span class=&#34;math inline&#34;&gt;\(v&amp;#39;\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的值为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(v&amp;#39;\)&lt;/span&gt; 上有边权相同的边，那么 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 就是该边指向的点。&lt;/li&gt;
&lt;li&gt;否则，前往 &lt;span class=&#34;math inline&#34;&gt;\(v&amp;#39;\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt;，重复以上判定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么就完成了失配的处理。相应地，完全匹配时的跳转应如何处理？直接将 &lt;code&gt;fail&lt;/code&gt; 的儿子全部接到 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 下面即可。如果 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 和 &lt;code&gt;fail&lt;/code&gt; 具有同一个边权的边时，保留 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的这条边 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt;，因为 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 必定指向 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 的对应儿子。&lt;/p&gt;
&lt;p&gt;两点结合，我们发现从实现上，可以直接令 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 指向 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的 &lt;code&gt;fail&lt;/code&gt; 的对应儿子（那么时间复杂度显而易见是 &lt;span class=&#34;math inline&#34;&gt;\(O(26\sum |T|)\)&lt;/span&gt; 的）。&lt;/p&gt;
&lt;p&gt;匹配时，对于每个点和其返回到根的 &lt;code&gt;fail&lt;/code&gt; 链，全部标记。则一个模式串匹配的次数即为被打标记的次数。&lt;/p&gt;
&lt;p&gt;那么可以发现 AC 自动机的本质就是添加了 &lt;code&gt;fail&lt;/code&gt; 边的 Trie。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;那么根据上述要求，我们需要按照深度顺序求得 &lt;code&gt;fail&lt;/code&gt;，考虑 BFS。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;哦哦好神奇复活之后记得啥是 KMP 但忘了啥是 C++ 了。甚至花了一点时间学习怎么创建一个函数？？？&lt;/p&gt;
&lt;p&gt;大家写 AC 自动机 Trie 根节点下标一定要设成 0 啊 &lt;img src=&#34;/em/ll.gif&#34; /&gt; 设成 1 被各种细节坑惨了 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
int T[maxn][26], tot, cnt[maxn], fail[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i], tail[i] = ins(t[i]);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    &amp;#123;
        int p = 0;
        for (auto i : s) &amp;#123;
            p = T[p][i - &amp;#39;a&amp;#39;];
            for (int fa = p; fa; fa = fail[fa])
                ++cnt[fa];
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; cnt[tail[i]] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;肉眼可见该查询方式是极其低效的，故考虑优化跳 &lt;code&gt;fail&lt;/code&gt; 打标记的过程。&lt;/p&gt;
&lt;p&gt;既然自动机结构不变，不如将跳 &lt;code&gt;fail&lt;/code&gt; 的步骤放在最后统一进行。容易在发现 &lt;code&gt;fail&lt;/code&gt; 树上进行拓扑排序转移即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
int T[maxn][26], tot, cnt[maxn], fail[maxn], deg[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i], tail[i] = ins(t[i]);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i], ++deg[T[fail[u]][i]];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    std::string s;
    std::cin &amp;gt;&amp;gt; s;
    &amp;#123;
        int p = 0;
        for (auto i : s)
            p = T[p][i - &amp;#39;a&amp;#39;], ++cnt[p];
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 1; i &amp;lt;= tot; ++i)
            if (!deg[i])
                q.push(i);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            cnt[fail[u]] += cnt[u];
            if (!--deg[fail[u]])
                q.push(fail[u]);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cout &amp;lt;&amp;lt; cnt[tail[i]] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ac-自动机的应用与识别&#34;&gt;AC 自动机的应用与识别&lt;/h2&gt;
&lt;p&gt;我们知道其最典型的特征是 &lt;strong&gt;多模式串&lt;/strong&gt;、&lt;strong&gt;静态 / 离线&lt;/strong&gt;。当碰到类似特点时，大概率就是 AC 自动机。&lt;/p&gt;
&lt;p&gt;其中，可以设置的难点有：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;字符串难点，和其他字符串题可设置的难点相同。&lt;/li&gt;
&lt;li&gt;fail 树维护，可能结合数据结构、拓扑排序、树形 DP 等考察。&lt;/li&gt;
&lt;li&gt;DP 的设计。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;字符串难点设计&#34;&gt;字符串难点设计&lt;/h2&gt;
&lt;h3 id=&#34;eg.-indie-album&#34;&gt;eg. Indie Album&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1207/G&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1207/G&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目的「可持久化」试图误导我们用操作串建立自动机，但这样就会有一个比较严重的问题，我们没办法求 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的出现次数。&lt;/p&gt;
&lt;p&gt;为了保证答案可求我们仍然在 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 上建立 ACAM。容易发现操作串以 Trie 形式给出，我们可以在遍历 Trie 时同时完成游走，通过回溯完成询问。&lt;/p&gt;
&lt;p&gt;假设当前 DFS 中，遍历到 Trie 树中的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 点和自动机中的 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 状态，那么对于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 点所对应的一个询问串 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，相当于询问经过的所有状态有多少个在 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 引导的 fail 树子树中。我们求出 fail 树的 dfn，用树状数组简单统计即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 4e5 + 5;
std::vector&amp;lt;int&amp;gt; g[maxn], q[maxn];
int fail[maxn], T[maxn][26], tot, bit[maxn], to[maxn][26], cnt[maxn];
int ins(std::string s) &amp;#123;
    int p = 0;
    for (auto i : s) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int lowbit(int x) &amp;#123;
    return x &amp;amp; -x;
&amp;#125;
void add(int x, int v) &amp;#123;
    for (; x &amp;lt;= tot + 1; x += lowbit(x))
        bit[x] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0;
    for (; x; x -= lowbit(x))
        res += bit[x];
    return res;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, now = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; id(n + 1);
    for (int i = 1, op; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            std::cin &amp;gt;&amp;gt; t;
            if (!to[0][t - &amp;#39;a&amp;#39;])
                to[0][t - &amp;#39;a&amp;#39;] = ++now;
            ++cnt[to[0][t - &amp;#39;a&amp;#39;]], id[i] = to[0][t - &amp;#39;a&amp;#39;];
        &amp;#125;
        else &amp;#123;
            int j; 
            std::cin &amp;gt;&amp;gt; j &amp;gt;&amp;gt; t;
            if (!to[id[j]][t - &amp;#39;a&amp;#39;])
                to[id[j]][t - &amp;#39;a&amp;#39;] = ++now;
            ++cnt[to[id[j]][t - &amp;#39;a&amp;#39;]], id[i] = to[id[j]][t - &amp;#39;a&amp;#39;];
        &amp;#125;
    &amp;#125;
    int m;
    std::cin &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; tail(m + 1), res(m + 1);
    for (int i = 1, x; i &amp;lt;= m; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; t, tail[i] = ins(t);
        q[id[x]].push_back(i);
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]), g[0].push_back(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v), g[fail[v]].push_back(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; dfn(tot + 1), rfn(tot + 1);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        dfn[x] = ++now;
        // printf(&amp;quot;%d &amp;quot;, x);
        for (auto i : g[x])
            DFS(i);
        rfn[x] = now;
        return;
    &amp;#125;;
    DFS(0);
    std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int u) &amp;#123;
        add(dfn[u], 1);
        for (auto i : q[x])
            res[i] += ask(rfn[tail[i]]) - ask(dfn[tail[i]] - 1);
        for (int i = 0; i &amp;lt; 26; ++i)
            if (to[x][i])
                DFS1(to[x][i], T[u][i]);
        add(dfn[u], -1);
        return;
    &amp;#125;;
    DFS1(0, 0);
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;fail-树的维护&#34;&gt;fail 树的维护&lt;/h2&gt;
&lt;h3 id=&#34;eg.-divljak&#34;&gt;eg. Divljak&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5840&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5840&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;法一把动态问题离线&#34;&gt;法一：把动态问题离线&lt;/h4&gt;
&lt;p&gt;问题相当于将模式串 &lt;span class=&#34;math inline&#34;&gt;\(T:\{P\}\)&lt;/span&gt; 动态化，但我们仍可以无脑离线下来解决问题。&lt;/p&gt;
&lt;p&gt;考虑原本的答案计算过程，即在经过的所有状态及其 fail 链上打标记。现在我们需要离线并区分标记的来源（并且标记类型为布尔值），下意识想到使用线段树维护。&lt;/p&gt;
&lt;p&gt;我们对每个状态建立动态开点线段树，最后拓扑排序时使用线段树合并处理信息。容易证明时间复杂度相较原来多了一个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;理论可行，开始实践&lt;/del&gt; 出题人似乎不是很喜欢线段树选手所以决定剥夺你的 Memory Limit。想要用这种做法通过本题可见 &lt;a href=&#34;https://www.luogu.com.cn/article/jaxk3sno&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/article/jaxk3sno&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;法二转而处理静态问题&#34;&gt;法二：转而处理静态问题&lt;/h4&gt;
&lt;p&gt;注意到题目中的静态的 &lt;span class=&#34;math inline&#34;&gt;\(S_x\)&lt;/span&gt; 比起 &lt;span class=&#34;math inline&#34;&gt;\(T:\{P\}\)&lt;/span&gt; 更适合用来做模式串，我们在 &lt;span class=&#34;math inline&#34;&gt;\(S_x\)&lt;/span&gt; 上构建 AC 自动机，考虑在线解决问题。&lt;/p&gt;
&lt;p&gt;在每次 &lt;code&gt;1&lt;/code&gt; 操作时，更新模式串信息。对于途径的所有状态 &lt;span class=&#34;math inline&#34;&gt;\(\{u\}\)&lt;/span&gt;，考虑更新其所在 fail 链上的信息。&lt;/p&gt;
&lt;p&gt;注意到我们需要修改整条 fail 链上的信息，询问则是询问单点。这个时候可以考虑使用树上差分。&lt;/p&gt;
&lt;p&gt;但是 here comes a problem，我们对于这一整个串只能在整个树上每个点上更新一次。怎么消去相同的影响呢？&lt;/p&gt;
&lt;p&gt;这里实现上我们将经过的点按 fail 树上 dfn 排序，并且对于序列中相邻的两点在其 LCA 上减去一次标记。为什么这是正确的呢？参考虚树，我们只需要让序列中相邻的两个点尽量近就可以保证重复的被删除完毕。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e6 + 5;
int tot, bit[maxn], T[maxn][26], fail[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
int lowbit(int x) &amp;#123;
    return x &amp;amp; -x;
&amp;#125;
void add(int x, int v) &amp;#123;
    // printf(&amp;quot;add (%d, %d)\n&amp;quot;, x, v);
    for (; x &amp;lt;= tot + 1; x += lowbit(x))
        bit[x] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0, to = x;
    for (; x; x -= lowbit(x))
        res += bit[x];
    // printf(&amp;quot;ask(%d) = %d\n&amp;quot;, to, res);
    return res;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, q;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t, tail[i] = ins(t);
    &amp;#125;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(tot + 2);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
        for (int i = 1; i &amp;lt;= tot; ++i)
            g[fail[i] + 1].push_back(i + 1);
    &amp;#125;
    std::vector&amp;lt;std::array&amp;lt;int, 22&amp;gt; &amp;gt; f(tot + 2);
    std::vector&amp;lt;int&amp;gt; dep(tot + 2), dfn(tot + 2), siz(tot + 2);
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        static int now = 0;
        siz[x] = 1, dfn[x] = ++now;
        // printf(&amp;quot;%d\n&amp;quot;, x);
        for (auto i : g[x]) &amp;#123;
            dep[i] = dep[x] + 1;
            f[i][0] = x;
            for (int j = 1; j &amp;lt;= 21; ++j)
                f[i][j] = f[f[i][j - 1]][j - 1];
            DFS(i), siz[x] += siz[i];
        &amp;#125;
        return;
    &amp;#125;;
    dep[1] = 1, DFS(1);
    auto askLCA = [&amp;amp;](int x, int y) &amp;#123;
        if (x == y)
            return x;
        if (dep[x] &amp;lt; dep[y])
            std::swap(x, y);
        for (int i = 21; ~i; --i)
            if (dep[f[x][i]] &amp;gt;= dep[y])
                x = f[x][i];
        if (x == y)
            return x;
        for (int i = 21; ~i; --i)
            if (f[x][i] != f[y][i])
                x = f[x][i], y = f[y][i];
        return f[x][0];
    &amp;#125;;
    std::cin &amp;gt;&amp;gt; q;
    for (; q--; ) &amp;#123;
        int op;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            std::string s;
            std::cin &amp;gt;&amp;gt; s;
            int p = 0, len = (int)s.length();
            std::vector&amp;lt;int&amp;gt; id(len + 1);
            for (int i = 1; i &amp;lt;= len; ++i)
                p = T[p][s[i - 1] - &amp;#39;a&amp;#39;], id[i] = p + 1;
            std::sort(id.begin() + 1, id.end(), [&amp;amp;](int x, int y) &amp;#123; return dfn[x] &amp;lt; dfn[y]; &amp;#125;);
            // for (int i = 1; i &amp;lt;= len; ++i)
            //     printf(&amp;quot;%d &amp;quot;, id[i]);
            // puts(&amp;quot;&amp;quot;);
            for (int i = 1; i &amp;lt;= len; ++i) &amp;#123;
                // printf(&amp;quot;%d %d %d\n&amp;quot;, i, id[i], dfn[id[i]]);
                // assert(0);
                add(dfn[id[i]], 1);
                if (i != 1)
                    add(dfn[askLCA(id[i], id[i - 1])], -1);
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            int x;
            std::cin &amp;gt;&amp;gt; x;
            x = tail[x] + 1;
            std::cout &amp;lt;&amp;lt; ask(dfn[x] + siz[x] - 1) - ask(dfn[x] - 1) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ac-自动机上的-dp&#34;&gt;AC 自动机上的 DP&lt;/h2&gt;
&lt;p&gt;鉴于 AC 自动机的优秀结构与性质，并不经常作为字符串匹配工具出现，其一个应用是作为 DP 的载体。&lt;/p&gt;
&lt;h3 id=&#34;eg1.-l-语言&#34;&gt;eg1. L 语言&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2292&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P2292&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们想到要在自动机上匹配，但此时 &lt;code&gt;fail&lt;/code&gt; 作为「断句」的唯一手段（断句的位置在链上当前点深度 - &lt;code&gt;fail&lt;/code&gt; 深度处），不再仅当失配时才能经过。我们考虑朴素的 DP：在经过的每个状态考虑断句，那么这要求断句处是一个单词的结尾，那么此时 &lt;code&gt;fail&lt;/code&gt; 最长匹配长度即可被更新。最后遍历所有单词的末结点，取最大答案。这里的 &lt;code&gt;fail&lt;/code&gt; 其实是 &lt;code&gt;fail&lt;/code&gt; 链上任意一点。&lt;/p&gt;
&lt;p&gt;考虑复杂度。容易发现对于每一个点我们跳了其整条 fail 链，那么复杂度就是最劣 &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 的。考虑优化这个过程至 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;题目里有一个很重要的条件还没有用到：单个单词长度 &lt;span class=&#34;math inline&#34;&gt;\(\le 20\)&lt;/span&gt;，这让我们想到状态压缩。对于每一个状态，记录其断出来单词的可能长度。&lt;/p&gt;
&lt;p&gt;我们在 DAG 上游走的时候记录目前可以断的所有位置，如果其和当前可断出来的长度之交不为空，就可以将此处加入「可以断的所有位置」并更新答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
int T[maxn][26], tot, fail[maxn], len[maxn], dep[maxn], tag[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot, dep[tot] = dep[p] + 1;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    ++tag[p];
    return p;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; t[i], tail[i] = ins(t[i]);
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            len[u] = len[fail[u]];
            if (tag[u])
                len[u] |= (1 &amp;lt;&amp;lt; dep[u]);
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    for (; m--; ) &amp;#123;
        std::string s;
        std::cin &amp;gt;&amp;gt; s;
        int p = 0, q = 1, res = 0;
        for (int i = 0; i &amp;lt; (int)s.length(); ++i) &amp;#123;
            p = T[p][s[i] - &amp;#39;a&amp;#39;], q &amp;lt;&amp;lt;= 1;
            if (len[p] &amp;amp; q)
                q |= 1, res = i + 1;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;eg2.-popcount-words&#34;&gt;eg2. Popcount Words&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/gym/103409/problem/H&#34; class=&#34;uri&#34;&gt;https://codeforces.com/gym/103409/problem/H&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;咋上强度了啊。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;先把整个序列写出来，即 &lt;span class=&#34;math inline&#34;&gt;\(w=\texttt{01101001100101}\cdots\)&lt;/span&gt;，尝试进一步探究形式化的规律，可以得到：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(w_{[0, 2^n), 0}=w_{[0, 2^{n-1}),0}+w_{[0, 2^n), 1}\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(w_{[l, r], 0/1}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 内，原串 / 取反的值。&lt;/li&gt;
&lt;li&gt;对于不以 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 开头的整段，可以从上述规则转化为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 开头的整段。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接着不难想到一种类似线段树的方式，将待求的 &lt;span class=&#34;math inline&#34;&gt;\(w_{[l, r], 0}\)&lt;/span&gt; 分到 &lt;span class=&#34;math inline&#34;&gt;\(O(\log V)\)&lt;/span&gt; 个整段上，那么 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 就可以被 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log V)\)&lt;/span&gt; 个整段（也是 &lt;span class=&#34;math inline&#34;&gt;\(\log V\)&lt;/span&gt; 个本质不同整段）描述。&lt;/p&gt;
&lt;p&gt;我们对 &lt;span class=&#34;math inline&#34;&gt;\({p_m}\)&lt;/span&gt; 建立 AC 自动机，需要知道这 &lt;span class=&#34;math inline&#34;&gt;\(\log V\)&lt;/span&gt; 个整段在每个点上的出现次数。对于自动机上任意状态 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，设 &lt;span class=&#34;math inline&#34;&gt;\(to_{u, n, 0/1}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 经过 &lt;span class=&#34;math inline&#34;&gt;\(w_{[0, 2^n), 0/1}\)&lt;/span&gt; 后到达的点，则可倍增（嘶，这里是不是应该反过来叫分治啊）简单解决。&lt;/p&gt;
&lt;p&gt;那么接下来我们就可以用 &lt;span class=&#34;math inline&#34;&gt;\(to\)&lt;/span&gt; 来进行快速游走了。顺便打个 &lt;span class=&#34;math inline&#34;&gt;\(cnt\)&lt;/span&gt; 记录一下每个 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 作为不同整段的开头被经过的次数。然后做一个 DP，类似于线段树上 &lt;code&gt;pushdown&lt;/code&gt; 的操作把所有整段下放到单点上的单个字符。&lt;/p&gt;
&lt;p&gt;有一说一用 DP 来处理这个东西还挺难想的。可能也是基于前面的倍增吧。最后拓扑排序就行了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;大家数组一定要用 C-style array 啊，&lt;code&gt;std::vector&amp;lt;&amp;gt;&lt;/code&gt; 计算的是申请空间包 MLE 的 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;大家大数组一定要内存连续访问优化啊，TLE &lt;span class=&#34;math inline&#34;&gt;\(\to\)&lt;/span&gt; 100ms 泪目了 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 5e5 + 5;
long long sum[maxn], f[2][30][maxn];
int cnt[2][30][maxn], to[2][30][maxn];
int T[maxn][2], tot, fail[maxn], deg[maxn];
int ins(std::string &amp;amp;t) &amp;#123;
    int p = 0;
    for (auto i : t) &amp;#123;
        if (!T[p][i - &amp;#39;0&amp;#39;])
            T[p][i - &amp;#39;0&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;0&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
void ask(std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;amp;s, int ql, int qr, int l = 0, int r = (1 &amp;lt;&amp;lt; 30) - 1, int len = 30, int v = 0) &amp;#123;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr) &amp;#123;
        s.emplace_back(len, v);
        return;
    &amp;#125;
    int mid = l + (r - l) / 2;
    if (ql &amp;lt;= mid)
        ask(s, ql, qr, l, mid, len - 1, v);
    if (qr &amp;gt; mid)
        ask(s, ql, qr, mid + 1, r, len - 1, v ^ 1);
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; s;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        int l, r;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
        ask(s, l, r);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; tail(m + 1);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        std::string t;
        std::cin &amp;gt;&amp;gt; t;
        tail[i] = ins(t);
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 2; ++i)
            if (T[0][i])
                q.push(T[0][i]);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 2; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i], ++deg[T[fail[u]][i]];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    for (int i = 0; i &amp;lt;= tot; ++i)
        to[0][0][i] = T[i][0], to[1][0][i] = T[i][1];
    for (int j = 1; j &amp;lt; 30; ++j)
        for (int i = 0; i &amp;lt;= tot; ++i) &amp;#123;
            to[0][j][i] = to[1][j - 1][to[0][j - 1][i]];
            to[1][j][i] = to[0][j - 1][to[1][j - 1][i]];
        &amp;#125;
    &amp;#123;
        int p = 0;
        for (auto [n, i] : s) &amp;#123;
            // printf(&amp;quot;# %d %d\n&amp;quot;, n, i);
            ++cnt[i][n][p], p = to[i][n][p];
        &amp;#125;
    &amp;#125;
    for (int j = 29; ~j; --j)
        for (int i = 0; i &amp;lt;= tot; ++i) &amp;#123;
            if (j != 29) &amp;#123;
                f[0][j][i] += f[0][j + 1][i];
                f[1][j][i] += f[1][j + 1][i];
                f[0][j][to[1][j][i]] += f[1][j + 1][i];
                f[1][j][to[0][j][i]] += f[0][j + 1][i];
            &amp;#125;
            f[1][j][i] += cnt[1][j][i];
            f[0][j][i] += cnt[0][j][i];
        &amp;#125;
    for (int i = 0; i &amp;lt;= tot; ++i) &amp;#123;
        sum[T[i][0]] += f[0][0][i], sum[T[i][1]] += f[1][0][i];
        // printf(&amp;quot;%d %d\n&amp;quot;, f[i][0][0], f[i][0][1]);
    &amp;#125;
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt;= tot; ++i)
            if (!deg[i])
                q.push(i);
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            sum[fail[u]] += sum[u];
            if (!--deg[fail[u]])
                q.push(fail[u]);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cout &amp;lt;&amp;lt; sum[tail[i]] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;eg3.-legen&#34;&gt;eg3. Legen…&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/696/D&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/696/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先在 fail 树上把每个状态的实际价值计算出来。我们发现匹配串是未知的，也就是我们需要主动决定游走路径。注意到 &lt;span class=&#34;math inline&#34;&gt;\(l=10^{14}\)&lt;/span&gt;，考虑矩阵。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{u, i}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 状态时已经走了 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 步，可以得到的最大价值。那么显然有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{v,i+1}=f_{u,i}+s_v.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 是自动机上 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的任意出边。图的大小为 &lt;span class=&#34;math inline&#34;&gt;\(200\)&lt;/span&gt;，可以放到 &lt;span class=&#34;math inline&#34;&gt;\(+\max\)&lt;/span&gt; 矩阵里加速转移。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 2e5 + 5;
const long long inf = 1e18;
int fail[maxn], T[maxn][26], tot;
int ins(std::string s) &amp;#123;
    int p = 0;
    for (auto i : s) &amp;#123;
        if (!T[p][i - &amp;#39;a&amp;#39;])
            T[p][i - &amp;#39;a&amp;#39;] = ++tot;
        p = T[p][i - &amp;#39;a&amp;#39;];
    &amp;#125;
    return p;
&amp;#125;
struct matrix &amp;#123;
    int n, m;
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; a;
    matrix(int n1, int m1, long long v = -inf, bool op = 0): n(n1), m(m1), a(n + 1, std::vector&amp;lt;long long&amp;gt; (m + 1, v)) &amp;#123;
        if (op)
            for (int i = 0; i &amp;lt;= n; ++i)
                a[i][i] = 0;
        return;
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; &amp;amp;operator[] (int i) &amp;#123;
        return a[i];
    &amp;#125;
    matrix operator* (matrix &amp;amp;q) const &amp;#123;
        matrix res(n, q.m);
        for (int k = 0; k &amp;lt;= m; ++k)
            for (int i = 0; i &amp;lt;= n; ++i)
                for (int j = 0; j &amp;lt;= q.m; ++j)
                    res[i][j] = std::max(res[i][j], a[i][k] + q[k][j]);
        return res;
    &amp;#125;
    matrix&amp;amp; operator*= (matrix q) &amp;#123;
        return *this = *this * q;
    &amp;#125;
    matrix operator^ (long long q) &amp;#123;
        matrix res(n, n, -inf, 1), x(*this);
        for (; q; q &amp;gt;&amp;gt;= 1, x *= x)
            if (q &amp;amp; 1)
                res *= x;
        return res;
    &amp;#125;
&amp;#125;;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    long long m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::vector&amp;lt;int&amp;gt; tail(n + 1);
    std::vector&amp;lt;std::string&amp;gt; t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; t[i];
        tail[i] = ins(t[i]);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; s(tot + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        s[tail[i]] += a[i];
    &amp;#123;
        std::queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; 26; ++i)
            if (T[0][i])
                q.push(T[0][i]); 
        for (; !q.empty(); ) &amp;#123;
            int u = q.front();
            q.pop();
            for (int i = 0; i &amp;lt; 26; ++i)
                if (T[u][i]) &amp;#123;
                    int v = T[u][i];
                    fail[v] = T[fail[u]][i], s[v] += s[fail[v]];
                    q.push(v);
                &amp;#125;
                else
                    T[u][i] = T[fail[u]][i];
        &amp;#125;
    &amp;#125;
    matrix f(0, tot), op(tot, tot);
    f[0][0] = 0;
    for (int i = 0; i &amp;lt;= tot; ++i)
        for (int j = 0; j &amp;lt; 26; ++j)
            op[i][T[i][j]] = s[T[i][j]];
    f *= (op * m);
    std::cout &amp;lt;&amp;lt; *std::max_element(f[0].begin(), f[0].end()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;eg4.-you-are-given-some-strings&#34;&gt;eg4. You Are Given Some Strings…&lt;/h3&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250121/#%E4%B8%80%E4%B8%AA%E6%A8%A1%E6%9D%BFcf1202e-you-are-given-some-strings...&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;
</content>
        <category term="DP" />
        <category term="字符串" />
        <category term="AC 自动机" />
        <updated>2025-01-20T03:21:15.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20241104/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20241104/"/>
        <content type="html">&lt;p&gt;哭いた閃光が目に刺さる / お別かれの鐘が鳴る / 神が成した歴史の / 結ぶ答えは砂の味がする&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-美味しい美味しいハンバーグ&#34;&gt;A. 美味しい美味しいハンバーグ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/669299#problem/A&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/669299#problem/A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有一个很神奇的随机化做法：我们从前往后串签子，最开始签子数为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，如果当前任何一个签子都没办法再串这一个就新增签子。如果没有签子可以用了，就说明这块肉不合法，挪到前 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 块中的随机位置使其优先被选择。&lt;/p&gt;
&lt;p&gt;你会发现这个做法跑得很快，spdarkle 说因为 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 很小还保证有解，所以期望次数是非常对的。我太菜了他也没细说所以开摆。&lt;/p&gt;
&lt;p&gt;由于神秘原因，我的 &lt;code&gt;std::mt19937::operator()&lt;/code&gt; 如果外边不套一层 abs 就会起飞 &lt;img src=&#34;/em/yun.gif&#34; alt=&#34;晕&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    struct _ &amp;#123; int l, r, u, d; &amp;#125;;
    std::vector&amp;lt;_&amp;gt; a(n + 1), b(k + 1);
    std::mt19937 rand(time(nullptr));
    auto random = [&amp;amp;](int l, int r) &amp;#123;
        return l + std::abs((int)rand()) % (r - l + 1);
    &amp;#125;;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i].l &amp;gt;&amp;gt; a[i].u &amp;gt;&amp;gt; a[i].r &amp;gt;&amp;gt; a[i].d;
    for (;;) &amp;#123;
        std::copy(a.begin() + 1, a.begin() + k + 1, b.begin() + 1);
        for (int i = k + 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= k; ++j) &amp;#123;
                if (std::min(b[j].r, a[i].r) &amp;gt;= std::max(b[j].l, a[i].l) &amp;amp;&amp;amp; std::min(b[j].d, a[i].d) &amp;gt;= std::max(b[j].u, a[i].u)) &amp;#123;
                    b[j].l = std::max(b[j].l, a[i].l);
                    b[j].r = std::min(b[j].r, a[i].r);
                    b[j].u = std::max(b[j].u, a[i].u);
                    b[j].d = std::min(b[j].d, a[i].d);
                    goto issol;
                &amp;#125;
            &amp;#125;
            std::swap(a[i], a[random(1, i)]);
            goto nosol;
        issol: ;
        &amp;#125;
        for (int i = 1; i &amp;lt;= k; ++i)
            std::cout &amp;lt;&amp;lt; b[i].l &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; b[i].u &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        break;
    nosol: ;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-shik-and-travel&#34;&gt;B. Shik and Travel&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/669299#problem/B&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/669299#problem/B&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最小化最大，显然需要二分答案，check 打个 DP。具体怎么 DP 呢？首先考虑暴力，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{u, a, b}\)&lt;/span&gt; 表示在当前 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 的限制下，从 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 出发到第一个叶子距离为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，最后一个距离为 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 的可行性。那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,a,b} = (f_{l,a,i}\land f_{r,j,b})\lor (f_{r,a,i}\land f_{l,j,b})\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;先不说转移，状态数已经难以接受。所以我们从状态数入手，显然如果存在一个 &lt;span class=&#34;math inline&#34;&gt;\(a&amp;#39;\le a\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b&amp;#39;\le b\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\((a&amp;#39;,b&amp;#39;)\)&lt;/span&gt; 就是无用状态。也就是说，我们把所有有用的 &lt;span class=&#34;math inline&#34;&gt;\((a, b)\)&lt;/span&gt; 按 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 从小到大排序，&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 应该是单调递减的；考虑这个抽象的过程，相当于从头到尾遍历一串状态，在路上碰到的所有较大的 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 都会被当场丢弃。&lt;/p&gt;
&lt;p&gt;感性思考可以发现&lt;mark&gt;当我们试图让 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 最小的时候，这个状态最有用（即最不可能被丢弃）&lt;/mark&gt;。对于一个 &lt;span class=&#34;math inline&#34;&gt;\(f_{l,a,i}\)&lt;/span&gt;，我们找到能够转移的 &lt;span class=&#34;math inline&#34;&gt;\(f_{r,j,b_{\min}}\)&lt;/span&gt; 来转移。正确性很好证明，我们的 check 只要求在根节点上存在任意合法状态，那只需要让最不可能被丢弃的不被丢弃即可，更可能被丢弃的状态是否被丢弃就不会产生影响了。&lt;/p&gt;
&lt;p&gt;优化后的状态数在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 上只会增加 &lt;span class=&#34;math inline&#34;&gt;\(\min(|a_l|,|b_r|)+\min(|a_r|,|b_l|)\)&lt;/span&gt;，即两个儿子上的状态数较小者，参考 DSU on tree，是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log)\)&lt;/span&gt; 的。加上对状态排序的数据结构，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2 n\log V)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long long inf = 1e18;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(n + 1);
    for (int i = 2, x, w; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; w;
        g[x].emplace_back(i, w);
    &amp;#125;
    long long res = -1;
    for (long long l = 0, r = inf, mid; l &amp;lt;= r; ) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        if ([&amp;amp;](void) -&amp;gt; bool &amp;#123;
            std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;long long, long&amp;gt; &amp;gt; &amp;gt; f(n + 1);
            std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
                if (g[x].empty()) &amp;#123;
                    f[x].emplace_back(0, 0);
                    return;
                &amp;#125;
                long long lim = mid;
                for (auto [i, w] : g[x])
                    DFS(i), lim -= w;
                std::vector&amp;lt;std::pair&amp;lt;long long, long long&amp;gt; &amp;gt; t;
                for (int i = 0; i &amp;lt; 2; ++i) &amp;#123;
                    int j = 0;
                    auto l = g[x][0], r = g[x][1];
                    for (auto [a, b] : f[l.first]) &amp;#123;
                        for (; j + 1 &amp;lt; (int)f[r.first].size() &amp;amp;&amp;amp; f[r.first][j + 1].first + b &amp;lt;= lim; ++j);
                        if (j &amp;lt; (int)f[r.first].size() &amp;amp;&amp;amp; f[r.first][j].first + b &amp;lt;= lim)
                            t.emplace_back(a + l.second, f[r.first][j].second + r.second);
                    &amp;#125;
                    std::swap(g[x][0], g[x][1]);
                &amp;#125;
                std::sort(t.begin(), t.end());
                for (auto [a, b] : t)
                    if (f[x].empty() || f[x].back().second &amp;gt; b)
                        f[x].emplace_back(a, b);
                return;
            &amp;#125;;
            DFS(1);
            return !f[1].empty();
        &amp;#125; ())
            res = mid, r = mid - 1;
        else 
            l = mid + 1;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-candy-piles&#34;&gt;D. Candy Piles&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/669299#problem/D&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/669299#problem/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不难发现我们可以把题意转化为，把所有列从大到小排列，每次可以选择删掉最左边一列或最下边一行，删空者胜。&lt;/p&gt;
&lt;p&gt;把该柱状图转化为网格图，定义边界为胜利点，对于非边界上的点，其一定可以往右走、往上走。若一个点上方、右侧点均为胜利点，此点为失败点；否则，此点为胜利点。&lt;/p&gt;
</content>
        <updated>2024-11-04T01:05:07.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20241027/</id>
        <title>CSP-S</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20241027/"/>
        <content type="html">&lt;p&gt;弟娃年方十一。方出考场之时，余问弟娃曰：「T1 用时几何？」。弟娃对曰：「及过大样例，已半炷香矣。」余大恸，为余 T1 大样例既过，已两柱香有余。古谚有云：「若有一人年少于吾亦强于吾，吾为之单调队列也。」吾弟娃年少于吾，殊难易之；今吾弟娃已四倍而强于吾，吾盍为单调队列哉！&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;忆往昔昔（初二），1=。忆往昔昔昔（初一），1=。忆往昔（初三），135pts 喜提 2=。&lt;/p&gt;
&lt;p&gt;看今朝，300pts 应该有 1=。哇恭喜恭喜，2= 到 1=，一年来你有很大进步呢！&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-duel&#34;&gt;A. duel&lt;/h2&gt;
&lt;p&gt;非常遗憾地，被橙题&lt;mark&gt;硬控 1h+&lt;/mark&gt;。问就是上场之后先花了 59min 下载 &lt;em&gt;大脑.tar.gz&lt;/em&gt;，然后 1s 知道做法，59s 实现。&lt;/p&gt;
&lt;p&gt;其实我们是注意到了众数的那个奇妙结论的，但是因为太奇怪并且担心是因为大样例太水所以没敢写，不服来战。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-detect&#34;&gt;B. detect&lt;/h2&gt;
&lt;p&gt;我们在求解出区间后被精度问题&lt;mark&gt;硬控 1h+&lt;/mark&gt;。在按照右端点排序后超厉害地使用 &lt;strong&gt;线段树优化 DP&lt;/strong&gt; 解决了初一简单线性贪心问题。哈哈哈。&lt;/p&gt;
&lt;p&gt;笑话：被精度问题控的 1h 里有 40min 扑在因为调精度而打出来的 &lt;em&gt;死循环&lt;/em&gt; 上 &lt;img src=&#34;/em/kx.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c.-color&#34;&gt;C. color&lt;/h2&gt;
&lt;p&gt;在 5min 解决费用提前计算式子后删除了 node_modules &amp;gt; 大脑，稍加思考得出了「大抵是不存在不带 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 的全局修改、单点修改、单点查询的数据结构的」的结论，超厉害地使用 &lt;strong&gt;线段树优化 DP&lt;/strong&gt;，并且被全局修改懒标记没传给树根&lt;mark&gt;硬控 1h+&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;不过因为知道 1e6 的数据给线段树确实挺奇怪的，所以大力卡常，赛时代码跑民间数据跑得挺快。也就是线性所有点加起来 500ms，我一个点就要跑 500ms 的水平 &lt;img src=&#34;/em/kx.gif&#34; /&gt; 虽然肯定 T 是不可能 T 的。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-arena&#34;&gt;D. arena&lt;/h2&gt;
&lt;p&gt;坏消息：前三题均被硬控 1h+，T4 连暴力都打不完了，甚而至于，输入都打不完喜提零蛋。&lt;/p&gt;
&lt;p&gt;好消息：看开点，至少 T4 不会被&lt;mark&gt;硬控 1h+&lt;/mark&gt; &lt;img src=&#34;/em/kx.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这道题有个好写的做法，先胡一胡，等会儿开一篇具体写一写。&lt;/p&gt;
&lt;p&gt;还原到每场比赛胜出者能力值（线性），还需要注意到一个单调性：若在加入一个人后某场比赛的胜者就不可能成为全局胜者（相当于知道其祖先中某个元素的具体胜者，且该胜者不是自己），那么加入更多的人也不行。故记录这个人（假设对于比赛 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(id_x\)&lt;/span&gt;），那么知道了所有叶子的 &lt;span class=&#34;math inline&#34;&gt;\(id\)&lt;/span&gt; 就可以随便乱搞了。至于求 &lt;span class=&#34;math inline&#34;&gt;\(id\)&lt;/span&gt; 的过程，直接把 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 的人加入二叉树，如果某个点被确定了胜者，就往败者子树打一个标记，完了过后遍历整个树下传标记即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;小知识：在 2024 CSP-S2 中，99% 的人打了 0 个 &lt;strong&gt;线段树优化 DP&lt;/strong&gt;，而你打了 2 个 &lt;strong&gt;线段树优化 DP&lt;/strong&gt; &lt;img src=&#34;/em/kx.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;可怜捏。100 + 100 + 100 + 0 = 300。由于 T4 输入没写完是没机会浮动了。拜拜 WC。&lt;/p&gt;
&lt;p&gt;草草草，wc 都拜拜了我今年是不是直接原地 afo 了啊。不要啊不要啊。&lt;/p&gt;
</content>
        <category term="下饭" />
        <updated>2024-10-27T00:48:02.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20241021-1/</id>
        <title>长链剖分 学习笔记</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20241021-1/"/>
        <content type="html">&lt;p&gt;&lt;em&gt;半端な生命の関数を / 少々ここらでオーバーライド&lt;/em&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;内容-性质&#34;&gt;内容 &amp;amp; 性质&lt;/h2&gt;
&lt;p&gt;把重链剖分选的 siz 最大的儿子换成高度最大的儿子就是长剖了。同样具有一些美妙的性质。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;任意点到根节点经过的链数最劣为 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt n\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑构造一条经过了 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt n+1\)&lt;/span&gt; 条链的路径，发现构造不出来。得证。（？）&lt;/p&gt;
这点也决定了长剖和重剖走的不是一条赛道，更多的是处理一些和深度有关的场景下的问题。用法有点像 dsu on tree。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任意点 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 级祖先 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 所在链长 &lt;span class=&#34;math inline&#34;&gt;\(\ge k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑反证。若 &lt;span class=&#34;math inline&#34;&gt;\(fa\)&lt;/span&gt; 所在链长度 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;k\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(fa\to x\)&lt;/span&gt; 更优，矛盾。故原命题成立。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;求-k-级祖先&#34;&gt;求 k 级祖先&lt;/h2&gt;
&lt;p&gt;长剖的一个典型应用是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)-O(1)\)&lt;/span&gt; 求 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 级祖先。先考虑相对暴力的做法，可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n\sqrt n)\)&lt;/span&gt; 预处理每个点的 &lt;span class=&#34;math inline&#34;&gt;\(1\sim \sqrt n\)&lt;/span&gt; 级祖先然后块间块内随便跳一跳就是 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt n)\)&lt;/span&gt; 的单次查询了。&lt;/p&gt;
&lt;p&gt;把这个暴力结合「任意点 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 级祖先所在链长 &lt;span class=&#34;math inline&#34;&gt;\(\ge k\)&lt;/span&gt;」的性质，令 &lt;span class=&#34;math inline&#34;&gt;\(r=\dfrac k2\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 级祖先所在链长 &lt;span class=&#34;math inline&#34;&gt;\(\ge r\)&lt;/span&gt;。假设我们现在已经知道 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 级祖先 &lt;span class=&#34;math inline&#34;&gt;\(fa_r\)&lt;/span&gt;，预处理出链内点序列、链顶向上的链长个祖先（均摊 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;），就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 访问 &lt;span class=&#34;math inline&#34;&gt;\(fa_k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;怎么找到 &lt;span class=&#34;math inline&#34;&gt;\(fa_r\)&lt;/span&gt; 呢？这看似是递归的问题，实际上发现 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的取值只需 &lt;span class=&#34;math inline&#34;&gt;\(\ge \dfrac k2\)&lt;/span&gt;，对于 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 的每一个 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，找到其最高二进制位 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;（显然 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的可能取值有 &lt;span class=&#34;math inline&#34;&gt;\(\log n\)&lt;/span&gt; 种），对于每个点，预处理出其 &lt;span class=&#34;math inline&#34;&gt;\(\log n\)&lt;/span&gt; 个不同的 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 级祖先。这个就是倍增了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;for (int i = 1, mx = 0; i &amp;lt;= n; ++i) &amp;#123;
    if (i &amp;gt;= (1 &amp;lt;&amp;lt; mx) * 2)
        ++mx;
    to[i] = mx;
&amp;#125;
std::vector&amp;lt;std::array&amp;lt;int, 21&amp;gt; &amp;gt; fa(n + 1);
std::vector&amp;lt;int&amp;gt; h(n + 1, 1), son(n + 1), dep(n + 1);
h[0] = 0;
std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
    for (auto i : g[x])
        if (i != fa[x][0]) &amp;#123;
            fa[i][0] = x;
            for (int j = 1; j &amp;lt;= 20; ++j)
                fa[i][j] = fa[fa[i][j - 1]][j - 1];
            dep[i] = dep[x] + 1;
            DFS(i);
            if (h[i] &amp;gt;= h[son[x]])
                son[x] = i, h[x] = h[i] + 1;
        &amp;#125;
    return;
&amp;#125;;
dep[1] = 1, DFS(1);
std::vector&amp;lt;int&amp;gt; top(n + 1), id(n + 1);
std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; anc(n + 1), des(n + 1, std::vector&amp;lt;int&amp;gt; (1));
std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int toq) &amp;#123;
    top[x] = toq;
    if (son[x])
        DFS1(son[x], toq);
    for (auto i : g[x])
        if (i != fa[x][0] &amp;amp;&amp;amp; i != son[x])
            DFS1(i, i);
    des[toq].push_back(x);
    id[x] = (int)des[toq].size() - 1;
    if (x == toq) &amp;#123;
        anc[x].push_back(x);
        for (int j = 1, now = x; j &amp;lt;= id[x]; ++j, now = fa[now][0])
            anc[x].push_back(fa[now][0]);
    &amp;#125;
    return;
&amp;#125;;
DFS1(1, 1);
auto ask = [&amp;amp;](int x, int k) &amp;#123;
    int x1 = x;
    if (!k)
        return x;
    x = fa[x][to[k]];
    if (dep[x] - dep[top[x]] &amp;gt;= k - (1 &amp;lt;&amp;lt; to[k]))
        return des[top[x]][id[x] + k - (1 &amp;lt;&amp;lt; to[k])];
    return anc[top[x]][k - (1 &amp;lt;&amp;lt; to[k]) - (dep[x] - dep[top[x]])];
&amp;#125;;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;优化-dp&#34;&gt;优化 DP&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;yly：管它这那的，只要是有关深度直接上长剖就是了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和 DSU on tree 类似，主要利用每条链只会被算一次实现 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; DP。具体地，尽可能地『继承』长链的信息，『短链』则暴力合并。&lt;/p&gt;
&lt;p&gt;值得注意的是，一般『深度』这一维信息会以『与 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的距离』的形式，结合指针来维护（因为直接记录深度会更史）。&lt;/p&gt;
&lt;p&gt;具体地，用一个全局大数组容纳所有信息，为每个点分配相应的数组头指针。正常情况下需要用到的元素最多为 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt;，但如果存在一些诡异的前移后移操作就另当别论了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;p5904-poi-2014-hot-hotels-加强版&#34;&gt;P5904 [POI 2014] HOT-Hotels 加强版&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5904&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P5904&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先 &lt;del&gt;不难&lt;/del&gt; 得到 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 做法：显然存在一个点到三个点距离相等。这个点既可能是它们的 LCA，也可能是其中一个点的子孙，另外两个点的 LCA。综上，&lt;strong&gt;在 LCA 处统计答案是可行的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 子树中距离 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的点数；&lt;span class=&#34;math inline&#34;&gt;\(g_{i,j}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 子树中距离 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;、或者距 LCA 为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 且 LCA 距离 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(d-j\)&lt;/span&gt; 的点对数；随便做就可以了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    auto res(0ll);
    std::vector&amp;lt;int&amp;gt; h(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; f(n + 1), g(n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        h[x] = 1;
        for (auto i : g1[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                h[x] = std::max(h[x], h[i] + 1);
            &amp;#125;
        f[x].resize(h[x] + 1), g[x].resize(h[x] + 1);
        f[x][0] = 1ll;
        for (auto i : g1[x])
            if (i != fa) &amp;#123;
                for (int j = 0; j &amp;lt;= h[i]; ++j) &amp;#123;
                    if (j &amp;gt;= 1)
                        res += g[x][j] * f[i][j - 1];
                    if (j &amp;gt;= 1 &amp;amp;&amp;amp; j + 1 &amp;lt;= h[i])
                        res += f[x][j] * g[i][j + 1];
                    if (j &amp;gt;= 1) &amp;#123;
                        g[x][j] += f[x][j] * f[i][j - 1];
                        f[x][j] += f[i][j - 1];
                    &amp;#125;
                    if (j + 1 &amp;lt;= h[i])
                        g[x][j] += g[i][j + 1];
                &amp;#125;
                std::vector&amp;lt;long long&amp;gt;().swap(f[i]);
                std::vector&amp;lt;long long&amp;gt;().swap(g[i]);
            &amp;#125;
        res += g[x][0];
        return;
    &amp;#125;;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;然后对于每个 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，类似 DSU on tree，继承其长儿子的数据（整体前移 / 后移一位，使用指针实现），再把短儿子暴力合并上来。&lt;/p&gt;
&lt;p&gt;每次合并短儿子，数组长为短儿子链长；&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 向上合并时，数组长为长儿子链长。故所有链被合并恰好一次，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g1(n + 1);
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g1[x].push_back(y), g1[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; h(n + 1), son(n + 1);
    std::vector&amp;lt;long long&amp;gt; df(5 * n + 1), dg(5 * n + 1);
    std::function&amp;lt;void(int, int)&amp;gt; DFS = [&amp;amp;](int x, int fa) &amp;#123;
        h[x] = 1;
        for (auto i : g1[x])
            if (i != fa) &amp;#123;
                DFS(i, x);
                h[x] = std::max(h[x], h[i] + 1);
                if (h[i] &amp;gt; h[son[x]])
                    son[x] = i;
            &amp;#125;
        return;
    &amp;#125;;
    DFS(1, -1);
    auto pos(dg.begin() + 3 * n);
    std::vector&amp;lt;decltype(df.begin())&amp;gt; f(n + 1), g(n + 1);
    auto res(0ll);
    DFS = [&amp;amp;](int x, int fa) &amp;#123;
        f[x][0] = 1ll;
        if (son[x]) &amp;#123;
            f[son[x]] = std::next(f[x]), g[son[x]] = std::prev(g[x]);
            DFS(son[x], x);
        &amp;#125;
        for (auto i : g1[x])
            if (i != fa &amp;amp;&amp;amp; i != son[x]) &amp;#123;
                f[i] = std::next(f[x], h[x] + 1);
                std::fill(f[i], f[i] + h[i] + 2, 0ll);
                g[i] = std::next(pos, h[i]), pos = std::next(g[i], h[i]);
                std::fill(std::prev(g[i]), g[i] + h[i] + 2, 0ll);
                DFS(i, x);
                for (int j = 0; j &amp;lt;= h[i]; ++j) &amp;#123;
                    if (j &amp;gt;= 1)
                        res += g[x][j] * f[i][j - 1];
                    if (j &amp;gt;= 1 &amp;amp;&amp;amp; j + 1 &amp;lt;= h[i])
                        res += f[x][j] * g[i][j + 1];
                    if (j &amp;gt;= 1) &amp;#123;
                        g[x][j] += f[x][j] * f[i][j - 1];
                        f[x][j] += f[i][j - 1];
                    &amp;#125;
                    if (j + 1 &amp;lt;= h[i])
                        g[x][j] += g[i][j + 1];
                &amp;#125;
            &amp;#125;
        res += g[x][0];
        return;
    &amp;#125;;
    f[1] = df.begin(), g[1] = dg.begin() + 2 * n;
    DFS(1, -1);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;cf1585g-poachers&#34;&gt;CF1585G Poachers&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1585/G&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1585/G&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;公平博弈。我们现在要算每个根的 SG 值。设 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,j}\)&lt;/span&gt; 表示在点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，删了距离它为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 这一层的 SG 值，那么有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{u,j}=
\begin{cases}
\text{mex}\{f_{v,0}\}&amp;amp;j=0\\
\bigoplus f_{v,j-1}&amp;amp;\text{otherwise}
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后发现有深度维。大力长剖。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        std::vector&amp;lt;int&amp;gt; rt;
        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
        for (int i = 1, x; i &amp;lt;= n; ++i) &amp;#123;
            std::cin &amp;gt;&amp;gt; x;
            if (x)
                g[x].push_back(i);
            else
                rt.push_back(i);
        &amp;#125;
        std::vector&amp;lt;int&amp;gt; h(n + 1), son(n + 1), to(n + 1, inf);
        std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
            h[x] = 1;
            for (auto i : g[x]) &amp;#123;
                DFS(i);
                h[x] = std::max(h[x], h[i] + 1);
                to[x] = std::min(to[x], to[i] + 1);
                if (h[i] &amp;gt; h[son[x]])
                    son[x] = i;
            &amp;#125;
            to[x] = std::min(to[x], h[x]);
            return;
        &amp;#125;;
        for (auto i : rt)
            DFS(i);
        std::vector&amp;lt;int&amp;gt; _f(5 * n + 1), top(n + 1);
        std::vector&amp;lt;decltype(_f.begin())&amp;gt; f(n + 1);
        std::vector&amp;lt;std::unordered_set&amp;lt;int&amp;gt; &amp;gt; s(n + 1);
        auto p(_f.begin());
        DFS = [&amp;amp;](int x) &amp;#123;
            if (son[x]) &amp;#123;
                f[son[x]] = std::next(f[x]);
                top[son[x]] = top[x], DFS(son[x]);
            &amp;#125;
            if ((int)g[x].size() == 1) &amp;#123;
                s[top[x]].insert(f[son[x]][0]);
                for (int now = f[son[x]][0] + 1; ; ++now)
                    if (!s[top[x]].count(now)) &amp;#123;
                        f[x][0] = now;
                        break;
                    &amp;#125;
                return;
            &amp;#125;
            for (auto i : g[x])
                if (i != son[x]) &amp;#123;
                    f[i] = p, p = std::next(p, h[i] + 1);
                    top[i] = i, DFS(i);
                    for (int j = 1; j &amp;lt;= to[i] + 1; ++j)
                        f[x][j] ^= f[i][j - 1];
                &amp;#125;
            std::unordered_set&amp;lt;int&amp;gt;().swap(s[top[x]]);
            for (int j = 1; j &amp;lt;= to[x]; ++j)
                s[top[x]].insert(f[x][j]);
            for (int now = 0; ; ++now)
                if (!s[top[x]].count(now)) &amp;#123;
                    f[x][0] = now;
                    break;
                &amp;#125;
            return;
        &amp;#125;;
        int res = 0;
        for (auto i : rt) &amp;#123;
            f[i] = p, p = std::next(p, h[i] + 1);
            DFS(i), res ^= f[i][0];
        &amp;#125;
        std::cout &amp;lt;&amp;lt; (res ? &amp;quot;YES&amp;quot; : &amp;quot;NO&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
</content>
        <category term="树链剖分" />
        <category term="长链剖分" />
        <updated>2024-10-21T08:33:47.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20241021/</id>
        <title>字符串</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20241021/"/>
        <content type="html">&lt;p&gt;标题本来叫「哈希」，后来发现第二天的很多题虽然打了哈希的 tag 但是只有 KMP 做法，故忍痛改成「字符串」。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-two-permutations&#34;&gt;A. Two Permutations&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5653/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5653/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有个很重要的性质是 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 都是排列。然后我们就知道了 &lt;span class=&#34;math inline&#34;&gt;\(x\in [0,m-n]\)&lt;/span&gt;，且每个 &lt;span class=&#34;math inline&#34;&gt;\(a_i+x\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 中有元素与之唯一对应。&lt;mark&gt;于是问题可以转化成，&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 中在 &lt;span class=&#34;math inline&#34;&gt;\([1+x,n+x]\)&lt;/span&gt; 范围中的元素按顺序哈希起来和 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 序列是否完全一致&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;我们就有了一个想法：枚举这个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，通过某种方法快速查询这个长度固定的值域区间按顺序哈希起来的值。&lt;mark&gt;然后就是典中典之线段树维护哈希，只需在枚举 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 时滑动窗口，剔除头部元素，新增尾部元素，查询全局哈希值即可&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;还有一个小细节是关于实时维护全局加 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 后的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;。由于哈希用乘的肯定拆不开，只能用加哈希了。每次 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 加一的时候全局哈希值加上 &lt;span class=&#34;math inline&#34;&gt;\(\sum p_i\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int p = 998244353;
const int mod = 1e9 + 7;
const int maxn = 2e5 + 5;
struct &amp;#123;
    int l, r, s;
    long long u;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
long long base[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void pushup(int p) &amp;#123;
    t[p].u = (t[lt].u * base[t[rt].s] % mod + t[rt].u) % mod;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    t[p].s += (v &amp;gt;= 0 ? 1 : -1);
    if (t[p].l == t[p].r) &amp;#123;
        t[p].u += v;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        add(lt, x, v);
    else
        add(rt, x, v);
    pushup(p);
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(m + 1), pos(m + 1);
    base[0] = 1;
    long long s = 1;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        base[i] = base[i - 1] * p % mod;
        if (i &amp;lt; n)
            (s += base[i]) %= mod;
    &amp;#125;
    long long now = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        now = (now * p % mod + a[i]) % mod;
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        std::cin &amp;gt;&amp;gt; b[i], pos[b[i]] = i;
    int res = 0;
    bld(1, 1, m);
    for (int x = 0; x &amp;lt;= m - n; ++x) &amp;#123;
        for (static int l = 1; l &amp;lt; 1 + x; add(1, pos[l], -l), ++l);
            // printf(&amp;quot;add %d: %d\n&amp;quot;, pos[l], -l);
        for (static int r = 1; r &amp;lt;= n + x; add(1, pos[r], r), ++r);
            // printf(&amp;quot;add %d: %d\n&amp;quot;, pos[r], r);
        (res += (now == t[1].u));
        // printf(&amp;quot;x = %d, now = %lld, t[1].u = %lld\n&amp;quot;, x, now, t[1].u);
        (now += s) %= mod;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-k-substrings&#34;&gt;B. k-substrings&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5653/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5653/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们可以发现这 &lt;span class=&#34;math inline&#34;&gt;\(\left\lceil\dfrac n2\right\rceil\)&lt;/span&gt; 个串都有共同中点，而&lt;mark&gt;不管其位于元素还是元素间的空隙，两边的 border 都应关于其对称&lt;/mark&gt;。啥叫奇 border 呢，就是每个 border 都能取到元素上的中点，&lt;mark&gt;也就是说这俩中点是关于全串中点对称的&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;我们枚举这 &lt;span class=&#34;math inline&#34;&gt;\(\left\lfloor\dfrac n2\right\rfloor\)&lt;/span&gt; 对可能的 border 中点，分别二分 border 长度。假设最后该对中点最长合法 border 为 &lt;span class=&#34;math inline&#34;&gt;\([l_1,r_1]\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\([l_2,r_2]\)&lt;/span&gt;，用 &lt;span class=&#34;math inline&#34;&gt;\(r_1-l_1+1-2\times k\)&lt;/span&gt; 更新 &lt;span class=&#34;math inline&#34;&gt;\(l_1+k\)&lt;/span&gt; 处的答案即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int p = 131;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;char&amp;gt; a(n + 1);
    std::vector&amp;lt;int&amp;gt; res(n + 1, -1);
    std::vector&amp;lt;long long&amp;gt; h(n + 1), base(n + 1);
    base[0] = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        h[i] = (h[i - 1] * p + a[i]) % mod;
        base[i] = base[i - 1] * p % mod;
    &amp;#125;
    auto geth = [&amp;amp;](int l, int r) &amp;#123;
        return (h[r] + mod - h[l - 1] * base[r - l + 1] % mod) % mod;
    &amp;#125;;
    for (int l = n / 2, r = (n + 1) / 2 + 1; r &amp;lt;= n; --l, ++r)
        if (a[l] == a[r]) &amp;#123;
            int t = 0;
            for (int ll = 1, rr = l, mid; ll &amp;lt;= rr; ) &amp;#123;
                mid = (ll + rr) &amp;gt;&amp;gt; 1;
                if (geth(l - mid + 1, l + mid - 1) == geth(r - mid + 1, r + mid - 1))
                    t = mid, ll = mid + 1;
                else
                    rr = mid - 1;
            &amp;#125;
            res[l - t + 1] = std::max(res[l - t + 1], 2 * t - 1);
        &amp;#125;
    for (int i = 1; i &amp;lt;= (n + 1) / 2; ++i) &amp;#123;
        res[i] = std::max(res[i - 1] - 2, res[i]);
        std::cout &amp;lt;&amp;lt; res[i] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    &amp;#125;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c.-kefa-and-watch&#34;&gt;C. Kefa and Watch&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5653/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5653/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个挺常用的 trick 是，&lt;mark&gt;&lt;span class=&#34;math inline&#34;&gt;\(S_{l\sim r}\)&lt;/span&gt; 存在长度为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的循环节 &lt;span class=&#34;math inline&#34;&gt;\(\iff S_{l\sim (r-d)}=S_{(l+d+)\sim r}\)&lt;/span&gt;&lt;/mark&gt;。而题目要求为混循环节，刚好也可以用这个方法判定。线段树随便维护一下哈希就行。assign 操作就是将长度为 &lt;span class=&#34;math inline&#34;&gt;\(len\)&lt;/span&gt; 的区间哈希值更改为 &lt;span class=&#34;math inline&#34;&gt;\(t\times \sum_{i=0}^{len-1}p^i\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int p = 131;
const int mod = 1e9 + 7;
const int maxn = 1e5 + 5;
struct &amp;#123;
    int l, r, d;
    long long u;
&amp;#125; t[maxn &amp;lt;&amp;lt; 2];
int a[maxn];
long long base[maxn], s[maxn];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void pushup(int p) &amp;#123;
    t[p].u = (t[lt].u * base[t[rt].r - t[rt].l + 1] % mod + t[rt].u) % mod;
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (~t[p].d) &amp;#123;
        t[lt].d = t[rt].d = t[p].d;
        t[lt].u = t[p].d * s[t[lt].r - t[lt].l] % mod;
        t[rt].u = t[p].d * s[t[rt].r - t[rt].l] % mod;
        t[p].d = -1;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r, t[p].d = -1;
    if (l == r) &amp;#123;
        t[p].u = a[l];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void ass(int p, int l, int r, int v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d = v;
        t[p].u = v * s[t[p].r - t[p].l] % mod;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid)
        ass(lt, l, r, v);
    if (r &amp;gt; mid)
        ass(rt, l, r, v);
    pushup(p);
    return;
&amp;#125;
long long ask(int p, int l, int r) &amp;#123;
    // printf(&amp;quot;p = %d, u = %lld, [%d, %d] of [%d, %d]\n&amp;quot;, p, t[p].u, t[p].l, t[p].r, l, r);
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (r &amp;lt;= mid)
        return ask(lt, l, r);
    if (l &amp;gt; mid)
        return ask(rt, l, r);
    return (ask(lt, l, r) * base[std::min(r, t[p].r) - mid] % mod + ask(rt, l, r)) % mod;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; k;
    base[0] = s[0] = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        char t;
        std::cin &amp;gt;&amp;gt; t;
        a[i] = t - &amp;#39;0&amp;#39;;
        base[i] = base[i - 1] * p % mod;
        s[i] = (s[i - 1] + base[i]) % mod;
    &amp;#125;
    bld(1, 1, n);
    for (int q = m + k; q--; ) &amp;#123;
        int op;
        std::cin &amp;gt;&amp;gt; op;
        if (op == 1) &amp;#123;
            int l, r, t;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r &amp;gt;&amp;gt; t;
            ass(1, l, r, t);
        &amp;#125;
        else &amp;#123;
            int l, r, d;
            std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r &amp;gt;&amp;gt; d;
            // if (d != r - l + 1)
            //     printf(&amp;quot;%lld / %lld\n&amp;quot;, ask(1, l, r - d), ask(1, l + d, r));
            std::cout &amp;lt;&amp;lt; ((d == r - l + 1 || ask(1, l, r - d) == ask(1, l + d, r)) ? &amp;quot;YES&amp;quot; : &amp;quot;NO&amp;quot;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;d.-misha-and-lcp-on-tree&#34;&gt;D. Misha and LCP on Tree&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5653/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5653/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个很显然的做法是，我们二分一个长度，然后在 &lt;span class=&#34;math inline&#34;&gt;\(a\to fa\)&lt;/span&gt; 上正哈希，&lt;span class=&#34;math inline&#34;&gt;\(b\to fa\)&lt;/span&gt; 上反哈希，&lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; check。&lt;/p&gt;
&lt;p&gt;笑话：本来想用倍增求 &lt;span class=&#34;math inline&#34;&gt;\(a\to fa\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b\to fa\)&lt;/span&gt; 的哈希（当然双 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 肯定是会被卡飞的），后来发现&lt;mark&gt;哈希具有可减性，我们又只需求一条链上的哈希值，直接减掉就行&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;还有一个点就是 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 求 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 级祖先，有长剖预处理的做法。&lt;a href=&#34;/20241021-1&#34;&gt;具体做法&lt;/a&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int p = 131;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; to(n + 1);
    std::vector&amp;lt;char&amp;gt; a(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1);
    std::vector&amp;lt;long long&amp;gt; base(n + 1), inv(n + 1);
    auto qkp = [](long long x, int y) &amp;#123;
        long long res = 1;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    base[0] = inv[0] = 1;
    for (int i = 1, mx = 0; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        base[i] = base[i - 1] * p % mod;
        inv[i] = qkp(base[i], mod - 2);
        if (i &amp;gt;= (1 &amp;lt;&amp;lt; mx) * 2)
            ++mx;
        to[i] = mx;
    &amp;#125;
    for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        g[x].push_back(y), g[y].push_back(x);
    &amp;#125;
    std::vector&amp;lt;long long&amp;gt; h1(n + 1), h2(n + 1);
    std::vector&amp;lt;std::array&amp;lt;int, 21&amp;gt; &amp;gt; fa(n + 1);
    std::vector&amp;lt;int&amp;gt; h(n + 1, 1), son(n + 1), dep(n + 1);
    h[0] = 0;
    std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
        h1[x] = (h1[fa[x][0]] * p % mod + a[x]) % mod;
        h2[x] = (h2[fa[x][0]] + a[x] * base[dep[x] - 1]) % mod;
        for (auto i : g[x])
            if (i != fa[x][0]) &amp;#123;
                fa[i][0] = x;
                for (int j = 1; j &amp;lt;= 20; ++j)
                    fa[i][j] = fa[fa[i][j - 1]][j - 1];
                dep[i] = dep[x] + 1;
                DFS(i);
                if (h[i] &amp;gt;= h[son[x]])
                    son[x] = i, h[x] = h[i] + 1;
            &amp;#125;
        return;
    &amp;#125;;
    dep[1] = 1, DFS(1);
    std::vector&amp;lt;int&amp;gt; top(n + 1), id(n + 1);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; anc(n + 1), des(n + 1, std::vector&amp;lt;int&amp;gt; (1));
    std::function&amp;lt;void(int, int)&amp;gt; DFS1 = [&amp;amp;](int x, int toq) &amp;#123;
        top[x] = toq;
        if (son[x])
            DFS1(son[x], toq);
        for (auto i : g[x])
            if (i != fa[x][0] &amp;amp;&amp;amp; i != son[x])
                DFS1(i, i);
        des[toq].push_back(x);
        id[x] = (int)des[toq].size() - 1;
        if (x == toq) &amp;#123;
            anc[x].push_back(x);
            for (int j = 1, now = x; j &amp;lt;= id[x]; ++j, now = fa[now][0])
                anc[x].push_back(fa[now][0]);
        &amp;#125;
        return;
    &amp;#125;;
    DFS1(1, 1);
    auto getLCA = [&amp;amp;](int x, int y) &amp;#123;
        if (dep[x] &amp;lt; dep[y])
            std::swap(x, y);
        for (int i = 20; ~i; --i)
            if (dep[fa[x][i]] &amp;gt;= dep[y])
                x = fa[x][i];
        if (x == y)
            return x;
        for (int i = 20; ~i; --i)
            if (fa[x][i] != fa[y][i])
                x = fa[x][i], y = fa[y][i];
        return fa[x][0];
    &amp;#125;;
    auto ask = [&amp;amp;](int x, int k) &amp;#123;
        assert(dep[x] - 1 &amp;gt;= k);
        int x1 = x;
        if (!k)
            return x;
        x = fa[x][to[k]];
        if (dep[x] - dep[top[x]] &amp;gt;= k - (1 &amp;lt;&amp;lt; to[k]))
            return des[top[x]][id[x] + k - (1 &amp;lt;&amp;lt; to[k])];
        return anc[top[x]][k - (1 &amp;lt;&amp;lt; to[k]) - (dep[x] - dep[top[x]])];
    &amp;#125;;
    auto dis = [&amp;amp;](int x, int y, int fa) &amp;#123;
        return dep[x] + dep[y] - 2 * dep[fa];
    &amp;#125;;
    auto gethash = [&amp;amp;](int x, int y, int f, int k) &amp;#123;
        if (!k)
            return 0ll;
        if (k &amp;lt;= dep[x] - dep[f] + 1) &amp;#123;
            f = ask(x, k - 1);
            return (h2[x] + mod - h2[fa[f][0]]) % mod * inv[dep[f] - 1] % mod;
        &amp;#125;
        long long h = (h2[x] + mod - h2[fa[f][0]]) % mod * inv[dep[f] - 1] % mod;
        k -= (dep[x] - dep[f] + 1);
        y = ask(y, (dep[y] - dep[f]) - k);
        h = (h * base[dep[y] - dep[f]] % mod + (h1[y] + mod - h1[f] * base[dep[y] - dep[f]] % mod) % mod) % mod;
        return h;
    &amp;#125;;
    int m;
    std::cin &amp;gt;&amp;gt; m;
    for (int x, y, a, b; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        int fa1 = getLCA(x, y), fa2 = getLCA(a, b), res = 0;
        for (int l = 0, r = std::min(dis(x, y, fa1), dis(a, b, fa2)) + 1, mid; l &amp;lt;= r; ) &amp;#123;
            mid = (l + r) &amp;gt;&amp;gt; 1;
            if (gethash(x, y, fa1, mid) == gethash(a, b, fa2, mid))
                res = mid, l = mid + 1;
            else
                r = mid - 1;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;a.-song-of-the-sirens&#34;&gt;A. Song of the Sirens&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5658/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5658/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;笑话：是 &lt;span class=&#34;math inline&#34;&gt;\(s_it_is_i\)&lt;/span&gt; 而不是 &lt;span class=&#34;math inline&#34;&gt;\(s_its_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们发现 &lt;span class=&#34;math inline&#34;&gt;\(s_0\)&lt;/span&gt; 很短，所以直接枚举起始位置把 &lt;span class=&#34;math inline&#34;&gt;\(s_0\)&lt;/span&gt; 和匹配串大力匹配，把空位挖出来组成新的匹配串再考虑 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的问题（因为所有 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 最开头都有一个完整的 &lt;span class=&#34;math inline&#34;&gt;\(s_0\)&lt;/span&gt;，所以可以随便选断点）。&lt;/p&gt;
&lt;p&gt;我们知道 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的下标是一个自底向上从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的满二叉树的中序遍历，其中 &lt;mark&gt;&lt;span class=&#34;math inline&#34;&gt;\(t_1\)&lt;/span&gt; 间隔一位出现；于是我们仿照对 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的处理方式，再把 &lt;span class=&#34;math inline&#34;&gt;\(t_1\)&lt;/span&gt; 挖掉。注意到此时 &lt;span class=&#34;math inline&#34;&gt;\(t_2\)&lt;/span&gt; 又成为二叉树最底层，间隔一位出现，这就变成了一个 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log n)\)&lt;/span&gt; 递归的问题&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;至于答案，当 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 被删空时，假设删掉的最后一个元素为 &lt;span class=&#34;math inline&#34;&gt;\(t_p\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的出现次数即为二叉树中 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 层点数，为 &lt;span class=&#34;math inline&#34;&gt;\(2^{k-p}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;有一个细节，就是如果当前删到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 了，&lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的长度只剩 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，就会有一个很尴尬的问题——这个元素不一定就是 &lt;span class=&#34;math inline&#34;&gt;\(t_i\)&lt;/span&gt;，而应该是 &lt;span class=&#34;math inline&#34;&gt;\(\{j \mid j\ge i\land t_j=t_i\}\)&lt;/span&gt;。统计 &lt;span class=&#34;math inline&#34;&gt;\(t_{i\sim k}\)&lt;/span&gt; 中值为 &lt;span class=&#34;math inline&#34;&gt;\(t_i\)&lt;/span&gt; 的元素个数（前缀和），乘上对应的层数即可。这个可以用一点小技巧搞定，前缀和时忽略 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 乘上 &lt;span class=&#34;math inline&#34;&gt;\(k=n\)&lt;/span&gt; 时的系数，统计答案时乘上 &lt;span class=&#34;math inline&#34;&gt;\(2^{n-k}\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;不是，那我缺的哈希这块谁来补啊？？？&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;sirens1.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, q, m;
    std::string s;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q &amp;gt;&amp;gt; s;
    s = &amp;#39;\0&amp;#39; + s, m = (int)s.length() - 1;
    std::vector&amp;lt;char&amp;gt; t(n + 1);
    std::vector&amp;lt;long long&amp;gt; base(n + 1), inv(n + 1);
    std::vector&amp;lt;std::array&amp;lt;long long, 26&amp;gt; &amp;gt; a(n + 1);
    auto qkp = [](long long x, int y) &amp;#123;
        long long res = 1ll;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    base[0] = 1ll, inv[0] = 1ll, inv[1] = qkp(2, mod - 2);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; t[i];
        base[i] = base[i - 1] * 2 % mod;
        if (i != 1)
            inv[i] = inv[i - 1] * inv[1] % mod;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        a[i] = a[i - 1], (a[i][t[i] - &amp;#39;a&amp;#39;] += base[n - i]) %= mod;
    for (int k; q--; ) &amp;#123;
        std::string p;
        std::cin &amp;gt;&amp;gt; k &amp;gt;&amp;gt; p;
        p = &amp;#39;\0&amp;#39; + p;
        long long res = 0;
        int l = (int)p.length() - 1;
        std::vector&amp;lt;char&amp;gt; u;
        std::function&amp;lt;void(int, std::vector&amp;lt;char&amp;gt; &amp;amp;)&amp;gt; calc = [&amp;amp;](int x, std::vector&amp;lt;char&amp;gt; &amp;amp;p) &amp;#123;
            int m = (int)p.size() - 1;
            if (m == 0) &amp;#123;
                // puts(&amp;quot;# 45&amp;quot;);
                // printf(&amp;quot;0, += %lld\n&amp;quot;, base[k - x + 1]);
                (res += base[k - x + 1]) %= mod;
                return;
            &amp;#125;
            if (x &amp;gt; k)
                return;
            if (m == 1) &amp;#123;
                // puts(&amp;quot;# 50&amp;quot;);
                // printf(&amp;quot;1, += %lld(%lld)\n&amp;quot;, (a[k][p[1] - &amp;#39;a&amp;#39;] + mod - a[x - 1][p[1] - &amp;#39;a&amp;#39;]) % mod * inv[n - k] % mod, inv[n - k] % mod);
                (res += (a[k][p[1] - &amp;#39;a&amp;#39;] + mod - a[x - 1][p[1] - &amp;#39;a&amp;#39;]) % mod * inv[n - k] % mod) %= mod;
                return;
            &amp;#125;
            bool flag0 = 1, flag1 = 1;
            std::vector&amp;lt;char&amp;gt; t0(1), t1(1);
            for (int i = 1; i &amp;lt;= m; ++i)
                if (!(i &amp;amp; 1)) &amp;#123;
                    if (flag0)
                        t0.push_back(p[i]);
                    flag1 &amp;amp;= (p[i] == t[x]);
                &amp;#125;
                else &amp;#123;
                    if (flag1)
                        t1.push_back(p[i]);
                    flag0 &amp;amp;= (p[i] == t[x]);
                &amp;#125;
            if (flag0)
                calc(x + 1, t0);
            if (flag1)
                calc(x + 1, t1);
            return;
        &amp;#125;;
        for (int i = 1; i &amp;lt;= m + 1; ++i) &amp;#123;
            std::vector&amp;lt;char&amp;gt;(1).swap(u);
            for (int j = i, now = 1; now &amp;lt;= l; ++now) &amp;#123;
                if (j == m + 1)
                    j = 1, u.push_back(p[now]);
                else if (p[now] != s[j])
                    goto nosol;
                else
                    ++j;
            &amp;#125;
            // printf(&amp;quot;u: &amp;quot;);
            // for (int i = 1; i &amp;lt; (int)u.size(); ++i)
            //     std::cout &amp;lt;&amp;lt; u[i];
            // puts(&amp;quot;&amp;quot;);
            calc(1, u);
        nosol: ;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;b.-prefix-of-suffixes&#34;&gt;B. Prefix of Suffixes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5658/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5658/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还是太科幻了。哦哦 border 我的 border。&lt;/p&gt;
&lt;h3 id=&#34;法一&#34;&gt;法一&lt;/h3&gt;
&lt;p&gt;考虑每次增量，若加入 &lt;span class=&#34;math inline&#34;&gt;\(S_i\)&lt;/span&gt; 后有 &lt;span class=&#34;math inline&#34;&gt;\(z_j\)&lt;/span&gt; 的值增加 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，那么这对 &lt;span class=&#34;math inline&#34;&gt;\((i, j)\)&lt;/span&gt; 就会贡献 &lt;span class=&#34;math inline&#34;&gt;\(A_j\cdot B_i\)&lt;/span&gt; 的增量；&lt;mark&gt;反之，&lt;span class=&#34;math inline&#34;&gt;\(z_j\)&lt;/span&gt; 在以后也不会增加&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;我们维护当前没有确定下来的所有 &lt;span class=&#34;math inline&#34;&gt;\(z_j\)&lt;/span&gt;，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 暴力 check &lt;span class=&#34;math inline&#34;&gt;\(z_j\)&lt;/span&gt; 是否确定并更新答案，&lt;strong&gt;因为数据比较弱&lt;/strong&gt;，在 CF 神机上跑得飞快 &lt;img src=&#34;/em/dy.gif&#34; /&gt; 但是 QOJ 上死活过不了 &lt;img src=&#34;/em/ll.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    long long res = 0, s = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; now;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(n + 1), t(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; t[i] &amp;gt;&amp;gt; a[i] &amp;gt;&amp;gt; b[i];
        t[i] = (res + t[i]) % n;
        if (t[i] == t[1])
            s += b[i], now.push_back(i);
        std::vector&amp;lt;int&amp;gt; g(std::move(now));
        for (auto j : g)
            if (t[i] == t[i - j + 1])
                now.push_back(j);
            else
                s -= b[j];
        res += a[i] * s;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h3 id=&#34;法二&#34;&gt;法二&lt;/h3&gt;
&lt;p&gt;依然考虑增量。&lt;mark&gt;&lt;span class=&#34;math inline&#34;&gt;\(z_j\)&lt;/span&gt; 增加 &lt;span class=&#34;math inline&#34;&gt;\(\iff S_{j\to i}\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(S_{1\sim i}\)&lt;/span&gt; 的一个 border&lt;/mark&gt;。考虑对于每一个 &lt;span class=&#34;math inline&#34;&gt;\(S_i\)&lt;/span&gt;，border 的组成。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(S_1=S_i\)&lt;/span&gt;，那么将会新增一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的 border。&lt;/li&gt;
&lt;li&gt;对于在 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 处合法的 border &lt;span class=&#34;math inline&#34;&gt;\(S_{j\sim i-1}\)&lt;/span&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(S_i=S_{i-j+1}\)&lt;/span&gt;，则该 border 仍合法；否则非法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们的法一其实相当于是暴力 check 了所有合法 border 是否仍然合法，但这显然最坏是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 的。我们考虑从 border 角度优化一下。&lt;/p&gt;
&lt;p&gt;我们发现，比如说 &lt;span class=&#34;math inline&#34;&gt;\(\texttt{abababa + b}\)&lt;/span&gt;，我们会进行很多次不必要的 check，当然这个时候我们会本能大力跳 fail，但是这里有一个 &lt;a href=&#34;https://www.luogu.com/article/e08ebmz6&#34;&gt;border 的等差数列性质&lt;/a&gt;，若 &lt;span class=&#34;math inline&#34;&gt;\(x+1\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 能够匹配，那么与 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 同属一个等差数列的所有 &lt;span class=&#34;math inline&#34;&gt;\(x&amp;#39;+1\)&lt;/span&gt; 都应和 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 匹配。&lt;/p&gt;
&lt;p&gt;对于正在 check 的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，如果 check 成功则跳到上一条链的链尾；否则跳到链头。总的复杂度是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 的。找一下和每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 匹配不了的第一个链头，甚至可以因为某些我太菜了所以不知道的不明原因整到线性。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    long long res = 0, s = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), b(n + 1), t(n + 1), ne(n + 1), to(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; t[i] &amp;gt;&amp;gt; a[i] &amp;gt;&amp;gt; b[i];
        t[i] = (res + t[i]) % n;
        if (i == 1)
            s += b[i], res = (long long)a[i] * b[i];
        else &amp;#123;
            int j = ne[i - 1];
            for (; j &amp;amp;&amp;amp; t[j + 1] != t[i]; j = ne[j]);
            if (t[j + 1] == t[i])
                ++j;
            ne[i] = j;
            if (t[i] == t[1])
                s += b[i];
            to[i - 1] = (t[ne[i - 1] + 1] == t[i] ? to[ne[i - 1]] : ne[i - 1]);
            for (int j = i - 1; j; )
                if (t[j + 1] == t[i])
                    j = to[j];
                else
                    for (int at = to[j]; j != at; s -= b[i - j], j = ne[j]);
            res += a[i] * s;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;c.-matching&#34;&gt;C. Matching&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5658/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5658/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们发现，如果我们直接要 check 一段 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，感觉不太好整。&lt;/p&gt;
&lt;p&gt;然后考虑这么一个问题，假如我们通过神秘方法让我们每次 check 的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="哈希" />
        <category term="线段树" />
        <category term="KMP" />
        <category term="border" />
        <updated>2024-10-21T00:32:59.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20241017/</id>
        <title>模拟赛</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20241017/"/>
        <content type="html">&lt;p&gt;好消息：会简单数学题 &lt;img src=&#34;/em/dy.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;更好的消息：忘取模了 &lt;img src=&#34;/em/dy.gif&#34; /&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-distorted&#34;&gt;A. distorted&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5611/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5611/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑最多需要多少个元素。最坏情况是选取四个角的元素，已经可以覆盖整个矩阵。进一步考虑感性反证发现无论如何都选不出来五个，故最多选择四个。&lt;/p&gt;
&lt;p&gt;我们发现，选取中间一个就可以覆盖整个矩阵。扩展一下，选择中间列就可以覆盖上 / 下半个矩阵，选择中间行就可以覆盖左 / 右半个矩阵。剩下的选择过后只能保证照顾到对应的 1/4 矩阵且一定不会完全覆盖其他的 1/4 矩阵。&lt;/p&gt;
&lt;p&gt;我们发现，中心元素地位高于中间行 / 列元素高于左上、左下、右上、右下元素。由此出发讨论选择元素的个数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 个：选择中心元素。&lt;/li&gt;
&lt;li&gt;2 个：在中间行的左右两边各选一个 / 在中间列的上下两边各选一个。&lt;/li&gt;
&lt;li&gt;3 个：选一个中间行 / 列 + 两个其他元素，或两个中间行 / 列 + 一个其他元素。&lt;/li&gt;
&lt;li&gt;4 个：左上、左下、右上、右下各选一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;统计各个方向的最小值，选最小组合即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
#define putchar
const long long inf = 0x3f3f3f3f;
int main() &amp;#123;
    freopen(&amp;quot;distorted.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;distorted.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::cin &amp;gt;&amp;gt; n;
        long long to = inf, u = inf, d = inf, l = inf, r = inf, q = inf, z = inf, p = inf, m = inf;
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                long long x;
                std::cin &amp;gt;&amp;gt; x;
                if (i * 2 - 1 == n &amp;amp;&amp;amp; j * 2 - 1 == n)
                    to = x;
                else if (i * 2 - 1 == n &amp;amp;&amp;amp; j * 2 - 1 &amp;lt; n)
                    l = std::min(l, x);
                else if (i * 2 - 1 == n)
                    r = std::min(r, x);
                else if (i * 2 - 1 &amp;lt; n &amp;amp;&amp;amp; j * 2 - 1 == n)
                    u = std::min(u, x);
                else if (j * 2 - 1 == n)
                    d = std::min(d, x);
                else if (i * 2 - 1 &amp;lt; n &amp;amp;&amp;amp; j * 2 - 1 &amp;lt; n)
                    q = std::min(q, x);
                else if (i * 2 - 1 &amp;lt; n)
                    p = std::min(p, x);
                else if (j * 2 - 1 &amp;lt; n)
                    z = std::min(z, x);
                else
                    m = std::min(m, x);
            &amp;#125;
        std::cout &amp;lt;&amp;lt; std::min(&amp;#123; to, l + r, u + d, l + u + m, l + d + p, r + u + z, r + d + q, u + z + m, d + q + p, l + p + m, r + q + z, q + p + z + m &amp;#125;) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-fate&#34;&gt;B. fate&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5611/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5611/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;诈骗题。对于前半段，考虑取差分数组 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，容易发现如果直接在差分数组上做减法，一定满足后面减得不比前面少。故只要满足差分数组每一项至少为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 即可，答案为 &lt;span class=&#34;math inline&#34;&gt;\(\prod {i\le p} a_i - a_{i-1} + 1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;对于后半段，我们考虑转化成和前半段相似的问题，将后半段翻转，同样取差分数组，则此时在该差分数组上满足后面减得不比前面少，同时需要满足差分数组每一项至多为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，前面的所有项初始为负，操作为减，自然满足；但第 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 项在把前面减去的全部加上后不一定满足。故前面最多减去 &lt;span class=&#34;math inline&#34;&gt;\(d_p\)&lt;/span&gt;，随便在哪里减都无所谓，组合意义一下，就是无标号球放有标号盒子可空放可不放，插板得答案为 &lt;span class=&#34;math inline&#34;&gt;\(\displaystyle {-d_p + n - p\choose n - p}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;前后乘起来即为答案。注意不要在最后一步乘起来的时候忘记取模，否则你会获得 76pts 的高分 &lt;img src=&#34;/em/xk.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 998244353;
int main() &amp;#123;
    freopen(&amp;quot;fate.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;fate.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
    int n, m;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::cin &amp;gt;&amp;gt; m;
    long long res = 1;
    for (int i = 1; i &amp;lt; m; ++i) &amp;#123;
        auto x = a[i] - a[i - 1];
        (res *= x + 1) %= mod;
    &amp;#125;
    auto qkp = [](long long x, int y) &amp;#123;
        long long res = 1;
        for (; y; (x *= x) %= mod, y &amp;gt;&amp;gt;= 1)
            if (y &amp;amp; 1)
                (res *= x) %= mod;
        return res;
    &amp;#125;;
    auto C = [&amp;amp;](int n, int m) &amp;#123;
        long long res = 1ll;
        for (int i = n; i &amp;gt; n - m; --i)
            (res *= i) %= mod;
        for (int i = m; i; --i)
            (res *= qkp(i, mod - 2)) %= mod;    
        return res;
    &amp;#125;;
    if (m != n)
        (res *= C(a[m + 1] - a[m] + n - m, n - m)) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-abstruse&#34;&gt;C. abstruse&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P9731&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P9731&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意到有挺高的一档 &lt;span class=&#34;math inline&#34;&gt;\(S=2\)&lt;/span&gt; 的分，考虑其启示意义。&lt;/p&gt;
&lt;p&gt;我们对于一对 &lt;span class=&#34;math inline&#34;&gt;\((a_i, b_i)\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(b_i\)&lt;/span&gt; 间连边，则原问题转化为给无向图的每条边选择方向，使对于每个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(|in_x-out_x|\le 1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们知道对于一条欧拉回路，有对于任意 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(in_x=out_x\)&lt;/span&gt;。然后这个时候为了把问题转化成欧拉回路问题我们建一个虚点朝度数为奇的点连条边然后跑欧拉回路即可。&lt;/p&gt;
&lt;p&gt;至于 &lt;span class=&#34;math inline&#34;&gt;\(S=2^k\)&lt;/span&gt;，就是在明示分治。即对于任意 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，要求其在前后 &lt;span class=&#34;math inline&#34;&gt;\(2^{k-1}\)&lt;/span&gt; 次出现次数相差不超过 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。注意到非常幸福的有前后两个部分大小相等，又有一个天才的建图，&lt;mark&gt;即在每个点和自己所属的行连边，然后跑欧拉回路，出边表示选前半部分，入边表示选后半部分，这样就保证了一行中各有 &lt;span class=&#34;math inline&#34;&gt;\(2^{k-1}\)&lt;/span&gt; 个选前后半部分，也保证了每个点在前后半边出现的次数相差不超过 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。对于后面一个性质，分治最终可得到点在每一列出现次数相差不超过 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;打个当前弧优化然后注意计算细节复杂度然后多卡几（十）遍就过了 &lt;img src=&#34;/em/dy.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
namespace fastIO &amp;#123;
const int LEN = (1 &amp;lt;&amp;lt; 20);
#ifdef ONLINE_JUDGE
int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF;
        p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
bool read(int &amp;amp;x) &amp;#123;
    x = 0;
    bool f = 0;
    char ch = nec();
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
void print(int x) &amp;#123;
    if (x &amp;lt; 0)
        putchar(&amp;#39;-&amp;#39;), x = -x;
    if (x &amp;gt;= 10) print(x / 10);
    putchar(x % 10 + &amp;#39;0&amp;#39;);
    return;
&amp;#125;
void print(int x, char ch) &amp;#123;
    print(x), putchar(ch);
    return;
&amp;#125;
&amp;#125; using namespace fastIO;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    freopen(&amp;quot;abstruse.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;abstruse.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#else
    freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m, k;
    read(n), read(m), read(k);
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; a(n + 1, std::vector&amp;lt;int&amp;gt; (m + 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= m; ++j)
            read(a[i][j]);
    std::vector&amp;lt;int&amp;gt; to(k + n + 1), tag(n * m + n + k + 1);
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(k + n + 1); 
    std::function&amp;lt;void(int, int)&amp;gt; calc = [&amp;amp;](int l, int r) &amp;#123;
        if (l + 1 == r) &amp;#123;
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                g[a[i][l]].emplace_back(a[i][r], i);
                g[a[i][r]].emplace_back(a[i][l], i);
            &amp;#125;
            int cnt = n;
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                if ((int)g[a[i][l]].size() &amp;amp; 1)
                    g[0].emplace_back(a[i][l], ++cnt), g[a[i][l]].emplace_back(0, cnt);
                if ((int)g[a[i][r]].size() &amp;amp; 1)
                    g[0].emplace_back(a[i][r], ++cnt), g[a[i][r]].emplace_back(0, cnt);
            &amp;#125;
            std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
                for (int i = to[x]; i &amp;lt; (int)g[x].size(); i = to[x]) &amp;#123;
                    to[x] = i + 1;
                    auto [v, id] = g[x][i];
                    if (!tag[id]) &amp;#123;
                        tag[id] = 1;
                        if (x &amp;amp;&amp;amp; v)
                            a[id][l] = x, a[id][r] = v;
                        DFS(v);
                    &amp;#125;
                &amp;#125;
                return;
            &amp;#125;;
            DFS(0);
            for (int i = 1; i &amp;lt;= n; ++i)
                DFS(a[i][l]), DFS(a[i][r]);
            to[0] = 0, g[0].clear();
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                to[a[i][l]] = 0, g[a[i][l]].clear();
                to[a[i][r]] = 0, g[a[i][r]].clear();
            &amp;#125;
            std::fill(tag.begin() + 1, tag.begin() + cnt + 1, 0);
            return;
        &amp;#125;
        int mid = (l + r) &amp;gt;&amp;gt; 1, cnt = 0;
        std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; g(k + n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = l; j &amp;lt;= r; ++j) &amp;#123;
                g[a[i][j]].emplace_back(i + k, ++cnt);
                g[i + k].emplace_back(a[i][j], cnt);
            &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = l; j &amp;lt;= r; ++j)
                if ((int)g[a[i][j]].size() &amp;amp; 1)
                    g[0].emplace_back(a[i][j], ++cnt), g[a[i][j]].emplace_back(0, cnt);
        std::vector&amp;lt;int&amp;gt; L(n + 1, l - 1), R(n + 1, r + 1);
        std::function&amp;lt;void(int)&amp;gt; DFS = [&amp;amp;](int x) &amp;#123;
            for (int i = to[x]; i &amp;lt; (int)g[x].size(); i = to[x]) &amp;#123;
                to[x] = i + 1;
                auto [v, id] = g[x][i];
                if (!tag[id]) &amp;#123;
                    tag[id] = 1;
                    if (x &amp;amp;&amp;amp; v) &amp;#123;
                        if (v &amp;lt;= k)
                            a[x - k][++L[x - k]] = v;
                        else
                            a[v - k][--R[v - k]] = x;
                    &amp;#125;
                    DFS(v);
                &amp;#125;
            &amp;#125;
            return;
        &amp;#125;;
        DFS(0);
        for (int i = 1; i &amp;lt;= n; ++i)
            DFS(i + k);
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = l; j &amp;lt;= r; ++j)
                DFS(a[i][j]);
        to[0] = 0, g[0].clear();
        for (int i = 1; i &amp;lt;= n; ++i)
            to[i + k] = 0, g[i + k].clear();
        for (int i = 1; i &amp;lt;= n; ++i)
            for (int j = l; j &amp;lt;= r; ++j)
                to[a[i][j]] = 0, g[a[i][j]].clear();
        std::fill(tag.begin() + 1, tag.begin() + cnt + 1, 0);
        calc(l, mid), calc(mid + 1, r);
        return;
    &amp;#125;;
    calc(1, m);
    for (int i = 1; i &amp;lt;= n; ++i, putchar(&amp;#39;\n&amp;#39;))
        for (int j = 1; j &amp;lt;= m; ++j)
            print(a[i][j], &amp;#39; &amp;#39;);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="分治" />
        <category term="欧拉回路" />
        <updated>2024-10-16T12:32:34.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240906/</id>
        <title>动态规划 10 题 - I</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240906/"/>
        <content type="html">&lt;p&gt;现在是 10 题。虽然看着很掉价，但是写够了 10 就改成 20 题。以此类推，免得我摆烂（）&lt;/p&gt;
&lt;p&gt;自用向，不写太详细，把破题点写出来就差不多了。哦哦这里的破题是动词不是名词。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;字符合并&#34;&gt;1. 字符合并&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3736&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P3736&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(01\)&lt;/span&gt; 串和 &lt;span class=&#34;math inline&#34;&gt;\(2^k\)&lt;/span&gt; 条规则，第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 条规则形如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于序列中的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位二进制数 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，可以将它合并为 &lt;span class=&#34;math inline&#34;&gt;\(c(c\in\{0,1\})\)&lt;/span&gt;，并产生 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的价值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进行任意次合并，求出能取得的最大总价值。&lt;span class=&#34;math inline&#34;&gt;\(n\le 300,k\le 8\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;状压&lt;/strong&gt;，&lt;strong&gt;区间 DP&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;注意到 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 只有 &lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt;，独特的输入方式也引导我们注意到状态数为 &lt;span class=&#34;math inline&#34;&gt;\(10^2\)&lt;/span&gt; 级别。合并的背景又让我们本能想到区间 DP，所以刚好盲猜这题是个 &lt;span class=&#34;math inline&#34;&gt;\(O(2^k\times n^2)\)&lt;/span&gt; 的区间状压 DP。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;然后我觉得最神的一个地方是什么呢？最后的答案一定是一个长度小于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的串，&lt;mark&gt;每位展开还原，可以知道，每个合并操作选取的区间可能包含但不相交。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;看起来很蠢很显然，但这是我们 &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 区间 DP 的基础啊（（（&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后我们区间 DP 套路，枚举对于 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 最左边一位，然后就可以开始大力转移了。&lt;/p&gt;
&lt;p&gt;但是这里我们会发现，这一位原本的样子有点多，可以是任何一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(1 + d\times (k-1)\)&lt;/span&gt; 的数，所以只能再来一层 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac nk\)&lt;/span&gt; 的枚举，极限情况是个有点难绷的 3e9，作为正解只能说这个数据范围的提示性有点令人难评了。&lt;/p&gt;
&lt;p&gt;实现着实现着把自己整懵了：&lt;code&gt;00000&lt;/code&gt; 和 &lt;code&gt;0&lt;/code&gt; 压出来都是 &lt;code&gt;0&lt;/code&gt;，但二者代表的含义显然不同，又无法简单区别。但其实&lt;mark&gt;长度为 &lt;span class=&#34;math inline&#34;&gt;\(1+d\times (k-1)\)&lt;/span&gt; 的区间和长度为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的最终结果是一一对应的，所以在我们设计的包含了区间作右端点的状态中，压出来的就是我们想要的那个。&lt;/mark&gt;&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;这里的实现比&lt;strong&gt;所有&lt;/strong&gt;我找到的题解都更像人打出来的。导致我想对比疗法都找不到合适的代码 &lt;img src=&#34;/em/lh.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;换言之，这最像是一份通常的区间 DP 代码，不存在其他题解中乱七八糟的填表啊相互影响啊之类的恶心 feature。&lt;/p&gt;
&lt;p&gt;sto rybp orz&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 305;
const int maxm = (1 &amp;lt;&amp;lt; 8) + 5;
char a[maxn];
int c[maxm], w[maxm];
long long f[maxn][maxn][maxm];
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#else
    freopen(&amp;quot;in.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;out.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    int siz = (1 &amp;lt;&amp;lt; k), si = (1 &amp;lt;&amp;lt; (k - 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = 0; i &amp;lt; siz; ++i)
        std::cin &amp;gt;&amp;gt; c[i] &amp;gt;&amp;gt; w[i];
    memset(f, -0x3f, sizeof(f));
    for (int l = 1; l &amp;lt; k; ++l)
        for (int i = 1; i &amp;lt;= n - l + 1; ++i) &amp;#123;
            int j = i + l - 1, now = 0;
            for (int p = i; p &amp;lt;= j; ++p)
                now = now * 2 + a[p] - &amp;#39;0&amp;#39;;
            f[i][j][now] = 0;
        &amp;#125;
    for (int i = 1; i &amp;lt;= n - k + 1; ++i) &amp;#123;
        int now = 0;
        for (int j = i; j &amp;lt;= i + k - 1; ++j)
            now = now * 2 + a[j] - &amp;#39;0&amp;#39;;
        f[i][i + k - 1][c[now]] = w[now];
    &amp;#125;
    for (int l = k + 1; l &amp;lt;= n; ++l)
        for (int i = 1; i &amp;lt;= n - l + 1; ++i) &amp;#123;
            int j = i + l - 1;
            for (int p = i; p &amp;lt; j; p += k - 1) &amp;#123;
                for (int q = 0; q &amp;lt; si; ++q)
                    if (!(q &amp;gt;&amp;gt; ((l - 1) % (k - 1) + 1)))
                        f[i][j][q] = std::max(f[i][j][q], f[i][p][q &amp;gt;&amp;gt; ((l - 1) % (k - 1))] + f[p + 1][j][q &amp;amp; ((1 &amp;lt;&amp;lt; ((l - 1) % (k - 1))) - 1)]);
                if (l % (k - 1) == 1 || k == 2)
                    for (int q = 0; q &amp;lt; siz; ++q)
                        f[i][j][c[q]] = std::max(f[i][j][c[q]], f[i][p][q &amp;gt;&amp;gt; (k - 1)] + f[p + 1][j][q &amp;amp; ((1 &amp;lt;&amp;lt; (k - 1)) - 1)] + w[q]);
            &amp;#125;
        &amp;#125;
    std::cout &amp;lt;&amp;lt; *std::max_element(f[1][n], f[1][n] + si) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;其实一开始挺担心会不会因为写博客影响做题时间之类的。&lt;/p&gt;
&lt;p&gt;直到发现我可以看知乎看一个上午然后代码动都不动一下 &lt;img src=&#34;/em/lh.gif&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;mod-mod-mod&#34;&gt;2. Mod Mod Mod&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/889/problem/E&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/889/problem/E&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;，对于所有非负整数 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 定义 &lt;span class=&#34;math inline&#34;&gt;\(f(x,n)=x\bmod a_n\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(f(x,i)=x\bmod a_i+f(x\bmod a_i,i+1)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;求 &lt;span class=&#34;math inline&#34;&gt;\(f(x,1)\)&lt;/span&gt; 最大值。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;技巧 / 特殊性质类 DP&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;小神题。注意到题意可以转化为，找到一个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，最大化：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
x\bmod a_1 + x\bmod a_1\bmod a_2 + \cdots + x\bmod a_1\bmod a_2\bmod\cdots\bmod a_n.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;简称 &lt;span class=&#34;math inline&#34;&gt;\(x\bmod a_1\bmod a_2\bmod \cdots\bmod a_i\)&lt;/span&gt; 的值为 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这个时候我们不难注意到，&lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 肯定是&lt;mark&gt;单调不升&lt;/mark&gt;的。形象化地，整个 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 序列肯定是由若干个单调下降的段组成的。并且，&lt;mark&gt;必定存在至少一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(f_i = a_i-1\)&lt;/span&gt;，否则可以将所有 &lt;span class=&#34;math inline&#34;&gt;\(f_i\gets f_i+1\)&lt;/span&gt;，同时 &lt;span class=&#34;math inline&#34;&gt;\(\sum f\gets (\sum f) + n\)&lt;/span&gt;&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;这启示我们关注 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 的值域。假设已经确定了 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 序列的一个前缀 &lt;span class=&#34;math inline&#34;&gt;\(f_1\sim i\)&lt;/span&gt;，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(0\le k\le f_{\min}\)&lt;/span&gt;（注意由于单调不降，&lt;span class=&#34;math inline&#34;&gt;\(f_{\min} = f_i\)&lt;/span&gt;），我们可以将所有 &lt;span class=&#34;math inline&#34;&gt;\(f_j\gets f_j-k\)&lt;/span&gt;，得到一个新的合法的 &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;_{1\sim i}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;形象化地，将 &lt;span class=&#34;math inline&#34;&gt;\(f_{1\sim i}\)&lt;/span&gt; 想象为一个逐渐降低的柱状图，任意切去了一个高度的底部，并且这个高度不高于最矮的元素（即第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个元素）。&lt;/p&gt;
&lt;p&gt;这时候有一个很美妙的性质，就是我们&lt;mark&gt;对于切之前和切之后的柱状图，其 &lt;strong&gt;最矮元素以上的部分&lt;/strong&gt; 长得完全相同&lt;/mark&gt;。然后就是神中神之 DP 状态设计。很难想象是在什么样的精神状态下凑出来这种神奇状态的，可能是某种我不了解的 trick？&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i, j}\)&lt;/span&gt; 表示对于前缀 &lt;span class=&#34;math inline&#34;&gt;\(f_{1, i}\)&lt;/span&gt;，当切去的高度为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim j\)&lt;/span&gt; 时，&lt;strong&gt;最矮元素以上的部分&lt;/strong&gt; 的和都为 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i, j}\)&lt;/span&gt;。那么易得 &lt;span class=&#34;math inline&#34;&gt;\(\sum f_{1\sim i}=j\times i + dp_{i, j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑转移。假设已知所有 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i - 1, j}\)&lt;/span&gt;，需转移到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，我们有三种转移路径：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(j &amp;lt; a_i\)&lt;/span&gt;：&lt;/p&gt;
对 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 取模取不动，不会产生任何影响。&lt;span class=&#34;math inline&#34;&gt;\(dp_{i, j}\gets dp_{i - 1, j}\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(j\ge a_i\)&lt;/span&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;让 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 承担 &lt;span class=&#34;math inline&#34;&gt;\(f_i=a_i-1\)&lt;/span&gt; 的责任。我们从 &lt;span class=&#34;math inline&#34;&gt;\(0\sim j\)&lt;/span&gt; 中找到一个满足 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\bmod a_i=a_i-1\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;\)&lt;/span&gt; 肯定是越大越好，故 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;#39;=(\left\lfloor \dfrac {j}{a_i}\right\rfloor-1)\times a_i+(a_i-1)\)&lt;/span&gt;。&lt;/p&gt;
此时便有 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i, a_i-1}\gets dp_{i - 1, j&amp;#39;} + [j&amp;#39; - (a_i-1)]\times (i-1)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;盲猜 &lt;span class=&#34;math inline&#34;&gt;\(0\sim i - 1\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(i+1\sim n\)&lt;/span&gt; 中会出现承担 &lt;span class=&#34;math inline&#34;&gt;\(f_{i&amp;#39;}=a_{i&amp;#39;-1}\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;\)&lt;/span&gt;，故按照 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 取最大来转移。&lt;/p&gt;
&lt;p&gt;此时有 &lt;span class=&#34;math inline&#34;&gt;\(dp_{i, j\bmod a_i}=dp_{i-1,j}+(j-j\bmod a_i)\times (i-1)\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;答案即为 &lt;span class=&#34;math inline&#34;&gt;\(\max\{j\times n+dp_{n, j}\}\)&lt;/span&gt;。由于不存在 &lt;span class=&#34;math inline&#34;&gt;\(f_i=a_i-1\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 肯定比存在的要劣，所以我们肯定选到的是正确的答案。&lt;/p&gt;
&lt;p&gt;注意到每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 只会新增 &lt;span class=&#34;math inline&#34;&gt;\(a_i-1\)&lt;/span&gt; 一个状态，故状态总数为 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。把 &lt;span class=&#34;math inline&#34;&gt;\(dp\)&lt;/span&gt; 开成 map 就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 地解决问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#else
    freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;long long&amp;gt; a(n + 1);
    std::map&amp;lt;long long, long long&amp;gt; t;
    std::cin &amp;gt;&amp;gt; a[1];
    t[a[1] - 1] = 0;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        for (;;) &amp;#123;
            auto p = t.lower_bound(a[i]);
            if (p == t.end())
                break;
            long long j = p-&amp;gt;first, f = p-&amp;gt;second;
            t[j % a[i]] = std::max(t[j % a[i]], f + (j - j % a[i]) * (i - 1));
            if (j &amp;gt;= a[i]) &amp;#123;
                j = (j / a[i] - 1) * a[i] + a[i] - 1;
                t[a[i] - 1] = std::max(t[a[i] - 1], f + (j - (a[i] - 1)) * (i - 1));
            &amp;#125;
            t.erase(p);
        &amp;#125;
    &amp;#125;
    long long res = 0;
    for (auto i : t)
        res = std::max(res, i.first * n + i.second);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;stalinsort-algorithm&#34;&gt;3. StalinSort Algorithm&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://qoj.ac/problem/1456&#34; class=&#34;uri&#34;&gt;https://qoj.ac/problem/1456&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定排列 &lt;span class=&#34;math inline&#34;&gt;\(A_{1\sim n}\)&lt;/span&gt;。从 &lt;span class=&#34;math inline&#34;&gt;\(i=2\)&lt;/span&gt; 开始往右扫，每一步执行以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(A_i&amp;gt; A_{i-1}\)&lt;/span&gt;，什么也不做。&lt;/li&gt;
&lt;li&gt;否则，你可以删除 &lt;span class=&#34;math inline&#34;&gt;\(A_{i-1}\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt;，但要求删除后，该前缀必须单调递增。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问最少可以删除多少个数。&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你会发现&lt;mark&gt;删最少 = 留最多&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;考虑 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 能够转移到的 &lt;span class=&#34;math inline&#34;&gt;\(j(j&amp;gt;i)\)&lt;/span&gt; 需满足的条件。若令 &lt;span class=&#34;math inline&#34;&gt;\(nex_p\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 之后第一个值比 &lt;span class=&#34;math inline&#34;&gt;\(a_p\)&lt;/span&gt; 大的元素，则 &lt;span class=&#34;math inline&#34;&gt;\(j\in [nex_i, nex_{nex_i})\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(a_j&amp;gt;a_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;赛时误认为右端点为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 之后第二个值比 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 大的元素，导致完全寄掉。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;，考虑优化。&lt;mark&gt;注意到如果只有 &lt;span class=&#34;math inline&#34;&gt;\(j\in [nex_i, nex_{nex_i})\)&lt;/span&gt; 这个条件很容易用线段树维护，考虑消去 &lt;span class=&#34;math inline&#34;&gt;\(a_j&amp;gt;a_i\)&lt;/span&gt; 的影响。故考虑按 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; &lt;strong&gt;从小到大&lt;/strong&gt; 的顺序选取 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，因为当前最小的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 一定已经被刷完表了&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 5e5 + 5;
const int inf = 0x3f3f3f3f;
struct _ &amp;#123; int u, d; &amp;#125; t1[maxn &amp;lt;&amp;lt; 2];
int n, t[maxn &amp;lt;&amp;lt; 2];
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
void upd(int p, int l, int r, int x, int v) &amp;#123;
    t[p] = std::min(t[p], v);
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        upd(lt, l, mid, x, v);
    else
        upd(rt, mid + 1, r, x, v);
    return;
&amp;#125;
int ask(int p, int l, int r, int ql, int qr) &amp;#123;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr)
        return t[p];
    int mid = (l + r) &amp;gt;&amp;gt; 1, res = n + 1;
    if (ql &amp;lt;= mid)
        res = ask(lt, l, mid, ql, qr);
    if (qr &amp;gt; mid)
        res = std::min(res, ask(rt, mid + 1, r, ql, qr));
    return res;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t1[p].d) &amp;#123;
        t1[lt].u = std::max(t1[lt].u, t1[p].d);
        t1[lt].d = std::max(t1[lt].d, t1[p].d);       
        t1[rt].u = std::max(t1[rt].u, t1[p].d);
        t1[rt].d = std::max(t1[rt].d, t1[p].d);       
        t1[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void upd(int p, int l, int r, int ql, int qr, int v) &amp;#123;
    t1[p].u = std::max(t1[p].u, v);
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr) &amp;#123;
        t1[p].d = std::max(t1[p].d, v);
        return;
    &amp;#125;
    pushdown(p);
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (ql &amp;lt;= mid)
        upd(lt, l, mid, ql, qr, v);
    if (qr &amp;gt; mid)
        upd(rt, mid + 1, r, ql, qr, v);
    return;
&amp;#125;
int ask(int p, int l, int r, int x) &amp;#123;
    if (l == r)
        return t1[p].u;
    pushdown(p);
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid)
        return ask(lt, l, mid, x);
    return ask(rt, mid + 1, r, x);
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#else
    freopen(&amp;quot;sort3.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    // freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int res = 0;
    std::cin &amp;gt;&amp;gt; n;
    std::vector&amp;lt;int&amp;gt; a(n + 1), ne(n + 1), f(n + 1);
    std::fill(t + 1, t + 4 * n + 1, n + 1);
    std::fill(t1 + 1, t1 + 4 * n + 1, (_)&amp;#123; -inf, 0 &amp;#125;);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    for (int i = n; ~i; --i) &amp;#123;
        ne[i] = ask(1, 0, n, a[i] + 1, n);
        upd(1, 0, n, a[i], i);   
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; id(n + 1);
    std::iota(id.begin(), id.end(), 0);
    std::sort(id.begin(), id.end(), [&amp;amp;](int x, int y) &amp;#123; return a[x] &amp;lt; a[y]; &amp;#125;);
    f[0] = 0;
    for (int i = 0; i &amp;lt;= n; ++i) &amp;#123;
        if (i) &amp;#123;
            f[id[i]] = ask(1, 0, n, id[i]);
            res = std::max(res, f[id[i]]);
        &amp;#125;
        if (ne[id[i]] &amp;lt;= n)
            upd(1, 0, n, ne[id[i]], ne[ne[id[i]]] - 1, f[id[i]] + 1);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; n - res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;merge-triplets&#34;&gt;4. Merge Triplets&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/agc043/tasks/agc043_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/agc043/tasks/agc043_d&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(A_{1\sim 3N}=\{1, 2, \dots, 3N\}\)&lt;/span&gt;，从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 开始每 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 个数分为一组，每一组初始有一个指针指向第一个元素。执行若干次以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在所有指针指向的数中选择一个最小的，把它放到序列末（不会加入末端的组）；将原本指向它的指针后移一位，如果移出原本的组就删除这个指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问任意次操作后，可能得到多少种序列。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^3\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于要对合法的最终序列进行计数，考虑最终序列的性质。&lt;/p&gt;
&lt;p&gt;若序列中 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}&amp;lt;a_i\)&lt;/span&gt;，则说明在某一组中，值为 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 的元素下一个就是 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}\)&lt;/span&gt;。否则，因 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}\)&lt;/span&gt; 可选且比 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 小，&lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}\)&lt;/span&gt; 应排在 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 前面。&lt;/p&gt;
&lt;p&gt;否则，&lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}\)&lt;/span&gt; 既可以与 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 不在同一组，也可以是 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 的下一个元素。&lt;/p&gt;
&lt;p&gt;一组最多三个元素，也就是说，不能出现 &lt;span class=&#34;math inline&#34;&gt;\(a_i&amp;gt;a_{i+1},a_{i+2},a_{i+3}\)&lt;/span&gt; 的情况。而 &lt;span class=&#34;math inline&#34;&gt;\(N=1\)&lt;/span&gt; 时序列长度只有 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt;，这就是为什么样例一的答案为 &lt;span class=&#34;math inline&#34;&gt;\(3!\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但这个限制并不能排除所有非法情况。&lt;span class=&#34;math inline&#34;&gt;\(N=2\)&lt;/span&gt; 时暴搜我们目前限制下的解，共有 276 个，比答案中的 261 个要多，说明包含了其他非法解。&lt;/p&gt;
&lt;p&gt;暴搜输出并观察，易得这 15 个非法序列即为满足目前限制且存在 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(a_i&amp;gt;a_{i+1}\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(a_i&amp;lt;a_{i+2}\)&lt;/span&gt; 的所有序列，&lt;mark&gt;由前面的推导，必须分为三个长度为 2 的组，而我们要求的是长度为 3 的组。显然无法用前者组合得到后者&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;在我们第一个条件的限制下，必须被分到同一组的数的连续长度，只有 &lt;span class=&#34;math inline&#34;&gt;\(1,2,3\)&lt;/span&gt; 三种。而：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长度为 3 的对答案合法性无影响；&lt;/li&gt;
&lt;li&gt;而长度为 1 的既可以和 2 组为一组，也可以和其他两个 1 组为一组；&lt;/li&gt;
&lt;li&gt;长度为 2 的只能和 1 组成一组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;mark&gt;这时，我们发现所有限制都指向长度为 2 的段，其总个数不能比长度为 1 的段多。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;于是乎，上述限制可总结为两点：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;若令所有满足 &lt;span class=&#34;math inline&#34;&gt;\(a_l&amp;gt;\max\{a_{l\sim r}\}\)&lt;/span&gt; 的极大区间为一段（易证每段互不重合且覆盖全序列），那么其长度不能超过 3。&lt;/li&gt;
&lt;li&gt;其中，长度为 2 的个数不能比长度为 1 的个数多。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;mark&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, j}\)&lt;/span&gt; 表示若当前枚举的最后一段右端点为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，长度为 1 的段比长度为 2 的段多 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;最后答案即为 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j=0}^n f_{i, j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#else
    freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, mod;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; mod;
    n *= 3;
    std::vector&amp;lt;std::unordered_map&amp;lt;int, long long&amp;gt; &amp;gt; f(n + 1);
    f[0][0] = 1;
    for (int i = 0; i &amp;lt; n; ++i)
        for (auto [j, k] : f[i]) &amp;#123;
            (f[i + 1][j + 1] += k) %= mod;
            if (i + 2 &amp;lt;= n)
                (f[i + 2][j - 1] += k * (i + 1) % mod) %= mod;
            if (i + 3 &amp;lt;= n)
                (f[i + 3][j] += k * (i + 1) % mod * (i + 2) % mod) %= mod;
        &amp;#125;
    long long res = 0;
    for (int i = 0; i &amp;lt;= n; ++i)
        (res += f[n][i]) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;runaway-quail&#34;&gt;5. Runaway Quail&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://qoj.ac/problem/5978&#34; class=&#34;uri&#34;&gt;https://qoj.ac/problem/5978&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数轴上有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 只鸡，初始位置为非 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 整数 &lt;span class=&#34;math inline&#34;&gt;\(p_i\)&lt;/span&gt;，奔跑速度为 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt;。你初始在 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 位置，奔跑速度为 &lt;span class=&#34;math inline&#34;&gt;\(Y(Y&amp;gt;s_i)\)&lt;/span&gt;。你要抓到所有鸡。&lt;/p&gt;
&lt;p&gt;你可以在任意时刻调转方向；鸡总会朝着远离你的方向奔跑；当你的坐标和鸡重合时，你抓到鸡。&lt;/p&gt;
&lt;p&gt;问抓到所有鸡的最短时间（显然是个实数）。&lt;span class=&#34;math inline&#34;&gt;\(n\le 500\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;容易发现鸡的奔跑方向从始至终不会变，如果我们要从往左追变成往右追，显而易见地我们会&lt;mark&gt;在追上右边第一只鸡前经过原点&lt;/mark&gt;，反之同理。&lt;/p&gt;
&lt;p&gt;那么有一个很神奇的状态设计，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 为追上了左边速度第 &lt;span class=&#34;math inline&#34;&gt;\(1\sim i - 1\)&lt;/span&gt; 大的所有鸡和右边速度第 &lt;span class=&#34;math inline&#34;&gt;\(1\sim j - 1\)&lt;/span&gt; 大的所有鸡，然后跑回原点的最小时间，这样我们就不用记录这个非常难记录的当前位置信息，对于速度排名 &lt;span class=&#34;math inline&#34;&gt;\(\ge i,j\)&lt;/span&gt; 的所有鸡，当前是否追上我们并不关心——&lt;mark&gt;如果其位置比较远，那么我们会在后续转移中再考虑；如果其位置比较近，在解决速度排名 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;i,j\)&lt;/span&gt; 的鸡时就已经抓住&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;我们 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n)\)&lt;/span&gt; 枚举上一次反向是在抓住哪一只鸡时，然后让中间全部同向跑即可&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;也就是说，假设我们要用 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 更新 &lt;span class=&#34;math inline&#34;&gt;\(f_{k,j}\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(k&amp;lt;i\)&lt;/span&gt;），那么只需要更新抓住速度排名 &lt;span class=&#34;math inline&#34;&gt;\(i\sim k+1\)&lt;/span&gt; 中跑得最远的一只鸡所需额外时间。按速度排序后可以线性算代价。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const long double eps = 1e-12;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int v, n;
        std::cin &amp;gt;&amp;gt; v &amp;gt;&amp;gt; n;
        std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; a(n + 1);
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; a[i].first;
        for (int i = 1; i &amp;lt;= n; ++i)
            std::cin &amp;gt;&amp;gt; a[i].second;
        a.emplace_back(0, 0), ++n;
        std::sort(a.begin() + 1, a.end());
        int p = std::lower_bound(a.begin() + 1, a.end(), std::make_pair(0, 0)) - a.begin();
        std::sort(a.begin() + 1, a.begin() + p, [](std::pair&amp;lt;int, int&amp;gt; x, std::pair&amp;lt;int, int&amp;gt; y) &amp;#123; return x.second == y.second ? x.first &amp;lt; y.first : x.second &amp;gt; y.second; &amp;#125;);
        std::sort(a.begin() + p + 1, a.end(), [](std::pair&amp;lt;int, int&amp;gt; x, std::pair&amp;lt;int, int&amp;gt; y) &amp;#123; return x.second == y.second ? x.first &amp;lt; y.first : x.second &amp;lt; y.second; &amp;#125;);
        std::vector&amp;lt;std::vector&amp;lt;long double&amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;long double&amp;gt; (n + 1, 1e18));
        f[1][n] = 0.;
        auto at = [&amp;amp;](int i, long double t) &amp;#123;
            return std::fabs(a[i].first + t * a[i].second * (i &amp;lt; p ? -1 : 1));
        &amp;#125;;
        auto calc = [&amp;amp;](int i, long double t) &amp;#123;
            return at(i, t) / (v - a[i].second);
        &amp;#125;;
        // for (int i = 1; i &amp;lt;= n; ++i)
        //     printf(&amp;quot;%d: (%d, %d)\n&amp;quot;, i, a[i].first, a[i].second);
        for (int i = 1; i &amp;lt;= p; ++i)
            for (int j = n; j &amp;gt;= p; --j) &amp;#123;
                if (i == p &amp;amp;&amp;amp; j == p)
                    break;
                long double d = 0.;
                // printf(&amp;quot;[%d, %d]: %lf\n&amp;quot;, i, j, f[i][j]);
                for (int k = i; k &amp;lt; p; ++k) &amp;#123;
                    if (at(k, f[i][j]) &amp;gt;= at(i, f[i][j]) - eps)
                        d = std::max(d, calc(k, f[i][j]));
                    // printf(&amp;quot;  k1 = %d, d = %lf\n&amp;quot;, k, d);
                    f[k + 1][j] = std::min(f[k + 1][j], f[i][j] + d + (k != j - 1) * d);
                &amp;#125;
                d = 0.;
                for (int k = j; k &amp;gt; p; --k) &amp;#123;
                    if (at(k, f[i][j]) &amp;gt;= at(j, f[i][j]) - eps)
                        d = std::max(d, calc(k, f[i][j]));
                    // printf(&amp;quot;  k2 = %d, d = %lf\n&amp;quot;, k, d);
                    f[i][k - 1] = std::min(f[i][k - 1], f[i][j] + d + (k != i + 1) * d);
                &amp;#125;
            &amp;#125;
        &amp;#123;
            static int casetot = 0;
            std::cout &amp;lt;&amp;lt; &amp;quot;Case #&amp;quot; &amp;lt;&amp;lt; ++casetot &amp;lt;&amp;lt; &amp;quot;: &amp;quot;;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(9) &amp;lt;&amp;lt; f[p][p] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;the-great-marathon&#34;&gt;6. The Great Marathon&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/38/H&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/38/H&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条边的无向连通图，点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 上初始有选手 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。为每个选手任意指定终点（可重复），那么最后的排名按照最短路为第一关键字、编号为第二关键字排序。&lt;/p&gt;
&lt;p&gt;现按照排名序列分成前中后三段，记为金银铜牌；满足金牌数在 &lt;span class=&#34;math inline&#34;&gt;\([g_1,g_2]\)&lt;/span&gt; 之间，银牌数在 &lt;span class=&#34;math inline&#34;&gt;\([s_1,s_2]\)&lt;/span&gt; 之间。任意指定发牌数量和每个人的终点，问最后有多少种方案数；两个方案不同当且仅当有至少一个人拿的牌不一样。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 50,m\le 1000\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;mark&gt;&lt;span class=&#34;math inline&#34;&gt;\(n=50\)&lt;/span&gt;：可能需要考虑 &lt;span class=&#34;math inline&#34;&gt;\(n^5\)&lt;/span&gt; 做法。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;发现是 &lt;mark&gt;需要确定顺序的 DP&lt;/mark&gt;。关键位置自然在于『金银、银铜界处』。考虑钦定金牌最后一名、铜牌第一名的人选（不考虑中间的银牌是因为会出现这样那样的问题），还需要枚举他们的路程吗？并不。甚而至于，这样做会算重。&lt;/p&gt;
&lt;p&gt;考虑&lt;mark&gt;『最小化』左右两侧的金牌、铜牌可选集合&lt;/mark&gt;。强行让金牌最后一名 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的路程为 &lt;span class=&#34;math inline&#34;&gt;\(\min\{dis_{u,i}\}\)&lt;/span&gt;，最小路程小于这个值的所有元素都可以成为金牌；同时让铜牌第一名 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的路程为 &lt;span class=&#34;math inline&#34;&gt;\(\max\{dis_{v,i}\}\)&lt;/span&gt;，最大路程大于这个值的所有数都可以成为铜牌。&lt;/p&gt;
&lt;p&gt;Q1: 如果存在一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，它最小的距离也比 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的最小距离大，但实际上当 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 更大一点儿的时候，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 可以成为金牌呢？&lt;/p&gt;
&lt;p&gt;A1：这种情况在钦定 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 为最后一名的时候讨论过了。&lt;/p&gt;
&lt;p&gt;Q2：是否会算重？&lt;/p&gt;
&lt;p&gt;A2：如上所述，假如在钦定 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的时候统计了 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，那么在钦定 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的时候就不会统计 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑转移。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,u,v,j,k}\)&lt;/span&gt; 为考虑到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，金牌倒一为 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，铜牌第一为 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;，选了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个金、&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个铜的方案数。转移是 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;注意 &lt;code&gt;vector&lt;/code&gt; 要开在循环外面，不然申请空间很耗时间 /ll&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; g(n + 1, std::vector&amp;lt;int&amp;gt; (n + 1, inf));
    for (int x, y; m--; ) &amp;#123;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        std::cin &amp;gt;&amp;gt; g[x][y], g[y][x] = g[x][y];
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        g[i][i] = 0;
    for (int k = 1; k &amp;lt;= n; ++k)
        for (int i = 1; i &amp;lt;= n; ++i)
            if (k != i)
                for (int j = 1; j &amp;lt;= n; ++j)
                    if (i != k &amp;amp;&amp;amp; j != k)
                        g[i][j] = std::min(g[i][j], g[i][k] + g[k][j]);
    int g1, g2, s1, s2;
    std::cin &amp;gt;&amp;gt; g1 &amp;gt;&amp;gt; g2 &amp;gt;&amp;gt; s1 &amp;gt;&amp;gt; s2;
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= n; ++j)
            if (g[i][j] != inf)
                g[i][j] = g[i][j] * n + i;
    std::vector&amp;lt;int&amp;gt; mx(n + 1), mn(n + 1, inf);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j)
            if (j != i)
                mn[i] = std::min(mn[i], g[i][j]);
        mx[i] = *std::max_element(g[i].begin() + 1, g[i].end());
    &amp;#125;
    auto res(0ll);
    std::vector&amp;lt;std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; &amp;gt; f(n + 1, std::vector&amp;lt;std::vector&amp;lt;long long&amp;gt; &amp;gt; (n + 1, std::vector&amp;lt;long long&amp;gt; (n + 1)));
    for (int u = 1; u &amp;lt;= n; ++u)
        for (int v = 1; v &amp;lt;= n; ++v)
            if (v != u) &amp;#123;
                f[0][1][1] = 1ll;
                for (int i = 1; i &amp;lt;= n; ++i)
                    if (i == u || i == v)
                        f[i] = f[i - 1];
                    else &amp;#123;
                        bool flag = 0;
                        for (int j = 1; j &amp;lt;= n; ++j)
                            if (mn[u] &amp;lt; g[i][j] &amp;amp;&amp;amp; g[i][j] &amp;lt; mx[v]) &amp;#123;
                                flag = 1;
                                break;
                            &amp;#125;
                        for (int j = 1; j &amp;lt;= g2; ++j)
                            for (int k = 1; k &amp;lt;= n - g1 - s1; ++k) &amp;#123;
                                f[i][j][k] = 0ll;
                                if (mx[i] &amp;lt; mn[u])
                                    f[i][j][k] = f[i - 1][j - 1][k];
                                else if (mn[i] &amp;gt; mx[v])
                                    f[i][j][k] = f[i - 1][j][k - 1];
                                else &amp;#123;
                                    if (flag)
                                        f[i][j][k] = f[i - 1][j][k];
                                    if (mn[i] &amp;lt; mn[u])
                                        f[i][j][k] += f[i - 1][j - 1][k];
                                    if (mx[i] &amp;gt; mx[v])
                                        f[i][j][k] += f[i - 1][j][k - 1];
                                &amp;#125;
                            &amp;#125;
                    &amp;#125;
                for (int g = g1; g &amp;lt;= g2; ++g)
                    for (int s = s1; s &amp;lt;= s2; ++s)
                        res += f[n][g][n - g - s];
            &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;sorting-pancakes&#34;&gt;7. Sorting Pancakes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1675/problem/G&#34; class=&#34;uri&#34;&gt;https://codeforces.com/contest/1675/problem/G&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定盒子 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 和每个盒子 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 里的初始球数 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，每次可以选择一个球移动到相邻盒子，最后欲使盒子内球数单调不升,求最小移球次数。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n,\sum a_i\le 250\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单题！这种『移动元素的题』，会考虑&lt;mark&gt;钦定每个元素最终的值，把前面的元素富余的 / 欠下来的存储起来&lt;/mark&gt;。&lt;em&gt;当然也有例外，比如添加了『时间』这一维的限制，goto &lt;a href=&#34;http://localhost:4000/20250510/#a---pass-to-next&#34;&gt;solu to Pass to Next&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在如果在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处富余了 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，那么在移动到 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 的过程中就会产生 &lt;span class=&#34;math inline&#34;&gt;\(|x|\)&lt;/span&gt; 的代价。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,k,j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个元素处，钦定它最终为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，富余 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,k,j}\gets \min\limits_{j&amp;#39;\ge j}\{f_{i-1, k-(j-a_i),j&amp;#39;}\}\)&lt;/span&gt;。显而易见后缀 min 优化就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n\cdot m^2)\)&lt;/span&gt; 地做了。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;DP 数组和后缀 min 数组要合起来，不然会 MLE /ll&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;int&amp;gt; a(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    using arr = std::vector&amp;lt;int&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    crr f(n + 1, brr(2 * m + 1, arr(m + 1, inf)));
    std::fill(f[0][m].begin(), f[0][m].begin() + m + 1, 0);
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int k = 0; k &amp;lt;= 2 * m; ++k)
            for (int j = std::min(m, k + a[i]); j &amp;gt;= std::max(0, k + a[i] - 2 * m); --j) &amp;#123;
                f[i][k][j] = f[i - 1][k - (j - a[i])][j] + std::abs(k - m);
                if (j != m)
                    f[i][k][j] = std::min(f[i][k][j], f[i][k][j + 1]);
            &amp;#125;
    std::cout &amp;lt;&amp;lt; f[n][m][0] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;complexity&#34;&gt;8. Complexity&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/agc033/tasks/agc033_d&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/agc033/tasks/agc033_d&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\times m\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(01\)&lt;/span&gt; 矩阵。定义其子矩阵的凌乱度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若该矩阵中只有一种值，凌乱度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;否则，任意竖直 / 水平切一刀，得到两个小矩阵；若它们的凌乱度分别为 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt;，则大矩阵的凌乱度为 &lt;span class=&#34;math inline&#34;&gt;\(\max(a,b)+1\)&lt;/span&gt; 的最小值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;求给定矩阵的凌乱度。&lt;span class=&#34;math inline&#34;&gt;\(n,m\le 185\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果暴力枚举 DP，很不幸是 &lt;span class=&#34;math inline&#34;&gt;\(n^5\)&lt;/span&gt; 的。考虑优化。发现矩阵的凌乱度大致在 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 级别，考虑用&lt;mark&gt;状态交换答案&lt;/mark&gt;减小复杂度。具体地，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{k,u,d,l}\)&lt;/span&gt; 表示凌乱度 &lt;span class=&#34;math inline&#34;&gt;\(\le k\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 可取到的最大值，那么有转移：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;竖着切一刀，枚举切点 &lt;span class=&#34;math inline&#34;&gt;\(i\le f_{k-1,u,d,l}\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{k,u,d,l}\gets f_{k-1,u,d,i+1}\)&lt;/span&gt;。发现显然 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 取 &lt;span class=&#34;math inline&#34;&gt;\(f_{k-1,u,d,l}\)&lt;/span&gt; 的时候最优，这个是 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 的。&lt;/li&gt;
&lt;li&gt;横着切一刀，枚举切点 &lt;span class=&#34;math inline&#34;&gt;\(i\in[u,d)\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{k,u,d,l}\gets \min(f_{k-1,u,i,l},f_{k-1,i+1,d,l})\)&lt;/span&gt;。发现随 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 增大左边单调不增，右边单调不降。随着 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的增大，左边不变，右边下移，交出来的交点一直右移。然后就可以优化到均摊 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int inf = 0x3f3f3f3f;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::vector&amp;lt;char&amp;gt; &amp;gt; a(n + 1, std::vector&amp;lt;char&amp;gt; (m + 1));
    for (int i = 1; i &amp;lt;= n; ++i)
        for (int j = 1; j &amp;lt;= m; ++j)
            std::cin &amp;gt;&amp;gt; a[i][j];
    using arr = std::vector&amp;lt;int&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    std::vector&amp;lt;std::string&amp;gt; res;
    std::vector&amp;lt;crr&amp;gt; _f(2, crr(n + 1, brr(m + 1, arr(n + 1))));
    for (int k = 0; ; ++k) &amp;#123;
        auto &amp;amp;f = _f[k &amp;amp; 1], &amp;amp;f1 = _f[(k &amp;amp; 1) ^ 1];
        if (k == 0) &amp;#123;
            crr tag(m + 1, brr(n + 1, arr(n + 1, -1)));
            for (int l = 1; l &amp;lt;= m; ++l)
                for (int u = 1; u &amp;lt;= n; ++u)
                    for (int d = u; d &amp;lt;= n &amp;amp;&amp;amp; a[d][l] == a[u][l]; ++d)
                        tag[l][u][d] = a[u][l];
            for (int u = 1; u &amp;lt;= n; ++u)
                for (int d = u; d &amp;lt;= n; ++d)
                    for (int l = m; l; --l) &amp;#123;
                        f[u][l][d] = l - 1;
                        if (~tag[l][u][d]) &amp;#123;
                            if (l != m &amp;amp;&amp;amp; tag[l][u][d] == tag[l + 1][u][d])
                                f[u][l][d] = f[u][l + 1][d];
                            else
                                f[u][l][d] = l;
                        &amp;#125;
                    &amp;#125;
        &amp;#125;
        else
            for (int u = 1; u &amp;lt;= n; ++u)
                for (int l = 1; l &amp;lt;= m; ++l)
                    for (int d = u, pos = 1; d &amp;lt;= n; ++d) &amp;#123;
                        f[u][l][d] = f1[u][l][d];
                        if (f[u][l][d] != m) &amp;#123;
                            f[u][l][d] = std::max(f[u][l][d], f1[u][f1[u][l][d] + 1][d]);
                            int mx = 0;
                            for (int i = pos; i &amp;lt; d; ++i) &amp;#123;
                                if (std::min(f1[u][l][i], f1[i + 1][l][d]) &amp;gt;= mx)
                                    mx = std::min(f1[u][l][i], f1[i + 1][l][d]), pos = i;
                                else
                                    break;
                            &amp;#125;
                            f[u][l][d] = std::max(f[u][l][d], mx);
                        &amp;#125;
                    &amp;#125;
        if (f[1][1][n] == m) &amp;#123;
            std::cout &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
            return 0;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;boxes-and-balls&#34;&gt;9. Boxes and Balls&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF1845E&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF1845E&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(01\)&lt;/span&gt; 序列 &lt;span class=&#34;math inline&#34;&gt;\(a_{1\sim n}\)&lt;/span&gt;。你可以进行恰好 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次如下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择序列中一对相邻且值不同的元素，将它们交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问有多少种最终序列。&lt;span class=&#34;math inline&#34;&gt;\(n,k\le 1500\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沿用 &lt;a href=&#34;#sorting-pancakes&#34;&gt;7. Sorting Pancakes&lt;/a&gt; 的思路，考虑令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,l}\)&lt;/span&gt; 表示最终序列的前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个里有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，代价已经有 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 的方案数；那么令 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的前缀和，显然有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i+1,j+1,k+|j-s_i|}\gets f_{i,j,k}\\
f_{i+1,j,k+|j-s_i|}\gets f_{i,j,k}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后在比 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 小且奇偶性和 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 相同的 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 里找答案。然后想怎么优化。&lt;/p&gt;
&lt;p&gt;答案是不用优化。考虑&lt;mark&gt;有效状态数&lt;/mark&gt;，&lt;del&gt;打个表发现每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(O(n\sqrt n)\)&lt;/span&gt; 左右&lt;/del&gt;，但有另一种方法是发现有效的 &lt;span class=&#34;math inline&#34;&gt;\(|j-s_i|\)&lt;/span&gt; 不会超过 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt n)\)&lt;/span&gt;（原因：为了消除 &lt;span class=&#34;math inline&#34;&gt;\(|j-s_i|\)&lt;/span&gt; 的欠账，需要 &lt;span class=&#34;math inline&#34;&gt;\(|j-s_i|\)&lt;/span&gt; 个位置；每个位置都会有差不多 &lt;span class=&#34;math inline&#34;&gt;\(|j-s_i|\)&lt;/span&gt; 的代价），所以枚举时只用枚举 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt n)\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;总之只用存有效状态会发现跑不满 &lt;img src=&#34;/em/bb.gif&#34; /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int n, k;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    std::vector&amp;lt;int&amp;gt; a(n + 1), s(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; a[i];
    std::partial_sum(a.begin() + 1, a.end(), s.begin() + 1);
    using arr = std::vector&amp;lt;long long&amp;gt;;
    using brr = std::vector&amp;lt;arr&amp;gt;;
    using crr = std::vector&amp;lt;brr&amp;gt;;
    brr tag(n + 1, arr(n + 1));
    std::vector&amp;lt;std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; &amp;gt; stt(2);
    stt[0].emplace_back(0, 0);
    crr _f(2, brr(n + 1, arr(k + 1)));
    _f[0][0][0] = 1;
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        auto &amp;amp;f = _f[i &amp;amp; 1], &amp;amp;f1 = _f[(i &amp;amp; 1) ^ 1];
        std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt;().swap(stt[(i &amp;amp; 1) ^ 1]);
        for (auto [j, l] : stt[i &amp;amp; 1]) &amp;#123;
                if (j + 1 &amp;lt;= s[n] &amp;amp;&amp;amp; l + std::abs(j - s[i]) &amp;lt;= k) &amp;#123;
                    if (tag[j + 1][l + std::abs(j - s[i])] != i + 1)
                        tag[j + 1][l + std::abs(j - s[i])] = i + 1, stt[(i &amp;amp; 1) ^ 1].emplace_back(j + 1, l + std::abs(j - s[i])), f1[j + 1][l + std::abs(j - s[i])] = 0ll;
                    (f1[j + 1][l + std::abs(j - s[i])] += f[j][l]) %= mod;
                &amp;#125;
                if (l + std::abs(j - s[i]) &amp;lt;= k) &amp;#123;
                    if (tag[j][l + std::abs(j - s[i])] != i + 1)
                        tag[j][l + std::abs(j - s[i])] = i + 1, stt[(i &amp;amp; 1) ^ 1].emplace_back(j, l + std::abs(j - s[i])), f1[j][l + std::abs(j - s[i])] = 0ll;
                    (f1[j][l + std::abs(j - s[i])] += f[j][l]) %= mod;
                &amp;#125;
            &amp;#125;
        std::cout &amp;lt;&amp;lt; (int)stt[i &amp;amp; 1].size() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    auto res(0ll);
    for (int i = k &amp;amp; 1; i &amp;lt;= k; i += 2)
        if (tag[s[n]][i] == n)
            (res += _f[n &amp;amp; 1][s[n]][i]) %= mod;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;legondary-grandmaster&#34;&gt;10. LEGOndary Grandmaster&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1615/F&#34; class=&#34;uri&#34;&gt;https://codeforces.com/problemset/problem/1615/F&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定两个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(0/1/?\)&lt;/span&gt; 串 &lt;span class=&#34;math inline&#34;&gt;\(s,t\)&lt;/span&gt;，你可以对 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 进行若干次如下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择序列中一对相邻且值相同的元素，将它们取反。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现任意将 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 中的 &lt;code&gt;?&lt;/code&gt; 填为 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt;，问所有情况中 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 转化为 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 所需最小操作次数和（规定无解的操作次数为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;）。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2000\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们之前做过某些令人心（咬）旷（牙）神（切）怡（齿）的题目，会发现这个操作等价于交换任意两个相邻数，再让他们取反。&lt;/p&gt;
&lt;p&gt;进一步地，可以交换运算顺序，先取反某个位置，再交换，再取反这个位置——把这个操作平均分配到 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 上，&lt;mark&gt;结合『相邻两数位置必一奇一偶』这个美妙的性质，想到把 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的奇数位都提前取反，这样就可以转化成直接交换了&lt;/mark&gt;，&lt;/p&gt;
&lt;p&gt;接下来就和上一题有点不一样了。这里我们直接算一个位置的贡献——这意味着不需要统计一个序列的代价（此时失去了 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的限制，代价来到 &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 级别）。令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示从前往后到了第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个位置，欠债为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数；同样地，令 &lt;span class=&#34;math inline&#34;&gt;\(g_{i,j}\)&lt;/span&gt; 表示从后到前到了第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个位置，欠债为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的方案数。则贡献为 &lt;span class=&#34;math inline&#34;&gt;\(\sum_i \sum_j f_{i, j}\times g_{i + 1, -j}\times j\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int mod = 1e9 + 7;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);
#else
    std::freopen(&amp;quot;.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    std::freopen(&amp;quot;.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    int T;
    for (std::cin &amp;gt;&amp;gt; T; T--; ) &amp;#123;
        int n;
        std::string s, t;
        std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; s &amp;gt;&amp;gt; t, s = &amp;#39;#&amp;#39; + s, t = &amp;#39;#&amp;#39; + t;
        for (int i = 1; i &amp;lt;= n; ++i)
            if (i &amp;amp; 1) &amp;#123;
                if (s[i] != &amp;#39;?&amp;#39;)
                    s[i] = &amp;#39;0&amp;#39; + &amp;#39;1&amp;#39; - s[i];
                if (t[i] != &amp;#39;?&amp;#39;)
                    t[i] = &amp;#39;0&amp;#39; + &amp;#39;1&amp;#39; - t[i];
            &amp;#125;
        using arr = std::vector&amp;lt;long long&amp;gt;;
        using brr = std::vector&amp;lt;arr&amp;gt;;
        brr f(n + 1, arr(2 * n + 1)), g(n + 2, arr(2 * n + 1));
        f[0][n] = 1ll;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int S = 0; S &amp;lt;= 1; ++S)
                if ((S == 0 &amp;amp;&amp;amp; s[i] == &amp;#39;1&amp;#39;) || (S == 1 &amp;amp;&amp;amp; s[i] == &amp;#39;0&amp;#39;));
                else
                    for (int T = 0; T &amp;lt;= 1; ++T) &amp;#123;
                        if ((T == 0 &amp;amp;&amp;amp; t[i] == &amp;#39;1&amp;#39;) || (T == 1 &amp;amp;&amp;amp; t[i] == &amp;#39;0&amp;#39;));
                        else
                            for (int j = 0; j &amp;lt;= 2 * n; ++j)
                                if (j - (T - S) &amp;gt;= 0 &amp;amp;&amp;amp; j - (T - S) &amp;lt;= 2 * n)
                                    (f[i][j] += f[i - 1][j - (T - S)]) %= mod;
                    &amp;#125;
        &amp;#125;
        g[n + 1][n] = 1ll;
        for (int i = n; i; --i) &amp;#123;
            for (int S = 0; S &amp;lt;= 1; ++S)
                if ((S == 0 &amp;amp;&amp;amp; s[i] == &amp;#39;1&amp;#39;) || (S == 1 &amp;amp;&amp;amp; s[i] == &amp;#39;0&amp;#39;));
                else
                    for (int T = 0; T &amp;lt;= 1; ++T) &amp;#123;
                        if ((T == 0 &amp;amp;&amp;amp; t[i] == &amp;#39;1&amp;#39;) || (T == 1 &amp;amp;&amp;amp; t[i] == &amp;#39;0&amp;#39;));
                        else
                            for (int j = 0; j &amp;lt;= 2 * n; ++j)
                                if (j - (T - S) &amp;gt;= 0 &amp;amp;&amp;amp; j - (T - S) &amp;lt;= 2 * n)
                                    (g[i][j] += g[i + 1][j - (T - S)]) %= mod;
                    &amp;#125;
        &amp;#125;
        auto res(0ll);
        for (int i = 1; i &amp;lt; n; ++i)
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                (res += j * f[i][n + j] % mod * g[i + 1][n - j] % mod) %= mod;
                (res += j * f[i][n - j] % mod * g[i + 1][n + j] % mod) %= mod;
            &amp;#125;
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <updated>2024-09-06T07:30:38.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240625/</id>
        <title>媒介素养</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240625/"/>
        <content type="html">&lt;p&gt;Adapted from 之前的一片发电文。现在更癫了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src=&#34;pre.jpeg&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;媒介素养一般是指人们正确地、建设性地使用媒介资源的能力。它包括人们面对各种信息时的选择、理解、质疑、评估等能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于选择：太遗憾了！你没有任何其他的项目是可选择的，因为&lt;em&gt;歌愛ユキ&lt;/em&gt;很可爱！&lt;/li&gt;
&lt;li&gt;关于理解：接下来，你将会度过一定量的时间理解&lt;em&gt;歌愛ユキ&lt;/em&gt;的可爱性。&lt;/li&gt;
&lt;li&gt;关于质疑：是的，正在质疑！通常情况下这代表着一种好的状态，但在这里您可能会遇到障碍——你不会想要质疑&lt;em&gt;歌愛ユキ&lt;/em&gt;。事实上，&lt;em&gt;歌愛ユキ&lt;/em&gt;又有什么是可质疑的呢？&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于评估：当然，在这里，评估有着不可忽视的重要性——海内存知己，天涯若比邻。对我们的&lt;em&gt;歌愛ユキ&lt;/em&gt;进行打分！&lt;/p&gt;
&lt;p&gt;可选的评估项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100 分&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他，请补锟斤拷锟斤拷锟斤拷烫烫烫烫烫烫烫烫烫&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;程序 Assessing.exe 引用了名为 0x00000000ff 的内存，该地址不能为 &amp;#39;read&amp;#39;。&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很遗憾！看起来你的 Windows 出现了问题。请勿关闭电脑，我们将会收集你电脑上的错误信息，我们将会将它上传到 Microsoft 官网并尝试在脱机状态下解决它。&lt;/p&gt;
&lt;p&gt;错误代码：0x00009E2EAF60&lt;/p&gt;
&lt;p&gt;我们正在为你解析。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;嘿，抬起头！这篇帖子可能并没有您正在考虑的那样陌生！&lt;/p&gt;
&lt;p&gt;Hey, heads up! The post may not so strange as you are considering!&lt;/p&gt;
&lt;p&gt;让我们分析这些笑话！&lt;/p&gt;
&lt;p&gt;Let’s analyse the jokes!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;努力理解「花」意味着什么。&lt;/p&gt;
Try to understand what “spend” means.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正在错误地翻译「查询」。&lt;/p&gt;
Wrong translating “querying”.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;海内存知己，天涯若比邻。&lt;/p&gt;
Sea inside exist know self, sky Ya like than neighbor.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主语并未变化，但主语却在相邻的两个短句中出现了。相同的相邻主语没有得到省略，而这将导致这些相同的主语看起来很累赘！&lt;/p&gt;
The subject didn’t changed, but it appears in two adjacent short sentences. The same adjacent subjects havn’t been omitted, which will make these identical subjects appear cumbersome!&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正在错过时间状语！这使「上传」和「脱机处理」两个动作看上去像是同时发生的。&lt;/p&gt;
Missing time adverb! This makes the actions of “uploading” and “offline processing” appear to occur simultaneously.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你您你您你您你您你您&lt;/p&gt;
&lt;p&gt;You you you you you you you you you you&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="闲话" />
        <updated>2024-06-25T02:37:25.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240517/</id>
        <title>状压枚举子集 + 高维前缀和</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240517/"/>
        <content type="html">&lt;p&gt;出现了，但发现没写过，故记之。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;状压枚举子集&#34;&gt;状压枚举子集&lt;/h3&gt;
&lt;p&gt;需求：对于 &lt;strong&gt;每一个&lt;/strong&gt; 长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的二进制状态 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，枚举其子状态 &lt;span class=&#34;math inline&#34;&gt;\(\{ t \mid t \operatorname{bitand} s = t \}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;直接枚举所有长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的状态 &lt;span class=&#34;math inline&#34;&gt;\(t&amp;#39;\)&lt;/span&gt;，然后判定是否满足 &lt;span class=&#34;math inline&#34;&gt;\(t&amp;#39; \operatorname{bitand} s = t\)&lt;/span&gt;，总时间复杂度是 &lt;span class=&#34;math inline&#34;&gt;\(O(2^{2n})\)&lt;/span&gt; 的。考虑优化。&lt;/p&gt;
&lt;p&gt;考虑对于所有 &lt;span class=&#34;math inline&#34;&gt;\(2^n\)&lt;/span&gt; 种状态 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，假如有一种方式能够不重不漏地枚举出它们中每一个的所有子状态，那么总时间复杂度是多少呢？&lt;/p&gt;
&lt;p&gt;把所有数对 &lt;span class=&#34;math inline&#34;&gt;\((s, t)\)&lt;/span&gt; 排列在一起。那么对于 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 位中的每一位 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，枚举每一个 &lt;span class=&#34;math inline&#34;&gt;\((s&amp;#39;, t&amp;#39;)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么存在以下几种可能性：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\({s&amp;#39;}_i=1,{t&amp;#39;}_i=1\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\({s&amp;#39;}_i=1, {t&amp;#39;}_i=0\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\({s&amp;#39;}_i=0, {t&amp;#39;}_i = 0\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假如我们用 &lt;span class=&#34;math inline&#34;&gt;\(o_i=0,1,2\)&lt;/span&gt; 分别代表第一、二、三种情况，完全可以用长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的三进制状态 &lt;span class=&#34;math inline&#34;&gt;\(o\)&lt;/span&gt; 还原数对 &lt;span class=&#34;math inline&#34;&gt;\((s, t)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;由于这个 &lt;span class=&#34;math inline&#34;&gt;\((s, t)\)&lt;/span&gt; 序列中肯定没有完全相同的元素，也就是说，对于每一个 &lt;span class=&#34;math inline&#34;&gt;\((s, t)\)&lt;/span&gt;，其 &lt;span class=&#34;math inline&#34;&gt;\(o\)&lt;/span&gt; 都各不相同。&lt;/p&gt;
&lt;p&gt;因此，&lt;span class=&#34;math inline&#34;&gt;\((s, t)\)&lt;/span&gt; 的数目不超过 &lt;span class=&#34;math inline&#34;&gt;\(3^n\)&lt;/span&gt;（更准确地，二者值相等）。&lt;/p&gt;
&lt;p&gt;又因为对于 &lt;span class=&#34;math inline&#34;&gt;\(3^n\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(o\)&lt;/span&gt;，每个都可以还原出合法状态，所以总的 &lt;span class=&#34;math inline&#34;&gt;\((s, t)\)&lt;/span&gt; 数目应恰好为 &lt;span class=&#34;math inline&#34;&gt;\(3^n\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;也就是说，假如有一种方式能够不重不漏地枚举出每一个 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的所有子状态 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，可以做到均摊 &lt;span class=&#34;math inline&#34;&gt;\(O(3^n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;接下来探讨这种枚举方式。直接给出结论：&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;for (int t = s; t; t = (t - 1) &amp;amp; s);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其实不难理解。从 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的定义出发即 &lt;span class=&#34;math inline&#34;&gt;\(t \operatorname{bitand} s = t\)&lt;/span&gt;，重点理解 &lt;span class=&#34;math inline&#34;&gt;\(t\gets (t - 1)\operatorname{bitand} s\)&lt;/span&gt; 这一步。&lt;/p&gt;
&lt;p&gt;分两种情况讨论：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(t-1\)&lt;/span&gt; 较 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 发生退位：&lt;/p&gt;
&lt;p&gt;因为只减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，所以末位一定发生退位。&lt;/p&gt;
&lt;p&gt;如果发生连续退位，一定是因为末端有连续的 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。对于第一个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;（记为第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 位），已经枚举完了在 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 及更高位固定在当前状态下的所有状态。&lt;/p&gt;
&lt;p&gt;则应有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 更高的数位，未受到退位带来的连续影响的位不变；&lt;/li&gt;
&lt;li&gt;第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 位 &lt;span class=&#34;math inline&#34;&gt;\(1\to 0\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;从第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 位一直到末位都有 &lt;span class=&#34;math inline&#34;&gt;\(0\to 1\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时与 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 进行 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{bitand}\)&lt;/span&gt;，得到比 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 更高的数位不变、&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 位 &lt;span class=&#34;math inline&#34;&gt;\(1\to 0\)&lt;/span&gt;、比 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 更低的数位变为抵着 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 对应数位的最大状态。&lt;/p&gt;
综上，这是比 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 小的第一个合法状态。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(t-1\)&lt;/span&gt; 较 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 不发生退位：&lt;/p&gt;
&lt;p&gt;根据上面的讨论，其实就是末位不退位，即末位 &lt;span class=&#34;math inline&#34;&gt;\(1\to 0\)&lt;/span&gt;。显然是比 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 更小的第一个合法状态。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上，实现了从大到小依次枚举合法状态，因此不重不漏。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;枚举补集&#34;&gt;枚举补集&lt;/h3&gt;
&lt;p&gt;看了几个比较抽象的博客，但是我觉得不如直接把 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 异或一下 &lt;span class=&#34;math inline&#34;&gt;\(2^n-1\)&lt;/span&gt; 然后枚举子集。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;子集和-高维前缀和&#34;&gt;子集和 / 高维前缀和&lt;/h3&gt;
&lt;p&gt;首先理解一下什么是高维前缀和。实际上全称应为边长为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的高维空间前缀和。其实就是求所有状态的子集和，运用了前缀和的思想故唤高位前缀和 / 逐维前缀和。&lt;/p&gt;
&lt;p&gt;即在 &lt;span class=&#34;math inline&#34;&gt;\(n=2\)&lt;/span&gt; 的情况下，我们发现我们可以将 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 维前缀和看作在 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位二进制数上做子集元素求和。显然根据枚举子集有 &lt;span class=&#34;math inline&#34;&gt;\(3^k\)&lt;/span&gt; 的做法，但还能更快。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;std::copy(a.begin(), a.end(), s.begin());
for (int i = 0; i &amp;lt; k; ++i)
    for (int j = 0; j &amp;lt; l; ++j)
        if ((j &amp;gt;&amp;gt; i) &amp;amp; 1)
            s[j] += s[j ^ (1 &amp;lt;&amp;lt; i)];&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先枚举 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 是因为使用高维前缀和的题目一般时限卡得比较死，需要使用内存连续访问尽量减小常数。&lt;/p&gt;
&lt;p&gt;对于状态 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，考虑枚举其每一维上的值，则 &lt;span class=&#34;math inline&#34;&gt;\(s_j=a_j+\sum s_{j\bigoplus 2^i}\)&lt;/span&gt;。易发现这可以不重不漏地覆盖所有子集。&lt;/p&gt;
&lt;p&gt;这种思想在一些状态压缩的题目中也有应用，具体见 &lt;a href=&#34;/20231117#1&#34;&gt;此&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;高维后缀和&#34;&gt;高维后缀和&lt;/h3&gt;
&lt;p&gt;从大往小枚举 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，对于 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 中值为 &lt;code&gt;false&lt;/code&gt; 的维 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(s_j=a_j+\sum s_{j+2^i}\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;std::copy(a.begin(), a.end(), s.begin());
for (int i = 0; i &amp;lt; k; ++i)
    for (int j = l - 1; ~j; --j)
        if (!((j &amp;gt;&amp;gt; i) &amp;amp; 1))
            s[j] += s[j ^ (1 &amp;lt;&amp;lt; i)];&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="状压" />
        <category term="高维前缀和" />
        <updated>2024-05-17T13:19:38.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240501/</id>
        <title>五一杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240501/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5169&#34;&gt;SAM 杂题&lt;/a&gt; + &lt;a href=&#34;http://222.180.160.110:61235/contest/5170&#34;&gt;NOIPS8&lt;/a&gt; + &lt;a href=&#34;http://222.180.160.110:61235/contest/5175&#34;&gt;周考&lt;/a&gt; 选讲。&lt;/p&gt;
&lt;p&gt;看看这个标签列表长度就知道这三天做的题有多杂。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-字符串&#34;&gt;D. 字符串&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5169/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5169/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和 SA 的做法一样，先二分 &lt;span class=&#34;math inline&#34;&gt;\(s_{c\sim d}\)&lt;/span&gt; 的前缀长度 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt;，只需 check &lt;span class=&#34;math inline&#34;&gt;\(s_{c \sim c + mid - 1}\)&lt;/span&gt; 是否在 &lt;span class=&#34;math inline&#34;&gt;\(s_{a\sim b}\)&lt;/span&gt; 中出现过。&lt;/p&gt;
&lt;p&gt;考虑怎么快速 check。从 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 一步一步跳到 &lt;span class=&#34;math inline&#34;&gt;\(c+mid-1\)&lt;/span&gt; 显然会起飞，考虑到查询是静态的，我们事先预处理一下然后倍增地跳即可。&lt;/p&gt;
&lt;p&gt;此时只需看当前状态的 &lt;span class=&#34;math inline&#34;&gt;\(\text {endpos}\)&lt;/span&gt; 是否在 &lt;span class=&#34;math inline&#34;&gt;\([a + mid - 1, b]\)&lt;/span&gt; 出现过。&lt;/p&gt;
&lt;p&gt;因为这个不能用最大最小简单代替，所以就到了我们喜闻乐见的线段树合并环节。将插入后的每个单点 &lt;span class=&#34;math inline&#34;&gt;\(\text {endpos}\)&lt;/span&gt; 在权值线段树上更新，在 parent tree 上暴力线段树合并即可。&lt;/p&gt;
&lt;p&gt;之前一直有一个误区，就是觉得线段树合并是一次性的，比如用 A 树和 B 树并出来了 C 树之后，A 树和 B 树的数据就无效了。&lt;/p&gt;
&lt;p&gt;但这显然是很荒谬的，同样因为我们的查询是静态的，所以完全可以用一种类似于可持久化的方式，建立一些新的点表示合并后的信息状态点，一些可以保留的点就保留作儿子。&lt;/p&gt;
&lt;p&gt;在对应的状态上查询即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxm = 35;
const int maxn = 6e5 + 5;
const int maxk = 8e7 + 5;
struct _ &amp;#123;
    int l, f;
    int ne[maxm]; 
    _() &amp;#123;&amp;#125;
    _(int l1, int f1): l(l1), f(f1) &amp;#123;&amp;#125;
&amp;#125;;
_ t[maxn &amp;lt;&amp;lt; 1];
int vis[maxn &amp;lt;&amp;lt; 1];
int fa[maxn][maxm];
int n, la, tot, siz;
struct &amp;#123; int l, r, u; &amp;#125; t1[maxk];
int tab[maxn &amp;lt;&amp;lt; 1], cnt[maxn &amp;lt;&amp;lt; 1];
void Init(void) &amp;#123;
    la = tot = 1;
    t[1] = _(0, 0);
    return;
&amp;#125;
void ext(int c) &amp;#123;
    int p = la, np = ++tot;
    la = tot;
    t[np] = _(t[p].l + 1, 0);
    while (p &amp;amp;&amp;amp; !t[p].ne[c])
        t[p].ne[c] = np, p = t[p].f;
    if (!p)
        t[np].f = 1;
    else &amp;#123;
        int q = t[p].ne[c];
        if (t[q].l == t[p].l + 1)
            t[np].f = q;
        else &amp;#123;
            int nq = ++tot;
            t[nq] = _(t[p].l + 1, t[q].f);
            std::copy(t[q].ne, t[q].ne + 26, t[nq].ne);
            while (p &amp;amp;&amp;amp; t[p].ne[c] == q)
                t[p].ne[c] = nq, p = t[p].f;
            t[q].f = nq;
            t[np].f = nq;
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
int now = 0;
void ins(int &amp;amp;p, int l, int r, int v) &amp;#123;
    if (!p)
        p = ++now;
    ++t1[p].u;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (v &amp;lt;= mid)
        ins(t1[p].l, l, mid, v);
    else
        ins(t1[p].r, mid + 1, r, v);
    return;
&amp;#125;
int ask(int p, int l, int r, int ql, int qr) &amp;#123;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr)
        return t1[p].u;
    int mid = (l + r) &amp;gt;&amp;gt; 1, res = 0;
    if (ql &amp;lt;= mid)
        res = ask(t1[p].l, l, mid, ql, qr);
    if (qr &amp;gt; mid)
        res += ask(t1[p].r, mid + 1, r, ql, qr);
    return res;
&amp;#125;
int merge(int p, int q, int l, int r) &amp;#123;
    if (!p || !q)
        return p + q;
    int np = ++now, mid = (l + r) &amp;gt;&amp;gt; 1;
    t1[np].u = t1[p].u + t1[q].u;
    if (l == r) return np;
    t1[np].l = merge(t1[p].l, t1[q].l, l, mid);
    t1[np].r = merge(t1[p].r, t1[q].r, mid + 1, r);
    return np;
&amp;#125;
int pos[maxn], rt[maxn &amp;lt;&amp;lt; 1];
bool check(int x, int a, int b, int c, int d) &amp;#123;
    assert(c + x - 1 &amp;gt;= 0);
    int p = pos[c + x - 1];
    for (int i = siz; ~i; --i)
        if (fa[p][i] &amp;amp;&amp;amp; t[fa[p][i]].l &amp;gt;= x)
            p = fa[p][i];
    return ask(rt[p], 0, n - 1, a + x - 1, b) &amp;gt; 0;
&amp;#125;
int solve(int a, int b, int c, int d) &amp;#123;
    int l = 1, r = std::min(d - c + 1, b - a + 1), res = 0;
    while (l &amp;lt;= r) &amp;#123;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        if (check(mid, a, b, c, d))
            l = mid + 1, res = mid;
        else
            r = mid - 1;
    &amp;#125;
    return res;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    int m;
    std::string s;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; s;
    Init();
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        ext(s[i] - &amp;#39;a&amp;#39;);
        pos[i] = la;
        ins(rt[la], 0, n - 1, i);
    &amp;#125;
    siz = log(tot) / log(2.0);
    for (int i = 1; i &amp;lt;= tot; ++i)
        ++cnt[t[i].l];
    std::partial_sum(cnt + 1, cnt + tot + 1, cnt + 1);
    for (int i = 1; i &amp;lt;= tot; ++i)
        tab[cnt[t[i].l]--] = i;
    for (int i = 1; i &amp;lt;= tot; ++i) &amp;#123;
        int u = tab[i];
        fa[u][0] = t[u].f;
        for (int j = 1; j &amp;lt;= siz; ++j)
            fa[u][j] = fa[fa[u][j - 1]][j - 1];
    &amp;#125;
    for (int i = tot; i; --i) &amp;#123;
        int u = tab[i];
        if (t[u].f)
            rt[t[u].f] = merge(rt[t[u].f], rt[u], 0, n - 1);
    &amp;#125;
    while (m--) &amp;#123;
        int a, b, c, d;
        std::cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt; c &amp;gt;&amp;gt; d;
        std::cout &amp;lt;&amp;lt; solve(a - 1, b - 1, c - 1, d - 1) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-security&#34;&gt;F. Security&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5169/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5169/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对我们来说应该是会 D 就会 F 的。所以只打了 10min。&lt;/p&gt;
&lt;p&gt;首先考虑一个大家喜闻乐见的 DFS 求最小字典序。显然地，如果存在和当前位相等的字符，那么优先跳相等字符，进入下一层深搜；否则找到最小的更大字符，然后直接 out。&lt;/p&gt;
&lt;p&gt;此时 SAM 就是我们用来判断 &lt;span class=&#34;math inline&#34;&gt;\(S_{l, r}\)&lt;/span&gt; 中是否存在某状态的工具了。甚至比上一题简单，因为不用写二分和倍增。&lt;/p&gt;
&lt;p&gt;值得注意的是如果 &lt;span class=&#34;math inline&#34;&gt;\(S_{l, r}\)&lt;/span&gt; 包含 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 那么还要在后面随便加一个字符以字典序保证严格大于 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;值得注意的是因为我写的太丑了以至于在 CF 上会光荣 MLE #46。然后分屏左半边看我代码右半边写的 zwb 却没有。啧。为什么呢。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxm = 35;
const int maxn = 6e5 + 5;
const int maxk = 8e7 + 5;
struct _ &amp;#123;
    int l, f;
    int ne[maxm]; 
    _() &amp;#123;&amp;#125;
    _(int l1, int f1): l(l1), f(f1) &amp;#123;&amp;#125;
&amp;#125;;
_ t[maxn &amp;lt;&amp;lt; 1];
int vis[maxn &amp;lt;&amp;lt; 1];
int fa[maxn][maxm];
int n, la, tot, siz;
struct &amp;#123; int l, r, u; &amp;#125; t1[maxk];
int tab[maxn &amp;lt;&amp;lt; 1], cnt[maxn &amp;lt;&amp;lt; 1];
void Init(void) &amp;#123;
    la = tot = 1;
    t[1] = _(0, 0);
    return;
&amp;#125;
void ext(int c) &amp;#123;
    int p = la, np = ++tot;
    la = tot;
    t[np] = _(t[p].l + 1, 0);
    while (p &amp;amp;&amp;amp; !t[p].ne[c])
        t[p].ne[c] = np, p = t[p].f;
    if (!p)
        t[np].f = 1;
    else &amp;#123;
        int q = t[p].ne[c];
        if (t[q].l == t[p].l + 1)
            t[np].f = q;
        else &amp;#123;
            int nq = ++tot;
            t[nq] = _(t[p].l + 1, t[q].f);
            std::copy(t[q].ne, t[q].ne + 26, t[nq].ne);
            while (p &amp;amp;&amp;amp; t[p].ne[c] == q)
                t[p].ne[c] = nq, p = t[p].f;
            t[q].f = nq;
            t[np].f = nq;
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
int now = 0;
void ins(int &amp;amp;p, int l, int r, int v) &amp;#123;
    if (!p)
        p = ++now;
    ++t1[p].u;
    if (l == r)
        return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    if (v &amp;lt;= mid)
        ins(t1[p].l, l, mid, v);
    else
        ins(t1[p].r, mid + 1, r, v);
    return;
&amp;#125;
int ask(int p, int l, int r, int ql, int qr) &amp;#123;
    if (ql &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= qr)
        return t1[p].u;
    int mid = (l + r) &amp;gt;&amp;gt; 1, res = 0;
    if (ql &amp;lt;= mid)
        res = ask(t1[p].l, l, mid, ql, qr);
    if (qr &amp;gt; mid)
        res += ask(t1[p].r, mid + 1, r, ql, qr);
    return res;
&amp;#125;
int merge(int p, int q, int l, int r) &amp;#123;
    if (!p || !q)
        return p + q;
    int np = ++now, mid = (l + r) &amp;gt;&amp;gt; 1;
    t1[np].u = t1[p].u + t1[q].u;
    if (l == r) return np;
    t1[np].l = merge(t1[p].l, t1[q].l, l, mid);
    t1[np].r = merge(t1[p].r, t1[q].r, mid + 1, r);
    return np;
&amp;#125;
int pos[maxn], rt[maxn &amp;lt;&amp;lt; 1];
bool check(int p, int ch, int l, int r) &amp;#123;
    return ask(rt[t[p].ne[ch]], 0, n - 1, l, r) &amp;gt; 0;
&amp;#125;
bool fun(std::string &amp;amp;res, std::string now, std::string &amp;amp;t, int x, int p, int l, int r) &amp;#123;
    // std::cout &amp;lt;&amp;lt; &amp;quot;x = &amp;quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;quot;, now = \&amp;quot;&amp;quot; &amp;lt;&amp;lt; now &amp;lt;&amp;lt; &amp;quot;\&amp;quot;;\n&amp;quot;;
    if (x != (int)t.length() &amp;amp;&amp;amp; check(p, t[x] - &amp;#39;a&amp;#39;, l + x, r) &amp;amp;&amp;amp; fun(res, now + t[x], t, x + 1, ::t[p].ne[t[x] - &amp;#39;a&amp;#39;], l, r))
        return 1;
    for (int i = (x == (int)t.length()) ? 0 : t[x] - &amp;#39;a&amp;#39; + 1; i &amp;lt; 26; ++i) &amp;#123;
        if (check(p, i, l + x, r)) &amp;#123;
            now += i + &amp;#39;a&amp;#39;;
            res = now;
            return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
std::string solve(std::string &amp;amp;t, int l, int r) &amp;#123;
    std::string res;
    return fun(res, &amp;quot;&amp;quot;, t, 0, 1, l, r) ? res : &amp;quot;-1&amp;quot;;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    int q;
    std::string s;
    std::cin &amp;gt;&amp;gt; s &amp;gt;&amp;gt; q;
    n = (int)s.length();
    Init();
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        ext(s[i] - &amp;#39;a&amp;#39;);
        pos[i] = la;
        ins(rt[la], 0, n - 1, i);
    &amp;#125;
    siz = log(tot) / log(2.0);
    for (int i = 1; i &amp;lt;= tot; ++i)
        ++cnt[t[i].l];
    std::partial_sum(cnt + 1, cnt + tot + 1, cnt + 1);
    for (int i = 1; i &amp;lt;= tot; ++i)
        tab[cnt[t[i].l]--] = i;
    for (int i = 1; i &amp;lt;= tot; ++i) &amp;#123;
        int u = tab[i];
        fa[u][0] = t[u].f;
        for (int j = 1; j &amp;lt;= siz; ++j)
            fa[u][j] = fa[fa[u][j - 1]][j - 1];
    &amp;#125;
    for (int i = tot; i; --i) &amp;#123;
        int u = tab[i];
        if (t[u].f)
            rt[t[u].f] = merge(rt[t[u].f], rt[u], 0, n - 1);
    &amp;#125;
    while (q--) &amp;#123;
        int l, r;
        std::string t;
        std::cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r &amp;gt;&amp;gt; t;
        std::cout &amp;lt;&amp;lt; solve(t, l - 1, r - 1) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-六出祁山&#34;&gt;A. 六出祁山&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5170/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5170/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是能用贪心拿 60pts 的 DP 题 /tuu&lt;/p&gt;
&lt;p&gt;需要先把暴力的式子写出来。设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, j}\)&lt;/span&gt; 为将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 山修改高度为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的代价，则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i, j} = \min\limits_{k\in [j-d, j+d]}\left\{f_{i-1, k}\right\} + |h_i - j|
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注意到可以单调队列优化。但是这样做复杂度还是 &lt;span class=&#34;math inline&#34;&gt;\(O(nV)\)&lt;/span&gt; 的，根本原因在于第二维这个 &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; 的状态数太多了。&lt;/p&gt;
&lt;p&gt;根据直觉，最后 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的值应为 &lt;span class=&#34;math inline&#34;&gt;\(k+d\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(k-d\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;。也就是说，我们可以认为，合法的状态数为所有的 &lt;span class=&#34;math inline&#34;&gt;\(a_i+x\times d, x\in[-n, n]\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;正确性证明……&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;考虑全部更改完后的结束状态，即最后的最优状态。&lt;/p&gt;
&lt;p&gt;考虑所有山中最矮的山 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，此山的高度要么为 &lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt;，要么为前一座山的高度 &lt;span class=&#34;math inline&#34;&gt;\(-d\)&lt;/span&gt;，要么为后一座山的高度 &lt;span class=&#34;math inline&#34;&gt;\(-d\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑第二矮的山，以此类推即可。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;将第二维的状态集大小减少为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;，总时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;需注意到因为 &lt;span class=&#34;math inline&#34;&gt;\(a_i+x\times d\)&lt;/span&gt; 中的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 范围为 &lt;span class=&#34;math inline&#34;&gt;\([-n, n]\)&lt;/span&gt; 共 &lt;span class=&#34;math inline&#34;&gt;\(2\times n\)&lt;/span&gt;，所以 DP 数组第二维大小一定要开 &lt;span class=&#34;math inline&#34;&gt;\(2\times n^2\)&lt;/span&gt; 呀！！！&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
using ll = long long;
const int maxn = 305;
const int maxm = 18e4 + 5;
const ll inf = 0x3f3f3f3f3f3f3f3f;
ll d;
int n;
ll h[maxn];
ll f[maxn][maxm];
int main() &amp;#123;
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    memset(f, 0x3f, sizeof (f));
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; d;
    std::vector&amp;lt;ll&amp;gt; st;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; h[i];
        for (ll j = -n; j &amp;lt;= n; ++j)
            st.push_back(h[i] + j * d);
    &amp;#125;
    std::sort(st.begin(), st.end());
    st.erase(std::unique(st.begin(), st.end()), st.end());
    auto abs = [&amp;amp;](ll x) -&amp;gt; ll &amp;#123; return x &amp;gt;= 0 ? x : -x; &amp;#125;;
    f[1][lower_bound(st.begin(), st.end(), h[1]) - st.begin()] = 0;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        int h(1), t(0), p(-1);
        static int q[maxm];
        for (int j = 0; j &amp;lt; (int)st.size(); ++j) &amp;#123;
            while (p &amp;lt; (int)st.size() &amp;amp;&amp;amp; st[p + 1] &amp;lt;= st[j] + d) &amp;#123;
                ++p;
                while (h &amp;lt;= t &amp;amp;&amp;amp; f[i - 1][p] &amp;lt;= f[i - 1][q[t]])
                    --t;
                q[++t] = p;
            &amp;#125;
            while (h &amp;lt;= t &amp;amp;&amp;amp; st[q[h]] &amp;lt; st[j] - d)
                ++h;
            if (h &amp;lt;= t)
                f[i][j] = std::min(inf, f[i - 1][q[h]] + abs(st[j] - ::h[i]));
        &amp;#125;
    &amp;#125;
    ll res = f[n][std::lower_bound(st.begin(), st.end(), h[n]) - st.begin()];
    std::cout &amp;lt;&amp;lt; (res == inf ? -1 : res) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-水淹七军&#34;&gt;B. 水淹七军&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5170/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5170/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;容易发现最后连出来一定是没有环的。所以一定是一个 DAG。&lt;/p&gt;
&lt;p&gt;我们知道状态压缩是会遍历到每一种情况的，所以我们可以假设当前的 DAG 就是该状态下的最优。&lt;/p&gt;
&lt;p&gt;至于这个「最优」如何定义就要交给我们了。我们不妨强制认为这个 DAG 是按层序遍历得到的，也就是说连续遍历到的点属于同一层（这里的层是指某点到任意源点的最长路长度）。&lt;/p&gt;
&lt;p&gt;显然只有一组相互之间没有任何连边的点才能组成同一层。不妨枚举点集然后暴力转移，转移时记录路径即可。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;注意到在写这玩意儿的时候我还不会 &lt;a href=&#34;/2024/05/17/20240517/&#34;&gt;状压枚举子集&lt;/a&gt;，所以枚举子集的部分可能打得比较抽象。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxn = 25;
const int inf = 0x3f3f3f3f;
const int maxm = (1 &amp;lt;&amp;lt; 16) + 5;
int n, res;
int tag[maxn][maxn];
int f[maxn], g[maxn];
int solve(std::vector&amp;lt;int&amp;gt;&amp;amp; a) &amp;#123;
    static int g[maxn];
    static int f[maxm], p[maxm];
    int n(a.size()), siz(1 &amp;lt;&amp;lt; n);
    std::fill(g, g + n, 0);
    std::fill(p, p + siz + 1, 0);
    std::fill(f, f + siz + 1, inf);
    std::vector&amp;lt;int&amp;gt; st;
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        for (int j = 0; j &amp;lt; n; ++j) &amp;#123;
            if (::g[a[i]] &amp;amp; (1 &amp;lt;&amp;lt; a[j]))
                g[i] |= 1 &amp;lt;&amp;lt; j;
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt; siz; ++i) &amp;#123;
        int now = 0;
        for (int j = 0; j &amp;lt; n; ++j) &amp;#123;
            if (i &amp;amp; (1 &amp;lt;&amp;lt; j))
                now |= g[j];
        &amp;#125;
        if (!(now &amp;amp; i))
            st.push_back(i), f[i] = 0, p[i] = i;
        for (auto j : st) &amp;#123;
            if (!(i &amp;amp; j)) &amp;#123;
                if (f[i | j] &amp;gt; f[i] + 1)
                    f[i | j] = f[i] + 1, p[i | j] = j;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    int now = siz - 1;
    while (now) &amp;#123;
        int fa = now ^ p[now];
        for (int i = 0; i &amp;lt; n; ++i)
            if (p[now] &amp;amp; (1 &amp;lt;&amp;lt; i))
                for (int j = 0; j &amp;lt; n; ++j)
                    if ((fa &amp;amp; (1 &amp;lt;&amp;lt; j)) &amp;amp;&amp;amp; tag[a[j]][a[i]] == 2)
                        tag[a[j]][a[i]] = 1, tag[a[i]][a[j]] = -1;
        now = fa;
    &amp;#125;
    return f[siz - 1];
&amp;#125;
int find(int x) &amp;#123;
    return x == f[x] ? x : f[x] = find(f[x]);
&amp;#125;
int main() &amp;#123;
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    int m;
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt; &amp;gt; edge;
    for (int i = 0; i &amp;lt; n; ++i)
        f[i] = i;
    while (m--) &amp;#123;
        int x, y;
        std::cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        edge.emplace_back(--x, --y);
        f[find(x)] = find(y);
        g[x] |= 1 &amp;lt;&amp;lt; y;
        g[y] |= 1 &amp;lt;&amp;lt; x;
        tag[x][y] = tag[y][x] = 2;
    &amp;#125;
    std::vector&amp;lt;int&amp;gt; ver[maxn];
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        ver[find(i)].push_back(i);
    &amp;#125;
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        if (f[i] == i)
            res = std::max(res, solve(ver[i]));
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    for (auto i : edge) &amp;#123;
        if (tag[i.first][i.second] == 1)
            std::cout &amp;lt;&amp;lt; i.first + 1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; i.second + 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        else std::cout &amp;lt;&amp;lt; i.second + 1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; i.first + 1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-煮酒论英雄&#34;&gt;C. 煮酒论英雄&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5170/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5170/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意到如果存在串被其他串包含那么直接将其毙掉就可以了。&lt;/p&gt;
&lt;p&gt;对于相互不完全包含的串，我们令 &lt;span class=&#34;math inline&#34;&gt;\(mx_{i, j, 0/1, 0/1}\)&lt;/span&gt; 表示将正序 / 逆序的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 串拼到正序 / 逆序的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 串之前，两者共用相接公共部分的串长。这个可以用字符串哈希暴力求。&lt;/p&gt;
&lt;p&gt;用状压枚举拼接顺序，求得最小总串长即可。&lt;/p&gt;
&lt;p&gt;注意如果去掉被包含串后 &lt;span class=&#34;math inline&#34;&gt;\(n=1\)&lt;/span&gt; 时需直接输出串的 border；以及答案需和 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 取 &lt;span class=&#34;math inline&#34;&gt;\(\max\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;实现起来又臭又长，但实际上思路确实非常简单。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
using ll = long long;
const int p = 131;
const int maxn = 25;
const int lim = 2e4;
const int maxl = 2e4 + 5;
const int mod = 998244353;
const int inf = 0x3f3f3f3f;
const int maxm = (1 &amp;lt;&amp;lt; 16) + 5;
int n;
std::vector&amp;lt;std::string&amp;gt; s;
std::vector&amp;lt;std::vector&amp;lt;ll&amp;gt; &amp;gt; h[2];
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    std::cin &amp;gt;&amp;gt; n;
    s.resize(n);
    h[0].resize(n);
    h[1].resize(n);
    static ll base[maxl];
    static bool del[maxn];
    base[0] = 1;
    for (int i = 1; i &amp;lt;= lim; ++i)
        base[i] = base[i - 1] * p % mod;

    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; s[i];
        h[0][i].resize((int)s[i].length());
        h[1][i].resize((int)s[i].length());
        ll x = 0;
        for (int j = 0; j &amp;lt; (int)s[i].length(); ++j, (x *= p) %= mod)
            h[0][i][j] = ((x += s[i][j]) %= mod);
        std::reverse(s[i].begin(), s[i].end());
        x = 0;
        for (int j = 0; j &amp;lt; (int)s[i].length(); ++j, (x *= p) %= mod)
            h[1][i][j] = ((x += s[i][j]) %= mod);
        std::reverse(s[i].begin(), s[i].end());
    &amp;#125;

    std::vector&amp;lt;int&amp;gt; tab;
    auto gethash = [&amp;amp;](int i, int l, int r, bool t) -&amp;gt; ll &amp;#123;
        if (l &amp;gt; r) return 0;
        ll res = (h[t][i][r] - (l ? h[t][i][l - 1] : 0) * base[r - l + 1] % mod);
        return (res % mod + mod) % mod;
    &amp;#125;;
    // ll now = 0;
    // for (int i = 0; i &amp;lt;= 4; ++i)
    //     now = (now * p + s[1][i]) % mod;
    // printf(&amp;quot;now = %lld\n&amp;quot;, now);
    // now = 0;
    // for (int i = 3; i &amp;lt;= 7; ++i)
    //     now = (now * p + s[0][i]) % mod;
    // printf(&amp;quot;now = %lld\n&amp;quot;, now);
    // printf(&amp;quot;# %lld\n&amp;quot;, h[0][0].back());
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        tab.push_back(i);
        for (int j = 0; j &amp;lt; n; ++j)
            if (!del[j] &amp;amp;&amp;amp; i != j)
                for (int k = 0; k &amp;lt;= ((int)s[j].length()) - ((int)s[i].length()); ++k) &amp;#123;
                    // printf(&amp;quot;i = %d, j = %d, k = %d, %lld / %lld\n&amp;quot;, i, j, k,
                    //         gethash(i, 0, ((int)s[i].length()) - 1, 0), gethash(j, k, k + ((int)s[i].length()) - 1, 0));
                    if (h[0][i].back() == gethash(j, k, k + ((int)s[i].length()) - 1, 0)) &amp;#123;
                        tab.pop_back();
                        del[i] = 1;
                        goto outo;
                    &amp;#125;
                &amp;#125;
        outo: ;
    &amp;#125;
    n = (int)tab.size();
    if (n == 1) &amp;#123;
        int border;
        for (border = ((int)s[tab[0]].length()) - 1; ~border; --border) &amp;#123;
            if (gethash(tab[0], 0, border - 1, 0) == gethash(tab[0], ((int)s[tab[0]].length()) - border, ((int)s[tab[0]].length()) - 1, 0))
                break;
        &amp;#125;
        std::cout &amp;lt;&amp;lt; std::max(2, ((int)s[tab[0]].length()) - border) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    else &amp;#123;
        static int mx[maxn][maxn][2][2];
        for (int i = 0; i &amp;lt; n; ++i)
            for (int j = 0; j &amp;lt; n; ++j)
                for (int a = 0; a &amp;lt; 2; ++a)
                    for (int b = 0; b &amp;lt; 2; ++b)
                        for (int k = std::min((int)s[tab[i]].length(), (int)s[tab[j]].length()); ~k; --k) &amp;#123;
                            if (gethash(tab[i], ((int)s[tab[i]].length()) - k, ((int)s[tab[i]].length()) - 1, a) ==
                                                                                            gethash(tab[j], 0, k - 1, b)) &amp;#123;
                                mx[i][j][a][b] = (int)s[tab[j]].length() - k;
                                // printf(&amp;quot;%d(%d) + %d(%d) = %d, k = %d\n&amp;quot;, i, a, j, b, mx[i][j][a][b], k);
                                break;
                            &amp;#125;
                        &amp;#125;
        static int f[maxm][maxn][2];
        memset(f, 0x3f, sizeof (f));

        int siz = 1 &amp;lt;&amp;lt; n, res = inf;
        f[1][0][0] = (int)s[tab[0]].length();
        for (int i = 1; i &amp;lt; siz; ++i)
            for (int j = 0; j &amp;lt; n; ++j)
                if (i &amp;amp; (1 &amp;lt;&amp;lt; j))
                    for (int a = 0; a &amp;lt; 2; ++a) &amp;#123;
                        // printf(&amp;quot;f[%d][%d][%d] = %d\n&amp;quot;, i, j, a, f[i][j][a]);
                        for (int k = 0; k &amp;lt; n; ++k)
                            if (!(i &amp;amp; (1 &amp;lt;&amp;lt; k)))
                                for (int b = 0; b &amp;lt; 2; ++b)
                                    f[i | (1 &amp;lt;&amp;lt; k)][k][b] = std::min(f[i | (1 &amp;lt;&amp;lt; k)][k][b], f[i][j][a] + mx[j][k][a][b]);
                        if (i == siz - 1)
                            res = std::min(res, f[i][j][a] - (int)s[tab[0]].length() + mx[j][0][a][0]);
                    &amp;#125;
        
        std::cout &amp;lt;&amp;lt; std::max(2, res) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-捏斑马&#34;&gt;A. 捏斑马&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5175/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5175/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我甚至不会（）&lt;/p&gt;
&lt;p&gt;翻转 + 拼接本质上就是首尾相接。我们把字符串整个拼到自己后边儿，然后任取一段长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的串就可以得到一个倒过来的操作后的字符串。&lt;/p&gt;
&lt;p&gt;注意到可以操作很多次。但是既然我们操作后的串也可以在这个拼接后的串中找到了，那么其实多次操作后的也行。&lt;/p&gt;
&lt;p&gt;所以呢我们在拼接后的串种枚举每一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的串计算答案即可。&lt;/p&gt;
&lt;p&gt;具体怎么算呢？注意到只看开头，也就是在新串中只看离我们当前枚举的右端点最近的那一段，所以我们打一个双指针，看这一段是否在右移后仍然合法，如果非法就把答案区间左端点更新为右端点自己。以及注意到左右端点的距离不能超过 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
int res;
std::string s;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    std::cin &amp;gt;&amp;gt; s;
    int l = 0, r = -1, n = (int)s.length();
    char la = 0;
    s += s;
    while (++r &amp;lt; (int)s.length()) &amp;#123;
        if (s[r] == la)
            l = r;
        while (r - l + 1 &amp;gt; n) ++l;
        la = s[r];
        res = std::max(res, r - l + 1);
    &amp;#125;
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-链状闪电&#34;&gt;D. 链状闪电&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5175/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5175/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;莫名其妙且又臭又长的根号做法。&lt;/p&gt;
&lt;p&gt;容易发现一个怪被杀掉了序列就会裂开成两段连续子序列，以及最先被杀掉的怪物一定血量最少。在裂开来的两段连续子序列中也满足此规律，以此类推。&lt;/p&gt;
&lt;p&gt;考虑对序列建立笛卡尔树。令树根为 &lt;span class=&#34;math inline&#34;&gt;\(rt\)&lt;/span&gt;，当前攻击力为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，记 &lt;span class=&#34;math inline&#34;&gt;\(t_{x, k}=\left\lceil \dfrac {h_x}k \right\rceil\)&lt;/span&gt;，即不考虑其他条件时击倒 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 所需次数。&lt;/p&gt;
&lt;p&gt;那么对于 &lt;span class=&#34;math inline&#34;&gt;\(rt\)&lt;/span&gt; 的左、右儿子 &lt;span class=&#34;math inline&#34;&gt;\(l,r\)&lt;/span&gt;，单考虑这三个怪物所需的总击倒次数，容易发现为 &lt;span class=&#34;math inline&#34;&gt;\(t_{rt,k}+(t_{l,k}-t_{rt,k})+(t_{r,k}-t_{rt,k})\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 引导的子树，此时的实际已攻击次数为 &lt;span class=&#34;math inline&#34;&gt;\(t_{l,k}\)&lt;/span&gt;；所以对于 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 的左右儿子 &lt;span class=&#34;math inline&#34;&gt;\(l&amp;#39;,r&amp;#39;\)&lt;/span&gt;，击倒这两个怪物的所需次数为 &lt;span class=&#34;math inline&#34;&gt;\((t_{l&amp;#39;,k} - t_{l,k})+(t_{r&amp;#39;,k}-t_{l,k})\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 引导的子树同理。&lt;/p&gt;
&lt;p&gt;所以我们就可以知道，如果存在树边 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt;，那么击倒 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的所需次数为 &lt;span class=&#34;math inline&#34;&gt;\(t_{v,k}-t_{u,k}\)&lt;/span&gt;；特别地，击倒 &lt;span class=&#34;math inline&#34;&gt;\(rt\)&lt;/span&gt; 的所需次数为 &lt;span class=&#34;math inline&#34;&gt;\(t_{rt,k}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么我们就可以通过一次 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的树上 DFS 对于一个 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 找到答案了。&lt;/p&gt;
&lt;p&gt;那么对于 &lt;span class=&#34;math inline&#34;&gt;\(2\times 10^4\)&lt;/span&gt; 范围内的所有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，应该怎么办呢？这个时候就要利用 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的性质进行根号分治了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(k\le \sqrt {2\times 10^4}\)&lt;/span&gt;，我们大可以直接做这么多次 DFS 得到答案；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;gt;\sqrt {2\times 10^4}\)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;我们容易发现最终的结果是若干个 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的值相加减得到的，而每个 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的权值 &lt;span class=&#34;math inline&#34;&gt;\(cnt\)&lt;/span&gt; 取决于其在笛卡尔树上的儿子个数，有多少就在 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的基础上减去多少。&lt;/p&gt;
&lt;p&gt;由于 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 实在过于特殊，考虑整除分块 / 数论分块。对于每个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;#39;\in (\sqrt {2\times 10^4}, 2\times 10^4]\)&lt;/span&gt;，可能的 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 值只有 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt {2\times 10^4 }\)&lt;/span&gt; 种。计算出对于每个 &lt;span class=&#34;math inline&#34;&gt;\(t&amp;#39;\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(\left\lceil \dfrac {h_x}{k&amp;#39;} \right\rceil=t&amp;#39;\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;#39;\)&lt;/span&gt; 范围，对该范围 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;#39;\)&lt;/span&gt; 的答案区间加上 &lt;span class=&#34;math inline&#34;&gt;\(t&amp;#39;\times cnt\)&lt;/span&gt; 即可，可以使用差分。&lt;/p&gt;
&lt;p&gt;至此，就可以在一次 DFS 内解决这种情况下的问题。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n\sqrt {2\times 10^4})\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;值得注意的是，我在做这道题的时候并没有意识到自己用到了笛卡尔树，&lt;/p&gt;
&lt;p&gt;所以代码中笛卡尔树的建树部分可能长得特别抽象（&lt;/p&gt;
&lt;p&gt;这里是使用了下标上的 ST 表带 log 地求解了左右儿子。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxm = 35;
const int maxn = 1e5 + 5;
using ll = long long;
ll res;
int n, k, l;
int g[maxn][2];
int f[maxn][maxm];
int a[maxn], t[maxn];
ll dif[maxn], cnt[maxn];
int ask(int l, int r) &amp;#123;
    if (l &amp;gt; r) return 0;
    int k = log(r - l + 1) / log(2.0);
    return (a[f[l][k]] &amp;lt; a[f[r - (1 &amp;lt;&amp;lt; k) + 1][k]]) ? f[l][k] : f[r - (1 &amp;lt;&amp;lt; k) + 1][k];
&amp;#125;
void bld(int rt, int l, int r) &amp;#123;
    if (rt != l) &amp;#123;
        g[rt][0] = ask(l, rt - 1);
        bld(g[rt][0], l, rt - 1);
    &amp;#125;
    if (rt != r) &amp;#123;
        g[rt][1] = ask(rt + 1, r);
        bld(g[rt][1], rt + 1, r);
    &amp;#125;
    return;
&amp;#125;
// k &amp;lt;= sqrt(lim)
void DFS(int x, int k, int fa) &amp;#123;
    t[x] = (a[x] + k - 1) / k;
    res += t[x] - t[fa];
    for (int i = 0; i &amp;lt; 2; ++i) &amp;#123;
        if (g[x][i])
            DFS(g[x][i], k, x);
    &amp;#125;
    return;
&amp;#125;
// k &amp;gt; sqrt(lim)
void DFS(int x, int fa) &amp;#123;
    ++cnt[x];
    --cnt[fa];
    for (int i = 0; i &amp;lt; 2; ++i) &amp;#123;
        if (g[x][i])
            DFS(g[x][i], x);
    &amp;#125;
    int l = k + 1, r;
    // 注意这里 i 的范围判定，如果直接写成 i * i &amp;lt;= k 会少计算一些情况
    for (int i = 1; (i - 1) * (i - 1) &amp;lt; k; ++i) &amp;#123;
        r = l - 1;
        l = (a[x] + i - 1) / i;
        // fprintf(stderr, &amp;quot;%d: [%d, %d] += %d * %d\n&amp;quot;, a[x], l, r, cnt[x], i);
        dif[l] += i * cnt[x], dif[r + 1] -= i * cnt[x];
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    std::cin &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; a[i];
        f[i][0] = i;
        k = std::max(k, a[i]);
    &amp;#125;
    for (int j = 1; (1 &amp;lt;&amp;lt; j) &amp;lt;= n; ++j)
        for (int i = 1; i + (1 &amp;lt;&amp;lt; j) - 1 &amp;lt;= n; ++i)
            f[i][j] = (a[f[i][j - 1]] &amp;lt; a[f[i + (1 &amp;lt;&amp;lt; (j - 1))][j - 1]]) ? f[i][j - 1] : f[i + (1 &amp;lt;&amp;lt; (j - 1))][j - 1];
    int rt = ask(1, n);
    bld(rt, 1, n);
    for (int i = 1; i * i &amp;lt;= k; ++i) &amp;#123;
        res = 0;
        DFS(rt, i, 0);
        std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
        l = i + 1;
    &amp;#125;
    // fputs(&amp;quot;\n&amp;quot;, stderr);
    DFS(rt, 0);
    std::partial_sum(dif + 1, dif + k + 1, dif + 1);
    for (int i = l; i &amp;lt;= k; ++i)
        std::cout &amp;lt;&amp;lt; dif[i] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-弹飞绵羊&#34;&gt;F. 弹飞绵羊&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/5175/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/5175/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很棒可持久化分块，使我 lxl 旋转。&lt;/p&gt;
&lt;p&gt;笑话：赛后 5s 才交上去。然后 A 了。&lt;/p&gt;
&lt;p&gt;我们猜大家都会普通的弹飞绵羊这道题。就是块间暴力跳嘛。&lt;/p&gt;
&lt;p&gt;这里给一个我自己整的简单实现方法。&lt;/p&gt;
&lt;p&gt;我们把分出来的块视作若干个无关联的散块并纳入块集合；对于每一个版本，用一个大小为 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt n\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(id\)&lt;/span&gt; 数组记录每一位置的块在块集合中对应的位置。&lt;/p&gt;
&lt;p&gt;然后该怎么搞怎么搞即可。&lt;/p&gt;
&lt;p&gt;P.S. zwb 坚定不移信仰 lxl 神教于是决定用可持久化平衡树实现可持久化分块，结果当然是因为多了个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 被卡飞了，最后气急败坏慌不择路恼羞成怒抄起了我的代码。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
const int maxk = 320;
const int maxn = 2e5 + 5;
class devicer &amp;#123;
public:
    int l, r;
    std::vector&amp;lt;int&amp;gt; ne, u, a;
    int &amp;amp;nex(int x);
    int &amp;amp;val(int x);
&amp;#125;;
int id[maxn][maxk];
std::vector&amp;lt;devicer&amp;gt; b;
int n, q, ty, siz, k, la;
int a[maxn], tab[maxn], blk[maxn];
void upd(int x, int a, devicer &amp;amp;p) &amp;#123;
    if (x + a &amp;gt; n)
        p.nex(x) = -1, p.val(x) = 1;
    else if (x + a &amp;gt; p.r)
        p.nex(x) = x + a, p.val(x) = 1;
    else
        p.nex(x) = p.nex(x + a), p.val(x) = p.val(x + a) + 1;
    // printf(&amp;quot;x = %d, a = %d, r = %d, upd ne[%d] to %d\n&amp;quot;, x, a, p.r, x, p.nex(x));
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
#endif
    std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q &amp;gt;&amp;gt; ty;
    siz = sqrt(n);
    k = (n + siz - 1) / siz;
    b.resize(k);
    int la = 0, now = k - 1;
    for (auto &amp;amp;i : b)
        i.l = la + 1, la = i.r = i.l + siz - 1;
    b.back().r = n;
    for (int i = 0; i &amp;lt; k; ++i) &amp;#123;
        id[0][i] = i;
        b[i].a.resize(b[i].r - b[i].l + 1);
        b[i].u.resize(b[i].r - b[i].l + 1);
        b[i].ne.resize(b[i].r - b[i].l + 1);
        for (int j = b[i].l; j &amp;lt;= b[i].r; ++j)
            tab[j] = j - b[i].l, blk[j] = i;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        std::cin &amp;gt;&amp;gt; b[blk[i]].a[tab[i]];
    for (int i = n; i; --i)
        upd(i, b[blk[i]].a[tab[i]], b[blk[i]]);
    int ver = 0;
    while (q--) &amp;#123;
        int op, pr, x;
        static int res = 0;
        std::cin &amp;gt;&amp;gt; op &amp;gt;&amp;gt; pr &amp;gt;&amp;gt; x;
        if (!ty)
            res = 0;
        x ^= res;
        if (op == 1) &amp;#123;
            std::copy(id[pr], id[pr] + k, id[++ver]);
            b.push_back(b[id[ver][blk[x]]]);
            id[ver][blk[x]] = ++now;
            std::cin &amp;gt;&amp;gt; b.back().a[tab[x]];
            b.back().a[tab[x]] ^= res;
            for (int i = x; i &amp;gt;= b.back().l; --i)
                upd(i, b.back().a[tab[i]], b.back());
        &amp;#125;
        else &amp;#123;
            int p = x;
            res = 0;
            while (~p) &amp;#123;
                // printf(&amp;quot;p = %d\n&amp;quot;, p);
                res += b[id[pr][blk[p]]].u[tab[p]];
                p = b[id[pr][blk[p]]].ne[tab[p]];
            &amp;#125;
            std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int&amp;amp; devicer::nex(int x) &amp;#123;
    return ne[tab[x]];
&amp;#125;
int&amp;amp; devicer::val(int x) &amp;#123;
    return u[tab[x]];
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="SAM" />
        <category term="状压" />
        <category term="分块" />
        <category term="可持久化" />
        <category term="笛卡尔树" />
        <updated>2024-05-01T07:44:48.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240206/</id>
        <title>曼哈顿最小距离生成树</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240206/"/>
        <content type="html">&lt;p&gt;如题。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e.-another-minimum-spanning-tree&#34;&gt;E. Another Minimum Spanning Tree&lt;/h3&gt;
&lt;p&gt;http://222.180.160.110:61235/contest/4940/problem/5&lt;/p&gt;
&lt;p&gt;曼哈顿最小距离生成树。给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个已知坐标的点，两两之间可连权值为曼哈顿距离的边，需求最小生成树。&lt;/p&gt;
&lt;p&gt;有一引理：以任意一点为顶点的大小为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac \pi8\)&lt;/span&gt; 、且一条边与坐标轴重合的角覆盖的范围中，与该点曼哈顿距离最小的点才有可能与此点连边。&lt;/p&gt;
&lt;p&gt;概括说来便是以该点为原点建系，沿坐标轴米字划分。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;浅证&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;首先需认识到，若 &lt;span class=&#34;math inline&#34;&gt;\(w(x,y)&amp;lt;w(x,z)\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(w(y,z)&amp;lt;w(x,z)\)&lt;/span&gt;，则边 &lt;span class=&#34;math inline&#34;&gt;\(E(x,z)\)&lt;/span&gt; 不在最小生成树中。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;1.png&#34; alt=&#34;示意图&#34; /&gt;&lt;figcaption&gt;示意图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;考虑有如上 &lt;span class=&#34;math inline&#34;&gt;\(A,B,C\)&lt;/span&gt; 三点。不妨设 &lt;span class=&#34;math inline&#34;&gt;\(d(A,B)\le d(A,C)\)&lt;/span&gt;。其中 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 为曼哈顿距离。&lt;/p&gt;
&lt;p&gt;由图易知 &lt;span class=&#34;math inline&#34;&gt;\(x_B,y_B,x_C,y_C&amp;gt;0\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(y_B-x_B,y_C-x_C&amp;gt;0\)&lt;/span&gt;。讨论 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 位置关系。下文的 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 均相对 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 而言。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x_B&amp;gt;x_C\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(y_B&amp;gt;y_c\)&lt;/span&gt;：&lt;/p&gt;
此时 &lt;span class=&#34;math inline&#34;&gt;\(d(A,B)&amp;gt;d(B,C)\)&lt;/span&gt;，与题设不符，舍去。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x_B&amp;gt;x_C\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(y_B&amp;lt;y_C\)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;此时 &lt;span class=&#34;math inline&#34;&gt;\(d(A,B)=x_B+y_B,d(B,C)=x_B-x_C+y_C-y_B,d(A,C)=x_C+y_C\)&lt;/span&gt;。由作差法得 &lt;span class=&#34;math inline&#34;&gt;\(d(B,C)-d(A,C)=x_B-y_B-2\times x_C\)&lt;/span&gt;，由 &lt;span class=&#34;math inline&#34;&gt;\(x_B-y_B&amp;lt;0,x_C&amp;gt;0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(d(B,C)&amp;lt;d(A,C)\)&lt;/span&gt;。&lt;/p&gt;
由于 &lt;span class=&#34;math inline&#34;&gt;\(d(A,B),d(B,C)&amp;lt;d(A,C)\)&lt;/span&gt;，故 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 一定不与 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 连边。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x_B&amp;lt;x_C\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(y_B&amp;gt;y_C\)&lt;/span&gt;：&lt;/p&gt;
与上一种情况同理。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x_B&amp;lt;x_C\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(y_B&amp;lt;y_C\)&lt;/span&gt;：&lt;/p&gt;
此时有 &lt;span class=&#34;math inline&#34;&gt;\(d(A,C)=d(A,B)+d(B,C)\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 一定不与 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 连边。&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;p&gt;如此一来，边数便降低到了 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 水平。&lt;/p&gt;
&lt;p&gt;此外，如何识别每个点周围每 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac \pi8\)&lt;/span&gt; 的最近点便是问题所在。&lt;/p&gt;
&lt;p&gt;由于坐标可以变换，此处仅考虑顶点为 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;，始边沿 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 轴正方向，终边沿 &lt;span class=&#34;math inline&#34;&gt;\(k=1\)&lt;/span&gt; 的区域。则对于区域内的点 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;，易知 &lt;span class=&#34;math inline&#34;&gt;\(x_B\geqslant x_A,y_B-y_A\geqslant x_B-x_A\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;后一条规则分离变量则有 &lt;span class=&#34;math inline&#34;&gt;\(y_B-x_B\geqslant y_A-x_A\)&lt;/span&gt;，那么问题转化为二维偏序，其中待求为最小 &lt;span class=&#34;math inline&#34;&gt;\(x_B+y_B\)&lt;/span&gt;，可以用树状数组离散解决。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;由于边是双向的，将问题在平面任意连续 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac \pi 2\)&lt;/span&gt; 范围内进行四次坐标转化即可。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;其实并不一定要连续，只要该区域与其旋转一百八十度后的图形的并可以覆盖整个平面即可。这么看来是不是只能连续。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;我们会发现旋转 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac \pi 8\)&lt;/span&gt; 这个我们在整数域上做不到啊。所以我们考虑旋转 + 翻折，最后整出来差不多这个图形：&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;2.png&#34; alt=&#34;示意图&#34; /&gt;&lt;figcaption&gt;示意图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;然后由于我们发现这些点关于 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 的关系（是通过 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 翻折还是旋转得来的）并不中心对称啊，所以呢就要委屈一下写满八个方向了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
struct _ &amp;#123;
    int x, y, id;
    bool operator&amp;lt; (const _ &amp;amp;q) const &amp;#123;
        return y - x &amp;gt; q.y - q.x;
    &amp;#125;
&amp;#125;;
struct __ &amp;#123;
    int x, y, w;
    __() &amp;#123;&amp;#125;
    __(int x1, int y1, int w1) &amp;#123;
        if (y1 &amp;lt; x1) x1 ^= y1 ^= x1 ^= y1;
        x = x1, y = y1, w = w1;
    &amp;#125;
    bool operator&amp;lt; (const __ &amp;amp;q) const &amp;#123;
        return w == q.w ? x &amp;lt; q.x : w &amp;lt; q.w;
    &amp;#125;
&amp;#125;;
int n;
int Bit[maxn]; 
std::vector&amp;lt;__&amp;gt; e;
_ a[maxn], b[maxn];
int ls[maxn], f[maxn];
int lowbit(int x) &amp;#123; return x &amp;amp; -x; &amp;#125;
void upd(int &amp;amp;i, int j) &amp;#123;
    if (!i || (j &amp;amp;&amp;amp; b[j].x + b[j].y &amp;lt;= b[i].x + b[i].y)) i = j;
    return;
&amp;#125;
void add(int x, int i) &amp;#123;
    for (; x &amp;lt;= n; x += lowbit(x)) upd(Bit[x], i);
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0;
    for (; x; x -= lowbit(x)) upd(res, Bit[x]);
    return res;
&amp;#125; 
int find(int x) &amp;#123; return x == f[x] ? x : f[x] = find(f[x]); &amp;#125;
void merge(int x, int y) &amp;#123; f[find(x)] = find(y); return; &amp;#125;
int abs(int x) &amp;#123; return x &amp;gt;= 0 ? x : -x; &amp;#125;
void adde(int x, int y) &amp;#123;
    if (!x || !y) return;
    e.emplace_back(x, y, abs(a[x].x - a[y].x) + abs(a[x].y - a[y].y));
    return;
&amp;#125;
int main() &amp;#123;
    read(n);
    while (n) &amp;#123;
        e.clear();
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            read(a[i].x), read(a[i].y), a[i].id = i;
            ls[i] = a[i].x, b[i] = a[i], f[i] = i;
        &amp;#125;
        memset(Bit, 0, sizeof (Bit));
        std::sort(b + 1, b + n + 1);
        std::sort(ls + 1, ls + n + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int x = std::lower_bound(ls + 1, ls + n + 1, b[i].x) - ls;
            x = n + 1 - x, adde(b[i].id, b[ask(x)].id), add(x, i);
        &amp;#125;
        memset(Bit, 0, sizeof (Bit));
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            b[i].x = a[i].y, b[i].y = a[i].x;
            ls[i] = b[i].x, b[i].id = i;
        &amp;#125;
        std::sort(b + 1, b + n + 1);
        std::sort(ls + 1, ls + n + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int x = std::lower_bound(ls + 1, ls + n + 1, b[i].x) - ls;
            assert(x &amp;gt;= 1 &amp;amp;&amp;amp; x &amp;lt;= n);
            x = n + 1 - x, adde(b[i].id, b[ask(x)].id), add(x, i);
        &amp;#125;
        memset(Bit, 0, sizeof (Bit));
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            b[i].x = -a[i].x, b[i].y = a[i].y;
            ls[i] = b[i].x, b[i].id = i;
        &amp;#125;
        std::sort(b + 1, b + n + 1);
        std::sort(ls + 1, ls + n + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int x = std::lower_bound(ls + 1, ls + n + 1, b[i].x) - ls;
            assert(x &amp;gt;= 1 &amp;amp;&amp;amp; x &amp;lt;= n);
            x = n + 1 - x, adde(b[i].id, b[ask(x)].id), add(x, i);
        &amp;#125;
        memset(Bit, 0, sizeof (Bit));
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            b[i].x = -a[i].y, b[i].y = a[i].x;
            ls[i] = b[i].x, b[i].id = i;
        &amp;#125;
        std::sort(b + 1, b + n + 1);
        std::sort(ls + 1, ls + n + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int x = std::lower_bound(ls + 1, ls + n + 1, b[i].x) - ls;
            assert(x &amp;gt;= 1 &amp;amp;&amp;amp; x &amp;lt;= n);
            x = n + 1 - x, adde(b[i].id, b[ask(x)].id), add(x, i);
        &amp;#125;
        memset(Bit, 0, sizeof (Bit));
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            b[i].x = -a[i].y, b[i].y = -a[i].x;
            ls[i] = b[i].x, b[i].id = i;
        &amp;#125;
        std::sort(b + 1, b + n + 1);
        std::sort(ls + 1, ls + n + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int x = std::lower_bound(ls + 1, ls + n + 1, b[i].x) - ls;
            assert(x &amp;gt;= 1 &amp;amp;&amp;amp; x &amp;lt;= n);
            x = n + 1 - x, adde(b[i].id, b[ask(x)].id), add(x, i);
        &amp;#125;
        memset(Bit, 0, sizeof (Bit));
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            b[i].x = -a[i].x, b[i].y = -a[i].y;
            ls[i] = b[i].x, b[i].id = i;
        &amp;#125;
        std::sort(b + 1, b + n + 1);
        std::sort(ls + 1, ls + n + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int x = std::lower_bound(ls + 1, ls + n + 1, b[i].x) - ls;
            assert(x &amp;gt;= 1 &amp;amp;&amp;amp; x &amp;lt;= n);
            x = n + 1 - x, adde(b[i].id, b[ask(x)].id), add(x, i);
        &amp;#125;
        memset(Bit, 0, sizeof (Bit));
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            b[i].x = a[i].x, b[i].y = -a[i].y;
            ls[i] = b[i].x, b[i].id = i;
        &amp;#125;
        std::sort(b + 1, b + n + 1);
        std::sort(ls + 1, ls + n + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int x = std::lower_bound(ls + 1, ls + n + 1, b[i].x) - ls;
            assert(x &amp;gt;= 1 &amp;amp;&amp;amp; x &amp;lt;= n);
            x = n + 1 - x, adde(b[i].id, b[ask(x)].id), add(x, i);
        &amp;#125;
        memset(Bit, 0, sizeof (Bit));
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            b[i].x = a[i].y, b[i].y = -a[i].x;
            ls[i] = b[i].x, b[i].id = i;
        &amp;#125;
        std::sort(b + 1, b + n + 1);
        std::sort(ls + 1, ls + n + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int x = std::lower_bound(ls + 1, ls + n + 1, b[i].x) - ls;
            assert(x &amp;gt;= 1 &amp;amp;&amp;amp; x &amp;lt;= n);
            x = n + 1 - x, adde(b[i].id, b[ask(x)].id), add(x, i);
        &amp;#125;
        std::sort(e.begin(), e.end());
        int res = 0;
        for (auto i : e) &amp;#123;
            if (find(i.x) != find(i.y))
                res += i.w, merge(i.x, i.y);
        &amp;#125;
        static int TimeKeeper = 0;
        printf(&amp;quot;Case %d: Total Weight = %d\n&amp;quot;, ++TimeKeeper, res);
        read(n);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="最小生成树" />
        <updated>2024-02-06T01:57:49.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240131/</id>
        <title>USACO2024JAN 三组连打</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240131/"/>
        <content type="html">&lt;p&gt;假的，只连打了两组。Ag 没时间了。日后再补吧。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/65b7b152871b83018ac5e7b7.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;无意中存了题面，但代码大部分因为系统还原消失了，只有文字题解，将就着看吧。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;cu-a.-majority-opinion&#34;&gt;Cu A. Majority Opinion&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10131&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10131&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：任意区间内，若某元素出现个数严格大于区间长度一半，则可将整个区间推平为该值。问最终可以使整个序列被推平为哪些值。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;注意到当任意长度 &lt;span class=&#34;math inline&#34;&gt;\(\ge 2\)&lt;/span&gt; 的区间可以被推平为某种元素时，整个数列都可以被推平为该元素。故目标转化为对于某种元素判定是否存在一个可被其推平的区间。&lt;/p&gt;
&lt;p&gt;统计元素个数采用前缀和。令 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt; 在前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 项中出现的次数，假设有 &lt;span class=&#34;math inline&#34;&gt;\([j,i]\)&lt;/span&gt; 满足条件，贪心可知 &lt;span class=&#34;math inline&#34;&gt;\(h_i=h_j\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么由定义有 &lt;span class=&#34;math inline&#34;&gt;\(i-j+1&amp;lt;2\times (s_i-s_j+1)\)&lt;/span&gt;。典中典，直接移项分离变量。则有 &lt;span class=&#34;math inline&#34;&gt;\(i-2\times s_i-1&amp;lt;j-2\times s_j\)&lt;/span&gt;。令 &lt;span class=&#34;math inline&#34;&gt;\(t_p\gets p-2\times s_p\)&lt;/span&gt;，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 记录 &lt;span class=&#34;math inline&#34;&gt;\(t_j\)&lt;/span&gt; 最大值查看是否有 &lt;span class=&#34;math inline&#34;&gt;\(i,j\)&lt;/span&gt; 满足条件即可。&lt;/p&gt;
&lt;h3 id=&#34;cu-b.-cannonball&#34;&gt;Cu B. Cannonball&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10132&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10132&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：有 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个格子，从 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 格子开始以 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为初始能量向右跳，跳一步的距离为能量大小。格子分两种，一种经过加一定能量并反向，另一种若当前能量大于一定值则可永久摧毁，问跳出范围或无限长时间后可摧毁格子个数。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;不难发现若忽略增加能量为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的跳板则每经过一个跳板可跳距离增加 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，最多增加到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，否则会跳出去。&lt;/p&gt;
&lt;p&gt;注意到调和级数，故直接模拟跳的过程。唯一导致时间无限的情况是存在相邻的增加能量为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的跳板，但其实它具体是什么并不重要，反正我们跳的次数严格大于调和级数后就可以认为进入死循环，直接结束模拟即可。我这里嫌麻烦直接拿了 &lt;span class=&#34;math inline&#34;&gt;\(2\times 10^8\)&lt;/span&gt; 作阈值。&lt;/p&gt;
&lt;h3 id=&#34;cu-c.-balancing-bacteria&#34;&gt;Cu C. Balancing Bacteria&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10133&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10133&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：定义一次操作为选取一个整数 &lt;span class=&#34;math inline&#34;&gt;\(\Delta\le N\)&lt;/span&gt;，并从 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(a_i\gets a_i+\Delta\)&lt;/span&gt; 并令 &lt;span class=&#34;math inline&#34;&gt;\(\Delta\)&lt;/span&gt; 向 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 靠近 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\Delta=0\)&lt;/span&gt; 时停止。问令所有 &lt;span class=&#34;math inline&#34;&gt;\(a_i=0\)&lt;/span&gt; 所需最少操作次数。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;挺有意思的思维题，首先需要进行一个思维转化。&lt;span class=&#34;math inline&#34;&gt;\(\Delta\le N\)&lt;/span&gt; 是一个利于解题的限制，这意味着我们想让任何一个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 改变 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 而不影响到之前的值，从让 &lt;span class=&#34;math inline&#34;&gt;\(a_1\gets 0\)&lt;/span&gt; 入手，进行一次操作后每个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 分到的 &lt;span class=&#34;math inline&#34;&gt;\(\Delta\)&lt;/span&gt; 应依次加 1 或依次减 1。则差分数组为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 后跟着一截 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 是理想状态。中间每有一项不满足规律都会带来额外的操作次数。&lt;/p&gt;
&lt;p&gt;归纳为差分数组的差分数组绝对值之和即为答案。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;ag-a.-cowmpetency&#34;&gt;Ag A. Cowmpetency&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10134&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10134&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：有若干条限制，每条形如 &lt;span class=&#34;math inline&#34;&gt;\(\max\limits_{i=1}^{a_h-1}\{A_i\}=\max\limits_{i=1}^{a_j}\{A_i\}\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(A_{a_h}&amp;gt;\max\limits_{i=1}^{a_h-1}\{A_i\}\)&lt;/span&gt;，部分数已知，构造出符合条件且字典序最小的序列。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;是本场最难题吧，但也没啥卡的。画个线段图容易发现，若将 &lt;span class=&#34;math inline&#34;&gt;\([a,h)\)&lt;/span&gt; 视作一条线段，那么除非 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 相同，否则两条线段不能有交集。不然的话就无解。以及如果存在不满足条件的定值也显然无解。&lt;/p&gt;
&lt;p&gt;从前往后看每个 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 并尝试赋值，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(1\sim a\)&lt;/span&gt; 记录一个需要满足的最大值数值，按照此数值从后往前填空格。&lt;/p&gt;
&lt;p&gt;填完过后扫一遍看看是不是全部合法，可以证明若此时不合法则无解。&lt;/p&gt;
&lt;h3 id=&#34;ag-b.-potion-farming&#34;&gt;Ag B. Potion Farming&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10135&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10135&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：一棵树，每个点上有若干个物品，对于每条从根到叶子的简单路径，可以选择路径上的一个物品，每个物品只能被选一次，问最多可选物品数。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果一个点引导的子树下所有叶子有没有分配到的，就可以把这个点的物品分配给该叶子。&lt;/p&gt;
&lt;p&gt;跑一个树形 DP 即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
int n, x, y;
int cnt[maxn];
std::vector&amp;lt;int&amp;gt; g[maxn];
int a[maxn], f[maxn], p[maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
void DFS(int x, int fa) &amp;#123;
    if ((int)g[x].size() == 1)
        cnt[x] = 1;
    for (auto i : g[x]) &amp;#123;
        if (i == fa) continue;
        DFS(i, x);
        f[x] += f[i];
        cnt[x] += cnt[i];
    &amp;#125;
    if (f[x] &amp;lt; cnt[x])
        f[x] = min(f[x] + a[x], cnt[x]);
    return;
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i) read(p[i]);
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        add(x, y), add(y, x);
    &amp;#125;
    int tot = 0;
    for (int i = 2; i &amp;lt;= n; ++i)
        tot += ((int)g[i].size() == 1);
    for (int i = 1; i &amp;lt;= tot; ++i) ++a[p[i]];
    DFS(1, -1);
    print(f[1], &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h3 id=&#34;ag-c.-cowlendar&#34;&gt;Ag C. Cowlendar&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P10136&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P10136&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;省流：对于给定的序列 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，找出所有满足 &lt;span class=&#34;math inline&#34;&gt;\(a_i\bmod L\)&lt;/span&gt; 的值的种类最多为 3 的 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;也是挺有意思的数学题了。若将 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 按照模 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 的情况分组，则对于任意一个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_i+L)\)&lt;/span&gt; 中最多包含两个分别来自其余两组的数。&lt;/p&gt;
&lt;p&gt;对于去重后 &lt;span class=&#34;math inline&#34;&gt;\(n&amp;gt;3\)&lt;/span&gt; 的情况，由鸽巢得必定有两个数可分为一组。故我们枚举可能的组间间隔，而可能的 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 就是这些间隔的因数。&lt;/p&gt;
&lt;p&gt;由上面我们推出一个合法组间间隔中最多间隔三个数，我们将所有 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+3}-a_i\)&lt;/span&gt;、&lt;span class=&#34;math inline&#34;&gt;\(a_{i+2}-a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+1}-a_i\)&lt;/span&gt; 纳入考虑范围即可。对于所有可能的 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;，直接 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 跑一个 &lt;code&gt;check&lt;/code&gt; 检查是否合法。&lt;/p&gt;
&lt;p&gt;因子个数照理来说是 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt{V}\times n\)&lt;/span&gt; 级别的，但是实测 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 最多只有一百多。估计是因为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 太大就很难构造出更多的合法解吧。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e4 + 5;
const int maxm = 3e4 + 5;
std::set&amp;lt;int&amp;gt; u;
int n, res, mn, tot;
int a[maxn], b[maxm];
bool check(int x) &amp;#123;
    int l1 = 0, l2 = 0, l3 = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (l1 == 0) l1 = a[i];
        else if (x &amp;amp;&amp;amp; (a[i] - l1) % x == 0) l1 = a[i];
        else if (l2 == 0) l2 = a[i];
        else if (x &amp;amp;&amp;amp; (a[i] - l2) % x == 0) l2 = a[i];
        else if (l3 == 0) l3 = a[i];
        else if (x &amp;amp;&amp;amp; (a[i] - l3) % x == 0) l3 = a[i];
        else return 0;
    &amp;#125;
    return 1;
&amp;#125;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]);
        if (!mn || a[i] / 4 &amp;lt; mn) mn = a[i] / 4;
    &amp;#125;
    std::sort(a + 1, a + n + 1);
    n = std::unique(a + 1, a + n + 1) - a - 1;
    if (check(0)) &amp;#123;
        print(mn * (mn + 1) / 2, &amp;#39;\n&amp;#39;);
        return 0;
    &amp;#125;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        b[++tot] = a[i] - a[i - 1];
        if (i &amp;gt;= 3) b[++tot] = a[i] - a[i - 2];
        if (i &amp;gt;= 4) b[++tot] = a[i] - a[i - 3];
    &amp;#125;
    std::sort(b + 1, b + tot + 1);
    tot = std::unique(b + 1, b + tot + 1) - b - 1;
    for (int i = 1; i &amp;lt;= tot; ++i) &amp;#123;
        if (check(b[i])) &amp;#123;
            for (int j = 1; j * j &amp;lt;= b[i]; ++j) &amp;#123;
                if (b[i] % j == 0)
                    u.insert(j), u.insert(b[i] / j);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    for (auto i : u) &amp;#123;
        if (i &amp;gt; mn) break;
        res += i;
    &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/deteails&gt;&lt;/p&gt;
</content>
        <category term="鸽巢原理" />
        <category term="调和级数" />
        <category term="差分" />
        <category term="思维" />
        <category term="树形 DP" />
        <updated>2024-01-31T02:30:29.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240125/</id>
        <title>我超！雀！</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240125/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;http://222.180.160.110:61235/contest/4813/problem/1&#34;&gt;PKUSC2022 Mahjong&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1JB4y1R7AP/&#34; class=&#34;uri&#34;&gt;https://www.bilibili.com/video/BV1JB4y1R7AP/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里是 PKUSC 当时的讲解视频。听说可以证明本题一定有 &lt;span class=&#34;math inline&#34;&gt;\(\le 5\)&lt;/span&gt; 的解。好神奇。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;就比如说我们爆搜，&lt;span class=&#34;math inline&#34;&gt;\(9^4\times 13^4\)&lt;/span&gt; 这个显然干不动对吧，所以我们考虑反过来 DP。&lt;/p&gt;
&lt;p&gt;我们先把字符串转化成计数数组，就是每种牌有多少片。不妨将 &lt;code&gt;1m ~ 9s&lt;/code&gt; 编号为 &lt;span class=&#34;math inline&#34;&gt;\(1\sim 27\)&lt;/span&gt;，记 &lt;span class=&#34;math inline&#34;&gt;\(g_i\)&lt;/span&gt; 为编号为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的牌的数量。&lt;/p&gt;
&lt;p&gt;为什么我们觉得 DP 不好打呢？因为换牌操作可以将两个毫不相干的牌的数量更改，不好记录状态。我们不妨直接将换牌拆成 &lt;em&gt;丢弃一张牌&lt;/em&gt; 和 &lt;em&gt;借取令一张牌&lt;/em&gt; 两个操作。很显然这两个操作数量是一样的，因为我们的牌数量自始至终不变。&lt;/p&gt;
&lt;p&gt;对于比较简单的对子作为终局的情况，我们只关心对数是否为 &lt;span class=&#34;math inline&#34;&gt;\(7\)&lt;/span&gt;，所以设计状态：&lt;span class=&#34;math inline&#34;&gt;\(dp_{i,j}\)&lt;/span&gt; 表示前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 张牌中凑出 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个对子的最小代价。&lt;/p&gt;
&lt;p&gt;那么就分 &lt;em&gt;把当前牌丢一些 / 借一些拿去组对子&lt;/em&gt; 和 &lt;em&gt;直接丢弃当前牌&lt;/em&gt; 两种方案。因为丢 / 借的数量是不确定的，直接 &lt;code&gt;abs&lt;/code&gt; 一下就好。刷表，有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
dp_{i+1,j}=dp_{i,j}+g_{i+1}\\
dp_{i+1,j+1}=dp_{i,j}+|g_{i+1}-2|
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后我们的答案就来自 &lt;span class=&#34;math inline&#34;&gt;\(dp_{27,7}\)&lt;/span&gt;。然后注意这里我们的终局是 14 张牌 &lt;del&gt;你能秒我&lt;/del&gt;，但起手只有 13 张牌，所以其实会有一个额外的借牌操作，假设答案为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，那么其实 &lt;span class=&#34;math inline&#34;&gt;\(dp_{27,7}=2\times x+1\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;有了对子的铺垫，面子手其实也还好。我们需要考虑的是对子和面子的个数。&lt;/p&gt;
&lt;p&gt;但是有个问题，对子只用借 / 丢当前花色，但面子可能是会借 / 丢下一个 / 下下一个花色的。&lt;/p&gt;
&lt;p&gt;所以干脆全部记录到状态里，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k,a,b}\)&lt;/span&gt; 表示当前在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个花色，凑成了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个面子，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个对子，需要 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(i+2\)&lt;/span&gt;。注意因为表示丢借有负数不太容易，不如就直接设成需要的数量了。&lt;/p&gt;
&lt;p&gt;因为这个需要数量只是前面的花色对当前花色的需要 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，我们还要满足当前花色 &lt;strong&gt;自身&lt;/strong&gt; 的需要 &lt;span class=&#34;math inline&#34;&gt;\(now\)&lt;/span&gt;（也就是说当前花色一共需要 &lt;span class=&#34;math inline&#34;&gt;\(a+now\)&lt;/span&gt; 张）。注意这里 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 张全部都是拿去借给前面的花色用的，自己不能用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(k=0\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(now\ge 2\)&lt;/span&gt;，此时可以从 &lt;span class=&#34;math inline&#34;&gt;\(now\)&lt;/span&gt; 里拿两张出来凑对子，剩下的 &lt;span class=&#34;math inline&#34;&gt;\(now - 2\)&lt;/span&gt; 因为肯定 &lt;span class=&#34;math inline&#34;&gt;\(\le 2\)&lt;/span&gt;，所以只能全部拿去凑顺子。所以有：&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[
f_{i+1,j+now-2,1,b+now-2, now-2}=f_{i,j,0,a,b}+|g_{i+1}-(a+now)|
\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(now\ge 3\)&lt;/span&gt;，拿三张凑一面。有：&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[
f_{i+1,j+now-2,k,b+now-3,now-3}=f_{i,j,0,a,b}+|g_{i+1}-(a+now)|
\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(now\ne 0\)&lt;/span&gt;，可以凑顺子，有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i+1,j+now,k,b+now,now}=f_{i,j,0,a,b}+|g_{i+1}-(a+now)|
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注意不能跨花色借牌，也就是不能让 &lt;span class=&#34;math inline&#34;&gt;\(i=8/9/17/18/26/27\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;答案就是 &lt;span class=&#34;math inline&#34;&gt;\(f_{27,4,1,0,0}\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;然后这两个情况取一个 &lt;span class=&#34;math inline&#34;&gt;\(\min\)&lt;/span&gt; 就是答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
using std::cin;
using std::getline;
using str = std::string;
int g[30];
int dp[30][15];
str sm, sp, ss;
int f[30][7][2][7][7];
int abs(int x) &amp;#123; return x &amp;gt;= 0 ? x : -x; &amp;#125;
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
void upd(int &amp;amp;x, int y) &amp;#123; x = min(x, y); return; &amp;#125;
int main() &amp;#123;
    getline(cin, sm, &amp;#39;m&amp;#39;);
    getline(cin, sp, &amp;#39;p&amp;#39;);
    getline(cin, ss, &amp;#39;s&amp;#39;);
    for (auto i : sm) ++g[i - &amp;#39;0&amp;#39;];
    for (auto i : sp) ++g[i - &amp;#39;0&amp;#39; + 9];
    for (auto i : ss) ++g[i - &amp;#39;0&amp;#39; + 18];
    // 打对子
    memset(dp, 0x3f, sizeof (dp));
    dp[0][0] = 0;
    for (int i = 0; i &amp;lt; 27; ++i) &amp;#123;
        for (int j = 0; j &amp;lt;= 7; ++j) &amp;#123;
            if (dp[i][j] == 0x3f3f3f3f) continue;
            upd(dp[i + 1][j], dp[i][j] + g[i + 1]);
            upd(dp[i + 1][j + 1], dp[i][j] + abs(g[i + 1] - 2));
        &amp;#125;
    &amp;#125;
    // 打飞机
    memset(f, 0x3f, sizeof (f));
    f[0][0][0][0][0] = 0;
    for (int i = 0; i &amp;lt; 27; ++i)
    for (int j = 0; j &amp;lt;= 4; ++j)
    for (int k = 0; k &amp;lt;= 1; ++k)
    for (int a = 0; a &amp;lt;= 4; ++a)
    for (int b = 0; b &amp;lt;= 4; ++b) &amp;#123;
        if (i % 9 == 8 &amp;amp;&amp;amp; b) continue;
        if (i % 9 == 0 &amp;amp;&amp;amp; a + b) continue;
        for (int now = 0; now &amp;lt;= 4; ++now) &amp;#123; // 对当前的额外需求 
            if (a + now &amp;gt; 4) continue;
            int v = f[i][j][k][a][b] + abs(g[i + 1] - (a + now));
            if (j + now &amp;lt;= 4 &amp;amp;&amp;amp; b + now &amp;lt;= 4) // 直接硬配顺子 
                upd(f[i + 1][j + now][k][b + now][now], v);
            if (now &amp;gt;= 2 &amp;amp;&amp;amp; !k &amp;amp;&amp;amp; j + now - 2 &amp;lt;= 4 &amp;amp;&amp;amp; b + now - 2 &amp;lt;= 4) // 借两个去凑对子 
                upd(f[i + 1][j + now - 2][1][b + now - 2][now - 2], v);
            if (now &amp;gt;= 3 &amp;amp;&amp;amp; j + now - 2 &amp;lt;= 4 &amp;amp;&amp;amp; b + now - 3 &amp;lt;= 4) // 借两个去凑三不带 
                upd(f[i + 1][j + now - 2][k][b + now - 3][now - 3], v);
        &amp;#125;
    &amp;#125;
    // 拿来借走会算两次 
    print(min(dp[27][7], f[27][4][1][0][0]) / 2, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <updated>2024-01-25T03:20:57.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240111/</id>
        <title>杂题别选谈了</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240111/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;http://222.180.160.110:61235/contest/4665/problem/2&#34;&gt;SP4060 Game with Probability Problem&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_i,g_i\)&lt;/span&gt; 分别表示还剩 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个的时候轮到 Alice 和 Bob 时 &lt;strong&gt;Alice&lt;/strong&gt; 分别的胜率。&lt;/p&gt;
&lt;p&gt;概率经典倒推。那么显然有 &lt;span class=&#34;math inline&#34;&gt;\(f_0=0,g_0=1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后就是一个分讨，讨论这个人想要正面还是反面。很显然，对于同样的剩余棋子数，两个人先手的情况对于这颗棋子的喜爱程度是一样的。也就是说，要么都想要，要么都不想要。&lt;/p&gt;
&lt;p&gt;什么时候想要呢？拿掉过后自己胜率更大，也就是 &lt;span class=&#34;math inline&#34;&gt;\(g_{i-1}&amp;gt;f_{i-1}\)&lt;/span&gt;。此时有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_i=(1-p)\times g_i+p\times g_{i-1}\\
g_i=(1-q)\times f_i+q\times f_{i-1}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;发现是互相影响的，这个时候先不要着急怀疑自己推错了，因为我们这里有两个未知数，又刚好有两个方程，暴解一下就有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_i=\dfrac {(1-p)\times q\times f_{i-1}+p\times g_{i-1}}{1-(1-p)(1-q)}\\
g_i=\dfrac {(1-q)\times p\times g_{i-1}+q\times f_{i-1}}{1-(1-p)(1-q)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后 &lt;span class=&#34;math inline&#34;&gt;\(g_{i-1}&amp;lt;f_{i-1}\)&lt;/span&gt; 的情况也差不多，把拿的概率和不拿的概率换一下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_i=p\times g_i+(1-p)\times g_{i-1}\\
g_i=q\times f_i+(1-q)\times f_{i-1}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;解方程组有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_i=\dfrac {(1-q)\times p\times f_{i-1}+(1-p)\times g_{i-1}}{1-p\times q}\\
g_i=\dfrac {(1-p)\times q\times g_{i-1}+(1-q)\times f_{i-1}}{1-p\times q}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后就可以开始 DP 了。最后的答案就是 &lt;span class=&#34;math inline&#34;&gt;\(f_{\min(n,1000)}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;还有个问题就是 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 特别大然后这个看起来也不太能矩乘，但是这个 DP 式有个好处是它的增长趋势是指数级的，所以我们 DP 到 &lt;span class=&#34;math inline&#34;&gt;\(1000\)&lt;/span&gt; 就可以了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
namespace XSC062 &amp;#123;
const int maxn = 1e3 + 5;
using db = double;
db p, q;
int T, n;
db f[maxn], g[maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;T);
    while (T--) &amp;#123;
        scanf(&amp;quot;%d %lf %lf&amp;quot;, &amp;amp;n, &amp;amp;p, &amp;amp;q);
        f[0] = .0, g[0] = 1.0;
        for (int i = 1; i &amp;lt;= n &amp;amp;&amp;amp; i &amp;lt;= 1000; ++i) &amp;#123;
            if (g[i - 1] &amp;gt; f[i - 1]) &amp;#123;
                f[i] = ((1 - p) * q * f[i - 1] + p * g[i - 1]) / (1 - (1 - p) * (1 - q));
                g[i] = ((1 - q) * p * g[i - 1] + q * f[i - 1]) / (1 - (1 - p) * (1 - q));
            &amp;#125;
            else &amp;#123;
                f[i] = ((1 - q) * p * f[i - 1] + (1 - p) * g[i - 1]) / (1 - p * q);
                g[i] = ((1 - p) * q * g[i - 1] + (1 - q) * f[i - 1]) / (1 - p * q);
            &amp;#125;
        &amp;#125;
        printf(&amp;quot;%.6lf\n&amp;quot;, f[min(n, 1000)]);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
int main() &amp;#123;
    XSC062::main();
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="概率期望" />
        <updated>2024-01-11T03:25:19.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20240106/</id>
        <title>杂题全谈</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20240106/"/>
        <content type="html">&lt;p&gt;想不到好标题了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;有句话怎么说来着，罗马不是一天建成的，是一天天建成的。&lt;/p&gt;
&lt;p&gt;还有什么，Do in Rome as the Romans’ do，还有一句，All roads leads to Rome。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-连续的零-zero&#34;&gt;A. 连续的零 zero&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做个前缀和，看看任意一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的区间中有几个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 5e5 + 5;
const int inf = 0x3f3f3f3f;
int n, m, res = inf;
int a[maxn], s[maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        scanf(&amp;quot;%1d&amp;quot;, &amp;amp;a[i]);
        s[i] = s[i - 1] + a[i];
        if (i &amp;gt;= m)
            res = min(res, s[i] - s[i - m]);
    &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-反回文串-anti&#34;&gt;B. 反回文串 anti&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 为奇时，中间的元素一定和自己相等，故无解。&lt;/p&gt;
&lt;p&gt;当数量最多的一个字符个数超过 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 时，由鸽巢得无解。&lt;/p&gt;
&lt;p&gt;剩下的情况一定有解。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;证明&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;可以找到一种合法的构造方式。我们列出一个列数为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;，行数为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 的表格，将所有相同字母排列在一起，按照从左到右，从上到下的方式将字母填入表格，最后将第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行第一列的字母填入 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行第二列的字母填入 &lt;span class=&#34;math inline&#34;&gt;\(a_{n-i+1}\)&lt;/span&gt;，即可完成构造。&lt;/p&gt;
&lt;p&gt;一种字母只在第一列或第二列出现当然合法，如果从第一列持续到第二列，因为任意字母出现次数不超过 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 次，所以同一行的两列不会出现同一种字母。&lt;/p&gt;
&lt;p&gt;这叫什么，有字证明。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;感觉可以拿去出一道类似于「找到字符串字典序最小的反回文串」之类的小水题&lt;/del&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;然后现在我们知道有解了，怎么找到最优解呢。&lt;/p&gt;
&lt;p&gt;比如有一组 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_{n-i+1})=(\texttt a, \texttt a)\)&lt;/span&gt;，还有一组 &lt;span class=&#34;math inline&#34;&gt;\((a_j, a_{n-j+1})=(\texttt b, \texttt b)\)&lt;/span&gt;，那我们直接把 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 交换，皆大欢喜。&lt;/p&gt;
&lt;p&gt;这就说明我们需要把值不相等的非法 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 配对。&lt;/p&gt;
&lt;p&gt;然后我们就可以沿用证明中的构造方式，分组配对，一定最优，每组代价为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;同一行两个值 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 相等，因为已经最优了，所以不能再在非法串中寻找答案。应该找合法对中某个值交换，每组代价为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;。具体和谁交换我们不用担心，只要找到一组 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_{n-i+1})\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\(a_i\ne v\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(a_{n-i+1}\ne v\)&lt;/span&gt; 就可以了，然后我们又知道 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的个数 &lt;span class=&#34;math inline&#34;&gt;\(\ne \dfrac n2\)&lt;/span&gt;，假设 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 对中每队都有至少一个 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;，由于当前这一对有两个相同的 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的个数就会大于 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt;，矛盾了，所以一定能找到。&lt;/p&gt;
&lt;p&gt;对于非法总对数是奇数的情况，我们要钦定一个非法对强制让其和合法对交换，贪心一下取非法对数量最多的 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的某一对最优。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxm = 35;
const int maxn = 2e5 + 5;
char s[maxn];
int cnt[maxm], p[maxn];
int T, n, tot, res, now;
int main() &amp;#123;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;T);
    while (T--) &amp;#123;
        tot = 0;
        scanf(&amp;quot;%d %s&amp;quot;, &amp;amp;n, s + 1);
        if (n &amp;amp; 1) &amp;#123;
            puts(&amp;quot;-1&amp;quot;);
            continue;
        &amp;#125;
        memset(cnt, 0, sizeof (cnt));
        for (int i = 1; i &amp;lt;= n; ++i)
            ++cnt[s[i] - &amp;#39;a&amp;#39; + 1];
        for (int i = 1; i &amp;lt;= 26; ++i) &amp;#123;
            if (cnt[i] * 2 &amp;gt; n) &amp;#123;
                puts(&amp;quot;-1&amp;quot;);
                goto noSol;
            &amp;#125;
        &amp;#125;
        memset(cnt, 0, sizeof (cnt));
        for (int i = 1; i * 2 &amp;lt;= n; ++i) &amp;#123;
            if (s[i] == s[n - i + 1])
                ++cnt[s[i] - &amp;#39;a&amp;#39; + 1], ++tot;
        &amp;#125;
        std::sort(cnt + 1, cnt + 27,
                    std::greater&amp;lt;int&amp;gt;());
        res = now = 0;
        if (tot &amp;amp; 1) &amp;#123;
            res = 1, --cnt[1];
            std::sort(cnt + 1, cnt + 27,
                        std::greater&amp;lt;int&amp;gt;());
        &amp;#125;
        for (int i = 1; i &amp;lt;= 26; ++i) &amp;#123;
            while (cnt[i]--) &amp;#123;
                if (++now &amp;gt; tot / 2) &amp;#123;
                    if (i == p[now - tot / 2])
                        res += 2;
                    else ++res;
                &amp;#125;
                else p[now] = i;
            &amp;#125;
        &amp;#125;
        print(res, &amp;#39;\n&amp;#39;);
        noSol: ;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-除与减-divsub&#34;&gt;C. 除与减 divsub&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;小数学，还好。&lt;/p&gt;
&lt;p&gt;假设 &lt;span class=&#34;math inline&#34;&gt;\(n=d\times k^p\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(k\nmid d\)&lt;/span&gt;，那么我们分两种情况讨论。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(p=0\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(k\nmid n\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(n\bmod k=1\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(k\mid (n-1)\)&lt;/span&gt;。&lt;/p&gt;
这个时候问 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的个数就相当于是在问 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 除 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 以外的因子个数。假设 &lt;span class=&#34;math inline&#34;&gt;\(n-1={x_1}^{p_1}{x_2}^{p_2}\cdots {x_m}^{p_m}\)&lt;/span&gt;，那么答案为 &lt;span class=&#34;math inline&#34;&gt;\((\prod p_i+1)-1\)&lt;/span&gt;，减去的是 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(p\ne 0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(k\mid n\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这个时候好像并没有什么好的转化。好消息是 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的范围是 &lt;span class=&#34;math inline&#34;&gt;\(10^{12}\)&lt;/span&gt;，根号枚举因数复杂度跑得过。所以我们就可以暴力判定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的所有因数是否满足条件。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;时间复杂度，&lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt n\times \log n)\)&lt;/span&gt;，枚举因数是根号，算次数（也就是算 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;）是 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
int n, m, res, cnt;
int main() &amp;#123;
    read(n), m = n;
    for (int i = 2; i * i &amp;lt;= n; ++i) &amp;#123;
        if (n % i == 0) &amp;#123;
            m = n;
            while (m % i == 0) m /= i;
            if (m % i == 1) ++res;
            if (i * i != n) &amp;#123;
                m = n;
                while (m % (n / i) == 0)
                    m /= (n / i);
                if (m % (n / i) == 1) ++res;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    m = n - 1, cnt = 1;
    for (int i = 2; i * i &amp;lt;= m; ++i) &amp;#123;
        if (m % i == 0) &amp;#123;
            int now = 0;
            while (m % i == 0)
                ++now, m /= i;
            cnt *= now + 1;
        &amp;#125;
    &amp;#125;
    if (m != 1) cnt *= 2;
    print(res + cnt, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-图书管理员-librarian&#34;&gt;D. 图书管理员 librarian&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[SDOI2008] 郁闷的小 J。&lt;/p&gt;
&lt;p&gt;关于这个，我们发现自己不会考场现冲主席树。哎，打 CDQ 又怕写挂。&lt;/p&gt;
&lt;p&gt;我们发现这道题的修改都是单点的，询问也只关于某一种颜色，不同的颜色之间没有影响。&lt;/p&gt;
&lt;p&gt;于是我们可以把操作离线下来，初始视作将某颜色在某位置增加，修改视作将某颜色在某位置删除，将另一颜色在该位置增加，将所有操作按颜色离散化分类然后 &lt;code&gt;vector&lt;/code&gt; 下来，对于所有颜色从前到后树状数组做一遍操作就能 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n+q\log n)\)&lt;/span&gt; 解决。&lt;/p&gt;
&lt;p&gt;树状数组清空是肯定不能 &lt;code&gt;memset&lt;/code&gt; 的，复杂度不对。那么怎么办呢？把所有操作撤回去就可以了。&lt;/p&gt;
&lt;p&gt;顺带一提我是洛谷上最优解。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e5 + 5;
struct __ &amp;#123;
    int ty, l, r, v;
    __() &amp;#123;&amp;#125;
    __(int t1, int l1, int r1, int v1 = 0) &amp;#123;
        if (t1 == 0)
            ty = 0, l = l1, v = r1;
        else ty = 1, l = l1, r = r1, v = v1;
    &amp;#125;
&amp;#125;;
char ty;
std::map&amp;lt;int, int&amp;gt; tab;
std::vector&amp;lt;__&amp;gt; q[maxn];
int n, m, tot, x, y, v, id;
int Bit[maxn], a[maxn], res[maxn];
int lowbit(int x) &amp;#123; return x &amp;amp; -x; &amp;#125;
void add(int x, int v) &amp;#123;
    for (; x &amp;lt;= n; x += lowbit(x))
        Bit[x] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0;
    for (; x; x -= lowbit(x)) res += Bit[x];
    return res;
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]);
        if (!tab.count(a[i]))
            tab[a[i]] = ++tot;
        a[i] = tab[a[i]];
        q[a[i]].emplace_back(0, i, 1);
    &amp;#125;
    while (m--) &amp;#123;
        scanf(&amp;quot;%1s&amp;quot;, &amp;amp;ty);
        if (ty == &amp;#39;C&amp;#39;) &amp;#123;
            read(x), read(y);
            if (!tab.count(y))
                tab[y] = ++tot;
            y = tab[y];
            q[a[x]].emplace_back(0, x, -1);
            q[a[x] = y].emplace_back(0, x, 1);
        &amp;#125;
        else &amp;#123;
            ++id;
            read(x), read(y), read(v);
            if (!tab.count(v)) continue;
            v = tab[v];
            q[v].emplace_back(1, x, y, id);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= tot; ++i) &amp;#123;
        for (auto &amp;amp;j : q[i]) &amp;#123;
            if (j.ty == 0) add(j.l, j.v);
            else &amp;#123;
                res[j.v] =
                    ask(j.r) - ask(j.l - 1);
            &amp;#125;
        &amp;#125;
        for (auto &amp;amp;j : q[i])
            if (j.ty == 0) add(j.l, -j.v);
    &amp;#125;
    for (int i = 1; i &amp;lt;= id; ++i)
        print(res[i], &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;E 会单独开一篇。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-树-tree&#34;&gt;F. 树 tree&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4647/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4647/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CF916E。&lt;/p&gt;
&lt;p&gt;大分讨给我整不会了，更给我整不会的是下来过后发现这只是个小分讨。&lt;/p&gt;
&lt;p&gt;更新子树和子树查询我们都会。换根 DP 我们也都写过，都知道换根并不会对子树结构产生大的影响。所以应当是能根据已知信息推测出子树在原树上对应的点集的。&lt;/p&gt;
&lt;p&gt;记 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为当前树根，&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为根时的 LCA，&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为根时的 LCA。&lt;/p&gt;
&lt;p&gt;那么对于 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y)\)&lt;/span&gt;，肯定是要讨论 &lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的位置关系的。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的子孙。此时 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y) = \text {LCA}(x,y)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的祖先。那么说明至少有一个点不是 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的子孙。此时 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)&amp;#39;\)&lt;/span&gt; 的值为 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为另一个点的 LCA。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整理可得 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}&amp;#39;(x,y)\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)\)&lt;/span&gt;、&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,r)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(y,r)\)&lt;/span&gt; 中的深度最大者。&lt;/p&gt;
&lt;p&gt;对于以 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为根时的子树 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=r\)&lt;/span&gt;，此时子树为整棵树。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,r)\ne x\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 不为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的子孙，此时子树就是以 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 为根是的子树 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\text {LCA}(x,y)=x\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的子孙，此时子树是整棵树除开 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 包含 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的儿子及其子孙。修改和查询的时候容斥一下就好。这个时候的子树倍增跳一下就能找到。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后就是常规线段树维护了。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxm = 35;
const int maxn = 1e5 + 5;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
struct _ &amp;#123; int l, r, u, d; &amp;#125;;
_ t[maxn &amp;lt;&amp;lt; 2];
int f[maxn][maxm];
std::vector&amp;lt;int&amp;gt; g[maxn];
int a[maxn], dfn[maxn], rfn[maxn];
int n, q, r, ty, x, y, v, si, now;
int top[maxn], dep[maxn], tab[maxn];
void swap(int &amp;amp;x, int &amp;amp;y) &amp;#123;
    x ^= y ^= x ^= y;
    return;
&amp;#125;
void DFS(int x) &amp;#123;
    dep[x] = dep[f[x][0]] + 1;
    dfn[x] = ++now, tab[now] = x;
    for (auto i : g[x]) &amp;#123;
        if (i == f[x][0]) continue;
        f[i][0] = x;
        for (int j = 1; j &amp;lt;= si; ++j)
            f[i][j] = f[f[i][j - 1]][j - 1];
        DFS(i);
    &amp;#125;
    rfn[x] = now;
    return;
&amp;#125;
void pushup(int p) &amp;#123;
    t[p].u = t[lt].u + t[rt].u;
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d += t[p].d;
        t[rt].d += t[p].d;
        t[lt].u += t[p].d *
                (t[lt].r - t[lt].l + 1);
        t[rt].u += t[p].d *
                (t[rt].r - t[rt].l + 1);
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        t[p].u = a[tab[l]];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    t[p].u += v;
    if (t[p].l == t[p].r) return;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (x &amp;lt;= mid) add(lt, x, v);
    else add(rt, x, v);
    return;
&amp;#125;
void add(int p, int l, int r, int v) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d += v;
        t[p].u += (t[p].r - t[p].l + 1) * v;
        return;
    &amp;#125;
    pushdown(p);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid) add(lt, l, r, v);
    if (r &amp;gt; mid) add(rt, l, r, v);
    pushup(p);
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    pushdown(p);
    int res = 0,
        mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid) res = ask(lt, l, r);
    if (r &amp;gt; mid) res += ask(rt, l, r);
    return res;
&amp;#125;
int LCA(int x, int y) &amp;#123;
    if (dep[x] &amp;lt; dep[y]) swap(x, y);
    for (int i = si; ~i; --i) &amp;#123;
        if (dep[f[x][i]] &amp;gt;= dep[y])
            x = f[x][i];
    &amp;#125;
    if (x == y) return x;
    for (int i = si; ~i; --i) &amp;#123;
        if (f[x][i] != f[y][i])
            x = f[x][i], y = f[y][i];
    &amp;#125;
    return f[x][0];
&amp;#125;
void Add(int x, int v) &amp;#123;
    int rlca = LCA(r, x);
    if (x == r) add(1, 1, n, v);
    else if (rlca != x)
        add(1, dfn[x], rfn[x], v);
    else &amp;#123;
        add(1, 1, n, v);
        int p = r;
        for (int i = si; ~i; --i) &amp;#123;
            if (dep[f[p][i]] &amp;gt;= dep[x] + 1)
                p = f[p][i];
        &amp;#125;
        add(1, dfn[p], rfn[p], -v);
    &amp;#125;
    return;
&amp;#125;
void tAdd(int x, int y, int v) &amp;#123;
    int llca = LCA(r, x), rlca = LCA(r, y),
        ulca = LCA(x, y);
    if (dep[llca] &amp;gt;= dep[rlca] &amp;amp;&amp;amp;
        dep[llca] &amp;gt;= dep[ulca]) Add(llca, v);
    else if (dep[rlca] &amp;gt;= dep[llca] &amp;amp;&amp;amp;
        dep[rlca] &amp;gt;= dep[ulca]) Add(rlca, v);
    else Add(ulca, v);
    return;
&amp;#125;
int tAsk(int x) &amp;#123;
    int rlca = LCA(r, x);
    if (x == r) return t[1].u;
    if (rlca != x)
        return ask(1, dfn[x], rfn[x]);
    int p = r;
    for (int i = si; ~i; --i) &amp;#123;
        if (dep[f[p][i]] &amp;gt;= dep[x] + 1)
            p = f[p][i];
    &amp;#125;
    return t[1].u - ask(1, dfn[p], rfn[p]);
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(q), r = 1;
    si = log(n) / log(2.0);
    for (int i = 1; i &amp;lt;= n; ++i) read(a[i]);
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        add(x, y), add(y, x);
    &amp;#125;
    dep[0] = 1, DFS(1), dep[0] = 0;
    bld(1, 1, n);
    while (q--) &amp;#123;
        read(ty);
        if (ty == 1) read(r);
        else if (ty == 2) &amp;#123;
            read(x), read(y), read(v);
            tAdd(x, y, v);
        &amp;#125;
        else &amp;#123;
            read(x);
            print(tAsk(x), &amp;#39;\n&amp;#39;);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <category term="树状数组" />
        <category term="LCA" />
        <category term="倍增" />
        <category term="鸽巢原理" />
        <updated>2024-01-06T03:27:39.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/231230/</id>
        <title>解题报告 [SDOI2016] 游戏</title>
        <link rel="alternate" href="https://xsc062.netlify.app/231230/"/>
        <content type="html">&lt;p&gt;可以看出来出题人很想出一道把李超和别的什么东西凑起来的题目，于是给了这么一个缝合怪。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4069&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P4069&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;符号有点混乱。比如箭头又可以表示路径又可以表示赋值，代入语境应该还是好理解的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;看到 &lt;span class=&#34;math inline&#34;&gt;\(a\times dis + b\)&lt;/span&gt; 就应激反应出来是李超了，看到 &lt;span class=&#34;math inline&#34;&gt;\(s\to t\)&lt;/span&gt; 又瞬间反应过来是树剖，但是树剖的 DFN 和 &lt;span class=&#34;math inline&#34;&gt;\(dis\)&lt;/span&gt; 没有直接关联，赛时想不到怎么做就跑路了。&lt;/p&gt;
&lt;p&gt;实际上这个转化很板。因为这是条路径，我们还在树链上跳，每次跳过的一个链上的 DFN 是连续的，对应的 &lt;span class=&#34;math inline&#34;&gt;\(dis\)&lt;/span&gt; 也是连续的。&lt;/p&gt;
&lt;p&gt;估计是打 T4 的子树问题打傻了，没想到这个。&lt;/p&gt;
&lt;p&gt;所以我们就相当于是给一条重链上的某个连续区间加了一个斜率为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，截距为 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 加上 &lt;em&gt;一坨东西&lt;/em&gt; 的线段。用李超维护即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;感觉讲的不清不楚的，那就再讲讲。&lt;/p&gt;
&lt;p&gt;我们要让李超上任意一个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 代表的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 是个定值。&lt;em&gt;一坨东西&lt;/em&gt; 维护了这条线段相对于 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的偏移量。令 &lt;span class=&#34;math inline&#34;&gt;\(r\gets \text{LCA of } s \text { and } t\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt; 表示整棵树的根，&lt;span class=&#34;math inline&#34;&gt;\(d(u,v)\gets \text {distance between } u \text { and } v\)&lt;/span&gt;。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(s\to r\)&lt;/span&gt; 上的每个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
val_u&amp;amp;=a\times d(s, u)+b\\
&amp;amp;=a\times[d(s,R)-d(u,R)]+b\\
&amp;amp;=-a\times d(u,R)+[a\times d(s,R)+b]
\end{aligned}
\]&lt;/span&gt; &lt;span class=&#34;math inline&#34;&gt;\(a\times d(s,R)+b\)&lt;/span&gt; 是和 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 无关的定值（这意味着可以在同一个询问的树剖时直接线段树），&lt;span class=&#34;math inline&#34;&gt;\(d(u,R)\)&lt;/span&gt; 是只和 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 相关的值（这意味着对于任意询问都成立）。令斜率为 &lt;span class=&#34;math inline&#34;&gt;\(-a\)&lt;/span&gt;，截距为 &lt;span class=&#34;math inline&#34;&gt;\(a\times d(s,R)+b\)&lt;/span&gt;，李超上任意点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 代表 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(d(x,R)\)&lt;/span&gt;，维护如此一条线段即可。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(r\to t\)&lt;/span&gt; 上的每个点 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;： &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
val_v&amp;amp;=a\times d(s,v)+b\\
&amp;amp;= a\times [d(r,v)+d(s,r)]+b\\
&amp;amp;=a\times [d(v,R)-d(r,R)+d(s,r)]+b\\
&amp;amp;=a\times d(v,R)+[-a\times d(r,R)+a\times d(s,r)+b]
\end{aligned}
\]&lt;/span&gt; &lt;span class=&#34;math inline&#34;&gt;\(-a\times d(r,R)+a\times d(s,r)+b\)&lt;/span&gt; 是和 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 无关，只和询问中固定的 &lt;span class=&#34;math inline&#34;&gt;\(s,r,a,b\)&lt;/span&gt; 有关的定值；&lt;span class=&#34;math inline&#34;&gt;\(d(v,R)\)&lt;/span&gt; 是只和 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 相关的值且和上一个 case 里的 &lt;span class=&#34;math inline&#34;&gt;\(d(u,R)\)&lt;/span&gt; 同构，也用李超这么维护即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用李超维护把原问题转化为每次向若干重链上连续区间插入线段，求最低交点的问题。&lt;/p&gt;
&lt;p&gt;注意到区间查询，李超需要加一个 pushup。具体怎么去操作呢？在加线段的时候除编号外新增一个变量维护当前区间内最低交点；我们就 pushup 这个东西。然后查询的时候就是在散区间的时候和原来一样查，整区间就在散区间答案的基础上再和当前区间的整体最低交点比一个 min。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxk = 25;
const int maxn = 1e6 + 5;
const int maxm = 1e6 + 5;
const int inf = 123456789123456789;
//#define DEBUG

#ifdef DEBUG
#define Z(x) x
#else
#define Z(x)
#endif
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
struct __ &amp;#123; int k, b; &amp;#125;;
struct _ &amp;#123; int l, r, u, d; &amp;#125;;
struct ____ &amp;#123;
    int v, w;
    ____() &amp;#123;&amp;#125;
    ____(int v1, int w1) &amp;#123;
        v = v1, w = w1; 
    &amp;#125;
&amp;#125;;
__ a[maxm];
_ t[maxn &amp;lt;&amp;lt; 2];
int tot, si, now;
int f[maxn][maxk];
int dis[maxn], dep[maxn];
int dfn[maxn], tab[maxn];
std::vector&amp;lt;____&amp;gt; g[maxn];
int n, m, ty, x, y, w, k, b;
int siz[maxn], top[maxn], son[maxn];
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
void swap(int &amp;amp;x, int &amp;amp;y) &amp;#123;
    x ^= y ^= x ^= y;
    return;
&amp;#125;
void DFS1(int x) &amp;#123;
    siz[x] = 1;
    for (auto i : g[x]) &amp;#123;
        if (i.v == f[x][0]) continue;
        f[i.v][0] = x;
        for (int j = 1; j &amp;lt;= si; ++j)
            f[i.v][j] = f[f[i.v][j - 1]][j - 1];
        dep[i.v] = dep[x] + 1;
        dis[i.v] = dis[x] + i.w;
        DFS1(i.v);
        if (siz[i.v] &amp;gt; siz[son[x]])
            son[x] = i.v;
        siz[x] += siz[i.v];
    &amp;#125;
    return;
&amp;#125;
void DFS2(int x, int t) &amp;#123;
    top[x] = t;
    dfn[x] = ++now, tab[now] = x;
    if (son[x]) DFS2(son[x], t);
    for (auto i : g[x]) &amp;#123;
        if (i.v == f[x][0] || i.v == son[x])
            continue;
        DFS2(i.v, i.v);
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r, t[p].d = inf;
    if (l == r) return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
int getv(int id, int x) &amp;#123;
    if (!id) return inf;
    Z(printf(&amp;quot;get (%lld, %lld) = %lld\n&amp;quot;,
        id, x, dis[tab[x]] * a[id].k + a[id].b));
    return dis[tab[x]] * a[id].k + a[id].b;
&amp;#125;
void pushup(int p) &amp;#123;
    if (t[p].l == t[p].r) return;
    t[p].d = min(t[p].d, min(t[lt].d, t[rt].d));
    Z(printf(&amp;quot;[%lld, %lld]: pushup to %lld\n&amp;quot;,
        t[p].l, t[p].r, t[p].d));
    return;
&amp;#125;
void chg(int p, int id) &amp;#123;
    t[p].u = id;
    Z(int tmp = t[p].d);
    t[p].d = min(getv(id, t[p].l),
                 getv(id, t[p].r));
    Z(printf(&amp;quot;[%lld, %lld]: %lld -&amp;gt; %lld\n&amp;quot;,
                t[p].l, t[p].r, tmp, t[p].d)); 
    return;
&amp;#125;
void upd(int p, int id) &amp;#123;
    if (!t[p].u) &amp;#123;
        chg(p, id), pushup(p);
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    int v1 = getv(t[p].u, mid),
        v2 = getv(id, mid);
    if (v2 &amp;lt; v1) swap(t[p].u, id);
    v1 = getv(t[p].u, t[p].l);
    v2 = getv(id, t[p].l);
    if (v2 &amp;lt; v1) upd(lt, id);
    v1 = getv(t[p].u, t[p].r);
    v2 = getv(id, t[p].r);
    if (v2 &amp;lt; v1) upd(rt, id);
    chg(p, t[p].u);
    pushup(p);
    return;
&amp;#125;
void add(int p, int l, int r, int id) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        upd(p, id);
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid) add(lt, l, r, id);
    if (r &amp;gt; mid) add(rt, l, r, id);
    pushup(p);
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    l = max(l, t[p].l);
    r = min(r, t[p].r);
    int res = min(getv(t[p].u, l),
                  getv(t[p].u, r));
    Z(printf(&amp;quot;[%lld, %lld]: res = %lld\n&amp;quot;,
        t[p].l, t[p].r, res));
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return min(res, t[p].d);
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid) res = min(res, ask(lt, l, r));
    if (r &amp;gt; mid) res = min(res, ask(rt, l, r));
    Z(printf(&amp;quot;[%lld, %lld]: res = %lld\n&amp;quot;,
        t[p].l, t[p].r, res));
    return res;
&amp;#125;
void add(int x, int y, int w) &amp;#123;
    g[x].push_back(____(y, w));
    return;
&amp;#125;
void ins(int l, int r, int k, int b) &amp;#123;
    a[++tot].k = k, a[tot].b = b;
    add(1, l, r, tot);
    return;
&amp;#125;
int getLCA(int x, int y) &amp;#123;
    if (dep[x] &amp;lt; dep[y]) swap(x, y);
    for (int i = si; ~i; --i) &amp;#123;
        if (dep[f[x][i]] &amp;gt;= dep[y])
            x = f[x][i];
    &amp;#125;
    if (x == y) return x;
    for (int i = si; ~i; --i) &amp;#123;
        if (f[x][i] != f[y][i])
            x = f[x][i], y = f[y][i];
    &amp;#125;
    return f[x][0];
&amp;#125;
void inst(int s, int t, int k, int b) &amp;#123;
    int r = getLCA(s, t), u = s;
    while (top[u] != top[r]) &amp;#123;
        ins(dfn[top[u]], dfn[u],
                    -k, k * dis[s] + b);
        u = f[top[u]][0];
    &amp;#125;
    ins(dfn[r], dfn[u], -k, k * dis[s] + b);
    u = t;
    int d = dis[s] - dis[r];
    while (top[u] != top[r]) &amp;#123;
        ins(dfn[top[u]], dfn[u],
                k, -k * dis[r] + k * d + b);
        u = f[top[u]][0];
    &amp;#125;
    ins(dfn[r], dfn[u],
            k, -k * dis[r] + k * d + b);
    return;
&amp;#125;
int qry(int x, int y) &amp;#123;
    int res = inf;
    while (top[x] != top[y]) &amp;#123;
        if (dep[top[x]] &amp;lt; dep[top[y]])
            swap(x, y);
        Z(printf(&amp;quot;ask %lld -&amp;gt; %lld: %lld\n&amp;quot;,
            x, top[x],
            ask(1, dfn[top[x]], dfn[x])));
        res = min(res,
            ask(1, dfn[top[x]], dfn[x]));
        x = f[top[x]][0];
    &amp;#125;
    if (dep[x] &amp;lt; dep[y]) swap(x, y);
    Z(printf(&amp;quot;ask %lld -&amp;gt; %lld: %lld\n&amp;quot;,
        x, y, ask(1, dfn[y], dfn[x])));
    res = min(res, ask(1, dfn[y], dfn[x]));
    return res;
&amp;#125;
int main() &amp;#123;
//  freopen(&amp;quot;game1.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    read(n), read(m);
    si = log(n) / log(2.0);
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y), read(w);
        add(x, y, w), add(y, x, w);
    &amp;#125;
    bld(1, 1, n);
    dep[1] = 1, DFS1(1), DFS2(1, -1);
    Z(for (int i = 1; i &amp;lt;= n; ++i)
        printf(&amp;quot;dfn[%lld] = %lld\n&amp;quot;, i, dfn[i]));
    while (m--) &amp;#123;
        read(ty), read(x), read(y);
        if (ty == 1) &amp;#123;
            read(k), read(b);
            inst(x, y, k, b);
        &amp;#125;
        else print(qry(x, y), &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="树链剖分" />
        <category term="李超线段树" />
        <updated>2023-12-30T04:12:30.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20231117/</id>
        <title>TRICKS</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20231117/"/>
        <content type="html">&lt;p&gt;想着写点什么东西，就是说，不会被归入知识点（upd：并非不会），却又感觉很常用（upd：并非常用）的东西。&lt;/p&gt;
&lt;p&gt;哦我懂了，通常来说我们管这个叫 trick。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ds&#34;&gt;DS&lt;/h2&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;容易记错的操作复杂度：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线段树合并、线段树建树&lt;/strong&gt;：&lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;FHQ Treap 建树：视作笛卡尔树，&lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;动态开店线段树单次访问至多增加 &lt;span class=&#34;math inline&#34;&gt;\(4\log\)&lt;/span&gt; 个点，e.g. &lt;span class=&#34;math inline&#34;&gt;\([2,n-1]\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;随机序列的笛卡尔树：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;是 Treap。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;有『合并』功能的 DS：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;并查集，线段树，&lt;strong&gt;字典树&lt;/strong&gt;，笛卡尔树，BST。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;复杂度依赖『均摊』的 DS：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;并查集，线段树 / 字典树合并。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不强制在线&lt;/strong&gt; &lt;strong&gt;复杂度不依赖均摊&lt;/strong&gt; 的可持久化数据结构 &lt;span class=&#34;math inline&#34;&gt;\(\to\)&lt;/span&gt; DAG 上直接模拟。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;部分可持久化：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;只要求『在最新版本上修改』和『查询所有版本』的可持久化数组可以在 &lt;code&gt;vector&lt;/code&gt; 上二分，又唤部分可持久化。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;字典树维护二进制操作：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;字典树的节点 id 可视作对信息的引用，也即，如果在初次插入时记录了某个元素对应的 id，相当于获取了元素的引用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单点修改：拿出来，修改，塞进去，单次修改 &lt;span class=&#34;math inline&#34;&gt;\(O(\log V)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;全局 &lt;code&gt;xor&lt;/code&gt;：打懒标记，单次修改 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;全局 +1 / -1：字典树上信息必须从低位到高位存储。现场处理，（发现只会递归一条链），单次修改 &lt;span class=&#34;math inline&#34;&gt;\(O(\log V)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;线段树可维护的经典信息：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;操作：插入 / 删除区间，询问：值域内未被覆盖的点的信息：&lt;/p&gt;
&lt;p&gt;线段树维护节点内被覆盖次数最小值和最小值信息；当最小值为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 时，将信息纳入统计。&lt;/p&gt;
扩：维护值域内恰好被区间覆盖 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次的点的信息：线段树维护节点内前 &lt;span class=&#34;math inline&#34;&gt;\(k+1\)&lt;/span&gt; 小值的信息，则 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 一定出现在前 &lt;span class=&#34;math inline&#34;&gt;\(k+1\)&lt;/span&gt; 小值中。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线段树维护函数：如果对于任意区间，都能定义一个定义域为该区间的函数，可以线段树维护该函数。维护的总点数是 &lt;span class=&#34;math inline&#34;&gt;\(n\log n\)&lt;/span&gt; 的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;数学&#34;&gt;数学&lt;/h2&gt;
&lt;!-- &lt;details&gt;&lt;summary&gt; --&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;常见数据对应的数列：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\{1,1,2,3,5,8,\cdots\}\)&lt;/span&gt; 是斐波那契；矩阵可以优化；生成函数可以找通项；&lt;span class=&#34;math inline&#34;&gt;\(f_i=\sum\limits_{i=0}^nC_n-i^i\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\{1, 1, 2, 5, 14\cdots\}\)&lt;/span&gt; 是 Catalan，走网格不能穿过对角线 / 构造二叉树方案数 / 一群人买电影票。&lt;a href=&#34;/20250419/#不经过-yxc-的方案数&#34;&gt;有组合求法 &lt;span class=&#34;math inline&#34;&gt;\({2n\choose n} - {2n \choose n - 1}\)&lt;/span&gt;&lt;/a&gt;；生成函数还是可以找通项；&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\{3, 7, 6, 15, 25, 10, 31, 90, 65, 15, 63, 301, 350, 140, 21, 127, 966,\cdots\}\)&lt;/span&gt;，中间插着一堆 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，是展开了的第二类斯特林数三角形，把 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个不同球，不空放，放到 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个相同盒子的方案数，有递推式 &lt;span class=&#34;math inline&#34;&gt;\(S(n,k)=S(n-1,k-1)+k\cdot S(n-1,k)\)&lt;/span&gt; 和二项式反演出来的通项 &lt;span class=&#34;math inline&#34;&gt;\(S(n,m)=\sum\limits_{i=0}^m\dfrac {(-1)^{m-i}\cdot i^n}{i!\cdot (m-i)!}\)&lt;/span&gt;。多项式可以 &lt;span class=&#34;math inline&#34;&gt;\(n\log\)&lt;/span&gt; 算同一行 / 列，方法不太一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 被取模后的组合数：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;将原式展开，&lt;span class=&#34;math inline&#34;&gt;\(\binom nm=\frac 1{m!} \prod\limits_{i=0}^{m-1} (n-i)\)&lt;/span&gt;，容易发现 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 取模是没有影响的，如果模数很小则可以预处理模数范围内的阶乘，如果 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 很小则可以每次 &lt;span class=&#34;math inline&#34;&gt;\(O(m)\)&lt;/span&gt; 现算。&lt;/p&gt;
&lt;p&gt;同理可以发现 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 是不能直接取模的，如果需要给 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 取模就只能用 Lucas。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(O(V\log V)\)&lt;/span&gt; 求数的因数：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;假设 &lt;span class=&#34;math inline&#34;&gt;\(n=V=5\times 10^6\)&lt;/span&gt;，那么对于每个数暴力分解就是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\sqrt V)\)&lt;/span&gt; 的，无法通过。&lt;/p&gt;
&lt;p&gt;埃筛预处理，存储每个数的所有因数就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(V\log V)\)&lt;/span&gt; 求了。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;求线段穿过直线系的次数：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;求线段 &lt;span class=&#34;math inline&#34;&gt;\((x_1,y_1,x_2,y_2)\)&lt;/span&gt; 穿过直线系 &lt;span class=&#34;math inline&#34;&gt;\(x+y=k\cdots m(k\in \mathbb{N}^*)\)&lt;/span&gt; 的次数算出线段中 &lt;span class=&#34;math inline&#34;&gt;\(x+y\)&lt;/span&gt; 的取值范围也即 &lt;span class=&#34;math inline&#34;&gt;\([x_1+y_1,x_2+y_2]\)&lt;/span&gt;（斜率为负就不同了，但可以证明都是单调的），求出 &lt;span class=&#34;math inline&#34;&gt;\(k\cdot m\)&lt;/span&gt; 在里面的出现次数就可以了。&lt;del&gt;有的人高中数学欠的债要到竞赛来还&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;goto &lt;a href=&#34;https://codeforces.com/contest/2098/problem/E&#34;&gt;CF2098E&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;图论&#34;&gt;图论&lt;/h2&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;span class=&#34;math inline&#34;&gt;\(m-n\)&lt;/span&gt; 很小带来的隐含条件&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;DFS 树的反祖边很少，可以基于这一点想一些比较暴力的做法。&lt;/p&gt;
&lt;p&gt;goto &lt;a href=&#34;http://localhost:4000/20250816/#g---count-simple-paths-2&#34;&gt;solu to &lt;em&gt;Count Simple Paths 2&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;经典建模&#34;&gt;经典建模&lt;/h3&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;左部点度数为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的二分图匹配：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;一系列元素，每个元素有不超过两种可选值，要求最终每个元素值不同，求方案数。&lt;/p&gt;
&lt;p&gt;对所有可选值建图。如果只有一个可选值，看作两种可选值相同，连自环；否则把两个可选值连边。此时一个元素对应一条边，即对于每条边选一个端点，满足每个端点被选最多一次。&lt;/p&gt;
&lt;p&gt;对于所有连通块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(n&amp;gt;m+1\)&lt;/span&gt;： 没有这种可能性（不连通）。&lt;/li&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(n=m+1\)&lt;/span&gt;，即该连通块为树，任选一个点不选都能唯一构成一组解，方案数为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(n=m\)&lt;/span&gt;，即形成基环树：&lt;/p&gt;
&lt;p&gt;由于环上点只能且必须被环上边选，树上边的选法唯一。主要讨论环边选法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若环为自环，答案为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;否则枚举环上所有边是统一选顺 / 逆时针方向的端点，答案为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(n&amp;lt;m\)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;点不够用，答案为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后把所有连通块的答案相乘就可以得到总答案。&lt;/p&gt;
&lt;p&gt;goto &lt;a href=&#34;https://vjudge.net/problem/OpenJ_POJ-C19A&#34;&gt;Ball&lt;/a&gt;, &lt;a href=&#34;https://codeforces.com/contest/2097/problem/B&#34;&gt;Baggage Claim&lt;/a&gt;, &lt;a href=&#34;https://atcoder.jp/contests/tkppc6-2/tasks/tkppc6_2_g&#34;&gt;Must be Distinct!&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;凸多边形三角剖分转化为树上问题&lt;/strong&gt;：&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;结论：若把三角形视作 &lt;span class=&#34;math inline&#34;&gt;\(n-2\)&lt;/span&gt; 个点，在有公共边的三角形之间连边可以得到树。&lt;/p&gt;
&lt;p&gt;证明：有 &lt;span class=&#34;math inline&#34;&gt;\(n-3\)&lt;/span&gt; 条边，显然每条边都被两个三角形共用；至于为什么是 &lt;span class=&#34;math inline&#34;&gt;\(n-2\)&lt;/span&gt; 个三角形请移步计几。&lt;/p&gt;
&lt;p&gt;生成方法：易发现肯定存在 &lt;span class=&#34;math inline&#34;&gt;\(\ge 2\)&lt;/span&gt; 个顶点不被任何对角线经过（其属于一个叶子三角形），其度数为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;；用类似拓扑排序的方式，不断切下叶子三角形并寻找新的叶子三角形，就可以找到所有点。注意到对角线就是树边，记录每条对角线两侧的三角形，连边即可。&lt;/p&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250612/#b---distance-on-triangulation&#34;&gt;solu to &lt;em&gt;Distance on Triangulation&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;优化建图&#34;&gt;优化建图&lt;/h3&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;前缀和优化建图：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;要求每条边都指向某个前缀区间；与线段树优化建图相比的优势是虚点、边数均为 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;Goto &lt;a href=&#34;/20250505/&#34;&gt;solu to &lt;em&gt;喝醉的兔子&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;图上-dp&#34;&gt;图上 DP&lt;/h3&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;有环图的 DP 顺序：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;有环图上的 DP，通常来说可以根据状态转移方程的形式找到环上的「根源」，即不由任何环上节点转移得到。&lt;/p&gt;
&lt;p&gt;无视根源在环上的前驱边就可以用类拓扑的方式转移。&lt;/p&gt;
&lt;p&gt;Goto &lt;a href=&#34;/20231113/#b.-商人&#34;&gt;solu to 商人&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;树的直径图的直径&#34;&gt;树的直径，图的直径&lt;/h3&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;半径与中点的定义：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;半径&lt;/strong&gt;：图 / 树的半径（&lt;strong&gt;数值上为 &lt;span class=&#34;math inline&#34;&gt;\(\min\limits_x\{\max\limits_y dis(x, y)\}\)&lt;/span&gt;&lt;/strong&gt;）的一端一定在直径上，且在直径中间。如果不带权的话就是直径长度的一半 &lt;del&gt;不然为啥叫半径&lt;/del&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中点&lt;/strong&gt;：半径在直径上的端点，有一个（直径为奇）或两个（直径为偶），均满足到所有点的距离不超过半径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;直径的性质：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;图的直径的性质&lt;/strong&gt;：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;不能用两次 BFS 求，原因：图不满足『距离任意点最远的点都是直径的一个端点』这条贪心性质。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设图的直径为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，对于任意点 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，其和其他点最短路的最大值 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 满足：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\left\lceil \dfrac d2\right\rceil \le s\le d
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;等价形式：&lt;span class=&#34;math inline&#34;&gt;\(d\in[s, 2s]\)&lt;/span&gt;。&lt;/p&gt;
证明：上界显然；对于下界，取图中心 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;，对任意 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 找到距其最远的点 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。由松弛，显然有 &lt;span class=&#34;math inline&#34;&gt;\(d(x,y)\le d(x,m)+d(y,m)\)&lt;/span&gt;。又 &lt;span class=&#34;math inline&#34;&gt;\(d(x,m),d(y,m)\le r\)&lt;/span&gt;，故 &lt;span class=&#34;math inline&#34;&gt;\(d(x,y)\le 2r\)&lt;/span&gt;，也即 &lt;span class=&#34;math inline&#34;&gt;\(d\ge d(x,y)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;树的直径的性质&lt;/strong&gt;：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;树的所有直径交于树的所有中点（参考半径，如果长度为偶数就是两个点）；&lt;/li&gt;
&lt;li&gt;向树中加一个叶子，最多改变直径的一个端点。&lt;/li&gt;
&lt;li&gt;距离任意点最远的点都是直径的一个端点。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;半径的性质 / 离树上某点最远的点：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;将中心边（若有两条任选一条）提出来，让两侧的点作为根；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于一个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，离它最远的点一定在另一棵树中最深的位置。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;动态维护树的直径：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;如果知道一个连通块内的直径是 &lt;span class=&#34;math inline&#34;&gt;\(x\to y\)&lt;/span&gt;，另一个是 &lt;span class=&#34;math inline&#34;&gt;\(a\to b\)&lt;/span&gt;，那么两个合并起来的直径一定是 &lt;span class=&#34;math inline&#34;&gt;\(\{x,y,a,b\}\)&lt;/span&gt; 里的 &lt;span class=&#34;math inline&#34;&gt;\(C_4^2\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;线段树维护一段连续&lt;strong&gt;欧拉序&lt;/strong&gt;内（不用 DFS 序是为了保证联通）的直径和两个端点，就能解决动态加点一类问题。&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;树上问题&#34;&gt;树上问题&lt;/h3&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;树上路径问题的解决思路：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;静态问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不要求方向且能预处理：树上差分。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要求方向且能预处理：倍增、树剖（多一个 log 但跑不满；综合来看慢一些）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;离线、要求方向且不能预处理：&lt;/p&gt;
&lt;p&gt;把询问挂在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 和 LCA 上，第一遍 DFS 把 &lt;span class=&#34;math inline&#34;&gt;\(u\to\)&lt;/span&gt; LCA 的答案计算出来（需要可合并信息），第二遍 DFS 利用回溯把 LCA &lt;span class=&#34;math inline&#34;&gt;\(\to v\)&lt;/span&gt; 的答案计算出来。&lt;/p&gt;
goto &lt;a href=&#34;/20250809/#a---记忆&#34;&gt;solu to &lt;em&gt;记忆&lt;/em&gt;&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态问题：树剖。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;dp&#34;&gt;DP&lt;/h2&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;轮廓线 DP / 逐格状压 DP：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;对于棋盘上的状压 DP，如果某格内容的限制只来自相邻的格子（这是大部分棋盘问题能够满足的），可以考虑轮廓线 DP。&lt;/p&gt;
&lt;p&gt;具体来说，按照通常的从上到下、从左到右 DP 的思路，对于某一格，发现影响到它的只有左侧和上方的状态；这时我们通常会保存上一行所有状态，但发现左上侧格子及以前的状态是无用的，反而左边的状态是有用的。故记录每一列最靠下的已确定状态，就可以完成 DP。&lt;/p&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250805/#d---count-grid-3-coloring&#34;&gt;solu to &lt;em&gt;Count Grid 3-coloring&lt;/em&gt;&lt;/a&gt;，&lt;a href=&#34;/20250805/#f---123-set&#34;&gt;solu to &lt;em&gt;123 Set&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(2\times 1\)&lt;/span&gt; 骨牌放置问题，可以设『上半片』为 &lt;code&gt;1&lt;/code&gt;，其余为 &lt;code&gt;0&lt;/code&gt;，对于横向骨牌逐二格确定。这样就能发现，轮廓线 DP 并不一定只有在左侧有限制的时候才能用，因为&lt;strong&gt;记录左侧状态也是在完成状态的转移&lt;/strong&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;『贡献』的思想：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;用乘法分配率将式子拆开，即『分类』，这时可能会发现『分步』这一步比原来更好做。&lt;/p&gt;
&lt;p&gt;更具象地，对于『分步』中的某一步，将『类别』的全集划分为若干个子集，发现除此之外的部分可能可以更方便地计算。如果能找到这样一种简单的均裂或异裂的方式，使得每一『类』的『单步』价值能够确定，就能考虑用『贡献』计算。&lt;/p&gt;
&lt;p&gt;特别地，对于一个子集，如果其他步骤对它的价值没有影响，其贡献往往会表现为幂次形式。&lt;/p&gt;
&lt;p&gt;Goto &lt;a href=&#34;/20250803/#b---one-to-one&#34;&gt;solu to &lt;em&gt;One to One&lt;/em&gt;&lt;/a&gt;，&lt;a href=&#34;/20250407/#e---kdoi-11彩灯晚会&#34;&gt;solu to &lt;em&gt;彩灯晚会&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;想要筛选出特定一『类』的状态 / 不同『分类』对应不同『分步』时的处理方法：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;如果类别比较少，将类别放到维度里（例：如果存在二进制运算则可以拆位，则类别为 0/1 两类），分别处理。&lt;/p&gt;
&lt;p&gt;看起来很显然，但确实是很多状态设计的难点。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;多重集的组合数&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;主要要求能够认识到正在应用该模型。&lt;/p&gt;
&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(n,m\)&lt;/span&gt; 很小而 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 很大时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;朴素地，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处填了 &lt;span class=&#34;math inline&#34;&gt;\(\le j\)&lt;/span&gt; 的数（可以意识到需要前缀和），如果只关注当前位是不能做的，考虑枚举填了多少个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，可以得到 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\sum_k f_{i-k,j-1}\)&lt;/span&gt;。注意 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 可以取到 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，从数值上来看恰好是对的。&lt;/p&gt;
如果认为一个多重集中的元素是有差异的，还可以乘上 &lt;span class=&#34;math inline&#34;&gt;\(\binom {c_j}k\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;如果保证 &lt;span class=&#34;math inline&#34;&gt;\(n\le c_i\)&lt;/span&gt;，且题目没有其他限制时，发现原问题等价于 &lt;span class=&#34;math inline&#34;&gt;\(x_1+x_2+\cdots +x_m=n\)&lt;/span&gt; 的非负整数解数目，插板法解决。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在上一种方式的基础上，如果没有了 &lt;span class=&#34;math inline&#34;&gt;\(n\le c_i\)&lt;/span&gt; 的限制，易发现容斥也是可行的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;与字典序有关的状态设计：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;要求字典序大于 / 小于给定值的方案数，考虑使用 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(1\sim i\)&lt;/span&gt; 全部和给定值相同，&lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 大于 / 小于给定值，后面无限制的情况总数。&lt;/p&gt;
&lt;p&gt;Goto &lt;a href=&#34;http://222.180.160.110:61235/contest/5423/problem/2&#34;&gt;冒泡排序&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;计数 DP 和容斥的选择。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（容斥）碰到了「起点状态到终点状态，中间不能经过一些非法状态的方案数」，可以用 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示从起点，不经过 &lt;span class=&#34;math inline&#34;&gt;\(1\sim i-1\)&lt;/span&gt; 的非法状态，到达非法状态 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的方案数，最后将终点状态也视为一个非法状态并 DP 即可。&lt;/p&gt;
Goto &lt;a href=&#34;/20231113/#a---gerald-and-giant-chess&#34;&gt;solu to &lt;em&gt;Gerald and Giant Chess&lt;/em&gt;&lt;/a&gt;，&lt;a href=&#34;https://www.cnblogs.com/XSC062/p/17330225.html&#34;&gt;solu to &lt;em&gt;两双手&lt;/em&gt;&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;求方案数，如果用通常的「考虑满足条件的情况并转移」，就必须能够简单地对条件进行判定。&lt;/p&gt;
&lt;p&gt;如果这一点做不到，可以考虑从最简单或最极限情况出发充要且不重地 &lt;strong&gt;构造&lt;/strong&gt; 出一般情况，并计算相应的方案数。&lt;/p&gt;
goto &lt;a href=&#34;/20230716/&#34;&gt;solu to &lt;em&gt;染色&lt;/em&gt;&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果有转移会有后效性不妨考虑是否有前效性然后逆序 DP。&lt;/p&gt;
&lt;p&gt;例如求字典序最小的答案：只知道最后一个字符不能推断出谁的字典序最小。但如果知道最开头一个字符，并保证从后往前填表的每一步都走的最小就能够确定。&lt;/p&gt;
goto &lt;a href=&#34;/20230716-1/&#34;&gt;solu to &lt;em&gt;匹配数&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p id=&#34;1&#34;&gt;
状态拆分技巧。比如状态 ABC 不一定要从状态 A、状态 B、状态 C 分别 &lt;span class=&#34;math inline&#34;&gt;\(O(m)\)&lt;/span&gt; 的转移，而可以从 A 和 BC 以 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 完成转移。
&lt;/p&gt;
&lt;p&gt;Goto &lt;a href=&#34;/20231003/#f.-单词&#34;&gt;solu to &lt;em&gt;单词&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于背包&#34;&gt;关于背包&lt;/h3&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;子序列问题转化为背包问题：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;子序列问题（不仅是 + &amp;amp; min，也可以是 xor、加 &amp;amp; 模等）可以转化为背包问题；对一个区间做背包，可以把区间划分成若干段，每段做背包，再依次 &lt;span class=&#34;math inline&#34;&gt;\(O(v^2)\)&lt;/span&gt; 地合并。&lt;/p&gt;
&lt;p&gt;『划分』的一个典型场景是找『分割线』，然后向左向右分别做背包——这么做的优点是，对于任意穿这条分割线的区间，你都能 &lt;span class=&#34;math inline&#34;&gt;\(O(v^2)\)&lt;/span&gt; 得到所有的背包信息。甚至，如果你只需要求某个特定体积下的答案，只需要 &lt;span class=&#34;math inline&#34;&gt;\(O(v)\)&lt;/span&gt; 枚举。&lt;/p&gt;
&lt;p&gt;upd：可以猫树&lt;/p&gt;
&lt;p&gt;goto &lt;a href=&#34;https://loj.ac/p/6515&#34;&gt;贪玩蓝月&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;离线背包结合分治：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;背包可以看作一种 +/min 卷积：在体积维上做加法、在代价维上做 min。当然其他操作如体积维上的 xor、加模；代价维上的方案数都差不多。&lt;/p&gt;
&lt;p&gt;因此，多次区间询问（离线）的背包可以结合分治——原因是从每个 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 开始做一次背包是不现实的，而我们发现分割线是可以共用的——分割线代表的背包信息也是可以共用的。&lt;/p&gt;
&lt;p&gt;所以需要找到一种『找分割线』和『一条分割线求解的范围』的方法，使得规定复杂度内能够最大化利用『公共信息』。分治的（类线段树的）结构就是一种极好的方式，在一层分治内解决所有在 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt; 范围内，且跨越 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 的询问，这样就能从 &lt;span class=&#34;math inline&#34;&gt;\(mid\)&lt;/span&gt; 出发，向左到 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt;，向右到 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 求解背包。&lt;/p&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250520/#cf2043f-nim&#34;&gt;solu to CF2043F&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;树上背包序列化：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;注意到对于任何类型的背包，树结构复杂度不优于序列结构。仅有物品体积为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的 01 背包可以用技巧优化到相同复杂度。&lt;/p&gt;
&lt;p&gt;利用 DFS 序进行填表，若不选某个点，相当于不选其引导的一整个子树 DFS 序区间。其余和序列背包一致。&lt;/p&gt;
&lt;p&gt;Goto &lt;a href=&#34;/20250612/#c---shopping&#34;&gt;solu to &lt;em&gt;Shopping&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;随机序列的背包：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;有结论：一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(1/-1\)&lt;/span&gt; 随机序列的前缀和离 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的距离期望不超过 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt n\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;拓展一下，在保证值域内分布均匀的整数域内背包，在 &lt;code&gt;random_shuffle&lt;/code&gt; 后实际最大状态不太会超过 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt V\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;因为结论很松，所以运气比较好的时候甚至不会超过 &lt;span class=&#34;math inline&#34;&gt;\(\log V\)&lt;/span&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;哈希&#34;&gt;哈希&lt;/h2&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;哈希中全等条件的应用 / 哈希与前缀信息的关联：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;有的区间问题的判定条件可以转化为部分前缀信息的全等。&lt;/p&gt;
&lt;p&gt;例：要求区间内每个数出现次数为 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 的倍数，转化为：令 &lt;span class=&#34;math inline&#34;&gt;\(cnt_{i,j}\)&lt;/span&gt; 表示前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个数中 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 出现次数 &lt;span class=&#34;math inline&#34;&gt;\(\bmod3\)&lt;/span&gt; 的值，则要求左右端点该值全等。&lt;/p&gt;
&lt;p&gt;Goto &lt;a href=&#34;https://www.luogu.com.cn/article/5reynyzi&#34;&gt;Three Occurrences&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;xor hash：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;使用于异或判断次数奇偶性 / 元素存在性的哈希。&lt;/p&gt;
&lt;p&gt;区间里每个值出现次数都是偶数的必要条件是区间异或起来为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。该结论不充分：&lt;span class=&#34;math inline&#34;&gt;\(1\oplus 2\oplus 3=0\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;把每个数都哈希成一个随机大数（比如 ull），冲突的概率就会变成 &lt;span class=&#34;math inline&#34;&gt;\(2^{-64}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;Goto &lt;a href=&#34;https://www.luogu.com.cn/article/ugg047a7&#34;&gt;NOI2024 D1T1&lt;/a&gt;，&lt;a href=&#34;/20221010/&#34;&gt;solu to &lt;em&gt;博弈&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;二分&#34;&gt;二分&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;关于最值&#34;&gt;关于最值&lt;/h2&gt;
&lt;h3 id=&#34;关于冒泡排序&#34;&gt;关于冒泡排序&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;『冒泡排序有一种被出烂但是每次碰到我都不会的美感。』——wosile&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这个人我不认识，但是我觉得这句话说得太好了！&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一轮冒泡排序做的事情：将序列按前缀最大值为段首划分为若干段，并把其移到段末。&lt;/p&gt;
goto &lt;a href=&#34;/20250510/#c---1-loop-bubble-sort&#34;&gt;1 Loop Bubble Sort&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前缀最大值在一轮冒泡排序后仍是前缀最大值。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;求某下标在序列所有的 LIS 中出现次数：&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;分别统计以其结尾和开头的 LIS 长度与次数，如果加起来是序列 LIS 的长度，那么次数相乘就是答案。&lt;/p&gt;
&lt;/details&gt;
&lt;h2 id=&#34;杂项&#34;&gt;杂项&lt;/h2&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;常用低复杂度库函数 / 比手写复杂度更低的库函数：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__builtin_clz&lt;/code&gt; / &lt;code&gt;__builtin_ctz&lt;/code&gt;：统计二进制开头 / 末尾 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的个数，通常是硬件指令，硬件不支持则会采用掩码 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 得到结果。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__builtin_popcount&lt;/code&gt;：同上。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sqrt&lt;/code&gt;：争议很大，但事实是对于所有数据最多迭代 &lt;span class=&#34;math inline&#34;&gt;\(6\)&lt;/span&gt; 次，实际表现接近单次浮点乘法操作，故为 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;此处值得说明的是，&lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt; 中的对数函数同样为常数复杂度，但被观测到实际表现时常数较大，跑 1e6 次就已经很危险了。&lt;/p&gt;
如果需要对 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 取对数，使用 &lt;code&gt;std::__lg&lt;/code&gt; 代替（其实现为 &lt;code&gt;31 - __builtin_clz(x)&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;std::nth_element&lt;/code&gt;：可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 找到第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 大元素（放在第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位），并将原数组部分重排，使得前 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 为均比第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位小，后 &lt;span class=&#34;math inline&#34;&gt;\(n-k\)&lt;/span&gt; 位均比第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位大。&lt;/p&gt;
&lt;p&gt;所以实际功能其实是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 找到前 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 大元素。因为平常提到 rank 都喜欢用 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 来叙述，所以函数名经常被误记为 &lt;code&gt;kth&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;随机序列跳悬线 / 悬线结合分块：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;随机序列的笛卡尔树深度为 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;；令块长为 &lt;span class=&#34;math inline&#34;&gt;\(B=\sqrt {\log n}\)&lt;/span&gt;，维护每个点跳 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 步的答案；那么就能 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt {\log n})\)&lt;/span&gt; 跳悬线。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;多组元素两两配对，要求同一组间不成对：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;设元素总数为 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt;，则有解当且仅当最大的一组元素数不超过 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;若需要输出一种方案，可以看作有两个长为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;、上下并行放置的盒子，现欲用若干元素充满盒子，使得上下对应位置元素不同组。一种简单的构造方式是，把上下两个盒子拼在一起，按任意顺序把所有组连续放入，然后从拼接处断开，上下对应即为一对，容易发现上下元素一定不同组。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;撤销思想：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;当题目给出『按一定的操作序列，将整块逐步分解为小段，问至晚哪一步后满足条件（需要单调性）』，可以考虑从最后的局面开始考虑，逐步『合并』，并 check 最早合并到哪一步时满足条件。&lt;/p&gt;
&lt;p&gt;Goto &lt;a href=&#34;/20220808/&#34;&gt;solu to &lt;em&gt;CF567D&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;双栈模拟双端队列：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用两个栈模拟队列或双端队列。支持两头删除、插入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个维护前面的插入、删除；一个维护后面的插入、删除。插入是简单的；删除在大部分情况下是简单的；如果某个栈删空了，将另一个栈的一半挪过来暴力重构即可。均摊复杂度线性。&lt;/p&gt;
&lt;p&gt;复杂度证明：设两栈长度分别为 &lt;span class=&#34;math inline&#34;&gt;\(L_1,L_2\)&lt;/span&gt;，定义势能 &lt;span class=&#34;math inline&#34;&gt;\(E=|L_1-L_2|\)&lt;/span&gt;。每次插入 / 简单删除带来 &lt;span class=&#34;math inline&#34;&gt;\(\pm 1\)&lt;/span&gt; 的势能变化；一次重构消耗 &lt;span class=&#34;math inline&#34;&gt;\(E\)&lt;/span&gt; 的势能，将势能重置为 &lt;span class=&#34;math inline&#34;&gt;\(E\le 1\)&lt;/span&gt;。显然就有均摊线性复杂度了。&lt;/p&gt;
&lt;p&gt;适用场景：类队列 / 双端队列场景，但若固定一个端点就可以向左向右分别简单维护的；如背包等。&lt;/p&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250520/#贪玩蓝月&#34;&gt;solu to &lt;em&gt;贪玩蓝月&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;线段树维护括号序列：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;每个节点维护左边&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;&lt;strong&gt;贪心选取括号序列：&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(a_1\sim a_{2N}\)&lt;/span&gt;，选取一个合法的长度为 &lt;span class=&#34;math inline&#34;&gt;\(2N\)&lt;/span&gt; 的括号序列，记权值为所有 &lt;span class=&#34;math inline&#34;&gt;\((\)&lt;/span&gt; 所在位置的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 值之和，最大化权值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_1\)&lt;/span&gt; 显然为 &lt;code&gt;(&lt;/code&gt;，&lt;span class=&#34;math inline&#34;&gt;\(a_{2N}\)&lt;/span&gt; 显然为 &lt;code&gt;)&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(a_2\sim a_{2N-1}\)&lt;/span&gt;，从前往后扫，每次把两个连续元素放在一起考虑，进行如下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把这两个连续元素放到『可用来作 &lt;code&gt;(&lt;/code&gt;』的队列里。&lt;/li&gt;
&lt;li&gt;贪心地从队列里挑选 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 最大的元素，令其为 &lt;code&gt;(&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;正确性证明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即证：可构造出来的序列 &lt;span class=&#34;math inline&#34;&gt;\(\iff\)&lt;/span&gt; 合法的序列；构造出来的序列最优。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;必要性：&lt;/p&gt;
&lt;p&gt;我们知道，括号序列合法 &lt;span class=&#34;math inline&#34;&gt;\(\iff\)&lt;/span&gt; 对于任意 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\sim i\)&lt;/span&gt; 中的 &lt;code&gt;)&lt;/code&gt; 的数量不超过 &lt;code&gt;(&lt;/code&gt;。&lt;/p&gt;
对于任意 &lt;span class=&#34;math inline&#34;&gt;\(i=2k+1\)&lt;/span&gt;，前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个元素中存在至少 &lt;span class=&#34;math inline&#34;&gt;\(k+1\)&lt;/span&gt; 个 &lt;code&gt;(&lt;/code&gt;。&lt;strong&gt;且如果任意一步少选，序列不合法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;充分性：&lt;/p&gt;
&lt;p&gt;也即在我们可以任意选择从队列中挑选哪个元素的情况下，证明任意目标序列都可以被这么构造。&lt;/p&gt;
每次选择目标序列最靠前的未被选的 &lt;code&gt;(&lt;/code&gt; 并将其选中。如果有一步不存在这样的位置怎么办？由『必要性』中粗体字得不合法。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最优性：&lt;/p&gt;
&lt;p&gt;首先需要知道每个元素是否被选择是相对独立的。如果两个数都可被选，那么它们的选中状态是互不影响的（除非这是最后一个位置了，但显然这不是我们关注的重点）。&lt;/p&gt;
&lt;p&gt;假设一个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 位于最优解序列，但我们没有选择它：说明选中了一个比 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 更大的元素，可以构造出更优的序列。由此反证。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;goto &lt;a href=&#34;/20250520/#abc407e-most-valuable-parentheses&#34;&gt;solu to &lt;em&gt;abc407E&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个「二者至少选其一」形式的限制，要求选的尽可能少，使用 &lt;span class=&#34;math inline&#34;&gt;\(2^k\)&lt;/span&gt; 枚举后取并集代替 &lt;span class=&#34;math inline&#34;&gt;\(3^k\)&lt;/span&gt; 枚举。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="下饭" />
        <updated>2023-11-17T06:31:23.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20231113/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20231113/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4434&#34;&gt;NOIP S&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://vjudge.net/contest/594162&#34;&gt;计数杂题&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-卡门&#34;&gt;A. 卡门&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6370&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/P6370&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4434/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4434/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们惊讶地发现全场没多少人会做绿题。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;就是说呢，我们把它「滚动到相邻行然后落下」的过程直接变成「往左下 / 右下滚」。那么球掉下去的过程呢，就可以理解为它是一直一次往下掉一格的，然后每一次掉落呢，会根据实际情况往左 / 往右 / 直着掉。&lt;/p&gt;
&lt;p&gt;所以我们可以直接用 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的序列，记录从每 &lt;span class=&#34;math inline&#34;&gt;\(1\sim m\)&lt;/span&gt; 列扔下去的情况。然后我们很容易可以知道，如果任意两个序列发生了交汇，那么从交汇点开始至序列结束呢，这两个序列的内容都是完全一样的。因为之前序列长什么样子，完全不会对之后产生影响。所以一旦有任意一个状态是一样的，后面都会是一样的。&lt;/p&gt;
&lt;p&gt;所以呢，一旦我们跟着计划好的路线走，却发现走不动了，那就说明从走不动的位置开始，到原定路线结束，这些位置都会被封掉。所以这个时候我们直接重新计算路线就好了。&lt;/p&gt;
&lt;p&gt;对于这 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 列，就算每一列预定路线上的每个位置都被占了一次，也只会被更改 &lt;span class=&#34;math inline&#34;&gt;\(n\times m\)&lt;/span&gt; 次；总体时间复杂度只有 &lt;span class=&#34;math inline&#34;&gt;\(O(nm^2)\)&lt;/span&gt;。然后又由于不可能跑满，其实是完全没有问题，甚至跑得出溜快的。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxm = 35;
const int maxn = 3e4 + 5;
char a[maxn][maxm];
int n, m, q, u, x, y;
std::vector&amp;lt;int&amp;gt; p[maxm]; 
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    freopen(&amp;quot;kamen.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;kamen.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m);
    for (int i = 1; i &amp;lt;= n; ++i)
        scanf(&amp;quot;%s&amp;quot;, a[i] + 1);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        x = 1, y = i;
        for (;;) &amp;#123;
            p[i].push_back(y); 
            if (a[x + 1][y] == &amp;#39;.&amp;#39;) ++x;
            else &amp;#123;
                if (a[x + 1][y] == &amp;#39;X&amp;#39;) break;
                if (a[x][y - 1] == &amp;#39;.&amp;#39; &amp;amp;&amp;amp; a[x + 1][y - 1] == &amp;#39;.&amp;#39;)
                    ++x, --y;
                else if (a[x][y + 1] == &amp;#39;.&amp;#39; &amp;amp;&amp;amp; a[x + 1][y + 1] == &amp;#39;.&amp;#39;)
                    ++x, ++y;
                else break;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;q);
    while (q--) &amp;#123;
        scanf(&amp;quot;%d&amp;quot;, &amp;amp;u);
        while (a[p[u].size()][p[u].back()] != &amp;#39;.&amp;#39;)
            p[u].pop_back();
        x = p[u].size(), y = p[u].back();
        for (;;) &amp;#123;
            p[u].push_back(y); 
            if (a[x + 1][y] == &amp;#39;.&amp;#39;) ++x;
            else &amp;#123;
                if (a[x + 1][y] == &amp;#39;X&amp;#39;) break;
                if (a[x][y - 1] == &amp;#39;.&amp;#39; &amp;amp;&amp;amp; a[x + 1][y - 1] == &amp;#39;.&amp;#39;)
                    ++x, --y;
                else if (a[x][y + 1] == &amp;#39;.&amp;#39; &amp;amp;&amp;amp; a[x + 1][y + 1] == &amp;#39;.&amp;#39;)
                    ++x, ++y;
                else break;
            &amp;#125;
        &amp;#125;
        a[x][y] = &amp;#39;O&amp;#39;;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) puts(a[i] + 1);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-商人&#34;&gt;B. 商人&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4434/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4434/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先忽略图中的环带来的问题，假设 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 表示从 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 点出发的答案，不难想到 DP 式 &lt;span class=&#34;math inline&#34;&gt;\(f_u = \min\{\max(f_v-p_{(u,v)}, r_{(u,v)})\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么问题来了，图中是会有环的，不能简单地去更新 DP 值。我们首先考虑「根源」，每一个 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 一定都是由另一个 &lt;span class=&#34;math inline&#34;&gt;\(f_v\)&lt;/span&gt; 转移得到的，那么一定会存在一个已知的 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt;，不由其他任何 &lt;span class=&#34;math inline&#34;&gt;\(f_v\)&lt;/span&gt; 得到。&lt;/p&gt;
&lt;p&gt;考虑一个环中 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 最大的一条边 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;。假设图中只有这一个环，那么 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 的值一定为 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，因为 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 只能为非负。这样「根源」就被我们找到了。接下来进一步考虑转移方法。&lt;/p&gt;
&lt;p&gt;一个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 只能被其相连的点 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 更新，那么当且仅当所有 &lt;span class=&#34;math inline&#34;&gt;\(f_v\)&lt;/span&gt; 都是确定的，&lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 才能被确定，进而去更新 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的前驱。这让我们想到了拓扑排序。如果我们将所有边反向，那么上面的过程几乎就是拓扑排序。&lt;/p&gt;
&lt;p&gt;为了保证任意一个环上的「根源」都能最先被确定，我们按照按 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 从大到小遍历每一条边的方式处理问题。对于每一条边 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;，我们都假设它是「根源」并用 &lt;span class=&#34;math inline&#34;&gt;\(r_{(u,v)}\)&lt;/span&gt; 更新 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt;。我们其实并不关心 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 是否是我们刚刚定义的形式上的「根源」，毕竟，只要 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 能被 &lt;span class=&#34;math inline&#34;&gt;\(r_{(u,v)}\)&lt;/span&gt; 更新，它就能算作广义上的，&lt;strong&gt;当前时刻的&lt;/strong&gt;「根源」。&lt;/p&gt;
&lt;p&gt;我们在一开始将出度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;（反图上就是入度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;）的点全部加入队列，在每次加边的时候进行拓扑排序。每次一条边以任意形式被「使用」后，都要打标记删除并不能再访问，以保证转移的正确性和高效。如果一条边被「使用」，分两种情况：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;更新「根源」：&lt;/p&gt;
这个时候这条边已经发挥了它的所有作用了，作为 &lt;strong&gt;当前时刻的&lt;/strong&gt;「根源」，这条边的源点在未来至少不会再经由这一条边被更新。故可以删除。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拓扑排序中转移：&lt;/p&gt;
&lt;p&gt;一个点被加入队列，说明它的 DP 值是确定的，那么就不用拿一个已经确定的值多次更新另一个 DP 值。故可以删除。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以正确性是可以保证的。类拓扑排序的结构也保证了算法复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n+m)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int inf = 1e18;
const int maxn = 2e5 + 5;
const int maxm = 2e5 + 5;
struct _ &amp;#123;
    int v, r, p, i;
    _() &amp;#123;&amp;#125;
    _(int v1, int r1, int p1, int i1) &amp;#123;
        v = v1, r = r1, p = p1, i = i1;
    &amp;#125;
&amp;#125;;
struct __ &amp;#123;
    int x, y, r, p;
    bool operator&amp;lt; (const __ &amp;amp;q) const &amp;#123;
        return r &amp;gt; q.r;
    &amp;#125;
&amp;#125;;
__ a[maxm];
bool del[maxn];
std::queue&amp;lt;int&amp;gt; q;
int n, m, x, y, r, p;
std::vector&amp;lt;_&amp;gt; g[maxn];
int f[maxn], deg[maxn];
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
void add(int x, int y, int r, int p, int i) &amp;#123;
    g[x].emplace_back(y, r, p, i);
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    freopen(&amp;quot;merchant.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;merchant.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    read(n), read(m);
    std::fill(f + 1, f + n + 1, inf);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        read(a[i].x), read(a[i].y);
        read(a[i].r), read(a[i].p);
        ++deg[a[i].x];
    &amp;#125;
    std::sort(a + 1, a + m + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        if (!deg[i]) q.push(i);
    for (int i = 1; i &amp;lt;= m; ++i)
        add(a[i].y, a[i].x, a[i].r, a[i].p, i);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        while (!q.empty()) &amp;#123;
            int t = q.front(); q.pop();
            for (auto j : g[t]) &amp;#123;
                if (del[j.i]) continue;
                del[j.i] = 1;
                if (f[t] != inf)
                    f[j.v] = min(f[j.v], max(f[t] - j.p, j.r));
                if (!--deg[j.v]) q.push(j.v);
            &amp;#125;
        &amp;#125;
        if (!del[i]) &amp;#123;
            del[i] = 1, f[a[i].x] = min(f[a[i].x], a[i].r);
            if (!--deg[a[i].x]) q.push(a[i].x);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        print(f[i] == inf ? -1 : f[i], &amp;#39; &amp;#39;);
    putchar(&amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a---gerald-and-giant-chess&#34;&gt;A - Gerald and Giant Chess&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/594162#problem/A&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/594162#problem/A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个呢，一道简单的数数题，但是因为我忘了 DP 容斥怎么打了所以自行思考了很久很久很久，还差最后一点点想出来的时候放弃了去抄题解 /cf&lt;/p&gt;
&lt;p&gt;就是，这种「限制通行」的 DP 容斥（名字是我现场起的）类型的数数题有一种通法，就是首先我们只计算非法方案然后减掉。&lt;/p&gt;
&lt;p&gt;那么非法方案怎么算呢？令 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示一个非法点都不经过，到达 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 这个非法点的方案数，那么有 &lt;span class=&#34;math inline&#34;&gt;\(f_i=calc(s,i)-\sum f_j\times calc(j,i)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 是起点，&lt;span class=&#34;math inline&#34;&gt;\(calc(j,i)\)&lt;/span&gt; 是从 &lt;span class=&#34;math inline&#34;&gt;\(j\to i\)&lt;/span&gt; 的方案数。这样就能不重不漏地枚举完所有情况了。&lt;/p&gt;
&lt;p&gt;我们把 &lt;span class=&#34;math inline&#34;&gt;\((n,m)\)&lt;/span&gt; 也视作一个非法点然后代入 DP 即可得到答案。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int lim = 3e5;
const int mod = 1e9 + 7;
const int maxk = 2e3 + 5;
const int maxn = 3e5 + 5;
struct _ &amp;#123;
    int x, y;
    bool operator&amp;lt; (const _ &amp;amp;q) const &amp;#123;
        return x == q.x ? y &amp;lt; q.y : x &amp;lt; q.x;
    &amp;#125;
&amp;#125;;
_ a[maxk];
int n, m, k, res; 
int f[maxk], fac[maxn];
int qkp(int x, int y) &amp;#123;
    int res = 1;
    while (y) &amp;#123;
        if (y &amp;amp; 1) (res *= x) %= mod;
        (x *= x) %= mod, y &amp;gt;&amp;gt;= 1;
    &amp;#125;
    return res;
&amp;#125;
int inv(int x) &amp;#123; return qkp(x, mod - 2); &amp;#125;
int A(int n, int m) &amp;#123;
    return fac[n] * inv(fac[n - m]) % mod;
&amp;#125;
int C(int n, int m) &amp;#123;
    return A(n, m) * inv(fac[m]) % mod;
&amp;#125;
int calc(int i, int j) &amp;#123;
    int x = a[j].x - a[i].x + 1,
        y = a[j].y - a[i].y + 1;
    return C(x + y - 2, y - 1);
&amp;#125;
int main() &amp;#123;
    fac[0] = 1;
    for (int i = 1; i &amp;lt;= lim; ++i)
        fac[i] = fac[i - 1] * i % mod;
    bool flag = 0;
    read(n), read(m), read(k);
    for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
        read(a[i].x), read(a[i].y);
        flag |= (a[i].x == 1 &amp;amp;&amp;amp; a[i].y == 1);
        flag |= (a[i].x == n &amp;amp;&amp;amp; a[i].y == m);
    &amp;#125;
    a[0].x = a[0].y = 1;
    if (flag) &amp;#123; print(0, &amp;#39;\n&amp;#39;); return 0; &amp;#125;
    ++k, a[k].x = n, a[k].y = m;
    std::sort(a + 1, a + k + 1);
    for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
        f[i] = calc(0, i);
        for (int j = 1; j &amp;lt; i; ++j) &amp;#123;
            if (a[j].x &amp;gt; a[i].x || a[j].y &amp;gt; a[i].y) continue;
            (f[i] -= f[j] * calc(j, i) % mod) %= mod;
        &amp;#125;
    &amp;#125;
    f[k] = (f[k] % mod + mod) % mod;
    print(f[k], &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="Tarjan" />
        <updated>2023-11-13T07:54:34.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20231112/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20231112/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4424&#34;&gt;NOIP S&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://222.180.160.110:61235/contest/4423&#34;&gt;周考 16&lt;/a&gt; &amp;amp; 杂题。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-数字游戏&#34;&gt;A. 数字游戏&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4424/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4424/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;闲话&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;一开始忘了怎么做的然后从 Cindy 的做法开始回忆，一边回忆一边写下文，结果发现写着写着变成 wjf 的做法了 /cf&lt;/p&gt;
&lt;p&gt;upd：变成菌的做法了 /cf /cf /cf&lt;/p&gt;
&lt;p&gt;upd：变成 zmq 的做法了，我已经懒得 /cf 了。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;题意转化一下，大致就是一个每次往右拓展一位的询问区间，每次查询该询问区间内最大值并拿走之。&lt;/p&gt;
&lt;p&gt;我们先感性地想，对于一个 &lt;strong&gt;很大的值&lt;/strong&gt;，它一进入询问范围就会被当场拿走。&lt;/p&gt;
&lt;p&gt;那如果没有被拿走是因为什么呢？因为在前面积存下来的元素中还有比它大的。&lt;/p&gt;
&lt;p&gt;那为什么前面的比它大的元素没有被当场拿走呢？因为在更前面积存下来的有比这个元素大的…… 那么最开始的积存是怎么来的呢？是最初询问区间为 &lt;span class=&#34;math inline&#34;&gt;\([1,p_i]\)&lt;/span&gt; 而非 &lt;span class=&#34;math inline&#34;&gt;\([1,1]\)&lt;/span&gt; 导致的。&lt;/p&gt;
&lt;p&gt;被积存下的数被拿出来用掉的时刻，就是往后碰到了一个比它小的值，然后顶替掉这个值被用掉。被顶替的就进入积存区。&lt;/p&gt;
&lt;p&gt;所以这个时候我们直接 &lt;strong&gt;模拟&lt;/strong&gt; 积存数被用掉的过程。&lt;/p&gt;
&lt;p&gt;对于全序列中的最大值，当场用掉。次大值呢，若它比最大值先进入询问区间，皆大欢喜，当场用掉；又因为最大值不可能被积存，就算它在最大值之后，也可以当场用掉。&lt;/p&gt;
&lt;p&gt;第三大的，就可能进积存区。假设它要出来，首先要满足出来的时间（在进入积存区之后，有点废话），然后如果它一出来就碰到了比它更大的，很不幸，出不来了。但是因为除了最大和次大之外没有元素比它大了，它就可以在剩下的位置里面随便挑——当然是挑最靠前的。后面的和第三大道理就差不多了。&lt;/p&gt;
&lt;p&gt;所以这个时候我们就可以得到一个大致的做法了，我们把元素从大到小排序，顺便记录一下它进入询问范围的时间 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;。然后我们优先让这个值在 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 时刻直接被拿走。那假如 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 这个位置已经被更大的元素占领了，就找这之后第一个空位。&lt;/p&gt;
&lt;p&gt;那么这个「第一个空位」怎么找呢？我们用一个初值为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(pos\)&lt;/span&gt;，对于当场拿走的情况，肯定是不会有冲突的，所以冲突都发生在积存区。积存区又都是从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 开始的，所以我们只需要对于不是当场拿走的情况，把 &lt;span class=&#34;math inline&#34;&gt;\(pos\)&lt;/span&gt; 移到距离 &lt;strong&gt;当前值&lt;/strong&gt; 最近的空位然后放进去就可以了。因为 &lt;span class=&#34;math inline&#34;&gt;\(pos\)&lt;/span&gt; 全程只会右移，摊出来是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;因为我们只要在最开始排个序，总时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n + nq)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
struct _ &amp;#123;
    int x, i;
    bool operator&amp;lt; (const _ &amp;amp;q) const &amp;#123;
        return x &amp;gt; q.x;
    &amp;#125;
&amp;#125;;
_ a[maxn];
int flag[maxn];
int n, m, p, res, pos;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    freopen(&amp;quot;game.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;game.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    read(n), read(m);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i].x), a[i].i = i;
    std::sort(a + 1, a + n + 1);
    while (m--) &amp;#123;
        read(p), res = 0, pos = 1;
        for (int i = 1; i &amp;lt;= n; ++i)
            flag[i] = 0;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            int id =
            (a[i].i &amp;lt; p ? 1 : a[i].i - p + 1);
            if (flag[id]) &amp;#123;
                while (flag[pos]) ++pos;
                flag[pos] = i;
            &amp;#125;
            else flag[id] = i;
        &amp;#125;
        for (int i = 1, j = 1; i &amp;lt;= n; ++i, j = -j) 
            res += j * a[flag[i]].x;
        print(res, &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-过河卒ii&#34;&gt;B. 过河卒II&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4424/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4424/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及 &lt;a href=&#34;https://www.luogu.com.cn/problem/P6234&#34;&gt;这&lt;/a&gt; 是原题。&lt;/p&gt;
&lt;p&gt;读错题了整整 3.5h /youl&lt;/p&gt;
&lt;p&gt;我们接下来把「特殊格子」记为 &lt;code&gt;-&lt;/code&gt;，「特殊格子」四个方向相邻的点记作 &lt;code&gt;O&lt;/code&gt;，除此之外的点因为没有可能被选到，我们不做讨论。&lt;/p&gt;
&lt;pre class=&#34;plain&#34;&gt;&lt;code&gt;  -
- O -
  -&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于一个关键点，我们发现找 T 字本身不太方便，所以我们可以把这个转化成在十字里面抠掉一个最小值。&lt;/p&gt;
&lt;p&gt;接下来，我们假设有另一个关键点的十字和这一个的十字有重合并不相邻，那么大抵是形如这个样子的：&lt;/p&gt;
&lt;pre class=&#34;plain&#34;&gt;&lt;code&gt;  -   -
- O - O -
  -   -&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个时候，我们发现一共有 7 个 &lt;code&gt;-&lt;/code&gt;，一共需要 6 个 &lt;code&gt;-&lt;/code&gt;，所以我们试着随便抠掉一个。&lt;/p&gt;
&lt;pre class=&#34;plain&#34;&gt;&lt;code&gt;  X   | -
- O - | O -
  -   | -&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们发现这个时候一定是能找到一个 &lt;strong&gt;确定的&lt;/strong&gt; 方案去划分 T 字的。&lt;/p&gt;
&lt;p&gt;所以对于两个 &lt;code&gt;O&lt;/code&gt; 的情况，我们抠掉七个 &lt;code&gt;-&lt;/code&gt; 当中的最小值即可。&lt;/p&gt;
&lt;p&gt;接下来假设有三个 &lt;code&gt;O&lt;/code&gt;，那么会有 10 个 &lt;code&gt;-&lt;/code&gt;，但我们需要 9 个，于是抠掉最小值，依然存在一种 &lt;strong&gt;确定的&lt;/strong&gt; 方案去划分 T 字。&lt;/p&gt;
&lt;p&gt;不难发现，&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 彼此影响还不相邻的 &lt;code&gt;O&lt;/code&gt; 会带来 &lt;span class=&#34;math inline&#34;&gt;\(3\times n-1\)&lt;/span&gt; 个 &lt;code&gt;-&lt;/code&gt;（小学数学计算即可），我们将最小者删除即可得到最大答案。&lt;/p&gt;
&lt;p&gt;推广一下结论，其实是我们对于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个相互影响的 &lt;code&gt;O&lt;/code&gt;（注意这里 &lt;strong&gt;没有强调&lt;/strong&gt; 不相邻），删掉一些使得 &lt;code&gt;-&lt;/code&gt; 的数量为 &lt;span class=&#34;math inline&#34;&gt;\(3x\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么我们又知道对于最理想的情况，也就是上面讲到的相互影响又不相邻，&lt;code&gt;-&lt;/code&gt; 的个数是 &lt;span class=&#34;math inline&#34;&gt;\(3\times x+1\)&lt;/span&gt;，我们又只能进行抠掉 &lt;code&gt;-&lt;/code&gt; 这一个操作。&lt;/p&gt;
&lt;p&gt;所以对于一个 &lt;code&gt;O/-&lt;/code&gt; 连通块，要求其 &lt;code&gt;-&lt;/code&gt; 的个数要么是 &lt;span class=&#34;math inline&#34;&gt;\(3x\)&lt;/span&gt;（不然 &lt;code&gt;-&lt;/code&gt; 就不够用了，以及 &lt;code&gt;-&lt;/code&gt; 的缺失是相邻的 &lt;code&gt;O&lt;/code&gt; 和边界导致的；边界外的 &lt;code&gt;-&lt;/code&gt; 肯定是不能算的），要么为 &lt;span class=&#34;math inline&#34;&gt;\(3x+1\)&lt;/span&gt;（只用删一个也保证了正确性）。&lt;/p&gt;
&lt;p&gt;所以我们跑一个类 Flood-fill，一边搜一边找最小的 &lt;code&gt;-&lt;/code&gt;，还要统计 &lt;code&gt;-&lt;/code&gt; 和 &lt;code&gt;O&lt;/code&gt; 的总个数，还要计算 &lt;span class=&#34;math inline&#34;&gt;\(sum\)&lt;/span&gt;。然后就完了。&lt;/p&gt;
&lt;p&gt;虽然说这个 Flood-fill 没什么技术含量，但是我们要注意只能从 &lt;code&gt;-&lt;/code&gt; 出发只能通往 &lt;code&gt;O&lt;/code&gt; 而非另一个 &lt;code&gt;-&lt;/code&gt;，因为相邻的两个 &lt;code&gt;-&lt;/code&gt; 其实是不会互相交叉的相互影响的。&lt;/p&gt;
&lt;p&gt;Flood-fill 带来的总时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxk = 1e6 + 5;
const int inf = 0x3f3f3f3f;
const int fx[] = &amp;#123; 0, 0, 1, -1 &amp;#125;;
const int fy[] = &amp;#123; 1, -1, 0, 0 &amp;#125;;
int n, m, k, x, y, res;
int mn, sum, cnt1, cnt2;
std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; a, b, c;
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
void DFS(int x, int y) &amp;#123;
    sum += a[x][y];
    if (b[x][y] == 1) ++cnt1;
    else ++cnt2, mn = min(mn, a[x][y]);
    c[x][y] = 1;
    for (int i = 0; i &amp;lt; 4; ++i) &amp;#123;
        int nx = x + fx[i],
            ny = y + fy[i];
        if (!nx || !ny || nx &amp;gt; n || ny &amp;gt; m)
            continue;
        if (c[nx][ny]) continue;
        if ((b[x][y] == 1 &amp;amp;&amp;amp; b[nx][ny] == 1)
         || (b[x][y] == 1 &amp;amp;&amp;amp; b[nx][ny] == 2)
          || (b[x][y] == 2 &amp;amp;&amp;amp; b[nx][ny] == 1))
            DFS(nx, ny);
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE
    freopen(&amp;quot;pawn.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;pawn.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    read(n), read(m);
    a.push_back(std::vector&amp;lt;int&amp;gt;(m + 1));
    b.push_back(std::vector&amp;lt;int&amp;gt;(m + 1));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        a.push_back(std::vector&amp;lt;int&amp;gt;(m + 1));
        b.push_back(std::vector&amp;lt;int&amp;gt;(m + 1));
        for (int j = 1; j &amp;lt;= m; ++j)
            read(a[i][j]);
    &amp;#125;
    c = b, read(k);
    for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
        read(x), read(y), ++x, ++y;
        b[x][y] = 1;
        if (x + 1 &amp;lt;= n &amp;amp;&amp;amp; !b[x + 1][y]) b[x + 1][y] = 2;
        if (y + 1 &amp;lt;= m &amp;amp;&amp;amp; !b[x][y + 1]) b[x][y + 1] = 2;
        if (x - 1 &amp;gt;= 1 &amp;amp;&amp;amp; !b[x - 1][y]) b[x - 1][y] = 2;
        if (y - 1 &amp;gt;= 1 &amp;amp;&amp;amp; !b[x][y - 1]) b[x][y - 1] = 2;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            if (b[i][j] &amp;amp;&amp;amp; !c[i][j]) &amp;#123;
                mn = inf;
                cnt1 = cnt2 = sum = 0;
                DFS(i, j);
                if (cnt2 == cnt1 * 3) res += sum;
                else if (cnt2 == cnt1 * 3 + 1) res += sum - mn;
                else &amp;#123; puts(&amp;quot;No&amp;quot;); return 0; &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-树图&#34;&gt;C. 树图&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4424/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4424/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DJ：你们去打一下动态树 DP 的板子就可以了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时无声胜有声。&lt;/p&gt;
&lt;p&gt;这里仅仅介绍一下 40pts 的做法。我们理所当然地想到 DP 一个点染成某种颜色所需的最小代价。&lt;/p&gt;
&lt;p&gt;这里说的染成某种颜色其实不太准确，应该是「代表着」哪种颜色。像 0 可以代表 1 也可以代表 2，1 就只能代表 1，2 也只能代表 2。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(f_{u,1}\)&lt;/span&gt; 表示以 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 为根的子树中不保留颜色 2 的最小代价（代表 1），&lt;span class=&#34;math inline&#34;&gt;\(f_{u, 2}\)&lt;/span&gt; 表示以 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 为根的子树中不保留颜色 1 的最小代价（代表 2）。&lt;/p&gt;
&lt;p&gt;那么对于颜色已经确定为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的点 &lt;span class=&#34;math inline&#34;&gt;\(u_1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(f_{u_1,2}=\inf\)&lt;/span&gt;；对于颜色已经确定为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的点 &lt;span class=&#34;math inline&#34;&gt;\(u_2\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(f_{u_2,1}=\inf\)&lt;/span&gt;；颜色为 0 的 &lt;span class=&#34;math inline&#34;&gt;\(u_0\)&lt;/span&gt; 就不用管。&lt;/p&gt;
&lt;p&gt;然后如果 &lt;span class=&#34;math inline&#34;&gt;\(u_1\)&lt;/span&gt; 有一个 2 颜色的儿子 &lt;span class=&#34;math inline&#34;&gt;\(v_2\)&lt;/span&gt;，就要切断这条边；反之，如果这个儿子的颜色为 1，就不用切断。&lt;/p&gt;
&lt;p&gt;所以有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{u,c}=\sum_{v\in son_u} \min(f_{v,c},f_{v,3-c}+1)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;那么就完了。每次询问的时候跑一个完整的树 DP，或者我们也可以发现只用更新 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 到目标点这一条链上的 DP 值，然后就可以根据这个做一个并不会实际改进复杂度的优化。&lt;/p&gt;
&lt;p&gt;总体时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(nq)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
const int inf = 0x3f3f3f3f;
int col[maxn];
int f[maxn][3];
int n, x, y, q;
std::vector&amp;lt;int&amp;gt; g[maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
void DFS(int x, int fa, int to) &amp;#123;
    f[x][1] = f[x][2] = 0;
    if (col[x] == 1) f[x][2] = inf;
    else if (col[x] == 2) f[x][1] = inf;
    for (auto i : g[x]) &amp;#123;
        if (i == fa) continue;
        if (x != to) DFS(i, x, to);
        f[x][1] += min(f[i][1], f[i][2] + 1);
        f[x][2] += min(f[i][2], f[i][1] + 1);
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
#ifdef ONLINE_JUDGE 
    freopen(&amp;quot;diagrams.in&amp;quot;, &amp;quot;r&amp;quot;, stdin);
    freopen(&amp;quot;diagrams.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
#endif
    read(n);
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        add(x, y), add(y, x);
    &amp;#125;
    read(q);
    while (q--) &amp;#123;
        read(x), read(y);
        col[y] = (x &amp;lt;= 2) ? x : 0;
        DFS(1, -1, y);
        print(min(f[1][1], f[1][2]), &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e.-字符串-string&#34;&gt;E. 字符串 string&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4423/problem/5&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4423/problem/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原题：&lt;a href=&#34;https://codeforces.com/problemset/problem/756/D&#34;&gt;CF756D - Bacterial Melee&lt;/a&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;怪话&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;兔子：我谴责你。&lt;/p&gt;
&lt;p&gt;我：？&lt;/p&gt;
&lt;p&gt;兔子：为什么你的 last 要缩写成 &lt;code&gt;la&lt;/code&gt;。我没看你题解直接看的代码看了半天没看懂。&lt;/p&gt;
&lt;p&gt;我：不缩写成 &lt;code&gt;la&lt;/code&gt; 难道要写成 &lt;code&gt;lst&lt;/code&gt; 吗？&lt;/p&gt;
&lt;p&gt;兔子：不然呢？&lt;/p&gt;
&lt;p&gt;好吧，大家都是异教徒。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;可以很简单的想到，最终字符串一定由原串中的部分字符，按照其在原串中的顺序，经过若干次重复得到。那么我们把一段连续的相同字符视为一个字符，得到的这个串就是原串的一个子序列。&lt;/p&gt;
&lt;p&gt;所以我们只需要求出原串的不同子序列个数，再经过一定的排列组合就可以求出方案数。&lt;/p&gt;
&lt;p&gt;比如，我们知道一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的串中有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个长度为 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 的子序列，那么由插板法可得这 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个子序列会贡献 &lt;span class=&#34;math inline&#34;&gt;\(C_{n-1}^{m-1}\times k\)&lt;/span&gt; 的方案数。&lt;/p&gt;
&lt;p&gt;那么不同子序列个数怎么求呢？显而易见需要 DP，规定 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的子序列最后一位为 &lt;span class=&#34;math inline&#34;&gt;\(s_j\)&lt;/span&gt; 的方案数，就可以直接 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}=\sum f_{i-1,k}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但这样做有一个问题，就是会重复计算。假如原串中在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 位置有一个 &lt;code&gt;&#39;o&#39;&lt;/code&gt;，&lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 位置又有一个 &lt;code&gt;&#39;o&#39;&lt;/code&gt;，两个都可以从前面某个位置（假设为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;；假设 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 上其中一个被计入方案数的合法子序列为 &lt;code&gt;&#34;hyac&#34;&lt;/code&gt;），那么转移到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时，计算了 &lt;code&gt;&#34;hyaco&#34;&lt;/code&gt;，到了 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt;，依然可以从 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 处得到 &lt;code&gt;&#34;hyaco&#34;&lt;/code&gt;，就会重复计算。&lt;/p&gt;
&lt;p&gt;那么怎么避免这一点呢？对于一个位置 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，假设其上一个相同字母的位置为 &lt;span class=&#34;math inline&#34;&gt;\(last_i\)&lt;/span&gt;，我们规定其仅可从 &lt;span class=&#34;math inline&#34;&gt;\((last_i,i)\)&lt;/span&gt; 进行转移即可（注意两边都是开区间）。&lt;/p&gt;
&lt;p&gt;初始化是对于每一个没有前驱的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(f_{1,i}=1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;实现上，因为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的大小是 &lt;span class=&#34;math inline&#34;&gt;\(5\times 10^3\)&lt;/span&gt;，转移区间又是连续的，我们用一个前缀和进行优化即可。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;，应该比官方题解讲的方法具象一些。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int mod = 1e9 + 7;
const int maxn = 5e3 + 5;
int n, res;
char s[maxn];
int fac[maxn];
int la[maxn], p[maxn];
int f[maxn][maxn], u[maxn][maxn];
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int qkp(int x, int y) &amp;#123;
    int res = 1;
    while (y) &amp;#123;
        if (y &amp;amp; 1) (res *= x) %= mod;
        (x *= x) %= mod, y &amp;gt;&amp;gt;= 1;
    &amp;#125;
    return res;
&amp;#125;
int inv(int x) &amp;#123; return qkp(x, mod - 2); &amp;#125;
int A(int n, int m) &amp;#123;
    return fac[n] * inv(fac[n - m]) % mod;
&amp;#125;
int C(int n, int m) &amp;#123;
    return A(n, m) * inv(fac[m]) % mod;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%lld %s&amp;quot;, &amp;amp;n, s + 1);
    fac[0] = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        la[i] = p[s[i] - &amp;#39;a&amp;#39; + 1];
        if (!la[i]) f[1][i] = 1, ++res;
        u[1][i] = u[1][i - 1] + f[1][i];
        p[s[i] - &amp;#39;a&amp;#39; + 1] = i;
        fac[i] = (fac[i - 1] * i) % mod;
    &amp;#125;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        int sum = 0;
        for (int j = i; j &amp;lt;= n; ++j) &amp;#123;
            int k = max(i - 1, la[j] + 1);
            if (k &amp;lt;= j - 1)
                f[i][j] = (u[i - 1][j - 1] - u[i - 1][k - 1]) % mod;
            u[i][j] = (u[i][j - 1] + f[i][j]) % mod;
            (sum += f[i][j]) %= mod;
        &amp;#125;
        res += C(n - 1, i - 1) * sum % mod;
        res %= mod;
    &amp;#125;
    res = (res + mod) % mod;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;abc328f---good-set-query&#34;&gt;ABC328F - Good Set Query&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc328/tasks/abc328_f&#34; class=&#34;uri&#34;&gt;https://atcoder.jp/contests/abc328/tasks/abc328_f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个加权并查集。&lt;/p&gt;
&lt;p&gt;我们用并查集维护关系，在合并两个集合的时候给被合并者的原本根打一个懒标记，意为该并查集需要整体更新的 delta。&lt;/p&gt;
&lt;p&gt;在每次 &lt;code&gt;find&lt;/code&gt; 时，路径上的点均从 &lt;strong&gt;直系父亲&lt;/strong&gt; 处继承懒标记。然后因为有了路径压缩，所以每个点在查询时均能得到不重复的懒标记（因为自己的祖先已经被直系父亲继承过了）。&lt;/p&gt;
&lt;p&gt;同样也是因为弱势一方才被打标记，保证了根节点上不会有标记，路径压缩后就将父亲更新为根，保证不会因为多次 &lt;code&gt;find&lt;/code&gt; 导致标记重复计算。&lt;/p&gt;
&lt;p&gt;每次尝试合并的时候，因为首先需要进行 &lt;code&gt;find&lt;/code&gt;，保证 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 均是最新状态。若 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 已经在同一个集合了，直接判断两个差值是否为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;；否则，合并两个集合并给弱势方打上标记。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e5 + 5;
int n, q, x, y, d;
int f[maxn], u[maxn];
int find(int x) &amp;#123;
    if (f[x] == x) return x;
    int fa = find(f[x]);
    u[x] += u[f[x]];
    return f[x] = fa;
&amp;#125;
bool merge(int x, int y, int d) &amp;#123;
    int fx = find(x), fy = find(y);
    if (fx == fy) return u[x] - u[y] == d;
    f[fx] = fy, u[fx] = d - (u[x] - u[y]);
    return 1;
&amp;#125;
int main() &amp;#123;
    read(n), read(q);
    for (int i = 1; i &amp;lt;= n; ++i)
        f[i] = i;
    for (int i = 1; i &amp;lt;= q; ++i) &amp;#123;
        read(x), read(y), read(d);
        if (merge(x, y, d)) print(i, &amp;#39; &amp;#39;);
    &amp;#125;
    putchar(&amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;cf1701f---points&#34;&gt;CF1701F - Points&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/1701/F&#34; class=&#34;uri&#34;&gt;http://codeforces.com/problemset/problem/1701/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们先考虑对于一个单点 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，假设 &lt;span class=&#34;math inline&#34;&gt;\([p-d, p)\)&lt;/span&gt; 中共有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个点，那么答案就是 &lt;span class=&#34;math inline&#34;&gt;\(C_k^2=\dfrac {k(k-1)}2\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;假如范围内新加入了一个点，&lt;span class=&#34;math inline&#34;&gt;\(k\gets k+1\)&lt;/span&gt;，那么答案就是 &lt;span class=&#34;math inline&#34;&gt;\(C_{k+1}^2=\dfrac {k(k+1)}{2}\)&lt;/span&gt;，较原来增加了 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。相应地，若范围内减少了一个点，&lt;span class=&#34;math inline&#34;&gt;\(k\gets k-1\)&lt;/span&gt;，答案较原来就会减少 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;当我们加入一个点 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，区间 &lt;span class=&#34;math inline&#34;&gt;\((p,p+d]\)&lt;/span&gt; 都会收到影响。假设该区间内原本的每个点之 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的和是 &lt;span class=&#34;math inline&#34;&gt;\(s_k\)&lt;/span&gt;，那么总体的答案就会减少 &lt;span class=&#34;math inline&#34;&gt;\(s_k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么 &lt;span class=&#34;math inline&#34;&gt;\(s_k\)&lt;/span&gt; 怎么去维护呢？插入点 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 时，答案先加上当前 &lt;span class=&#34;math inline&#34;&gt;\(s_k\)&lt;/span&gt; 和新点的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，再将 &lt;span class=&#34;math inline&#34;&gt;\((p, p+d]\)&lt;/span&gt; 内的 &lt;span class=&#34;math inline&#34;&gt;\(s_k\)&lt;/span&gt; 全部 +1；删除点 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 时，答案减去 &lt;span class=&#34;math inline&#34;&gt;\(s_k-c\)&lt;/span&gt; 和待删点的答案（其中 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\((p,p+d]\)&lt;/span&gt; 中的点数），再将 &lt;span class=&#34;math inline&#34;&gt;\((p, p+d]\)&lt;/span&gt; 内的 &lt;span class=&#34;math inline&#34;&gt;\(s_k\)&lt;/span&gt; 全部 -1。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int lim = 2e5;
const int maxn = 2e5 + 5;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
struct _ &amp;#123; int u, p, d, l, r; &amp;#125;;
_ t[maxn &amp;lt;&amp;lt; 2];
int q, d, x, res;
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].u += t[lt].p * t[p].d;
        t[rt].u += t[rt].p * t[p].d;
        t[lt].d += t[p].d;
        t[rt].d += t[p].d;
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) return;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].p;
    int res = 0, mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    if (l &amp;lt;= mid) res = ask(lt, l, r);
    if (r &amp;gt; mid) res += ask(rt, l, r);
    return res;
&amp;#125;
int qry(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    int res = 0, mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (l &amp;lt;= mid) res = qry(lt, l, r);
    if (r &amp;gt; mid) res += qry(rt, l, r);
    return res;
&amp;#125;
void upd(int p, int l, int r, int x) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d += x;
        t[p].u += t[p].p * x;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (l &amp;lt;= mid) upd(lt, l, r, x);
    if (r &amp;gt; mid) upd(rt, l, r, x);
    t[p].u = t[lt].u + t[rt].u;
    return;
&amp;#125;
void clr(int p, int x) &amp;#123;
    --t[p].p;
    if (t[p].l == t[p].r) &amp;#123;
        res -= t[p].u * (t[p].u - 1) / 2;
        t[p].u = t[p].d = t[p].p = 0;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (x &amp;lt;= mid) clr(lt, x);
    else clr(rt, x);
    t[p].u = t[lt].u + t[rt].u;
    return;
&amp;#125;
void add(int p, int x, int v) &amp;#123;
    ++t[p].p;
    if (t[p].l == t[p].r) &amp;#123;
        res += v * (v - 1) / 2;
        t[p].u = v, t[p].p = 1;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (x &amp;lt;= mid) add(lt, x, v);
    else add(rt, x, v);
    t[p].u = t[lt].u + t[rt].u;
    return;
&amp;#125;
void upd(int l, int r, int x) &amp;#123;
    upd(1, min(l, lim), min(r, lim), x);
    return;
&amp;#125;
int qry(int l, int r) &amp;#123;
    return qry(1, min(l, lim), min(r, lim));
&amp;#125;
int ask(int l, int r) &amp;#123;
    return ask(1, max(1, min(l, lim)), max(1, min(r, lim)));
&amp;#125;
int main() &amp;#123;
    read(q), read(d);
    bld(1, 1, lim);
    while (q--) &amp;#123;
        read(x);
        if (ask(x, x)) &amp;#123;
            int u = qry(x + 1, x + d) - ask(x + 1, x + d);
            res -= u, upd(x + 1, x + d, -1), clr(1, x);
        &amp;#125;
        else &amp;#123;
            int u = qry(x + 1, x + d);
            res += u, upd(x + 1, x + d, 1);
            add(1, x, ask(x - d, x - 1));
        &amp;#125;
        print(res, &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="数据结构" />
        <updated>2023-11-12T08:42:43.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20231005/</id>
        <title>构造</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20231005/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/585791&#34;&gt;构造杂题&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a---errich-tac-toe-hard-version&#34;&gt;A - Errich-Tac-Toe (Hard Version)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/585791#problem/A&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/585791#problem/A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果我们将地图按国际象棋式斜向黑白染色分组，规定黑组要么黑色要么无色，白组要么白色要么无色，那么这样是一定不会三连击的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/651e6652c458853aef280846.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;容易发现无色格子永远不会被更改，而在方式 A 中被更改的格子在方式 B 中一定不会被更改；相应地，在方式 A 中不被更改的格子在方式 B 中一定会被更改，故两种染色方式更改的格子数总和就是一开始非无色的格子数。所以根据抽屉原理，一定能找到一种染色方式，代价 &lt;span class=&#34;math inline&#34;&gt;\(\le \dfrac k2\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但是我们要找到的，是代价 &lt;span class=&#34;math inline&#34;&gt;\(\le \dfrac k3\)&lt;/span&gt; 的方案呀？我们观察到我们上面的分组方式，直接让相邻两个不一样了，连二连击都做不到；所以我们要使我们的染色方式更廉价。&lt;/p&gt;
&lt;p&gt;我们仍然斜向染色，但是分为三组：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/651e691fc458853aef28c528.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样，因为刚才叙述过的原因，一定能找到一种染色方法，代价 &lt;span class=&#34;math inline&#34;&gt;\(\le \dfrac k3\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;枚举三种方式，取代价最小的一种即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 305;
char a[maxn][maxn];
int col[maxn][maxn];
int T, n, res, id, typ;
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
int func(int x, int y) &amp;#123;
    int res = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
            if (col[i][j] == y)
                res += (a[i][j] == &amp;#39;X&amp;#39;);
            else if (col[i][j] != x)
                res += (a[i][j] == &amp;#39;O&amp;#39;);
        &amp;#125;
    &amp;#125;
    return res;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;T);
    while (T--) &amp;#123;
        scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);
        int cnt = 0;
        for (int i = 1; i &amp;lt;= n; ++i)
            scanf(&amp;quot;%s&amp;quot;, a[i] + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= n; ++j)
                cnt += (a[i][j] != &amp;#39;.&amp;#39;);
            for (int j = 1; j &amp;lt;= i; ++j)
                col[j][i - j + 1] = (i - 1) % 3 + 1;
        &amp;#125;
        for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= n - i + 1; ++j)
                col[j + i - 1][n - j + 1] = (n + i - 2) % 3 + 1;
        &amp;#125;
        res = func(1, 2), id = 1, typ = 2;
        if (func(1, 3) &amp;lt; res)
            res = func(1, 3), id = 1, typ = 3;
        if (func(2, 1) &amp;lt; res)
            res = func(2, 1), id = 2, typ = 1;
        if (func(2, 3) &amp;lt; res)
            res = func(2, 3), id = 2, typ = 3;
        if (func(3, 1) &amp;lt; res)
            res = func(3, 1), id = 3, typ = 1;
        if (func(3, 2) &amp;lt; res)
            res = func(3, 2), id = 3, typ = 2;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                if (col[i][j] == typ) &amp;#123;
                    if (a[i][j] == &amp;#39;X&amp;#39;)
                        a[i][j] = &amp;#39;O&amp;#39;;
                &amp;#125;
                else if (col[i][j] != id) &amp;#123;
                    if (a[i][j] == &amp;#39;O&amp;#39;)
                        a[i][j] = &amp;#39;X&amp;#39;;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= n; ++j)
                putchar(a[i][j]);
            putchar(&amp;#39;\n&amp;#39;);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;抽屉原理是构造中经常用到的手段，后面我们也会遇到运用了抽屉原理的更多题目。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b---mine-sweeper-ii&#34;&gt;B - Mine Sweeper II&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/585791#problem/B&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/585791#problem/B&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;观察到答案必须 &lt;span class=&#34;math inline&#34;&gt;\(\le \dfrac {n\times m}2\)&lt;/span&gt;，根据在上一道题目得到的经验，考虑找到两种地位相等、并完全相反的方案。&lt;/p&gt;
&lt;p&gt;我们知道，把 B 变成 A 一定可以满足条件；从「完全相反」出发，考虑把所有雷变成空地、所有空地变成雷。&lt;/p&gt;
&lt;p&gt;将空地上的数字视为由空地向周围八格的雷连边，可以连到的边的数量。将地图完全翻转后，边除了起点和终点翻转之外，&lt;strong&gt;没有任何变化&lt;/strong&gt;。所以，数字之和不变。&lt;/p&gt;
&lt;p&gt;由此我们就得到了分两组的方案，由抽屉原理，必有一组方案的代价 &lt;span class=&#34;math inline&#34;&gt;\(\le \dfrac {n\times m}2\)&lt;/span&gt;，取较小者即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e3 + 5;
int n, m, res1, res2;
char a[maxn][maxn], b[maxn][maxn];
int main() &amp;#123;
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m);
    for (int i = 1; i &amp;lt;= n; ++i)
        scanf(&amp;quot;%s&amp;quot;, a[i] + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        scanf(&amp;quot;%s&amp;quot;, b[i] + 1);
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            res1 += (a[i][j] != b[i][j]);
            res2 += (a[i][j] == b[i][j]);
        &amp;#125;
    &amp;#125;
    if (res1 &amp;lt; res2) &amp;#123;
        for (int i = 1; i &amp;lt;= n; ++i)
            puts(a[i] + 1);
    &amp;#125;
    else &amp;#123;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                if (a[i][j] == &amp;#39;.&amp;#39;)
                    putchar(&amp;#39;X&amp;#39;);
                else putchar(&amp;#39;.&amp;#39;);
            &amp;#125;
            putchar(&amp;#39;\n&amp;#39;);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c---ehabs-last-corollary&#34;&gt;C - Ehab’s Last Corollary&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/585791#problem/C&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/585791#problem/C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们尝试证明出题人的猜想……&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果整个图上没有环，就整个一棵树&lt;/p&gt;
树呢，是一个二分图对不对，然后抽屉原理，我们看两部节点中比较大的那一坨，它的大小一定是 &lt;span class=&#34;math inline&#34;&gt;\(\ge \dfrac n2\)&lt;/span&gt; 又 &lt;span class=&#34;math inline&#34;&gt;\(\ge \dfrac k2\)&lt;/span&gt; 的，直接输出就好了。&lt;/li&gt;
&lt;li&gt;否则，对于一个环，如果它的点数小于等于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，那我们直接将它作为第二个问题的答案输出。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;否则，我们在图的最小环上隔一个点选一个点，一定能选出 &lt;span class=&#34;math inline&#34;&gt;\(\left\lfloor\dfrac k2\right\rfloor\)&lt;/span&gt; 个相互独立的点。你说为什么它们之间没有直接连边呢？因为我们是在一个比 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 大的最小环上选的，要是它们之间有直接连边，那就会又构成一个更小的环了。&lt;/p&gt;
&lt;p&gt;所以我们只需要找到一个最小的环然后按上述操作得到答案…… 然而找最小环这一点本身不太现实……&lt;/p&gt;
&lt;p&gt;这个时候我们怎么办呢？&lt;/p&gt;
&lt;p&gt;我们用一点神奇科技。考虑图的 DFS 树。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有返祖边 &lt;span class=&#34;math inline&#34;&gt;\((v, u)\)&lt;/span&gt;，且深度 &lt;span class=&#34;math inline&#34;&gt;\(d_v-d_u&amp;lt; k\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt; 在树上的简单路径和返祖边 &lt;span class=&#34;math inline&#34;&gt;\((v, u)\)&lt;/span&gt; 共同构成一个长度不超过 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的环，直接输出。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;否则，因为 &lt;span class=&#34;math inline&#34;&gt;\(d_v-d_u\ge k\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(d_v\ge k\)&lt;/span&gt;，且对于任意 &lt;span class=&#34;math inline&#34;&gt;\(d_y-d_x&amp;lt;k\)&lt;/span&gt;，返祖边 &lt;span class=&#34;math inline&#34;&gt;\((y,x)\)&lt;/span&gt; 不存在。&lt;/p&gt;
&lt;p&gt;我们仍然考虑上面提到的隔一个取一个的方法。从任意 &lt;span class=&#34;math inline&#34;&gt;\(d_v\ge k\)&lt;/span&gt; 开始取点，分别取 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 代父辈（即自身），&lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 代父辈（即爷爷），&lt;span class=&#34;math inline&#34;&gt;\(4\)&lt;/span&gt; 代父辈……&lt;/p&gt;
&lt;p&gt;为什么这么取就不会出 bug 呢？因为我们上面提到的「对于任意 &lt;span class=&#34;math inline&#34;&gt;\(d_y-d_x&amp;lt;k\)&lt;/span&gt;，返祖边 &lt;span class=&#34;math inline&#34;&gt;\((y,x)\)&lt;/span&gt; 不存在」，所以不会有杂边干扰。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n + m)\)&lt;/span&gt;。只能说真是妙啊。jly 赛高！&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
bool vis[maxn];
int n, m, k, x, y;
int f[maxn], dep[maxn];
std::vector&amp;lt;int&amp;gt; g[maxn];
int col[maxn], cnt[5];
void color(int x, int fa, int now) &amp;#123;
    col[x] = now, ++cnt[now];
    for (auto i : g[x]) &amp;#123;
        if (i == fa) continue;
        color(i, x, 3 - now);
    &amp;#125;
    return;
&amp;#125;
void DFS(int x, int fa) &amp;#123;
    vis[x] = 1;
    for (auto i : g[x]) &amp;#123;
        if (i == fa) continue;
        if (vis[i]) &amp;#123;
            if (dep[i] &amp;lt; dep[x] &amp;amp;&amp;amp;
                dep[x] - dep[i] &amp;lt; k) &amp;#123;
                print(2, &amp;#39;\n&amp;#39;);
                int p = x, cnt = 1;
                while (p != i) ++cnt, p = f[p];
                print(cnt, &amp;#39;\n&amp;#39;), p = x;
                while (p != i) print(p, &amp;#39; &amp;#39;), p = f[p];
                print(i, &amp;#39;\n&amp;#39;), exit(0);
            &amp;#125;
            continue;
        &amp;#125;
        f[i] = x;
        dep[i] = dep[x] + 1;
        DFS(i, x);
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m), read(k);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        read(x), read(y);
        add(x, y), add(y, x);
    &amp;#125;
    if (m == n - 1) &amp;#123;
        print(1, &amp;#39;\n&amp;#39;);
        color(1, -1, 1);
        k = (k + 1) / 2;
        x = cnt[1] &amp;gt; cnt[2] ? 1 : 2;
        for (int i = 1; i &amp;lt;= n &amp;amp;&amp;amp; k; ++i) &amp;#123;
            if (col[i] == x)
                print(i, &amp;#39; &amp;#39;), --k;
        &amp;#125;
        putchar(&amp;#39;\n&amp;#39;);
        return 0;
    &amp;#125;
    dep[1] = 1, DFS(1, -1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (dep[i] &amp;gt;= k) &amp;#123;
            print(1, &amp;#39;\n&amp;#39;);
            x = i, k = (k + 1) / 2;
            while (k--)
                print(x, &amp;#39; &amp;#39;), x = f[f[x]];
            putchar(&amp;#39;\n&amp;#39;);
            break;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d---景点划分&#34;&gt;D - 景点划分&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/585791#problem/D&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/585791#problem/D&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;🤡 前言&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;你打开了题目。你想，不就是从图里抠两个连通块出来吗，这也能进 IOI？&lt;/p&gt;
&lt;p&gt;你开始打代码。你突然发现不对劲。你抠掉了一个大小为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的连通块，然后发现剩下的部分裂成了很多个块，其中根本找不到一个大小 &lt;span class=&#34;math inline&#34;&gt;\(\ge b\)&lt;/span&gt; 的块。&lt;/p&gt;
&lt;p&gt;你发现，事情没有这么简单。&lt;/p&gt;
&lt;p&gt;这是你吗？不，这不是你，这是我，小丑 lym 🤡&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;不妨设 &lt;span class=&#34;math inline&#34;&gt;\(a\le b\le c\)&lt;/span&gt;，则由抽屉原理，&lt;span class=&#34;math inline&#34;&gt;\(a\le \dfrac n3\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们从最特殊的情况开始思考。假如图是树，那么答案怎么求呢？&lt;/p&gt;
&lt;p&gt;对于任意一条边，在其左右两边的连通块中，根据抽屉原理，较大者的大小必定 &lt;span class=&#34;math inline&#34;&gt;\(\ge \dfrac{n}{2}\)&lt;/span&gt;，根据重心的定义，重心必然属于较大连通块。&lt;/p&gt;
&lt;p&gt;后面鸽了。总之先放个代码在这里。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
int org[5];
bool book[maxn];
int solFlag, sumFa, faP;
int siz[maxn], col[maxn];
int n, m, a, b, c, x, y, P;
bool vis[maxn], legSon[maxn];
std::vector&amp;lt;int&amp;gt; w[maxn], g[maxn];
void DFS(int x, int fa) &amp;#123;
    bool flag = 1;
    vis[x] = 1, siz[x] = 1;
    for (auto i : w[x]) &amp;#123;
        if (vis[i]) continue;
        DFS(i, x);
        if (siz[i] &amp;gt; n / 2) flag = 0;
        siz[x] += siz[i];
        g[x].push_back(i);
    &amp;#125;
    if (n - siz[x] &amp;gt; n / 2) flag = 0;
    if (flag &amp;amp;&amp;amp; !P) &amp;#123;
        P = x, faP = fa;
        if (n - siz[x] &amp;gt;= a)
            solFlag = fa;
        else &amp;#123;
            for (auto i : g[x]) &amp;#123;
                if (siz[i] &amp;gt;= a) &amp;#123;
                    solFlag = i;
                    break;
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
void fillA(int x) &amp;#123;
    if (a == 0) return;
    col[x] = 1, --a;
    for (auto i : g[x]) fillA(i);
    return;
&amp;#125;
void fillB(int x) &amp;#123;
    if (b == 0) return;
    col[x] = 2, --b;
    for (auto i : g[x]) &amp;#123;
        if (x == P &amp;amp;&amp;amp; i == solFlag)
            continue;
        fillB(i);
    &amp;#125;
    return;
&amp;#125;
void fillC(void) &amp;#123;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (!col[i]) col[i] = 3;
    return;
&amp;#125;
void DFS1(int x) &amp;#123;
    if (!a || x == P) return;
    col[x] = 1, --a;
    for (auto i : g[x]) DFS1(i);
    return;
&amp;#125;
void DFS2(int x) &amp;#123;
    if (b == 0) return;
    if (!col[x]) col[x] = 2, --b;
    for (auto i : g[x]) DFS2(i);
    return;
&amp;#125;
void func(void) &amp;#123;
    int pos[5] = &amp;#123;&amp;#125;;
    if (a &amp;gt;= b &amp;amp;&amp;amp; b &amp;gt;= c) // cba
        org[1] = 3, org[2] = 2, org[3] = 1;
    else if (a &amp;gt;= b &amp;amp;&amp;amp; a &amp;gt;= c) // bca
        org[1] = 2, org[2] = 3, org[3] = 1;
    else if (a &amp;gt;= b) // bac
        org[1] = 2, org[2] = 1, org[3] = 3;
    else if (c &amp;gt;= b) // abc
        org[1] = 1, org[2] = 2, org[3] = 3;
    else if (c &amp;gt;= a) // acb
        org[1] = 1, org[2] = 3, org[3] = 2;
    else // cab
        org[1] = 3, org[2] = 1, org[3] = 2;
    pos[1] = a, pos[2] = b, pos[3] = c;
    std::sort(pos + 1, pos + 4);
    a = pos[1], b = pos[2], c = pos[3];
    return;
&amp;#125;
void ADD(int x) &amp;#123; // 判断儿子是否合法 
    if (x == P)
        return;
    book[x] = 1;
    for (auto i : w[x]) &amp;#123;
        if (i == P &amp;amp;&amp;amp; x != faP) legSon[x] = 1;
        if (!book[i]) ADD(i);
    &amp;#125;
    return;
&amp;#125;
void DFS3(int x) &amp;#123; // Sub2 染头上 
    if (!a || x == P) return;
    col[x] = 1, --a;
    for (auto i : g[x]) DFS3(i);
    return;
&amp;#125;
void DFS4(int x) &amp;#123; // Sub2 染儿子
    if (a == 0) return;
    col[x] = 1, --a;
    for (auto i : g[x]) DFS4(i);
    return;
&amp;#125;
void DFS5(int x) &amp;#123; // Sub2 染 B 色
    if (b == 0) return;
    col[x] = 2, --b;
    for (auto i : g[x]) &amp;#123;
        // 如果子树加入了 A
        // 那么起码子树的根是会被染的。 
        if (col[i]) continue;
        DFS5(i);
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    read(a), read(b), read(c), func();
    while (m--) &amp;#123;
        read(x), read(y), ++x, ++y;
        w[x].push_back(y), w[y].push_back(x);
    &amp;#125;
    DFS(1, -1);
    if (solFlag) &amp;#123;
        if (solFlag == faP) DFS1(1), DFS2(P);
        else fillA(solFlag), fillB(1);
        fillC();
    &amp;#125;
    else &amp;#123;
        ADD(1), sumFa = n - siz[P];
        auto now = g[P].begin(), ex = now;
        while (sumFa &amp;lt; a) &amp;#123;
            while (now != g[P].end() &amp;amp;&amp;amp; !legSon[*now]) ++now;
            if (now == g[P].end()) goto noSol;
            sumFa += siz[*(ex = now++)];
        &amp;#125;
        auto pos = g[P].begin();
        DFS3(1);
        for (;; ++pos) &amp;#123;
            if (!legSon[*pos]) continue;
            DFS4(*pos);
            if (pos == ex) break;
        &amp;#125;
        DFS5(P), fillC();
    &amp;#125;
    noSol: ;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
    #ifdef ONLINE_JUDGE
        print(org[col[i]], &amp;#39; &amp;#39;);
    #else
        print(col[i], &amp;#39; &amp;#39;);
    #endif
    &amp;#125;
    putchar(&amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
int main() &amp;#123;
    XSC062::main();
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f---strange-housing&#34;&gt;F - Strange Housing&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/585791#problem/F&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/585791#problem/F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是难得一见的小清新题目（经历过前两题的洗礼之后）。&lt;/p&gt;
&lt;p&gt;我们从原图中抽一个生成树出来，比如 DFS 树。&lt;/p&gt;
&lt;p&gt;然后我们又知道树是连通二分图，所以我们按照二分图来染色就可以了。&lt;/p&gt;
&lt;p&gt;但这么做有个 bug，就是树里有返祖边，这就可能会导致二分图的一个部分里出现在原图中相连的点。&lt;/p&gt;
&lt;p&gt;所以我们可以换一种思考方式，把二分图的染色方法带到原图里。&lt;/p&gt;
&lt;p&gt;一个点当且仅当周围有染色点或自身为染色点时是可达的。&lt;/p&gt;
&lt;p&gt;对于一个点，我们先检查其周围一圈有没有染色点；如果有就不能染色。在 DFS 遍历的时候直接染色即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 3e5 + 5;
int col[maxn];
bool vis[maxn];
int T, n, m, x, y, cnt;
std::vector&amp;lt;int&amp;gt; g[maxn];
void DFS(int x) &amp;#123;
    vis[x] = 1;
    for (auto i : g[x]) &amp;#123;
        if (col[i] == 1) &amp;#123;
            col[x] = 0;
            break;
        &amp;#125;
    &amp;#125;
    if (col[x] == -1)
        ++cnt, col[x] = 1;
    for (auto i : g[x]) &amp;#123;
        if (vis[i]) continue;
        if (col[x] == 1) col[i] = 0;
        DFS(i);
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(T);
    while (T--) &amp;#123;
        read(n), read(m);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            g[i].clear();
            g[i].shrink_to_fit();
            vis[i] = 0, col[i] = -1;
        &amp;#125;
        while (m--) &amp;#123;
            read(x), read(y);
            add(x, y), add(y, x);
        &amp;#125;
        cnt = 0, DFS(1);
        for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
            if (!vis[i]) &amp;#123;
                puts(&amp;quot;NO&amp;quot;);
                goto noSol;
            &amp;#125;
        &amp;#125;
        puts(&amp;quot;YES&amp;quot;), print(cnt, &amp;#39;\n&amp;#39;);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            if (col[i] == 1)
                print(i, &amp;#39; &amp;#39;);
        &amp;#125;
        putchar(&amp;#39;\n&amp;#39;);
        noSol: ;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="构造" />
        <updated>2023-10-05T08:42:43.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20231004/</id>
        <title>情景剧</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20231004/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;http://222.180.160.110:61235/contest/4273/problem/1&#34;&gt;情景剧&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-情景剧&#34;&gt;A. 情景剧&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4273/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4273/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定序列，求任取一段区间，区间最大值、区间最小值、区间长度之积的最大值。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(N\le 2\times 10^6\)&lt;/span&gt;，值域为 &lt;span class=&#34;math inline&#34;&gt;\(10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，假设它是 &lt;span class=&#34;math inline&#34;&gt;\([X_i, Y_i]\)&lt;/span&gt; 内的最大值，且 &lt;span class=&#34;math inline&#34;&gt;\([X_i, Y_i]\)&lt;/span&gt; 是该条件下的极大区间；&lt;/p&gt;
&lt;p&gt;相似地，对于 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt;，假设它是 &lt;span class=&#34;math inline&#34;&gt;\([P_j, Q_j]\)&lt;/span&gt; 内的最小值，且 &lt;span class=&#34;math inline&#34;&gt;\([P_j, Q_j]\)&lt;/span&gt; 是该条件下的极大区间；&lt;/p&gt;
&lt;p&gt;则对于 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 作为区间内最大值，&lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 作为区间内最小值的情况，满足该条件的区间为 &lt;span class=&#34;math inline&#34;&gt;\([\max(X_i, P_j), \min(Y_i, Q_j)]\)&lt;/span&gt;，答案为 &lt;span class=&#34;math inline&#34;&gt;\(k=a_i \times a_j \times [\min(Y_i, Q_j) - \max(X_i, P_j) + 1]\)&lt;/span&gt;。我们的目标就是最大化 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;两个不固定的值，并且不能拆给斜优做，所以考虑将其中一个变得「固定」。&lt;/p&gt;
&lt;p&gt;观察数组，我们发现，对于数组中的最大值 &lt;span class=&#34;math inline&#34;&gt;\(a_m\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(X_m = 1,Y_m=n\)&lt;/span&gt;。那么此时选取 &lt;span class=&#34;math inline&#34;&gt;\(a_m\)&lt;/span&gt; 作为区间最大值，选取任意数 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 作为最小值。这样做可以保证由 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 带来的影响都是最优的，只用枚举 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 并求解即可。此时的答案就是 &lt;span class=&#34;math inline&#34;&gt;\(a_m\times a_j\times (Q_j-P_j + 1)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们上述条件成立的前提是 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\([P_j, Q_j]\)&lt;/span&gt; 内且 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\([X_i, Y_i]\)&lt;/span&gt; 内。当 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 取 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 时后者显然成立，但很容易构造出来情况让前者不成立。比如说 &lt;code&gt;15 1 5&lt;/code&gt;，当 &lt;span class=&#34;math inline&#34;&gt;\(j=3\)&lt;/span&gt; 时就会得到错误的答案。&lt;/p&gt;
&lt;p&gt;受刚才的思考启发，取 &lt;span class=&#34;math inline&#34;&gt;\([P_j, Q_j]\)&lt;/span&gt; 内的最大值作为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。此时有 &lt;span class=&#34;math inline&#34;&gt;\(X_i\le P_j\le Q_j \le Y_j\)&lt;/span&gt;，答案为区间内最优。&lt;/p&gt;
&lt;p&gt;接下来需要求解 &lt;span class=&#34;math inline&#34;&gt;\(P_j\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(Q_j\)&lt;/span&gt;。观察数据范围，应该是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 做法。不难想到单调栈，可惜我不会，所以采用同样是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 的悬线法（&lt;a href=&#34;/20220927&#34;&gt;我的博客：有关悬线法的介绍&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;那么怎么求 &lt;span class=&#34;math inline&#34;&gt;\([P_j,Q_j]\)&lt;/span&gt; 内的最大值呢？当遇到这种求解区间与左右端点一致，并且待求满足可加性的情况时，我们可以在悬线的时候一起求解。当悬线跨越一个区间时，我们直接用这个已求解区间的最大值更新当前求的最大值。&lt;/p&gt;
&lt;p&gt;左右分别求最大值（注意要用两个数组分别记录，防止错误更新），最后取两者较大作为最终区间内最大值即可。&lt;/p&gt;
&lt;p&gt;最终时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;🌼 鲜花&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;不知道为什么听别人说很卡，不卡啊，我一个点 250ms。&lt;/p&gt;
&lt;p&gt;啊什么你们打的 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;？因为单调栈信息断层不能维护区间内最大值？菜。那我必须把这篇发出来嘲讽你们了。兔子说要是不打 &lt;code&gt;fread&lt;/code&gt; Lemon 上就会起飞，我说我打了，我还疑惑 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 跑 &lt;code&gt;2e6&lt;/code&gt; 普通快读怎么会寄呢。一问，啊，带 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;，菜。&lt;/p&gt;
&lt;p&gt;啊什么谭委员带 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 一个点只要 500ms？那也比我慢，菜。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;说起来这是我头一次用悬线解决不在矩阵上，还要维护信息的题，之前并没有细想过单调栈和悬线可维护的信息差异，这次算是误打误撞做对了。&lt;/p&gt;
&lt;p&gt;注意到数据范围，应该要开 &lt;code&gt;__int128&lt;/code&gt; 吧。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int __int128
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e6 + 5;
int a[maxn];
int n, mx, res;
int l[maxn], r[maxn];
int mxl[maxn], mxr[maxn];
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int main() &amp;#123;
    read(n), l[0] = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]), l[i] = i;
        mxl[i] = mxr[i] = a[i];
        while (l[i] &amp;gt; 1 &amp;amp;&amp;amp; a[l[i] - 1] &amp;gt;= a[i]) &amp;#123;
            mxl[i] = max(mxl[i], mxl[l[i] - 1]);
            l[i] = l[l[i] - 1];
        &amp;#125;
    &amp;#125;
    r[n + 1] = n;
    for (int i = n; i; --i) &amp;#123;
        r[i] = i;
        while (r[i] &amp;lt; n &amp;amp;&amp;amp; a[r[i] + 1] &amp;gt;= a[i]) &amp;#123;
            mxr[i] = max(mxr[i], mxr[r[i] + 1]);
            r[i] = r[r[i] + 1];
        &amp;#125;
        res = max(res, max(mxl[i], mxr[i]) * a[i] * (r[i] - l[i] + 1));
    &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;upd on 240704&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们在 &lt;a href=&#34;/20220927&#34;&gt;这篇博客&lt;/a&gt; 中提到了悬线的本质是笛卡尔树，而本题就是其链上爬山维护数据的一个优秀体现，也是因为这一点，应该更加深切地认识到悬线包含式的访问顺序使之维护的数据类型应和倍增 / 树状数组等类似。&lt;/p&gt;
&lt;p&gt;所以说到可维护数据的复杂程度，笛卡尔树严格大于悬线严格大于单调栈好吧 &lt;img src=&#34;/em/dy.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;虽然现在全世界都知道我是悬线魔怔人了 &lt;img src=&#34;/em/dy.gif&#34; /&gt;&lt;/p&gt;
</content>
        <category term="悬线法" />
        <updated>2023-10-04T08:42:00.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20231004-1/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20231004-1/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4272&#34;&gt;牛客普及&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-学习求余&#34;&gt;A. 学习求余&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4272/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4272/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天我们来学习求余！这种题放普及 T1 不合适吧！&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(k=\left\lfloor \dfrac n2 \right\rfloor + 1\)&lt;/span&gt;，直接输出 &lt;span class=&#34;math inline&#34;&gt;\(k\times (n - k)\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;我是不是证复杂了…&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;我们可以简单地发现一个道理，对于任意 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2&amp;lt;x\le n\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(n\bmod x\)&lt;/span&gt; 的值是 &lt;span class=&#34;math inline&#34;&gt;\(n - x\)&lt;/span&gt;；&lt;/p&gt;
&lt;p&gt;根据基本不等式（&lt;del&gt;wjs 直接感动得哭出声来&lt;/del&gt;）或小学知识「和不变，差小积大」，我们可以知道当 &lt;span class=&#34;math inline&#34;&gt;\(x=\left\lfloor \dfrac n2 \right\rfloor + 1\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(x\times (n-x)\)&lt;/span&gt; 取最大值。&lt;/p&gt;
&lt;p&gt;故有：当 &lt;span class=&#34;math inline&#34;&gt;\(x=\left\lfloor \dfrac n2 \right\rfloor + 1\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(x\times (n\bmod x)\)&lt;/span&gt; 取最大值。&lt;/p&gt;
&lt;p&gt;而对于 &lt;span class=&#34;math inline&#34;&gt;\(y\le \dfrac n2\)&lt;/span&gt;，由余数小于除数得，&lt;span class=&#34;math inline&#34;&gt;\(n\bmod y&amp;lt;y\le \dfrac n2\)&lt;/span&gt;。由于 &lt;span class=&#34;math inline&#34;&gt;\(0&amp;lt;y&amp;lt;x=\left\lfloor \dfrac n2 \right\rfloor + 1\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(0\le n\bmod y\le \left\lfloor \dfrac n2 \right\rfloor - 1\le n - \left\lfloor \dfrac n2 \right\rfloor - 1=n\bmod x\)&lt;/span&gt;，由不等式的基本性质得 &lt;span class=&#34;math inline&#34;&gt;\(x\times(n\bmod x)&amp;gt;y\times (n\bmod y)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;综上，对于 &lt;span class=&#34;math inline&#34;&gt;\(1\le x\le n\)&lt;/span&gt;，当 &lt;span class=&#34;math inline&#34;&gt;\(x=\left\lfloor \dfrac n2 \right\rfloor + 1\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(x\times (n\bmod x)\)&lt;/span&gt; 有最大值。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;然后如果你要问我怎么发现这一点的呢，我当时没有思路，然后随手输出了 &lt;span class=&#34;math inline&#34;&gt;\(n=100\)&lt;/span&gt; 时 &lt;span class=&#34;math inline&#34;&gt;\(n\bmod i\)&lt;/span&gt; 的所有值。然后发现 &lt;span class=&#34;math inline&#34;&gt;\(k=51\)&lt;/span&gt; 时余数是 &lt;span class=&#34;math inline&#34;&gt;\(49\)&lt;/span&gt;…… 然后就会了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
int n, k;
int main() &amp;#123;
    read(n), k = n / 2 + 1;
    print(k * (n % k));
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;del&gt;头一次在题解里贴这么短的代码&lt;/del&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-提取数字&#34;&gt;B. 提取数字&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4272/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4272/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我被这道题（疑似 T1）坑到了！交了三遍才过！这合理吗？&lt;/p&gt;
&lt;p&gt;首先要开 &lt;code&gt;long long&lt;/code&gt;！然后注意，你的判定条件应为「当前是否已存储数」而非「当前存数变量是否为 0」！因为数据中会有单个 0 的情况出现！&lt;/p&gt;
&lt;p&gt;然后就没有了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
bool flag;
char s[maxn]; 
int n, ans, cnt;
int main() &amp;#123;
    scanf(&amp;quot;%*s %s&amp;quot;, s + 1);
    n = strlen(s + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (s[i] &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; s[i] &amp;lt;= &amp;#39;9&amp;#39;)
            cnt = cnt * 10 + s[i] - &amp;#39;0&amp;#39;, flag = 1;
        else if (flag)
            ans += (cnt + 5), cnt = 0, flag = 0;
    &amp;#125;
    if (flag) ans += (cnt + 5);
    print(ans, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-武器选择&#34;&gt;C. 武器选择&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4272/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4272/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;首先是我想了半个小时的狂拽酷炫吊炸天的法一：离线&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;我当时一边打一边怀疑现在的普及组是什么神仙，T3 考这么神奇的离线，难道是我落后于时代了？&lt;/p&gt;
&lt;p&gt;（之所以认为这是 T3 是因为括号那道题确实是正常 T4 风格）&lt;/p&gt;
&lt;p&gt;我们预处理出对于每一个可能获得武器 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的位置，应该从哪个位置第一次捡到武器 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，由于这一段内的所有武器 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 都需要被拾取，我们将其作为区间 &lt;span class=&#34;math inline&#34;&gt;\([L_i, R_i]\)&lt;/span&gt; 来记录。&lt;/p&gt;
&lt;p&gt;那么询问可以转化为，在 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 内 &lt;strong&gt;不同颜色&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\([L_i, R_i]\)&lt;/span&gt; 的数量。&lt;/p&gt;
&lt;p&gt;考虑将询问离线。将询问按左端点从大到小排序，信息区间 &lt;span class=&#34;math inline&#34;&gt;\([L_i, R_i]\)&lt;/span&gt; 也按左端点从大到小排序。&lt;/p&gt;
&lt;p&gt;对于每次询问 &lt;span class=&#34;math inline&#34;&gt;\(l, r\)&lt;/span&gt;，在树状数组中将被 &lt;span class=&#34;math inline&#34;&gt;\([l, n]\)&lt;/span&gt; 完全包含的所有 &lt;span class=&#34;math inline&#34;&gt;\([L_i, R_i]\)&lt;/span&gt;（其实就是 &lt;span class=&#34;math inline&#34;&gt;\(l\le L_i\)&lt;/span&gt; 的所有 &lt;span class=&#34;math inline&#34;&gt;\(L_i\)&lt;/span&gt;）在右端点 &lt;span class=&#34;math inline&#34;&gt;\(R_i\)&lt;/span&gt; 处加一，我们就统计到了可以捡到武器的所有位置。&lt;/p&gt;
&lt;p&gt;怎么区分颜色呢？很简单，我们让每个颜色只被算一次。算哪一次呢？就算当前已加入的 &lt;span class=&#34;math inline&#34;&gt;\([L_i, R_i]\)&lt;/span&gt; 内，比选中概率最大的一次。&lt;/p&gt;
&lt;p&gt;我们树状数组统计的是 &lt;span class=&#34;math inline&#34;&gt;\([1, r]\)&lt;/span&gt; 内的值，所以我们要让概率最大的话，就要让 &lt;span class=&#34;math inline&#34;&gt;\(R_i\)&lt;/span&gt; 尽量的小。&lt;/p&gt;
&lt;p&gt;我们记录每个颜色当前合法 &lt;span class=&#34;math inline&#34;&gt;\([L_i, R_i]\)&lt;/span&gt; 的最小右端点 &lt;span class=&#34;math inline&#34;&gt;\(\min_R\)&lt;/span&gt;。加入一个新的 &lt;span class=&#34;math inline&#34;&gt;\([L_i, R_i]\)&lt;/span&gt; 时，如果 &lt;span class=&#34;math inline&#34;&gt;\(R_i\ge \min_R\)&lt;/span&gt;，那么不会产生影响，跳过；否则，当 &lt;span class=&#34;math inline&#34;&gt;\(R_i&amp;lt;\min_R\)&lt;/span&gt; 时，我们就要先消除当前 &lt;span class=&#34;math inline&#34;&gt;\(\min_R\)&lt;/span&gt; 的影响（即在树状数组中将该位置加上的 1 减去），再加上 &lt;span class=&#34;math inline&#34;&gt;\(R_i\)&lt;/span&gt; 的影响（即在树状数组中加上该位置的 1）。&lt;/p&gt;
&lt;p&gt;此时我们对 &lt;span class=&#34;math inline&#34;&gt;\([1, r]\)&lt;/span&gt; 的询问就是答案。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n + m\log m + m\log n)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(n\log n\)&lt;/span&gt; 来自于对 &lt;span class=&#34;math inline&#34;&gt;\([L_i, R_i]\)&lt;/span&gt; 的排序，&lt;span class=&#34;math inline&#34;&gt;\(m\log m\)&lt;/span&gt; 来自于对询问的排序，&lt;span class=&#34;math inline&#34;&gt;\(m\log n\)&lt;/span&gt; 来自于离线树状数组。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;接下来讲题解给的正解…… 这个是真的妙。&lt;/p&gt;
&lt;p&gt;考虑所有种类数，在 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个数内满足条件的种类 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 最优条件下也不过 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac {x\times (x+1)}2=n\)&lt;/span&gt;，所以满足条件武器的数量最多只有 &lt;span class=&#34;math inline&#34;&gt;\(\sqrt n\)&lt;/span&gt; 级别。&lt;/p&gt;
&lt;p&gt;所以我们对所有合法种类做前缀和，每次询问检查所有合法种类是否在该区间内出现对应次数，然后统计答案。复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(m\sqrt n + n\sqrt n)\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(n\sqrt n\)&lt;/span&gt; 是前面前缀和来的，&lt;span class=&#34;math inline&#34;&gt;\(m\sqrt n\)&lt;/span&gt; 是暴力统计来的。&lt;/p&gt;
&lt;p&gt;但是根号可耻，所以我的法一更 NB！！！🤡🤡🤡&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;狂拽酷炫吊炸天的法一代码&lt;/summary&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
struct _ &amp;#123;
    int l, r, k, i;
    bool operator&amp;lt; (const _ &amp;amp;q) const &amp;#123;
        return l &amp;lt; q.l;
    &amp;#125;
&amp;#125;;
struct __ &amp;#123;
    int l, r, nxt, x;
    bool operator&amp;lt; (const __ &amp;amp;q) const &amp;#123;
        return l &amp;lt; q.l;
    &amp;#125;
&amp;#125;;
_ q[maxn];
__ a[maxn];
std::map&amp;lt;int, int&amp;gt; t;
std::vector&amp;lt;int&amp;gt; u[maxn];
int ans[maxn], now[maxn];
int mnr[maxn], Bit[maxn];
int n, m, tot, x, cnt, pos;
int lowbit(int x) &amp;#123; return x &amp;amp; -x; &amp;#125;
void add(int x, int v) &amp;#123;
    for (int i = x; i &amp;lt;= n; i += lowbit(i))
        Bit[i] += v;
    return;
&amp;#125;
int ask(int x) &amp;#123;
    int res = 0;
    for (int i = x; i; i -= lowbit(i))
        res += Bit[i];
    return res;
&amp;#125;
int calc(int x, int k) &amp;#123;
    int res = 1;
    for (int i = 1; i &amp;lt;= k; ++i)
        res *= x--;
    for (int i = 1; i &amp;lt;= k; ++i)
        res /= i;
    return res;
&amp;#125;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(x);
        if (!t.count(x)) t[x] = ++tot;
        int id = t[x];
        u[id].push_back(i);
        if ((int)u[id].size() &amp;gt;= x) &amp;#123;
            a[++cnt].l = u[id][(int)u[id].size() - x];
            a[cnt].r = i, a[now[id]].nxt = cnt;
            a[cnt].x = x, mnr[x] = n + 1;
            now[id] = cnt;
        &amp;#125;
    &amp;#125;
    read(m);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        read(q[i].l), read(q[i].r);
        read(q[i].k), q[i].i = i;
    &amp;#125;
    std::sort(q + 1, q + m + 1);
    std::sort(a + 1, a + cnt + 1);
    pos = cnt;
    for (int i = m; i; --i) &amp;#123;
        while (a[pos].l &amp;gt;= q[i].l) &amp;#123;
            if (a[pos].r &amp;lt; mnr[a[pos].x]) &amp;#123;
                if (mnr[a[pos].x] &amp;lt;= n)
                    add(mnr[a[pos].x], -1);
                add(a[pos].r, 1);
                mnr[a[pos].x] = a[pos].r;
            &amp;#125;
            --pos;
        &amp;#125;
        ans[q[i].i] = calc(ask(q[i].r), q[i].k);
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        print(ans[i], &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我甚至打完了就过了样例然后直接就 A 了，好久没有这么爽地过过这种大码量 &lt;del&gt;正确性还未知&lt;/del&gt; 的题了。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;而且我相信全场只有我一个 &lt;del&gt;小丑&lt;/del&gt; 帅哥打离线，所以我是最强的！！！🤡🤡🤡&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;绝对不如法一的法二代码&lt;/summary&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxm = 505;
const int maxn = 1e5 + 5;
int a[maxn];
int cnt[maxn];
int sum[maxm][maxn];
int n, tot, m, l, r, k, res;
int calc(int x, int k) &amp;#123;
    int res = 1;
    for (int i = 1; i &amp;lt;= k; ++i)
        res *= x--;
    for (int i = 1; i &amp;lt;= k; ++i)
        res /= i;
    return res;
&amp;#125;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]);
        if (a[i] &amp;lt;= n) ++cnt[a[i]];
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (cnt[i] &amp;gt;= i) &amp;#123;
            sum[++tot][n + 1] = i;
            for (int j = 1; j &amp;lt;= n; ++j)
                sum[tot][j] = sum[tot][j - 1] + (a[j] == i);
        &amp;#125;
    &amp;#125;
    read(m);
    while (m--) &amp;#123;
        read(l), read(r), read(k);
        res = 0;
        for (int i = 1; i &amp;lt;= tot; ++i)
            res += (sum[i][r] - sum[i][l - 1] &amp;gt;= sum[i][n + 1]);
        print(calc(res, k), &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-括号序列&#34;&gt;D. 括号序列&lt;/h3&gt;
&lt;p&gt;http://222.180.160.110:61235/contest/4272/problem/4&lt;/p&gt;
&lt;p&gt;呃呃呃，这，有什么好讲的吗？做过原题的应该都会吧……&lt;/p&gt;
&lt;p&gt;反正就是个比较裸的区间 DP，转移的时候注意一下究竟哪些是同一对括号，哪些是相邻括号就好。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e3 + 5;
int n, res;
char s[maxn];
std::stack&amp;lt;int&amp;gt; t;
int mat[maxn], c[5];
int f[maxn][maxn][3][3];
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
void upd(int &amp;amp;x, int y) &amp;#123; x = max(x, y); return; &amp;#125;
int main() &amp;#123;
    memset(f, -0x3f, sizeof (f));
    scanf(&amp;quot;%d %d %d&amp;quot;, &amp;amp;n, &amp;amp;c[1], &amp;amp;c[2]);
    scanf(&amp;quot;%s&amp;quot;, s + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (s[i] == &amp;#39;(&amp;#39;) t.push(i);
        else mat[t.top()] = i, t.pop();
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (mat[i] == i + 1) &amp;#123;
            for (int k = 0; k &amp;lt;= 2; ++k)
                f[i][i + 1][k][k] = c[k];
        &amp;#125;
    &amp;#125;
    for (int l = 4; l &amp;lt;= n; l += 2) &amp;#123;
        for (int i = 1; i &amp;lt;= n - l + 1; ++i) &amp;#123;
            int j = i + l - 1;
            if (mat[i] == j) &amp;#123;
                // ((...))
                // xy...zx
                for (int x = 0; x &amp;lt;= 2; ++x) &amp;#123;
                    for (int y = 0; y &amp;lt;= 2; ++y) &amp;#123;
                        if (y == x) continue;
                        for (int z = 0; z &amp;lt;= 2; ++z) &amp;#123;
                            if (z == x) continue;
                            upd(f[i][j][x][x], f[i + 1][j - 1][y][z] + c[x]);
                        &amp;#125;
                    &amp;#125;
                &amp;#125;
            &amp;#125;
            else &amp;#123;
                // ()(...)
                // xxy...z
                for (int x = 0; x &amp;lt;= 2; ++x) &amp;#123;
                    for (int y = 0; y &amp;lt;= 2; ++y) &amp;#123;
                        if (y == x) continue;
                        for (int z = 0; z &amp;lt;= 2; ++z)
                            upd(f[i][j][x][z], f[i][mat[i]][x][x] + f[mat[i] + 1][j][y][z]);
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    for (int i = 0; i &amp;lt;= 2; ++i) &amp;#123;
        for (int j = 0; j &amp;lt;= 2; ++j)
            res = max(res, f[1][n][i][j]);
    &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="树状数组" />
        <category term="区间 DP" />
        <updated>2023-10-04T08:41:40.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20231003/</id>
        <title>杂题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20231003/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268&#34;&gt;周考 14&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;医生问我对药有什么要求吗，我说我宁死不喝冲剂。&lt;/p&gt;
&lt;p&gt;然后医生给我开了五盒胶囊，告诉我说一天三次，一次六个。&lt;/p&gt;
&lt;p&gt;哈哈哈，我自找的。以此为证，A 一道题磕一片！！！&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-修改序列&#34;&gt;A. 修改序列&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意到一增一减，全数列的和 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 不变，考虑这一点带来的提示。&lt;/p&gt;
&lt;p&gt;假设最后要求一部分数为 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，另一部分为 &lt;span class=&#34;math inline&#34;&gt;\(p+1\)&lt;/span&gt;，那么有 &lt;span class=&#34;math inline&#34;&gt;\(p = \lfloor \dfrac sn \rfloor\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(p+1\)&lt;/span&gt; 的数量 &lt;span class=&#34;math inline&#34;&gt;\(c_r=s\bmod n\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的数量 &lt;span class=&#34;math inline&#34;&gt;\(c_l=n-c_r\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么我们让 &lt;span class=&#34;math inline&#34;&gt;\(\le p\)&lt;/span&gt; 的变成 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\ge p + 1\)&lt;/span&gt; 的变成 &lt;span class=&#34;math inline&#34;&gt;\(p + 1\)&lt;/span&gt;。直接求两数距离，最后将总和除以二即为答案、&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;正确性证明…&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;这样做的最优性毫无疑问，问题无非就在于这么做的正确性，换言之，为什么一定能找到合法的操作序列还原我们的求解过程。&lt;/p&gt;
&lt;p&gt;将原数列分为两部分，数值 &lt;span class=&#34;math inline&#34;&gt;\(\le p\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;）和数值 &lt;span class=&#34;math inline&#34;&gt;\(\ge p + 1\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;）。&lt;/p&gt;
&lt;p&gt;再把我们的目标状态分为两部分，数值 &lt;span class=&#34;math inline&#34;&gt;\(= p\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;）和 数值 &lt;span class=&#34;math inline&#34;&gt;\(=p + 1\)&lt;/span&gt; 的（记为 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;）。&lt;/p&gt;
&lt;p&gt;那么有 &lt;span class=&#34;math inline&#34;&gt;\(\begin{cases}X+Y=s\\A+B=s\end{cases}\)&lt;/span&gt;，由等式的基本性质得 &lt;span class=&#34;math inline&#34;&gt;\(X-A+Y-B = 0\)&lt;/span&gt;，移项得 &lt;span class=&#34;math inline&#34;&gt;\(Y-B=A-X\)&lt;/span&gt;。也就是说，&lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; 部分与 &lt;span class=&#34;math inline&#34;&gt;\(p+1\)&lt;/span&gt; 的差的总和正好等于 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 部分与 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的差的总和。&lt;/p&gt;
&lt;p&gt;这个时候我们的正确性就有了保证。&lt;/p&gt;
&lt;p&gt;这个时候你可能就有疑问了，&lt;span class=&#34;math inline&#34;&gt;\(X,Y\)&lt;/span&gt; 中的元素个数和 &lt;span class=&#34;math inline&#34;&gt;\(A,B\)&lt;/span&gt; 中的元素个数并不对应，怎么办呢？&lt;/p&gt;
&lt;p&gt;我们发现上面的原理式并不会随元素个数的变化而变化，所以依然可以用它来解答这个问题。没有人规定 &lt;span class=&#34;math inline&#34;&gt;\(Y-B\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(A-X\)&lt;/span&gt; 不能为负，为负时我们把 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 中塞不下的 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 拿到 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 里面去即可，反之同理。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;那么代码还是很好写的。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e5 + 5;
int a[maxn];
int n, s, p, cl, cg, res;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]), s += a[i];
    p = s / n, cg = s - p * n, cl = n - cg;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (a[i] &amp;lt;= p) &amp;#123;
            if (cl) res += p - a[i], --cl;
            else res += p - a[i] + 1, --cg;
        &amp;#125;
        else &amp;#123;
            if (cg) res += a[i] - p - 1, --cg;
            else res += a[i] - p, --cl;
        &amp;#125;
    &amp;#125;
    print(res / 2, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-knuth-表示法&#34;&gt;B. Knuth 表示法&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模拟。输入的数用 &lt;code&gt;map&lt;/code&gt; 转化为 &lt;span class=&#34;math inline&#34;&gt;\(10\)&lt;/span&gt; 的次幂形式，然后幂次直接相加即表示指数相乘。&lt;/p&gt;
&lt;p&gt;最后按位数从大到小将次幂形式转化为字符串、再按位数从小到大输出。&lt;/p&gt;
&lt;p&gt;注意到开头的字符串不是 &lt;code&gt;one&lt;/code&gt; 就是 &lt;code&gt;ten&lt;/code&gt;，需要在没有抽出来 &lt;code&gt;ten&lt;/code&gt; 的时候补 &lt;code&gt;one&lt;/code&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
using str = std::string;
const str u[] = &amp;#123; &amp;quot;one&amp;quot;, &amp;quot;ten&amp;quot;, &amp;quot;hundred&amp;quot;, &amp;quot;myriad&amp;quot;, &amp;quot;myllion&amp;quot;, &amp;quot;byllion&amp;quot;, &amp;quot;tryllion&amp;quot;,
                  &amp;quot;quadryllion&amp;quot;, &amp;quot;quintyllion&amp;quot;, &amp;quot;sextyllion&amp;quot;, &amp;quot;septyllion&amp;quot;, &amp;quot;octyllion&amp;quot;,
                  &amp;quot;nonyllion&amp;quot;, &amp;quot;decyllion&amp;quot; &amp;#125;;
str x;
int res = 0;
std::stack&amp;lt;str&amp;gt; s;
std::map&amp;lt;str, int&amp;gt; t;
void get(str &amp;amp;x) &amp;#123;
    str y;
    std::stringstream p(x);
    while (p &amp;gt;&amp;gt; y) &amp;#123;
        if (y == &amp;quot;one&amp;quot;) continue;
        res += 1 &amp;lt;&amp;lt; (t[y] - 1);
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    for (int i = 0; i &amp;lt;= 13; ++i) t[u[i]] = i;
    std::getline(std::cin, x), get(x);
    std::getline(std::cin, x), get(x);
    for (int i = 13; i; --i) &amp;#123;
        if (res &amp;amp; (1 &amp;lt;&amp;lt; (i - 1)))
            s.push(u[i]), res ^= (1 &amp;lt;&amp;lt; (i - 1));
    &amp;#125;
    if (s.top() != &amp;quot;ten&amp;quot;) s.push(&amp;quot;one&amp;quot;);
    while (!s.empty())
        std::cout &amp;lt;&amp;lt; s.top() &amp;lt;&amp;lt; &amp;#39; &amp;#39;, s.pop();
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-魔力塔&#34;&gt;C. 魔力塔&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;神奇的线段树优化建图。这拿来放 T3？不合适吧。&lt;/p&gt;
&lt;p&gt;很好想到对于 &lt;span class=&#34;math inline&#34;&gt;\(a_i\ne -1\)&lt;/span&gt;，连边 &lt;span class=&#34;math inline&#34;&gt;\(i\to a_i\)&lt;/span&gt;；否则，连边 &lt;span class=&#34;math inline&#34;&gt;\(i\to x(x\in [i+1,\min(i + k,n+1)])\)&lt;/span&gt;。BFS 遍历，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\times k)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;问题在于无用边太多，例如 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 共同可达的点有整整 &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; 个，造成大量浪费。&lt;/p&gt;
&lt;p&gt;考虑到实际进入 BFS 的点只有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个，及由传送门构成的连通块均呈棒棒糖状（即链套环），我们直接优化掉 &lt;span class=&#34;math inline&#34;&gt;\(a_i=-1\)&lt;/span&gt; 时的连边。使用线段树查询 &lt;span class=&#34;math inline&#34;&gt;\([i+1,\min(i + k,n+1)]\)&lt;/span&gt; 内的所有剩余点，连边入队并从线段树中删除。&lt;/p&gt;
&lt;p&gt;这样，每个点只会入队一次（忽视无用环），时间复杂度控制在 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 来源于线段树，写得不好就是 &lt;span class=&#34;math inline&#34;&gt;\(\log^2\)&lt;/span&gt;，写得好一点就只有一个。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;然而…&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;会 T，因为常数太大了。&lt;/p&gt;
&lt;p&gt;所以我们需要另一种 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 的做法，并且短小精悍。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;set&lt;/code&gt; 存储所有未入队的点，每次 &lt;code&gt;lower_bound&lt;/code&gt; 并依次弹出、入队。&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;用迭代器的话代码很短，美汁汁。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;，但等我先磕片药先。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 5e5 + 5;
int a[maxn];
int n, k, res;
bool vis[maxn];
std::set&amp;lt;int&amp;gt; t;
std::vector&amp;lt;int&amp;gt; g[maxn]; 
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
void DFS(int x) &amp;#123;
    res = max(res, x);
    if (a[x] == -1) &amp;#123;
        auto p = t.lower_bound(x + 1);
        while (p != t.end() &amp;amp;&amp;amp; *p &amp;lt;= x + k) &amp;#123;
            g[x].push_back(*p);
            t.erase(*p++);
        &amp;#125;
    &amp;#125;
    for (auto i : g[x]) &amp;#123;
        if (vis[i]) continue;
        vis[i] = 1, DFS(i);
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(k);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]), t.insert(i + 1);
        if (~a[i]) g[i].push_back(a[i]);
    &amp;#125;
    DFS(1), print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-卡牌游戏&#34;&gt;D. 卡牌游戏&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;怎么说呢，爆搜可以拿 80pts！！！然而正解是区间 DP，哭唧唧。他这个数据范围给得很神奇，让人只会往搜索上面想。&lt;/p&gt;
&lt;p&gt;摧毁操作是一换一，不会更改串长，而入栈操作会增加初始串的长度。&lt;/p&gt;
&lt;p&gt;所以我们考虑 &lt;strong&gt;逆序 DP&lt;/strong&gt;，从最终状态入手，用 &lt;span class=&#34;math inline&#34;&gt;\(f_{x, i, j}\)&lt;/span&gt; 表示是否可以使用一个字符 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 经过一系列操作消掉 &lt;span class=&#34;math inline&#34;&gt;\(w_{i\sim j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么明显若一条摧毁操作为可用字符 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 摧毁 &lt;span class=&#34;math inline&#34;&gt;\(w_i\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{a, i, i} = 1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;若一条入栈操作为用字符 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 换字符 &lt;span class=&#34;math inline&#34;&gt;\(b,c\)&lt;/span&gt;，枚举区间断点 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(f_{a, i, j} = f_{b, i, k} \times f_{c, k + 1, j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;最后答案为 &lt;span class=&#34;math inline&#34;&gt;\(f_{\texttt S,i,|w_i|}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;注意循环顺序，区间的枚举应在字符的枚举之外。最终时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(T\times |w_i|^3\times N_2)\)&lt;/span&gt;，注意到字母的枚举属于常数。胶囊好吃滴捏。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 25;
const int maxm = 1e3 + 5;
int n, m, l;
char w[maxn];
bool r1[maxm][maxm];
bool f[maxm][maxn][maxn];
struct &amp;#123; int u, a, b; &amp;#125; r2[maxn];
int main() &amp;#123;
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        scanf(&amp;quot;%s&amp;quot;, w + 1);
        r1[(int)w[1]][(int)w[4]] = 1;
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        scanf(&amp;quot;%s&amp;quot;, w + 1);
        r2[i].u = w[1];
        r2[i].a = w[4], r2[i].b = w[5];
    &amp;#125;
    while (~scanf(&amp;quot;%s&amp;quot;, w + 1)) &amp;#123;
        memset(f, 0, sizeof (f));
        l = strlen(w + 1);
        for (int i = &amp;#39;A&amp;#39;; i &amp;lt;= &amp;#39;Z&amp;#39;; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= l; ++j) &amp;#123;
                if (r1[i][(int)w[j]])
                    f[i][j][j] = 1;
            &amp;#125;
        &amp;#125;
        for (int len = 1; len &amp;lt;= l; ++len) &amp;#123;
            for (int i = 1; i &amp;lt;= l - len + 1; ++i) &amp;#123;
                int j = i + len - 1;
                for (int t = &amp;#39;A&amp;#39;; t &amp;lt;= &amp;#39;Z&amp;#39;; ++t) &amp;#123;
                    for (int k = i; k &amp;lt; j; ++k) &amp;#123;
                        for (int p = 1; p &amp;lt;= m; ++p) &amp;#123;
                            if (r2[p].u != t) continue;
                            f[t][i][j] |= f[r2[p].a][i][k] &amp;amp;&amp;amp; f[r2[p].b][k + 1][j];
                        &amp;#125;
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        puts(f[&amp;#39;S&amp;#39;][1][l] ? &amp;quot;YES&amp;quot; : &amp;quot;NO&amp;quot;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e.-生长树&#34;&gt;E. 生长树&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/5&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一道很菜的题。我们发现有子树操作，第一时间想到树剖，那么接下来要考虑的内容就是线段树如何维护。&lt;/p&gt;
&lt;p&gt;题意换句话说就是往下数 0 代是加，数 1 代是减，数 2 代是加，以此类推。那么不难想到奇偶性。&lt;/p&gt;
&lt;p&gt;如果起点的深度是奇数，那么子树中所有奇数深度权值增加，偶数深度权值减少，反之同理。&lt;/p&gt;
&lt;p&gt;但是我们操作线段树的时候怎么知道点在树中的深度奇偶性呢？我们只能在线段树外才知道呀。&lt;/p&gt;
&lt;p&gt;所以观察询问，询问是单点的，所以我们知道了，可以只在线段树外对奇偶性进行处理。简单来说，假设更改起点深度为奇数，那么增加整个子树的「奇加偶减计数器」；反之，增加整个子树的「奇减偶加计数器」。&lt;/p&gt;
&lt;p&gt;最后查询的时候，如果该点深度为奇，那么答案为对应的「奇加偶减计数器」减去「奇减偶加计数器」的值，反之同理。&lt;/p&gt;
&lt;p&gt;做到最后发现根本不用树剖，就是一个 DFN 上线段树。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(m\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;胶囊真好吃！！！&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
const int maxn = 2e5 + 5;
struct _ &amp;#123;
    int l, r;
    int u1, u2, d1, d2;
&amp;#125;; 
_ t[maxn &amp;lt;&amp;lt; 2];
int a[maxn], dep[maxn];
std::vector&amp;lt;int&amp;gt; g[maxn];
int n, m, x, y, tot, typ;
int end[maxn], dfn[maxn], tab[maxn];
// u 只用维护最底层信息
// 所以不用打 pushup 
// 但维护起来好看一些 所以还是打了
void pushup(int p) &amp;#123;
    t[p].u1 = t[lt].u1 + t[rt].u1;
    t[p].u2 = t[lt].u2 + t[rt].u2;
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d1) &amp;#123;
        t[lt].d1 += t[p].d1;
        t[rt].d1 += t[p].d1;
        t[lt].u1 += t[p].d1 * (t[lt].r - t[lt].l + 1);
        t[rt].u1 += t[p].d1 * (t[rt].r - t[rt].l + 1);
        t[p].d1 = 0;
    &amp;#125;
    if (t[p].d2) &amp;#123;
        t[lt].d2 += t[p].d2;
        t[rt].d2 += t[p].d2;
        t[lt].u2 += t[p].d2 * (t[lt].r - t[lt].l + 1);
        t[rt].u2 += t[p].d2 * (t[rt].r - t[rt].l + 1);
        t[p].d2 = 0;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].l = l, t[p].r = r;
    if (l == r) &amp;#123;
        if (dep[tab[l]] &amp;amp; 1)
            t[p].u1 = a[tab[l]];
        else t[p].u2 = a[tab[l]];
        return;
    &amp;#125;
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    pushup(p);
    return;
&amp;#125;
void add1(int p, int l, int r, int x) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d1 += x;
        t[p].u1 += (t[p].r - t[p].l + 1) * x;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (l &amp;lt;= mid) add1(lt, l, r, x);
    if (r &amp;gt; mid) add1(rt, l, r, x);
    pushup(p);
    return;
&amp;#125;
void add2(int p, int l, int r, int x) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].d2 += x;
        t[p].u2 += (t[p].r - t[p].l + 1) * x;
        return;
    &amp;#125;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (l &amp;lt;= mid) add2(lt, l, r, x);
    if (r &amp;gt; mid) add2(rt, l, r, x);
    pushup(p);
    return;
&amp;#125;
int ask(int p, int x) &amp;#123;
    if (t[p].l == t[p].r)
        return t[p].u1 - t[p].u2;
    int mid = (t[p].l + t[p].r) &amp;gt;&amp;gt; 1;
    pushdown(p);
    if (x &amp;lt;= mid) return ask(lt, x);
    return ask(rt, x);
&amp;#125;
void DFS(int x, int fa) &amp;#123;
    dfn[x] = ++tot, tab[tot] = x;
    for (auto i : g[x]) &amp;#123;
        if (i == fa) continue;
        dep[i] = dep[x] + 1;
        DFS(i, x);
    &amp;#125;
    end[x] = tot;
    return;
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        read(x), read(y);
        add(x, y), add(y, x);
    &amp;#125;
    dep[1] = 1, DFS(1, -1);
    bld(1, 1, n);
    while (m--) &amp;#123;
        read(typ), read(x);
        if (typ == 1) &amp;#123;
            read(y);
            if (dep[x] &amp;amp; 1)
                add1(1, dfn[x], end[x], y);
            else add2(1, dfn[x], end[x], y);
        &amp;#125;
        else &amp;#123;
            int res = ask(1, dfn[x]);
            if (dep[x] &amp;amp; 1)
                print(res, &amp;#39;\n&amp;#39;);
            else print(-res, &amp;#39;\n&amp;#39;);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-单词&#34;&gt;F. 单词&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/4268/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/4268/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n \le 20\)&lt;/span&gt;，考虑状压。用 &lt;span class=&#34;math inline&#34;&gt;\(f_x\)&lt;/span&gt; 表示状态为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 时的最小代价，其中 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 是字符串合法情况的状态压缩。&lt;/p&gt;
&lt;p&gt;对于每一个待满足的串，枚举去满足它的哪一位，那么满足方式分两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把它变成一个新的值&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把和它重合的变成新的值&lt;/p&gt;
&lt;p&gt;我们注意到 &lt;span class=&#34;math inline&#34;&gt;\(n \le 20 \le 26\)&lt;/span&gt;，所以一定能找到一种方法让每个串的这一位都不一样。&lt;/p&gt;
&lt;p&gt;接着，反正我们都要改这一位了，那就贪心地把要改的全部改成完全不一样的。那么这些要改的串也在这一位上满足了条件。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，假设对于状态 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，有串 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 未满足，枚举位置 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，有：&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;f[i | (1 &amp;lt;&amp;lt; (j - 1))] = min(f[i | (1 &amp;lt;&amp;lt; (j - 1))], f[i] + a[j][k]); 
f[i | lac[j][k]] = min(f[i | lac[j][k]], f[i] + mx[j][k]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 &lt;code&gt;lac[j][k]&lt;/code&gt; 和 &lt;code&gt;mx[j][k]&lt;/code&gt; 都是预处理出来的值。&lt;code&gt;lac[j][k]&lt;/code&gt; 表示与第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个串的第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位相同串的状态压缩；&lt;code&gt;mx[j][k]&lt;/code&gt; 表示通过第二种方式将 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 串的第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位变得合法的最小费用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lac[j][k]&lt;/code&gt; 的求法没有任何疑问，主要是在 &lt;code&gt;mx[j][k]&lt;/code&gt; 上。注意到假设这一位上有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个串与 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 串的第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位相同（包括其本身），而我们只需要将这当中的 &lt;span class=&#34;math inline&#34;&gt;\(x-1\)&lt;/span&gt; 个变成两两不同的全新字符就可以同时满足这 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 串的条件，那我们为什么不把不动的这一个串设置为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个串中改这一位代价最大的那个呢？&lt;/p&gt;
&lt;p&gt;那么问题来了。我们枚举状态、枚举状态中的每一个 &lt;code&gt;0&lt;/code&gt;，枚举每一个串的每一位，实际上是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\times m\times 2^n)\)&lt;/span&gt; 的。虽然跑不满，但这个时间复杂度仍然是有问题的。我们需要优化。&lt;/p&gt;
&lt;p&gt;我们枚举的是状态中的每一个 &lt;code&gt;0&lt;/code&gt;，假设我们的状态是 &lt;code&gt;000&lt;/code&gt;，我们的解决方案是将三个 &lt;code&gt;0&lt;/code&gt; 位置的方案共同处理，表示为 &lt;code&gt;&#39;0--&#39;&lt;/code&gt; + &lt;code&gt;&#39;-0-&#39;&lt;/code&gt; + &lt;code&gt;&#39;--0&#39;&lt;/code&gt;。但实际上，我们只用实际求解一个 &lt;code&gt;0&lt;/code&gt; 位置的答案，表示为 &lt;code&gt;&#39;0--&#39;&lt;/code&gt; + &lt;code&gt;&#39;-00&#39;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;也就是说，我们原本需要枚举每一个状态为 &lt;code&gt;0&lt;/code&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 并用 &lt;span class=&#34;math inline&#34;&gt;\(O(m)\)&lt;/span&gt; 的时间进行计算，现在我们碰到一个状态为 &lt;code&gt;0&lt;/code&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 就开始计算，得到完全相同的答案。&lt;/p&gt;
&lt;p&gt;很 NB 并且很实用的优化，已加入 &lt;a href=&#34;/20231117/&#34;&gt;下饭操作合集&lt;/a&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 205;
const int maxm = (1 &amp;lt;&amp;lt; 25) + 5;
int f[maxm];
int n, m, siz;
char s[maxn][maxn];
int lac[maxn][maxn];
int a[maxn][maxn], mx[maxn][maxn];
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int main() &amp;#123;
    while(~scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m)) &amp;#123;
        memset(f, 0x3f, sizeof (f));
        f[0] = 0, siz = 1 &amp;lt;&amp;lt; n;
        for (int i = 1; i &amp;lt;= n; ++i)
            scanf(&amp;quot;%s&amp;quot;, s[i] + 1);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j)
                scanf(&amp;quot;%d&amp;quot;, &amp;amp;a[i][j]);
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                int sum = 0;
                lac[i][j] = mx[i][j] = 0;
                for (int k = 1; k &amp;lt;= n; ++k) &amp;#123;
                    if (s[k][j] == s[i][j]) &amp;#123;
                        lac[i][j] |= 1 &amp;lt;&amp;lt; (k - 1);
                        sum += a[k][j];
                        mx[i][j] = max(mx[i][j], a[k][j]);
                    &amp;#125;
                &amp;#125;
                mx[i][j] = sum - mx[i][j];
            &amp;#125;
        &amp;#125;
        for (int i = 0, j; i &amp;lt; siz - 1; ++i) &amp;#123;
            for (j = 1; j &amp;lt;= n; ++j) &amp;#123;
                if (!(i &amp;amp; (1 &amp;lt;&amp;lt; (j - 1))))
                    break;
            &amp;#125;
            for (int k = 1; k &amp;lt;= m; ++k) &amp;#123;
                f[i | (1 &amp;lt;&amp;lt; (j - 1))] =
                    min(f[i | (1 &amp;lt;&amp;lt; (j - 1))], f[i] + a[j][k]); 
                f[i | lac[j][k]] =
                    min(f[i | lac[j][k]], f[i] + mx[j][k]);
            &amp;#125;
        &amp;#125;
        print(f[siz - 1], &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;这次暴露出的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深度乱求，打代码的时候考虑过要放在递归之前，但是由于精力不集中最后还是放在了递归后面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;没了。这次主要问题出在 T5。T3 估计真的想不到，先不强求自己。&lt;/p&gt;
&lt;p&gt;这次学到的新知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于子集合并最优性的问题，可以用单点 + 集合代替集合 + 集合枚举。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="DP" />
        <category term="线段树" />
        <updated>2023-10-03T08:42:43.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230928/</id>
        <title>颜色</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230928/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;https://vjudge.net/contest/583230#problem/B&#34;&gt;颜色&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b---颜色&#34;&gt;B - 颜色&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/583230#problem/B&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/583230#problem/B&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;颜色删完过后剩下的肯定是一段区间。&lt;/p&gt;
&lt;p&gt;那么区间外的所有颜色都会被删掉，如果要满足题目条件的话，删掉的颜色不能出现在区间内。&lt;/p&gt;
&lt;p&gt;那么就可以有这么一个题意的转化：寻找区间的个数，满足区间内的颜色只出现在区间内。&lt;/p&gt;
&lt;p&gt;然后你可能就要问了，不是还要满足区间外的所有颜色都不出现在区间内吗。但是你想想，要是它出现在区间内了，它作为区间内的颜色，不就不满足我们上面说的那条规则了吗。&lt;/p&gt;
&lt;p&gt;这个转化是非常厉害的。那么这个时候有一个显而易见暴力做法，我们记录一个颜色在整个序列中出现的第一个位置（记为 &lt;span class=&#34;math inline&#34;&gt;\(L_x\)&lt;/span&gt;）和最后一个位置（记作 &lt;span class=&#34;math inline&#34;&gt;\(R_x\)&lt;/span&gt;），然后枚举每一个区间 &lt;span class=&#34;math inline&#34;&gt;\([i, j]\)&lt;/span&gt;，再枚举其中的每一个颜色，看看有没有超出去就好，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;对纯暴力的一点小优化&lt;/summary&gt; 上述区间内枚举过程转化为判定区间是否满足 &lt;span class=&#34;math inline&#34;&gt;\({L_x}_{\min} \ge i\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\({R_x}_{\max} \le j\)&lt;/span&gt;，采用数据结构维护，就可以优化到 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2\log)\)&lt;/span&gt;。为什么要专门提一嘴这个呢，因为这个模型我没想到。我真 NB。
&lt;/details&gt;
&lt;p&gt;接下来又是一个我想不到的模型。我们发现复杂度瓶颈出在枚举区间上，所以考虑通过固定区间右端点，用较小的复杂度直接求解满足条件的左端点数量来解决问题。为什么不是固定左端点呢？&lt;/p&gt;
&lt;p&gt;「因为题解都是写的固定右端点。」 0# 如是说。&lt;/p&gt;
&lt;p&gt;对于正在枚举的右端点 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 右边的颜色 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，我们记录它们上一次出现的位置 &lt;span class=&#34;math inline&#34;&gt;\(p_x\)&lt;/span&gt;，并用线段树找到范围内最右值 &lt;span class=&#34;math inline&#34;&gt;\((p_x)_{\max}\)&lt;/span&gt;，那么左端点 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;gt;(p_x)_{\max}\)&lt;/span&gt;。取 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;=(p_x)_{\max}+1\)&lt;/span&gt;，这样我们就初步得到了一个 &lt;span class=&#34;math inline&#34;&gt;\([i&amp;#39;, j]\)&lt;/span&gt;。相对于纯暴力的做法，&lt;span class=&#34;math inline&#34;&gt;\(R_x\le j\)&lt;/span&gt; 的等价条件已经满足，但还有一个条件，就是 &lt;span class=&#34;math inline&#34;&gt;\(L_x\)&lt;/span&gt; 不能小于 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;为了方便数据结构维护 &lt;span class=&#34;math inline&#34;&gt;\(p_x\)&lt;/span&gt;，我们逆序枚举 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，这样又可以得到一个性质：&lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;\)&lt;/span&gt; 单调不降。这个时候我们逆向思维，处理出对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\ge i&amp;#39;\)&lt;/span&gt;，其能够到的最远的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，记为 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt;，那么我们对于 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 建一个权值线段树，然后在枚举过程中查询权值在 &lt;span class=&#34;math inline&#34;&gt;\([j, +\infty)\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的个数就是答案。由于求的是个数，所以可以对超出范围的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 对应的 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 进行删除操作。&lt;/p&gt;
&lt;p&gt;那么 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 又该怎么求呢？暴力地再建一个权值线段树维护 &lt;span class=&#34;math inline&#34;&gt;\(L_x\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\((-\infty, i)\)&lt;/span&gt; 权值范围内查询下标 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的最小值，此时的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 就是 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;因为 0# 讲课的时候我在开飞机，所以我也不知道 0# 是不是这么讲的，总之我这么做应该能做出来，就是要维护的东西实在有亿点点多。&lt;/p&gt;
&lt;p&gt;但是注意到一个线段树和两个权值线段树维护的大区间其实是一样的，所以我们只用一个线段树同时维护三个信息就好。最后时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
#define lt (p &amp;lt;&amp;lt; 1)
#define rt (lt | 1)
#define mid (t[p].l + t[p].r) / 2
const int maxn = 3e5 + 5;
// shaber monotonicity
// destroy my youth 
struct _ &amp;#123; int l, r, u, d; &amp;#125;;
struct __ &amp;#123;
    int u, i;
    __() &amp;#123;&amp;#125;
    __(int u1, int i1) &amp;#123;
        u = u1, i = i1;
    &amp;#125;
&amp;#125;;
int T, n, res;
_ t[maxn &amp;lt;&amp;lt; 2];
int a[maxn], L[maxn], R[maxn];
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
void pushup(int p) &amp;#123;
    t[p].u = t[lt].u + t[rt].u;
    return;
&amp;#125;
void pushdown(int p) &amp;#123;
    if (t[p].d) &amp;#123;
        t[lt].d = t[rt].d = 1;
        t[lt].u = t[lt].r - t[lt].l + 1;
        t[rt].u = t[rt].r - t[rt].l + 1;
        t[p].d = 0;
    &amp;#125;
    return;
&amp;#125;
void bld(int p, int l, int r) &amp;#123;
    t[p].u = t[p].d = 0;
    t[p].l = l, t[p].r = r;
    if (l == r) return;
    bld(lt, l, mid), bld(rt, mid + 1, r);
    return;
&amp;#125;
void add(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r) &amp;#123;
        t[p].u = t[p].r - t[p].l + 1;
        t[p].d = 1;
        return;
    &amp;#125;
    pushdown(p);
    if (l &amp;lt;= mid) add(lt, l, r);
    if (r &amp;gt; mid) add(rt, l, r);
    pushup(p);
    return;
&amp;#125;
int ask(int p, int l, int r) &amp;#123;
    if (l &amp;lt;= t[p].l &amp;amp;&amp;amp; t[p].r &amp;lt;= r)
        return t[p].u;
    int res = 0; pushdown(p);
    if (l &amp;lt;= mid) res = ask(lt, l, r);
    if (r &amp;gt; mid) res += ask(rt, l, r);
    return res;
&amp;#125;
int main() &amp;#123;
    read(T);
    while (T--) &amp;#123;
        read(n), res = 0;
        std::stack&amp;lt;__&amp;gt; p;
        std::fill(L + 1, L + n + 1, n + 5);
        std::fill(R + 1, R + n + 1, 0);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            read(a[i]), R[a[i]] = i;
            if (L[a[i]] == n + 5) L[a[i]] = i;
        &amp;#125;
        bld(1, 1, n);
        for (int i = 1, j; i &amp;lt;= n; ++i) &amp;#123;
            if (i == R[a[i]] &amp;amp;&amp;amp; i != L[a[i]])
                add(1, L[a[i]] + 1, R[a[i]]);
            else p.push(__(a[i], i));
            while (!p.empty() &amp;amp;&amp;amp; R[p.top().u] &amp;lt;= i) p.pop();
            j = p.size() ? p.top().i : 0;
            if (i != j) res += i - j - ask(1, j + 1, i);
        &amp;#125;
        print(res, &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="线段树" />
        <updated>2023-09-28T08:44:30.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230813/</id>
        <title>pn、pm 和 plmm</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230813/"/>
        <content type="html">&lt;p&gt;Sotution to &lt;a href=&#34;https://codeforces.com/problemset/problem/258/C&#34;&gt;CF258C Little Elephant and LCM&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;0#：那么这个 pn 可以等于什么？它只能等于 pm。（露出看到 plmm 一般的猥琐坏笑）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;方便起见，下面 &lt;span class=&#34;math inline&#34;&gt;\(b_{\text{lcm}}\)&lt;/span&gt; 的意思就是 &lt;span class=&#34;math inline&#34;&gt;\(\text{lcm}\{b_1,b_2,\cdots,b_n\}\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\max\)&lt;/span&gt; 什么的也同理。&lt;/p&gt;
&lt;p&gt;首先我们都能反应过来，如果 &lt;span class=&#34;math inline&#34;&gt;\(b_{\text{lcm}}=b_{\max}\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 中的最大值就得是 &lt;span class=&#34;math inline&#34;&gt;\(b_{\text {lcm}}\)&lt;/span&gt;，而其他元素都得是 &lt;span class=&#34;math inline&#34;&gt;\(b_{\max}\)&lt;/span&gt; 的因数。&lt;/p&gt;
&lt;p&gt;既然涉及到求 &lt;span class=&#34;math inline&#34;&gt;\(b_{\max}\)&lt;/span&gt; 的因数，那我们势必避免不了枚举 &lt;span class=&#34;math inline&#34;&gt;\(b_{\max}\)&lt;/span&gt;。我一开始陷入了一个 trick：我并不知道 &lt;span class=&#34;math inline&#34;&gt;\(b_{\max}\)&lt;/span&gt; 应该处于哪一个位置。但其实这不重要，它对我们最后的方案没有影响，有影响的是「有多少个位置可以取到当前枚举的 &lt;span class=&#34;math inline&#34;&gt;\(b_{\max}\)&lt;/span&gt;」。&lt;/p&gt;
&lt;p&gt;对于当前枚举的 &lt;span class=&#34;math inline&#34;&gt;\(b_{\max}\)&lt;/span&gt;（假设为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;），我们找到它的所有因数 &lt;span class=&#34;math inline&#34;&gt;\(p_1\sim p_m\)&lt;/span&gt;，按从小到大的顺序排列。对于一个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(a_i\ge p_j\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 可以选择 &lt;span class=&#34;math inline&#34;&gt;\(p_j\)&lt;/span&gt;。那么我们找到 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 可以选到的最大的 &lt;span class=&#34;math inline&#34;&gt;\(p_j\)&lt;/span&gt;，此时 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 的选择就是 &lt;span class=&#34;math inline&#34;&gt;\(p_1\sim p_j\)&lt;/span&gt;，共 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 种。&lt;/p&gt;
&lt;p&gt;那么我们在外面已经有一层枚举 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的循环的前提下，再遍历 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 数组无疑是会起飞的，我们考虑倒过来，遍历 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(p_j\)&lt;/span&gt;，找到它是多少个 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 的最大选择（假设为 &lt;span class=&#34;math inline&#34;&gt;\(x_j\)&lt;/span&gt;），那么对于 &lt;span class=&#34;math inline&#34;&gt;\(p_j\)&lt;/span&gt;，它贡献的答案就是 &lt;span class=&#34;math inline&#34;&gt;\(j^{x_j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x_j\)&lt;/span&gt; 的计算也不难，我们用两个二分找到满足 &lt;span class=&#34;math inline&#34;&gt;\(p_j\le a_i &amp;lt; p_j + 1\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 数量就可以了。那么总方案数就是 &lt;span class=&#34;math inline&#34;&gt;\(\prod j^{x_j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但是别忘了还有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(b_{\max}\)&lt;/span&gt; 的限制。找到 &lt;span class=&#34;math inline&#34;&gt;\(x_m\)&lt;/span&gt;，怎么去满足至少有一个 &lt;span class=&#34;math inline&#34;&gt;\(a_i=k\)&lt;/span&gt; 呢？一个微型容斥，用总方案数减去一个 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 都没有的方案数。那么就规定了每个可以取到 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的数都必须不取 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，本来有 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 种选择，现在只剩下 &lt;span class=&#34;math inline&#34;&gt;\(m−1\)&lt;/span&gt; 种，所以答案就是 &lt;span class=&#34;math inline&#34;&gt;\((m−1)^{x_m}\)&lt;/span&gt;，容斥后为 &lt;span class=&#34;math inline&#34;&gt;\(m^{x_m}−(m−1)^{x_m}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(b_{\max}=k\)&lt;/span&gt;，最终结果为 &lt;span class=&#34;math inline&#34;&gt;\((\prod\limits_{j=1}^{m−1}j^{x_j})\times (m^{x_m}−(m−1)^{x_m})\)&lt;/span&gt;。加法原理把所有 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的情况加起来即可。&lt;/p&gt;
&lt;p&gt;对于时间复杂度，枚举 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(O(V)\)&lt;/span&gt; 的，找因数是 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt V)\)&lt;/span&gt; 的，枚举 &lt;span class=&#34;math inline&#34;&gt;\(p_j\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(\log V\)&lt;/span&gt; 的，二分是 &lt;span class=&#34;math inline&#34;&gt;\(\log n\)&lt;/span&gt; 的。所以最终时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(V\times \max\{\sqrt V,\log V\times \log n\})\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int mod = 1e9 + 7;
const int maxn = 1e5 + 5;
int a[maxn];
int n, mx, ans, res;
int qkp(int x, int y) &amp;#123;
    int res = 1;
    while (y) &amp;#123;
        if (y &amp;amp; 1) (res *= x) %= mod;
        (x *= x) %= mod, y &amp;gt;&amp;gt;= 1;
    &amp;#125;
    return res;
&amp;#125;
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i) 
        read(a[i]), mx = max(mx, a[i]);
    std::sort(a + 1, a + n + 1);
    for (int k = 1; k &amp;lt;= mx; ++k) &amp;#123;
        res = 1;
        std::vector&amp;lt;int&amp;gt; p;
        p.push_back(-1); // 占位符，方便下标对齐 
        for (int i = 1; i * i &amp;lt;= k; ++i) &amp;#123;
            if (k % i == 0) &amp;#123;
                p.push_back(i);
                if (i * i != k) p.push_back(k / i);
            &amp;#125;
        &amp;#125;
        std::sort(p.begin() + 1, p.end());
        // 先算前 m - 1 个 
        int m = p.size() - 1;
        for (int j = 1; j &amp;lt;= m - 1; ++j) &amp;#123;
            int l, r, x;
            l = std::lower_bound(a + 1, a + n + 1, p[j]) - a;
            r = std::lower_bound(a + 1, a + n + 1, p[j + 1]) - a - 1;
            x = r - l + 1, (res *= qkp(j, x)) %= mod;
        &amp;#125;
        int l, r, x;
        l = std::lower_bound(a + 1, a + n + 1, p[m]) - a;
        r = n, x = r - l + 1;
        (res *= (qkp(m, x) - qkp(m - 1, x))) %= mod;
        (ans += res) %= mod;
    &amp;#125;
    print((ans + mod) % mod, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="二分" />
        <category term="容斥原理" />
        <updated>2023-08-13T08:46:13.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230729/</id>
        <title>矩阵</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230729/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;http://222.180.160.110:61235/contest/3825/problem/7&#34;&gt;BZOJ2406 矩阵&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;赛时公告&lt;/p&gt;
&lt;p&gt;现在呢？：现在有弹窗了吗 「2023-07-19 16:45:07」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时无声胜有声。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.bzoj2406矩阵&#34;&gt;F.「BZOJ2406」矩阵&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3825/problem/7&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3825/problem/7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是头一次见识到把矩阵和网络流结合在一起的题目。不过这种处理方式也是我们在学习二分图时的常客了：把行和列连边表示某一元素。&lt;/p&gt;
&lt;p&gt;我们发现 &lt;span class=&#34;math inline&#34;&gt;\(B_{i, j}\)&lt;/span&gt; 有给定的上下界，故我们考虑 &lt;strong&gt;上下界网络流&lt;/strong&gt;。那怎么去表示 &lt;span class=&#34;math inline&#34;&gt;\(B_{i, j}\)&lt;/span&gt; 呢？这就要联系到我们刚刚说过的连边方式：用边 &lt;span class=&#34;math inline&#34;&gt;\(i\to j\)&lt;/span&gt; 的流量来表示 &lt;span class=&#34;math inline&#34;&gt;\(B_{i, j}\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\([L, R]\)&lt;/span&gt; 的上下界。&lt;/p&gt;
&lt;p&gt;可是我们除了 &lt;span class=&#34;math inline&#34;&gt;\([L,R]\)&lt;/span&gt; 的限制，还有最大值这个条件呀，怎么办呢？&lt;/p&gt;
&lt;p&gt;注意到题目要求最大的最小，自然想到二分答案。设答案为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，则我们需要保证每行每列的答案都 &lt;span class=&#34;math inline&#34;&gt;\(\le x\)&lt;/span&gt;。每行每列，这刚好是我们的建点方式。这对点本身作出了要求，这套路我们熟，让大源点向行连边、列向大汇点连边就好。&lt;/p&gt;
&lt;p&gt;那么这些边的上下界怎么办呢？我们已知 &lt;span class=&#34;math inline&#34;&gt;\(|S_A-S_B|\le x\)&lt;/span&gt;，那么变形得：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{cases}
S_B\ge S_A-x &amp;amp;(S_B \le S_A) \\
S_B\le S_A+x &amp;amp;(S_B \ge S_A)
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;照理来说，两行的符号相反，我们现在已经得到了一个具有对称美的上下界：&lt;span class=&#34;math inline&#34;&gt;\(S_A-x\le S_B\le S_A+x\)&lt;/span&gt;，就应该速速连边了，可是我怎么看都觉得不舒坦：这个不等式可是带条件的，就这么直接拿来做上下界真的没问题吗？&lt;/p&gt;
&lt;p&gt;&lt;del&gt;答案是没问题，因为我看的题解是这么写的&lt;/del&gt; 本着探索求真精神，我们考虑尊重原不等式（因为原不等式的每一行刚好也有两个相反的符号），将这些边拆成两条，一条的上下界是 &lt;span class=&#34;math inline&#34;&gt;\([S_A-x, S_A]\)&lt;/span&gt;，另一条是 &lt;span class=&#34;math inline&#34;&gt;\([S_A,S_A+x]\)&lt;/span&gt;。6。我明白题解为什么这么写了，一个的下界就是另一个的上界，那直接合并不就行了，这个 naive trick 题解都不屑于写出来。&lt;/p&gt;
&lt;p&gt;然后跑个可行流就可以了。注意要保证边的下界为非负。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int lim = 2e5;
const int maxn = 405;
const int inf = 1e18;
const int maxm = 3e5 + 5;
struct _ &amp;#123;
    int v, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int w1, int n1) &amp;#123;
        v = v1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
_ u[maxm];
int gs, gt, tot;
int a[maxn][maxn];
int l, mid, r, res;
int h[maxn], dif[maxn];
int n, m, cnt, s, t, L, R;
int vis[maxn], now[maxn], dep[maxn];
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
bool BFS(int n) &amp;#123;
    std::fill(vis + 1, vis + n + 1, 0);
    std::fill(dep + 1, dep + n + 1, 0); 
    std::queue&amp;lt;int&amp;gt; q;
    dep[gs] = 1, vis[gs] = 1;
    q.push(gs), now[gs] = h[gs];
    while (!q.empty()) &amp;#123;
        int f = q.front(); q.pop();
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            int v = u[i].v, w = u[i].w;
            if (vis[v] == 1 || w == 0) continue;
            vis[v] = 1, now[v] = h[v];
            dep[v] = dep[f] + 1, q.push(v);
            if (v == gt) return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int findP(int x, int flow = inf) &amp;#123;
    if (x == gt) return flow;
    int rest = flow, i;
    for (i = now[x]; rest &amp;amp;&amp;amp; i; i = u[i].n) &amp;#123;
        now[x] = i;
        int v = u[i].v, w = u[i].w;
        if (dep[v] != dep[x] + 1 || w == 0) continue;
        int t = findP(v, min(rest, w));
        if (t == 0) dep[v] = 0;
        rest -= t, u[i].w -= t, u[i ^ 1].w += t;
    &amp;#125;
    return flow - rest;
&amp;#125;
int Dinic(int n) &amp;#123;
    int res = 0;
    while (BFS(n)) &amp;#123;
        int t = findP(gs);
        while (t) res += t, t = findP(gs);
    &amp;#125;
    return res;
&amp;#125;
void add(int x, int y, int w) &amp;#123;
    u[++tot] = _(y, w, h[x]), h[x] = tot;
    return;
&amp;#125;
void add(int x, int y, int d, int u) &amp;#123;
    add(x, y, u - d), add(y, x, 0);
    dif[x] -= d, dif[y] += d;
    return;
&amp;#125;
void Init(void) &amp;#123;
    tot = 1, cnt = 0;
    memset(h, 0, sizeof (h));
    memset(dif, 0, sizeof (dif));
    return;
&amp;#125;
bool check(int x) &amp;#123;
    Init();
    s = n + m + 1, t = s + 1;
    add(t, s, inf), add(s, t, 0);
    gs = t + 1, gt = t + 2;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= m; ++j)
            add(i, j + n, L, R);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        int sum = 0;
        for (int j = 1; j &amp;lt;= m; ++j)
            sum += a[i][j];
        add(s, i, max(0, sum - x), sum + x);
    &amp;#125;
    for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
        int sum = 0;
        for (int i = 1; i &amp;lt;= n; ++i)
            sum += a[i][j];
        add(j + n, t, max(sum - x, 0), sum + x);
    &amp;#125;
    for (int i = 1; i &amp;lt;= t; ++i) &amp;#123;
        if (dif[i] &amp;lt; 0)
            add(i, gt, -dif[i]), add(gt, i, 0);
        else if (dif[i] &amp;gt; 0) &amp;#123;
            add(gs, i, dif[i]);
            add(i, gs, 0), cnt += dif[i];
        &amp;#125;
    &amp;#125;
    return (Dinic(gt) == cnt);
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= m; ++j)
            read(a[i][j]);
    &amp;#125;
    read(L), read(R);
    l = 0, r = lim, res = -1;
    while (l &amp;lt;= r) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        if (check(mid))
            res = mid, r = mid - 1;
        else l = mid + 1;
    &amp;#125;
    print(res);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;你最好有要事相求.jpg&lt;/p&gt;
</content>
        <category term="网络流" />
        <category term="二分" />
        <category term="上下界网络流" />
        <updated>2023-07-29T07:38:36.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230722/</id>
        <title>网络流 24 题</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230722/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;http://222.180.160.110:61235/contest/3952/problem/1&#34;&gt;网络流 24 题&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;day-11st---6th&#34;&gt;Day 1：1st - 6th&lt;/h2&gt;
&lt;h3 id=&#34;a.-星际转移问题&#34;&gt;A. 星际转移问题&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3952/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3952/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果就按照题目给的路线图，我们显然无法考虑到飞船到达的时刻。同时 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 又很小，我们就知道了，「人不能两次踏进同一条河流」，&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 时刻的站 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 时刻的站 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 也不能是同一个站 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑用 &lt;span class=&#34;math inline&#34;&gt;\((p, t)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 时刻的站 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，然后对于每条路线跑个暴力连边，容量全部为 &lt;span class=&#34;math inline&#34;&gt;\(H_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;怎么控制时间最小呢？二分一下就可以了…… 然后最大流判定是不是满流的即可。&lt;/p&gt;
&lt;p&gt;以及注意到对于同一站点，前面的时刻可以留下来等后面的时刻，我们将同一站的前一时刻和后一时刻全部连边，容量为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。以及保留节目对源点拆点以控制流量为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;经实验答案最大为 29，所以把二分上界设为 30 即可&lt;/del&gt; 理论上来说答案可能很大，比如你谷最后一组数据的答案就是 &lt;span class=&#34;math inline&#34;&gt;\(900\)&lt;/span&gt; 多，所以我掐指一算用天才般的算术技巧开了 &lt;span class=&#34;math inline&#34;&gt;\(10^4\)&lt;/span&gt;。真的，数数位天才就是我。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;woc，这题居然没人做，果然我还是太强了。&lt;/p&gt;
&lt;p&gt;为什么都跑去做 T4 了，这个不是按难度顺序排列的吗？&lt;/p&gt;
&lt;p&gt;哦哦，好像不是，那（Na）没（Mei）事（Shi）了（Le）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/64be2f6e1ddac507cc0e0955.png&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int lim = 1e4;
const int inf = 1e18;
const int maxm = 4e5 + 5;
const int maxn = 5e4 + 15;
struct _ &amp;#123;
    int v, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int w1, int n1) &amp;#123;
        v = v1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
struct __ &amp;#123;
    int c;
    std::vector&amp;lt;int&amp;gt; p;
&amp;#125;;
_ u[maxm];
__ w[maxn];
int h[maxn];
int l, mid, r;
int gs, gt, tot = 1;
int n, m, k, s, mt, x, res, y;
int vis[maxn], now[maxn], dep[maxn];
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
int fun(int p, int t) &amp;#123; return (p - 1) * mt + t; &amp;#125;
bool BFS(int n) &amp;#123;
    std::fill(vis + 1, vis + n + 1, 0);
    std::fill(dep + 1, dep + n + 1, 0); 
    std::queue&amp;lt;int&amp;gt; q;
    dep[gs] = 1, vis[gs] = 1;
    q.push(gs), now[gs] = h[gs];
    while (!q.empty()) &amp;#123;
        int f = q.front(); q.pop();
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            int v = u[i].v, w = u[i].w;
            if (vis[v] == 1 || w == 0) continue;
            vis[v] = 1, now[v] = h[v];
            dep[v] = dep[f] + 1, q.push(v);
            if (v == gt) return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int findP(int x, int flow = inf) &amp;#123;
    if (x == gt) return flow;
    int rest = flow, i;
    for (i = now[x]; rest &amp;amp;&amp;amp; i; i = u[i].n) &amp;#123;
        int v = u[i].v, w = u[i].w;
        now[x] = i;
        if (dep[v] != dep[x] + 1 || w == 0)
            continue;
        int t = findP(v, min(rest, w));
        if (t == 0) dep[v] = 0;
        rest -= t, u[i].w -= t, u[i ^ 1].w += t;
    &amp;#125;
    return flow - rest;
&amp;#125;
int Dinic(int n) &amp;#123;
    int res = 0;
    while (BFS(n)) &amp;#123;
        int t = findP(gs);
        while (t) res += t, t = findP(gs);
    &amp;#125;
    return res;
&amp;#125;
void add(int x, int y, int w) &amp;#123;
    u[++tot] = _(y, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void addf(int x, int y, int w) &amp;#123;
    add(x, y, w), add(y, x, 0);
    return;
&amp;#125;
void Init(void) &amp;#123;
    tot = 1;
    memset(h, 0, sizeof (h));
    return;
&amp;#125;
bool check(int x) &amp;#123;
    Init();
    mt = x, s = fun(n, mt) + 1;
    gs = s + 1, gt = s + 2;
    addf(gs, s, k);
    for (int i = 1; i &amp;lt;= mt; ++i) &amp;#123;
        addf(s, fun(n - 1, i), k);
        addf(fun(n, i), gt, k);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt; mt; ++j)
            addf(fun(i, j), fun(i, j + 1), k);
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        int p = 0, x = 0, la = 0;
        while (++p &amp;lt;= mt) &amp;#123;
            if (la != 0)
                addf(fun(la, p - 1), fun(w[i].p[x], p), w[i].c);
            la = w[i].p[x];
            if (++x &amp;gt;= w[i].p.size()) x = 0;
        &amp;#125;
    &amp;#125;
    return (Dinic(gt) == k);
&amp;#125;
int main() &amp;#123;
    read(n), read(m), read(k);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        read(w[i].c), read(y);
        while (y--) &amp;#123;
            read(x);
            if (x == 0) x = n + 1;
            else if (x == -1) x = n + 2;
            w[i].p.push_back(x);
        &amp;#125;
    &amp;#125;
    n += 2;
    l = 1, r = lim;
    while (l &amp;lt;= r) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        if (check(mid))
            res = mid, r = mid - 1;
        else l = mid + 1;
    &amp;#125;
    print(res ? res - 1 : 0, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-最长递增子序列&#34;&gt;B. 最长递增子序列&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3952/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3952/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;就算知道不是按难度顺序排列我也要顺序开题。欸嘿，就是玩。&lt;/p&gt;
&lt;p&gt;第一问很水，跑个 DP 就行。&lt;/p&gt;
&lt;p&gt;第二问有点意思，取出就代表只能选一次，总之典中典，把每个数拆成入点和出点，容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，这样就可以只选一次了。&lt;/p&gt;
&lt;p&gt;那怎么保证每次找到的流一定是 LIS 呢？其实这和我们 Dinic 的深度分层数组有异曲同工之妙，我们把 &lt;span class=&#34;math inline&#34;&gt;\(f_i = f_j + 1(i&amp;gt;j,A_i\ge A_j)\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\((j, i)\)&lt;/span&gt; 连边，容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;然后源点只和满足 &lt;span class=&#34;math inline&#34;&gt;\(f_x = 1\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 连边，相应地，汇点之和满足 &lt;span class=&#34;math inline&#34;&gt;\(f_x = \text{LIS}\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 连边。&lt;/p&gt;
&lt;p&gt;第三问很好想啊，我们把 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到源点和 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 到汇点的容量设成无穷大就好。&lt;/p&gt;
&lt;p&gt;然后踩了半天的坑，这道题的拆点部分不知道为什么必须要连双向边。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int inf = 1e18;
const int maxm = 4e5 + 5;
const int maxn = 5e5 + 15;
struct _ &amp;#123;
    int v, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int w1, int n1) &amp;#123;
        v = v1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
_ u[maxm];
int n, res;
int gs, gt, tot = 1;
int a[maxn], h[maxn], f[maxn];
int vis[maxn], now[maxn], dep[maxn];
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
bool BFS(int n) &amp;#123;
    std::fill(vis + 1, vis + n + 1, 0);
    std::fill(dep + 1, dep + n + 1, 0); 
    std::queue&amp;lt;int&amp;gt; q;
    dep[gs] = 1, vis[gs] = 1;
    q.push(gs), now[gs] = h[gs];
    while (!q.empty()) &amp;#123;
        int f = q.front(); q.pop();
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            int v = u[i].v, w = u[i].w;
            if (vis[v] == 1 || w == 0) continue;
            vis[v] = 1, now[v] = h[v];
            dep[v] = dep[f] + 1, q.push(v);
            if (v == gt) return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int findP(int x, int flow = inf) &amp;#123;
    if (x == gt) return flow;
    int rest = flow, i;
    for (i = now[x]; rest &amp;amp;&amp;amp; i; i = u[i].n) &amp;#123;
        int v = u[i].v, w = u[i].w;
        now[x] = i;
        if (dep[v] != dep[x] + 1 || w == 0) continue;
        int t = findP(v, min(rest, w));
        if (t == 0) dep[v] = 0;
        rest -= t, u[i].w -= t, u[i ^ 1].w += t;
    &amp;#125;
    return flow - rest;
&amp;#125;
int Dinic(int n) &amp;#123;
    int res = 0;
    while (BFS(n)) &amp;#123;
        int t = findP(gs);
        while (t) res += t, t = findP(gs);
    &amp;#125;
    return res;
&amp;#125;
void add(int x, int y, int w) &amp;#123;
    u[++tot] = _(y, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void addf(int x, int y, int w) &amp;#123;
    add(x, y, w), add(y, x, 0);
    return;
&amp;#125;
int main() &amp;#123;
    read(n);
    gs = 2 * n + 1, gt = gs + 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]), f[i] = 1;
        addf(i, i + n, 1);
        addf(i + n, i, 1);
        for (int j = 1; j &amp;lt; i; ++j) &amp;#123;
            if (a[j] &amp;lt;= a[i])
                f[i] = max(f[i], f[j] + 1);
        &amp;#125;
        res = max(res, f[i]);
        for (int j = 1; j &amp;lt; i; ++j) &amp;#123;
            if (a[j] &amp;lt;= a[i] &amp;amp;&amp;amp; f[i] == f[j] + 1)
                addf(j, i + n, 1);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (f[i] == 1) addf(gs, i, 1);
        if (f[i] == res) addf(i + n, gt, 1);
    &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    print(Dinic(gt), &amp;#39;\n&amp;#39;);
    tot = 1;
    memset(h, 0, sizeof (h));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        addf(i, i + n, 1);
        addf(i + n, i, 1);
        for (int j = 1; j &amp;lt; i; ++j) &amp;#123;
            if (a[j] &amp;lt;= a[i] &amp;amp;&amp;amp; f[i] == f[j] + 1)
                addf(j, i + n, 1);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (f[i] == 1) &amp;#123;
            if (i == 1) addf(gs, i, inf);
            else addf(gs, i, 1);
        &amp;#125;
        if (f[i] == res) &amp;#123;
            if (i == n) addf(i + n, gt, inf);
            else addf(i + n, gt, 1);
        &amp;#125;
    &amp;#125;
    print(Dinic(gt), &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-餐巾计划问题&#34;&gt;C. 餐巾计划问题&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3952/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3952/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个有点简单啊。就差把费用流三个大字拍你脸上了。&lt;/p&gt;
&lt;p&gt;用过和没用过的餐巾是不能混合处理的，故考虑拆点，把每一天拆出来一个点表示当天所有用过的餐巾量（注意不止是当天用过的，还可以是前几天传下来的）。&lt;/p&gt;
&lt;p&gt;首先不难想到大源点和每天的没用过连边，容量为无穷大，费用为购买费用，表示购买餐巾；用过的和下一天用过的连边，容量为无穷大，费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，表示用过的餐巾的继承；用过的和快洗 / 慢洗所需时间后的没用过的连边，容量为无穷大，费用为快洗 / 慢洗费用，表示把用过的洗成没用过的（奇奇怪怪）。&lt;/p&gt;
&lt;p&gt;那么问题来了，怎么表示使用餐巾呢？这里有一个很妙的处理方式，把没用过的朝大汇点连边，容量为当天使用量，费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，表示把这么多没用过的餐巾销毁；再把大源点朝用过的连边，容量也为当天使用量，费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，表示凭空变出来这么多条用过的餐巾。&lt;/p&gt;
&lt;p&gt;然后跑个费用流就可以了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int inf = 1e18;
const int maxn = 4e3 + 5;
const int maxm = 6e5 + 5;
struct _ &amp;#123;
    int v, c, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int c1, int w1, int n1) &amp;#123;
        v = v1, c = c1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
_ u[maxm];
bool inq[maxn];
int gs, gt, tot = 1;
int h[maxn], dis[maxn];
int fl[maxn], pre[maxn];
int n, m, t1, c1, t2, c2, res, x;
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
bool SPFA(int s, int n) &amp;#123;
    std::queue&amp;lt;int&amp;gt; q;
    std::fill(dis + 1, dis + n + 1, inf);
    q.push(s), dis[s] = 0, inq[s] = 1;
    pre[s] = inf, pre[gt] = 0, fl[s] = inf;
    while (!q.empty()) &amp;#123;
        int f = q.front();
        q.pop(), inq[f] = 0;
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            if (u[i].c == 0) continue;
            int v = u[i].v, w = u[i].w;
            if (dis[v] &amp;gt; dis[f] + w) &amp;#123;
                pre[v] = i ^ 1;
                dis[v] = dis[f] + w;
                fl[v] = min(fl[f], u[i].c);
                if (!inq[v]) inq[v] = 1, q.push(v);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return pre[gt];
&amp;#125;
void SSP(int s, int n) &amp;#123;
    int p, mn, d;
    while (SPFA(s, n)) &amp;#123;
        mn = fl[gt], d = 0;
        for (p = gt; p != s; p = u[pre[p]].v) &amp;#123;
            u[pre[p]].c += mn;
            u[pre[p] ^ 1].c -= mn;
            d += u[pre[p] ^ 1].w;
        &amp;#125;
        res += mn * d;
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y, int c, int w) &amp;#123;
    u[++tot] = _(y, c, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void addf(int x, int y, int c, int w) &amp;#123;
    add(x, y, c, w), add(y, x, 0, -w);
    return;
&amp;#125;
int main() &amp;#123;
    read(n);
    gs = 2 * n + 1, gt = gs + 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(x);
        addf(i, gt, x, 0);
        addf(gs, i + n, x, 0);
        if (i != n)
            addf(i + n, i + 1 + n, inf, 0);
    &amp;#125;
    read(m), read(t1);
    read(c1), read(t2), read(c2);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        addf(gs, i, inf, m);
        if (i + t1 &amp;lt;= n)
            addf(i + n, i + t1, inf, c1);
        if (i + t2 &amp;lt;= n)
            addf(i + n, i + t2, inf, c2);
    &amp;#125;
    SSP(gs, gt);
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-运输问题&#34;&gt;D. 运输问题&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3952/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3952/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不是很理解啊，这题就一个普普通通的二分图建模，有什么难点吗，，，&lt;/p&gt;
&lt;p&gt;哦，蓝的，那没事了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int inf = 1e18;
const int maxn = 4e3 + 5;
const int maxm = 6e5 + 5;
struct _ &amp;#123;
    int v, c, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int c1, int w1, int n1) &amp;#123;
        v = v1, c = c1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
bool inq[maxn];
int gs, gt, tot = 1;
_ u[maxm], u1[maxm];
int fl[maxn], pre[maxn];
int h[maxn], dis[maxn], h1[maxn];
int n, m, t1, c1, t2, c2, res, x;
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool SPFA(int s, int n) &amp;#123;
    std::queue&amp;lt;int&amp;gt; q;
    std::fill(dis + 1, dis + n + 1, inf);
    q.push(s), dis[s] = 0, inq[s] = 1;
    pre[s] = inf, pre[gt] = 0, fl[s] = inf;
    while (!q.empty()) &amp;#123;
        int f = q.front();
        q.pop(), inq[f] = 0;
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            if (u[i].c == 0)
                continue;
            int v = u[i].v, w = u[i].w;
            if (dis[v] &amp;gt; dis[f] + w) &amp;#123;
                pre[v] = i ^ 1;
                dis[v] = dis[f] + w;
                fl[v] = min(fl[f], u[i].c);
                if (!inq[v]) inq[v] = 1, q.push(v);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return pre[gt];
&amp;#125;
bool SPFA1(int s, int n) &amp;#123;
    std::queue&amp;lt;int&amp;gt; q;
    std::fill(pre + 1, pre + n + 1, 0);
    std::fill(dis + 1, dis + n + 1, -inf);
    q.push(s), dis[s] = 0, inq[s] = 1;
    pre[s] = inf, pre[gt] = 0, fl[s] = inf;
    while (!q.empty()) &amp;#123;
        int f = q.front();
        q.pop(), inq[f] = 0;
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            if (u[i].c == 0) continue;
            int v = u[i].v, w = u[i].w;
            if (dis[v] &amp;lt; dis[f] + w) &amp;#123;
                pre[v] = i ^ 1;
                dis[v] = dis[f] + w;
                fl[v] = min(fl[f], u[i].c);
                if (!inq[v])
                    inq[v] = 1, q.push(v);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return pre[gt];
&amp;#125;
void SSP(int s, int n) &amp;#123;
    int p, mn, d;
    while (SPFA(s, n)) &amp;#123;
        mn = fl[gt], d = 0;
        for (p = gt; p != s; p = u[pre[p]].v) &amp;#123;
            u[pre[p]].c += mn;
            u[pre[p] ^ 1].c -= mn;
            d += u[pre[p] ^ 1].w;
        &amp;#125;
        res += mn * d;
    &amp;#125;
    return;
&amp;#125;
void SSP1(int s, int n) &amp;#123;
    int p, mn, d;
    while (SPFA1(s, n)) &amp;#123;
        mn = fl[gt], d = 0;
        for (p = gt; p != s; p = u[pre[p]].v) &amp;#123;
            u[pre[p]].c += mn;
            u[pre[p] ^ 1].c -= mn;
            d += u[pre[p] ^ 1].w;
        &amp;#125;
        res += mn * d;
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y, int c, int w) &amp;#123;
    u[++tot] = _(y, c, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void addf(int x, int y, int c, int w) &amp;#123;
    add(x, y, c, w), add(y, x, 0, -w);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    gs = n + m + 1, gt = gs + 1;
    for (int i = 1; i &amp;lt;= n; ++i)
        read(x), addf(gs, i, x, 0);
    for (int i = 1; i &amp;lt;= m; ++i)
        read(x), addf(i + n, gt, x, 0);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= m; ++j)
            read(x), addf(i, j + n, inf, x);
    &amp;#125;
    memcpy(h1, h, sizeof (h1));
    memcpy(u1, u, sizeof (u1));
    SSP(gs, gt);
    print(res, &amp;#39;\n&amp;#39;), res = 0;
    memcpy(h, h1, sizeof (h));
    memcpy(u, u1, sizeof (u));
    SSP1(gs, gt);
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e.-最小路径覆盖&#34;&gt;E. 最小路径覆盖&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3952/problem/5&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3952/problem/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当我们把所有点视作长度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的路径时，答案为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;。怎么让这个答案减小呢？我们需要 &lt;strong&gt;合并路径&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假设有路径 &lt;span class=&#34;math inline&#34;&gt;\(u \to x\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(x \to v\)&lt;/span&gt;，那么将它们合并为 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt; 显然可以得到更优的答案。&lt;/p&gt;
&lt;p&gt;那么这个时候就有同学要问了，我选择合并路径的方式会不会对答案产生影响呢？这个不急，我们讲完了再证明。&lt;/p&gt;
&lt;p&gt;首先开一个新图，把所有点整一个保留节目，&lt;span class=&#34;math inline&#34;&gt;\(S\to x\)&lt;/span&gt; 建一条容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的边；&lt;span class=&#34;math inline&#34;&gt;\(x&amp;#39; \to T\)&lt;/span&gt; 建一条容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的边；对于边 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt;，在 &lt;span class=&#34;math inline&#34;&gt;\(u\to v&amp;#39;\)&lt;/span&gt; 建一条容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的边。&lt;/p&gt;
&lt;p&gt;这个时候我们就有了一个类二分图的模型。想想看，我们在里面跑出来的最大流是什么？&lt;/p&gt;
&lt;p&gt;在这种容量均为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的类二分图模型中，网络流中找到的路径其实就是二分图中的增广路，因为反向的容量为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的边就相当于已匹配边，会限制搜索进一步搜下去。&lt;/p&gt;
&lt;p&gt;在二分图中，每找到一条增广路，最大匹配的大小便扩大 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;；在这里的网络流中也一样，每找到一条路径，最大流的大小便扩大 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么，这里的「路径」究竟有什么含义？&lt;/p&gt;
&lt;p&gt;一条从 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的边，若其流量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，我们将它视作原图中被选中、加入路径集合的边，你会发现，找最大流（不断延长路径）的过程就相当于在合并路径，而且最后这个新图满足：点和边都不会被重复选中，且因为我们找的是最大流，所有点都会被选中。&lt;/p&gt;
&lt;p&gt;好好好，正确性就很显而易见了，来自于二分图增广路找最大匹配的正确性（被打）。&lt;/p&gt;
&lt;p&gt;那么求出最大流 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;，因为每合并一次路径，路径的条数就会减少 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，所以最后的答案就是 &lt;span class=&#34;math inline&#34;&gt;\(N - f\)&lt;/span&gt;。方案呢？&lt;/p&gt;
&lt;p&gt;因为网络流特性，你会发现路径的起点一定是 &lt;span class=&#34;math inline&#34;&gt;\(S\to x\)&lt;/span&gt;（废话），所以找出所有 &lt;span class=&#34;math inline&#34;&gt;\(S\to x\)&lt;/span&gt; 流量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，它们就是每条路径的起点。&lt;/p&gt;
&lt;p&gt;因为路径没有交叉且肯定联通，所以你沿着这个起点一直找流量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的边就能找到头。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int inf = 1e18;
const int maxn = 4e3 + 5;
const int maxm = 6e5 + 5;
struct _ &amp;#123;
    int v, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int w1, int n1) &amp;#123;
        v = v1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
_ u[maxm];
bool vis1[maxn];
int n, m, x, y, res;
int gs, gt, tot = 1;
int a[maxn], h[maxn], f[maxn];
int vis[maxn], now[maxn], dep[maxn];
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
bool BFS(int n) &amp;#123;
    std::fill(vis + 1, vis + n + 1, 0);
    std::fill(dep + 1, dep + n + 1, 0); 
    std::queue&amp;lt;int&amp;gt; q;
    dep[gs] = 1, vis[gs] = 1;
    q.push(gs), now[gs] = h[gs];
    while (!q.empty()) &amp;#123;
        int f = q.front(); q.pop();
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            int v = u[i].v, w = u[i].w;
            if (vis[v] == 1 || w == 0) continue;
            vis[v] = 1, now[v] = h[v];
            dep[v] = dep[f] + 1, q.push(v);
            if (v == gt) return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int findP(int x, int flow = inf) &amp;#123;
    if (x == gt) return flow;
    int rest = flow, i;
    for (i = now[x]; rest &amp;amp;&amp;amp; i; i = u[i].n) &amp;#123;
        int v = u[i].v, w = u[i].w;
        now[x] = i;
        if (dep[v] != dep[x] + 1 || w == 0) continue;
        int t = findP(v, min(rest, w));
        if (t == 0) dep[v] = 0;
        rest -= t, u[i].w -= t, u[i ^ 1].w += t;
    &amp;#125;
    return flow - rest;
&amp;#125;
int Dinic(int n) &amp;#123;
    int res = 0;
    while (BFS(n)) &amp;#123;
        int t = findP(gs);
        while (t) res += t, t = findP(gs);
    &amp;#125;
    return res;
&amp;#125;
void add(int x, int y, int w) &amp;#123;
    u[++tot] = _(y, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void addf(int x, int y, int w) &amp;#123;
    add(x, y, w), add(y, x, 0);
    return;
&amp;#125;
void output(int x) &amp;#123;
    if (x == gs) return;
    print(x, &amp;#39; &amp;#39;), vis1[x] = 1;
    for (int i = h[x]; i; i = u[i].n) &amp;#123;
        int v = u[i].v;
        if (v &amp;lt;= n || v &amp;gt; 2 * n || vis1[v - n])
            continue;
        if (u[i].w == 0) &amp;#123;
            output(u[i].v - n);
            return;
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    gs = 2 * n + 1, gt = gs + 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        addf(gs, i, 1);
        addf(i + n, gt, 1);
    &amp;#125;
    while (m--) &amp;#123;
        read(x), read(y);
        addf(x, y + n, 1);
    &amp;#125;
    res = n - Dinic(gt);
    for (int i = h[gt]; i; i = u[i].n) &amp;#123;
        if (u[i ^ 1].w == 1) &amp;#123;
            output(u[i].v - n);
            putchar(&amp;#39;\n&amp;#39;);
        &amp;#125;
    &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-数字梯形&#34;&gt;F. 数字梯形&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3952/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3952/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 GM 的强制要求下只能跳了，呜呜呜&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;day-27th---14th&#34;&gt;Day 2：7th - 14th&lt;/h2&gt;
&lt;h3 id=&#34;a.-太空飞行计划&#34;&gt;A. 太空飞行计划&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3976/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3976/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不难想到把大源点和实验连容量为报酬的边；把仪器和大汇点连容量为消费的边；实验和仪器之间连容量为无穷大的边。&lt;/p&gt;
&lt;p&gt;这个时候我们要选择一些实验不去做，选择一些仪器不要，并且要求要和不要的实验和仪器之间不能有边关联，还要求留下的利润最大。&lt;/p&gt;
&lt;p&gt;假如我们把删去一条仪器边视作保留仪器，删去一条实验边视作跳过实验，这是什么？最小割！因为必须保证没有关联，这和最小割要求被分为两个部分是符合的。因为中间的边容量无穷大，故绝对不会选中间的边。同时，它删除了最不赚钱的实验，保留了最便宜的仪器。&lt;/p&gt;
&lt;p&gt;据说这也是个经典最小割模型，建议掌握。&lt;/p&gt;
&lt;p&gt;然后答案呢？先暂时将器材视为负权值，则：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;总收入 为 被选中的实验权值 加上 被选中的器材权值&lt;/li&gt;
&lt;li&gt;被选中的实验权值 为 所有实验权值和 减去 未被选择的实验权值和&lt;/li&gt;
&lt;li&gt;总收入 为 所有实验权值和 减去 未被选择的实验权值和 加上 被选中的器材权值&lt;/li&gt;
&lt;li&gt;总收入 为 所有实验权值和 减去 未被选择的实验权值和 减去 被选中的器材权值的相反数&lt;/li&gt;
&lt;li&gt;最小割 为 未被选择的实验权值和 加上 被选中的器材权值的相反数&lt;/li&gt;
&lt;li&gt;总收入 为 被选中的实验权值 减去 最小割&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么怎么输出方案呢？&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/blog/35891/solution-p2762&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/blog/35891/solution-p2762&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;woc 这篇讲得太好了。最后一次 Dinic 失败了，这是为什么呢？因为 BFS 找不到汇点了，说明若干条残量为 0 的边已经堵死了从源点到汇点的路。这个时候这些残量为 0 的边其实就是最小割。&lt;/p&gt;
&lt;p&gt;那选取的实验和仪器，就是从源点出发可以到达的（已在 BFS 中为其分层作为记号），所以只需统计有层数的点即可。太妙了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int inf = 1e18;
const int maxn = 4e3 + 5;
const int maxm = 6e5 + 5;
struct _ &amp;#123;
    int v, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int w1, int n1) &amp;#123;
        v = v1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
_ u[maxm];
bool vis1[maxn];
int n, m, x, y, res;
int gs, gt, tot = 1;
int a[maxn], h[maxn], f[maxn];
int vis[maxn], now[maxn], dep[maxn];
int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
int max(int x, int y) &amp;#123; return x &amp;gt; y ? x : y; &amp;#125;
bool BFS(int n) &amp;#123;
    std::fill(vis + 1, vis + n + 1, 0);
    std::fill(dep + 1, dep + n + 1, 0); 
    std::queue&amp;lt;int&amp;gt; q;
    dep[gs] = 1, vis[gs] = 1;
    q.push(gs), now[gs] = h[gs];
    while (!q.empty()) &amp;#123;
        int f = q.front(); q.pop();
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            int v = u[i].v, w = u[i].w;
            if (vis[v] == 1 || w == 0) continue;
            vis[v] = 1, now[v] = h[v];
            dep[v] = dep[f] + 1, q.push(v);
            if (v == gt) return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int findP(int x, int flow = inf) &amp;#123;
    if (x == gt) return flow;
    int rest = flow, i;
    for (i = now[x]; rest &amp;amp;&amp;amp; i; i = u[i].n) &amp;#123;
        int v = u[i].v, w = u[i].w;
        now[x] = i;
        if (dep[v] != dep[x] + 1 || w == 0) continue;
        int t = findP(v, min(rest, w));
        if (t == 0) dep[v] = 0;
        rest -= t, u[i].w -= t, u[i ^ 1].w += t;
    &amp;#125;
    return flow - rest;
&amp;#125;
int Dinic(int n) &amp;#123;
    int res = 0;
    while (BFS(n)) &amp;#123;
        int t = findP(gs);
        while (t) res += t, t = findP(gs);
    &amp;#125;
    return res;
&amp;#125;
void add(int x, int y, int w) &amp;#123;
    u[++tot] = _(y, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void addf(int x, int y, int w) &amp;#123;
    add(x, y, w), add(y, x, 0);
    return;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%lld %lld&amp;quot;, &amp;amp;n, &amp;amp;m);
    gs = n + m + 1, gt = gs + 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        scanf(&amp;quot;%lld&amp;quot;, &amp;amp;x);
        addf(gs, i, x);
        res += x;
        std::string tmp;
        std::getline(std::cin, tmp);
        std::stringstream t(tmp);
        while (t &amp;gt;&amp;gt; y)
            addf(i, y + n, inf);
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        read(x), addf(n + i, gt, x);
    res -= Dinic(gt);
    for (int i = 1; i &amp;lt;= n; ++i)
        if (dep[i] != 0) print(i, &amp;#39; &amp;#39;);
    putchar(&amp;#39;\n&amp;#39;);
    for (int i = n + 1; i &amp;lt;= n + m; ++i)
        if (dep[i] != 0) print(i - n, &amp;#39; &amp;#39;);
    putchar(&amp;#39;\n&amp;#39;), print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="网络流" />
        <updated>2023-07-22T14:17:10.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230720/</id>
        <title>费用流练习</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230720/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3820&#34;&gt;费用流入门练习&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-订货&#34;&gt;A. 订货&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3820/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3820/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个带继承关系的模型很熟悉，想到了 &lt;a href=&#34;https://www.cnblogs.com/XSC062/p/17548925.html&#34;&gt;猪&lt;/a&gt; 那一题。所以我们试着仿照这个方式来建图。&lt;/p&gt;
&lt;p&gt;题目提到了单位费用，这简直就是直接把边的费用拍你脸上嘲讽。&lt;/p&gt;
&lt;p&gt;我们拉一个大源点，朝每个月连一条容量为无穷大、费用为当月购买单位费用的边，表示每个月的购买。&lt;/p&gt;
&lt;p&gt;拉一个大汇点，每个月朝它连一条容量为当月需求量、费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的边，表示每个月的需求。&lt;/p&gt;
&lt;p&gt;再让每个月朝下一个月连一条容量为仓库容量、费用为贮存费用的边，表示继承。跑一个最小费用最大流即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 405;
const int inf = 1e18;
const int maxm = 5e5 + 5;
struct _ &amp;#123;
    int v, c, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int c1, int w1, int n1) &amp;#123;
        v = v1, c = c1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
_ u[maxm];
bool inq[maxn];
int n, m, S, x, res;
int gs, gt, tot = 1;
int h[maxn], dis[maxn];
int fl[maxn], pre[maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool SPFA(int s, int n) &amp;#123;
    std::queue&amp;lt;int&amp;gt; q;
    std::fill(dis + 1, dis + n + 1, inf);
    q.push(s), dis[s] = 0, inq[s] = 1;
    pre[s] = inf, pre[gt] = 0, fl[s] = inf;
    while (!q.empty()) &amp;#123;
        int f = q.front();
        q.pop(), inq[f] = 0;
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            if (u[i].c == 0)
                continue;
            int v = u[i].v, w = u[i].w;
            if (dis[v] &amp;gt; dis[f] + w) &amp;#123;
                pre[v] = i ^ 1;
                dis[v] = dis[f] + w;
                fl[v] = min(fl[f], u[i].c);
                if (!inq[v])
                    inq[v] = 1, q.push(v);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return pre[gt];
&amp;#125;
void SSP(int s, int n) &amp;#123;
    int p, mn, d;
    while (SPFA(s, n)) &amp;#123;
        mn = fl[gt], d = 0;
        for (p = gt; p != s; p = u[pre[p]].v) &amp;#123;
            u[pre[p]].c += mn;
            u[pre[p] ^ 1].c -= mn;
            d += u[pre[p] ^ 1].w;
        &amp;#125;
        res += mn * d;
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y, int c, int w) &amp;#123;
    u[++tot] = _(y, c, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void addf(int x, int y, int c, int w) &amp;#123;
    add(x, y, c, w), add(y, x, 0, -w);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m), read(S);
    gs = n + 1, gt = gs + 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(x);
        addf(i, gt, x, 0);
        if (i != n)
            addf(i, i + 1, S, m);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(x);
        addf(gs, i, inf, x);
    &amp;#125;    
    SSP(gs, gt);
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int  &lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-网络扩容&#34;&gt;B. 网络扩容&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3820/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3820/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;鉴于一道费用流不会无缘无故先让你求一遍最大流，我们先持观望态度，暂且认为最大流对题目有提示作用 &lt;del&gt;而不是说这道题就是个缝合怪&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;其实看完题我们就悟了，这怎么这么像上下界网络流那个差量网络呀，要不我们试试这么干？&lt;/p&gt;
&lt;p&gt;我们先求得普通网络中的最大流，然后每条边减去流量，就成为了一个「差量网络 Pro」。那么我们现在就要通过扩容让该网络中的最大流变为 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt;。对于扩容的操作，不难想到把每条边的边权设为正无穷，然后费用设为扩容费用。&lt;/p&gt;
&lt;p&gt;现在有了一个问题：原图中未留满的边，在现在的新网络中的残余容量应该如何处理呢？很简单，我们就把它当作已经扩过了这么多容，通过拆边操作拆出来一条容量为原图中残余容量、费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;「会员通道」，那么算法就会优先选择这条边。&lt;/p&gt;
&lt;p&gt;怎么去控制流量为 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt;？联想到之前的拆边操作，我们考虑拆点。在 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 中任选一个拆开作为新的源点 / 汇点，新点和旧点之间的容量为 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt;、费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;然后跑一个最小费用最大流就行。&lt;del&gt;该说不说题目的正解思路引导做得还挺好的&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;其实注意到在跑完最大流之后，所有正向边的残余容量已经求得，只要在跑最大流时令所有边的费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;（毕竟最大流不关心费用），就可以沿用原图，只加新边再跑费用流。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int inf = 1e18;
const int maxn = 1e3 + 5;
const int maxm = 5e5 + 5;
struct _ &amp;#123;
    int v, c, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int c1, int w1, int n1) &amp;#123;
        v = v1, c = c1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
struct __ &amp;#123; int x, y, c, w; &amp;#125;;
_ u[maxm];
__ w[maxm];
bool inq[maxn];
int n, m, k, res;
int gs, gt, tot = 1;
int h[maxn], dis[maxn];
int fl[maxn], pre[maxn];
int vis[maxn], now[maxn], dep[maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool BFS(int n) &amp;#123;
    std::fill(vis + 1, vis + n + 1, 0);
    std::fill(dep + 1, dep + n + 1, 0); 
    std::queue&amp;lt;int&amp;gt; q;
    dep[gs] = 1, vis[gs] = 1;
    q.push(gs), now[gs] = h[gs];
    while (!q.empty()) &amp;#123;
        int f = q.front();
        q.pop();
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            int v = u[i].v, w = u[i].c;
            if (vis[v] == 1 || w == 0)
                continue;
            vis[v] = 1, now[v] = h[v];
            dep[v] = dep[f] + 1, q.push(v);
            if (v == gt)
                return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int findP(int x, int flow = inf) &amp;#123;
    if (x == gt)
        return flow;
    int rest = flow, i;
    for (i = now[x]; rest &amp;amp;&amp;amp; i; i = u[i].n) &amp;#123;
        int v = u[i].v, w = u[i].c;
        now[x] = i;
        if (dep[v] != dep[x] + 1 || w == 0)
            continue;
        int t = findP(v, min(rest, w));
        if (t == 0)
            dep[v] = 0;
        rest -= t;
        u[i].c -= t, u[i ^ 1].c += t;
    &amp;#125;
    return flow - rest;
&amp;#125;
int Dinic(int n) &amp;#123;
    int res = 0;
    while (BFS(n)) &amp;#123;
        int t = findP(gs);
        while (t) &amp;#123;
            res += t;
            t = findP(gs);
        &amp;#125;
    &amp;#125;
    return res;
&amp;#125;
bool SPFA(int s, int n) &amp;#123;
    std::queue&amp;lt;int&amp;gt; q;
    std::fill(dis + 1, dis + n + 1, inf);
    q.push(s), dis[s] = 0, inq[s] = 1;
    pre[s] = inf, pre[gt] = 0, fl[s] = inf;
    while (!q.empty()) &amp;#123;
        int f = q.front();
        q.pop(), inq[f] = 0;
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            if (u[i].c == 0)
                continue;
            int v = u[i].v, w = u[i].w;
            if (dis[v] &amp;gt; dis[f] + w) &amp;#123;
                pre[v] = i ^ 1;
                dis[v] = dis[f] + w;
                fl[v] = min(fl[f], u[i].c);
                if (!inq[v])
                    inq[v] = 1, q.push(v);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return pre[gt];
&amp;#125;
void SSP(int s, int n) &amp;#123;
    int p, mn, d;
    while (SPFA(s, n)) &amp;#123;
        mn = fl[gt], d = 0;
        for (p = gt; p != s; p = u[pre[p]].v) &amp;#123;
            u[pre[p]].c += mn;
            u[pre[p] ^ 1].c -= mn;
            d += u[pre[p] ^ 1].w;
        &amp;#125;
        res += mn * d;
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y, int c, int w) &amp;#123;
    u[++tot] = _(y, c, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void addf(int x, int y, int c, int w = 0) &amp;#123;
    add(x, y, c, w), add(y, x, 0, -w);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m), read(k);
    gs = 1, gt = n;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        read(w[i].x), read(w[i].y);
        read(w[i].c), read(w[i].w);
        addf(w[i].x, w[i].y, w[i].c);
    &amp;#125;
    print(Dinic(n), &amp;#39; &amp;#39;);
    gs = n + 1, addf(gs, 1, k, 0);
    for (int i = 1; i &amp;lt;= m; ++i)
        addf(w[i].x, w[i].y, inf, w[i].w);
    SSP(gs, gt);
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-航班安排&#34;&gt;C. 航班安排&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3820/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3820/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很简单一个道理，时间的具体值对我们来说并不重要。能到就是能到，不能到就是不能到。&lt;/p&gt;
&lt;p&gt;边权矩阵也并不是全部有用，这条边和任务有关系吗？没有，那就当它是空气。&lt;/p&gt;
&lt;p&gt;那什么会对我们产生限制？飞机数量。故容量由飞机数量决定。什么是我们要最大化的值？收益，故我们的费用是支出。&lt;/p&gt;
&lt;p&gt;如果飞机能在一个任务结束之后，在另一个任务开始之前飞过去，那就将两个任务连边，容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，费用为两点间花费。特别地，应将机场拆为大源点和大汇点，并在二者中任选其一拆点（和 T2 类似），好作出 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 的流量限制。&lt;/p&gt;
&lt;p&gt;还有一个小细节，对于一个任务的流量我们也要加以约束，不然碰到流入 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 流出 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 这种平衡但不合法的情况就不行了，所以对于任务我们也要按老套路拆点。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int inf = 1e18;
const int maxn = 405;
const int maxm = 4e5 + 5;
struct _ &amp;#123;
    int v, c, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int c1, int w1, int n1) &amp;#123;
        v = v1, c = c1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
struct __ &amp;#123;
    int x, y, l, r, c;
    bool operator&amp;lt; (const __ &amp;amp;q) const &amp;#123;
        return l &amp;lt; q.l;
    &amp;#125;
&amp;#125;;
_ u[maxm];
__ w[maxn];
bool inq[maxn];
int gs, gt, tot = 1;
int h[maxn], dis[maxn];
int fl[maxn], pre[maxn];
int n, m, k, T, res, fs, ft;
int t[maxn][maxn], f[maxn][maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool SPFA(int s, int n) &amp;#123;
    std::queue&amp;lt;int&amp;gt; q;
    std::fill(dis + 1, dis + n + 1, inf);
    q.push(s), dis[s] = 0, inq[s] = 1;
    pre[s] = inf, pre[gt] = 0, fl[s] = inf;
    while (!q.empty()) &amp;#123;
        int f = q.front();
        q.pop(), inq[f] = 0;
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            if (u[i].c == 0)
                continue;
            int v = u[i].v, w = u[i].w;
            if (dis[v] &amp;gt; dis[f] + w) &amp;#123;
                pre[v] = i ^ 1;
                dis[v] = dis[f] + w;
                fl[v] = min(fl[f], u[i].c);
                if (!inq[v])
                    inq[v] = 1, q.push(v);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return pre[gt];
&amp;#125;
void SSP(int s, int n) &amp;#123;
    int p, mn, d;
    while (SPFA(s, n)) &amp;#123;
        mn = fl[gt], d = 0;
        for (p = gt; p != s; p = u[pre[p]].v) &amp;#123;
            u[pre[p]].c += mn;
            u[pre[p] ^ 1].c -= mn;
            d += u[pre[p] ^ 1].w;
        &amp;#125;
        res += mn * d;
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y, int c, int w) &amp;#123;
    u[++tot] = _(y, c, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void addf(int x, int y, int c, int w) &amp;#123;
    add(x, y, c, w), add(y, x, 0, -w);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m), read(k), read(T);
    fs = 2 * m + 1, ft = 2 * m + 2;
    gs = 2 * m + 3, gt = 2 * m + 4;
    addf(gs, fs, k, 0), addf(ft, gt, k, 0);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j)
            read(t[i][j]);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j)
            read(f[i][j]);
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        read(w[i].x), read(w[i].y);
        read(w[i].l), read(w[i].r);
        read(w[i].c), ++w[i].x, ++w[i].y;
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        addf(i + m, i, 1, 0);
        if (t[1][w[i].x] &amp;lt;= w[i].l) &amp;#123;
            addf(fs, i + m, 1,
                f[1][w[i].x] - w[i].c);
        &amp;#125;
        if (w[i].r + t[w[i].y][1] &amp;lt;= T)
            addf(i, ft, 1, f[w[i].y][1]);
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            if (i != j &amp;amp;&amp;amp; w[i].r +
                t[w[i].y][w[j].x] &amp;lt;= w[j].l) &amp;#123;
                addf(i, j + m, 1,
                    f[w[i].y][w[j].x] - w[j].c);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    SSP(gs, gt);
    print(-res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-修车&#34;&gt;D. 修车&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3820/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3820/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;顾客数一定，所谓平均等待时间不过是个幌子，只需要求得最小等待总时间。&lt;/p&gt;
&lt;p&gt;技术人员不能同时修两辆车，&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 的范围又这么小，不往拆点想都难。可问题来了，怎么拆呢？&lt;/p&gt;
&lt;p&gt;我一开始的想法是，用点 &lt;span class=&#34;math inline&#34;&gt;\((i, j)\)&lt;/span&gt; 表示人 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 修车 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，但是这样建图怎样也无法达到目的。&lt;/p&gt;
&lt;p&gt;于是我添加了一个维度 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，用点 &lt;span class=&#34;math inline&#34;&gt;\((i, j, k)\)&lt;/span&gt; 表示人 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 修车 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，并且这是他修的倒数第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 辆车，这样建图就轻而易举了。但接下来就面临了一个问题：这数据范围跑不过。于是乎审视我们的点，其实 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 这个维度是可以被合并的，只保留 &lt;span class=&#34;math inline&#34;&gt;\((i, k)\)&lt;/span&gt;，因为不可能存在两辆车同时为人 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的倒数第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 辆车。&lt;/p&gt;
&lt;p&gt;故将大源点和每辆车连边，容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;；将每辆车 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 和每个 &lt;span class=&#34;math inline&#34;&gt;\((i, k)\)&lt;/span&gt; 连边，容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，费用为 &lt;span class=&#34;math inline&#34;&gt;\(T_{i, j}\times k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这里有一点点费用提前计算的意思，所以就直接将每个 &lt;span class=&#34;math inline&#34;&gt;\((i, j)\)&lt;/span&gt; 和大汇点连边，容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int inf = 1e18;
const int maxn = 1e4 + 5;
const int maxm = 1e6 + 5;
struct _ &amp;#123;
    int v, c, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int c1, int w1, int n1) &amp;#123;
        v = v1, c = c1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
_ u[maxm];
bool inq[maxn];
int n, m, x, res;
int gs, gt, tot = 1;
int h[maxn], dis[maxn];
int fl[maxn], pre[maxn];
int fun(int i, int j) &amp;#123;
    return n + (i - 1) * n + j;
&amp;#125;
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool SPFA(int s, int n) &amp;#123;
    std::queue&amp;lt;int&amp;gt; q;
    std::fill(dis + 1, dis + n + 1, inf);
    q.push(s), dis[s] = 0, inq[s] = 1;
    pre[s] = inf, pre[gt] = 0, fl[s] = inf;
    while (!q.empty()) &amp;#123;
        int f = q.front();
        q.pop(), inq[f] = 0;
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            if (u[i].c == 0)
                continue;
            int v = u[i].v, w = u[i].w;
            if (dis[v] &amp;gt; dis[f] + w) &amp;#123;
                pre[v] = i ^ 1;
                dis[v] = dis[f] + w;
                fl[v] = min(fl[f], u[i].c);
                if (!inq[v])
                    inq[v] = 1, q.push(v);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return pre[gt];
&amp;#125;
void SSP(int s, int n) &amp;#123;
    int p, mn, d;
    while (SPFA(s, n)) &amp;#123;
        mn = fl[gt], d = 0;
        for (p = gt; p != s; p = u[pre[p]].v) &amp;#123;
            u[pre[p]].c += mn;
            u[pre[p] ^ 1].c -= mn;
            d += u[pre[p] ^ 1].w;
        &amp;#125;
        res += mn * d;
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y, int c, int w) &amp;#123;
    u[++tot] = _(y, c, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void addf(int x, int y, int c, int w) &amp;#123;
    add(x, y, c, w), add(y, x, 0, -w);
    return;
&amp;#125;
int main() &amp;#123;
    read(m), read(n);
    gs = n * m + n + 1, gt = gs + 1;
    for (int i = 1; i &amp;lt;= n; ++i)
        addf(gs, i, 1, 0);
    for (int i = 1; i &amp;lt;= n * m; ++i)
        addf(i + n, gt, 1, 0);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            read(x);
            for (int k = 1; k &amp;lt;= n; ++k) &amp;#123;
                addf(i, fun(j, k),
                            1, x * k);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    SSP(gs, gt);
    printf(&amp;quot;%.2lf&amp;quot;, res * 1.0 / n);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e.-连连看&#34;&gt;E. 连连看&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3820/problem/5&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3820/problem/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;样例已经告诉了我们事实：小心删数，因为会有数同时出现在多组勾股数中。&lt;/p&gt;
&lt;p&gt;还是熟悉的单点 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 流量限制，故拆点为入点和出点，入点连大源点容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，出点连大汇点容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，满足条件的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 我们为了不整细节就暴力地连双向边然后跑最大费用最大流。&lt;/p&gt;
&lt;p&gt;由于双向边这个神必操作，最后的最大流和最大费用都会翻倍，输出的时候要减半。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int inf = 1e18;
const int maxn = 2e3 + 5;
const int maxm = 4e5 + 5;
struct _ &amp;#123;
    int v, c, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int c1, int w1, int n1) &amp;#123;
        v = v1, c = c1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
_ u[maxm];
bool inq[maxn];
int l, r, res, cnt;
bool f[maxn][maxn];
int gs, gt, tot = 1;
int h[maxn], dis[maxn];
int fl[maxn], pre[maxn];
int gcd(int x, int y) &amp;#123;
    return y ? gcd(y, x % y) : x;
&amp;#125;
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool SPFA(int s, int n) &amp;#123;
    std::queue&amp;lt;int&amp;gt; q;
    std::fill(dis + 1, dis + n + 1, -inf);
    q.push(s), dis[s] = 0, inq[s] = 1;
    pre[s] = inf, pre[gt] = 0, fl[s] = inf;
    while (!q.empty()) &amp;#123;
        int f = q.front();
        q.pop(), inq[f] = 0;
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            if (u[i].c == 0)
                continue;
            int v = u[i].v, w = u[i].w;
            if (dis[v] &amp;lt; dis[f] + w) &amp;#123;
                pre[v] = i ^ 1;
                dis[v] = dis[f] + w;
                fl[v] = min(fl[f], u[i].c);
                if (!inq[v])
                    inq[v] = 1, q.push(v);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return pre[gt];
&amp;#125;
void SSP(int s, int n) &amp;#123;
    int p, mn, d;
    while (SPFA(s, n)) &amp;#123;
        mn = fl[gt], d = 0;
        for (p = gt; p != s; p = u[pre[p]].v) &amp;#123;
            u[pre[p]].c += mn;
            u[pre[p] ^ 1].c -= mn;
            d += u[pre[p] ^ 1].w;
        &amp;#125;
        res += mn * d, cnt += mn;
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y, int c, int w) &amp;#123;
    u[++tot] = _(y, c, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void addf(int x, int y, int c, int w) &amp;#123;
    if (f[x][y])
        return;
    f[x][y] = f[y][x] = 1;
    add(x, y, c, w), add(y, x, 0, -w);
    return;
&amp;#125;
bool check(int x, int y) &amp;#123;
    int z = sqrt(x * x - y * y);
    if (z * z + y * y == x * x)
        return (gcd(z, y) == 1);
    return 0;
&amp;#125;
int main() &amp;#123;
    read(l), read(r);
    gs = 2 * r + 1, gt = 2 * r + 2;
    for (int i = l; i &amp;lt;= r; ++i) &amp;#123;
        addf(gs, i, 1, 0);
        addf(i + r, gt, 1, 0);
        for (int j = l; j &amp;lt; i; ++j) &amp;#123;
            if (check(i, j)) &amp;#123;
                addf(j, i + r, 1, i + j);
                addf(i, j + r, 1, i + j);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    SSP(gs, gt);
    print(cnt / 2, &amp;#39; &amp;#39;), print(res / 2, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;依我看，队名就叫「曾总说的都队」吧 🐵&lt;/p&gt;
</content>
        <category term="网络流" />
        <category term="费用流" />
        <updated>2023-07-20T09:57:23.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230717/</id>
        <title>学习小组</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230717/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;https://codeforces.com/problemset/problem/756/D&#34;&gt;CF756D Bacterial Melee&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;给我整不会了。怎么处理平方？怎么控制参与总学生最多？其中一定又有什么我不知道的奇技淫巧。&lt;/p&gt;
&lt;p&gt;一切尽在连边。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;处理学生与社团间的选择关系&lt;/p&gt;
&lt;p&gt;把学生向社团连边。学生只能选取某社团一次，故容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;一个学生选取某个社团并不会立即对最终花费带来可计算的影响，因为最终花费由该社团参与的 &lt;strong&gt;所有学生平方数&lt;/strong&gt; 决定。&lt;/p&gt;
故这一步我们先不慌计算社团的代价，只算参与社团本身需要的手续费 &lt;span class=&#34;math inline&#34;&gt;\(F_i\)&lt;/span&gt;。但是需要注意到手续费是财务部的收入而非支出，故实际边权为 &lt;span class=&#34;math inline&#34;&gt;\(-F_i\)&lt;/span&gt;，计算答案时视作负支出（明显不会因此而产生负环，因此可以放心加边）。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理学生的选择数量上限&lt;/p&gt;
&lt;p&gt;学生最多只能选择 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 个社团，为保证这一点，我们将源点向学生连边，容量为 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt;。&lt;/p&gt;
很明显，代价也不在此处计算，故令费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保证代价最小&lt;/p&gt;
&lt;p&gt;一开始，我认为最小费用最大流一定会找到最小费用，这个处理是无意义的，后来被打脸了。&lt;/p&gt;
&lt;p&gt;我们若欲在此图中寻得最小费用最大流，则 &lt;strong&gt;流一定最大&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而学生的流入容量为 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt;，为了满流，学生一定会尽可能多地选择社团，那么费用就会噌噌上涨。回到目标，即保证学生都选取至少一个社团时，支出最小。&lt;/p&gt;
&lt;p&gt;那我们只要给机会让学生可以只选取一个社团就好了（当然也可以是两个、三个……）。&lt;/p&gt;
&lt;p&gt;故让学生向终点连边，容量为 &lt;span class=&#34;math inline&#34;&gt;\(K-1\)&lt;/span&gt;，那么学生可以在选取了所有比较赚的社团后就不再选了，选这条边达到满流。同样因为该边流量只有 &lt;span class=&#34;math inline&#34;&gt;\(K-1\)&lt;/span&gt;，学生为了满流就只能再选至少一个社团，满足题意。&lt;/p&gt;
不选社团明显是没有手续费和社团支出的，故费用为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理社团本身支出&lt;/p&gt;
&lt;p&gt;问题在于如何处理 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 这个平方项。&lt;/p&gt;
&lt;p&gt;对于平方，我们可以联想到许多数学知识，譬如完全平方、平方差等，这里用到了平方差。&lt;/p&gt;
&lt;p&gt;假如原来的代价是 &lt;span class=&#34;math inline&#34;&gt;\(C_i\times x^2\)&lt;/span&gt;，又加入了一个人，那么费用会变成 &lt;span class=&#34;math inline&#34;&gt;\(C_i\times (x + 1)^2\)&lt;/span&gt;。由平方差得两者之差为 &lt;span class=&#34;math inline&#34;&gt;\(C_i\times (2\times x + 1)\)&lt;/span&gt;。当 &lt;span class=&#34;math inline&#34;&gt;\(x - 1\)&lt;/span&gt; 取为任意正整数时，&lt;span class=&#34;math inline&#34;&gt;\(2\times x + 1\)&lt;/span&gt; 即为所有奇数。&lt;/p&gt;
&lt;p&gt;所以我们将社团向汇点连边，连很多条边，每条边表示 &lt;strong&gt;新增一个团员的代价&lt;/strong&gt;，容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 表示一个新增团员，费用为从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 开始，一直到 &lt;span class=&#34;math inline&#34;&gt;\(2\times (N - 1) + 1\)&lt;/span&gt; 的所有奇数。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么问题到这里就算处理完了。直接上费用流即可。&lt;/p&gt;
&lt;p&gt;不知道我的代码遭遇了哪家宇宙射线的侵蚀，Dinic 死活过不去，换成 EK 就过了。同学们如果发现自己的 Dinic 过不了也可以试试换 EK。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int long long
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 405;
const int inf = 1e18;
const int maxm = 5e5 + 5;
struct _ &amp;#123;
    int v, c, w, n;
    _() &amp;#123;&amp;#125;
    _(int v1, int c1, int w1, int n1) &amp;#123;
        v = v1, c = c1, w = w1, n = n1;
    &amp;#125;
&amp;#125;;
_ u[maxm];
bool inq[maxn];
int n, m, k, x, res;
int gs, gt, tot = 1;
int c[maxn], f[maxn];
int h[maxn], dis[maxn];
int fl[maxn], pre[maxn];
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool SPFA(int s, int n) &amp;#123;
    std::queue&amp;lt;int&amp;gt; q;
    std::fill(dis + 1, dis + n + 1, inf);
    q.push(s), dis[s] = 0, inq[s] = 1;
    pre[s] = inf, pre[gt] = 0, fl[s] = inf;
    while (!q.empty()) &amp;#123;
        int f = q.front();
        q.pop(), inq[f] = 0;
        for (int i = h[f]; i; i = u[i].n) &amp;#123;
            if (u[i].c == 0)
                continue;
            int v = u[i].v, w = u[i].w;
            if (dis[v] &amp;gt; dis[f] + w) &amp;#123;
                pre[v] = i ^ 1;
                dis[v] = dis[f] + w;
                fl[v] = min(fl[f], u[i].c);
                if (!inq[v])
                    inq[v] = 1, q.push(v);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return pre[gt];
&amp;#125;
void SSP(int s, int n) &amp;#123;
    int p, mn, d;
    while (SPFA(s, n)) &amp;#123;
        mn = fl[gt], d = 0;
        for (p = gt; p != s; p = u[pre[p]].v) &amp;#123;
            u[pre[p]].c += mn;
            u[pre[p] ^ 1].c -= mn;
            d += u[pre[p] ^ 1].w;
        &amp;#125;
        res += mn * d;
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y, int c, int w) &amp;#123;
    u[++tot] = _(y, c, w, h[x]);
    h[x] = tot;
    return;
&amp;#125;
void readx(int &amp;amp;x) &amp;#123;
    char ch = nec();
    while (ch != &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch != &amp;#39;1&amp;#39;)
        ch = nec();
    x = ch - &amp;#39;0&amp;#39;;
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m), read(k);
    gs = n + m + 1, gt = gs + 1;
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        read(c[i]);
        for (int j = 0; j &amp;lt; n; ++j) &amp;#123;
            add(i + n, gt, 1,
                    (2 * j + 1) * c[i]);
            add(gt, i + n, 0,
                    -(2 * j + 1) * c[i]);
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= m; ++i)
        read(f[i]);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        add(gs, i, k, 0);
        add(i, gs, 0, 0);
        add(i, gt, k - 1, 0);
        add(gt, i, 0, 0);
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            readx(x);
            if (x == 1) &amp;#123;
                add(i, j + n, 1, -f[j]); // 负代价
                add(j + n, i, 0, f[j]);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    SSP(gs, gt);
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="网络流" />
        <category term="费用流" />
        <updated>2023-07-17T07:52:02.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230716-1/</id>
        <title>解题报告 匹配数</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230716-1/"/>
        <content type="html">&lt;p&gt;老题解批量补档。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3887/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3887/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;求出最小的、不含前导零的 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 位数 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 条限制，第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 条限制规定 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 位和 &lt;span class=&#34;math inline&#34;&gt;\(i + 1\)&lt;/span&gt; 位的关系（小于、大于、等于、不等于）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果正着 DP，也就是说先确定前面的数位再向后 DP，后面的数位就没办法决定选择哪个已有状态进行转移，因为我们没有办法仅凭上一位就得到哪个状态拥有最小的字典序。&lt;/p&gt;
&lt;p&gt;但是题解很风轻云淡地给出了一个我一辈子想不出来的 fix：倒着 DP。我们只要保证每次选取最小的可行的下一位即可，这恰好符合字典序的定义。&lt;/p&gt;
&lt;p&gt;记录前驱（or 后继？）后输出即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxm = 15;
const int maxn = 2e3 + 5;
int n;
char s[maxn];
int f[maxn][maxm];
void output(int i, int j) &amp;#123;
    print(j);
    if (i != n)
        output(i + 1, f[i][j]);
    return;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%s&amp;quot;, s + 1);
    n = strlen(s + 1) + 1;
    memset(f, -1, sizeof (f));
    for (int i = 0; i &amp;lt;= 9; ++i)
        f[n][i] = 0x3f3f3f3f;
    for (int i = n - 1; i; --i) &amp;#123;
        for (int j = 0; j &amp;lt;= 9; ++j) &amp;#123;
            if (s[i] == &amp;#39;&amp;gt;&amp;#39;) &amp;#123;
                for (int k = j - 1; k &amp;gt;= 0; --k) &amp;#123;
                    if (~f[i + 1][k])
                        f[i][j] = k;
                &amp;#125;
            &amp;#125;
            else if (s[i] == &amp;#39;&amp;lt;&amp;#39;) &amp;#123;
                for (int k = 9; k &amp;gt; j; --k) &amp;#123;
                    if (~f[i + 1][k])
                        f[i][j] = k;
                &amp;#125;
            &amp;#125;
            else if (s[i] == &amp;#39;=&amp;#39;) &amp;#123;
                if (~f[i + 1][j])
                    f[i][j] = j;
            &amp;#125;
            else &amp;#123;
                for (int k = 9; ~k; --k) &amp;#123;
                    if (k == j)
                        continue;
                    if (~f[i + 1][k])
                        f[i][j] = k;
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= 9; ++i)
        if (~f[1][i]) &amp;#123;
            output(1, i);
            break;
        &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <updated>2023-07-16T14:18:06.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230716/</id>
        <title>解题报告 染色</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230716/"/>
        <content type="html">&lt;p&gt;老题解批量补档。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3887/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3887/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个格子排成一排，你需要用至多 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 种颜色给这些格子染色，每个格子恰好染成某一种颜色，不需要每种颜色都用上。求有多少种染色方案满足相邻的同色格子不超过 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 对。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不妨将一对相邻同色格子称为同色对，将一串连续的相同颜色称作一段，那么最极端的情况下会有 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 段（即不存在同色对）。&lt;/p&gt;
&lt;p&gt;构造一段长度为 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 段序列（即不存在同色对）。此时将任意一段长度增加 1，则出现一对同色对。接下来，不论是选取长度为 2 的那一段，还是选取剩下的长度为 1 的段，将其长度增加 1，都会且仅会增加 1 对同色对。&lt;/p&gt;
&lt;p&gt;以此类推，进行 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 次「选取一段并将其长度增加 1」的操作，可得到刚好 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 个同色对，此时序列长度为 &lt;span class=&#34;math inline&#34;&gt;\(L + K\)&lt;/span&gt;，而 &lt;strong&gt;段数没有变化&lt;/strong&gt;，仍是一开始的 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;。 所以反过来，如果在长度为 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 的序列中存在 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 个同色对，那么段数为 &lt;span class=&#34;math inline&#34;&gt;\(N-K\)&lt;/span&gt;。&lt;del&gt;很难想象题解用「所以」两个字直接略过了上述推导过程&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;由此，我们只要考虑分别将序列任意分为非空的 &lt;span class=&#34;math inline&#34;&gt;\(N-K\sim N\)&lt;/span&gt; 段，就可以解决问题，隔板法可得将 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 分为 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 段的方案数为 &lt;span class=&#34;math inline&#34;&gt;\(C_{N-1}^{T-1}\)&lt;/span&gt;。在此基础上考虑染色，由乘法原理，将 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 段染色的方案为 &lt;span class=&#34;math inline&#34;&gt;\((m - 1)^{T - 1}\times M\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;取 &lt;span class=&#34;math inline&#34;&gt;\(T=N-K\sim N\)&lt;/span&gt; 并求和问题即解决。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e5 + 15;
const int mod = 998244353;
int fac[maxn];
int n, m, k, res;
inline int qkp(int x, int y) &amp;#123;
    int res = 1;
    while (y) &amp;#123;
        if (y &amp;amp; 1)
            (res *= x) %= mod;
        (x *= x) %= mod;
        y &amp;gt;&amp;gt;= 1;
    &amp;#125;
    return res;
&amp;#125;
inline int inv(int x) &amp;#123;
    return qkp(x, mod - 2);
&amp;#125;
inline int A(int n, int m) &amp;#123;
    return (fac[n] * inv(fac[n - m])) % mod;
&amp;#125;
inline int C(int n, int m) &amp;#123;
    return (A(n, m) * inv(A(m, m))) % mod;
&amp;#125;
int main() &amp;#123;
    read(n), read(m), read(k);
    fac[0] = 1;
    for (int i = 1; i &amp;lt;= n + 5; ++i)
        fac[i] = (fac[i - 1] * i) % mod;
    for (int i = n - k; i &amp;lt;= n; ++i) &amp;#123;
        (res += ((C(n - 1, i - 1) *
                qkp(m - 1, i - 1)) % mod
                * m) % mod) %= mod;
    &amp;#125;
    print(res, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="排列组合" />
        <updated>2023-07-16T14:09:39.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230527/</id>
        <title>中国剩余定理</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230527/"/>
        <content type="html">&lt;p&gt;upd on 04/27/25：发现该文没写完 &lt;img src=&#34;/em/qd.gif&#34; /&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;中国剩余定理&#34;&gt;中国剩余定理&lt;/h2&gt;
&lt;p&gt;给定下列关于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的一元同余方程组：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin {cases}
x \equiv a_1 \pmod {m_1}  \\
x \equiv a_2 \pmod {m_2}  \\
\quad \quad \vdots \\
x \equiv a_k \pmod {m_k}
\end {cases}
\]&lt;/span&gt; 其中对于 &lt;span class=&#34;math inline&#34;&gt;\(\forall \, 1\le i, j\le k\, (i\ne j)\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(m_i \, \bot\, m_j\)&lt;/span&gt;。下面是求解该方程组的具体方法：&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(M = \prod \limits _{i = 1} ^ k m_i, \, M_i=\dfrac M {m_i}\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(x = \sum \limits _{i = 1} ^k a_i\times M_i\times M_i ^{-1} \pmod M\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;其中，&lt;span class=&#34;math inline&#34;&gt;\(M_i^{-1}\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(M_i\)&lt;/span&gt; 在模 &lt;span class=&#34;math inline&#34;&gt;\(m_i\)&lt;/span&gt; 意义下的逆元（所以 &lt;span class=&#34;math inline&#34;&gt;\(M_i\times M_i^{-1}\)&lt;/span&gt; 的值并不是视觉上的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;）。&lt;/p&gt;
&lt;p&gt;正确性证明：对于 &lt;span class=&#34;math inline&#34;&gt;\(\forall \, i\in \{1, 2, \cdots, k\}\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(M_i\mid M\)&lt;/span&gt;；对于 &lt;span class=&#34;math inline&#34;&gt;\(\forall \, j\in \{1, 2, \cdots, k\}\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(j\ne i\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(m_i\mid \dfrac M{m_j}\)&lt;/span&gt; 即 &lt;span class=&#34;math inline&#34;&gt;\(m_i\mid M_j\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(M_j\equiv 0\pmod {m_i}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;又 &lt;span class=&#34;math inline&#34;&gt;\(m_i\mid M\)&lt;/span&gt; 那么就有 &lt;span class=&#34;math inline&#34;&gt;\(x\equiv a_i\cdot M_i\cdot {M_i}^{-1}\equiv a_i\pmod {n_i}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log n)\)&lt;/span&gt;。注意求解逆元时要用到 exgcd。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;int CRT(int k, int *a, int *m) &amp;#123;
    int M = 1, x = 0;
    static int M1[maxn], Mi[maxn]; 
    for (int i = 1; i &amp;lt;= k; ++i)
        M *= m[i];
    for (int i = 1; i &amp;lt;= k; ++i) &amp;#123;
        M1[i] = M / m[i];
        Mi[i] = getinv(M1[i], m[i]);
        (x += a[i] * M1[i] * Mi[i]) %= M;
    &amp;#125;
    return x;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;扩展中国剩余定理&#34;&gt;扩展中国剩余定理&lt;/h2&gt;
&lt;p&gt;设有如下同余方程组：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin {cases}
x \equiv a_1 \pmod {m_1} \\
x \equiv a_2 \pmod {m_2}
\end {cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;不保证 &lt;span class=&#34;math inline&#34;&gt;\(m_1 \, \bot \, m_2\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(x = m_1 \times p_1 + a_1 = m_2 \times p_2 + a_2\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(p_i \in \mathbb Z\)&lt;/span&gt;，则有 &lt;span class=&#34;math inline&#34;&gt;\(p_1 \times m_1 - p_2 \times m_2 = a_2 - a_1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(p_1\)&lt;/span&gt; 的值可以用 exgcd 求解，则原方程的解满足 &lt;span class=&#34;math inline&#34;&gt;\(x \equiv m_1\times p_1 + a_1 \pmod {M}\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(M=\operatorname{lcm}(m_1, m_2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这样我们就得到了一个新的同余方程。对于 &lt;span class=&#34;math inline&#34;&gt;\(k&amp;gt;2\)&lt;/span&gt; 的情况，我们不断合并两个同余方程即可得到最终同余方程。&lt;/p&gt;
&lt;p&gt;此时根据题目要求（一般求最小值即 &lt;span class=&#34;math inline&#34;&gt;\(m_k\times p_k + a_k\)&lt;/span&gt;）求解答案即可。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log n)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; 来自 exgcd。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;int calc(int m1, int a1, int m2, int a2) &amp;#123;
    int p1, p2;
    if (a2 - a1 &amp;lt; 0)
        swap(a1, a2), swap(m1, m2);
    int g = exgcd(m1, p1, m2, p2);
    if ((a2 - a1) % g)
        return -1;
    p1 *= (a2 - a1) / g, m2 /= g;
    p1 = (p1 % m2 + m2) % m2;
    return p1 * m1 + a1;
&amp;#125;
int exCRT(int k, int *a, int *m) &amp;#123;
    for (int i = 2; i &amp;lt;= k; ++i) &amp;#123;
        a[i] = calc(m[i - 1],
                a[i - 1], m[i], a[i]);
        if (a[i] == -1)
            return -1;
        m[i] = lcm(m[i - 1], m[i]);
    &amp;#125;
    return a[k] % m[k];
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-strange-way-to-express-integers&#34;&gt;D. Strange Way to Express Integers&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:1024/contest/3642/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:1024/contest/3642/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;板。但是要开 &lt;code&gt;__int128&lt;/code&gt;。不知道为什么智力只用开 &lt;code&gt;long long&lt;/code&gt; 就能跑过，我和揭哥就不行。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#define int __int128
namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
int n;
int a[maxn], m[maxn];
int gcd(int x, int y) &amp;#123;
    return y ? gcd(y, x % y) : x;
&amp;#125;
inline int lcm(int x, int y) &amp;#123;
    return x / gcd(x, y) * y;
&amp;#125;
inline void swap(int &amp;amp;x, int &amp;amp;y) &amp;#123;
    x ^= y ^= x ^= y;
    return;
&amp;#125;
int exgcd(int a, int &amp;amp;x, int b, int &amp;amp;y) &amp;#123;
    if (b == 0) &amp;#123;
        x = 1, y = 0;
        return a;
    &amp;#125;
    int u = exgcd(b, x, a % b, y);
    int t = x;
    x = y, y = t - (a / b) * y;
    return u;
&amp;#125;
inline int calc(int m1, int a1,
                    int m2, int a2) &amp;#123;
    int p1, p2;
    if (a2 - a1 &amp;lt; 0)
        swap(a1, a2), swap(m1, m2);
    int g = exgcd(m1, p1, m2, p2);
    if ((a2 - a1) % g)
        return -1;
    p1 *= (a2 - a1) / g, m2 /= g;
    p1 = (p1 % m2 + m2) % m2;
    return p1 * m1 + a1;
&amp;#125;
inline int exCRT(int k, int *a, int *m) &amp;#123;
    for (int i = 2; i &amp;lt;= k; ++i) &amp;#123;
        a[i] = calc(m[i - 1],
                a[i - 1], m[i], a[i]);
        if (a[i] == -1)
            return -1;
        m[i] = lcm(m[i - 1], m[i]);
    &amp;#125;
    return a[k] % m[k];
&amp;#125;
int main() &amp;#123;
    while (read(n)) &amp;#123;
        for (int i = 1; i &amp;lt;= n; ++i)
            read(m[i]), read(a[i]);
        print(exCRT(n, a, m), &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
#undef int&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="CRT / exCRT" />
        <updated>2023-05-27T09:12:13.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230509/</id>
        <title>二分图</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230509/"/>
        <content type="html">&lt;p&gt;你说得对，所以我打网络流。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;二分图&#34;&gt;二分图&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;二分图总体概念不难&lt;/del&gt;。主要是其应用广泛，需要注意什么样的题目可以联系到二分图上来。&lt;/p&gt;
&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;
&lt;p&gt;若图 &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt; 可将点集 &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; 分成两个互不相交的子集 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;，且每条边连接的两个点都满足一个在 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 中，一个在 &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; 中，则称 &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt; 为二分图。&lt;/p&gt;
&lt;p&gt;也就是说，如果一个图有任何一种分组方式满足：把图中的点分成两组，每一组的点两两之间没有连边，那么这个图就是二分图。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://pic.imgdb.cn/item/62c8cd2cf54cd3f9371c4818.jpg&#34; alt=&#34;每一组中的点两两之间没有连边，所以该图是二分图。&#34; /&gt;&lt;figcaption&gt;每一组中的点两两之间没有连边，所以该图是二分图。&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;性质&#34;&gt;性质&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二分图的每条边连接的点属于不同的集合。&lt;/p&gt;
&lt;p&gt;显然。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二分图中可能存在环，且长度一定为偶数。&lt;/p&gt;
&lt;p&gt;我们指定环中任意一个点，从该点出发，易得，经过奇数条边时到达另一个集合，反之回到该集合。因为路径是一个环，所以我们最后一定会回到起点所在集合，即经过偶数条边。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;判定&#34;&gt;判定&lt;/h3&gt;
&lt;p&gt;通常，我们使用图的深度优先遍历每一个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;显然，若已知点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 集，那么所有与 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 有连边的点 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 一定在 &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; 集（反之同理）。&lt;/p&gt;
&lt;p&gt;当然，很多图是有环的，不免会产生 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 已经被分组的情况。若此时 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 恰好在 &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; 集，皆大欢喜；若 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 也在 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 集，那么该图一定不为二分图。&lt;/p&gt;
&lt;p&gt;由于每个点最多搜索一次，时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;int col[maxn];
bool DFS(int x, int c) &amp;#123;
    col[x] = c;
    for (auto i : g[x]) &amp;#123;
        if (col[i]) &amp;#123;
            if (col[i] == c)
                return 0;
        &amp;#125;
        else if (!DFS(i, 3 - c))
            return 0;
    &amp;#125;
    return 1;
&amp;#125;
int main() &amp;#123; DFS(1, 1); &amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;厚颜无耻地推销一下 &lt;a href=&#34;https://www.luogu.com.cn/problem/U283873&#34;&gt;题目&lt;/a&gt;（（（&lt;/p&gt;
&lt;h3 id=&#34;匹配&#34;&gt;匹配&lt;/h3&gt;
&lt;p&gt;定义：对于一个二分图中的若干条边，若这些边没有任何公共点，则称这些边组成的集合 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 是数量为 &lt;span class=&#34;math inline&#34;&gt;\(|M|\)&lt;/span&gt; 的 &lt;strong&gt;匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://pic.imgdb.cn/item/62c8cd75f54cd3f9371c866f.jpg&#34; alt=&#34;图中红色边展示了一个数量为 4 的匹配&#34; /&gt;&lt;figcaption&gt;图中红色边展示了一个数量为 4 的匹配&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;容易看出，对于点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，只会存在 「有一条 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 集合内的边与 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 相连接」 和 「&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 连接的边均不在 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 集合内」 两种情况。也就是说，从 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 出发的 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 集合内的边，最多有 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 条。&lt;/p&gt;
&lt;p&gt;接下来，我们称 「有任何一条与之相连的边在匹配集合内」 的点为匹配点，「在匹配集合内的边」 为匹配边。&lt;/p&gt;
&lt;h3 id=&#34;完备匹配&#34;&gt;完备匹配&lt;/h3&gt;
&lt;p&gt;如果 &lt;span class=&#34;math inline&#34;&gt;\(|M|=\dfrac n2\)&lt;/span&gt;，即 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 恰好连接了 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 所有点，我们就称匹配 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 为 &lt;strong&gt;完备匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://pic.imgdb.cn/item/62c902d9f54cd3f93755faf9.jpg&#34; alt=&#34;一个完备匹配的例子&#34; /&gt;&lt;figcaption&gt;一个完备匹配的例子&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;比方说，现在我们知道一些男孩和女孩，他们之间有若干条互相喜欢的关系，我们把此关系抽象成一个二分图，如果每个人都能与自己喜欢的异性配对，那么我们认为这个关系网存在完备匹配。&lt;/p&gt;
&lt;p&gt;显然，完备匹配存在，仅当两集合大小相等。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;匈牙利算法&#34;&gt;匈牙利算法&lt;/h2&gt;
&lt;p&gt;匈牙利算法一般用于求解 &lt;span class=&#34;math inline&#34;&gt;\(\max\{|M|\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们将图上满足下列条件的路径 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 称为&lt;strong&gt;增广路&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 的起点和终点均是非匹配点&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 的起点和终点不在二分图的同一组内&lt;/li&gt;
&lt;li&gt;路径 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 经过的边按 &lt;strong&gt;非&lt;/strong&gt; 匹配边，匹配边，&lt;span class=&#34;math inline&#34;&gt;\(\cdots\)&lt;/span&gt;，&lt;strong&gt;非&lt;/strong&gt; 匹配边的规律交替。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终，&lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 会呈类 「&lt;span class=&#34;math inline&#34;&gt;\(\text Z\)&lt;/span&gt;」 形（值得一提的是，增广路不能经过一整个环，否则其长度将会因为二分图中只存在偶环而变为无穷大）。&lt;/p&gt;
&lt;p&gt;显然，非匹配边比匹配边的数量始终多 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;此时，我们对 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 上匹配的状态取反。也就是说，原来的非匹配边变成匹配边，匹配边变成非匹配边。这样做相当于是在匹配边集仍然合法的情况下将匹配边集的大小扩大了 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么增广路经过的边按非匹配边，匹配边，&lt;span class=&#34;math inline&#34;&gt;\(\cdots\)&lt;/span&gt;，非匹配边顺序交替的原因就很显而易见了。取反前，匹配边不可能连续出现；取反后，匹配边（即取反前的非匹配边）也不可能连续出现。&lt;/p&gt;
&lt;p&gt;而匈牙利算法的主要思路，就是反复寻找增广路，直到无法找到为止。&lt;/p&gt;
&lt;p&gt;这里就必须再提到一个性质：&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 为图 &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt; 的最大匹配，当且仅当无法在 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 的基础上找到增广路。&lt;/p&gt;
&lt;p&gt;证明如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有引理：对于图 &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt; 的任意两个匹配 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(M&amp;#39;\)&lt;/span&gt;，它们的 &lt;a href=&#34;https://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%B7%AE&#34;&gt;对称差&lt;/a&gt; &lt;span class=&#34;math inline&#34;&gt;\(M\Delta M&amp;#39;\)&lt;/span&gt; 中的每一个连通块都是一条链或一个包含边数为偶数的环。&lt;/p&gt;
&lt;p&gt;证明：&lt;/p&gt;
&lt;p&gt;根据对称差的定义，对于任意边 &lt;span class=&#34;math inline&#34;&gt;\(e\in M\Delta M&amp;#39;\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(e\)&lt;/span&gt; 要么是 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 中的一条匹配边，要么是 &lt;span class=&#34;math inline&#34;&gt;\(M&amp;#39;\)&lt;/span&gt; 中的一条匹配边，但不同时被 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(M&amp;#39;\)&lt;/span&gt; 包含。&lt;/p&gt;
&lt;p&gt;因为在同一个匹配中，任意两条匹配边不存在公共顶点，所以对于任意与 &lt;span class=&#34;math inline&#34;&gt;\(e\)&lt;/span&gt; 有公共顶点的匹配边 &lt;span class=&#34;math inline&#34;&gt;\(e&amp;#39;\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(e\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(e&amp;#39;\)&lt;/span&gt; 必然来自两个不同的匹配。&lt;/p&gt;
&lt;p&gt;由此可得，对于任意匹配点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的度数为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;所以，对称差中的每一个连通块都是链或环。&lt;/p&gt;
&lt;p&gt;对于其中的环，所有相邻的边必定来自不同的匹配，所以环包含的边数为偶数。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;必要性：当 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 为最大匹配时，无法找到 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 的增广路。&lt;/p&gt;
&lt;p&gt;我们已经知道了，找到某匹配的增广路 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 并将其匹配状态取反，可以使匹配大小加一。&lt;/p&gt;
&lt;p&gt;如果 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 存在增广路，则我们可以将其取反，得到一个比 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 大小更大的匹配。与 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 是最大匹配矛盾。&lt;/p&gt;
&lt;p&gt;所以一定不存在 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 的增广路。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;充分性：如果不存在 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 的增广路，&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt; 的最大匹配。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(M&amp;#39;\)&lt;/span&gt; 是一个比 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 更大的匹配。&lt;/p&gt;
&lt;p&gt;由引理得：&lt;/p&gt;
&lt;p&gt;在它们的对称差 &lt;span class=&#34;math inline&#34;&gt;\(M\Delta M&amp;#39;\)&lt;/span&gt; 中，连通块为链或环。&lt;/p&gt;
&lt;p&gt;其中，环包含边的数量为偶数，所以必然有同样多的边来自 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(M&amp;#39;\)&lt;/span&gt;。所以我们可以忽视这些环。&lt;/p&gt;
&lt;p&gt;由于 &lt;span class=&#34;math inline&#34;&gt;\(|M|&amp;lt;|M&amp;#39;|\)&lt;/span&gt;，存在至少一条链 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(|L|=k-1\)&lt;/span&gt;，包含 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 条 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 中的边，&lt;span class=&#34;math inline&#34;&gt;\(k+1\)&lt;/span&gt; 条来自于 &lt;span class=&#34;math inline&#34;&gt;\(M&amp;#39;\)&lt;/span&gt; 的边。&lt;/p&gt;
&lt;p&gt;显然，&lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 就是一条 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 的增广路，所以我们必然可以找到一条 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 的增广路，命题成立。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 「寻找增广路」 这个过程，我们使用 DFS 算法实现。&lt;/p&gt;
&lt;p&gt;对于点 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，若与 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 有连边的点 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 可匹配上 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，需要满足下列两个条件之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 是非匹配点，此时 &lt;span class=&#34;math inline&#34;&gt;\(x\to y\)&lt;/span&gt; 构成一条增广路，非匹配边的数量已经比匹配边数量多 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\((u,y)\)&lt;/span&gt; 是已匹配边，且 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt; 是未匹配但合法的边，此时 &lt;span class=&#34;math inline&#34;&gt;\(x\to y\to u\to v\)&lt;/span&gt; 构成一条增广路。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实现中，我们依次令 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 内 &lt;strong&gt;所有的非匹配点&lt;/strong&gt; 作为起始点 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 尝试找到任何一条增广路。当碰到任意非匹配点时结束（增广路判定：起点与终点均为非匹配点），否则向 &lt;strong&gt;该匹配点匹配的点&lt;/strong&gt; 继续搜索。&lt;/p&gt;
&lt;p&gt;也就是说，一层 DFS 会寻找一条非匹配边并作为起点，产生以下两种行为：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;该非匹配边终点为非匹配点，以该匹配边结束增广路。&lt;/li&gt;
&lt;li&gt;经过该非匹配边后还能再找到一条匹配边（若情况 1 不满足，显然一定能找到这样一条边），则在终点进行下一层 DFS，寻找下一条非匹配边。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2+nm)\)&lt;/span&gt;，但一般二分图题目的 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; 部间的连边偏稠密，所以简化为 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt;。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;bool Find(int x) &amp;#123;
    vis[x] = now; // 时间戳标记
    for (auto i : g[x]) &amp;#123;
        if (vis[i] == now) // 不经过访问过的 i
            continue;
        if (!mat[i] /* 非匹配点，即终点 */ ||
            (vis[mat[i]] != now /* mat[i] 未访问过，可以经过 */
            &amp;amp;&amp;amp; Find(mat[i]) /* 可找到增广路 */)) &amp;#123;
            mat[i] = x; // 匹配
            return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int Hungary(int n) &amp;#123;
    int res = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        ++now;
        res += Find(i);
    &amp;#125;
    return res;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一般来说，二分图题目对点、边、分组方法和匹配范围的识别较为模糊。但一般的二分图题目都会有一些特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结点能分为两组，且各组内结点间没有连边&lt;/li&gt;
&lt;li&gt;每个结点只能与一条边匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有时候，题目要求判定是否存在 「完备匹配」，也就是说，&lt;span class=&#34;math inline&#34;&gt;\(ans=n\)&lt;/span&gt;。即任意一次 &lt;code&gt;find(i)&lt;/code&gt; 返回 &lt;code&gt;false&lt;/code&gt; 时，完备匹配不存在。&lt;/p&gt;
&lt;p&gt;最后给出与匈牙利算法有关的两个问题：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;最小点覆盖：给定一个二分图，求出一个最小的点集，使得这个点集发出的所有边可以覆盖整个二分图。&lt;/p&gt;
&lt;p&gt;定理：该点集的大小是二分图的最大匹配包含的边数。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最大独立集：给定一个无向图，求出一个最大的点集，使得该点集中的所有点两两之间没有边相连。&lt;/p&gt;
&lt;p&gt;定理：当该无向图是二分图时，最大独立集的大小等于 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 减去最大匹配数。&lt;/p&gt;
&lt;p&gt;证明：由于最小点覆盖可以覆盖所有边，故不存在两个点，使得它们不属于最小点覆盖且有连边。&lt;/p&gt;
&lt;p&gt;所以，当去掉最小点覆盖后，剩余点两两之间没有连边。因为最小点覆盖大小就是最大匹配大小，故原命题成立。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;注意二分图的点和边是可以互相转化的，即，若发现信息集中在点上，也可以用二分图解决。匹配边的数量即最终参与匹配的点数较多的一方的匹配点数量。&lt;/p&gt;
&lt;p&gt;对于二分图建图的一个判断方式是，找冲突。找到彼此之间有冲突的两方，连边。这样就能建出二分图。当然要保证两方之间没有交集。&lt;/p&gt;
&lt;p&gt;所谓冲突，就是我们通常理解中的选了一个就不能选另一个。因此也可以通过冲突存在的形式思考建图方式。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-棋盘上的骑士&#34;&gt;A. 棋盘上的骑士&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3699/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3699/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这道题就是我们提到的边转化为点的情况。&lt;/p&gt;
&lt;p&gt;为棋盘上的每个格子编号。骑士走的是日字，所以我们要把周围每个格子日字方向八个格子都连上边。&lt;/p&gt;
&lt;p&gt;那要怎么将所有 &lt;span class=&#34;math inline&#34;&gt;\(n\times n\)&lt;/span&gt; 个格子分为有冲突的两方呢？注意到日字连接的两个格子一定奇偶性相异，故我们以奇偶性分类。&lt;/p&gt;
&lt;p&gt;被挖掉的格子无视即可，不能连任何边，否则该边都有可能被选。然后跑一个最大匹配就行。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 205;
const int maxm = 1e5 + 5;
const int fx[] = &amp;#123; 1, 1, -1, -1, 2, 2, -2, -2 &amp;#125;;
const int fy[] = &amp;#123; 2, -2, 2, -2, 1, -1, 1, -1 &amp;#125;;
int a[maxn][maxn];
int mat[maxm], vis[maxm];
std::vector&amp;lt;int&amp;gt; g[maxm];
int n, m, x, y, now, cnt, tot;
bool Find(int x) &amp;#123;
    vis[x] = now;
    for (auto i : g[x]) &amp;#123;
        if (vis[i] == now)
            continue;
        if (!mat[i] || (vis[mat[i]] != now
                            &amp;amp;&amp;amp; Find(mat[i]))) &amp;#123;
            mat[i] = x;
            return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int Hungary(int n) &amp;#123;
    int res = 0;
    for (int i = 1; i &amp;lt;= n; ++i)
        ++now, res += Find(i);
    return res;
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    while (m--) &amp;#123;
        read(x), read(y);
        a[x][y] = -1;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
            if (a[i][j] != -1 &amp;amp;&amp;amp; !((i + j) &amp;amp; 1))
                a[i][j] = ++cnt;
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
            if (a[i][j] == -1 || !((i + j) &amp;amp; 1))
                continue;
            a[i][j] = ++tot;
            for (int k = 0; k &amp;lt; 8; ++k) &amp;#123;
                int nx = i + fx[k];
                int ny = j + fy[k];
                if (nx &amp;lt; 1 || ny &amp;lt; 1 || nx &amp;gt; n ||
                    ny &amp;gt; n || a[nx][ny] == -1)
                    continue;
                add(a[i][j], a[nx][ny] + n * n);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    print(cnt + tot - Hungary(tot), &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-火力网&#34;&gt;B. 火力网&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3699/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3699/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里用到了二分图在地图上一个较为常用的分组方法。&lt;/p&gt;
&lt;p&gt;找到每行每列的「连通块」，满足在行上的连通块任意放一个炮台，炮台覆盖连通块内所有点，所有点均被连通块覆盖，列范围内同理。为连通块分别编号，则样例的情况可转化如下：&lt;/p&gt;
&lt;pre class=&#34;plain&#34;&gt;&lt;code&gt;/* 对于行 */        /* 对于列 */
  1 - 2 2            1 - 5 6
  3 3 3 3            1 3 5 6
  - - 4 4            - - 5 6
  5 5 5 5            2 4 5 6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若一个格子为空地，则将其在行 / 列范围内所属的连通块连边。这样，我们在选取该格后，就相当于选取了这条边，由于匹配边不共点，所以合法。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 25;
const int maxm = 1e5 + 5;
char a[maxn][maxn];
int mat[maxm], vis[maxm];
std::vector&amp;lt;int&amp;gt; g[maxm];
int n, x, y, now, cnt1, cnt2;
int t[maxn][maxn], p[maxn][maxn];
bool Find(int x) &amp;#123;
    vis[x] = now;
    for (auto i : g[x]) &amp;#123;
        if (vis[i] == now)
            continue;
        if (!mat[i] || (vis[mat[i]] != now
                            &amp;amp;&amp;amp; Find(mat[i]))) &amp;#123;
            mat[i] = x;
            return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int Hungary(int n) &amp;#123;
    int res = 0;
    for (int i = 1; i &amp;lt;= n; ++i)
        ++now, res += Find(i);
    return res;
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);
    for (int i = 1; i &amp;lt;= n; ++i)
        scanf(&amp;quot;%s&amp;quot;, a[i] + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
            if (a[i][j] == &amp;#39;X&amp;#39;)
                continue;
            if (a[i][j - 1] != &amp;#39;.&amp;#39;)
                t[i][j] = ++cnt1;
            else t[i][j] = t[i][j - 1];
        &amp;#125;
    &amp;#125;
    for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            if (a[i][j] == &amp;#39;X&amp;#39;)
                continue;
            if (a[i - 1][j] != &amp;#39;.&amp;#39;)
                p[i][j] = ++cnt2;
            else p[i][j] = p[i - 1][j];
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
            if (a[i][j] == &amp;#39;.&amp;#39;)
                add(t[i][j], p[i][j] + cnt1);
        &amp;#125;
    &amp;#125;
    print(Hungary(cnt1), &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-超级英雄-hero&#34;&gt;C. 超级英雄 Hero&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3699/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3699/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分析冲突。每个锦囊只能被一道题使用，一道题只能使用一个锦囊，故考虑将锦囊和题连边。题目要求连续解题最多，故以题目进行匈牙利。&lt;/p&gt;
&lt;p&gt;最后输出匹配数组即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e4 + 5;
int n, m, x, y, now, t;
int mat[maxn], vis[maxn];
std::vector&amp;lt;int&amp;gt; g[maxn];
bool Find(int x) &amp;#123;
    vis[x] = now;
    for (auto i : g[x]) &amp;#123;
        if (vis[i] == now)
            continue;
        if (!mat[i] || (vis[mat[i]] != now
                            &amp;amp;&amp;amp; Find(mat[i]))) &amp;#123;
            mat[i] = x, mat[x] = i;
            return 1;
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
int Hungary(int n) &amp;#123;
    int res = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        ++now;
        if (Find(i))
            ++res;
        else break;
    &amp;#125;
    return res;
&amp;#125;
void add(int x, int y) &amp;#123;
    g[x].push_back(y);
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(m);
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        read(x), read(y);
        add(i, x + m + 1);
        add(i, y + m + 1);
    &amp;#125;
    print(t = Hungary(m), &amp;#39;\n&amp;#39;);
    for (int i = 1; i &amp;lt;= t; ++i)
        print(mat[i] - m - 1, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;km-算法&#34;&gt;KM 算法&lt;/h2&gt;
&lt;p&gt;还没写…… 咕咕咕&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-ants&#34;&gt;A. Ants&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/554888#problem/A&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/554888#problem/A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;板板题。把黑蚂蚁和白蚂蚁按欧几里得距离连边后 KM 即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
typedef double db;
const db inf = 1e18;
const db eps = 1e-5;
const int maxn = 205;
int n, now;
db g[maxn][maxn];
db u[maxn], up[maxn];
int vis[maxn], mat[maxn];
int a[maxn][2], b[maxn][2];
db max(db x, db y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
db min(db x, db y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool eq(db x, db y) &amp;#123;
    return fabs(x - y) &amp;lt;= eps;
&amp;#125;
bool Find(int x) &amp;#123;
    vis[x] = now;
    for (int i = n + 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
        if (vis[i] == now)
            continue;
        if (eq(u[x] + u[i], g[x][i])) &amp;#123;
            vis[i] = now;
            if (!mat[i] || (vis[mat[i]] != now
                            &amp;amp;&amp;amp; Find(mat[i]))) &amp;#123;
                mat[i] = x;
                return 1;
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            up[i] = min(up[i],
                u[x] + u[i] - g[x][i]);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
void Solve(void) &amp;#123;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        u[i] = -inf;
        for (int j = n + 1; j &amp;lt;= 2 * n; ++j)
            u[i] = max(u[i], g[i][j]);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (;;) &amp;#123;
            ++now;
            for (int j = n + 1; j &amp;lt;= 2 * n; ++j)
                up[j] = inf;
            if (Find(i))
                break;
            db Delta = inf;
            for (int j = n + 1;
                            j &amp;lt;= 2 * n; ++j) &amp;#123;
                if (vis[j] != now)
                    Delta = min(Delta, up[j]);
            &amp;#125;            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                if (vis[j] == now)
                    u[j] -= Delta;
            &amp;#125;
            for (int j = n + 1;
                            j &amp;lt;= 2 * n; ++j) &amp;#123;
                if (vis[j] == now)
                    u[j] += Delta;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
db dist(int x1, int y1, int x2, int y2) &amp;#123;
    return sqrt((db)(x1 - x2) * (x1 - x2) +
                    (y1 - y2) * (y1 - y2));
&amp;#125;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i][0]), read(a[i][1]);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(b[i][0]), read(b[i][1]);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
            g[j][i + n] = -dist(a[i][0], a[i][1],
                            b[j][0], b[j][1]);
        &amp;#125;
    &amp;#125;
    Solve();
    for (int i = n + 1; i &amp;lt;= 2 * n; ++i)
        print(mat[i], &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h3 id=&#34;b.-奔小康赚大钱&#34;&gt;B. 奔小康赚大钱&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/554888#problem/B&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/554888#problem/B&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;板板题。把居民和房子连边即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 605;
const int inf = 0x3f3f3f3f;
int n, now, res;
int g[maxn][maxn];
int u[maxn], up[maxn];
int vis[maxn], mat[maxn];
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool Find(int x) &amp;#123;
    vis[x] = now;
    for (int i = n + 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
        if (vis[i] == now)
            continue;
        if (u[x] + u[i] == g[x][i]) &amp;#123;
            vis[i] = now;
            if (!mat[i] || (vis[mat[i]] != now
                            &amp;amp;&amp;amp; Find(mat[i]))) &amp;#123;
                mat[i] = x;
                return 1;
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            up[i] = min(up[i],
                u[x] + u[i] - g[x][i]);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
void Solve(void) &amp;#123;
    for (int i = 1; i &amp;lt;= 2 * n; ++i)
        mat[i] = u[i] = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        u[i] = -inf;
        for (int j = n + 1; j &amp;lt;= 2 * n; ++j)
            u[i] = max(u[i], g[i][j]);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (;;) &amp;#123;
            ++now;
            for (int j = n + 1; j &amp;lt;= 2 * n; ++j)
                up[j] = inf;
            if (Find(i))
                break;
            int Delta = inf;
            for (int j = n + 1;
                            j &amp;lt;= 2 * n; ++j) &amp;#123;
                if (vis[j] != now)
                    Delta = min(Delta, up[j]);
            &amp;#125;
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                if (vis[j] == now)
                    u[j] -= Delta;
            &amp;#125;
            for (int j = n + 1;
                            j &amp;lt;= 2 * n; ++j) &amp;#123;
                if (vis[j] == now)
                    u[j] += Delta;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    while(read(n)) &amp;#123;
        res = 0;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= n; ++j)
                read(g[i][j + n]);
        &amp;#125;
        Solve();
        for (int i = n + 1; i &amp;lt;= 2 * n; ++i)
            res += g[mat[i]][i];
        print(res, &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-going-home&#34;&gt;C. Going Home&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/554888#problem/C&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/554888#problem/C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;板板题。把人和房子按曼哈顿距离连边即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 205;
const int inf = 0x3f3f3f3f;
int g[maxn][maxn];
char s[maxn][maxn];
int u[maxn], up[maxn];
int h, w, n, m, now, res;
int vis[maxn], mat[maxn];
int a[maxn][2], b[maxn][2];
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool Find(int x) &amp;#123;
    vis[x] = now;
    for (int i = n + 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
        if (vis[i] == now)
            continue;
        if (u[x] + u[i] == g[x][i]) &amp;#123;
            vis[i] = now;
            if (!mat[i] || (vis[mat[i]] != now
                            &amp;amp;&amp;amp; Find(mat[i]))) &amp;#123;
                mat[i] = x;
                return 1;
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            up[i] = min(up[i],
                u[x] + u[i] - g[x][i]);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
void Solve(void) &amp;#123;
    for (int i = 1; i &amp;lt;= 2 * n; ++i)
        mat[i] = u[i] = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        u[i] = -inf;
        for (int j = n + 1; j &amp;lt;= 2 * n; ++j)
            u[i] = max(u[i], g[i][j]);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (;;) &amp;#123;
            ++now;
            for (int j = n + 1; j &amp;lt;= 2 * n; ++j)
                up[j] = inf;
            if (Find(i))
                break;
            int Delta = inf;
            for (int j = n + 1;
                            j &amp;lt;= 2 * n; ++j) &amp;#123;
                if (vis[j] != now)
                    Delta = min(Delta, up[j]);
            &amp;#125;
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                if (vis[j] == now)
                    u[j] -= Delta;
            &amp;#125;
            for (int j = n + 1;
                            j &amp;lt;= 2 * n; ++j) &amp;#123;
                if (vis[j] == now)
                    u[j] += Delta;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
int abs(int x) &amp;#123;
    return x &amp;gt;= 0 ? x : -x;
&amp;#125;
int dist(int x1, int y1, int x2, int y2) &amp;#123;
    return abs(x1 - x2) + abs(y1- y2);
&amp;#125;
void Init(void) &amp;#123;
    res = n = m = 0;
    memset(g, 0, sizeof (g));
    return;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;h, &amp;amp;w);
    while (h || w) &amp;#123;
        Init();
        for (int i = 1; i &amp;lt;= h; ++i) &amp;#123;
            scanf(&amp;quot;%s&amp;quot;, s[i] + 1);
            for (int j = 1; j &amp;lt;= w; ++j) &amp;#123;
                if (s[i][j] == &amp;#39;H&amp;#39;)
                    a[++n][0] = i, a[n][1] = j;
                else if (s[i][j] == &amp;#39;m&amp;#39;)
                    b[++m][0] = i, b[m][1] = j;
            &amp;#125;
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                g[i][j + n] = -dist(a[i][0],
                    a[i][1], b[j][0], b[j][1]);
            &amp;#125;
        &amp;#125;
        Solve();
        for (int i = n + 1; i &amp;lt;= 2 * n; ++i)
            res += g[mat[i]][i];
        print(-res, &amp;#39;\n&amp;#39;);
        scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;h, &amp;amp;w);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-cyclic-tour&#34;&gt;D. Cyclic Tour&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/554888#problem/D&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/554888#problem/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题意在讲什么啊，看了半天看不懂。&lt;/p&gt;
&lt;p&gt;给定一个有向图，找到若干个互不相交的环覆盖整个图，使得所有环上边权和最小，若找不到方案输出 -1。&lt;/p&gt;
&lt;p&gt;我们知道与这道题相类似的最小路径覆盖问题可以用二分图 + 拆点来解决。那么这里我们也可以小小地拆一拆点。把一个点拆成两个，一个作为起点，一个作为终点，两个点之间连双向边，这样该图就和原图等价。&lt;/p&gt;
&lt;p&gt;拆出来起点之间没有边，拆出来的终点之间也没有边，所以原图是二分图。&lt;/p&gt;
&lt;p&gt;不难发现，假设原图中的环上共有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个点、&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 条边，那么拆点后就会有 &lt;span class=&#34;math inline&#34;&gt;\(2\times x\)&lt;/span&gt; 个点和 &lt;span class=&#34;math inline&#34;&gt;\(2\times x\)&lt;/span&gt; 条边，其中 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 条边是点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 连向点 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;#39;\)&lt;/span&gt;（或反之）的边。&lt;/p&gt;
&lt;p&gt;需要匹配到剩余的实边（而非自己连向自己的虚边）共有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 条，左右部节点都有 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个，考虑设虚边边权为正无穷，进行最小权完美匹配（点和自己连边的操作保证了一定能找到解，不会进入死循环）。&lt;/p&gt;
&lt;p&gt;那么什么时候无解呢？当算法不得不选中虚边时，就说明找不到环了。所以我们判一下匹配有没有包含正无穷边即可。&lt;/p&gt;
&lt;p&gt;记得判重边！&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 205;
const int inf = 0x3f3f3f3f;
int g[maxn][maxn];
int u[maxn], up[maxn];
int vis[maxn], mat[maxn];
int n, m, x, y, now, res, w;
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool Find(int x) &amp;#123;
    vis[x] = now;
    for (int i = n + 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
        if (vis[i] == now)
            continue;
        if (u[x] + u[i] == g[x][i]) &amp;#123;
            vis[i] = now;
            if (!mat[i] || (vis[mat[i]] != now
                            &amp;amp;&amp;amp; Find(mat[i]))) &amp;#123;
                mat[i] = x;
                return 1;
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            up[i] = min(up[i],
                u[x] + u[i] - g[x][i]);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
void Solve(void) &amp;#123;
    for (int i = 1; i &amp;lt;= 2 * n; ++i)
        mat[i] = u[i] = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        u[i] = -inf;
        for (int j = n + 1; j &amp;lt;= 2 * n; ++j)
            u[i] = max(u[i], g[i][j]);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (;;) &amp;#123;
            ++now;
            for (int j = n + 1; j &amp;lt;= 2 * n; ++j)
                up[j] = inf;
            if (Find(i))
                break;
            int Delta = inf;
            for (int j = n + 1;
                            j &amp;lt;= 2 * n; ++j) &amp;#123;
                if (vis[j] != now)
                    Delta = min(Delta, up[j]);
            &amp;#125;
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                if (vis[j] == now)
                    u[j] -= Delta;
            &amp;#125;
            for (int j = n + 1;
                            j &amp;lt;= 2 * n; ++j) &amp;#123;
                if (vis[j] == now)
                    u[j] += Delta;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    while (read(n)) &amp;#123;
        read(m);
        res = 0;
        for (int i = 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= 2 * n; ++j) 
                g[i][j] = -inf;
        &amp;#125;
        while (m--) &amp;#123;
            read(x), read(y), read(w);
            g[x][y + n] = max(g[x][y + n], -w);
        &amp;#125;
        Solve();
        for (int i = n + 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
            if (g[mat[i]][i] &amp;lt;= -inf) &amp;#123;
                puts(&amp;quot;-1&amp;quot;);
                goto NoSol;
            &amp;#125;
            res += -g[mat[i]][i];
        &amp;#125;
        print(res, &amp;#39;\n&amp;#39;);
        NoSol: ;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e.-tour&#34;&gt;E. Tour&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/contest/554888#problem/E&#34; class=&#34;uri&#34;&gt;https://vjudge.net/contest/554888#problem/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;把上一题输入方式和数据范围改一改就好了。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 405;
const int inf = 0x3f3f3f3f;
int g[maxn][maxn];
int u[maxn], up[maxn];
int vis[maxn], mat[maxn];
int T, n, m, x, y, now, res, w;
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
int min(int x, int y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
bool Find(int x) &amp;#123;
    vis[x] = now;
    for (int i = n + 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
        if (vis[i] == now)
            continue;
        if (u[x] + u[i] == g[x][i]) &amp;#123;
            vis[i] = now;
            if (!mat[i] || (vis[mat[i]] != now
                            &amp;amp;&amp;amp; Find(mat[i]))) &amp;#123;
                mat[i] = x;
                return 1;
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            up[i] = min(up[i],
                u[x] + u[i] - g[x][i]);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
void Solve(void) &amp;#123;
    for (int i = 1; i &amp;lt;= 2 * n; ++i)
        mat[i] = u[i] = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        u[i] = -inf;
        for (int j = n + 1; j &amp;lt;= 2 * n; ++j)
            u[i] = max(u[i], g[i][j]);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (;;) &amp;#123;
            ++now;
            for (int j = n + 1; j &amp;lt;= 2 * n; ++j)
                up[j] = inf;
            if (Find(i))
                break;
            int Delta = inf;
            for (int j = n + 1;
                            j &amp;lt;= 2 * n; ++j) &amp;#123;
                if (vis[j] != now)
                    Delta = min(Delta, up[j]);
            &amp;#125;
            for (int j = 1; j &amp;lt;= n; ++j) &amp;#123;
                if (vis[j] == now)
                    u[j] -= Delta;
            &amp;#125;
            for (int j = n + 1;
                            j &amp;lt;= 2 * n; ++j) &amp;#123;
                if (vis[j] == now)
                    u[j] += Delta;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    read(T);
    while(T--) &amp;#123;
        read(n), read(m);
        res = 0;
        for (int i = 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= 2 * n; ++j) 
                g[i][j] = -inf;
        &amp;#125;
        while (m--) &amp;#123;
            read(x), read(y), read(w);
            g[x][y + n] = max(g[x][y + n], -w);
        &amp;#125;
        Solve();
        for (int i = n + 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
            if (g[mat[i]][i] &amp;lt;= -inf) &amp;#123;
                puts(&amp;quot;-1&amp;quot;);
                goto NoSol;
            &amp;#125;
            res += -g[mat[i]][i];
        &amp;#125;
        print(res, &amp;#39;\n&amp;#39;);
        NoSol: ;
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-导弹防御塔&#34;&gt;D. 导弹防御塔&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3699/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3699/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GM 说的好哇（指 &lt;em&gt;毛病多，一会儿分钟一会儿秒&lt;/em&gt;）。&lt;/p&gt;
&lt;p&gt;寻找冲突。一个敌人只能被一炮打死，故考虑&lt;/p&gt;
&lt;p&gt;但一个塔可以打很多炮，考虑拆点。&lt;/p&gt;
</content>
        <category term="二分图" />
        <updated>2023-05-09T12:48:00.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230314/</id>
        <title>分治</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230314/"/>
        <content type="html">&lt;p&gt;听说是 &lt;a href=&#34;http://222.180.160.110:61235/contest/3416&#34;&gt;分治场&lt;/a&gt;，想起了自己根本没学过分治（甚至从来不知道归并排序的原理 orz）就去听 CDQ 然后一头雾水的惨痛经历，不禁 PTSD 了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;a.-老板的又一道题&#34;&gt;A. 老板的又一道题&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/1&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是什么，有序表的最小和，切一下（所以和分治有什么关系啊）。&lt;/p&gt;
&lt;p&gt;首先对数组进行排序（我忘了 orz），然后在优先队列中填入 &lt;span class=&#34;math inline&#34;&gt;\(A_{1\sim n} + B_1\)&lt;/span&gt;。假设当前最小值为 &lt;span class=&#34;math inline&#34;&gt;\(A_i + B_j\)&lt;/span&gt;，则输出，弹出并填入 &lt;span class=&#34;math inline&#34;&gt;\(A_i + B_{j + 1}\)&lt;/span&gt;。因为 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 是单调的，所以我们填入的数（起码在输出时）是单调的。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e5 + 5;
struct _ &amp;#123;
    int u, i;
    _() &amp;#123;&amp;#125;
    _(int u1, int i1) &amp;#123;
        u = u1, i = i1;
    &amp;#125;
    bool operator&amp;lt; (const _ q) const &amp;#123;
        return u &amp;gt; q.u;
    &amp;#125;
&amp;#125;;
int n, cnt;
int a[maxn], b[maxn];
std::priority_queue&amp;lt;_&amp;gt; q;
int main() &amp;#123;
    read(n);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(a[i]);
    for (int i = 1; i &amp;lt;= n; ++i)
        read(b[i]);
    std::sort(a + 1, a + n + 1);
    std::sort(b + 1, b + n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        q.push(_(a[i] + b[1], 1));
    while (!q.empty()) &amp;#123;
        _ f = q.top();
        q.pop();
        print(f.u, &amp;#39; &amp;#39;);
        if (++cnt == n)
            break;
        _ t = f;
        t.u -= b[f.i];
        t.u += b[++t.i];
        q.push(t);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;b.-魔法石的诱惑&#34;&gt;B. 魔法石的诱惑&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这，这不是二分答案？到底和分治有什么关系啊。&lt;/p&gt;
&lt;p&gt;嘶，&lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 是 &lt;span class=&#34;math inline&#34;&gt;\(10^8\)&lt;/span&gt;，算一算 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的范围。不难发现 &lt;span class=&#34;math inline&#34;&gt;\(Q=\sum\limits_{i&amp;gt;1} \lfloor \dfrac n{5^i} \rfloor\)&lt;/span&gt;，当 &lt;span class=&#34;math inline&#34;&gt;\(n=5\times 10^8\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(\dfrac n5\)&lt;/span&gt; 就已经是 &lt;span class=&#34;math inline&#34;&gt;\(10^8\)&lt;/span&gt; 了，所以我们二分的左右边界应为 &lt;span class=&#34;math inline&#34;&gt;\([0,5\times 10^8]\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后 &lt;code&gt;check&lt;/code&gt; 的话我们就暴力除 &lt;span class=&#34;math inline&#34;&gt;\(5\)&lt;/span&gt; 计算答案（就像小奥一样），一次 &lt;code&gt;check&lt;/code&gt; 的时间复杂度是 &lt;span class=&#34;math inline&#34;&gt;\(\log_5\)&lt;/span&gt; 的，不会有问题。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
int q, l, mid, r = 5e18, res;
int check(int x) &amp;#123;
    int res = 0;
    while (x / 5)
        res += (x /= 5);
    return res;
&amp;#125;
int main() &amp;#123;
    read(q);
    while (l &amp;lt;= r) &amp;#123;
        int mid = (l + r) &amp;gt;&amp;gt; 1;
        if (check(mid) &amp;gt;= q) &amp;#123;
            res = mid;
            r = mid - 1;
        &amp;#125;
        else l = mid + 1;
    &amp;#125;
    if (check(res) == q)
        print(res);
    else puts(&amp;quot;No solution&amp;quot;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;c.-神族文字&#34;&gt;C. 神族文字&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/3&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我不理解？这到底和分治有什么关系？GM 不会是纯看标签拉题吧？标签又是哪个聪明打的？&lt;/p&gt;
&lt;p&gt;总而言之，言而总之，我们打一个 &lt;code&gt;map&lt;/code&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
using str = std::string;
str s1, s2, sl;
std::map&amp;lt;str, str&amp;gt; t;
int main() &amp;#123;
    for (;;) &amp;#123;
        std::getline(std::cin, sl);
        std::stringstream s(sl);
        if (s &amp;gt;&amp;gt; s1) &amp;#123;
            s &amp;gt;&amp;gt; s2;
            t[s2] = s1;
        &amp;#125;
        else break;
    &amp;#125;
    while (std::cin &amp;gt;&amp;gt; s1) &amp;#123;
        if (t.count(s1))
            std::cout &amp;lt;&amp;lt; t[s1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
        else puts(&amp;quot;eh&amp;quot;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;d.-逃亡&#34;&gt;D. 逃亡&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先注意到车车是自动驾驶的，就是说一个人下车过后车会自动往另一个人的方向跑。&lt;/p&gt;
&lt;p&gt;明显反复交接的话车会多跑很多路程，所以我们只交接一次。&lt;/p&gt;
&lt;p&gt;所以难点只是用未知数把最终速度表示出来（想起了物理实验题）。&lt;/p&gt;
&lt;p&gt;假设距离为 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，车速为 &lt;span class=&#34;math inline&#34;&gt;\(v_1\)&lt;/span&gt;，人速为 &lt;span class=&#34;math inline&#34;&gt;\(v_2\)&lt;/span&gt;，第一个人一直坐车坐到 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 路程，则最终时间为 &lt;span class=&#34;math inline&#34;&gt;\(\max\left\{ \dfrac x{v_1} + \dfrac {S - x}{v_2}, \dfrac x{v_1}+\dfrac {x - \dfrac x{v_1}\times v_2}{v_1 + v_2} + \dfrac {S-\dfrac x{v_1}\times v_2 - \dfrac {x - \dfrac x{v_1}\times v_2}{v_1 + v_2} \times v_2}{v_1}\right\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;有一个很明显的点，就是 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 越大，第一个人用时就越短，第二个人用时就越多。这个时候我们就可以二分 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，尽量使第一个人和第二个人用时接近（用时是一个关于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的分段函数，我们寻找其拐点），最终相同用时即为答案。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;因为从来不是很喜欢浮点数二分，采用了先整数二分再框范围取精确答案的方法。&lt;/p&gt;
&lt;p&gt;所以怎么又是二分？说好的分治场呢？&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
using db = double;
const db eps = 1e-2;
db res, ans = 1e18;
int s, v1, v2, l, mid, r;
db min(db x, db y) &amp;#123;
    return x &amp;lt; y ? x : y; 
&amp;#125;
db max(db x, db y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
bool check(int x) &amp;#123;
    db t1 = x * 1.0 / v1;
    db r1 = t1 + (s - x) * 1.0 / v2;
    db t2 = (x - t1 * v2) / (v1 + v2);
    db r2 = t1 + t2 + (s - t1 * v2 - t2 * v2) / v1;
    return r1 &amp;lt;= r2;
&amp;#125;
int main() &amp;#123;
    read(s), read(v2), read(v1);
    l = 0, r = s;
    while (l &amp;lt;= r) &amp;#123;
        mid = (l + r) &amp;gt;&amp;gt; 1;
        if (check(mid)) &amp;#123;
            res = (db)mid;
            r = mid - 1;
        &amp;#125;
        else l = mid + 1;
    &amp;#125;
    for (db i = res - 2; i &amp;lt;= res + 2; i += eps) &amp;#123;
        db t1 = i * 1.0 / v1;
        db r1 = t1 + (s - i) * 1.0 / v2;
        db t2 = (i - t1 * v2) / (v1 + v2);
        db r2 = t1 + t2 +
                (s - t1 * v2 - t2 * v2) / v1;
        ans = min(ans, max(r1, r2));
    &amp;#125;
    printf(&amp;quot;%.2lf&amp;quot;, ans);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;e.-剔除多余括号&#34;&gt;E. 剔除多余括号&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/5&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;为了套取数据理解题意，我用 python 交了一个 &lt;code&gt;print(input())&lt;/code&gt;，结果总司令在上，得到了 33pts 的高分…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;什么叫多余括号呢？括号前后的符号优先级小于等于括号中的符号，并且若括号内存在括号与括号前同级，则括号前不为 &lt;code&gt;-&lt;/code&gt; 或 &lt;code&gt;/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这样就可以了。我们将问题划分为若干个子问题，对每个括号内的内容进行相同方式的处理：对比括号内优先级最高的符号和括号前后符号的优先级，处理括号内的内容时若遇到括号，则递归地进行相似的处理。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;其实这个充其量只能算是模拟…… 跟分治并不是很有关系，和 CSP-J 2022 T3 有点像。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 260;
int n;
char s[maxn];
bool vis[maxn];
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
int Deal(int l, int r) &amp;#123;
    int res = 1;
    for (int i = l; i &amp;lt;= r; ++i) &amp;#123;
        if (s[i] == &amp;#39;+&amp;#39; || s[i] == &amp;#39;-&amp;#39;)
            res = max(res, 1);
        else if (s[i] == &amp;#39;*&amp;#39; || s[i] == &amp;#39;/&amp;#39;)
            res = 2;
        else if (s[i] == &amp;#39;(&amp;#39;) &amp;#123;
            int cnt = 1, j;
            for (j = i + 1; j &amp;lt;= r; ++j) &amp;#123;
                if (s[j] == &amp;#39;(&amp;#39;)
                    ++cnt;
                else if (s[j] == &amp;#39;)&amp;#39;)
                    --cnt;
                if (cnt == 0)
                    break;
            &amp;#125;
            cnt = Deal(i + 1, j - 1);
            int t = 1;
            int p1 = i - 1, p2 = j + 1;
            while (s[p1] == &amp;#39;(&amp;#39; || s[p1] == &amp;#39;)&amp;#39;)
                --p1;
            while (s[p2] == &amp;#39;(&amp;#39; || s[p2] == &amp;#39;)&amp;#39;)
                ++p2;
            if (s[p1] == &amp;#39;+&amp;#39; || s[p1] == &amp;#39;-&amp;#39;)
                t = max(t, 1);
            else t = max(t, 2);
            if (s[p2] == &amp;#39;+&amp;#39; || s[p2] == &amp;#39;-&amp;#39;)
                t = max(t, 1);
            else t = max(t, 2);
            if (t &amp;lt; cnt)
                vis[i] = vis[j] = 1;
            else if (t == cnt) &amp;#123;
                if (s[p1] != &amp;#39;-&amp;#39; &amp;amp;&amp;amp; s[p1] != &amp;#39;/&amp;#39;)
                    vis[i] = vis[j] = 1;
            &amp;#125;
            i = j;
        &amp;#125;
    &amp;#125;
    return res;
&amp;#125;
int main() &amp;#123;
    s[1] = &amp;#39;+&amp;#39;;
    scanf(&amp;quot;%s&amp;quot;, s + 2);
    n = strlen(s + 1) + 1;
    s[n] = &amp;#39;+&amp;#39;;
    Deal(1, n);
    for (int i = 2; i &amp;lt; n; ++i) &amp;#123;
        if (!vis[i])
            putchar(s[i]);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;f.-最接近点对问题&#34;&gt;F. 最接近点对问题&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/6&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分治典中典。&lt;/p&gt;
&lt;p&gt;我们将点按照横坐标排序，对点 &lt;span class=&#34;math inline&#34;&gt;\(1\sim n\)&lt;/span&gt; 进行分治。&lt;/p&gt;
&lt;p&gt;将求解区间包含的点分为两部分，假设左边部分和右边部分已经分别求解出了最近点对（出口即为求解区间仅包含两点，直接求出距离），考虑合并状态。则情况无非有三种：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;答案为左边部分的答案&lt;/li&gt;
&lt;li&gt;答案为右边部分的答案&lt;/li&gt;
&lt;li&gt;答案为左、右各选取一点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前两者是已知量，则我们求解出第三种情况，选择最小值即可。&lt;/p&gt;
&lt;p&gt;第三种情况有个很妙的处理方式：我们设前两种情况的答案较小者为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，设求解区间最靠中间的点为 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 为左边部分的点&lt;/p&gt;
&lt;p&gt;则由于我们对半二分，&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 一定是左边部分最靠右的点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于其余左边部分的节点：&lt;/p&gt;
若它们与 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 的横向距离已经大于等于 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，则它们与右边部分的点的横向距离会更大。连横向距离都已经大于等于当前最优解了，无需考虑纵向距离，筛除这部分点。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于右边部分的节点：&lt;/p&gt;
&lt;p&gt;若它们与 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 的横向距离已经大于等于 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，则它们与更左边的其他左边部分节点的横向距离会更大，故筛除这部分点。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 为右边部分的点&lt;/p&gt;
&lt;p&gt;同理。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，我们只用考虑求解区间内与 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 的横向距离小于 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的点。&lt;/p&gt;
&lt;p&gt;在筛选出这些点后，我们如何进行进一步的处理呢？答案是，&lt;strong&gt;枚举&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们枚举每一对点，计算它们间的距离。若比答案小，则更新答案。&lt;/p&gt;
&lt;p&gt;那这复杂度也太神奇了。所以我们给出一个同样神奇的优化：按纵坐标递增对筛选出的点排序。当二重循环筛选时，若当前第一层循环 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 与第二层循环 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的纵向距离大于等于了当前最小答案，就可以将第二层循环 &lt;code&gt;break&lt;/code&gt; 了。因为纵坐标单调，继续枚举距离会继续增加，离答案更远。&lt;/p&gt;
&lt;p&gt;那看起来复杂度还是很神奇，理论上来说应该是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2\log n)\)&lt;/span&gt; 的呀？&lt;/p&gt;
&lt;p&gt;考虑第一层循环 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。对于点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，有哪些 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 可以满足它的要求，从而被枚举到呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于点对无序，所以 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 从 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 开始枚举，所以 &lt;span class=&#34;math inline&#34;&gt;\(y_j&amp;gt;y_i\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;由于筛选条件，&lt;span class=&#34;math inline&#34;&gt;\(|x_i-x_m|&amp;lt; d\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(|x_j-x_m|&amp;lt; d\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;由于 &lt;code&gt;break&lt;/code&gt; 条件，&lt;span class=&#34;math inline&#34;&gt;\(y_j-y_i&amp;lt; d\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;合并一下就是，&lt;span class=&#34;math inline&#34;&gt;\(|x_i-x_j|\le 2\times d\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(0\le y_j - y_i \le d\)&lt;/span&gt;。那么我们可以画出一个底为 &lt;span class=&#34;math inline&#34;&gt;\(2\times d\)&lt;/span&gt;，高为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的矩形，且它的中轴线为 &lt;span class=&#34;math inline&#34;&gt;\(x=x_m\)&lt;/span&gt;，中轴线左右两边均为 &lt;span class=&#34;math inline&#34;&gt;\(d\times d\)&lt;/span&gt; 的正方形。&lt;/p&gt;
&lt;p&gt;若任意两个点同在左边部分或同在右边部分，那么这一对点的贡献已经在分治时计算完成了，所以一定不会比 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 小。&lt;/p&gt;
&lt;p&gt;有一个很妙的结论：满足条件的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 在矩形的左半边和右半边最多只有三个。&lt;/p&gt;
&lt;p&gt;为什么？同一部分中，任意两个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的距离至少为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;。那么四个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，距离都为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;，那么正好就是整个左半边的正方形。别忘了一点，&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 需满足的三个条件都是严格小于，所以不能碰到整个矩形的边界，所以一个部分中最多只能存在三个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么实际上看似 &lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 的枚举，在多个优化下就变成了 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;。再加上对筛选出的点纵坐标排序的时间，总体时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2 n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using db = double;
const db inf = 1e18;
const int maxn = 6e4 + 5;
struct _ &amp;#123; db x, y; &amp;#125;;
int n;
_ a[maxn];
db dis(db x1, db y1, db x2, db y2) &amp;#123;
    return sqrt((x1 - x2) * (x1 - x2) +
                (y1 - y2) * (y1 - y2));
&amp;#125;
db min(db x, db y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
db abs(db x) &amp;#123;
    return x &amp;gt;= 0 ? x : -x;
&amp;#125;
db Solu(int l, int r) &amp;#123;
    if (l == r)
        return inf;
    if (l + 1 == r)
        return dis(a[l].x, a[l].y, a[r].x, a[r].y);
    int mid = (l + r) &amp;gt;&amp;gt; 1;
    db d = min(Solu(l, mid), Solu(mid + 1, r));
    std::vector&amp;lt;_&amp;gt; t;
    for (int i = l; i &amp;lt;= r; ++i) &amp;#123;
        if (abs(a[i].x - a[mid].x) &amp;lt; d)
            t.push_back(a[i]);
    &amp;#125;
    std::sort(t.begin(), t.end(),
        [&amp;amp;](_ x, _ y) &amp;#123; return x.y &amp;lt; y.y; &amp;#125;);
    for (int i = 0; i &amp;lt; (int)t.size(); ++i) &amp;#123;
        for (int j = i + 1; j &amp;lt; (int)t.size(); ++j) &amp;#123;
            if (t[j].y - t[i].y &amp;gt;= d)
                break;
            d = min(d, dis(t[i].x, t[i].y,
                                t[j].x, t[j].y));
        &amp;#125;
    &amp;#125;
    return d;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);
    for (int i = 1; i &amp;lt;= n; ++i)
        scanf(&amp;quot;%lf %lf&amp;quot;, &amp;amp;a[i].x, &amp;amp;a[i].y);
    std::sort(a + 1, a + n + 1,
        [&amp;amp;](_ x, _ y) &amp;#123; return x.x &amp;lt; y.x; &amp;#125;);
    printf(&amp;quot;%.2lf\n&amp;quot;, Solu(1, n) / 2);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;考虑一个问题。代码的时间复杂度有两个 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;，这是极不好的（will be fixed）。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;g.-残缺棋盘问题&#34;&gt;G. 残缺棋盘问题&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/7&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先考虑一个有趣的问题：&lt;span class=&#34;math inline&#34;&gt;\(4^n-1\)&lt;/span&gt; 一定被 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 整除吗？&lt;/p&gt;
&lt;p&gt;一个简单的方法是使用数学归纳法进行证明，其思想也会在这道题中体现。&lt;/p&gt;
&lt;p&gt;不过还有另一个方法：&lt;span class=&#34;math inline&#34;&gt;\(4^n-1=(3+1)^n-1\)&lt;/span&gt;，使用二项式定理则有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
(3+1)^n-1=\sum_{i=0}^n {n\choose i} \times 3^{n-i}\times 1^i - 1
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;不难发现除 &lt;span class=&#34;math inline&#34;&gt;\(i=n\)&lt;/span&gt; 时，前面每一项都有因子 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt;，而当 &lt;span class=&#34;math inline&#34;&gt;\(i=n\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\({n\choose n}\times 3^0\times 1^n=1\)&lt;/span&gt;，与后面的 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 抵消，故得证。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;考虑将棋盘划分为若干个 &lt;span class=&#34;math inline&#34;&gt;\(2\times 2\)&lt;/span&gt; 的 1 级区域。对于缺口所在的 1 级区域，我们使用一个刚好贴合的三格板将其补齐成为一个完整的 1 级区域。&lt;/p&gt;
&lt;p&gt;我们称包含四个完整的 &lt;span class=&#34;math inline&#34;&gt;\(2\times 2\)&lt;/span&gt; 的 1 级区域的 &lt;span class=&#34;math inline&#34;&gt;\(4\times 4\)&lt;/span&gt; 的区域为 2 级区域，对于包含了我们刚刚补齐的 1 级区域的 2 级区域，我们将最中间的四个格子视为一个 1 级区域并填充，接下来剩余的 3 个完整 1 级区域为各自失去一个能填充的格子，我们选取对应的三格板填充即可。&lt;/p&gt;
&lt;p&gt;对于一个 &lt;span class=&#34;math inline&#34;&gt;\(8\times 8\)&lt;/span&gt; 的 3 级区域，若其包含我们填充完毕的 2 级区域，我们将最中间 &lt;span class=&#34;math inline&#34;&gt;\(2\times 2\)&lt;/span&gt; 的格子视为一个 1 级区域并填充。接下来，剩余的 3 个完整的 2 级区域成为缺失 1 个格子的 2 级区域，按之前的方法填充即可。&lt;/p&gt;
&lt;p&gt;以此类推即可递归地填充完成整个棋盘。但现在又来了一个问题：这道题没有 SPJ。根据样例可知，填充规则是由外到内，中、左上、左下、右上、右下，我们按照此顺序进行分治递归即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 105;
int n, x, y, cnt;
int t[maxn][maxn];
void getColor(int c, int r, int l, int x, int y) &amp;#123;
    if (l == 2) &amp;#123;
        ++cnt;
        for (int i = c; i &amp;lt;= c + 1; ++i) &amp;#123;
            for (int j = r; j &amp;lt;= r + 1; ++j) &amp;#123;
                if (i != x || j != y)
                    t[i][j] = cnt;
            &amp;#125;
        &amp;#125;
        return;
    &amp;#125;
    l /= 2;
    if (x - c &amp;lt; l) &amp;#123;
        if (y - r &amp;lt; l) &amp;#123;
            getColor(c + l - 1, r + l - 1,
                        2, c + l - 1, r + l - 1);
            getColor(c, r, l, x, y);
            getColor(c + l, r, l, c + l, r + l - 1);
            getColor(c, r + l, l, c + l - 1, r + l);
            getColor(c + l, r + l, l, c + l, r + l);
        &amp;#125;
        else &amp;#123;
            getColor(c + l - 1, r + l - 1,
                        2, c + l - 1, r + l);
            getColor(c, r, l, c + l - 1, r + l - 1);
            getColor(c + l, r, l, c + l, r + l - 1);
            getColor(c, r + l, l, x, y);
            getColor(c + l, r + l, l, c + l, r + l);
        &amp;#125;
    &amp;#125;
    else &amp;#123;
        if (y - r &amp;lt; l) &amp;#123;
            getColor(c + l - 1, r + l - 1,
                            2, c + l, r + l - 1);
            getColor(c, r, l, c + l - 1, r + l - 1);
            getColor(c + l, r, l, x, y);
            getColor(c, r + l, l, c + l - 1, r + l);
            getColor(c + l, r + l, l, c + l, r + l);
        &amp;#125;
        else &amp;#123;
            getColor(c + l - 1, r + l - 1,
                            2, c + l, r + l);
            getColor(c, r, l, c + l - 1, r + l - 1);
            getColor(c + l, r, l, c + l, r + l - 1);
            getColor(c, r + l, l, c + l - 1, r + l);
            getColor(c + l, r + l, l, x, y);
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
int main() &amp;#123;
    read(n), read(x), read(y);
    getColor(1, 1, n, x, y);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= n; ++j)
            print(t[i][j], &amp;#39; &amp;#39;);
        putchar(&amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;h.-tricky-function&#34;&gt;H. Tricky Function&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/3416/problem/8&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/3416/problem/8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GM 提示了这道题就是平面最近点对。豁然开朗。&lt;/p&gt;
&lt;p&gt;不妨将 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 视作 &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt;，将 &lt;span class=&#34;math inline&#34;&gt;\(\sum_{k=1}^i a_k\)&lt;/span&gt; 视作 &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt;，则直接求解平面最近点对即可。&lt;/p&gt;
</content>
        <category term="分治" />
        <updated>2023-03-13T18:33:31.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230203/</id>
        <title>美丽的柠檬花！</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230203/"/>
        <content type="html">&lt;p&gt;Solution to &lt;a href=&#34;https://codeforces.com/problemset/problem/1733/D2&#34;&gt;CF1733D2 Zero-One (Hard Version)&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;没做过简单版本，模拟赛上遇到，乍一看是个贪心，但贪心思维太弱想不到怎么贪。所以思考其他方法。&lt;/p&gt;
&lt;p&gt;下文称同时取反 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 的一次操作为「取反 &lt;span class=&#34;math inline&#34;&gt;\((a_i, a_j)\)&lt;/span&gt;」，称 &lt;span class=&#34;math inline&#34;&gt;\(a_i=b_i\)&lt;/span&gt; 的状态为「匹配」。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;思维关键点&#34;&gt;思维关键点&lt;/h3&gt;
&lt;p&gt;若我们想要将 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_j)\)&lt;/span&gt; 取反，我们可以怎么做？&lt;/p&gt;
&lt;p&gt;不难发现，分 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 相邻和不相邻两种情况：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 相邻：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;直接取反，代价为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;寻找到一个与 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 都不相邻的 &lt;span class=&#34;math inline&#34;&gt;\(a_k\)&lt;/span&gt;，先将 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_k)\)&lt;/span&gt; 取反，再将 &lt;span class=&#34;math inline&#34;&gt;\((a_j,a_k)\)&lt;/span&gt; 取反，代价为 &lt;span class=&#34;math inline&#34;&gt;\(2\times y\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(a_j\)&lt;/span&gt; 不相邻：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;直接取反，代价为 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;将 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_{i + 1}),(a_{i + 1}, a_{i + 2}),\cdots,(a_{j - 1}, a_{j})\)&lt;/span&gt; 取反，代价为 &lt;span class=&#34;math inline&#34;&gt;\((j - i)\times x\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来考虑另一个问题：我们要取反哪些 &lt;span class=&#34;math inline&#34;&gt;\((a_i,a_j)\)&lt;/span&gt; 呢？&lt;/p&gt;
&lt;p&gt;假设现在有 &lt;span class=&#34;math inline&#34;&gt;\(a_p\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(b_p\)&lt;/span&gt; 不匹配，&lt;span class=&#34;math inline&#34;&gt;\(a_q\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(b_q\)&lt;/span&gt; 不匹配，那么我们肯定选择将 &lt;span class=&#34;math inline&#34;&gt;\((a_p,a_q)\)&lt;/span&gt; 取反。&lt;/p&gt;
&lt;p&gt;原因很简单，假设有 &lt;span class=&#34;math inline&#34;&gt;\(a_k=b_k\)&lt;/span&gt;，如果我们将 &lt;span class=&#34;math inline&#34;&gt;\((a_p,a_k)\)&lt;/span&gt; 取反，那么 &lt;span class=&#34;math inline&#34;&gt;\(a_k\ne b_k\)&lt;/span&gt;，我们需要额外的一次与 &lt;span class=&#34;math inline&#34;&gt;\(a_k\)&lt;/span&gt; 有关的操作将其复原。如果我们挑选一个 &lt;span class=&#34;math inline&#34;&gt;\(a_l=b_l\)&lt;/span&gt;，并将 &lt;span class=&#34;math inline&#34;&gt;\((a_k,a_l)\)&lt;/span&gt; 取反，那么 &lt;span class=&#34;math inline&#34;&gt;\(a_l\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(b_l\)&lt;/span&gt; 又会不匹配，又需要一次操作；如果挑选一个 &lt;span class=&#34;math inline&#34;&gt;\(a_l\ne b_l\)&lt;/span&gt;，并将 &lt;span class=&#34;math inline&#34;&gt;\((a_k,a_l)\)&lt;/span&gt; 取反，那么为什么不能在一开始就将 &lt;span class=&#34;math inline&#34;&gt;\((a_p,a_l)\)&lt;/span&gt; 取反呢？此时的 &lt;span class=&#34;math inline&#34;&gt;\(a_k\)&lt;/span&gt; 相当于一个中继，而这种情况我们已经在取反 &lt;span class=&#34;math inline&#34;&gt;\((a_p,a_l)\)&lt;/span&gt; 时考虑到了。&lt;/p&gt;
&lt;p&gt;也就是说，我们每次取反 &lt;strong&gt;只&lt;/strong&gt; 选择两个无法与 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 匹配的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么，有没有一种情况，让我们无法选择两个无法匹配的值呢？&lt;/p&gt;
&lt;p&gt;那就是不匹配的值的数量有奇数个，才会让我们两个两个选的时候有元素落单。&lt;/p&gt;
&lt;p&gt;不妨思考一次取反操作所有可能的情况（假设不受上面的结论限制）：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;取反一个匹配值和一个不匹配值&lt;/p&gt;
此时匹配值变为非匹配，不匹配值变为匹配，不匹配的元素总数不变。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取反两个不匹配值&lt;/p&gt;
两个不匹配值都变为匹配，不匹配元素的总数量增加 &lt;span class=&#34;math inline&#34;&gt;\(-2\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取反两个匹配值&lt;/p&gt;
&lt;p&gt;两个匹配值都变为非匹配，不匹配元素的总数量增加 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上，一次操作对不匹配元素总数带来的更改只可能为 &lt;span class=&#34;math inline&#34;&gt;\(0,2,-2\)&lt;/span&gt;，均为偶数。当不匹配元素为奇数时，必定无法将其更改至刚好为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。此时输出 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们上面结论的可实现性也得到了保障：只取反两个不匹配的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，不会有元素落单。&lt;/p&gt;
&lt;p&gt;下文记从前往后第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个与 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 不匹配的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的下标为 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;确定实现方法&#34;&gt;确定实现方法&lt;/h3&gt;
&lt;p&gt;发现 &lt;span class=&#34;math inline&#34;&gt;\(\sum n\le 5\times 10^3\)&lt;/span&gt;，确定算法复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;首先不难想到暴力搜索，每次枚举将哪一对 &lt;span class=&#34;math inline&#34;&gt;\((d_i, d_j)\)&lt;/span&gt; 取反。&lt;/p&gt;
&lt;p&gt;亦或是使用 &lt;code&gt;bitset&lt;/code&gt; 记录哪些非匹配值已被取反（被取反为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，否则为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;），枚举数对暴力 DP 更新最小值。&lt;/p&gt;
&lt;p&gt;但以上两种方法铁定超时。&lt;/p&gt;
&lt;p&gt;受到上面两种方法的启发，扩展思维，我们发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;取反操作的顺序不会影响最终答案。&lt;/p&gt;
因为每个数被取反的次数一定，最终结果也就一定。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们可以通过 DP 的方式寻找最小值。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设计状态。&lt;/p&gt;
&lt;p&gt;不妨考虑让问题麻烦起来的是什么，对于 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(d_j\)&lt;/span&gt; 不相邻时的取反，我们无法得知 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; 需要哪一个 &lt;span class=&#34;math inline&#34;&gt;\(d_j\)&lt;/span&gt;（而对于 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(d_j\)&lt;/span&gt; 相邻的情况，&lt;span class=&#34;math inline&#34;&gt;\(d_j\)&lt;/span&gt; 就是 &lt;span class=&#34;math inline&#34;&gt;\(d_{i + 1}\)&lt;/span&gt;，位置是确定的）。&lt;/p&gt;
&lt;p&gt;但我们同时也发现，与相邻时的代价不同，不相邻时的操作代价与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的具体值无关。&lt;/p&gt;
&lt;p&gt;所以不妨用 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示，已枚举到 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt;，前面有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个数需要后面 &lt;strong&gt;与它们不相邻的数&lt;/strong&gt; 用以和它们配对取反。&lt;/p&gt;
&lt;p&gt;假设已枚举到 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt;，当前面有 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 个数需要配对时，有以下的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(s = 1\)&lt;/span&gt;，即只有一个数需要配对时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果这个数是 &lt;span class=&#34;math inline&#34;&gt;\(d_{i - 1}\)&lt;/span&gt;，那么代价为 &lt;span class=&#34;math inline&#34;&gt;\(2\times y\)&lt;/span&gt;。&lt;/p&gt;
注意，这里只枚举了需要不相邻的数来配对的情况，相邻的情况将会另外计算，所以代价不能为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;否则，代价为 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(s&amp;gt;1\)&lt;/span&gt; 时，即有多个数需要配对时：&lt;/p&gt;
&lt;p&gt;不管 &lt;span class=&#34;math inline&#34;&gt;\(d_{i-1}\)&lt;/span&gt; 是否需要配对，我们都不选它。因为选它的代价是 &lt;span class=&#34;math inline&#34;&gt;\(2\times y\)&lt;/span&gt;，而随便选另一个待配对数的代价都只有 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么问题来了，我咋知道它们相不相邻？&lt;/p&gt;
&lt;p&gt;再多开一维 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt; 状态，记录最后一个需要与其他后面的元素配对值是否是 &lt;span class=&#34;math inline&#34;&gt;\(a_{i-1}\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;假设现在已经枚举到 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,0/1}\)&lt;/span&gt;，即已枚举完 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个元素需要配对。&lt;/p&gt;
&lt;p&gt;则更新 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 的状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;若我们想要让 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 与后面的元素配对，则代价至少为 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。至于是否会因为待配对元素相邻而额外增加 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 的代价，我们在待配对元素处计算。&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[
 f_{i+1,j+1,1}\gets\min(f_{i,j,0},f_{i,j,1}) + y
 \]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若我们想要让 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 与其相邻的 &lt;span class=&#34;math inline&#34;&gt;\(a_{i+2}\)&lt;/span&gt; 匹配，那么 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+2}\)&lt;/span&gt; 就不需要再与后面的元素配对了，故最后一维为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[
 f_{i+2,j,0}\gets\min(f_{i,j,0},f_{i,j,1})+(d_{i+2}-d_{i+1})\times x
 \]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果我们想让 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 与前面的待配对元素配对：&lt;/p&gt;
&lt;p&gt;在此种大前提下，&lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 一定不需要与后面的元素配对，故最后一维为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(j=1\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(d_i+1=d_{i+1}\)&lt;/span&gt; 时，即存在其相邻元素，且只有一个配对可选项时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果这个数是 &lt;span class=&#34;math inline&#34;&gt;\(d_{i}\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(d_{i+1}\)&lt;/span&gt; 必须与相邻元素配对。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
 f_{i+1,j-1,0}\gets f_{i,j,1}+y
 \]&lt;/span&gt;&lt;/p&gt;
因为在计算 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,1}\)&lt;/span&gt; 时已计算了一个 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;，所以此处只用加一个 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;否则，该元素完成配对，不产生任何代价。&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[
 f_{i+1,j-1,0}\gets f_{i,j,0}
 \]&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;否则，随意选择前面的一个数。&lt;/p&gt;
&lt;p&gt;因为此时，要么前面有除了相邻元素的其他数可选，要么根本没有相邻元素，所以该数完成配对不会产生任何代价（因为 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 已经加过了）。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
 f_{i+1,j-1,0}\gets \min(f_{i,j,0},f_{i,j,1})
 \]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，全部情况讨论完毕。因为不能让最后一个元素再去与后面的元素配对，最终答案为 &lt;span class=&#34;math inline&#34;&gt;\(f_{tot,0,0}\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(tot\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 数组长度。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;，空间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;因为 &lt;span class=&#34;math inline&#34;&gt;\(x,y\le 10^9\)&lt;/span&gt;，最坏情况下需要加 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac n2\)&lt;/span&gt; 次，故需要为 DP 数组开 &lt;code&gt;long long&lt;/code&gt;。尽管热心人士 @&lt;a href=&#34;/user/428358&#34;&gt;cqbztzl&lt;/a&gt; 帮助我计算得出使用空间约为 300 兆，但仍然会 MLE。&lt;/p&gt;
&lt;p&gt;不难发现，第一维枚举到 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时，只需要更新第一维为 &lt;span class=&#34;math inline&#34;&gt;\(i+1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(i+2\)&lt;/span&gt; 状态的值，而不需要其他任何 DP 值，故将第一维模 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt;，滚动为 &lt;span class=&#34;math inline&#34;&gt;\(0\sim 2\)&lt;/span&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;// 代码里可能有一些赛时的神秘注释 hhh
namespace XSC062 &amp;#123;
using namespace fastIO;
const ll inf = 1e18;
const int maxn = 5e3 + 5;
ll x, y;
int T, n, tot;
ll f[3][maxn][2];
int diff[maxn], a[maxn], b[maxn];
ll min(ll x, ll y) &amp;#123;
    return x &amp;lt; y ? x : y;
&amp;#125;
void upd(int i, int j, int k, ll y) &amp;#123;
    f[i % 3][j][k] = min(f[i % 3][j][k], y);
    return;
&amp;#125;
int main() &amp;#123;
    read(T);
    while (T--) &amp;#123;
        read(n), read(x), read(y);
        tot = 0;
        for (int i = 1; i &amp;lt;= n; ++i)
            getnum(a[i]);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            getnum(b[i]);
            if (a[i] != b[i])
                diff[++tot] = i;
        &amp;#125;
        if (tot &amp;amp; 1) &amp;#123;
            puts(&amp;quot;-1&amp;quot;);
            continue;
        &amp;#125;
        memset(f, 0x3f, sizeof (f));
        f[0][0][0] = 0;
        for (int i = 0; i &amp;lt;= tot; ++i) &amp;#123;
            for (int j = 0; j &amp;lt;= i; ++j) &amp;#123;
                // 新增起点
                if (i + 1 &amp;lt;= tot) &amp;#123;
                    upd(i + 1, j + 1, 1,
                        min(f[i % 3][j][0],
                            f[i % 3][j][1]) + y);
                &amp;#125;
                // 碾过去 
                if (i + 2 &amp;lt;= tot) &amp;#123;
                    upd(i + 2, j, 0,
                        min(f[i % 3][j][0],
                            f[i % 3][j][1]) +
                            (diff[i + 2] -
                            diff[i + 1]) * x);
                &amp;#125;
                // 使用起点
                if (j &amp;gt; 0 &amp;amp;&amp;amp; i + 1 &amp;lt;= tot) &amp;#123;
                    if (j == 1 &amp;amp;&amp;amp; diff[i] + 1 ==
                                        diff[i + 1]) &amp;#123;
                        upd(i + 1, j - 1, 0,
                                f[i % 3][j][1] + y);
                        upd(i + 1, j - 1, 0,
                                f[i % 3][j][0]);
                    &amp;#125;
                    else &amp;#123;
                        upd(i + 1, j - 1, 0,
                            min(f[i % 3][j][0],
                                f[i % 3][j][1]));
                    &amp;#125;
                &amp;#125;
                if (i != tot) &amp;#123;
                    f[i % 3][j][0] =
                        f[i % 3][j][1] = inf;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        print(f[tot % 3][0][0], &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="DP" />
        <updated>2023-02-03T08:00:59.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230111/</id>
        <title>瑰丽华尔兹</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230111/"/>
        <content type="html">&lt;p&gt;Solution to&lt;a href=&#34;http://222.180.160.110:61235/problem/8965&#34;&gt;「NOI2005」瑰丽华尔兹&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;单调队列优化 DP。&lt;/p&gt;
&lt;p&gt;不难发现，题意可转化为：&lt;/p&gt;
&lt;p&gt;从 &lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt; 出发，按顺序向 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; 方向移动 &lt;span class=&#34;math inline&#34;&gt;\([0,t_i−s_i+1]\)&lt;/span&gt; 距离，问最大移动距离。&lt;/p&gt;
&lt;p&gt;为了方便描述，我们把一次「向 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; 方向移动 &lt;span class=&#34;math inline&#34;&gt;\([0,t_i−s_i+1]\)&lt;/span&gt; 距离」的操作称为「一步」。&lt;/p&gt;
&lt;p&gt;设计状态。不难发现位置信息必须出现在 DP 的维度中（因为当前位置会影响下一步滑动的距离），而其他信息均不会对下一步滑动产生影响。&lt;/p&gt;
&lt;p&gt;故可令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示完成当前次滑动后，从起点滑动到 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 可得到的最大滑动距离。&lt;/p&gt;
&lt;p&gt;以方向上为例，可列 DP 式：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,j}=\max_{i&amp;lt;k≤i+(ti−si+1)}\{f_{k,j}+k−i\}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此时可枚举每一列的所有状态，使用单调队列优化。&lt;/p&gt;
&lt;p&gt;但实际操作中会出现问题。因为单调队列从下向上更新状态时，&lt;span class=&#34;math inline&#34;&gt;\(f_{k,j}\)&lt;/span&gt; 会比 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 先更新（参考 01 背包倒序枚举容量），导致每一「步」会重复被走很多次。但单调队列的特性限制了我们只能从下向上枚举，此时可新开一个数组记录 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 当次被更新之前的值。&lt;/p&gt;
&lt;p&gt;障碍物如何处理呢？我们知道，如果 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 下面某一位置有障碍物，那么障碍物下面所有的 &lt;span class=&#34;math inline&#34;&gt;\((k,j)\)&lt;/span&gt; 都不能用于更新 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt;（因为被挡住了滑不上来）。所以我们在从下往上枚举时，遇到障碍物就清空单调队列即可。&lt;/p&gt;
&lt;p&gt;下、左、右方向的处理方式类似。&lt;/p&gt;
&lt;p&gt;只需顺序执行操作，根据当前操作方向对应处理即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 205;
const int inf = 1e18;
int q[maxn];
char a[maxn][maxn];
int f[maxn][maxn], d[maxn][maxn];
int n, m, x, y, k, u, h, t, res;
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
int main() &amp;#123;
    memset(f, -0x3f, sizeof (f));
    read(n), read(m);
    read(x), read(y), read(k);
    f[x][y] = 0;
    for (int i = 1; i &amp;lt;= n; ++i)
        scanf(&amp;quot;%s&amp;quot;, a[i] + 1);
    while (k--) &amp;#123;
        read(x), read(y), read(u);
        y = y - x + 1;
        if (u == 1) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                h = 1, t = 0;
                for (int i = n; i; --i) &amp;#123;
                    if (a[i][j] == &amp;#39;x&amp;#39;) &amp;#123;
                        h = 1, t = 0;
                        continue;
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; q[h] - i &amp;gt; y)
                        ++h;
                    d[i][j] = f[i][j];
                    if (h &amp;lt;= t) &amp;#123;
                        f[i][j] = max(f[i][j],
                                    d[q[h]][j] + q[h] - i);
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; d[i][j] + i
                                    &amp;gt;= d[q[t]][j] + q[t])
                        --t;
                    q[++t] = i;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        else if (u == 2) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                h = 1, t = 0;
                for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                    if (a[i][j] == &amp;#39;x&amp;#39;) &amp;#123;
                        h = 1, t = 0;
                        continue;
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; i - q[h] &amp;gt; y)
                        ++h;
                    d[i][j] = f[i][j];
                    if (h &amp;lt;= t) &amp;#123;
                        f[i][j] = max(f[i][j],
                                    d[q[h]][j] + i - q[h]);
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; d[i][j] - i
                                &amp;gt;= d[q[t]][j] - q[t])
                        --t;
                    q[++t] = i;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        else if (u == 3) &amp;#123;
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                h = 1, t = 0;
                for (int j = m; j; --j) &amp;#123;
                    if (a[i][j] == &amp;#39;x&amp;#39;) &amp;#123;
                        h = 1, t = 0;
                        continue;
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; q[h] - j &amp;gt; y)
                        ++h;
                    d[i][j] = f[i][j];
                    if (h &amp;lt;= t) &amp;#123;
                        f[i][j] = max(f[i][j],
                                    d[i][q[h]] + q[h] - j);
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; d[i][j] + j
                                &amp;gt;= d[i][q[t]] + q[t])
                        --t;
                    q[++t] = j;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                h = 1, t = 0;
                for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
                    if (a[i][j] == &amp;#39;x&amp;#39;) &amp;#123;
                        h = 1, t = 0;
                        continue;
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; j - q[h] &amp;gt; y)
                        ++h;
                    d[i][j] = f[i][j];
                    if (h &amp;lt;= t) &amp;#123;
                        f[i][j] = max(f[i][j],
                                    d[i][q[h]] + j - q[h]);
                    &amp;#125;
                    while (h &amp;lt;= t &amp;amp;&amp;amp; d[i][j] - j
                                &amp;gt;= d[i][q[t]] - q[t])
                        --t;
                    q[++t] = j;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (int j = 1; j &amp;lt;= m; ++j)
                res = max(res, f[i][j]);
        &amp;#125;
    &amp;#125;
    print(res);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="DP" />
        <category term="单调队列" />
        <updated>2023-01-10T18:21:35.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20230110/</id>
        <title>背单词</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20230110/"/>
        <content type="html">&lt;p&gt;Solution to&lt;a href=&#34;http://222.180.160.110:61235/problem/59&#34;&gt;「SCOI2016」背单词&lt;/a&gt;。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;题解 P3294。&lt;/p&gt;
&lt;p&gt;我们看到字典树这个标签，下意识想到了前缀。&lt;/p&gt;
&lt;p&gt;但是题目让我们求后缀，所以我们把所有字符串先 &lt;code&gt;reverse&lt;/code&gt; 一下，将问题转化为前缀，方便描述。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我们发现，因为 &lt;span class=&#34;math inline&#34;&gt;\(y &amp;lt; x \le n\)&lt;/span&gt;，所以三种情况的花费排序为 &lt;span class=&#34;math inline&#34;&gt;\(x-y&amp;lt;x&amp;lt;n\times n\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;不难发现，我们可以很简单地通过「把某单词的所有前缀单词放到它之前」消除开销为 &lt;span class=&#34;math inline&#34;&gt;\(n\times n\)&lt;/span&gt; 的情况。此时开销最劣情况下为 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=1}^ni &amp;lt; n\times n\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;接下来，问题在于怎样在满足「把某单词的所有前缀单词放到它之前」的条件下，最小化开销。不难发现，当我们去除第一种情况后，剩下的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(x-y\)&lt;/span&gt; 都包含 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 项，也就是说，我们只需要最小化 &lt;span class=&#34;math inline&#34;&gt;\(\sum -y\)&lt;/span&gt; 的值，也就是最大化 &lt;span class=&#34;math inline&#34;&gt;\(\sum y\)&lt;/span&gt; 的值。而 &lt;span class=&#34;math inline&#34;&gt;\(\sum x\)&lt;/span&gt; 为定值 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=1}^ni\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于处理方式：不难发现一个单词的最长前缀单词最多只有一个，但以该单词为最长前缀单词的单词可能有多个，联想到树。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们将每个单词的最长前缀和该单词连边，会得到一个森林。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不妨先考虑问题的简化，假设有两条链（即，不会同时存在多个单词，使得它们的最长前缀单词相同），应该如何安排其顺序。&lt;/p&gt;
&lt;p&gt;如图所示，考虑「同一条链均匀分散到序列中」和「同一条链集中在一起」两种有规律的安排方式，得到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以发现，第二种情况明显更优。&lt;/p&gt;
&lt;p&gt;所以我们扩展猜想：对于某一单词，以它为前缀的所有单词必须紧随其后。该结论是可递归的。&lt;/p&gt;
&lt;p&gt;继续处理细节部分。考虑两条链长度不同，应如何排列它们的位置？&lt;/p&gt;
&lt;p&gt;下图展示了「前短后长」和「前长后短」两种方案：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以发现，前短后长的方案更优。&lt;/p&gt;
&lt;p&gt;扩展得到猜想，同一单词的所有子树中，大小更小的应在更前面。该结论是可递归的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;接下来对猜想进行证明。&lt;/p&gt;
&lt;p&gt;假设现在已有一条链。我们只有把整条链连在一起，短单词放到长单词前面这一种方法。&lt;/p&gt;
&lt;p&gt;然后新来了一个不属于这条链的节点，明显，因为节点不管放到哪里，其 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 值不变，但会改变已有链的 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 值，所以放到最前面最优。&lt;/p&gt;
&lt;p&gt;又来了一个节点，和刚才新增的节点属于同一条链，一样，不管这个节点何去何从，其 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 不变，但放在越前面，后面的节点的 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 值增加得越多。&lt;/p&gt;
&lt;p&gt;以此类推可得到结论，同一条链放到一起。短链放到长链前面也是比较好想的。假设有两条链，短链长度为 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，长链长度为 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;，放置起点为 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt;，则前短后长和钱长后短的 y 之和分别为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{(l + l + a - 2) \times (a - 1) + (l + a + l + a + b - 2) \times (b - 1)} 2\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{(l + l + b - 2) \times (b - 1) + (l + b + l + b + a - 2) \times (b - 1)} 2\)&lt;/span&gt;（运用等差数列求和公式），解不等式可得前短后长一定更优。&lt;/p&gt;
&lt;p&gt;接下来是从链扩展到树。那么我们想到了什么？树链剖分。&lt;/p&gt;
&lt;p&gt;我们化用树剖思想，以最轻边为剖分条件，将树划分为有顺序的链，按照上述方式排列其顺序即可。&lt;/p&gt;
&lt;p&gt;此时我们记录下每个单词的直系父亲（即其最长前缀单词），在唯一序列中模拟计分操作，即可得到答案。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;为了方便，可将所有入度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的点与一个虚点相连，将森林转化为树。&lt;/p&gt;
&lt;p&gt;注意 &lt;code&gt;long long&lt;/code&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
using str = std::string;
const int maxn = 1e6 + 5;
const int maxm = 1e6 + 5;
str s[maxn];
int T[maxm][26];
int kaz[maxn], siz[maxn]; // kaz 表示单词在最终序列中所处的位置
std::vector&amp;lt;int&amp;gt; g[maxn];
int n, l, res, cnt = 1, ti;
int tot[maxm], fa[maxn], deg[maxn];
void Insert(int k) &amp;#123; 
    int f = 1, len = s[k].length();
    for(int i = 0; i &amp;lt; len; ++i) &amp;#123;
        if (!T[f][s[k][i] - &amp;#39;a&amp;#39;]) 
            T[f][s[k][i] - &amp;#39;a&amp;#39;] = ++cnt;
        f = T[f][s[k][i]-&amp;#39;a&amp;#39;];
    &amp;#125;
    tot[f] = k;
    return;
&amp;#125;
void Search(int k) &amp;#123;
    int f = 1;
    int len = s[k].length();
    for (int i = 0; i &amp;lt; len; ++i) &amp;#123;
        f = T[f][s[k][i] - &amp;#39;a&amp;#39;];
        if (tot[f]) &amp;#123;
            if (tot[f] != k)
                fa[k] = tot[f]; // 记录当前最长前缀
        &amp;#125;
    &amp;#125;
    return;
&amp;#125;
void add(int x, int y) &amp;#123;
    ++deg[y];
    g[x].push_back(y);
    return;
&amp;#125;
void DFS1(int x) &amp;#123; // 提前计算每个子树的 size
    siz[x] = 1;
    for (auto i : g[x]) &amp;#123;
        DFS1(i);
        siz[x] += siz[i];
    &amp;#125;
    return;
&amp;#125;
void DFS2(int x) &amp;#123;
    kaz[x] = ti++;  // 时间戳即为单词位置
    std::sort(g[x].begin(), g[x].end(),
        [&amp;amp;](int x, int y) &amp;#123; return siz[x] &amp;lt; siz[y]; &amp;#125;); // 按子树 size 排序
    for (auto i : g[x])
        DFS2(i);
    return;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%lld&amp;quot;, &amp;amp;n);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        std::cin &amp;gt;&amp;gt; s[i];
        std::reverse(s[i].begin(), s[i].end());  // 后缀转前缀
        Insert(i);
        res += i;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        Search(i);
        if (fa[i])
            add(fa[i], i); // 建图
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (!deg[i]) // 建虚点方便操作
            add(n + 1, i), fa[i] = n + 1;
    &amp;#125;
    DFS1(n + 1), DFS2(n + 1);
    for (int i = 1; i &amp;lt;= n; ++i)
        res -= kaz[fa[i]]; // 处理 y 值
    print(res);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="字典树" />
        <updated>2023-01-09T18:27:46.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20221010/</id>
        <title>解题报告 博弈</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20221010/"/>
        <content type="html">&lt;p&gt;老题解批量补档。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一棵带权树，将 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt; 间简单路径上的边权生成数组，两个人在数组中轮流选数，每次选走的数必须 &lt;span class=&#34;math inline&#34;&gt;\(\le\)&lt;/span&gt; 上一个人选走的数，不能选的人输，问有多少个 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt; 满足先手必胜。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果在 &lt;span class=&#34;math inline&#34;&gt;\((u, v)\)&lt;/span&gt; 的路径上有任何一种边权的数量是奇数，那么就要统计 &lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;对于最小的、出现次数为奇数的边权 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;，先手选择 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;，此时剩下偶数个可选项。后手选择 &lt;span class=&#34;math inline&#34;&gt;\(w&amp;#39;\)&lt;/span&gt;，这会删除 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;w&amp;#39;\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(\le w\)&lt;/span&gt; 的所有可选项。发现被删掉偶数个选项；剩下奇数个选项。易知先手必胜。&lt;/p&gt;
&lt;p&gt;若不存在出现次数为奇数的边权，从刚刚后手的处境可以看出先手必败。所以，问题就转化为了：统计点对 &lt;span class=&#34;math inline&#34;&gt;\((u, v)\)&lt;/span&gt; 的数量，满足 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 的简单路径中存在出现次数为奇数的边权。&lt;/p&gt;
&lt;p&gt;给每个边权映射一个值，为 &lt;code&gt;base&lt;/code&gt; 的 &lt;code&gt;rand()&lt;/code&gt; 次方，自然溢出即可。然后直接按照之前的操作处理就好了。&lt;/p&gt;
&lt;p&gt;如果一个你想找到类似于 &lt;code&gt;1 ^ 2 ^ 3 = 0&lt;/code&gt; 的情况，其出现概率与数字的二进制位数有关。因为 &lt;code&gt;xor&lt;/code&gt; 只针对于同一位，结果不会被上一位或下一位干扰，所以每一位出现异或起来为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的概率是 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac 12\)&lt;/span&gt;。只要我们整点比较强力的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位二进制数，那么出现以上情况的概率就是 &lt;span class=&#34;math inline&#34;&gt;\(2^{-k}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么这个比较强力的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 位二进制数，用比较强力的类字符串哈希生成方式，再使用一个很大很大的随机数替代字符串哈希中表示下标的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，用自然溢出让它显得更加稳妥就好。所以现在我们程序寄掉的概率就是 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac 1{2^{64}}\)&lt;/span&gt;，好事情啊好事情。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log n)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\log n\)&lt;/span&gt; 来源于映射。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int _p = 13331;
const int maxn = 5e5 + 5;
struct _ &amp;#123;
    int v;
    ull w;
    _ () &amp;#123;&amp;#125;
    _ (int v1, ull w1) &amp;#123;
        v = v1, w = w1;
    &amp;#125;
&amp;#125;;
ull w;
ull f[maxn];
int T, n, x, y, ans;
std::map&amp;lt;ull, int&amp;gt; t;
std::map&amp;lt;ull, ull&amp;gt; q;
std::vector&amp;lt;_&amp;gt; g[maxn];
inline void Init(int n) &amp;#123;
    t.clear();
    q.clear();
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        f[i] = 0;
        g[i].clear();
        g[i].shrink_to_fit();
    &amp;#125;
    return;
&amp;#125;
void DFS(int x, int fa) &amp;#123;
    ++t[f[x]];
    for (auto i : g[x]) &amp;#123;
        if (i.v == fa)
            continue;
        f[i.v] = f[x] ^ i.w;
        DFS(i.v, x);
    &amp;#125;
    return;
&amp;#125;
inline void add(int x, int y, ull w) &amp;#123;
    g[x].push_back(_(y, w));
    return;
&amp;#125;
inline ull randint(void) &amp;#123;
    ull res = rand();
    res *= rand();
    res *= rand();
    return res;
&amp;#125;
inline ull qkp(ull x, ull y) &amp;#123;
    ull res = 1;
    while (y) &amp;#123;
        if (y &amp;amp; 1)
            res *= x;
        x *= x;
        y &amp;gt;&amp;gt;= 1;
    &amp;#125; 
    return res;
&amp;#125;
int main() &amp;#123;
    read(T);
    srand(time(NULL));
    while (T--) &amp;#123;
        read(n);
        Init(n);
        ans = n * (n - 1) / 2;
        for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
            read(x), read(y), read(w);
            if (!q.count(w))
                q[w] = qkp(_p, randint());
            w = q[w];
            add(x, y, w), add(y, x, w);
        &amp;#125;
        DFS(1, -1);
        for (auto i : t)
            ans -= i.second * (i.second - 1) / 2;
        print(ans, &amp;#39;\n&amp;#39;);
    &amp;#125;
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="哈希" />
        <updated>2022-10-10T14:31:28.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20220927/</id>
        <title>悬线法</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20220927/"/>
        <content type="html">&lt;p&gt;有一段时间看见单调栈就抑郁，所以做题的时候就东贺贺，西贺贺，最终了解到了世界上还有一种很神奇的方法叫悬线法。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;本文中的「单调栈」均指依赖于顺序维护信息的工具，单纯利用单调性质作为数据结构独立存在的单调栈不在本篇文章 &lt;strong&gt;批判&lt;/strong&gt; 范围之内。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;引入土豪聪要请客&#34;&gt;引入：土豪聪要请客&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/2870/problem/4&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/2870/problem/4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题意简述：给定一个 &lt;span class=&#34;math inline&#34;&gt;\(n\times m\)&lt;/span&gt; 的矩阵，其中有一部分地方有障碍。在整个地图上找到周长最大的、不包含障碍的矩形。&lt;/p&gt;
&lt;p&gt;输入一个由 &lt;code&gt;.&lt;/code&gt;（空地）和 &lt;code&gt;X&lt;/code&gt;（障碍）组成的矩阵，输出最大矩形周长减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;一些鲜花&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;看到题后即可想到悬线法，但是中午太困了处于游离状态一直掉线，所以干瞪着电脑屏幕打瞌睡。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;于是这篇文章从 220927 被拖到了 230916，哈哈真神奇&lt;/del&gt; 现在是 231004 了，我才动笔。&lt;/p&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;首先预处理出 &lt;span class=&#34;math inline&#34;&gt;\(s_{i, j}\)&lt;/span&gt;，表示从 &lt;span class=&#34;math inline&#34;&gt;\((i,\,j)\)&lt;/span&gt; 向上，共有多少个连续的 &lt;code&gt;.&lt;/code&gt;。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
    for (int j = 1; j &amp;lt;= m; ++j)
        s[i][j] = (a[i][j] == &amp;#39;.&amp;#39; ? s[i - 1][j] + 1 : 0);
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;悬线法的名字很形象，拎着一根细线的头，让它自然下垂。&lt;/p&gt;
&lt;p&gt;为了方便思考和实现，我们这样想象：一个地图，我们手里拿着一根硬棒朝上举，然后固定我们手只能在一行上运动，用它左右「刷」沿途的矩形。&lt;/p&gt;
&lt;p&gt;具象地说，选定一行 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，枚举每一个 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，寻找以第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行为底，包含 &lt;span class=&#34;math inline&#34;&gt;\((i,\,j)\)&lt;/span&gt;，高为 &lt;span class=&#34;math inline&#34;&gt;\(s_{i,\,j}\)&lt;/span&gt; 的最宽矩形。&lt;/p&gt;
&lt;p&gt;也就是从 &lt;span class=&#34;math inline&#34;&gt;\((i, j)\)&lt;/span&gt; 出发，往左右分别找到最远的一个位置 &lt;span class=&#34;math inline&#34;&gt;\(L_j, R_j\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(s_{i, L_j \sim R_j} \ge s_{i, j}\)&lt;/span&gt;。那么悬线法最抽象的部分就讲完了，接下来是最神奇的部分。&lt;/p&gt;
&lt;p&gt;在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 行内，从每个 &lt;span class=&#34;math inline&#34;&gt;\((i, j)\)&lt;/span&gt; 开始找到 &lt;span class=&#34;math inline&#34;&gt;\(L_j, R_j\)&lt;/span&gt;，如果暴力那么明显是个 &lt;span class=&#34;math inline&#34;&gt;\(O(m^2)\)&lt;/span&gt; 的时间。&lt;/p&gt;
&lt;p&gt;但是我们考虑这么一件事情。假设 &lt;span class=&#34;math inline&#34;&gt;\(L_{i-1}\)&lt;/span&gt; 已经求出。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(k = j-1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(L_j\)&lt;/span&gt; 初值赋为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;（左端点至少是自己）。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(L_j=1\)&lt;/span&gt; 时 即刻停止算法，因为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 是可达的最左位置，不能再往左了。&lt;/li&gt;
&lt;li&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(a_k &amp;gt; a_j\)&lt;/span&gt; 时 &lt;span class=&#34;math inline&#34;&gt;\(a_k\)&lt;/span&gt; 就像一堵墙，堵住了我们要继续往左刷的硬棒，故不改变 &lt;span class=&#34;math inline&#34;&gt;\(L_j\)&lt;/span&gt; 并停止算法。&lt;/li&gt;
&lt;li&gt;否则，由于 &lt;span class=&#34;math inline&#34;&gt;\(a_{L_k\sim k}\ge a_k\ge a_j\)&lt;/span&gt;，从 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 开始往左刷至少都能够到 &lt;span class=&#34;math inline&#34;&gt;\(L_k\)&lt;/span&gt;。此时我们令 &lt;span class=&#34;math inline&#34;&gt;\(k=L_k-1\)&lt;/span&gt;，回到第一步。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们就可以求解到正确的 &lt;span class=&#34;math inline&#34;&gt;\(L_j\)&lt;/span&gt; 的。求解 &lt;span class=&#34;math inline&#34;&gt;\(R_j\)&lt;/span&gt; 的流程和上述大致相同，不再赘述。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;那么是一个非常神奇的事情。悬线法的时间复杂度怎么证明呢？&lt;/p&gt;
&lt;p&gt;我们思考。假设 &lt;span class=&#34;math inline&#34;&gt;\(a_{j-1}&amp;gt;a_j\)&lt;/span&gt;，算法会即刻停止；否则，当前定位直接跳到 &lt;span class=&#34;math inline&#34;&gt;\(L_{j-1}\)&lt;/span&gt; 之前，也就是说，为了求解 &lt;span class=&#34;math inline&#34;&gt;\(L_{j-1}\)&lt;/span&gt; 而遍历过的位置，求解 &lt;span class=&#34;math inline&#34;&gt;\(L_j\)&lt;/span&gt; 时都不会再遍历第二遍。&lt;/p&gt;
&lt;p&gt;没有值会被遍历第二遍，所以是 &lt;span class=&#34;math inline&#34;&gt;\(O(m)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;按照上述流程，算法总体时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\times m)\)&lt;/span&gt;，和单调栈完全一致。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e3 + 5;
int n, m, ans;
char a[maxn][maxn];
int s[maxn][maxn], l[maxn][maxn], r[maxn][maxn];
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
int main() &amp;#123;
    read(n);
    read(m);
    for (int i = 1; i &amp;lt;= n; ++i)
        scanf(&amp;quot;%s&amp;quot;, a[i] + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= m; ++j)
            s[i][j] = (a[i][j] == &amp;#39;.&amp;#39; ? s[i - 1][j] + 1 : 0);
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            l[i][j] = j;
            while (l[i][j] &amp;gt; 1 &amp;amp;&amp;amp; s[i][j] &amp;lt;= s[i][l[i][j] - 1])
                l[i][j] = l[i][l[i][j] - 1];
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = m; j; --j) &amp;#123;
            r[i][j] = j;
            while (r[i][j] &amp;lt; m &amp;amp;&amp;amp; s[i][j] &amp;lt;= s[i][r[i][j] + 1])
                r[i][j] = r[i][r[i][j] + 1];
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            if (!s[i][j])
                continue;
            ans = max(ans, (s[i][j] +
                      (r[i][j] - l[i][j] + 1)) * 2);
        &amp;#125;
    &amp;#125;
    printf(&amp;quot;%d&amp;quot;, ans - 1);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;p&gt;上述处理 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 数组的「竖向压缩」技巧是处理矩阵类悬线法题目的常用技巧，这里使用另一道题来举例子。&lt;/p&gt;
&lt;h3 id=&#34;例玉蟾宫-city-game-城市游戏&#34;&gt;例：玉蟾宫 / City Game / 城市游戏&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://222.180.160.110:61235/contest/1655/problem/2&#34; class=&#34;uri&#34;&gt;http://222.180.160.110:61235/contest/1655/problem/2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这道题和上一道非常相似，只需改变求答案的式子即可。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 1e3 + 5; 
char t;
int n, m, ans;
int s[maxn][maxn];
int l[maxn][maxn], r[maxn][maxn];
int max(int x, int y) &amp;#123;
    return x &amp;gt; y ? x : y;
&amp;#125;
int main() &amp;#123;
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            scanf(&amp;quot;%1s&amp;quot;, &amp;amp;t);
            if (t == &amp;#39;F&amp;#39;)
                s[i][j] = s[i - 1][j] + 1;
            l[i][j] = j;
            while (l[i][j] &amp;gt; 1 &amp;amp;&amp;amp; s[i][j]
                        &amp;lt;= s[i][l[i][j] - 1])
                l[i][j] = l[i][l[i][j] - 1];
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        r[i][m + 1] = m + 1;
        for (int j = m; j; --j) &amp;#123;
            r[i][j] = j;
            while (r[i][j] &amp;lt; m &amp;amp;&amp;amp; s[i][j]
                         &amp;lt;= s[i][r[i][j] + 1])
                r[i][j] = r[i][r[i][j] + 1];
            ans = max(ans, s[i][j] *
                        (r[i][j] - l[i][j] + 1));
        &amp;#125;
    &amp;#125;
    print(ans * 3, &amp;#39;\n&amp;#39;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;悬线法能维护的数据特点&#34;&gt;悬线法能维护的数据特点&lt;/h2&gt;
&lt;p&gt;值得注意的是，悬线法仅指求解最远左右端点的技巧。&lt;/p&gt;
&lt;p&gt;同时可以维护过程中的其它信息，例如 &lt;a href=&#34;/20231004&#34;&gt;情景剧&lt;/a&gt; 一题。链接中有详细叙述，此处略。&lt;/p&gt;
&lt;p&gt;根据本题带来的启发，我们认识到悬线可在求解过程中维护的内容更多。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;不像你单调栈随随便便删这删那信息全部断层什么都维护不了&lt;/del&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;进一步地悬线法与单调栈&#34;&gt;进一步地，悬线法与单调栈？&lt;/h2&gt;
&lt;p&gt;和 &lt;span class=&#34;citation&#34; data-cites=&#34;Rosmist&#34;&gt;@Rosmist&lt;/span&gt; 辩经的时候，Rosmist 激情爆典：「悬线不就是可持久化单调栈吗？」&lt;/p&gt;
&lt;p&gt;很有道理。容易发现单调栈在每一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时刻的栈内元素就是从 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 开始往起始方向跳，经过的所有元素。由于悬线存储的数据是不会更改的，倒推回去我们可以知道，悬线存储了每个时刻的单调栈信息并有多个点共享前驱 / 后继，其实就是一种另类的可持久化单调栈，并且复杂度与单调栈本体相同。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;与笛卡尔树的关联&#34;&gt;与笛卡尔树的关联&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;upd on 240704&lt;/em&gt;，学习了笛卡尔树。现在介绍悬线与笛卡尔树的关系。&lt;/p&gt;
&lt;p&gt;容易发现元素 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(l_i,r_i\)&lt;/span&gt; 二值就是其在笛卡尔树上对应的区间。&lt;/p&gt;
&lt;p&gt;更抽象的一点是悬线法中跳一跳的操作在笛卡尔树中的对应内涵。以小根堆为背景、在 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 上向左跳为例，注意到该操作相当于从左到右向笛卡尔树中新增节点。&lt;/p&gt;
&lt;p&gt;这也进一步验证了悬线法复杂度的正确性：我们都知道，在新加入节点时，若从树中提取出由根节点和其一直向右走直到节点不存在右儿子构成的链，则该点被添加到链中某一点的右儿子，该点原本的右子树（完整包含了链的剩余部分）成为新建节点的左子树。&lt;/p&gt;
&lt;p&gt;而悬线实现的就是从链的最低点暴力爬山，直到找到合法点；而根据上面的结论，被枚举过的链上较低点不会作为新节点的右边的子孙，自然也不会再次被枚举到。&lt;/p&gt;
&lt;p&gt;故而每个点最多被枚举到一次，得证。&lt;/p&gt;
&lt;p&gt;进一步的，可以开发出悬线法 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 建笛卡尔树的方法：&lt;/p&gt;
&lt;p&gt;每次求解完 &lt;span class=&#34;math inline&#34;&gt;\(l_i\)&lt;/span&gt; 后，令 &lt;span class=&#34;math inline&#34;&gt;\(rc_{l_i-1}=i\)&lt;/span&gt; 即可（当然 &lt;span class=&#34;math inline&#34;&gt;\(rc_{l_i-1}\)&lt;/span&gt; 是会被多次更新的，这也是不直接用邻接表 / 前向星连边的原因），&lt;span class=&#34;math inline&#34;&gt;\(r_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(lc\)&lt;/span&gt; 同理。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
    l[i] = i;
    while (l[i] != 1 &amp;amp;&amp;amp; a[l[i] - 1] &amp;gt; a[i])
        l[i] = l[l[i] - 1];
    rc[l[i] - 1] = i;
&amp;#125;
for (int i = n; i; --i) &amp;#123;
    r[i] = i;
    while (r[i] != n &amp;amp;&amp;amp; a[r[i] + 1] &amp;gt; a[i])
        r[i] = r[r[i] + 1];
    lc[r[i] + 1] = i;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中，根节点即为 &lt;code&gt;rc[0]&lt;/code&gt; 或 &lt;code&gt;lc[n + 1]&lt;/code&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;进一步从笛卡尔树出发，探究悬线法能够循环内维护的数据特点。&lt;/p&gt;
&lt;p&gt;为何是循环内维护？因为循环外维护就只能从左右的直接儿子进行更新，那和笛卡尔树就没有区别了。&lt;/p&gt;
&lt;p&gt;但其实结果是没什么可探究的，因为其经过的节点——自己左子树下最右端链——实在不具有什么特殊性，它们所对应的区间——从 &lt;span class=&#34;math inline&#34;&gt;\([l_i, i - 1]\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\([i - 1, i - 1]\)&lt;/span&gt; 也看不出什么值得研究的，更何况可以被笛卡尔树更具象地代替；如果你要从前缀最值的角度出发，那就没意思了，完全等价于单调栈。&lt;/p&gt;
&lt;p&gt;所以我们认为这次悬线法的开发最终以失败告终，&lt;del&gt;不然它早被别人开发了&lt;/del&gt;，我在此能给出的意见是，可以用悬线法完成矩形题目等不需要笛卡尔树树形结构的问题，至于其他，甚至包括上面提到的 &lt;a href=&#34;/20231004&#34;&gt;情景剧&lt;/a&gt; 一题，都可以直接上笛卡尔树。&lt;/p&gt;
&lt;p&gt;但笛卡尔树的建树我还是肯定会用悬线的！毕竟照应开头，我不会单调栈 &lt;img src=&#34;/em/dy.gif&#34; alt=&#34;得意&#34; /&gt;&lt;/p&gt;
</content>
        <category term="悬线法" />
        <updated>2022-09-27T02:53:00.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20220808/</id>
        <title>解题报告 One-Dimensional Battle Ships</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20220808/"/>
        <content type="html">&lt;p&gt;老题解批量补档。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF567D&#34; class=&#34;uri&#34;&gt;https://www.luogu.com.cn/problem/CF567D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为「某一时刻是否一定被击中过」具有单调性，考虑先提前发射所有炮弹，倒序枚举炮弹，不断「撤销」当前最后一发炮弹的发射，如果在「撤销」这发炮弹后，存在任意一种放下 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 艘完整的战舰的方案，说明在发射这一发炮弹之后绝对能够击中。&lt;/p&gt;
&lt;p&gt;如果发射所有炮弹后，依然存在一种放下 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 艘完整的战舰的方案，则无解。&lt;/p&gt;
&lt;p&gt;具体实现可以使用并查集维护连通块大小，每「撤销」一发炮弹的发射相当于合并三个连通块：炮弹的落点、落点的前一个元素（若不存在或已被炮弹摧毁则忽略）、落点的后一个元素（若不存在或已被炮弹摧毁则忽略）。&lt;/p&gt;
&lt;p&gt;设某连通块大小为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，可容纳战舰数为 &lt;span class=&#34;math inline&#34;&gt;\(res\)&lt;/span&gt;，显然有 &lt;span class=&#34;math inline&#34;&gt;\(res = \lfloor (x + 1) \div (p + 1) \rfloor\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;记统计当前可容纳战舰的数量为 &lt;span class=&#34;math inline&#34;&gt;\(ans\)&lt;/span&gt;，在并查集合并时，&lt;span class=&#34;math inline&#34;&gt;\(ans\)&lt;/span&gt; 分别减去两个待合并连通块的可容纳战舰的数量，再加上新连通块可容纳战舰的数量。最靠后的 &lt;span class=&#34;math inline&#34;&gt;\(ans\ge k\)&lt;/span&gt; 的时刻即为所求。&lt;/p&gt;
&lt;p&gt;同时使用路径压缩和按秩合并，时空复杂度均为 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n)\)&lt;/span&gt;。优于 multiset 解法。&lt;/p&gt;
&lt;details&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;namespace XSC062 &amp;#123;
using namespace fastIO;
const int maxn = 2e5 + 15;
bool vis[maxn];
int n, k, p, m, x, ans;
int a[maxn], f[maxn], siz[maxn];
inline void swap(int &amp;amp;x, int &amp;amp;y)&amp;#123;
    x ^= y ^= x ^= y;
    return 0;
&amp;#125;
inline int calc(int x) &amp;#123;
    return (x + 1) / (p + 1);
&amp;#125;
inline void Init(int n) &amp;#123;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        f[i] = i;
        siz[i] = 1;
    &amp;#125;
    return;
&amp;#125;
int find(int x) &amp;#123;
    return x == f[x] ? x : f[x] = find(f[x]);
&amp;#125;
inline void merge(int x, int y) &amp;#123;
    int fx = find(x);
    int fy = find(y);
    if (fx == fy)
        return;
    ans -= calc(siz[fx]);
    ans -= calc(siz[fy]);
    if (siz[fy] &amp;gt; siz[fx])
        swap(fx, fy);
    ans += calc(siz[fy]);
    f[fx] = fy;
    return;
&amp;#125;
int main() &amp;#123;
    read(n);
    read(k);
    read(p);
    read(m);
    Init(n + 5);
    ans = (n - m) * (2 / (p + 1));
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        read(a[i]);
        vis[a[i]] = 1;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (vis[i] || vis[i - 1])
            continue;
        merge(i, i - 1);
    &amp;#125; 
    if (ans &amp;gt;= k) &amp;#123;
        puts(&amp;quot;-1&amp;quot;);
        return 0;
    &amp;#125;
    for (int i = m; i; --i) &amp;#123;
        vis[a[i]] = 0;
        ans += 2 / (p + 1);
        if (a[i] - 1 &amp;amp;&amp;amp; !vis[a[i] - 1])
            merge(a[i], a[i] - 1);
        if (a[i] + 1 &amp;lt;= n &amp;amp;&amp;amp; !vis[a[i] + 1])
            merge(a[i], a[i] + 1);
        if (ans &amp;gt;= k) &amp;#123;
            printf(&amp;quot;%d&amp;quot;, i);
            return 0;
        &amp;#125;
    &amp;#125;
    puts(&amp;quot;-1&amp;quot;);
    return 0;
&amp;#125;
&amp;#125; // namespace XSC062
int main() &amp;#123;
    XSC062::main();
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
</content>
        <category term="并查集" />
        <updated>2022-08-07T23:56:40.000Z</updated>
    </entry>
    <entry>
        <id>https://xsc062.netlify.app/20210214/</id>
        <title>【总结】斜率优化 DP</title>
        <link rel="alternate" href="https://xsc062.netlify.app/20210214/"/>
        <content type="html">&lt;p&gt;于是，XSC062 开始写总结。&lt;/p&gt;
&lt;h2 id=&#34;斜率优化-dp&#34;&gt;斜率优化 DP&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;前置芝士&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/XSC062/p/14383610.html&#34;&gt;单调队列优化 DP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们以一道题为例。&lt;/p&gt;
&lt;h3 id=&#34;打印文章&#34;&gt;&lt;a href=&#34;http://acm.hdu.edu.cn/showproblem.php?pid=3507&#34;&gt;打印文章&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/10191&#34;&gt;双倍经验&lt;/a&gt; | &lt;a href=&#34;https://www.acwing.com/problem/content/1096/&#34;&gt;三倍经验&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;solution&#34;&gt;Solution&lt;/h4&gt;
&lt;p&gt;明显 DP。&lt;/p&gt;
&lt;p&gt;那么 DP 式就是： &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\min\{f_j+(s_i-s_j)^2+M\}
\\
&amp;amp;=\min\{f_j+{s_i}^2-2\times s_i\times s_j+{s_j}^2+M\}
\\
&amp;amp;=\min\{f_j-2\times s_i\times s_j+{s_j}^2\}+{s_i}^2+M
\end{aligned}
\]&lt;/span&gt; 其中 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 的前缀和。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n^2)\)&lt;/span&gt;，明显爆炸，所以我们需要优化。&lt;/p&gt;
&lt;p&gt;在上一篇的 &lt;a href=&#34;https://www.cnblogs.com/XSC062/p/14383610.html&#34;&gt;单调队列优化DP&lt;/a&gt; 中，我们提到过，只有 DP 式中的与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 有关的项能直接提出来时，我们才能使用单调队列优化，而这里的 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(s_j\)&lt;/span&gt; 相乘，无法使用单调队列优化。&lt;/p&gt;
&lt;p&gt;我们思考，对于 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 来说，无非就是选出最优的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 来构造它。&lt;/p&gt;
&lt;p&gt;假设有 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，如何判断 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 谁更优呢？&lt;/p&gt;
&lt;p&gt;我们先钦定 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;lt;k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么可以得到： &lt;span class=&#34;math display&#34;&gt;\[
f_j-2\times s_i\times s_j+{s_j}^2+{s_i}^2+M&amp;lt;f_k-2\times s_i\times s_k+{s_k}^2+{s_i}^2+M
\]&lt;/span&gt; 化简得： &lt;span class=&#34;math display&#34;&gt;\[
f_j-2\times s_i\times s_j+{s_j}^2&amp;lt;f_k-2\times s_i\times s_k+{s_k}^2
\]&lt;/span&gt; 再将&lt;strong&gt;只&lt;/strong&gt;与 &lt;span class=&#34;math inline&#34;&gt;\(j,k\)&lt;/span&gt; 有关的项放到左边，与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 有关的项放到右边： &lt;span class=&#34;math display&#34;&gt;\[
f_j-f_k+{s_j}^2-{s_k}^2&amp;lt;2\times s_i\times s_j-2\times s_i\times s_k
\\
f_j-f_k+{s_j}^2-{s_k}^2&amp;lt;2\times s_i\times(s_j-s_k)
\]&lt;/span&gt; 左右两边同时 &lt;span class=&#34;math inline&#34;&gt;\(\div\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 无关的项 &lt;span class=&#34;math inline&#34;&gt;\(2\times(s_j-s_k)\)&lt;/span&gt; ： &lt;span class=&#34;math display&#34;&gt;\[
\dfrac{(f_j+{s_j}^2)-(f_k+{s_k}^2)}{(2\times s_j)-(2\times s_k)}&amp;lt;s_i
\]&lt;/span&gt; 如果满足上式 ，则 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;lt;k\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;接下来是斜率优化的重点部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在义务教育阶段，学生学习了 &lt;a href=&#34;https://baike.baidu.com/item/一次函数&#34;&gt;一次函数&lt;/a&gt;，它的几何意义表示为一条直线，一次项的系数就是直线的斜率，只不过当直线与 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 轴垂直的时候无法表示。虽然没有明确给出斜率这个名词，但实际上思想已经渗透到其中。&lt;/p&gt;
&lt;p&gt;直线对 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 轴的倾斜角 &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; 的正切值 &lt;span class=&#34;math inline&#34;&gt;\(\tan\alpha\)&lt;/span&gt; 称为该直线的“斜率”，并记作 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; ，公式为 &lt;span class=&#34;math inline&#34;&gt;\(k=\tan\alpha\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;即 &lt;span class=&#34;math inline&#34;&gt;\(k=\tan\alpha=\dfrac{\Delta y}{\Delta x}=\dfrac{y_2-y_1}{x_2-x_1}\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{y_1-y_2}{x_1-x_2}\)&lt;/span&gt; 。&lt;/p&gt;
&lt;p align=&#34;right&#34;&gt;
——选自 &lt;a href=&#34;https://baike.baidu.com/item/%E6%96%9C%E7%8E%87/4914111?fr=aladdin&#34;&gt;斜率_百度百科&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;XSC062 看完了百度百科表示 &lt;del&gt;你 TM 在说些啥是不是欺负我六年义务教育的小学生&lt;/del&gt; 恍然大悟&lt;/p&gt;
&lt;p&gt;上面推出来的那个关于 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的DP式，不就是求两个点 &lt;span class=&#34;math inline&#34;&gt;\((2\times s_j,f_j+{s_j}^2)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((2\times s_k,f_j+{s_k}^2)\)&lt;/span&gt; 连成一条线之后的坡度吗？&lt;/p&gt;
&lt;p&gt;本文后面的部分，&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的含义会在「点&lt;span class=&#34;math inline&#34;&gt;\((2\times s_x,f_x+{s_x}^2)\)&lt;/span&gt; 」和「下标 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 」之间漂浮，请根据语境识别。&lt;/p&gt;
&lt;p&gt;随后 XSC062 边打瞌睡边听 GM 讲课（特异功能），勉强算是明白了中心意思：&lt;/p&gt;
&lt;p&gt;如图，假设有三个点 &lt;span class=&#34;math inline&#34;&gt;\(A,B,C\)&lt;/span&gt;，以及 &lt;span class=&#34;math inline&#34;&gt;\(l_{AB}\)&lt;/span&gt; 的斜率 &lt;span class=&#34;math inline&#34;&gt;\(k_1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(l_{BC}\)&lt;/span&gt; 的斜率 &lt;span class=&#34;math inline&#34;&gt;\(k_2\)&lt;/span&gt;。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/3bc5fea553ad6b06229ef9e9fa4c9664.png&#34; alt=&#34;上凸&#34; /&gt;&lt;figcaption&gt;上凸&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;我们暂且把这个向外凸起的奇怪玩意儿称为一个「上凸」。&lt;/p&gt;
&lt;p&gt;回到前面的我们得到的那个结论：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\dfrac{(f_j+{s_j}^2)-(f_k+{s_k}^2)}{(2\times s_j)-(2\times s_k)}&amp;lt;s_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果满足上式 ，则 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;lt;k\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单记忆为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(l_{NM}\)&lt;/span&gt; 的斜率比 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 小，则 &lt;span class=&#34;math inline&#34;&gt;\(N&amp;lt;M\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 。&lt;/li&gt;
&lt;li&gt;反之，若点 &lt;span class=&#34;math inline&#34;&gt;\(l_{NM}\)&lt;/span&gt; 的斜率比 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 大，则 &lt;span class=&#34;math inline&#34;&gt;\(M&amp;lt;N\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(A,B\)&lt;/span&gt; 代入，我们得知：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(k_1\leqslant s_i\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(k_1&amp;gt;s_i\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(k_2\leqslant s_i\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(k_2&amp;gt;s_i\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为斜率 = 倾斜度 = 竖得有多高，明显 &lt;span class=&#34;math inline&#34;&gt;\(k_1&amp;gt;k_2\)&lt;/span&gt;。所以针对一个大小关系，&lt;span class=&#34;math inline&#34;&gt;\(k_1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(k_2\)&lt;/span&gt; 之间只有可能有：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(s_i&amp;lt;k_2&amp;lt;k_1\)&lt;/span&gt;，此时 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 为最优解。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(k_2&amp;lt;s_i&amp;lt;k_1\)&lt;/span&gt;，此时 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(A,C\)&lt;/span&gt; 为最优解。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(k_2&amp;lt;k_1&amp;lt;s_i\)&lt;/span&gt;，此时 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 为最优解。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;发现了吗？&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 永远都不可能是最优解。&lt;/p&gt;
&lt;p&gt;所以如果我们要维护一个最优解的序列，就可以不要 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 了。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;0.png&#34; alt=&#34;上凸&#34; /&gt;&lt;figcaption&gt;上凸&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;那么，因为我们已经删掉了所有「上凸」的突起部分，所以这个最优解序列里肯定不会再存在「上凸」了。&lt;/p&gt;
&lt;p&gt;如果是这样的「下凸」呢？&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;1.png&#34; alt=&#34;下凸&#34; /&gt;&lt;figcaption&gt;下凸&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(k_1\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(l_{AB}\)&lt;/span&gt; 的斜率，&lt;span class=&#34;math inline&#34;&gt;\(k_2\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(l_{BC}\)&lt;/span&gt; 的斜率。&lt;/p&gt;
&lt;p&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(A,B\)&lt;/span&gt; 代入，我们得知：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(k_1\leqslant s_i\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(k_1&amp;gt;s_i\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(k_2\leqslant s_i\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(k_2&amp;gt;s_i\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;明显 &lt;span class=&#34;math inline&#34;&gt;\(k_1&amp;lt;k_2\)&lt;/span&gt;。所以 &lt;span class=&#34;math inline&#34;&gt;\(k_1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(k_2\)&lt;/span&gt; 之间只有可能有：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(s_i&amp;lt;k_1&amp;lt;k_2\)&lt;/span&gt;，此时 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 为最优解。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(k_1&amp;lt;s_i&amp;lt;k_2\)&lt;/span&gt;，此时 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 为最优解。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(k_1&amp;lt;k_2&amp;lt;s_i\)&lt;/span&gt;，此时 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 为最优解。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，在下凸的情况中，三个点都有可能是最优解，都需要保留。&lt;/p&gt;
&lt;p&gt;现在呢，所有上凸都被去掉了，只剩下凸，所以大概最后的最优解序列就长这个样子：&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;2.png&#34; alt=&#34;下凸包&#34; /&gt;&lt;figcaption&gt;下凸包&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;del&gt;下 秃 包&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;反过来看就是 lifan 的脑袋了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;观察发现，斜率是从左往右递增的。&lt;/p&gt;
&lt;p&gt;所以，我们考虑用单调队列来当这个「最优解序列」。&lt;/p&gt;
&lt;h5 id=&#34;维护队头&#34;&gt;维护队头&lt;/h5&gt;
&lt;p&gt;即保证队头元素为最优解。&lt;/p&gt;
&lt;p&gt;设队头为 &lt;span class=&#34;math inline&#34;&gt;\(q_l\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;如果 &lt;span class=&#34;math inline&#34;&gt;\(q_{l+1}\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(q_l\)&lt;/span&gt; 形成的斜率 &lt;span class=&#34;math inline&#34;&gt;\(\leqslant s_i\)&lt;/span&gt;，根据上面推出来的玩意儿，得到 &lt;span class=&#34;math inline&#34;&gt;\(q_{l+1}\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(q_l\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那还要 &lt;span class=&#34;math inline&#34;&gt;\(q_l\)&lt;/span&gt; 干啥，直接 &lt;code&gt;l++&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&#34;更新-dp-值&#34;&gt;更新 DP 值&lt;/h5&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(f_i=f_{q_l}-2\times s_i\times s_{q_l}+{s_{q_l}}^2+{s_i}^2+M\)&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;维护队尾&#34;&gt;维护队尾&lt;/h5&gt;
&lt;p&gt;即保证里面塞的点相邻两个的斜率递增。&lt;/p&gt;
&lt;p&gt;设队尾为 &lt;span class=&#34;math inline&#34;&gt;\(q_r\)&lt;/span&gt;，我们要往最优解队列里 &lt;code&gt;push&lt;/code&gt; 一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;若队尾两个点 &lt;span class=&#34;math inline&#34;&gt;\(q_r,q_{r-1}\)&lt;/span&gt; 形成的斜率比 &lt;span class=&#34;math inline&#34;&gt;\(i,q_r\)&lt;/span&gt; 形成的斜率大，那么&lt;code&gt;push(i)&lt;/code&gt;后，整个队列的斜率就不再单调递增，所以此时要将&lt;code&gt;r--&lt;/code&gt;。（因为 &lt;a href=&#34;https://www.cnblogs.com/XSC062/p/14383610.html&#34;&gt;上一篇关于单调队列的博客&lt;/a&gt; 中讲到的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 必须入队，只能委屈一下 &lt;span class=&#34;math inline&#34;&gt;\(q_r\)&lt;/span&gt; 了）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;众所周知，斜率是个浮点数。为了避免损失精度造成的一些惨案，我们交叉相乘，将分子、分母分开处理。&lt;/p&gt;
&lt;p&gt;以及时刻都要保证队列中至少有两个点，因为要访问 &lt;span class=&#34;math inline&#34;&gt;\(q_l,q_{l+1}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(q_r,q_{r-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;code&#34;&gt;Code&lt;/h4&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
const int maxn = 5e5 + 5;
int n, m, l, r;
int f[maxn], c[maxn], q[maxn];
inline int getDP(int i, int j) &amp;#123;
    return f[j] + m + (c[i] - c[j]) * (c[i] - c[j]);
&amp;#125;
inline int getup(int j, int k)&amp;#123;
    return f[j] + c[j] * c[j] - f[k] - c[k] * c[k]; // 计算分子的值
&amp;#125;
inline int getdown(int j, int k) &amp;#123;
    return (c[j] - c[k]) * 2; // 计算分母的值
&amp;#125;
int main()&amp;#123;
    while (~scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;n, &amp;amp;m)) &amp;#123;
        l = r = 1; // 凡是涉及到前缀和的单调队列，队列中必须存在初始 0
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            scanf(&amp;quot;%d&amp;quot;, &amp;amp;c[i]); // c 自给自足
            c[i] += c[i - 1];
            // # 维护队头
            // 注意此处的条件为 l &amp;lt; r，因为队列中至少需要存在两个点
            while (l &amp;lt; r &amp;amp;&amp;amp; getup(q[l+1], q[l]) &amp;lt;= c[i] * getdown(q[l + 1],q[l]))
                l++;
            // # 转移状态
            f[i] = getDP(i, q[l]);
            // # 维护队尾
            while(l &amp;lt; r&amp;amp;&amp;amp; getup(i, q[r]) * getdown(q[r], q[r-1]) &amp;lt;= getup(q[r] ,q[r - 1]) * getdown(i, q[r]))
                r--;
            q[++r] = i;
        &amp;#125;
        printf(&amp;quot;%d\n&amp;quot;,f[n]);
    &amp;#125;
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在对 DP 式变形时，我们最好将其化为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{(j)-(k)}{(j)-(k)}&amp;lt;x\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{(j)-(k)}{(j)-(k)}&amp;gt;x\)&lt;/span&gt; 的形式。&lt;/p&gt;
&lt;p&gt;这个板子只适用于维护下凸包的情况。当中间的符号为 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;\)&lt;/span&gt; 时，我们会在这份代码上稍作改动，维护一个上凸包，后文会提到有关内容。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;玩具装箱&#34;&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3195&#34;&gt;玩具装箱&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/10188&#34;&gt;双倍经验&lt;/a&gt; | &lt;a href=&#34;https://www.acwing.com/problem/content/1094/&#34;&gt;三倍经验&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从今往后我们就只讲怎么推式子，不再证明下凸等性质了。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个玩具放完后的最小费用。 &lt;span class=&#34;math display&#34;&gt;\[
f_i=\min\{f_j+(i-j-1+\sum\limits_{k=i}^jC_k-L)^2\}
\]&lt;/span&gt; 为了让这个式子好拆，我们在一开始让 &lt;code&gt;l++&lt;/code&gt;，并且 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 再次自给自足，为输入的 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 的前缀和数组。&lt;/p&gt;
&lt;p&gt;于是式子就变成： &lt;span class=&#34;math display&#34;&gt;\[
f_i=\min\{f_j+(i-j-L+C_i-C_j)^2\}
\]&lt;/span&gt; 明显硬拆会死人。（反正我试过，比较适合用来发泄&lt;/p&gt;
&lt;p&gt;所以我们把式子变成这样： &lt;span class=&#34;math display&#34;&gt;\[
f_i=\min\{f_j+((C_i+i)-(C_j+j)-L)^2\}
\]&lt;/span&gt; 既然 &lt;span class=&#34;math inline&#34;&gt;\(C_i\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(C_j\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 是对应的，那么直接预处理，给 &lt;span class=&#34;math inline&#34;&gt;\(C_i\)&lt;/span&gt; 加上 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 不就行了？&lt;/p&gt;
&lt;p&gt;现在这个 &lt;span class=&#34;math inline&#34;&gt;\(C_i\)&lt;/span&gt; 的含义和实现就变得有点曲折难懂了。&lt;/p&gt;
&lt;p&gt;具体实现如下：&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
    scanf(&amp;quot;%lld&amp;quot;, &amp;amp;c[i]);
    c[i] += c[i - 1];
&amp;#125;
for (int i = 1; i &amp;lt;= n; ++i)
    c[i] += i;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也就是说，&lt;span class=&#34;math inline&#34;&gt;\(C_i\)&lt;/span&gt; 是在前缀和的基础上加了一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，注意不能把 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 也一起前缀和了。&lt;/p&gt;
&lt;p&gt;然后式子就变成了这样： &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\min\{f_j+(C_i-C_j-L)^2\}
\\
&amp;amp;=\min\{f_j+{C_i}^2+{C_j}^2+L^2-2\times C_i\times C_j-2\times C_i\times L+2\times C_j\times L\}
\\
&amp;amp;=\min\{f_j+{C_j}^2-2\times C_i\times C_j+2\times C_j\times L\}+{C_i}^2+L^2-2\times C_i\times L
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;lt;k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;得： &lt;span class=&#34;math display&#34;&gt;\[
f_j+{C_j}^2-2\times C_i\times C_j+2\times C_j\times L&amp;lt;f_k+{C_k}^2-2\times C_i\times C_k+2\times C_k\times L
\\
f_j-f_k+{C_j}^2-{C_k}^2+2\times C_j\times L-2\times C_k\times L&amp;lt;2\times C_i\times C_j-2\times C_i\times C_k
\\
f_j-f_k+{C_j}^2-{C_k}^2+2\times C_j\times L-2\times C_k\times L&amp;lt;2\times(C_j-C_k)\times C_i
\\
\dfrac{f_j-f_k+{C_j}^2-{C_k}^2}{2\times(C_j-C_k)}&amp;lt;C_i
\\
\dfrac{(f_j+{C_j}^2)-(f_k+{C_k}^2)}{(2\times C_j)-(2\times C_k)}&amp;lt;C_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#define int long long
const int maxn = 5e5 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int n, m, h, t;
int c[maxn], q[maxn], f[maxn];
#define nec getchar
inline bool read(int &amp;amp;x) &amp;#123;
    char ch = nec();
    bool f = 0; x = 0;
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1; ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
inline int getup(int j, int k) &amp;#123;
    return (f[j] + c[j] * c[j] + 2 * c[j] * m)
           - (f[k] + c[k] * c[k] + 2 * c[k] * m);
&amp;#125;
inline int getdown(int j, int k) &amp;#123;
    return (2 * c[j]) - (2 * c[k]);
&amp;#125;
inline int getDP(int i, int j) &amp;#123;
    return f[j] + (c[i] - c[j] - m) * (c[i] - c[j] - m);
&amp;#125;
signed main() &amp;#123;
    read(n); read(m); h = t = 1; ++m;
    for (int i = 1; i &amp;lt;= n; ++i)
        read(c[i]), c[i] += c[i - 1];
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        c[i] += i;
        while (h &amp;lt; t &amp;amp;&amp;amp; getup(q[h + 1], q[h]) &amp;lt;
               c[i] * getdown(q[h + 1], q[h])) ++h;
        f[i] = getDP(i, q[h]);
        while (h &amp;lt; t
               &amp;amp;&amp;amp; getup(i, q[t]) * getdown(q[t], q[t - 1]) &amp;lt;=
               getdown(i, q[t]) * getup(q[t], q[t - 1])) --t;
        q[++t] = i;
    &amp;#125;
    printf(&amp;quot;%lld&amp;quot;, f[n]);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;任务安排-1&#34;&gt;&lt;a href=&#34;https://loj.ac/p/10184&#34;&gt;任务安排 1&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/problem/content/302/&#34;&gt;双倍经验&lt;/a&gt; | &lt;a href=&#34;https://www.luogu.com.cn/problem/P2365&#34;&gt;三倍经验&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感谢蓝书。这里按着蓝书上的思维走。&lt;/p&gt;
&lt;h4 id=&#34;解法一&#34;&gt;解法一&lt;/h4&gt;
&lt;p&gt;暴力。&lt;/p&gt;
&lt;p&gt;此处的 &lt;span class=&#34;math inline&#34;&gt;\(t,c\)&lt;/span&gt; 为输入的 &lt;span class=&#34;math inline&#34;&gt;\(t,c\)&lt;/span&gt; 的前缀和数组。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 为前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个任务分成 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 批的最小费用。&lt;/p&gt;
&lt;p&gt;故 &lt;span class=&#34;math inline&#34;&gt;\(S\times j+t_i\)&lt;/span&gt; 为第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个任务的完成时间。&lt;/p&gt;
&lt;p&gt;得出状态转移方程（&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 枚举上一批任务结束位置）： &lt;span class=&#34;math display&#34;&gt;\[
f_{i,j}=\min\limits_{0\leqslant k&amp;lt;i}\{f_{k,j-1}+(S\times j+t_i)\times(c_i-c_k)\}
\]&lt;/span&gt; 时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
#define int long long
const int inf = 1e18;
const int maxn = 5005;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int f[maxn][maxn];
int n, s, ans = inf;
int t[maxn], c[maxn];
inline int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
#ifdef ONLINE_JUDGE
inline int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF; p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
inline bool read(int &amp;amp;x) &amp;#123;
    char ch = nec();
    bool f = 0; x = 0;
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
signed main() &amp;#123;
    read(n); read(s);
    memset(f, 0x3f, sizeof (f));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(t[i]); read(c[i]);
        t[i] += t[i - 1];
        c[i] += c[i - 1];
        f[i][1] = (s + t[i]) * c[i]; // 初始化
    &amp;#125;
    for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 2; j &amp;lt;= i; ++j) &amp;#123;
            for (int k = 1; k &amp;lt; i; ++k)
                f[i][j] = min(f[i][j], f[k][j - 1] + (t[i] + s * j) * (c[i] - c[k]));
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i)
        ans = min(ans, f[n][i]);
    printf(&amp;quot;%lld&amp;quot;, ans);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;del&gt;亲测 TLE 70&lt;/del&gt;&lt;/p&gt;
&lt;h4 id=&#34;解法二&#34;&gt;解法二&lt;/h4&gt;
&lt;p&gt;脑子炸了，想了好久才想明白这个优化的正确性。&lt;/p&gt;
&lt;p&gt;思考，以上代码需要 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 这一维的根本原因是什么？&lt;/p&gt;
&lt;p&gt;因为我们无法确定之前已经划分了多少批，也就是无法确定 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的个数。&lt;/p&gt;
&lt;p&gt;换个角度思考，我们无法确定之前，却可以确定之后。&lt;/p&gt;
&lt;p&gt;什么意思呢？如果我们在任务 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处划分，那么任务 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 以及任务 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 以后的所有任务的执行时间都会延后 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;因为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 以后的状态也会使用 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 的值，我们在计算 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 时就将 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 提出来，提前把后面的 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 乘上不就行了？&lt;/p&gt;
&lt;p&gt;中间的结果不对劲也无所谓，只要最后的答案是对的就行了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是说，我们没有直接求出每批任务的完成时刻，而是在一批任务&lt;strong&gt;「开始」&lt;/strong&gt;对后续任务产生影响时，就先把费用累加到答案中。这是一种名为&lt;strong&gt;「费用提前计算」&lt;/strong&gt;的经典思想。&lt;/p&gt;
&lt;p align=&#34;right&#34;&gt;
——李煜东《算法竞赛进阶指南》
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;状态转移方程： &lt;span class=&#34;math display&#34;&gt;\[
f_i=\min\limits_{0\leqslant j&amp;lt;i}\{f_j+(c_i-c_j)\times t_i+s\times(c_n-c_j)\}
\]&lt;/span&gt; 此处，&lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 没有具体含义。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
#define int long long
const int maxn = 1e4 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int n, s;
int f[maxn], t[maxn], c[maxn];
inline int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
#ifdef ONLINE_JUDGE
inline int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF; p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
inline bool read(int &amp;amp;x) &amp;#123;
    char ch = nec();
    bool f = 0; x = 0;
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
signed main() &amp;#123;
    read(n); read(s);
    memset(f, 0x3f, sizeof (f));
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(t[i]); read(c[i]);
        t[i] += t[i - 1];
        c[i] += c[i - 1];
    &amp;#125;
    f[0] = 0;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        for (int j = 0; j &amp;lt; i; ++j)
            f[i] = min(f[i], f[j] + t[i]* (c[i] - c[j]) + s * (c[n] - c[j]));
    &amp;#125;
    printf(&amp;quot;%lld&amp;quot;, f[n]);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;任务安排-2&#34;&gt;&lt;a href=&#34;https://loj.ac/p/10185&#34;&gt;任务安排 2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/problem/content/303/&#34;&gt;双倍经验&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的范围变大了，&lt;span class=&#34;math inline&#34;&gt;\(n^2\)&lt;/span&gt; 过不了。&lt;/p&gt;
&lt;p&gt;这不随手加个斜率优化的事儿吗。&lt;/p&gt;
&lt;p&gt;我们继续瞎搞这个式子。 &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\min\{f_j+(c_i-c_j)\times t_i+s\times(c_n-c_j)\}
\\
&amp;amp;=\min\{f_j+c_i\times t_i-c_j\times t_i+s\times c_n-s\times c_j\}
\\
&amp;amp;=\min\{f_j-c_j\times t_i-s\times c_j\}+c_i\times t_i+s\times c_n
\end{aligned}
\]&lt;/span&gt; 令 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;lt;k\)&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;则有： &lt;span class=&#34;math display&#34;&gt;\[
f_j-c_j\times t_i-s\times c_j&amp;lt;f_k-c_k\times t_i-s\times c_k
\\
f_j-f_k-s\times c_j+s\times c_k&amp;lt;c_j\times t_i-c_k\times t_i
\\
f_j-f_k-s\times c_j+s\times c_k&amp;lt;t_i\times(c_j-c_k)
\\
\dfrac{(f_j-s\times c_j)-(f_k-s\times c_k)}{(c_j)-(c_k)}&amp;lt;t_i
\]&lt;/span&gt; 然后就是老套路。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#define int long long
const int maxn = 5e5 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int n, s, L, R;
int f[maxn], t[maxn], c[maxn], q[maxn];
#define nec getchar
inline bool read(int &amp;amp;x) &amp;#123;
    char ch = nec();
    bool f = 0; x = 0;
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1; ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
inline int getup(int j, int k) &amp;#123; return (f[j] - s * c[j]) - (f[k] - s * c[k]); &amp;#125;
inline int getdown(int j, int k) &amp;#123; return (c[j]) - (c[k]); &amp;#125;
inline int getDP(int i, int j) &amp;#123; return f[j] + (c[i] - c[j]) * t[i] + s * (c[n] - c[j]); &amp;#125;
signed main() &amp;#123;
    read(n); read(s);
    L = R = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(t[i]); read(c[i]);
        t[i] += t[i - 1];
        c[i] += c[i - 1];
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        while (L &amp;lt; R &amp;amp;&amp;amp; getup(q[L + 1], q[L]) &amp;lt;= t[i] * getdown(q[L + 1], q[L]))
            ++L;
        f[i] = getDP(i, q[L]);
        while (L &amp;lt; R &amp;amp;&amp;amp; getup(i, q[R]) * getdown(q[R], q[R - 1]) &amp;lt;= getdown(i, q[R]) * getup(q[R], q[R - 1]))
            --R;
        q[++R] = i;
    &amp;#125;
    printf(&amp;quot;%lld&amp;quot;, f[n]);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;任务安排-3&#34;&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5785&#34;&gt;任务安排 3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/10186&#34;&gt;双倍经验&lt;/a&gt; | &lt;a href=&#34;https://www.acwing.com/problem/content/304/&#34;&gt;三倍经验&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 有可能是负数。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; （输入）有可能为负，代表着 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;（前缀和）不再单调递增，用不单调的对象作为单调队列的条件一看就十分不讲武德，这样维护出来的队头显然不是正确答案。&lt;/p&gt;
&lt;p&gt;后面的 &lt;span class=&#34;math inline&#34;&gt;\(t,c\)&lt;/span&gt; 默认为前缀和。&lt;/p&gt;
&lt;p&gt;我们感性证明一下。&lt;/p&gt;
&lt;p&gt;一个最普通的例子，假设输入了一个负数，导致 &lt;span class=&#34;math inline&#34;&gt;\(t_i&amp;lt;t_{i-1}\)&lt;/span&gt;，且有一斜率 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;t_i\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;t_{i-1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么在 &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt; 时，它就被维护队头的操作剔掉了，但也许它凑巧就是 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的最优解，呜呼哀哉。&lt;/p&gt;
&lt;p&gt;于是我们不能删队头元素了。那怎么查询最优解呢？&lt;/p&gt;
&lt;p&gt;单调队列里装的始终还是个具有单调性的下凸包，于是我们可以在队列中二分一个 &lt;span class=&#34;math inline&#34;&gt;\(pos\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(pos\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(pos-1\)&lt;/span&gt; 形成的斜率比 &lt;span class=&#34;math inline&#34;&gt;\(t_i\)&lt;/span&gt; 小，&lt;span class=&#34;math inline&#34;&gt;\(pos+1\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(pos\)&lt;/span&gt; 形成的斜率比 &lt;span class=&#34;math inline&#34;&gt;\(t_i\)&lt;/span&gt; 大。&lt;/p&gt;
&lt;p&gt;然后把 &lt;span class=&#34;math inline&#34;&gt;\(pos\)&lt;/span&gt; 当成 &lt;span class=&#34;math inline&#34;&gt;\(q_l\)&lt;/span&gt; 来处理就好了。&lt;/p&gt;
&lt;p&gt;队尾还是维护一个下凸。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log_2n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;强烈建议不要去动 AcWing 版本的那道。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;最后两组数据堪称毒瘤。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;卡 &lt;code&gt;long long&lt;/code&gt; 乘法，卡 &lt;code&gt;__int128&lt;/code&gt; 时限，卡 &lt;code&gt;double&lt;/code&gt;精度，非 T 即 WA。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;反正我搞了半个小时硬是没有搞出来。&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#define int long long
const int maxn = 3e5 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int n, s, L, R;
int f[maxn], t[maxn], c[maxn], q[maxn];
#define nec getchar
inline bool read(int &amp;amp;x) &amp;#123;
    char ch = nec();
    bool f = 0; x = 0;
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1; ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
inline int getup(int j, int k) &amp;#123; return (f[j] - s * c[j]) - (f[k] - s * c[k]); &amp;#125;
inline int getdown(int j, int k) &amp;#123; return (c[j]) - (c[k]); &amp;#125;
inline int getDP(int i, int j) &amp;#123; return f[j] + t[i] * (c[i] - c[j]) + s * (c[n] - c[j]); &amp;#125;
inline int Func(int u) &amp;#123;
    if (L == R) return q[L];
    int l = L, r = R;
    while (l &amp;lt; r) &amp;#123;
        int mid = l + r &amp;gt;&amp;gt; 1;
        if (getup(q[mid + 1], q[mid]) &amp;lt;= u * getdown(q[mid + 1], q[mid]))
            l = mid + 1;
        else r = mid;
    &amp;#125;
    return l;
&amp;#125;
signed main() &amp;#123;
    read(n); read(s);
    L = R = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(t[i]); read(c[i]);
        t[i] += t[i - 1];
        c[i] += c[i - 1];
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        int Best = Func(t[i]);
        f[i] = getDP(i, q[Best]);
        while (L &amp;lt; R &amp;amp;&amp;amp; getup(i, q[R]) * getdown(q[R], q[R - 1]) &amp;lt;= getdown(i, q[R]) * getup(q[R], q[R - 1]))
            --R;
        q[++R] = i;
    &amp;#125;
    printf(&amp;quot;%lld&amp;quot;, f[n]);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;土地购买&#34;&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2900&#34;&gt;土地购买&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先我们想明白一件事情：如果一块土地，有另一块土地的长和宽都比它大，那就不用再理它了，直接从总序列里剔除。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;struct _ &amp;#123;
    int w, l;
    bool operator&amp;lt; (const _ q) const &amp;#123;
        return w == q.w ? l &amp;gt; q.l : w &amp;gt; q.w;
    &amp;#125;
&amp;#125; a[maxn];
...

std::sort(a + 1, a + n + 1);
for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
    if (a[i].l &amp;gt; a[cnt].l)
        a[++cnt] = a[i];
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后就推式子。&lt;/p&gt;
&lt;p&gt;贪心地想，在前面的操作后，&lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 是一个 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 递减，&lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 递增的土地序列。&lt;/p&gt;
&lt;p&gt;所以我们选择将连续的一段区间分为一组，这样的话，一个组里的一段连续的土地 &lt;span class=&#34;math inline&#34;&gt;\([x,y]\)&lt;/span&gt; 就只有 &lt;span class=&#34;math inline&#34;&gt;\(w_x\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(l_y\)&lt;/span&gt; 起了作用，又没有中间那一段的事了。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示分配完第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 块土地后的最小花费。&lt;/p&gt;
&lt;p&gt;则有： &lt;span class=&#34;math display&#34;&gt;\[
f_i=\min\{f_j+w_{j+1}\times l_i\}
\]&lt;/span&gt; 令 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;则有： &lt;span class=&#34;math display&#34;&gt;\[
f_j+w_{j+1}\times l_i&amp;lt;f_k+w_{k+1}\times l_i
\\
f_j-f_k&amp;lt;(-w_{j+1}+w_{k+1})\times l_i
\\
\dfrac{(f_j)-(f_k)}{(-w_{j+1})+(w_{k+1})}&amp;lt;l_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#define int long long
const int maxn = 5e4 + 5;
struct _ &amp;#123;
    int w, l;
    bool operator&amp;lt; (const _ q) const&amp;#123;
        return w == q.w ? l &amp;gt; q.l : w &amp;gt; q.w;
    &amp;#125;
&amp;#125;;
_ a[maxn];
int n, cnt, l, r;
int q[maxn], f[maxn];
int getup(int j, int k) &amp;#123; return f[j] - f[k]; &amp;#125;
int getdown(int j,int k) &amp;#123; return a[k + 1].w - a[j + 1].w; &amp;#125;
int getDP(int i,int j) &amp;#123; return f[j] + a[j + 1].w * a[i].l; &amp;#125;
signed main() &amp;#123;
    scanf(&amp;quot;%lld&amp;quot;, &amp;amp;n);
    for(int i = 1; i &amp;lt;= n; ++i)
        scanf(&amp;quot;%lld %lld&amp;quot;, &amp;amp;a[i].w, &amp;amp;a[i].l);
    std::sort(a + 1, a + n + 1);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        if (a[i].l &amp;gt; a[cnt].l)
            a[++cnt] = a[i];
    &amp;#125;
    n = cnt; l = r = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        while (l &amp;lt; r &amp;amp;&amp;amp; getup(q[l + 1], q[l]) &amp;lt;= a[i].l * getdown(q[l + 1], q[l]))
            l++;
        f[i] = getDP(i, q[l]);
        while (l &amp;lt; r &amp;amp;&amp;amp; getup(i, q[r]) * getdown(q[r], q[r - 1]) &amp;lt;= getup(q[r],q[r - 1]) * getdown(i, q[r]))
            r--;
        q[++r] = i;
    &amp;#125;
    printf(&amp;quot;%lld&amp;quot;, f[n]);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;仓库建设&#34;&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2120&#34;&gt;仓库建设&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/10189&#34;&gt;双倍经验&lt;/a&gt; | &lt;a href=&#34;https://www.acwing.com/problem/content/description/1095/&#34;&gt;三倍经验&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 工厂建立仓库的最小花费。&lt;/p&gt;
&lt;p&gt;则有： &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\min\{f_j+\sum\limits_{k=j+1}^{i-1}[(x_i-x_k)\times p_k]+c_i\}
\\
&amp;amp;=\min\{f_j+\sum\limits_{k=j+1}^{i-1}(x_i\times p_k)-\sum\limits_{k=j+1}^{i-1}(x_k\times p_k)\}+c_i
\\
&amp;amp;=\min\{f_j+x_i\times\sum\limits_{k=j+1}^{i-1}p_k-\sum\limits_{k=j+1}^{i-1}(x_k\times p_k)\}+c_i
\end{aligned}
\]&lt;/span&gt; 利用前缀和优化：设 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的前缀和数组，&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(x_i\times p_i\)&lt;/span&gt; 的前缀和数组。&lt;/p&gt;
&lt;p&gt;则原式可化为： &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\min\{f_j+x_i\times(a_{i-1}-a_j)-(b_{i-1}-b_j)\}+c_i
\\
&amp;amp;=\min\{f_j+x_i\times a_{i-1}-x_i\times a_j-b_{i-1}+b_j\}+c_i
\\
&amp;amp;=\min\{f_j-x_i\times a_j+b_j\}+x_i\times a_{i-1}-b_{i-1}+c_i
\end{aligned}
\]&lt;/span&gt; 令 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;则有： &lt;span class=&#34;math display&#34;&gt;\[
f_j-x_i\times a_j+b_j&amp;lt;f_k-x_i\times a_k+b_k
\\
f_j-f_k+b_j-b_k&amp;lt;x_i\times a_j-x_i\times a_k
\\
\dfrac{(f_j+b_j)-(f_k+b_k)}{a_j-a_k}&amp;lt;x_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;想感受人生的同学们可以尝试做一下 AcWing 那个版本，非 MLE 即 WA，爽到炸。&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#define int long long
const int maxn = 1e6 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int n, L, R;
int f[maxn], x[maxn], p[maxn];
int a[maxn], b[maxn], c[maxn], q[maxn];
#ifdef ONLINE_JUDGE
inline int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF; p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
inline bool read(int &amp;amp;x) &amp;#123;
    char ch = nec();
    bool f = 0; x = 0;
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
inline int getup(int j, int k) &amp;#123; return (f[j] + b[j]) - (f[k] + b[k]); &amp;#125;
inline int getdown(int j, int k) &amp;#123; return (a[j]) - (a[k]); &amp;#125;
inline int getDP(int i, int j) &amp;#123; return f[j] - x[i] * a[j] + b[j] + x[i] * a[i - 1] - b[i - 1] + c[i]; &amp;#125;
signed main() &amp;#123;
    read(n); L = R = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(x[i]); read(p[i]); read(c[i]);
        a[i] = a[i - 1] + p[i];
        b[i] = b[i - 1] + x[i] * p[i];
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        while (L &amp;lt; R &amp;amp;&amp;amp; getup(q[L + 1], q[L]) &amp;lt;= x[i] * getdown(q[L + 1], q[L]))
            ++L;
        f[i] = getDP(i, q[L]);
        while (L &amp;lt; R &amp;amp;&amp;amp; getup(i, q[R]) * getdown(q[R], q[R - 1]) &amp;lt;= getdown(i, q[R]) * getup(q[R], q[R - 1]))
            --R;
        q[++R] = i;
    &amp;#125;
    printf(&amp;quot;%lld&amp;quot;, f[n]);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;锯木厂选址&#34;&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4360&#34;&gt;锯木厂选址&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/10192&#34;&gt;双倍经验&lt;/a&gt; | &lt;a href=&#34;https://www.acwing.com/problem/content/1097/&#34;&gt;三倍经验&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和仓库建设很像。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(A_i=\sum\limits_{j=i}^nd_j\)&lt;/span&gt;，表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 棵树与山脚的距离；&lt;span class=&#34;math inline&#34;&gt;\(B_i=\sum\limits_{j=1}^iw_j\)&lt;/span&gt;，表示 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 的前缀和；&lt;span class=&#34;math inline&#34;&gt;\(S=\sum\limits_{i=1}^nA_i\times w_i\)&lt;/span&gt;，表示将所有树全部运到山脚的花费总和。&lt;/p&gt;
&lt;p&gt;假设在 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 处建立第 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 座锯木厂，在 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 处建立第 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 座锯木厂，此时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于第 &lt;span class=&#34;math inline&#34;&gt;\(1\sim j\)&lt;/span&gt; 棵树来说，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 比实际情况多运了 &lt;span class=&#34;math inline&#34;&gt;\(A_j\)&lt;/span&gt; 的路程；&lt;/li&gt;
&lt;li&gt;对于第 &lt;span class=&#34;math inline&#34;&gt;\(j+1\sim i\)&lt;/span&gt; 棵树来说，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 比实际情况多运了 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 的路程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将对应的多运的距离与花费相乘的结果，让 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 将其减去即可。 &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
ans&amp;amp;=\min\{S-A_j\times B_j-(B_i-B_j)\times A_i\}\\
   &amp;amp;=\min\{A_i\times B_j-A_j\times B_j\}+S-A_i\times B_i
\end{aligned}
\]&lt;/span&gt; 令 &lt;span class=&#34;math inline&#34;&gt;\(j&amp;lt;k\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，则有： &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
A_i\times B_j-A_j\times B_j&amp;amp;&amp;lt;A_i\times B_k-A_k\times B_k\\
-A_j\times B_j+A_k\times B_k&amp;amp;&amp;lt;-A_i\times B_j+A_i\times B_k\\
\dfrac{-A_j\times B_j+A_k\times B_k}{-B_j+B_k}&amp;amp;&amp;lt;A_i\\
\dfrac{A_j\times B_j-A_k\times B_k}{B_j-B_k}&amp;amp;&amp;lt;A_i\\
\end{aligned}
\]&lt;/span&gt; 其中，&lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 具有单调性，可以直接套板子。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#define int long long
const int inf = 1e18;
const int maxn = 1e6 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int w[maxn], d[maxn];
int n, L, R, s, ans = inf;
int q[maxn], a[maxn], b[maxn];
inline int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
inline int getDP(int i, int j) &amp;#123;
    return s - a[j] * b[j] - (b[i] - b[j]) * a[i];
&amp;#125;
inline int getup(int j, int k) &amp;#123;
    return a[j] * b[j] - a[k] * b[k];
&amp;#125;
inline int getdown(int j, int k) &amp;#123;
    return b[j] - b[k];
&amp;#125;
#ifdef ONLINE_JUDGE
inline int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF; p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
inline bool read(int &amp;amp;x) &amp;#123;
    char ch = nec();
    bool f = 0; x = 0;
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
signed main() &amp;#123;
    read(n);
    L = R = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(w[i]), read(d[i]);
        b[i] = b[i - 1] + w[i];
    &amp;#125;
    for (int i = n; i; --i) &amp;#123;
        a[i] = a[i + 1] + d[i];
        s += a[i] * w[i];
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        while (L &amp;lt; R &amp;amp;&amp;amp; getup(q[L + 1], q[L]) &amp;gt;= a[i] * getdown(q[L + 1], q[L]))
            ++L;
        ans = min(ans, getDP(i, q[L]));
        while (L &amp;lt; R &amp;amp;&amp;amp; getup(i, q[R]) * getdown(q[R], q[R - 1]) &amp;gt;= getup(q[R], q[R - 1]) * getdown(i, q[R]))
            --R;
        q[++R] = i;
    &amp;#125;
    printf(&amp;quot;%lld&amp;quot;, ans);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;cats-transport&#34;&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/CF311B&#34;&gt;Cats Transport&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/problem/content/305/&#34;&gt;双倍经验&lt;/a&gt; | &lt;a href=&#34;http://codeforces.com/problemset/problem/311/B&#34;&gt;三倍经验&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;经验：洛谷的题面比蓝书和 AcWing 上的标准多了，蓝书的题意不清。&lt;/p&gt;
&lt;p&gt;研究表明，边猛灌养乐多边看蓝书有助于理解。&lt;/p&gt;
&lt;p&gt;这道题难在推式子。&lt;del&gt;不然还能难在哪里&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 表示要接到第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 只猫的最早出发时间，也就是说，在此时出发，猫 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的等待时间为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;即 &lt;span class=&#34;math inline&#34;&gt;\(A_i=T_i-\sum\limits_{j=1}^{H_i}D_j\)&lt;/span&gt;，也就是出发时间=到达时间-经过时间。&lt;/p&gt;
&lt;p&gt;此时我们可以把其他所有因素去掉，题意转换为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;已知在 &lt;span class=&#34;math inline&#34;&gt;\(\geqslant A_i\)&lt;/span&gt; 的时刻出发可以接到猫 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; ，在 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 次出发次数的限制内接到所有猫，猫的等待时间之和最小是多少？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设饲养员在 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 时刻出发，猫 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的等待时间就是 &lt;span class=&#34;math inline&#34;&gt;\(t-A_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;对 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 从小到大排序。&lt;/p&gt;
&lt;p&gt;显然，一次接一段连续的猫，花费自然是最小的。&lt;/p&gt;
&lt;p&gt;若我们要接 &lt;span class=&#34;math inline&#34;&gt;\([k+1,j]\)&lt;/span&gt; 范围内的猫，它们的等待时间之和就是： &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\sum\limits_{p=k+1}^{j}(A_j-A_p)&amp;amp;=[j-(k+1)+1]A_j-\sum\limits_{p=k+1}^{j}A_p
\\
&amp;amp;=(j-k)\times A_j-(S_j-S_k)
\\
&amp;amp;=j\times A_j-k\times A_j-S_j+S_k
\end{aligned}
\]&lt;/span&gt; 其中 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 的前缀和。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个饲养员带走前 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 只猫的最小花费。&lt;/p&gt;
&lt;p&gt;则有： &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j}&amp;amp;=\min\{f_{i-1,k}+j\times A_j-k\times A_j-S_j+S_k\}
\\
&amp;amp;=\min\{f_{i-1,k}-A_j\times k+S_k\}+A_j\times j-S_j
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们将循环地枚举每个饲养员的循环变量 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 看做常量。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;，则有： &lt;span class=&#34;math display&#34;&gt;\[
f_{i-1,x}-A_j\times x+S_x&amp;lt;f_{i-1,y}-A_j\times y+S_y
\\
\dfrac{(f_{i-1,x}+S_x)-(f_{i-1,y+S_y})}{x-y}&amp;lt;A_j
\]&lt;/span&gt; &lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 初始化为极大值。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#define int long long
const int maxp = 105;
const int maxn = 1e5 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int f[maxp][maxn];
int n, m, p, L, R, t, h;
int q[maxn], a[maxn], d[maxn], s[maxn];
inline int getDP(int i, int j, int k) &amp;#123;
    return f[i - 1][k] + (j - k) * a[j] - (s[j] - s[k]);
&amp;#125;
inline int getup(int i, int j, int k) &amp;#123;
    return (f[i - 1][j] + s[j]) - (f[i - 1][k] + s[k]);
&amp;#125;
inline int getdown(int j, int k) &amp;#123;
    return (j) - (k);
&amp;#125;
#ifdef ONLINE_JUDGE
inline int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF; p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
inline bool read(int &amp;amp;x) &amp;#123;
    char ch = nec();
    bool f = 0; x = 0;
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
signed main() &amp;#123;
    read(n); read(m); read(p);
    memset(f, 0x3f, sizeof (f));
    for (int i = 2; i &amp;lt;= n; ++i)
        read(d[i]), d[i] += d[i - 1];
    for (int i = 1; i &amp;lt;= m; ++i) &amp;#123;
        read(h); read(t);
        a[i] = t - d[h];
    &amp;#125;
    std::sort(a + 1, a + m + 1);
    for (int i = 1; i &amp;lt;= m; ++i)
        s[i] = s[i - 1] + a[i];
    f[0][0] = 0;
    for (int i = 1; i &amp;lt;= p; ++i) &amp;#123;
        L = R = 1;
        for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;
            while (L &amp;lt; R &amp;amp;&amp;amp; getup(i, q[L + 1], q[L]) &amp;lt;= a[j] * getdown(q[L + 1], q[L]))
                ++L;
            f[i][j] = getDP(i, j, q[L]);
            while (L &amp;lt; R &amp;amp;&amp;amp; getup(i, j, q[R]) * getdown(q[R], q[R - 1]) &amp;lt;= getup(i, q[R], q[R - 1]) * getdown(j, q[R]))
                --R;
            q[++R] = j;
        &amp;#125;
    &amp;#125;
    printf(&amp;quot;%lld&amp;quot;, f[p][m]);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;特别行动队&#34;&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3628&#34;&gt;特别行动队&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/problem/content/337/&#34;&gt;双倍经验&lt;/a&gt; | &lt;a href=&#34;https://loj.ac/p/10190&#34;&gt;三倍经验&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直接推式子。 &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\max\{f_j+a\times(s_i-s_j)^2+b\times(s_i-s_j)+c\ \}\\
&amp;amp;=\max\{f_j+a\times({s_i}^2-2\times s_i\times s_j+{s_j}^2)+b\times s_i-b\times s_j\ \}+c\\
&amp;amp;=\max\{f_j+a\times{s_i}^2-2\times a\times s_i\times s_j+a\times{s_j}^2-b\times s_j\ \}+b\times s_i+c\\
&amp;amp;=\max\{f_j-2\times a\times s_i\times s_j+a\times{s_j}^2-b\times s_j\ \}+a\times{s_i}^2+b\times s_i+c\\
\end{aligned}
\]&lt;/span&gt; 令 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，则有： &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_j-2\times a\times s_i\times s_j+a\times{s_j}^2-b\times s_j&amp;amp;&amp;gt;f_k-2\times a\times s_i\times s_k+a\times{s_k}^2-b\times s_k\\
(f_j+a\times{s_j}^2-b\times s_j)-(f_k+a\times{s_k}^2-b\times s_k)&amp;amp;&amp;gt;(2\times a\times s_i\times s_j)-(2\times a\times s_i\times s_k)\\
\dfrac{(f_j+a\times{s_j}^2-b\times s_j)-(f_k+a\times{s_k}^2-b\times s_k)}{(2\times a\times s_j) - (2\times a\times s_k)}&amp;amp;&amp;gt;s_i\\
\end{aligned}
\]&lt;/span&gt; 我们发现中间的符号是 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;所以我们在弹队头的时候，要把判断条件中的符号反过来。&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#define int long long
const int maxn = 1e6 + 5;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int n, L, R, a, b ,c;
int q[maxn], s[maxn], f[maxn];
inline int getDP(int i, int j) &amp;#123;
    return f[j] + a * (s[i] - s[j]) * (s[i] - s[j]) + b * (s[i] - s[j]) + c;
&amp;#125;
inline int getup(int j, int k) &amp;#123;
    return (f[j] + a * s[j] * s[j] - b * s[j]) - (f[k] + a * s[k] * s[k] - b * s[k]);
&amp;#125;
inline int getdown(int j, int k) &amp;#123;
    return (2 * a * s[j]) - (2 * a * s[k]);
&amp;#125;
#ifdef ONLINE_JUDGE
inline int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF; p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
inline bool read(int &amp;amp;x) &amp;#123;
    char ch = nec();
    bool f = 0; x = 0;
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
signed main() &amp;#123;
    read(n); read(a); read(b); read(c);
    L = R = 1;
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(s[i]), s[i] += s[i - 1];
        while (L &amp;lt; R &amp;amp;&amp;amp; getup(q[L + 1], q[L]) &amp;gt;= s[i] * getdown(q[L + 1], q[L]))
            ++L;
        f[i] = getDP(i, q[L]);
        while (L &amp;lt; R &amp;amp;&amp;amp; getup(i, q[R]) * getdown(q[R], q[R - 1]) &amp;lt;= getup(q[R], q[R - 1]) * getdown(i, q[R]))
            --R;
        q[++R] = i;
    &amp;#125;
    printf(&amp;quot;%lld&amp;quot;, f[n]);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;征途&#34;&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4072&#34;&gt;征途&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://loj.ac/p/2035&#34;&gt;双倍经验&lt;/a&gt; | &lt;a href=&#34;https://www.acwing.com/problem/content/2575/&#34;&gt;三倍经验&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;明显，不化掉 &lt;span class=&#34;math inline&#34;&gt;\(v\times m^2\)&lt;/span&gt; 就无法进行优化。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为当前休息站点与上一休息站点的距离， &lt;span class=&#34;math inline&#34;&gt;\(x_0\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(x_1\sim x_n\)&lt;/span&gt; 的平均数，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的前缀和。 &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
V\times m^2&amp;amp;=[(x_1-x_0)^2+(x_2-x_0)^2+\cdots+(x_m-x_0)^2]\times m
\\
&amp;amp;=m\times \sum\limits_{i=1}^{m}{x_i}^2+(m\times {x_0})^2-2\times (x_0\times m)\times \sum\limits_{i=1}^{m}x_i
\\
&amp;amp;=m\times \sum\limits_{i=1}^{m}{x_i}^2+{S_m}^2-2\times{S_m}^2
\\
&amp;amp;=m\times \sum\limits_{i=1}^{m}{x_i}^2-{S_m}^2
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;span class=&#34;math inline&#34;&gt;\(S_m\)&lt;/span&gt; 是一个定值（即输入所有路的长度和）。&lt;/p&gt;
&lt;p&gt;唯一需要计算的，就是 &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=1}^{m}{x_i}^{2}\)&lt;/span&gt;，所以我们就来 DP 它。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 为输入道路长度的前缀和数组，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 次休息在 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 处时 &lt;span class=&#34;math inline&#34;&gt;\(\min\{\sum\limits_{k=1}^{i}{x_k}^2\}\)&lt;/span&gt; 的值，则有： &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j}&amp;amp;=\min\{f_{i-1,j}+(a_i-a_j)^2\}
\\
&amp;amp;=\min\{f_{i-1,j}+{a_i}^2-2\times a_i\times a_j+{a_j}^2\}
\end{aligned}
\]&lt;/span&gt; 令 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，则有： &lt;span class=&#34;math display&#34;&gt;\[
f_{i-1,j}-2\times a_i\times a_j+{a_j}^2&amp;lt;f_{i-1,k}-2\times a_i\times a_k+{a_k}^2
\\
f_{i-1,j}-f_{i-1,k}+{a_j}^2-{a_k}^2&amp;lt;2\times a_i\times(a_j-a_k)
\\
\dfrac{f_{i-1,j}-f_{i-1,k}+{a_j}^2-{a_k}^2}{2\times(a_j-a_k)}&amp;lt;a_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;初始化。&lt;/p&gt;
&lt;p&gt;将 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 初始化为极大值。&lt;/p&gt;
&lt;p&gt;在 AcWing 上将 &lt;code&gt;memset&lt;/code&gt; 改为初始化 &lt;code&gt;f[0][i] = a[i] * a[i]&lt;/code&gt; 就可以过了，不然会 MLE，也许是因为没开滚动。（本来也用不着滚&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#define int long long
const int inf = 1e18;
const int maxn = 3005;
const int LEN = (1 &amp;lt;&amp;lt; 20);
int f[maxn][maxn];
int a[maxn], q[maxn];
int n, m, L, R, ans = inf;
#ifdef ONLINE_JUDGE
inline int nec(void) &amp;#123;
    static char buf[LEN], *p = buf, *e = buf;
    if (p == e) &amp;#123;
        e = buf + fread(buf, 1, LEN, stdin);
        if (e == buf) return EOF; p = buf;
    &amp;#125;
    return *p++;
&amp;#125;
#else
#define nec getchar
#endif
inline bool read(int &amp;amp;x) &amp;#123;
    char ch = nec();
    bool f = 0; x = 0;
    while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) &amp;#123;
        if (ch == EOF) return 0;
        if (ch == &amp;#39;-&amp;#39;) f = 1;
        ch = nec();
    &amp;#125;
    while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) &amp;#123;
        x = x * 10 + ch - &amp;#39;0&amp;#39;;
        ch = nec();
    &amp;#125;
    if (f) x = -x;
    return 1;
&amp;#125;
inline int min(int x, int y) &amp;#123; return x &amp;lt; y ? x : y; &amp;#125;
int getDP(int i, int j, int k) &amp;#123;
    return f[k - 1][j] + (a[i] - a[j]) * (a[i] - a[j]);
&amp;#125;
int getup(int j, int k, int i) &amp;#123;
    return f[i - 1][j] - f[i - 1][k] + a[j] * a[j] - a[k] * a[k];
&amp;#125;
int getdown(int j, int k) &amp;#123;
    return (a[j] - a[k]) &amp;lt;&amp;lt; 1;
&amp;#125;
signed main()&amp;#123;
    read(n); read(m);
    for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
        read(a[i]);
        a[i] += a[i - 1];
        f[0][i] = a[i] * a[i];
    &amp;#125;
    for (int i = 1; i &amp;lt; m; ++i) &amp;#123;
        L = R = 1; q[L] = i;
        for (int j = i; j &amp;lt;= n; ++j) &amp;#123;
            while (L &amp;lt; R &amp;amp;&amp;amp; getup(q[L + 1], q[L], i) &amp;lt;= a[j] * getdown(q[L + 1], q[L]))
                ++L;
            f[i][j] = getDP(j, q[L], i);
            while (L &amp;lt; R &amp;amp;&amp;amp; getup(i, q[R], i) * getdown(q[R], q[R - 1]) &amp;lt;= getup(q[R], q[R - 1], i) * getdown(i, q[R]))
                --R;
            q[++R] = j;
        &amp;#125;
    &amp;#125;
    printf(&amp;quot;%lld&amp;quot;,m * f[m - 1][n] - a[n] * a[n]);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;柠檬&#34;&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5504&#34;&gt;柠檬&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/problem/content/2396/&#34;&gt;双倍经验&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是边写这篇题解边做的（&lt;/p&gt;
&lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;有一个含有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个元素的序列 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;。将这个序列分成连续的若干段，定义每一段的价值为「在这一段当中任选某个元素的个数的平方再乘上这个元素」的最大值。求将 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 划分后的最大价值。&lt;/p&gt;
&lt;p&gt;不难想到分成的每一段首尾元素必须相等。&lt;/p&gt;
&lt;p&gt;比如有这样一个序列 &lt;span class=&#34;math inline&#34;&gt;\(x,a_1,a_2,a_3,\cdots,a_k,x,y\)&lt;/span&gt; 。假设我们求的是这一段包含 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的个数的平方，那么完全可以将 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 从这一段中分离，单独为一段，明显更优。&lt;/p&gt;
&lt;p&gt;而其他所有情况都是这种情况的拓展。&lt;/p&gt;
&lt;p&gt;于是得到式子： &lt;span class=&#34;math display&#34;&gt;\[
f_i=\max\{f_{j-1}+s_i\times(cnt_i-cnt_j+1)^2\}
\]&lt;/span&gt; 其中 &lt;span class=&#34;math inline&#34;&gt;\(cnt_i\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 已经出现了多少次。&lt;/p&gt;
&lt;p&gt;然后就是套路。 &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_i&amp;amp;=\max\{f_{j-1}+s_i\times({cnt_i}^2+{cnt_j}^2-2\times cnt_i\times cnt_j+2\times cnt_i-2\times cnt_j+1)\}
\\
&amp;amp;=\max\{f_{j-1}+s_i\times{cnt_i}^2+s_i\times{cnt_j}^2-2\times s_i\times cnt_i\times cnt_j+2\times s_i\times cnt_i-2\times s_i\times cnt_j+s_i\}
\\
&amp;amp;=\max\{f_{j-1}+s_i\times {cnt_j}^2-2\times s_i\times cnt_i\times cnt_j-2\times s_i\times cnt_j\}+s_i\times {cnt_i}^2+2\times s_i\times cnt_i+s_i
\end{aligned}
\]&lt;/span&gt; 这次不是 &lt;span class=&#34;math inline&#34;&gt;\(\min\)&lt;/span&gt;，而是 &lt;span class=&#34;math inline&#34;&gt;\(\max\)&lt;/span&gt;，我们还能像以前那样推吗？&lt;/p&gt;
&lt;p&gt;不急，我们先按以前的方法试试，见机行事。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，则有： &lt;span class=&#34;math display&#34;&gt;\[
f_{j-1}+s_i\times {cnt_j}^2-2\times s_i\times cnt_i\times cnt_j-2\times s_i\times cnt_j&amp;gt;f_{k-1}+s_i\times {cnt_k}^2-2\times s_i\times cnt_i\times cnt_k-2\times s_i\times cnt_k
\]&lt;/span&gt; 暴力搞不出来，因为那个 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 乘上的平方项。&lt;/p&gt;
&lt;p&gt;那我们想一个办法，把 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 给灭掉就行了。&lt;/p&gt;
&lt;p&gt;既然我们已知一段的首尾元素必须相等，那不就说明 &lt;span class=&#34;math inline&#34;&gt;\(s_i,s_j,s_k\)&lt;/span&gt; 可以相互替换吗？&lt;/p&gt;
&lt;p&gt;继续搞。 &lt;span class=&#34;math display&#34;&gt;\[
f_{j-1}+s_j\times {cnt_j}^2-2\times s_i\times cnt_i\times cnt_j-2\times s_j\times cnt_j&amp;gt;f_{k-1}+s_k\times {cnt_k}^2-2\times s_i\times cnt_i\times cnt_k-2\times s_k\times cnt_k
\\
f_{j-1}-f_{k-1}+s_j\times {cnt_j}^2-s_k\times {cnt_k}^2-2\times s_j\times cnt_j+2\times s_k\times cnt_k&amp;gt;2\times s_i\times cnt_i\times cnt_j-2\times s_i\times cnt_i\times cnt_k
\\
\dfrac{f_{j-1}-f_{k-1}+s_j\times {cnt_j}^2-s_k\times {cnt_k}^2-2\times s_j\times cnt_j+2\times s_k\times cnt_k}{cnt_j-cnt_k}&amp;gt;2\times s_i\times cnt_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里的符号变成 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;\)&lt;/span&gt; 了。&lt;/p&gt;
&lt;p&gt;易得，这里要维护的是一个斜率单调递减的上凸包最优解序列。&lt;/p&gt;
&lt;p&gt;因为 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 必须与 &lt;span class=&#34;math inline&#34;&gt;\(s_j,s_k\)&lt;/span&gt; 相同，明显要针对每个 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 维护不同的最优解序列，在每次对应的序列中计算。&lt;/p&gt;
&lt;p&gt;维护的斜率单调递减，而对于每一个相等的 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt;， &lt;span class=&#34;math inline&#34;&gt;\(2\times s_i\times cnt_i\)&lt;/span&gt; 一定是单调递增的，导致了这个序列大概长这个样子：斜率单调递减，但末尾的最小的斜率仍大于 &lt;span class=&#34;math inline&#34;&gt;\(2\times s_i\times cnt_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;单调栈可以自行研究，因为作者瞄了一眼时间发现已经是明天了。（什&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include&amp;lt;cstdio&amp;gt;
#include&amp;lt;vector&amp;gt;
using namespace std;
#define int long long
#define top q[x].size() - 1
const int maxn = 1e5 + 5;
const int maxm = 1e4 + 5;
int n;
vector&amp;lt;int&amp;gt; q[maxm]; // 不用 vector 会 MLE
int f[maxn], s[maxn];
int cnt[maxn], tot[maxm];
int getDP(int i,int j)&amp;#123;
    return f[j-1]+(cnt[i]-cnt[j]+1)*(cnt[i]-cnt[j]+1)*s[i];
&amp;#125;
int getup(int j,int k)&amp;#123;
    return f[j-1]-f[k-1]+s[j]*cnt[j]*cnt[j]-s[k]*cnt[k]*cnt[k]-2*s[j]*cnt[j]+2*s[k]*cnt[k];
&amp;#125;
int getdown(int j,int k)&amp;#123;
    return cnt[j]-cnt[k];
&amp;#125;
signed main()&amp;#123;
    scanf(&amp;quot;%lld&amp;quot;,&amp;amp;n);
    for(int i=1;i&amp;lt;=n;++i)&amp;#123;
        scanf(&amp;quot;%lld&amp;quot;,&amp;amp;s[i]);
        cnt[i]=++tot[s[i]];
    &amp;#125;
    for(int i=1;i&amp;lt;=n;++i)&amp;#123;
        int x=s[i];
        while(q[x].size()&amp;gt;=2&amp;amp;&amp;amp;getup(q[x][top-1],i)*getdown(q[x][top-1],q[x][top])&amp;gt;=getup(q[x][top-1],q[x][top])*getdown(q[x][top-1],i))
            q[x].pop_back();
        q[x].push_back(i);
        while(q[x].size()&amp;gt;=2&amp;amp;&amp;amp;getDP(i,q[x][top])&amp;lt;=getDP(i,q[x][top-1]))
            q[x].pop_back();
        f[i]=getDP(i,q[x][top]);
    &amp;#125;
    printf(&amp;quot;%lld&amp;quot;,f[n]);
    return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;总结斜优的步骤：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;推 DP 式子&lt;/li&gt;
&lt;li&gt;对式子进行巧妙的优化，使其易于化简&lt;/li&gt;
&lt;li&gt;假设 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 优于 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，将式子化成 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{(j)-(k)}{(j)-(k)}&amp;gt; \text{or} &amp;lt;x\)&lt;/span&gt; 的形式&lt;/li&gt;
&lt;li&gt;单调队列或单调栈优化&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="斜率优化" />
        <updated>2021-02-06T15:59:00.000Z</updated>
    </entry>
</feed>
